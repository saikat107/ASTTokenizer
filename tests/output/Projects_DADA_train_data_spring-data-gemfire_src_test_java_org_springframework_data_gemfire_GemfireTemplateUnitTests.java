<METHOD_START> @ Before public void void ( ) java.lang.Exception { when ( org.springframework.data.gemfire.Region<,> . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.RegionService ) ; when ( org.springframework.data.gemfire.RegionService . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; when ( org.springframework.data.gemfire.QueryService . newQuery ( anyString ( ) ) ) . thenReturn ( org.springframework.data.gemfire.Query ) ; org.springframework.data.gemfire.GemfireTemplate = new GemfireTemplate ( org.springframework.data.gemfire.Region<,> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireTemplate org.springframework.data.gemfire.GemfireTemplate = new GemfireTemplate ( org.springframework.data.gemfire.Region<,> ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . getRegion ( ) ) . isSameAs ( org.springframework.data.gemfire.Region<,> ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . isExposeNativeRegion ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.ExpectedException . expectMessage ( STRING ) ; new GemfireTemplate ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.GemfireTemplate . setExposeNativeRegion ( true ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . isExposeNativeRegion ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . getRegion ( ) ) . isSameAs ( org.springframework.data.gemfire.Region<,> ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; org.springframework.data.gemfire.GemfireTemplate . execute ( new GemfireCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) throws org.springframework.data.gemfire.GemFireCheckedException , org.springframework.data.gemfire.GemFireException { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; assertThat ( org.springframework.data.gemfire.Region<,> ) . isSameAs ( org.springframework.data.gemfire.Region<,> ) ; return null ; } } ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) throws org.springframework.data.gemfire.GemFireCheckedException , org.springframework.data.gemfire.GemFireException { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; assertThat ( org.springframework.data.gemfire.Region<,> ) . isSameAs ( org.springframework.data.gemfire.Region<,> ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.GemfireTemplate . isExposeNativeRegion ( ) ) . isFalse ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; org.springframework.data.gemfire.GemfireTemplate . execute ( new GemfireCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) throws org.springframework.data.gemfire.GemFireCheckedException , org.springframework.data.gemfire.GemFireException { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; assertThat ( org.springframework.data.gemfire.Region<,> ) . isNotSameAs ( org.springframework.data.gemfire.Region<,> ) ; return null ; } } ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) throws org.springframework.data.gemfire.GemFireCheckedException , org.springframework.data.gemfire.GemFireException { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; assertThat ( org.springframework.data.gemfire.Region<,> ) . isNotSameAs ( org.springframework.data.gemfire.Region<,> ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.data.gemfire.GemfireTemplate . query ( java.lang.String ) ; verify ( org.springframework.data.gemfire.Region<,> , times ( NUMBER ) ) . query ( eq ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = { STRING } ; java.lang.String java.lang.String = STRING ; SelectResults org.springframework.data.gemfire.SelectResults = mock ( SelectResults .class ) ; when ( org.springframework.data.gemfire.Query . execute ( any ( java.lang.Object [] .class ) ) ) . thenReturn ( org.springframework.data.gemfire.SelectResults ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . find ( java.lang.String , java.lang.Object[] ) ) . isEqualTo ( org.springframework.data.gemfire.SelectResults ) ; verify ( org.springframework.data.gemfire.Region<,> , atLeastOnce ( ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.RegionService , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . newQuery ( eq ( java.lang.String ) ) ; verify ( org.springframework.data.gemfire.Query , times ( NUMBER ) ) . execute ( eq ( java.lang.Object[] ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.SelectResults ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = { STRING } ; java.lang.String java.lang.String = STRING ; when ( org.springframework.data.gemfire.Query . execute ( any ( java.lang.Object [] .class ) ) ) . thenReturn ( NUMBER ) ; try { org.springframework.data.gemfire.GemfireTemplate . find ( java.lang.String , java.lang.Object[] ) ; } finally { verify ( org.springframework.data.gemfire.Region<,> , atLeastOnce ( ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.RegionService , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . newQuery ( eq ( java.lang.String ) ) ; verify ( org.springframework.data.gemfire.Query , times ( NUMBER ) ) . execute ( eq ( java.lang.Object[] ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = { STRING } ; java.lang.String java.lang.String = STRING ; SelectResults org.springframework.data.gemfire.SelectResults = mock ( SelectResults .class ) ; when ( org.springframework.data.gemfire.Query . execute ( eq ( java.lang.Object[] ) ) ) . thenReturn ( org.springframework.data.gemfire.SelectResults ) ; when ( org.springframework.data.gemfire.SelectResults . asList ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.lang.Integer> ( NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate .< java.lang.Integer > findUnique ( java.lang.String , java.lang.Object[] ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.Region<,> , atLeastOnce ( ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.RegionService , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . newQuery ( eq ( java.lang.String ) ) ; verify ( org.springframework.data.gemfire.Query , times ( NUMBER ) ) . execute ( eq ( java.lang.Object[] ) ) ; verify ( org.springframework.data.gemfire.SelectResults , times ( NUMBER ) ) . asList ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = { STRING } ; java.lang.String java.lang.String = STRING ; when ( org.springframework.data.gemfire.Query . execute ( eq ( java.lang.Object[] ) ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.GemfireTemplate .< java.lang.String > findUnique ( java.lang.String , java.lang.Object[] ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.Region<,> , atLeastOnce ( ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.RegionService , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . newQuery ( eq ( java.lang.String ) ) ; verify ( org.springframework.data.gemfire.Query , times ( NUMBER ) ) . execute ( eq ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = { STRING } ; java.lang.String java.lang.String = STRING ; SelectResults org.springframework.data.gemfire.SelectResults = mock ( SelectResults .class ) ; when ( org.springframework.data.gemfire.Query . execute ( eq ( java.lang.Object[] ) ) ) . thenReturn ( org.springframework.data.gemfire.SelectResults ) ; when ( org.springframework.data.gemfire.SelectResults . asList ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ; try { assertThat ( org.springframework.data.gemfire.GemfireTemplate .< java.lang.Integer > findUnique ( java.lang.String , java.lang.Object[] ) ) . isEqualTo ( NUMBER ) ; } finally { verify ( org.springframework.data.gemfire.Region<,> , atLeastOnce ( ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.RegionService , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . newQuery ( eq ( java.lang.String ) ) ; verify ( org.springframework.data.gemfire.Query , times ( NUMBER ) ) . execute ( eq ( java.lang.Object[] ) ) ; verify ( org.springframework.data.gemfire.SelectResults , times ( NUMBER ) ) . asList ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClientCache org.springframework.data.gemfire.ClientCache = mock ( ClientCache .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = mock ( Region .class ) ; RegionAttributes < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> = mock ( RegionAttributes .class ) ; when ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> . getScope ( ) ) . thenReturn ( Scope . GLOBAL ) ; when ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.ClientCache ) ; when ( org.springframework.data.gemfire.ClientCache . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; GemfireTemplate org.springframework.data.gemfire.GemfireTemplate = new GemfireTemplate ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> ) { @ java.lang.Override boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return false ; } } ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . resolveQueryService ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> ) ) . isSameAs ( org.springframework.data.gemfire.QueryService ) ; verify ( org.springframework.data.gemfire.ClientCache , never ( ) ) . getLocalQueryService ( ) ; verify ( org.springframework.data.gemfire.ClientCache , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.ClientCache , never ( ) ) . getQueryService ( anyString ( ) ) ; verify ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getScope ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.QueryService ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClientCache org.springframework.data.gemfire.ClientCache = mock ( ClientCache .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = mock ( Region .class ) ; RegionAttributes < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> = mock ( RegionAttributes .class ) ; when ( org.springframework.data.gemfire.ClientCache . getLocalQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; when ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.ClientCache ) ; when ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> . getScope ( ) ) . thenReturn ( Scope . LOCAL ) ; GemfireTemplate org.springframework.data.gemfire.GemfireTemplate = new GemfireTemplate ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> ) { @ java.lang.Override boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return true ; } } ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . resolveQueryService ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> ) ) . isSameAs ( org.springframework.data.gemfire.QueryService ) ; verify ( org.springframework.data.gemfire.ClientCache , times ( NUMBER ) ) . getLocalQueryService ( ) ; verify ( org.springframework.data.gemfire.ClientCache , never ( ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.ClientCache , never ( ) ) . getQueryService ( anyString ( ) ) ; verify ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getScope ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.QueryService ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ClientCache org.springframework.data.gemfire.ClientCache = mock ( ClientCache .class ) ; Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = mock ( Region .class ) ; RegionAttributes < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> = mock ( RegionAttributes .class ) ; when ( org.springframework.data.gemfire.ClientCache . getQueryService ( anyString ( ) ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; when ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> ) ; when ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> . getRegionService ( ) ) . thenReturn ( org.springframework.data.gemfire.ClientCache ) ; when ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> . getPoolName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> . getScope ( ) ) . thenReturn ( Scope . LOCAL ) ; GemfireTemplate org.springframework.data.gemfire.GemfireTemplate = new GemfireTemplate ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> ) { @ java.lang.Override boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return false ; } } ; assertThat ( org.springframework.data.gemfire.GemfireTemplate . resolveQueryService ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> ) ) . isSameAs ( org.springframework.data.gemfire.QueryService ) ; verify ( org.springframework.data.gemfire.ClientCache , never ( ) ) . getLocalQueryService ( ) ; verify ( org.springframework.data.gemfire.ClientCache , never ( ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.ClientCache , times ( NUMBER ) ) . getQueryService ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getPoolName ( ) ; verify ( org.springframework.data.gemfire.RegionAttributes<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getScope ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.QueryService ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.GemfireTemplate . resolveQueryService ( org.springframework.data.gemfire.Region<,> ) ) . isEqualTo ( org.springframework.data.gemfire.QueryService ) ; verify ( org.springframework.data.gemfire.Region<,> , times ( NUMBER ) ) . getRegionService ( ) ; verify ( org.springframework.data.gemfire.Region<,> , never ( ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.RegionService , times ( NUMBER ) ) . getQueryService ( ) ; }  <METHOD_END>
