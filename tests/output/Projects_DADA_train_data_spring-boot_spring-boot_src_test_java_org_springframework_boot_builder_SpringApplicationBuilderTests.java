<METHOD_START> @ After public void void ( ) { void ( this . org.springframework.boot.builder.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.boot.builder.ApplicationContext ) { if ( org.springframework.boot.builder.ApplicationContext != null ) { if ( org.springframework.boot.builder.ApplicationContext instanceof ConfigurableApplicationContext ) { ( ( ConfigurableApplicationContext ) org.springframework.boot.builder.ApplicationContext ) . close ( ) ; } void ( org.springframework.boot.builder.ApplicationContext . getParent ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( ) . sources ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . contextClass ( StaticApplicationContext .class ) . profiles ( STRING ) . properties ( STRING ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext ) . isInstanceOf ( StaticApplicationContext .class ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( ) . sources ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . contextClass ( StaticApplicationContext .class ) . properties ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( ) . sources ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . contextClass ( StaticApplicationContext .class ) . properties ( StringUtils . splitArrayElementsIntoProperties ( new java.lang.String [] { STRING } , STRING ) ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( ) . sources ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . contextClass ( StaticApplicationContext .class ) . properties ( STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; ConfigurableEnvironment org.springframework.boot.builder.ConfigurableEnvironment = this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) ; assertThat ( org.springframework.boot.builder.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.builder.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.builder.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.builder.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( ) . sources ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . contextClass ( StaticApplicationContext .class ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext ) . isInstanceOf ( StaticApplicationContext .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . contextClass ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext .class ) ; org.springframework.boot.builder.SpringApplicationBuilder . parent ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( STRING ) ; verify ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . org.springframework.boot.builder.ConfigurableApplicationContext ( ) ) . setParent ( any ( ApplicationContext .class ) ) ; assertThat ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . boolean ( ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) . getBean ( ApplicationArguments .class ) . getNonOptionArgs ( ) ) . contains ( STRING ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getBean ( ApplicationArguments .class ) . getNonOptionArgs ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . contextClass ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext .class ) ; org.springframework.boot.builder.SpringApplicationBuilder . parent ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . build ( STRING ) . run ( STRING ) ; verify ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . org.springframework.boot.builder.ConfigurableApplicationContext ( ) ) . setParent ( any ( ApplicationContext .class ) ) ; assertThat ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . boolean ( ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) . getBean ( ApplicationArguments .class ) . getNonOptionArgs ( ) ) . contains ( STRING ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getBean ( ApplicationArguments .class ) . getNonOptionArgs ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . contextClass ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext .class ) . registerShutdownHook ( true ) ; org.springframework.boot.builder.SpringApplicationBuilder . parent ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; verify ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . org.springframework.boot.builder.ConfigurableApplicationContext ( ) ) . setParent ( any ( ApplicationContext .class ) ) ; assertThat ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . contextClass ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext .class ) ; java.lang.ClassLoader java.lang.ClassLoader = new java.net.URLClassLoader ( new java.net.URL [ NUMBER ] , java.lang.Class<? extends org.springframework.boot.builder.SpringApplicationBuilderTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.boot.builder.SpringApplicationBuilder . resourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . getClassLoader ( ) ) . isEqualTo ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . contextClass ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext .class ) ; java.lang.ClassLoader java.lang.ClassLoader = new java.net.URLClassLoader ( new java.net.URL [ NUMBER ] , java.lang.Class<? extends org.springframework.boot.builder.SpringApplicationBuilderTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.boot.builder.SpringApplicationBuilder . resourceLoader ( new DefaultResourceLoader ( java.lang.ClassLoader ) ) ; org.springframework.boot.builder.SpringApplicationBuilder . parent ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . org.springframework.boot.builder.ResourceLoader ( ) . getClassLoader ( ) ) . isEqualTo ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . child ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) ; org.springframework.boot.builder.SpringApplicationBuilder . contextClass ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext .class ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; verify ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . org.springframework.boot.builder.ConfigurableApplicationContext ( ) ) . setParent ( any ( ApplicationContext .class ) ) ; assertThat ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . profiles ( STRING ) . properties ( STRING ) . child ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . web ( WebApplicationType . NONE ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) . getEnvironment ( ) . acceptsProfiles ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . profiles ( STRING ) . properties ( STRING ) . child ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . profiles ( STRING ) . web ( WebApplicationType . NONE ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING , STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) . getEnvironment ( ) . acceptsProfiles ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . profiles ( STRING ) . properties ( STRING ) ; SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = org.springframework.boot.builder.SpringApplicationBuilder . child ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . profiles ( STRING ) . web ( WebApplicationType . NONE ) ; org.springframework.boot.builder.SpringApplicationBuilder . profiles ( STRING ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING , STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) . getEnvironment ( ) . acceptsProfiles ( STRING , STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) . getEnvironment ( ) . acceptsProfiles ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . environment ( new StandardEnvironment ( ) ) . profiles ( STRING ) . properties ( STRING ) . child ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . profiles ( STRING ) . web ( WebApplicationType . NONE ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING , STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) . getEnvironment ( ) . acceptsProfiles ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) ; org.springframework.boot.builder.SpringApplicationBuilder . parent ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) ; org.springframework.boot.builder.SpringApplicationBuilder . contextClass ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext .class ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; verify ( ( ( org.springframework.boot.builder.SpringApplicationBuilderTests.SpyApplicationContext ) this . org.springframework.boot.builder.ConfigurableApplicationContext ) . org.springframework.boot.builder.ConfigurableApplicationContext ( ) ) . setParent ( any ( ApplicationContext .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . web ( WebApplicationType . NONE ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( org.springframework.boot.builder.SpringApplicationBuilder . application ( ) . getInitializers ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . child ( org.springframework.boot.builder.SpringApplicationBuilderTests.ChildConfig .class ) . web ( WebApplicationType . NONE ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( org.springframework.boot.builder.SpringApplicationBuilder . application ( ) . getInitializers ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.builder.SpringApplicationBuilder = new SpringApplicationBuilder ( org.springframework.boot.builder.SpringApplicationBuilderTests.ExampleConfig .class ) . web ( WebApplicationType . NONE ) . initializers ( new ApplicationContextInitializer < ConfigurableApplicationContext > ( ) { @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.builder.ConfigurableApplicationContext ) {							} } ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext = org.springframework.boot.builder.SpringApplicationBuilder . run ( ) ; assertThat ( org.springframework.boot.builder.SpringApplicationBuilder . application ( ) . getInitializers ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.builder.ConfigurableApplicationContext ) {							}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.boot.builder.ApplicationContext ) { this . org.springframework.boot.builder.ConfigurableApplicationContext . setParent ( org.springframework.boot.builder.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.builder.ConfigurableApplicationContext org.springframework.boot.builder.ConfigurableApplicationContext ( ) { return this . org.springframework.boot.builder.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.boot.builder.ResourceLoader ) { super. setResourceLoader ( org.springframework.boot.builder.ResourceLoader ) ; this . org.springframework.boot.builder.ResourceLoader = org.springframework.boot.builder.ResourceLoader ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.builder.ResourceLoader org.springframework.boot.builder.ResourceLoader ( ) { return this . org.springframework.boot.builder.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. registerShutdownHook ( ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. close ( ) ; this . org.springframework.boot.builder.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.builder.ApplicationContext org.springframework.boot.builder.ApplicationContext ( ) { return this . org.springframework.boot.builder.ConfigurableApplicationContext . getParent ( ) ; }  <METHOD_END>
