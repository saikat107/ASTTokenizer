<METHOD_START> public void ( CorsConfigurationSource org.springframework.web.filter.CorsConfigurationSource ) { Assert . notNull ( org.springframework.web.filter.CorsConfigurationSource , STRING ) ; this . org.springframework.web.filter.CorsConfigurationSource = org.springframework.web.filter.CorsConfigurationSource ; }  <METHOD_END>
<METHOD_START> public void void ( CorsProcessor org.springframework.web.filter.CorsProcessor ) { Assert . notNull ( org.springframework.web.filter.CorsProcessor , STRING ) ; this . org.springframework.web.filter.CorsProcessor = org.springframework.web.filter.CorsProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.filter.HttpServletRequest , HttpServletResponse org.springframework.web.filter.HttpServletResponse , FilterChain org.springframework.web.filter.FilterChain ) throws org.springframework.web.filter.ServletException , java.io.IOException { if ( CorsUtils . isCorsRequest ( org.springframework.web.filter.HttpServletRequest ) ) { CorsConfiguration org.springframework.web.filter.CorsConfiguration = this . org.springframework.web.filter.CorsConfigurationSource . getCorsConfiguration ( org.springframework.web.filter.HttpServletRequest ) ; if ( org.springframework.web.filter.CorsConfiguration != null ) { boolean boolean = this . org.springframework.web.filter.CorsProcessor . processRequest ( org.springframework.web.filter.CorsConfiguration , org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse ) ; if ( ! boolean || CorsUtils . isPreFlightRequest ( org.springframework.web.filter.HttpServletRequest ) ) { return; } } } org.springframework.web.filter.FilterChain . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse ) ; }  <METHOD_END>
