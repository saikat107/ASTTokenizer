<METHOD_START> public void ( int int ) { super( int ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.SocketAddress java.net.SocketAddress ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . lifecycleMonitor ) { if ( ! isActive ( ) ) { this . setActive ( true ) ; this . boolean = false ; getTaskExecutor ( ) . execute ( this ) ; } } super. start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ( ) java.lang.Exception { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected void void ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.net.Socket java.net.Socket ) { TcpListener org.springframework.integration.ip.tcp.connection.TcpListener = getListener ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpListener != null ) { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . registerListener ( org.springframework.integration.ip.tcp.connection.TcpListener ) ; } org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . registerSender ( getSender ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setMapper ( getMapper ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setDeserializer ( getDeserializer ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setSerializer ( getSerializer ( ) ) ; if ( isSingleUse ( ) && getSoTimeout ( ) < NUMBER ) { try { java.net.Socket . void ( DEFAULT_REPLY_TIMEOUT ) ; } catch ( java.net.SocketException java.net.SocketException ) { logger . error ( STRING , java.net.SocketException ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.net.ServerSocket java.net.ServerSocket ) { getTcpSocketSupport ( ) . postProcessServerSocket ( java.net.ServerSocket ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int >= NUMBER , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { this . boolean = true ; return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { stop ( ) ; return NUMBER ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Exception java.lang.Exception ) { if ( getApplicationEventPublisher ( ) != null ) { getApplicationEventPublisher ( ) . publishEvent ( new TcpConnectionServerExceptionEvent ( this , java.lang.Exception ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( int int ) { final ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher = getApplicationEventPublisher ( ) ; if ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher != null ) { final TcpConnectionServerListeningEvent org.springframework.integration.ip.tcp.connection.TcpConnectionServerListeningEvent = new TcpConnectionServerListeningEvent ( this , int ) ; TaskScheduler org.springframework.integration.ip.tcp.connection.TaskScheduler = this . getTaskScheduler ( ) ; if ( org.springframework.integration.ip.tcp.connection.TaskScheduler != null ) { try { org.springframework.integration.ip.tcp.connection.TaskScheduler . schedule ( ( java.lang.Runnable ) ( ) org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher . publishEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionServerListeningEvent ) , new java.util.Date ( ) ) ; } catch ( TaskRejectedException org.springframework.integration.ip.tcp.connection.TaskRejectedException ) { org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher . publishEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionServerListeningEvent ) ; } } else { org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher . publishEvent ( org.springframework.integration.ip.tcp.connection.TcpConnectionServerListeningEvent ) ; } } }  <METHOD_END>
