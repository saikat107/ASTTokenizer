<METHOD_START> public void ( Resource org.springframework.boot.Resource ) { Assert . notNull ( org.springframework.boot.Resource , STRING ) ; Assert . isTrue ( org.springframework.boot.Resource . exists ( ) , STRING ) ; this . org.springframework.boot.Resource = org.springframework.boot.Resource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.Environment , java.lang.Class<?> < ? > java.lang.Class<?> , java.io.PrintStream java.io.PrintStream ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; try { java.lang.System . java.lang.String ( STRING , STRING ) ; void ( org.springframework.boot.Environment , java.io.PrintStream ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.boot.Log . warn ( STRING + this . org.springframework.boot.Resource + STRING + java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) + STRING + java.lang.Throwable . java.lang.String ( ) + STRING ) ; org.springframework.boot.Log . debug ( STRING , java.lang.Throwable ) ; } finally { if ( java.lang.String == null ) { java.lang.System . java.lang.String ( STRING ) ; } else { java.lang.System . java.lang.String ( STRING , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( Environment org.springframework.boot.Environment , java.io.PrintStream java.io.PrintStream )			throws java.io.IOException { PropertyResolver org.springframework.boot.PropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.Environment , STRING ) ; int int = org.springframework.boot.PropertyResolver . getProperty ( STRING , java.lang.Integer .class , NUMBER ) ; int int = org.springframework.boot.PropertyResolver . getProperty ( STRING , java.lang.Integer .class , NUMBER ) ; int int = org.springframework.boot.PropertyResolver . getProperty ( STRING , java.lang.Integer .class , NUMBER ) ; boolean boolean = org.springframework.boot.PropertyResolver . getProperty ( STRING , java.lang.Boolean .class , false ) ; java.awt.image.BufferedImage java.awt.image.BufferedImage = java.awt.image.BufferedImage ( int , int ) ; void ( java.awt.image.BufferedImage , int , boolean , java.io.PrintStream ) ; }  <METHOD_END>
<METHOD_START> private java.awt.image.BufferedImage java.awt.image.BufferedImage ( int int , int int ) throws java.io.IOException { java.io.InputStream java.io.InputStream = this . org.springframework.boot.Resource . getInputStream ( ) ; try { java.awt.image.BufferedImage java.awt.image.BufferedImage = javax.imageio.ImageIO . java.awt.image.BufferedImage ( java.io.InputStream ) ; return java.awt.image.BufferedImage ( java.awt.image.BufferedImage , int , int ) ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> private java.awt.image.BufferedImage java.awt.image.BufferedImage ( java.awt.image.BufferedImage java.awt.image.BufferedImage , int int , int int ) { if ( int < NUMBER ) { int = NUMBER ; } if ( int <= NUMBER ) { double double = ( double ) int / java.awt.image.BufferedImage . int ( ) * NUMBER ; int = ( int ) java.lang.Math . double ( java.awt.image.BufferedImage . int ( ) * double ) ; } java.awt.image.BufferedImage java.awt.image.BufferedImage = new java.awt.image.BufferedImage ( int , int , java.awt.image.BufferedImage . int ) ; java.awt.Image java.awt.Image = java.awt.image.BufferedImage . java.awt.Image ( int , int , java.awt.Image . int ) ; java.awt.image.BufferedImage . java.awt.Graphics ( ) . boolean ( java.awt.Image , NUMBER , NUMBER , null ) ; return java.awt.image.BufferedImage ; }  <METHOD_END>
<METHOD_START> private void void ( java.awt.image.BufferedImage java.awt.image.BufferedImage , int int , boolean boolean , java.io.PrintStream java.io.PrintStream ) { AnsiElement org.springframework.boot.AnsiElement = ( boolean ? AnsiBackground . BLACK : AnsiBackground . DEFAULT ) ; java.io.PrintStream . void ( AnsiOutput . encode ( AnsiColor . DEFAULT ) ) ; java.io.PrintStream . void ( AnsiOutput . encode ( org.springframework.boot.AnsiElement ) ) ; java.io.PrintStream . void ( ) ; java.io.PrintStream . void ( ) ; AnsiColor org.springframework.boot.AnsiColor = AnsiColor . DEFAULT ; for ( int int = NUMBER ; int < java.awt.image.BufferedImage . int ( ) ; int ++ ) { for ( int int = NUMBER ; int < int ; int ++ ) { java.io.PrintStream . void ( STRING ) ; } for ( int int = NUMBER ; int < java.awt.image.BufferedImage . int ( ) ; int ++ ) { java.awt.Color java.awt.Color = new java.awt.Color ( java.awt.image.BufferedImage . int ( int , int ) , false ) ; AnsiColor org.springframework.boot.AnsiColor = AnsiColors . getClosest ( java.awt.Color ) ; if ( org.springframework.boot.AnsiColor != org.springframework.boot.AnsiColor ) { java.io.PrintStream . void ( AnsiOutput . encode ( org.springframework.boot.AnsiColor ) ) ; org.springframework.boot.AnsiColor = org.springframework.boot.AnsiColor ; } java.io.PrintStream . void ( char ( java.awt.Color , boolean ) ) ; } java.io.PrintStream . void ( ) ; } java.io.PrintStream . void ( AnsiOutput . encode ( AnsiColor . DEFAULT ) ) ; java.io.PrintStream . void ( AnsiOutput . encode ( AnsiBackground . DEFAULT ) ) ; java.io.PrintStream . void ( ) ; }  <METHOD_END>
<METHOD_START> private char char ( java.awt.Color java.awt.Color , boolean boolean ) { double double = int ( java.awt.Color , boolean ) ; for ( int int = NUMBER ; int < char[] . int ; int ++ ) { if ( double >= ( int - ( int * int ) ) ) { return char[] [ int ] ; } } return char[] [ char[] . int - NUMBER ] ; }  <METHOD_END>
<METHOD_START> private int int ( java.awt.Color java.awt.Color , boolean boolean ) { double double = NUMBER ; double += double ( java.awt.Color . int ( ) , boolean , double[] [ NUMBER ] ) ; double += double ( java.awt.Color . int ( ) , boolean , double[] [ NUMBER ] ) ; double += double ( java.awt.Color . int ( ) , boolean , double[] [ NUMBER ] ) ; return ( int ) java.lang.Math . double ( ( double / NUMBER ) * NUMBER ) ; }  <METHOD_END>
<METHOD_START> private double double ( int int , boolean boolean , double double ) { return ( boolean ? NUMBER - int : int ) * double ; }  <METHOD_END>
