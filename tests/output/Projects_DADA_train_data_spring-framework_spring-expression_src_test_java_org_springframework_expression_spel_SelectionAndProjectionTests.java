<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ListTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ListTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ListTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.SetTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.SetTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.SetTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.IterableTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ArrayTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; TypedValue org.springframework.expression.spel.TypedValue = new TypedValue ( java.lang.Object ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.TypedValue . getTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; java.lang.Integer [] java.lang.Integer[] = ( java.lang.Integer [] ) java.lang.Object ; assertEquals ( NUMBER , java.lang.Integer[] . int ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ArrayTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ArrayTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ArrayTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; TypedValue org.springframework.expression.spel.TypedValue = new TypedValue ( java.lang.Object ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.TypedValue . getTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; java.lang.Integer [] java.lang.Integer[] = ( java.lang.Integer [] ) java.lang.Object ; assertEquals ( NUMBER , java.lang.Integer[] . int ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ArrayTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.ArrayTestBean ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.MapTestBean ( ) ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.MapTestBean ( ) ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( new org.springframework.expression.spel.SelectionAndProjectionTests.MapTestBean ( ) ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean . java.util.List<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean . java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean . java.lang.Iterable<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.EvaluationContext . setVariable ( STRING , org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean . org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean[] ( ) ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; TypedValue org.springframework.expression.spel.TypedValue = new TypedValue ( java.lang.Object ) ; assertEquals ( java.lang.Number .class , org.springframework.expression.spel.TypedValue . getTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; java.lang.Number [] java.lang.Number[] = ( java.lang.Number [] ) java.lang.Object ; assertEquals ( NUMBER , java.lang.Number[] . int ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Number[] [ NUMBER ] ) ; assertEquals ( NUMBER , java.lang.Number[] [ NUMBER ] ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Number[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( ) { return java.util.List<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Set<java.lang.Integer> . boolean ( int ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.Integer> < java.lang.Integer > java.util.Set<java.lang.Integer> ( ) { return java.util.Set<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Set<java.lang.Integer> . boolean ( int ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Iterable<java.lang.Integer> < java.lang.Integer > java.lang.Iterable<java.lang.Integer> ( ) { return new java.lang.Iterable<java.lang.Integer> < java.lang.Integer > ( ) { @ java.lang.Override public java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> ( ) { return java.util.Set<java.lang.Integer> . java.util.Iterator<java.lang.Integer> ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<java.lang.Integer> < java.lang.Integer > java.util.Iterator<java.lang.Integer> ( ) { return java.util.Set<java.lang.Integer> . java.util.Iterator<java.lang.Integer> ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { int[] [ int ] = int ; java.lang.Integer[] [ int ] = int ; } }  <METHOD_END>
<METHOD_START> public int [] int[] ( ) { return int[] ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer [] java.lang.Integer[] ( ) { return java.lang.Integer[] ; }  <METHOD_END>
<METHOD_START> void ( ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Number java.lang.Number ) { this . org.springframework.expression.spel.SelectionAndProjectionTests.IntegerWrapper = new org.springframework.expression.spel.SelectionAndProjectionTests.IntegerWrapper ( java.lang.Number ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.expression.spel.SelectionAndProjectionTests.IntegerWrapper org.springframework.expression.spel.SelectionAndProjectionTests.IntegerWrapper ( ) { return this . org.springframework.expression.spel.SelectionAndProjectionTests.IntegerWrapper ; }  <METHOD_END>
<METHOD_START> static java.util.List<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > java.util.List<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) { java.util.List<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > java.util.List<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> = new java.util.ArrayList<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> . boolean ( new org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean ( int + NUMBER ) ) ; } return java.util.List<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ; }  <METHOD_END>
<METHOD_START> static java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) { java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> = new java.util.LinkedHashSet<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> . boolean ( new org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean ( int + NUMBER ) ) ; } return java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ; }  <METHOD_END>
<METHOD_START> static java.lang.Iterable<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > java.lang.Iterable<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) { final java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> = java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) ; return new java.lang.Iterable<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > ( ) { @ java.lang.Override public java.util.Iterator<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > java.util.Iterator<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) { return java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> . java.util.Iterator<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> < org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean > java.util.Iterator<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) { return java.util.Set<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> . java.util.Iterator<org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean> ( ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean [] org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean[] ( ) { org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean [] org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean[] = new org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean [ NUMBER ] ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { if ( int == NUMBER ) { org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean[] [ int ] = new org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean ( NUMBER ) ; } else { org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean[] [ int ] = new org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean ( int + NUMBER ) ; } } return org.springframework.expression.spel.SelectionAndProjectionTests.IntegerTestBean[] ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Number java.lang.Number ) { this . java.lang.Number = java.lang.Number ; }  <METHOD_END>
<METHOD_START> public java.lang.Number java.lang.Number ( ) { return this . java.lang.Number ; }  <METHOD_END>
