<METHOD_START> @ Before public void void ( ) { java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setReplyChannel ( org.springframework.integration.aggregator.scenarios.PollableChannel ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . void ( MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setReplyChannelName ( STRING ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.integration.aggregator.scenarios.Message<?> ) { assertNull ( org.springframework.integration.aggregator.scenarios.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.scenarios.MessageChannel . send ( org.springframework.integration.aggregator.scenarios.Message<> ) ; Message < ? > org.springframework.integration.aggregator.scenarios.Message<?> = org.springframework.integration.aggregator.scenarios.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.scenarios.Message<> ) ; assertTrue ( org.springframework.integration.aggregator.scenarios.Message<> . getPayload ( ) instanceof java.util.List ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.integration.aggregator.scenarios.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertTrue ( java.util.List<> . boolean ( STRING ) ) ; assertTrue ( java.util.List<> . boolean ( STRING ) ) ; }  <METHOD_END>
