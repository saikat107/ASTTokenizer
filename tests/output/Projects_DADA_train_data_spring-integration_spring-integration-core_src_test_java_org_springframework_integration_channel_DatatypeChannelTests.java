<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.QueueChannel ( java.lang.String .class ) ; assertTrue ( org.springframework.integration.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { MessageChannel org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.QueueChannel ( java.lang.Integer .class ) ; org.springframework.integration.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = org.springframework.integration.channel.QueueChannel ( java.lang.Integer .class ) ; ConversionService org.springframework.integration.channel.ConversionService = new DefaultConversionService ( ) ; DefaultDatatypeChannelMessageConverter org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter = new DefaultDatatypeChannelMessageConverter ( ) ; org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter . setConversionService ( org.springframework.integration.channel.ConversionService ) ; org.springframework.integration.channel.QueueChannel . setMessageConverter ( org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = org.springframework.integration.channel.QueueChannel ( java.lang.Integer .class ) ; ConversionService org.springframework.integration.channel.ConversionService = new DefaultConversionService ( ) ; DefaultDatatypeChannelMessageConverter org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter = new DefaultDatatypeChannelMessageConverter ( ) ; org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter . setConversionService ( org.springframework.integration.channel.ConversionService ) ; org.springframework.integration.channel.QueueChannel . setMessageConverter ( org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.Boolean > ( java.lang.Boolean . java.lang.Boolean ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = org.springframework.integration.channel.QueueChannel ( java.lang.Integer .class ) ; GenericConversionService org.springframework.integration.channel.GenericConversionService = new DefaultConversionService ( ) ; org.springframework.integration.channel.GenericConversionService . addConverter ( new Converter < java.lang.Boolean , java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : NUMBER ; } } ) ; DefaultDatatypeChannelMessageConverter org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter = new DefaultDatatypeChannelMessageConverter ( ) ; org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter . setConversionService ( org.springframework.integration.channel.GenericConversionService ) ; org.springframework.integration.channel.QueueChannel . setMessageConverter ( org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.Boolean > ( java.lang.Boolean . java.lang.Boolean ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.QueueChannel . receive ( ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.channel.GenericApplicationContext = new GenericApplicationContext ( ) ; Converter < java.lang.Boolean , java.lang.Integer > org.springframework.integration.channel.Converter<java.lang.Boolean,java.lang.Integer> = new Converter < java.lang.Boolean , java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : NUMBER ; } } ; BeanDefinitionBuilder org.springframework.integration.channel.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ConversionServiceFactoryBean .class ) ; org.springframework.integration.channel.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Collections . java.util.Set ( org.springframework.integration.channel.Converter<java.lang.Boolean,java.lang.Integer> ) ) ; org.springframework.integration.channel.GenericApplicationContext . registerBeanDefinition ( IntegrationUtils . INTEGRATION_CONVERSION_SERVICE_BEAN_NAME , org.springframework.integration.channel.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; BeanDefinition org.springframework.integration.channel.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( DefaultDatatypeChannelMessageConverter .class ) . getBeanDefinition ( ) ; org.springframework.integration.channel.GenericApplicationContext . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_DATATYPE_CHANNEL_MESSAGE_CONVERTER_BEAN_NAME , org.springframework.integration.channel.BeanDefinition ) ; BeanDefinitionBuilder org.springframework.integration.channel.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( QueueChannel .class ) ; org.springframework.integration.channel.BeanDefinitionBuilder . addPropertyValue ( STRING , STRING ) ; org.springframework.integration.channel.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.channel.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; org.springframework.integration.channel.GenericApplicationContext . refresh ( ) ; QueueChannel org.springframework.integration.channel.QueueChannel = org.springframework.integration.channel.GenericApplicationContext . getBean ( STRING , QueueChannel .class ) ; assertSame ( org.springframework.integration.channel.GenericApplicationContext . getBean ( ConversionService .class ) , TestUtils . getPropertyValue ( org.springframework.integration.channel.QueueChannel , STRING ) ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.Boolean > ( java.lang.Boolean . java.lang.Boolean ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.QueueChannel . receive ( ) . getPayload ( ) ) ; org.springframework.integration.channel.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.channel.GenericApplicationContext = new GenericApplicationContext ( ) ; Converter < java.lang.Boolean , java.lang.Integer > org.springframework.integration.channel.Converter<java.lang.Boolean,java.lang.Integer> = new Converter < java.lang.Boolean , java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : NUMBER ; } } ; GenericConversionService org.springframework.integration.channel.GenericConversionService = new DefaultConversionService ( ) ; org.springframework.integration.channel.GenericConversionService . addConverter ( new Converter < java.lang.Boolean , java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : - NUMBER ; } } ) ; BeanDefinitionBuilder org.springframework.integration.channel.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ConversionServiceFactoryBean .class ) ; org.springframework.integration.channel.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Collections . java.util.Set ( org.springframework.integration.channel.Converter<java.lang.Boolean,java.lang.Integer> ) ) ; org.springframework.integration.channel.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.channel.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; BeanDefinitionBuilder org.springframework.integration.channel.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DefaultDatatypeChannelMessageConverter .class ) ; org.springframework.integration.channel.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.channel.GenericConversionService ) ; org.springframework.integration.channel.GenericApplicationContext . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_DATATYPE_CHANNEL_MESSAGE_CONVERTER_BEAN_NAME , org.springframework.integration.channel.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; BeanDefinitionBuilder org.springframework.integration.channel.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( QueueChannel .class ) ; org.springframework.integration.channel.BeanDefinitionBuilder . addPropertyValue ( STRING , STRING ) ; org.springframework.integration.channel.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.channel.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; org.springframework.integration.channel.GenericApplicationContext . refresh ( ) ; QueueChannel org.springframework.integration.channel.QueueChannel = org.springframework.integration.channel.GenericApplicationContext . getBean ( STRING , QueueChannel .class ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.Boolean > ( java.lang.Boolean . java.lang.Boolean ) ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.QueueChannel . receive ( ) . getPayload ( ) ) ; org.springframework.integration.channel.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Boolean java.lang.Boolean ) { return java.lang.Boolean ? NUMBER : - NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.QueueChannel ( java.lang.String .class , java.lang.Integer .class ) ; assertTrue ( org.springframework.integration.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; assertTrue ( org.springframework.integration.channel.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.channel.MessageChannel . send ( new GenericMessage < java.util.Date > ( new java.util.Date ( ) ) ) ; } catch ( MessageDeliveryException org.springframework.integration.channel.MessageDeliveryException ) { java.lang.Exception = org.springframework.integration.channel.MessageDeliveryException ; } assertNotNull ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.QueueChannel ( java.lang.RuntimeException .class ) ; assertTrue ( org.springframework.integration.channel.MessageChannel . send ( new ErrorMessage ( new MessagingException ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { MessageChannel org.springframework.integration.channel.MessageChannel = org.springframework.integration.channel.QueueChannel ( java.lang.RuntimeException .class ) ; org.springframework.integration.channel.MessageChannel . send ( new ErrorMessage ( new java.lang.Exception ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = org.springframework.integration.channel.QueueChannel ( org.springframework.integration.channel.DatatypeChannelTests.Foo .class ) ; DefaultConversionService org.springframework.integration.channel.DefaultConversionService = new DefaultConversionService ( ) ; org.springframework.integration.channel.DefaultConversionService . addConverter ( new org.springframework.integration.channel.DatatypeChannelTests.StringToBarConverter ( ) ) ; org.springframework.integration.channel.DefaultConversionService . addConverter ( new org.springframework.integration.channel.DatatypeChannelTests.IntegerToBazConverter ( ) ) ; DefaultDatatypeChannelMessageConverter org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter = new DefaultDatatypeChannelMessageConverter ( ) ; org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter . setConversionService ( org.springframework.integration.channel.DefaultConversionService ) ; org.springframework.integration.channel.QueueChannel . setMessageConverter ( org.springframework.integration.channel.DefaultDatatypeChannelMessageConverter ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.channel.Message<> . getPayload ( ) , instanceOf ( org.springframework.integration.channel.DatatypeChannelTests.Bar .class ) ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ) ; org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.channel.Message<> . getPayload ( ) , instanceOf ( org.springframework.integration.channel.DatatypeChannelTests.Baz .class ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.channel.QueueChannel org.springframework.integration.channel.QueueChannel ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.channel.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.channel.QueueChannel . setDatatypes ( java.lang.Class<?>[] ) ; return org.springframework.integration.channel.QueueChannel ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.integration.channel.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.integration.channel.ConvertiblePair> ( ) { java.util.Set<org.springframework.integration.channel.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.integration.channel.ConvertiblePair> = new java.util.HashSet<org.springframework.integration.channel.ConvertiblePair> < ConvertiblePair > ( ) ; java.util.Set<org.springframework.integration.channel.ConvertiblePair> . add ( new ConvertiblePair ( java.lang.String .class , org.springframework.integration.channel.DatatypeChannelTests.Foo .class ) ) ; java.util.Set<org.springframework.integration.channel.ConvertiblePair> . add ( new ConvertiblePair ( java.lang.String .class , org.springframework.integration.channel.DatatypeChannelTests.Bar .class ) ) ; return java.util.Set<org.springframework.integration.channel.ConvertiblePair> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.integration.channel.TypeDescriptor , TypeDescriptor org.springframework.integration.channel.TypeDescriptor ) { return new org.springframework.integration.channel.DatatypeChannelTests.Bar ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.integration.channel.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.integration.channel.ConvertiblePair> ( ) { java.util.Set<org.springframework.integration.channel.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.integration.channel.ConvertiblePair> = new java.util.HashSet<org.springframework.integration.channel.ConvertiblePair> < ConvertiblePair > ( ) ; java.util.Set<org.springframework.integration.channel.ConvertiblePair> . add ( new ConvertiblePair ( java.lang.Integer .class , org.springframework.integration.channel.DatatypeChannelTests.Foo .class ) ) ; java.util.Set<org.springframework.integration.channel.ConvertiblePair> . add ( new ConvertiblePair ( java.lang.Integer .class , org.springframework.integration.channel.DatatypeChannelTests.Baz .class ) ) ; return java.util.Set<org.springframework.integration.channel.ConvertiblePair> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.integration.channel.TypeDescriptor , TypeDescriptor org.springframework.integration.channel.TypeDescriptor ) { return new org.springframework.integration.channel.DatatypeChannelTests.Baz ( ) ; }  <METHOD_END>
