<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.channel.TransactionSynchronizationQueueChannelTests.Service . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.PollableChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ; assertTrue ( org.springframework.integration.channel.TransactionSynchronizationQueueChannelTests.Service . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; assertSame ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.channel.TransactionSynchronizationQueueChannelTests.Service . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.channel.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( org.springframework.integration.channel.TransactionSynchronizationQueueChannelTests.Service . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.channel.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.channel.TransactionSynchronizationQueueChannelTests.Service . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; Message < java.lang.String > org.springframework.integration.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.channel.PollableChannel . send ( org.springframework.integration.channel.Message<java.lang.String> ) ; assertTrue ( org.springframework.integration.channel.TransactionSynchronizationQueueChannelTests.Service . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.channel.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.util.concurrent.CountDownLatch . void ( ) ; if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.RuntimeException ( STRING ) ; } }  <METHOD_END>
