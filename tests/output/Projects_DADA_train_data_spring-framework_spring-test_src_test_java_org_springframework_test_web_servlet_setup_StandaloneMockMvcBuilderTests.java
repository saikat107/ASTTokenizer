<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder = new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.PlaceholderController ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . addPlaceholderValue ( STRING , STRING ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . build ( ) ; RequestMappingHandlerMapping org.springframework.test.web.servlet.setup.RequestMappingHandlerMapping = org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . org.springframework.test.web.servlet.setup.WebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; MockHttpServletRequest org.springframework.test.web.servlet.setup.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerExecutionChain org.springframework.test.web.servlet.setup.HandlerExecutionChain = org.springframework.test.web.servlet.setup.RequestMappingHandlerMapping . getHandler ( org.springframework.test.web.servlet.setup.MockHttpServletRequest ) ; assertNotNull ( org.springframework.test.web.servlet.setup.HandlerExecutionChain ) ; assertEquals ( STRING , ( ( HandlerMethod ) org.springframework.test.web.servlet.setup.HandlerExecutionChain . getHandler ( ) ) . getMethod ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder = new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.PersonController ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . setUseSuffixPatternMatch ( false ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . build ( ) ; RequestMappingHandlerMapping org.springframework.test.web.servlet.setup.RequestMappingHandlerMapping = org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . org.springframework.test.web.servlet.setup.WebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; MockHttpServletRequest org.springframework.test.web.servlet.setup.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerExecutionChain org.springframework.test.web.servlet.setup.HandlerExecutionChain = org.springframework.test.web.servlet.setup.RequestMappingHandlerMapping . getHandler ( org.springframework.test.web.servlet.setup.MockHttpServletRequest ) ; assertNotNull ( org.springframework.test.web.servlet.setup.HandlerExecutionChain ) ; assertEquals ( STRING , ( ( HandlerMethod ) org.springframework.test.web.servlet.setup.HandlerExecutionChain . getHandler ( ) ) . getMethod ( ) . getName ( ) ) ; org.springframework.test.web.servlet.setup.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.test.web.servlet.setup.HandlerExecutionChain = org.springframework.test.web.servlet.setup.RequestMappingHandlerMapping . getHandler ( org.springframework.test.web.servlet.setup.MockHttpServletRequest ) ; assertNull ( org.springframework.test.web.servlet.setup.HandlerExecutionChain ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder = new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.PlaceholderController ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . addPlaceholderValue ( STRING , STRING ) ; WebApplicationContext org.springframework.test.web.servlet.setup.WebApplicationContext = org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . org.springframework.test.web.servlet.setup.WebApplicationContext ( ) ; assertEquals ( org.springframework.test.web.servlet.setup.WebApplicationContext , WebApplicationContextUtils . getRequiredWebApplicationContext ( org.springframework.test.web.servlet.setup.WebApplicationContext . getServletContext ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder = MockMvcBuilders . standaloneSetup ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.PersonController ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder . addFilters ( ( Filter [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder = MockMvcBuilders . standaloneSetup ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.PersonController ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder . addFilters ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.ContinueFilter ( ) , ( Filter ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder = MockMvcBuilders . standaloneSetup ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.PersonController ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder . addFilter ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.ContinueFilter ( ) , ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder = MockMvcBuilders . standaloneSetup ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.PersonController ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder . addFilter ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.ContinueFilter ( ) , ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder = new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.PersonController ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . build ( ) ; SpringHandlerInstantiator org.springframework.test.web.servlet.setup.SpringHandlerInstantiator = new SpringHandlerInstantiator ( org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilderTests.TestStandaloneMockMvcBuilder . org.springframework.test.web.servlet.setup.WebApplicationContext . getAutowireCapableBeanFactory ( ) ) ; JsonSerializer org.springframework.test.web.servlet.setup.JsonSerializer = org.springframework.test.web.servlet.setup.SpringHandlerInstantiator . serializerInstance ( null , null , UnknownSerializer .class ) ; assertNotNull ( org.springframework.test.web.servlet.setup.JsonSerializer ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) private void void ( ) { }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object ... java.lang.Object[] ) { super( java.lang.Object[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.test.web.servlet.setup.WebApplicationContext org.springframework.test.web.servlet.setup.WebApplicationContext ( ) { this . org.springframework.test.web.servlet.setup.WebApplicationContext = super. initWebAppContext ( ) ; return this . org.springframework.test.web.servlet.setup.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.test.web.servlet.setup.HttpServletRequest , HttpServletResponse org.springframework.test.web.servlet.setup.HttpServletResponse , FilterChain org.springframework.test.web.servlet.setup.FilterChain ) throws org.springframework.test.web.servlet.setup.ServletException , java.io.IOException { org.springframework.test.web.servlet.setup.FilterChain . doFilter ( org.springframework.test.web.servlet.setup.HttpServletRequest , org.springframework.test.web.servlet.setup.HttpServletResponse ) ; }  <METHOD_END>
