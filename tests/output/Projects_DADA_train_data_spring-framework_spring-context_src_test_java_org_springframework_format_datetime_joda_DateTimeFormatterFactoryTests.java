<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( ) , is ( equalTo ( DateTimeFormat . mediumDateTime ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.format.datetime.joda.DateTimeFormatterFactory = new DateTimeFormatterFactory ( STRING ) ; DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatter . print ( org.springframework.format.datetime.joda.DateTime ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( null ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatter , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = DateTimeFormat . forStyle ( STRING ) ; DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( org.springframework.format.datetime.joda.DateTimeFormatter ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatter , is ( sameInstance ( org.springframework.format.datetime.joda.DateTimeFormatter ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.format.datetime.joda.DateTimeFormatterFactory . setStyle ( STRING ) ; java.lang.String java.lang.String = org.springframework.format.datetime.joda.DateTimeFormatter ( org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( ) ) . print ( org.springframework.format.datetime.joda.DateTime ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; org.springframework.format.datetime.joda.DateTimeFormatterFactory . setIso ( ISO . DATE ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatter ( org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( ) ) . print ( org.springframework.format.datetime.joda.DateTime ) , is ( STRING ) ) ; org.springframework.format.datetime.joda.DateTimeFormatterFactory . setPattern ( STRING ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( ) . print ( org.springframework.format.datetime.joda.DateTime ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.format.datetime.joda.DateTimeFormatterFactory . setPattern ( STRING ) ; org.springframework.format.datetime.joda.DateTimeFormatterFactory . setTimeZone ( java.util.TimeZone ) ; DateTimeZone org.springframework.format.datetime.joda.DateTimeZone = DateTimeZone . forTimeZone ( java.util.TimeZone ) ; DateTime org.springframework.format.datetime.joda.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.format.datetime.joda.DateTimeZone ) ; java.lang.String java.lang.String = ( java.util.TimeZone . boolean ( java.util.TimeZone ) ? STRING : STRING ) ; assertThat ( org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( ) . print ( org.springframework.format.datetime.joda.DateTime ) , is ( STRING + java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.format.datetime.joda.DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ( DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ) { return org.springframework.format.datetime.joda.DateTimeFormatter . withLocale ( java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
