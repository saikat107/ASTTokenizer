<METHOD_START> void ( ) {	}  <METHOD_END>
<METHOD_START> void ( byte [] byte[] , int int , AsciiBytes org.springframework.boot.loader.jar.AsciiBytes , byte [] byte[] , AsciiBytes org.springframework.boot.loader.jar.AsciiBytes , long long ) { super(); this . byte[] = byte[] ; this . int = int ; this . org.springframework.boot.loader.jar.AsciiBytes = org.springframework.boot.loader.jar.AsciiBytes ; this . byte[] = byte[] ; this . org.springframework.boot.loader.jar.AsciiBytes = org.springframework.boot.loader.jar.AsciiBytes ; this . long = long ; }  <METHOD_END>
<METHOD_START> void void ( byte [] byte[] , int int , RandomAccessData org.springframework.boot.loader.jar.RandomAccessData , int int , JarEntryFilter org.springframework.boot.loader.jar.JarEntryFilter ) throws java.io.IOException { this . byte[] = byte[] ; this . int = int ; long long = Bytes . littleEndianValue ( byte[] , int + NUMBER , NUMBER ) ; long long = Bytes . littleEndianValue ( byte[] , int + NUMBER , NUMBER ) ; long long = Bytes . littleEndianValue ( byte[] , int + NUMBER , NUMBER ) ; this . long = Bytes . littleEndianValue ( byte[] , int + NUMBER , NUMBER ) ; int += NUMBER ; if ( org.springframework.boot.loader.jar.RandomAccessData != null ) { byte[] = Bytes . get ( org.springframework.boot.loader.jar.RandomAccessData . getSubsection ( int + NUMBER , long + long + long ) ) ; int = NUMBER ; } this . org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( byte[] , int , ( int ) long ) ; if ( org.springframework.boot.loader.jar.JarEntryFilter != null ) { this . org.springframework.boot.loader.jar.AsciiBytes = org.springframework.boot.loader.jar.JarEntryFilter . apply ( this . org.springframework.boot.loader.jar.AsciiBytes ) ; } this . byte[] = byte[] ; this . org.springframework.boot.loader.jar.AsciiBytes = org.springframework.boot.loader.jar.AsciiBytes ; if ( long > NUMBER ) { this . byte[] = new byte [ ( int ) long ] ; java.lang.System . void ( byte[] , ( int ) ( int + long ) , this . byte[] , NUMBER , this . byte[] . int ) ; } if ( long > NUMBER ) { this . org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( byte[] , ( int ) ( int + long + long ) , ( int ) long ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ( ) { return this . org.springframework.boot.loader.jar.AsciiBytes ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return this . org.springframework.boot.loader.jar.AsciiBytes . equals ( new AsciiBytes ( java.lang.String == null ? java.lang.String : java.lang.String + java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.boot.loader.jar.AsciiBytes . endsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( int ) Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { long long = Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; long long = Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; return java.util.Calendar ( long , long ) . long ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Calendar java.util.Calendar ( long long , long long ) { int int = ( int ) ( ( long >> NUMBER ) & NUMBER ) + NUMBER ; int int = ( int ) ( ( long >> NUMBER ) & NUMBER ) - NUMBER ; int int = ( int ) ( long & NUMBER ) ; int int = ( int ) ( ( long >> NUMBER ) & NUMBER ) ; int int = ( int ) ( ( long >> NUMBER ) & NUMBER ) ; int int = ( int ) ( ( long << NUMBER ) & NUMBER ) ; return new java.util.GregorianCalendar ( int , int , int , int , int , int ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return Bytes . littleEndianValue ( this . byte[] , this . int + NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return this . byte[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ( ) { return this . org.springframework.boot.loader.jar.AsciiBytes ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.loader.jar.CentralDirectoryFileHeader org.springframework.boot.loader.jar.CentralDirectoryFileHeader ( ) { byte [] byte[] = new byte [ NUMBER ] ; java.lang.System . void ( this . byte[] , this . int , byte[] , NUMBER , byte[] . int ) ; return new org.springframework.boot.loader.jar.CentralDirectoryFileHeader ( byte[] , NUMBER , this . org.springframework.boot.loader.jar.AsciiBytes , byte[] , this . org.springframework.boot.loader.jar.AsciiBytes , this . long ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.loader.jar.CentralDirectoryFileHeader org.springframework.boot.loader.jar.CentralDirectoryFileHeader ( RandomAccessData org.springframework.boot.loader.jar.RandomAccessData , int int , JarEntryFilter org.springframework.boot.loader.jar.JarEntryFilter ) throws java.io.IOException { org.springframework.boot.loader.jar.CentralDirectoryFileHeader org.springframework.boot.loader.jar.CentralDirectoryFileHeader = new org.springframework.boot.loader.jar.CentralDirectoryFileHeader ( ) ; byte [] byte[] = Bytes . get ( org.springframework.boot.loader.jar.RandomAccessData . getSubsection ( int , NUMBER ) ) ; org.springframework.boot.loader.jar.CentralDirectoryFileHeader . void ( byte[] , NUMBER , org.springframework.boot.loader.jar.RandomAccessData , int , org.springframework.boot.loader.jar.JarEntryFilter ) ; return org.springframework.boot.loader.jar.CentralDirectoryFileHeader ; }  <METHOD_END>
