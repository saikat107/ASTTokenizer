<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource = new org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource ( ) ; org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . setRefreshCheckDelay ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . int ( ) ) ; assertSame ( STRING , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource = new org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource ( true ) ; org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . setRefreshCheckDelay ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . int ( ) ) ; assertNotSame ( STRING , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource = new org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource ( true ) ; org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . setRefreshCheckDelay ( - NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . int ( ) ) ; assertSame ( STRING , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource = new org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource ( true ) ; org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . setRefreshCheckDelay ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; assertEquals ( STRING , java.lang.Object , java.lang.Object ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; assertEquals ( STRING , java.lang.Object , java.lang.Object ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; assertNotNull ( STRING , java.lang.Object ) ; assertFalse ( STRING , java.lang.Object . boolean ( java.lang.Object ) ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; assertEquals ( STRING , java.lang.Object , java.lang.Object ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.aop.target.dynamic.RefreshableTargetSourceTests.CountingRefreshableTargetSource . getTarget ( ) ; assertFalse ( STRING , java.lang.Object . boolean ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { this . int ++ ; return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
