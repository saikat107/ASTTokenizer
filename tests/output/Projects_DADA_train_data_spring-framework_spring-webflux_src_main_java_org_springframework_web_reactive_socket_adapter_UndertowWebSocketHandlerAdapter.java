<METHOD_START> public void ( UndertowWebSocketSession org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession ) { Assert . notNull ( org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession , STRING ) ; this . org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession = org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketChannel org.springframework.web.reactive.socket.adapter.WebSocketChannel , BufferedTextMessage org.springframework.web.reactive.socket.adapter.BufferedTextMessage ) { this . org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession . handleMessage ( Type . TEXT , org.springframework.web.reactive.socket.adapter.WebSocketMessage ( Type . TEXT , org.springframework.web.reactive.socket.adapter.BufferedTextMessage . getData ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketChannel org.springframework.web.reactive.socket.adapter.WebSocketChannel , BufferedBinaryMessage org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage ) { this . org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession . handleMessage ( Type . BINARY , org.springframework.web.reactive.socket.adapter.WebSocketMessage ( Type . BINARY , org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage . getData ( ) . getResource ( ) ) ) ; org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage . getData ( ) . free ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketChannel org.springframework.web.reactive.socket.adapter.WebSocketChannel , BufferedBinaryMessage org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage ) { this . org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession . handleMessage ( Type . PONG , org.springframework.web.reactive.socket.adapter.WebSocketMessage ( Type . PONG , org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage . getData ( ) . getResource ( ) ) ) ; org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage . getData ( ) . free ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketChannel org.springframework.web.reactive.socket.adapter.WebSocketChannel , BufferedBinaryMessage org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage ) { CloseMessage org.springframework.web.reactive.socket.adapter.CloseMessage = new CloseMessage ( org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage . getData ( ) . getResource ( ) ) ; this . org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession . handleClose ( new CloseStatus ( org.springframework.web.reactive.socket.adapter.CloseMessage . getCode ( ) , org.springframework.web.reactive.socket.adapter.CloseMessage . getReason ( ) ) ) ; org.springframework.web.reactive.socket.adapter.BufferedBinaryMessage . getData ( ) . free ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketChannel org.springframework.web.reactive.socket.adapter.WebSocketChannel , java.lang.Throwable java.lang.Throwable ) { this . org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession . handleError ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( Type org.springframework.web.reactive.socket.adapter.Type , T T ) { if ( Type . TEXT . equals ( org.springframework.web.reactive.socket.adapter.Type ) ) { byte [] byte[] = ( ( java.lang.String ) T ) . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; return new WebSocketMessage ( Type . TEXT , org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession . bufferFactory ( ) . wrap ( byte[] ) ) ; } else if ( Type . BINARY . equals ( org.springframework.web.reactive.socket.adapter.Type ) ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession . bufferFactory ( ) . allocateBuffer ( ) . write ( ( java.nio.ByteBuffer [] ) T ) ; return new WebSocketMessage ( Type . BINARY , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; } else if ( Type . PONG . equals ( org.springframework.web.reactive.socket.adapter.Type ) ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.UndertowWebSocketSession . bufferFactory ( ) . allocateBuffer ( ) . write ( ( java.nio.ByteBuffer [] ) T ) ; return new WebSocketMessage ( Type . PONG , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + T ) ; } }  <METHOD_END>
