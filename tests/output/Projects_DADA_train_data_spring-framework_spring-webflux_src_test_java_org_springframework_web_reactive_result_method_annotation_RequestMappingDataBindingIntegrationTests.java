<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ( ) { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.result.method.annotation.RequestMappingDataBindingIntegrationTests.WebConfig .class ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , performPost ( STRING , new HttpHeaders ( ) , null , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; assertEquals ( STRING , performPost ( STRING , MediaType . APPLICATION_FORM_URLENCODED , org.springframework.web.reactive.result.method.annotation.MultiValueMap<java.lang.String,java.lang.String> , MediaType . TEXT_PLAIN , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.reactive.result.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { java.util.Optional<java.lang.String> . void ( java.lang.String -> { CustomDateEditor org.springframework.web.reactive.result.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.reactive.result.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.reactive.result.method.annotation.CustomDateEditor ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public java.lang.String java.lang.String ( @ RequestParam java.util.Date java.util.Date ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingDataBindingIntegrationTests.Foo> < org.springframework.web.reactive.result.method.annotation.RequestMappingDataBindingIntegrationTests.Foo > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.RequestMappingDataBindingIntegrationTests.Foo> ( @ PathVariable ( STRING ) java.util.Optional<java.lang.Long> < java.lang.Long > java.util.Optional<java.lang.Long> ) { return java.util.Optional<java.lang.Long> . java.util.Optional<java.lang.Object> ( java.lang.Long -> Mono . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingDataBindingIntegrationTests.Foo ( java.lang.Long ) ) ) . orElse ( Mono . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public java.lang.String java.lang.String ( @ ModelAttribute org.springframework.web.reactive.result.method.annotation.RequestMappingDataBindingIntegrationTests.Foo org.springframework.web.reactive.result.method.annotation.RequestMappingDataBindingIntegrationTests.Foo , Errors org.springframework.web.reactive.result.method.annotation.Errors ) { return ( org.springframework.web.reactive.result.method.annotation.Errors . hasErrors ( ) ? STRING : STRING + org.springframework.web.reactive.result.method.annotation.RequestMappingDataBindingIntegrationTests.Foo ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.Long + STRING + this . java.lang.String + STRING + this . int + STRING ; }  <METHOD_END>
