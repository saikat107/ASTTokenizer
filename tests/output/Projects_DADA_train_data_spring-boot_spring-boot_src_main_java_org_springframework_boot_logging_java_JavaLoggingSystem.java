<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. beforeInitialize ( ) ; java.util.logging.Logger . java.util.logging.Logger ( STRING ) . void ( java.util.logging.Level . java.util.logging.Level ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( LoggingInitializationContext org.springframework.boot.logging.java.LoggingInitializationContext , LogFile org.springframework.boot.logging.java.LogFile ) { if ( org.springframework.boot.logging.java.LogFile != null ) { void ( getPackagedConfigFile ( STRING ) , org.springframework.boot.logging.java.LogFile ) ; } else { void ( getPackagedConfigFile ( STRING ) , org.springframework.boot.logging.java.LogFile ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( LoggingInitializationContext org.springframework.boot.logging.java.LoggingInitializationContext , java.lang.String java.lang.String , LogFile org.springframework.boot.logging.java.LogFile ) { void ( java.lang.String , org.springframework.boot.logging.java.LogFile ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , LogFile org.springframework.boot.logging.java.LogFile ) { Assert . notNull ( java.lang.String , STRING ) ; try { java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.InputStreamReader ( ResourceUtils . getURL ( java.lang.String ) . openStream ( ) ) ) ; if ( org.springframework.boot.logging.java.LogFile != null ) { java.lang.String = java.lang.String . java.lang.String ( STRING , StringUtils . cleanPath ( org.springframework.boot.logging.java.LogFile . toString ( ) ) ) ; } java.util.logging.LogManager . java.util.logging.LogManager ( ) . void ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.boot.logging.java.LogLevel> < LogLevel > java.util.Set<org.springframework.boot.logging.java.LogLevel> ( ) { return org.springframework.boot.logging.java.LogLevels<java.util.logging.Level> . getSupported ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , LogLevel org.springframework.boot.logging.java.LogLevel ) { Assert . notNull ( org.springframework.boot.logging.java.LogLevel , STRING ) ; if ( java.lang.String == null || ROOT_LOGGER_NAME . equals ( java.lang.String ) ) { java.lang.String = STRING ; } java.util.logging.Logger java.util.logging.Logger = java.util.logging.Logger . java.util.logging.Logger ( java.lang.String ) ; if ( java.util.logging.Logger != null ) { java.util.logging.Logger . void ( org.springframework.boot.logging.java.LogLevels<java.util.logging.Level> . convertSystemToNative ( org.springframework.boot.logging.java.LogLevel ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> ( ) { java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> = new java.util.ArrayList<org.springframework.boot.logging.java.LoggerConfiguration> <> ( ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = java.util.logging.LogManager . java.util.logging.LogManager ( ) . java.util.Enumeration<java.lang.String> ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> . add ( org.springframework.boot.logging.java.LoggerConfiguration ( java.util.Enumeration<java.lang.String> . java.lang.String ( ) ) ) ; } java.util.Collections . void ( java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> , CONFIGURATION_COMPARATOR ) ; return java.util.Collections . java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> ( java.util.List<org.springframework.boot.logging.java.LoggerConfiguration> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.logging.java.LoggerConfiguration org.springframework.boot.logging.java.LoggerConfiguration ( java.lang.String java.lang.String ) { java.util.logging.Logger java.util.logging.Logger = java.util.logging.Logger . java.util.logging.Logger ( java.lang.String ) ; if ( java.util.logging.Logger == null ) { return null ; } LogLevel org.springframework.boot.logging.java.LogLevel = org.springframework.boot.logging.java.LogLevels<java.util.logging.Level> . convertNativeToSystem ( java.util.logging.Logger . java.util.logging.Level ( ) ) ; LogLevel org.springframework.boot.logging.java.LogLevel = org.springframework.boot.logging.java.LogLevels<java.util.logging.Level> . convertNativeToSystem ( java.util.logging.Level ( java.util.logging.Logger ) ) ; java.lang.String java.lang.String = ( StringUtils . hasLength ( java.util.logging.Logger . java.lang.String ( ) ) ? java.util.logging.Logger . java.lang.String ( ) : ROOT_LOGGER_NAME ) ; return new LoggerConfiguration ( java.lang.String , org.springframework.boot.logging.java.LogLevel , org.springframework.boot.logging.java.LogLevel ) ; }  <METHOD_END>
<METHOD_START> private java.util.logging.Level java.util.logging.Level ( java.util.logging.Logger java.util.logging.Logger ) { java.util.logging.Logger java.util.logging.Logger = java.util.logging.Logger ; while ( java.util.logging.Logger . java.util.logging.Level ( ) == null ) { java.util.logging.Logger = java.util.logging.Logger . java.util.logging.Logger ( ) ; } return java.util.logging.Logger . java.util.logging.Level ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Runnable java.lang.Runnable ( ) { return new org.springframework.boot.logging.java.JavaLoggingSystem.ShutdownHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.logging.LogManager . java.util.logging.LogManager ( ) . void ( ) ; }  <METHOD_END>
