<METHOD_START> @ BeforeClass public static void void ( ) java.lang.InterruptedException { int int = NUMBER ; while ( int ++ < NUMBER && ( ! org.springframework.integration.mail.config.SmtpServer . isListening ( ) ) ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( int < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.mail.config.SmtpServer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JavaMailSenderImpl org.springframework.integration.mail.config.JavaMailSenderImpl = new JavaMailSenderImpl ( ) ; org.springframework.integration.mail.config.JavaMailSenderImpl . setHost ( STRING ) ; org.springframework.integration.mail.config.JavaMailSenderImpl . setPort ( org.springframework.integration.mail.config.SmtpServer . getPort ( ) ) ; org.springframework.integration.mail.config.JavaMailSenderImpl . setUsername ( STRING ) ; org.springframework.integration.mail.config.JavaMailSenderImpl . setPassword ( STRING ) ; MailSendingMessageHandler org.springframework.integration.mail.config.MailSendingMessageHandler = new MailSendingMessageHandler ( org.springframework.integration.mail.config.JavaMailSenderImpl ) ; org.springframework.integration.mail.config.MailSendingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( MailHeaders . TO , new java.lang.String [] { STRING } ) . setHeader ( MailHeaders . FROM , STRING ) . setHeader ( MailHeaders . SUBJECT , STRING ) . build ( ) ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.mail.config.SmtpServer . getMessages ( ) . size ( ) == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( org.springframework.integration.mail.config.SmtpServer . getMessages ( ) . size ( ) > NUMBER ) ; java.lang.String java.lang.String = org.springframework.integration.mail.config.SmtpServer . getMessages ( ) . get ( NUMBER ) ; assertThat ( java.lang.String , endsWith ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; }  <METHOD_END>
