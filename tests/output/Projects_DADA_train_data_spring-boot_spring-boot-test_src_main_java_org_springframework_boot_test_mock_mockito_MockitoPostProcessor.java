<METHOD_START> public void ( java.util.Set<org.springframework.boot.test.mock.mockito.Definition> < Definition > java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ) { this . java.util.Set<org.springframework.boot.test.mock.mockito.Definition> = java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.test.mock.mockito.BeanFactory ) throws org.springframework.boot.test.mock.mockito.BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory .class , org.springframework.boot.test.mock.mockito.BeanFactory , STRING ) ; this . org.springframework.boot.test.mock.mockito.BeanFactory = org.springframework.boot.test.mock.mockito.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory )			throws org.springframework.boot.test.mock.mockito.BeansException { Assert . isInstanceOf ( BeanDefinitionRegistry .class , org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , STRING + STRING ) ; void ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , ( BeanDefinitionRegistry ) org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry ) { org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory . registerSingleton ( MockitoBeans .class . java.lang.String ( ) , this . org.springframework.boot.test.mock.mockito.MockitoBeans ) ; DefinitionsParser org.springframework.boot.test.mock.mockito.DefinitionsParser = new DefinitionsParser ( this . java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory ) ) { org.springframework.boot.test.mock.mockito.DefinitionsParser . parse ( java.lang.Class<> ) ; } java.util.Set<org.springframework.boot.test.mock.mockito.Definition> < Definition > java.util.Set<org.springframework.boot.test.mock.mockito.Definition> = org.springframework.boot.test.mock.mockito.DefinitionsParser . getDefinitions ( ) ; for ( Definition org.springframework.boot.test.mock.mockito.Definition : java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ) { java.lang.reflect.Field java.lang.reflect.Field = org.springframework.boot.test.mock.mockito.DefinitionsParser . getField ( org.springframework.boot.test.mock.mockito.Definition ) ; void ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , org.springframework.boot.test.mock.mockito.Definition , java.lang.reflect.Field ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory ) { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>> <> ( ) ; for ( BeanDefinition org.springframework.boot.test.mock.mockito.BeanDefinition : java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.BeanDefinition> ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory ) . values ( ) ) { java.util.Set<java.lang.Class<?>> . boolean ( ClassUtils . resolveClassName ( org.springframework.boot.test.mock.mockito.BeanDefinition . getBeanClassName ( ) , this . java.lang.ClassLoader ) ) ; } return java.util.Set<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.BeanDefinition> < java.lang.String , BeanDefinition > java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.BeanDefinition> ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory ) { java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.BeanDefinition> < java.lang.String , BeanDefinition > java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.BeanDefinition> = new java.util.LinkedHashMap<java.lang.String,org.springframework.boot.test.mock.mockito.BeanDefinition> <> ( ) ; for ( java.lang.String java.lang.String : org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory . getBeanDefinitionNames ( ) ) { BeanDefinition org.springframework.boot.test.mock.mockito.BeanDefinition = org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; if ( org.springframework.boot.test.mock.mockito.BeanDefinition . getAttribute ( java.lang.String ) != null ) { java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.BeanDefinition> . put ( java.lang.String , org.springframework.boot.test.mock.mockito.BeanDefinition ) ; } } return java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.BeanDefinition> ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , Definition org.springframework.boot.test.mock.mockito.Definition , java.lang.reflect.Field java.lang.reflect.Field ) { if ( org.springframework.boot.test.mock.mockito.Definition instanceof MockDefinition ) { void ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , ( MockDefinition ) org.springframework.boot.test.mock.mockito.Definition , java.lang.reflect.Field ) ; } else if ( org.springframework.boot.test.mock.mockito.Definition instanceof SpyDefinition ) { void ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , ( SpyDefinition ) org.springframework.boot.test.mock.mockito.Definition , java.lang.reflect.Field ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition , java.lang.reflect.Field java.lang.reflect.Field ) { RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition = org.springframework.boot.test.mock.mockito.RootBeanDefinition ( org.springframework.boot.test.mock.mockito.MockDefinition ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , org.springframework.boot.test.mock.mockito.MockDefinition , org.springframework.boot.test.mock.mockito.RootBeanDefinition ) ; java.lang.String java.lang.String = BeanFactoryUtils . transformedBeanName ( java.lang.String ) ; org.springframework.boot.test.mock.mockito.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , java.lang.String ) ; if ( org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . removeBeanDefinition ( java.lang.String ) ; } org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.boot.test.mock.mockito.RootBeanDefinition ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.boot.test.mock.mockito.MockDefinition , java.lang.String ) ; org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory . registerSingleton ( java.lang.String , java.lang.Object ) ; this . org.springframework.boot.test.mock.mockito.MockitoBeans . add ( java.lang.Object ) ; this . java.util.Map<org.springframework.boot.test.mock.mockito.Definition,java.lang.String> . put ( org.springframework.boot.test.mock.mockito.MockDefinition , java.lang.String ) ; if ( java.lang.reflect.Field != null ) { this . java.util.Map<java.lang.reflect.Field,org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField> . org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField ( java.lang.reflect.Field , new org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField ( org.springframework.boot.test.mock.mockito.MockDefinition , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.mock.mockito.RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition ( MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition ) { RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition = new RootBeanDefinition ( org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) . resolve ( ) ) ; org.springframework.boot.test.mock.mockito.RootBeanDefinition . setTargetType ( org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) ) ; org.springframework.boot.test.mock.mockito.RootBeanDefinition . setFactoryBeanName ( java.lang.String ) ; org.springframework.boot.test.mock.mockito.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.boot.test.mock.mockito.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.boot.test.mock.mockito.MockDefinition ) ; if ( org.springframework.boot.test.mock.mockito.MockDefinition . getQualifier ( ) != null ) { org.springframework.boot.test.mock.mockito.MockDefinition . getQualifier ( ) . applyTo ( org.springframework.boot.test.mock.mockito.RootBeanDefinition ) ; } return org.springframework.boot.test.mock.mockito.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> protected final java.lang.Object java.lang.Object ( MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition , java.lang.String java.lang.String ) { return org.springframework.boot.test.mock.mockito.MockDefinition . createMock ( java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition , RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition ) { if ( StringUtils . hasLength ( org.springframework.boot.test.mock.mockito.MockDefinition . getName ( ) ) ) { return org.springframework.boot.test.mock.mockito.MockDefinition . getName ( ) ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , org.springframework.boot.test.mock.mockito.MockDefinition ) ; if ( java.util.Set<java.lang.String> . boolean ( ) ) { return this . org.springframework.boot.test.mock.mockito.BeanNameGenerator . generateBeanName ( org.springframework.boot.test.mock.mockito.RootBeanDefinition , org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry ) ; } if ( java.util.Set<java.lang.String> . int ( ) == NUMBER ) { return java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ; } throw new java.lang.IllegalStateException ( STRING + org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) + STRING + java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.reflect.Field java.lang.reflect.Field ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) ) ; if ( ObjectUtils . isEmpty ( java.lang.String[] ) ) { void ( org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.reflect.Field ) ; } else { void ( org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.reflect.Field , java.lang.String[] ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition ) { QualifierDefinition org.springframework.boot.test.mock.mockito.QualifierDefinition = org.springframework.boot.test.mock.mockito.MockDefinition . getQualifier ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , org.springframework.boot.test.mock.mockito.MockDefinition . getTypeToMock ( ) ) ) { if ( org.springframework.boot.test.mock.mockito.QualifierDefinition == null || org.springframework.boot.test.mock.mockito.QualifierDefinition . matches ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( ConfigurableListableBeanFactory org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory , ResolvableType org.springframework.boot.test.mock.mockito.ResolvableType ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet <> ( java.util.Arrays . java.util.List ( org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory . getBeanNamesForType ( org.springframework.boot.test.mock.mockito.ResolvableType ) ) ) ; java.lang.String java.lang.String = org.springframework.boot.test.mock.mockito.ResolvableType . resolve ( java.lang.Object .class ) . getName ( ) ; for ( java.lang.String java.lang.String : org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory . getBeanNamesForType ( FactoryBean .class ) ) { java.lang.String = BeanFactoryUtils . transformedBeanName ( java.lang.String ) ; BeanDefinition org.springframework.boot.test.mock.mockito.BeanDefinition = org.springframework.boot.test.mock.mockito.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; if ( java.lang.String . boolean ( org.springframework.boot.test.mock.mockito.BeanDefinition . getAttribute ( java.lang.String ) ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { if ( boolean ( java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ) { java.util.Iterator<java.lang.String> . void ( ) ; } } return java.util.Set<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.Set<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { try { return ScopedProxyUtils . isScopedTarget ( java.lang.String ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return false ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.reflect.Field java.lang.reflect.Field ) { RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition = new RootBeanDefinition ( org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) . resolve ( ) ) ; java.lang.String java.lang.String = this . org.springframework.boot.test.mock.mockito.BeanNameGenerator . generateBeanName ( org.springframework.boot.test.mock.mockito.RootBeanDefinition , org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry ) ; org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.boot.test.mock.mockito.RootBeanDefinition ) ; void ( org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.reflect.Field , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.reflect.Field java.lang.reflect.Field , java.lang.String [] java.lang.String[] ) { try { void ( org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.reflect.Field , java.lang.String ( java.lang.String[] , org.springframework.boot.test.mock.mockito.SpyDefinition , org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry ) ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) , java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String [] java.lang.String[] , SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition , BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry ) { if ( StringUtils . hasText ( org.springframework.boot.test.mock.mockito.SpyDefinition . getName ( ) ) ) { return org.springframework.boot.test.mock.mockito.SpyDefinition . getName ( ) ; } if ( java.lang.String[] . int == NUMBER ) { return java.lang.String[] [ NUMBER ] ; } return java.lang.String ( org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , java.lang.String[] , org.springframework.boot.test.mock.mockito.SpyDefinition . getTypeToSpy ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , java.lang.String [] java.lang.String[] , ResolvableType org.springframework.boot.test.mock.mockito.ResolvableType ) { java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : java.lang.String[] ) { BeanDefinition org.springframework.boot.test.mock.mockito.BeanDefinition = org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; if ( org.springframework.boot.test.mock.mockito.BeanDefinition . isPrimary ( ) ) { if ( java.lang.String != null ) { throw new NoUniqueBeanDefinitionException ( org.springframework.boot.test.mock.mockito.ResolvableType . resolve ( ) , java.lang.String[] . int , STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } java.lang.String = java.lang.String ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private void void ( SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.reflect.Field java.lang.reflect.Field , java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.SpyDefinition> . put ( java.lang.String , org.springframework.boot.test.mock.mockito.SpyDefinition ) ; this . java.util.Map<org.springframework.boot.test.mock.mockito.Definition,java.lang.String> . put ( org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.String ) ; if ( java.lang.reflect.Field != null ) { this . java.util.Map<java.lang.reflect.Field,org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField> . org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField ( java.lang.reflect.Field , new org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField ( org.springframework.boot.test.mock.mockito.SpyDefinition , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )			throws org.springframework.boot.test.mock.mockito.BeansException { SpyDefinition org.springframework.boot.test.mock.mockito.SpyDefinition = this . java.util.Map<java.lang.String,org.springframework.boot.test.mock.mockito.SpyDefinition> . get ( java.lang.String ) ; if ( org.springframework.boot.test.mock.mockito.SpyDefinition != null ) { java.lang.Object = org.springframework.boot.test.mock.mockito.SpyDefinition . createSpy ( java.lang.String , java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.mock.mockito.PropertyValues org.springframework.boot.test.mock.mockito.PropertyValues ( PropertyValues org.springframework.boot.test.mock.mockito.PropertyValues , java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] , final java.lang.Object java.lang.Object , java.lang.String java.lang.String )					throws org.springframework.boot.test.mock.mockito.BeansException { ReflectionUtils . doWithFields ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , new FieldCallback ( ) { @ java.lang.Override public void void ( java.lang.reflect.Field java.lang.reflect.Field )					throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { void ( java.lang.Object , java.lang.reflect.Field ) ; } } ) ; return org.springframework.boot.test.mock.mockito.PropertyValues ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Field java.lang.reflect.Field )					throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { void ( java.lang.Object , java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.reflect.Field java.lang.reflect.Field ) { org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField = this . java.util.Map<java.lang.reflect.Field,org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField> . org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField ( java.lang.reflect.Field ) ; if ( org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField != null && StringUtils . hasLength ( org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField . java.lang.String ( ) ) ) { void ( java.lang.reflect.Field , java.lang.Object , org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField . java.lang.String ( ) , org.springframework.boot.test.mock.mockito.MockitoPostProcessor.RegisteredField . org.springframework.boot.test.mock.mockito.Definition ( ) ) ; } }  <METHOD_END>
<METHOD_START> void void ( java.lang.reflect.Field java.lang.reflect.Field , java.lang.Object java.lang.Object , Definition org.springframework.boot.test.mock.mockito.Definition ) { java.lang.String java.lang.String = this . java.util.Map<org.springframework.boot.test.mock.mockito.Definition,java.lang.String> . get ( org.springframework.boot.test.mock.mockito.Definition ) ; Assert . state ( StringUtils . hasLength ( java.lang.String ) , STRING + org.springframework.boot.test.mock.mockito.Definition ) ; void ( java.lang.reflect.Field , java.lang.Object , java.lang.String , org.springframework.boot.test.mock.mockito.Definition ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Field java.lang.reflect.Field , java.lang.Object java.lang.Object , java.lang.String java.lang.String , Definition org.springframework.boot.test.mock.mockito.Definition ) { try { java.lang.reflect.Field . void ( true ) ; Assert . state ( ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) == null , STRING + java.lang.reflect.Field + STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.test.mock.mockito.BeanFactory . getBean ( java.lang.String , java.lang.reflect.Field . java.lang.Class<?> ( ) ) ; if ( org.springframework.boot.test.mock.mockito.Definition . isProxyTargetAware ( ) && boolean ( java.lang.Object ) ) { MockitoAopProxyTargetInterceptor . applyTo ( java.lang.Object ) ; } ReflectionUtils . setField ( java.lang.reflect.Field , java.lang.Object , java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanCreationException ( STRING + java.lang.reflect.Field , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object ) { try { return AopUtils . isAopProxy ( java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return Ordered . LOWEST_PRECEDENCE - NUMBER ; }  <METHOD_END>
<METHOD_START> public static void void ( BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry ) { void ( org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , java.util.Set<org.springframework.boot.test.mock.mockito.Definition> < Definition > java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ) { void ( org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , org.springframework.boot.test.mock.mockito.MockitoPostProcessor .class , java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static void void ( BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , java.lang.Class<? extends org.springframework.boot.test.mock.mockito.MockitoPostProcessor> < ? extends org.springframework.boot.test.mock.mockito.MockitoPostProcessor > java.lang.Class<? extends org.springframework.boot.test.mock.mockito.MockitoPostProcessor> , java.util.Set<org.springframework.boot.test.mock.mockito.Definition> < Definition > java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ) { org.springframework.boot.test.mock.mockito.MockitoPostProcessor.SpyPostProcessor . void ( org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry ) ; BeanDefinition org.springframework.boot.test.mock.mockito.BeanDefinition = org.springframework.boot.test.mock.mockito.BeanDefinition ( org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , java.lang.Class<> ) ; ValueHolder org.springframework.boot.test.mock.mockito.ValueHolder = org.springframework.boot.test.mock.mockito.BeanDefinition . getConstructorArgumentValues ( ) . getIndexedArgumentValue ( NUMBER , java.util.Set .class ) ; java.util.Set<org.springframework.boot.test.mock.mockito.Definition> < Definition > java.util.Set<org.springframework.boot.test.mock.mockito.Definition> = ( java.util.Set<org.springframework.boot.test.mock.mockito.Definition> < Definition > ) org.springframework.boot.test.mock.mockito.ValueHolder . getValue ( ) ; if ( java.util.Set<org.springframework.boot.test.mock.mockito.Definition> != null ) { java.util.Set<org.springframework.boot.test.mock.mockito.Definition> . addAll ( java.util.Set<org.springframework.boot.test.mock.mockito.Definition> ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.boot.test.mock.mockito.BeanDefinition org.springframework.boot.test.mock.mockito.BeanDefinition ( BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry , java.lang.Class<? extends org.springframework.boot.test.mock.mockito.MockitoPostProcessor> < ? extends org.springframework.boot.test.mock.mockito.MockitoPostProcessor > java.lang.Class<? extends org.springframework.boot.test.mock.mockito.MockitoPostProcessor> ) { if ( ! org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> ) ; org.springframework.boot.test.mock.mockito.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; ConstructorArgumentValues org.springframework.boot.test.mock.mockito.ConstructorArgumentValues = org.springframework.boot.test.mock.mockito.RootBeanDefinition . getConstructorArgumentValues ( ) ; org.springframework.boot.test.mock.mockito.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , new java.util.LinkedHashSet<org.springframework.boot.test.mock.mockito.MockDefinition> < MockDefinition > ( ) ) ; org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.boot.test.mock.mockito.RootBeanDefinition ) ; return org.springframework.boot.test.mock.mockito.RootBeanDefinition ; } return org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.test.mock.mockito.MockitoPostProcessor org.springframework.boot.test.mock.mockito.MockitoPostProcessor ) { this . org.springframework.boot.test.mock.mockito.MockitoPostProcessor = org.springframework.boot.test.mock.mockito.MockitoPostProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return Ordered . HIGHEST_PRECEDENCE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )				throws org.springframework.boot.test.mock.mockito.BeansException { return java.lang.Object ( java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )				throws org.springframework.boot.test.mock.mockito.BeansException { if ( java.lang.Object instanceof FactoryBean ) { return java.lang.Object ; } return java.lang.Object ( java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return this . org.springframework.boot.test.mock.mockito.MockitoPostProcessor . java.lang.Object ( java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static void void ( BeanDefinitionRegistry org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry ) { if ( ! org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.boot.test.mock.mockito.RootBeanDefinition = new RootBeanDefinition ( org.springframework.boot.test.mock.mockito.MockitoPostProcessor.SpyPostProcessor .class ) ; org.springframework.boot.test.mock.mockito.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; ConstructorArgumentValues org.springframework.boot.test.mock.mockito.ConstructorArgumentValues = org.springframework.boot.test.mock.mockito.RootBeanDefinition . getConstructorArgumentValues ( ) ; org.springframework.boot.test.mock.mockito.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , new RuntimeBeanReference ( org.springframework.boot.test.mock.mockito.MockitoPostProcessor . java.lang.String ) ) ; org.springframework.boot.test.mock.mockito.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.boot.test.mock.mockito.RootBeanDefinition ) ; } }  <METHOD_END>
<METHOD_START> void ( Definition org.springframework.boot.test.mock.mockito.Definition , java.lang.String java.lang.String ) { this . org.springframework.boot.test.mock.mockito.Definition = org.springframework.boot.test.mock.mockito.Definition ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.mock.mockito.Definition org.springframework.boot.test.mock.mockito.Definition ( ) { return this . org.springframework.boot.test.mock.mockito.Definition ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
