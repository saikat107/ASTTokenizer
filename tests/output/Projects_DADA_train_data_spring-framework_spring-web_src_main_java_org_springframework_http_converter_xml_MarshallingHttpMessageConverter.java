<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( Marshaller org.springframework.http.converter.xml.Marshaller ) { Assert . notNull ( org.springframework.http.converter.xml.Marshaller , STRING ) ; this . org.springframework.http.converter.xml.Marshaller = org.springframework.http.converter.xml.Marshaller ; if ( org.springframework.http.converter.xml.Marshaller instanceof Unmarshaller ) { this . org.springframework.http.converter.xml.Unmarshaller = ( Unmarshaller ) org.springframework.http.converter.xml.Marshaller ; } }  <METHOD_END>
<METHOD_START> public void ( Marshaller org.springframework.http.converter.xml.Marshaller , Unmarshaller org.springframework.http.converter.xml.Unmarshaller ) { Assert . notNull ( org.springframework.http.converter.xml.Marshaller , STRING ) ; Assert . notNull ( org.springframework.http.converter.xml.Unmarshaller , STRING ) ; this . org.springframework.http.converter.xml.Marshaller = org.springframework.http.converter.xml.Marshaller ; this . org.springframework.http.converter.xml.Unmarshaller = org.springframework.http.converter.xml.Unmarshaller ; }  <METHOD_END>
<METHOD_START> public void void ( Marshaller org.springframework.http.converter.xml.Marshaller ) { this . org.springframework.http.converter.xml.Marshaller = org.springframework.http.converter.xml.Marshaller ; }  <METHOD_END>
<METHOD_START> public void void ( Unmarshaller org.springframework.http.converter.xml.Unmarshaller ) { this . org.springframework.http.converter.xml.Unmarshaller = org.springframework.http.converter.xml.Unmarshaller ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.xml.MediaType ) { return ( boolean ( org.springframework.http.converter.xml.MediaType ) && this . org.springframework.http.converter.xml.Unmarshaller != null && this . org.springframework.http.converter.xml.Unmarshaller . supports ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.xml.MediaType ) { return ( boolean ( org.springframework.http.converter.xml.MediaType ) && this . org.springframework.http.converter.xml.Marshaller != null && this . org.springframework.http.converter.xml.Marshaller . supports ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , HttpHeaders org.springframework.http.converter.xml.HttpHeaders , javax.xml.transform.Source javax.xml.transform.Source ) throws java.io.IOException { Assert . notNull ( this . org.springframework.http.converter.xml.Unmarshaller , STRING ) ; try { java.lang.Object java.lang.Object = this . org.springframework.http.converter.xml.Unmarshaller . unmarshal ( javax.xml.transform.Source ) ; if ( ! java.lang.Class<> . boolean ( java.lang.Object ) ) { throw new TypeMismatchException ( java.lang.Object , java.lang.Class<> ) ; } return java.lang.Object ; } catch ( UnmarshallingFailureException org.springframework.http.converter.xml.UnmarshallingFailureException ) { throw new HttpMessageNotReadableException ( STRING + java.lang.Class<> + STRING , org.springframework.http.converter.xml.UnmarshallingFailureException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , HttpHeaders org.springframework.http.converter.xml.HttpHeaders , javax.xml.transform.Result javax.xml.transform.Result ) throws java.io.IOException { Assert . notNull ( this . org.springframework.http.converter.xml.Marshaller , STRING ) ; try { this . org.springframework.http.converter.xml.Marshaller . marshal ( java.lang.Object , javax.xml.transform.Result ) ; } catch ( MarshallingFailureException org.springframework.http.converter.xml.MarshallingFailureException ) { throw new HttpMessageNotWritableException ( STRING + java.lang.Object + STRING , org.springframework.http.converter.xml.MarshallingFailureException ) ; } }  <METHOD_END>
