<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof TransactionFactory ) { this . org.springframework.jca.endpoint.TransactionFactory = ( TransactionFactory ) java.lang.Object ; } else if ( java.lang.Object instanceof TransactionManager ) { this . org.springframework.jca.endpoint.TransactionFactory = new SimpleTransactionFactory ( ( TransactionManager ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( TransactionFactory org.springframework.jca.endpoint.TransactionFactory ) { this . org.springframework.jca.endpoint.TransactionFactory = org.springframework.jca.endpoint.TransactionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.NoSuchMethodException { return ( this . org.springframework.jca.endpoint.TransactionFactory != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jca.endpoint.MessageEndpoint org.springframework.jca.endpoint.MessageEndpoint ( javax.transaction.xa.XAResource javax.transaction.xa.XAResource ) throws org.springframework.jca.endpoint.UnavailableException { org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint = org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint ( ) ; org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint . void ( javax.transaction.xa.XAResource ) ; return org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jca.endpoint.MessageEndpoint org.springframework.jca.endpoint.MessageEndpoint ( javax.transaction.xa.XAResource javax.transaction.xa.XAResource , long long ) throws org.springframework.jca.endpoint.UnavailableException { org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint = org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint ( ) ; org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint . void ( javax.transaction.xa.XAResource ) ; return org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint org.springframework.jca.endpoint.AbstractMessageEndpointFactory.AbstractMessageEndpoint ( ) org.springframework.jca.endpoint.UnavailableException ;  <METHOD_END>
<METHOD_START> void void ( javax.transaction.xa.XAResource javax.transaction.xa.XAResource ) { this . org.springframework.jca.endpoint.AbstractMessageEndpointFactory.TransactionDelegate = new org.springframework.jca.endpoint.AbstractMessageEndpointFactory.TransactionDelegate ( javax.transaction.xa.XAResource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws org.springframework.jca.endpoint.ResourceException { this . boolean = true ; try { this . org.springframework.jca.endpoint.AbstractMessageEndpointFactory.TransactionDelegate . void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ApplicationServerInternalException ( STRING , java.lang.Throwable ) ; } java.lang.Thread java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; this . java.lang.ClassLoader = java.lang.Thread . java.lang.ClassLoader ( ) ; java.lang.Thread . void ( java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.ClassLoader java.lang.ClassLoader ( )  <METHOD_END>
<METHOD_START> protected final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.Throwable java.lang.Throwable ) { this . org.springframework.jca.endpoint.AbstractMessageEndpointFactory.TransactionDelegate . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.jca.endpoint.ResourceException { this . boolean = false ; java.lang.Thread . java.lang.Thread ( ) . void ( this . java.lang.ClassLoader ) ; this . java.lang.ClassLoader = null ; try { this . org.springframework.jca.endpoint.AbstractMessageEndpointFactory.TransactionDelegate . void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ApplicationServerInternalException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . org.springframework.jca.endpoint.AbstractMessageEndpointFactory.TransactionDelegate . void ( ) ; this . org.springframework.jca.endpoint.AbstractMessageEndpointFactory.TransactionDelegate . void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jca.endpoint.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public void ( javax.transaction.xa.XAResource javax.transaction.xa.XAResource ) { if ( javax.transaction.xa.XAResource == null ) { if ( org.springframework.jca.endpoint.TransactionFactory != null && ! org.springframework.jca.endpoint.TransactionFactory . supportsResourceAdapterManagedTransactions ( ) ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } } this . javax.transaction.xa.XAResource = javax.transaction.xa.XAResource ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { if ( org.springframework.jca.endpoint.TransactionFactory != null && this . javax.transaction.xa.XAResource != null ) { this . org.springframework.jca.endpoint.Transaction = org.springframework.jca.endpoint.TransactionFactory . createTransaction ( java.lang.String , int ) ; this . org.springframework.jca.endpoint.Transaction . enlistResource ( this . javax.transaction.xa.XAResource ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . org.springframework.jca.endpoint.Transaction != null ) { this . boolean = true ; } }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { if ( this . org.springframework.jca.endpoint.Transaction != null ) { try { if ( this . boolean ) { this . org.springframework.jca.endpoint.Transaction . rollback ( ) ; } else { this . org.springframework.jca.endpoint.Transaction . commit ( ) ; } } finally { this . org.springframework.jca.endpoint.Transaction = null ; this . boolean = false ; } } }  <METHOD_END>
