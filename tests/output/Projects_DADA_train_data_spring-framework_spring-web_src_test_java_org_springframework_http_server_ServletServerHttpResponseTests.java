<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.http.server.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.http.server.ServletServerHttpResponse = new ServletServerHttpResponse ( org.springframework.http.server.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.http.server.ServletServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; assertEquals ( STRING , NUMBER , org.springframework.http.server.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.http.server.HttpHeaders = org.springframework.http.server.ServletServerHttpResponse . getHeaders ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.http.server.HttpHeaders . add ( java.lang.String , java.lang.String ) ; java.lang.String java.lang.String = STRING ; org.springframework.http.server.HttpHeaders . add ( java.lang.String , java.lang.String ) ; org.springframework.http.server.HttpHeaders . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.http.server.ServletServerHttpResponse . close ( ) ; assertTrue ( STRING , org.springframework.http.server.MockHttpServletResponse . getHeaderNames ( ) . contains ( java.lang.String ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.server.MockHttpServletResponse . getHeaders ( java.lang.String ) ; assertTrue ( STRING , java.util.List<java.lang.String> . boolean ( java.lang.String ) ) ; assertTrue ( STRING , java.util.List<java.lang.String> . boolean ( java.lang.String ) ) ; assertEquals ( STRING , STRING , org.springframework.http.server.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , STRING , org.springframework.http.server.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , STRING , org.springframework.http.server.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.http.server.MockHttpServletResponse . addHeader ( java.lang.String , java.lang.String ) ; this . org.springframework.http.server.ServletServerHttpResponse = new ServletServerHttpResponse ( this . org.springframework.http.server.MockHttpServletResponse ) ; assertEquals ( java.lang.String , this . org.springframework.http.server.ServletServerHttpResponse . getHeaders ( ) . getFirst ( java.lang.String ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( java.lang.String ) , this . org.springframework.http.server.ServletServerHttpResponse . getHeaders ( ) . get ( java.lang.String ) ) ; assertTrue ( this . org.springframework.http.server.ServletServerHttpResponse . getHeaders ( ) . containsKey ( java.lang.String ) ) ; assertEquals ( java.lang.String , this . org.springframework.http.server.ServletServerHttpResponse . getHeaders ( ) . getFirst ( java.lang.String ) ) ; assertEquals ( java.lang.String , this . org.springframework.http.server.ServletServerHttpResponse . getHeaders ( ) . getAccessControlAllowOrigin ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = STRING . byte[] ( STRING ) ; FileCopyUtils . copy ( byte[] , org.springframework.http.server.ServletServerHttpResponse . getBody ( ) ) ; assertArrayEquals ( STRING , byte[] , org.springframework.http.server.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
