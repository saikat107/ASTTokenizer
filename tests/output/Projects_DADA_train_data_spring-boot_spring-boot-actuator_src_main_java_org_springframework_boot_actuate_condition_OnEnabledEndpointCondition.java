<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.condition.ConditionOutcome org.springframework.boot.actuate.condition.ConditionOutcome ( ConditionContext org.springframework.boot.actuate.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.actuate.condition.AnnotatedTypeMetadata ) { AnnotationAttributes org.springframework.boot.actuate.condition.AnnotationAttributes = AnnotationAttributes . fromMap ( org.springframework.boot.actuate.condition.AnnotatedTypeMetadata . getAnnotationAttributes ( ConditionalOnEnabledEndpoint .class . java.lang.String ( ) ) ) ; java.lang.String java.lang.String = org.springframework.boot.actuate.condition.AnnotationAttributes . getString ( STRING ) ; boolean boolean = org.springframework.boot.actuate.condition.AnnotationAttributes . getBoolean ( STRING ) ; ConditionOutcome org.springframework.boot.actuate.condition.ConditionOutcome = org.springframework.boot.actuate.condition.ConditionOutcome ( java.lang.String , boolean , org.springframework.boot.actuate.condition.ConditionContext ) ; if ( org.springframework.boot.actuate.condition.ConditionOutcome != null ) { return org.springframework.boot.actuate.condition.ConditionOutcome ; } return org.springframework.boot.actuate.condition.ConditionOutcome ( org.springframework.boot.actuate.condition.ConditionContext ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.condition.ConditionOutcome org.springframework.boot.actuate.condition.ConditionOutcome ( java.lang.String java.lang.String , boolean boolean , ConditionContext org.springframework.boot.actuate.condition.ConditionContext ) { RelaxedPropertyResolver org.springframework.boot.actuate.condition.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.actuate.condition.ConditionContext . getEnvironment ( ) , STRING + java.lang.String + STRING ) ; if ( org.springframework.boot.actuate.condition.RelaxedPropertyResolver . containsProperty ( STRING ) || ! boolean ) { boolean boolean = org.springframework.boot.actuate.condition.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Boolean .class , boolean ) ; ConditionMessage org.springframework.boot.actuate.condition.ConditionMessage = ConditionMessage . forCondition ( ConditionalOnEnabledEndpoint .class , STRING + java.lang.String + STRING ) . because ( boolean ? STRING : STRING ) ; return new ConditionOutcome ( boolean , org.springframework.boot.actuate.condition.ConditionMessage ) ; } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.condition.ConditionOutcome org.springframework.boot.actuate.condition.ConditionOutcome ( ConditionContext org.springframework.boot.actuate.condition.ConditionContext ) { RelaxedPropertyResolver org.springframework.boot.actuate.condition.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.actuate.condition.ConditionContext . getEnvironment ( ) , STRING ) ; boolean boolean = java.lang.Boolean . java.lang.Boolean ( org.springframework.boot.actuate.condition.RelaxedPropertyResolver . getProperty ( STRING , STRING ) ) ; ConditionMessage org.springframework.boot.actuate.condition.ConditionMessage = ConditionMessage . forCondition ( ConditionalOnEnabledEndpoint .class ) . because ( STRING + ( boolean ? STRING : STRING ) + STRING ) ; return new ConditionOutcome ( boolean , org.springframework.boot.actuate.condition.ConditionMessage ) ; }  <METHOD_END>
