<METHOD_START> public void ( TemporaryFolder org.springframework.boot.junit.compiler.TemporaryFolder ) throws java.io.IOException { this( javax.tools.ToolProvider . javax.tools.JavaCompiler ( ) , org.springframework.boot.junit.compiler.TemporaryFolder ); }  <METHOD_END>
<METHOD_START> public void ( javax.tools.JavaCompiler javax.tools.JavaCompiler , TemporaryFolder org.springframework.boot.junit.compiler.TemporaryFolder )			throws java.io.IOException { this . javax.tools.JavaCompiler = javax.tools.JavaCompiler ; this . javax.tools.StandardJavaFileManager = javax.tools.JavaCompiler . javax.tools.StandardJavaFileManager ( null , null , null ) ; this . java.io.File = org.springframework.boot.junit.compiler.TemporaryFolder . newFolder ( ) ; java.lang.Iterable<? extends java.io.File> < ? extends java.io.File > java.lang.Iterable<? extends java.io.File> = java.util.Arrays . java.util.List<java.io.File> ( this . java.io.File ) ; this . javax.tools.StandardJavaFileManager . void ( javax.tools.StandardLocation . javax.tools.StandardLocation , java.lang.Iterable<> ) ; this . javax.tools.StandardJavaFileManager . void ( javax.tools.StandardLocation . javax.tools.StandardLocation , java.lang.Iterable<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask ( java.util.Collection<java.io.File> < java.io.File > java.util.Collection<java.io.File> ) { java.lang.Iterable<? extends javax.tools.JavaFileObject> < ? extends javax.tools.JavaFileObject > java.lang.Iterable<? extends javax.tools.JavaFileObject> = this . javax.tools.StandardJavaFileManager . java.lang.Iterable<? extends javax.tools.JavaFileObject> ( java.util.Collection<java.io.File> ) ; return org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask ( java.lang.Iterable<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.Iterable<? extends javax.tools.JavaFileObject> < ? extends javax.tools.JavaFileObject > java.lang.Iterable<? extends javax.tools.JavaFileObject> = java.lang.Iterable<? extends javax.tools.JavaFileObject> ( java.lang.Class<?>[] ) ; return org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask ( java.lang.Iterable<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask ( java.lang.Iterable<? extends javax.tools.JavaFileObject> < ? extends javax.tools.JavaFileObject > java.lang.Iterable<? extends javax.tools.JavaFileObject> ) { return new org.springframework.boot.junit.compiler.TestCompiler.TestCompilationTask ( this . javax.tools.JavaCompiler . javax.tools.JavaCompiler.CompilationTask ( null , this . javax.tools.StandardJavaFileManager , null , null , null , java.lang.Iterable<> ) ) ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> private java.lang.Iterable<? extends javax.tools.JavaFileObject> < ? extends javax.tools.JavaFileObject > java.lang.Iterable<? extends javax.tools.JavaFileObject> ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.io.File [] java.io.File[] = new java.io.File [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.io.File[] [ int ] = java.io.File ( java.lang.Class<?>[] [ int ] ) ; } return this . javax.tools.StandardJavaFileManager . java.lang.Iterable<? extends javax.tools.JavaFileObject> ( java.io.File[] ) ; }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new java.io.File ( java.io.File ( ) , java.lang.String ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . java.lang.String ( ) . java.lang.String ( '.' , '/' ) + STRING ; }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( ) { return java.io.File ; }  <METHOD_END>
<METHOD_START> public void ( javax.tools.JavaCompiler.CompilationTask javax.tools.JavaCompiler.CompilationTask ) { this . javax.tools.JavaCompiler.CompilationTask = javax.tools.JavaCompiler.CompilationTask ; }  <METHOD_END>
<METHOD_START> public void void ( javax.annotation.processing.Processor ... javax.annotation.processing.Processor[] ) { this . javax.tools.JavaCompiler.CompilationTask . void ( java.util.Arrays . java.util.List<javax.annotation.processing.Processor> ( javax.annotation.processing.Processor[] ) ) ; if ( ! this . javax.tools.JavaCompiler.CompilationTask . java.lang.Boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
