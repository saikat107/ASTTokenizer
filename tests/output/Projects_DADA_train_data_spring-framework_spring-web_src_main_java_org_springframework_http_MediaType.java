<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.String , java.lang.String , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset ) { super( java.lang.String , java.lang.String , java.nio.charset.Charset ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , double double ) { this( java.lang.String , java.lang.String , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( java.lang.String , java.lang.Double . java.lang.String ( double ) ) ); }  <METHOD_END>
<METHOD_START> public void ( org.springframework.http.MediaType org.springframework.http.MediaType , java.nio.charset.Charset java.nio.charset.Charset ) { super( org.springframework.http.MediaType , java.nio.charset.Charset ); }  <METHOD_END>
<METHOD_START> public void ( org.springframework.http.MediaType org.springframework.http.MediaType , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { super( org.springframework.http.MediaType . getType ( ) , org.springframework.http.MediaType . getSubtype ( ) , java.util.Map<java.lang.String,java.lang.String> ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { super( java.lang.String , java.lang.String , java.util.Map<java.lang.String,java.lang.String> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super. checkParameters ( java.lang.String , java.lang.String ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = unquote ( java.lang.String ) ; double double = java.lang.Double . double ( java.lang.String ) ; Assert . isTrue ( double >= NUMBER && double <= NUMBER , STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> public double double ( ) { java.lang.String java.lang.String = getParameter ( java.lang.String ) ; return ( java.lang.String != null ? java.lang.Double . double ( unquote ( java.lang.String ) ) : NUMBER ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.http.MediaType org.springframework.http.MediaType ) { return super. includes ( org.springframework.http.MediaType ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.http.MediaType org.springframework.http.MediaType ) { return super. isCompatibleWith ( org.springframework.http.MediaType ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.MediaType org.springframework.http.MediaType ( org.springframework.http.MediaType org.springframework.http.MediaType ) { if ( ! org.springframework.http.MediaType . getParameters ( ) . containsKey ( java.lang.String ) ) { return this ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap <> ( getParameters ( ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , org.springframework.http.MediaType . getParameters ( ) . get ( java.lang.String ) ) ; return new org.springframework.http.MediaType ( this , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.MediaType org.springframework.http.MediaType ( ) { if ( ! getParameters ( ) . containsKey ( java.lang.String ) ) { return this ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap <> ( getParameters ( ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; return new org.springframework.http.MediaType ( this , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.MediaType org.springframework.http.MediaType ( java.lang.String java.lang.String ) { return org.springframework.http.MediaType ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.MediaType org.springframework.http.MediaType ( java.lang.String java.lang.String ) { MimeType org.springframework.http.MimeType ; try { org.springframework.http.MimeType = MimeTypeUtils . parseMimeType ( java.lang.String ) ; } catch ( InvalidMimeTypeException org.springframework.http.InvalidMimeTypeException ) { throw new InvalidMediaTypeException ( org.springframework.http.InvalidMimeTypeException ) ; } try { return new org.springframework.http.MediaType ( org.springframework.http.MimeType . getType ( ) , org.springframework.http.MimeType . getSubtype ( ) , org.springframework.http.MimeType . getParameters ( ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new InvalidMediaTypeException ( java.lang.String , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.List<org.springframework.http.MediaType> ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasLength ( java.lang.String ) ) { return java.util.Collections . java.util.List<org.springframework.http.MediaType> ( ) ; } java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; java.util.List<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.List<org.springframework.http.MediaType> = new java.util.ArrayList<org.springframework.http.MediaType> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.http.MediaType> . boolean ( org.springframework.http.MediaType ( java.lang.String ) ) ; } return java.util.List<org.springframework.http.MediaType> ; }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.List<org.springframework.http.MediaType> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { if ( CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ) { return java.util.Collections . java.util.List<org.springframework.http.MediaType> ( ) ; } else if ( java.util.List<java.lang.String> . int ( ) == NUMBER ) { return java.util.List<org.springframework.http.MediaType> ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; } else { java.util.List<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.List<org.springframework.http.MediaType> = new java.util.ArrayList<org.springframework.http.MediaType> <> ( NUMBER ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<org.springframework.http.MediaType> . boolean ( java.util.List<org.springframework.http.MediaType> ( java.lang.String ) ) ; } return java.util.List<org.springframework.http.MediaType> ; } }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.List<org.springframework.http.MediaType> ( java.util.List<org.springframework.http.MimeType> < MimeType > java.util.List<org.springframework.http.MimeType> ) { return java.util.List<org.springframework.http.MimeType> . stream ( ) . map ( org.springframework.http.MediaType :: org.springframework.http.MediaType ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.MediaType org.springframework.http.MediaType ( MimeType org.springframework.http.MimeType ) { if ( org.springframework.http.MimeType instanceof org.springframework.http.MediaType ) { return ( org.springframework.http.MediaType ) org.springframework.http.MimeType ; } return new org.springframework.http.MediaType ( org.springframework.http.MimeType . getType ( ) , org.springframework.http.MimeType . getSubtype ( ) , org.springframework.http.MimeType . getParameters ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.util.Collection<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.Collection<org.springframework.http.MediaType> ) { return MimeTypeUtils . toString ( java.util.Collection<org.springframework.http.MediaType> ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.util.List<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.List<org.springframework.http.MediaType> ) { Assert . notNull ( java.util.List<org.springframework.http.MediaType> , STRING ) ; if ( java.util.List<org.springframework.http.MediaType> . int ( ) > NUMBER ) { java.util.Collections . void ( java.util.List<org.springframework.http.MediaType> , java.util.Comparator<org.springframework.http.MediaType> ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.util.List<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.List<org.springframework.http.MediaType> ) { Assert . notNull ( java.util.List<org.springframework.http.MediaType> , STRING ) ; if ( java.util.List<org.springframework.http.MediaType> . int ( ) > NUMBER ) { java.util.Collections . void ( java.util.List<org.springframework.http.MediaType> , java.util.Comparator<org.springframework.http.MediaType> ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.util.List<org.springframework.http.MediaType> < org.springframework.http.MediaType > java.util.List<org.springframework.http.MediaType> ) { Assert . notNull ( java.util.List<org.springframework.http.MediaType> , STRING ) ; if ( java.util.List<org.springframework.http.MediaType> . int ( ) > NUMBER ) { java.util.Collections . void ( java.util.List<org.springframework.http.MediaType> , org.springframework.http.MediaType . java.util.Comparator<org.springframework.http.MediaType> . java.util.Comparator<org.springframework.http.MediaType> ( org.springframework.http.MediaType . java.util.Comparator<org.springframework.http.MediaType> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.http.MediaType org.springframework.http.MediaType , org.springframework.http.MediaType org.springframework.http.MediaType ) { double double = org.springframework.http.MediaType . double ( ) ; double double = org.springframework.http.MediaType . double ( ) ; int int = java.lang.Double . int ( double , double ) ; if ( int != NUMBER ) { return int ; } else if ( org.springframework.http.MediaType . isWildcardType ( ) && ! org.springframework.http.MediaType . isWildcardType ( ) ) { return NUMBER ; } else if ( org.springframework.http.MediaType . isWildcardType ( ) && ! org.springframework.http.MediaType . isWildcardType ( ) ) { return - NUMBER ; } else if ( ! org.springframework.http.MediaType . getType ( ) . equals ( org.springframework.http.MediaType . getType ( ) ) ) { return NUMBER ; } else { if ( org.springframework.http.MediaType . isWildcardSubtype ( ) && ! org.springframework.http.MediaType . isWildcardSubtype ( ) ) { return NUMBER ; } else if ( org.springframework.http.MediaType . isWildcardSubtype ( ) && ! org.springframework.http.MediaType . isWildcardSubtype ( ) ) { return - NUMBER ; } else if ( ! org.springframework.http.MediaType . getSubtype ( ) . equals ( org.springframework.http.MediaType . getSubtype ( ) ) ) { return NUMBER ; } else { int int = org.springframework.http.MediaType . getParameters ( ) . size ( ) ; int int = org.springframework.http.MediaType . getParameters ( ) . size ( ) ; return ( int < int ? - NUMBER : ( int == int ? NUMBER : NUMBER ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( org.springframework.http.MediaType org.springframework.http.MediaType , org.springframework.http.MediaType org.springframework.http.MediaType ) { double double = org.springframework.http.MediaType . double ( ) ; double double = org.springframework.http.MediaType . double ( ) ; int int = java.lang.Double . int ( double , double ) ; if ( int != NUMBER ) { return int ; } return super. compareParameters ( org.springframework.http.MediaType , org.springframework.http.MediaType ) ; }  <METHOD_END>
