<METHOD_START> @ Test public void void ( ) java.lang.Exception { StompHeaderAccessor org.springframework.integration.websocket.server.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SUBSCRIBE ) ; org.springframework.integration.websocket.server.StompHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.integration.websocket.server.StompHeaderAccessor . setDestination ( STRING ) ; Message < byte [] > org.springframework.integration.websocket.server.Message<byte[]> = MessageBuilder . withPayload ( java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER ) . byte[] ( ) ) . setHeaders ( org.springframework.integration.websocket.server.StompHeaderAccessor ) . build ( ) ; org.springframework.integration.websocket.server.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SEND ) ; org.springframework.integration.websocket.server.StompHeaderAccessor . setSubscriptionId ( STRING ) ; Message < java.lang.String > org.springframework.integration.websocket.server.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeaders ( org.springframework.integration.websocket.server.StompHeaderAccessor ) . build ( ) ; this . org.springframework.integration.websocket.server.MessageChannel . send ( org.springframework.integration.websocket.server.Message<byte[]> ) ; this . org.springframework.integration.websocket.server.MessageChannel . send ( org.springframework.integration.websocket.server.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.websocket.server.Message<?> = this . org.springframework.integration.websocket.server.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.websocket.server.Message<> ) ; StompHeaderAccessor org.springframework.integration.websocket.server.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.integration.websocket.server.Message<> ) ; assertEquals ( StompCommand . MESSAGE . getMessageType ( ) , org.springframework.integration.websocket.server.StompHeaderAccessor . getMessageType ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.websocket.server.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.Object ) ; SubscriptionRegistry org.springframework.integration.websocket.server.SubscriptionRegistry = this . org.springframework.integration.websocket.server.SimpleBrokerMessageHandler . getSubscriptionRegistry ( ) ; org.springframework.integration.websocket.server.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . MESSAGE ) ; org.springframework.integration.websocket.server.StompHeaderAccessor . setDestination ( STRING ) ; org.springframework.integration.websocket.server.Message<byte[]> = MessageBuilder . withPayload ( java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER ) . byte[] ( ) ) . setHeaders ( org.springframework.integration.websocket.server.StompHeaderAccessor ) . build ( ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.integration.websocket.server.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.integration.websocket.server.SubscriptionRegistry . findSubscriptions ( org.springframework.integration.websocket.server.Message<byte[]> ) ; assertFalse ( org.springframework.integration.websocket.server.MultiValueMap<java.lang.String,java.lang.String> . isEmpty ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.websocket.server.MultiValueMap<java.lang.String,java.lang.String> . values ( ) . iterator ( ) . next ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; Message < ? > org.springframework.integration.websocket.server.Message<?> = this . org.springframework.integration.websocket.server.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.websocket.server.Message<> ) ; assertThat ( org.springframework.integration.websocket.server.Message<> . getPayload ( ) , instanceOf ( WebSocketSession .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebSocketInboundChannelAdapter org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter = new WebSocketInboundChannelAdapter ( Mockito . mock ( ServerWebSocketContainer .class ) ) ; org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter . setOutputChannel ( new DirectChannel ( ) ) ; org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter . setUseBroker ( true ) ; org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter . setBeanFactory ( Mockito . mock ( BeanFactory .class ) ) ; org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter . setApplicationContext ( Mockito . mock ( ApplicationContext .class ) ) ; try { org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.TomcatWebSocketTestServer org.springframework.integration.websocket.server.TomcatWebSocketTestServer ( ) { return new TomcatWebSocketTestServer ( org.springframework.integration.websocket.server.WebSocketServerTests.ServerConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.WebSocketClient org.springframework.integration.websocket.server.WebSocketClient ( ) { return new SockJsClient ( java.util.Collections .< Transport > java.util.List<org.springframework.integration.websocket.server.Transport> ( new WebSocketTransport ( new StandardWebSocketClient ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.IntegrationWebSocketContainer org.springframework.integration.websocket.server.IntegrationWebSocketContainer ( ) { ClientWebSocketContainer org.springframework.integration.websocket.server.ClientWebSocketContainer = new ClientWebSocketContainer ( org.springframework.integration.websocket.server.WebSocketClient ( ) , org.springframework.integration.websocket.server.TomcatWebSocketTestServer ( ) . getWsBaseUrl ( ) + STRING ) ; org.springframework.integration.websocket.server.ClientWebSocketContainer . setOrigin ( STRING ) ; return org.springframework.integration.websocket.server.ClientWebSocketContainer ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.SubProtocolHandler org.springframework.integration.websocket.server.SubProtocolHandler ( ) { return new StompSubProtocolHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.PollableChannel org.springframework.integration.websocket.server.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.MessageChannel org.springframework.integration.websocket.server.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.MessageProducer org.springframework.integration.websocket.server.MessageProducer ( ) { WebSocketInboundChannelAdapter org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter = new WebSocketInboundChannelAdapter ( org.springframework.integration.websocket.server.IntegrationWebSocketContainer ( ) , new SubProtocolHandlerRegistry ( org.springframework.integration.websocket.server.SubProtocolHandler ( ) ) ) ; org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter . setOutputChannel ( org.springframework.integration.websocket.server.PollableChannel ( ) ) ; return org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.websocket.server.MessageHandler org.springframework.integration.websocket.server.MessageHandler ( ) { return new WebSocketOutboundMessageHandler ( org.springframework.integration.websocket.server.IntegrationWebSocketContainer ( ) , new SubProtocolHandlerRegistry ( org.springframework.integration.websocket.server.SubProtocolHandler ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompEndpointRegistry org.springframework.integration.websocket.server.StompEndpointRegistry ) { org.springframework.integration.websocket.server.StompEndpointRegistry . addEndpoint ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageBrokerRegistry org.springframework.integration.websocket.server.MessageBrokerRegistry ) { org.springframework.integration.websocket.server.MessageBrokerRegistry . setApplicationDestinationPrefixes ( STRING ) . enableSimpleBroker ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.WebSocketHandlerDecoratorFactory org.springframework.integration.websocket.server.WebSocketHandlerDecoratorFactory ( ) { return new org.springframework.integration.websocket.server.WebSocketServerTests.TestWebSocketHandlerDecoratorFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.ServerWebSocketContainer org.springframework.integration.websocket.server.ServerWebSocketContainer ( ) { return new ServerWebSocketContainer ( STRING ) . setDecoratorFactories ( org.springframework.integration.websocket.server.WebSocketHandlerDecoratorFactory ( ) ) . setAllowedOrigins ( STRING ) . withSockJs ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.SubProtocolHandler org.springframework.integration.websocket.server.SubProtocolHandler ( ) { return new StompSubProtocolHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.MessageChannel org.springframework.integration.websocket.server.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.MessageChannel org.springframework.integration.websocket.server.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.MessageProducer org.springframework.integration.websocket.server.MessageProducer ( ) { WebSocketInboundChannelAdapter org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter = new WebSocketInboundChannelAdapter ( org.springframework.integration.websocket.server.ServerWebSocketContainer ( ) , new SubProtocolHandlerRegistry ( org.springframework.integration.websocket.server.SubProtocolHandler ( ) ) ) ; org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter . setOutputChannel ( org.springframework.integration.websocket.server.MessageChannel ( ) ) ; org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter . setUseBroker ( true ) ; return org.springframework.integration.websocket.server.WebSocketInboundChannelAdapter ; }  <METHOD_END>
<METHOD_START> @ Bean @ Transformer ( inputChannel = STRING , outputChannel = STRING ) public org.springframework.integration.websocket.server.ExpressionEvaluatingTransformer org.springframework.integration.websocket.server.ExpressionEvaluatingTransformer ( ) { return new ExpressionEvaluatingTransformer ( org.springframework.integration.websocket.server.SpelExpressionParser . parseExpression ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.websocket.server.MessageHandler org.springframework.integration.websocket.server.MessageHandler ( ) { return new WebSocketOutboundMessageHandler ( org.springframework.integration.websocket.server.ServerWebSocketContainer ( ) , new SubProtocolHandlerRegistry ( org.springframework.integration.websocket.server.SubProtocolHandler ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.server.PollableChannel org.springframework.integration.websocket.server.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.websocket.server.ApplicationListener<org.springframework.integration.websocket.server.ApplicationEvent> < ApplicationEvent > org.springframework.integration.websocket.server.ApplicationListener<org.springframework.integration.websocket.server.ApplicationEvent> ( ) { ApplicationEventListeningMessageProducer org.springframework.integration.websocket.server.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.websocket.server.ApplicationEventListeningMessageProducer . setEventTypes ( PayloadApplicationEvent .class ) ; org.springframework.integration.websocket.server.ApplicationEventListeningMessageProducer . setPayloadExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; org.springframework.integration.websocket.server.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.websocket.server.PollableChannel ( ) ) ; return org.springframework.integration.websocket.server.ApplicationEventListeningMessageProducer ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.websocket.server.WebSocketHandler org.springframework.integration.websocket.server.WebSocketHandler ( WebSocketHandler org.springframework.integration.websocket.server.WebSocketHandler ) { return new org.springframework.integration.websocket.server.WebSocketServerTests.TestWebSocketHandlerDecoratorFactory.TestWebSocketHandler ( org.springframework.integration.websocket.server.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.websocket.server.ApplicationEventPublisher ) { this . org.springframework.integration.websocket.server.ApplicationEventPublisher = org.springframework.integration.websocket.server.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> void ( WebSocketHandler org.springframework.integration.websocket.server.WebSocketHandler ) { super( org.springframework.integration.websocket.server.WebSocketHandler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.server.WebSocketSession , WebSocketMessage < ? > org.springframework.integration.websocket.server.WebSocketMessage<?> ) throws java.lang.Exception { super. handleMessage ( org.springframework.integration.websocket.server.WebSocketSession , org.springframework.integration.websocket.server.WebSocketMessage<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.server.WebSocketSession ) throws java.lang.Exception { super. afterConnectionEstablished ( org.springframework.integration.websocket.server.WebSocketSession ) ; org.springframework.integration.websocket.server.ApplicationEventPublisher . publishEvent ( org.springframework.integration.websocket.server.WebSocketSession ) ; }  <METHOD_END>
