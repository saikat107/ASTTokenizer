<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset , java.lang.Long java.lang.Long ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.nio.charset.Charset = java.nio.charset.Charset ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.nio.charset.Charset java.nio.charset.Charset ( ) { return this . java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return this . java.lang.Long ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.String java.lang.String ) { return new org.springframework.http.ContentDisposition.BuilderImpl ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.ContentDisposition org.springframework.http.ContentDisposition ( ) { return new org.springframework.http.ContentDisposition ( null , null , null , null , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.ContentDisposition org.springframework.http.ContentDisposition ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; Assert . isTrue ( java.lang.String[] . int >= NUMBER , STRING ) ; java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; java.nio.charset.Charset java.nio.charset.Charset = null ; java.lang.Long java.lang.Long = null ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = java.lang.String[] [ int ] ; int int = java.lang.String . int ( '=' ) ; if ( int != - NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING , int + NUMBER ) && java.lang.String . boolean ( STRING ) ? java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) - NUMBER ) : java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ; } else if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ( java.lang.String ) ; java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( STRING ) ) ) ; Assert . isTrue ( java.nio.charset.Charset . boolean ( java.nio.charset.Charset ) || java.nio.charset.Charset . boolean ( java.nio.charset.Charset ) , STRING ) ; } else if ( java.lang.String . boolean ( STRING ) && ( java.lang.String == null ) ) { java.lang.String = java.lang.String ; } else if ( java.lang.String . boolean ( STRING ) ) { java.lang.Long = java.lang.Long . long ( java.lang.String ) ; } } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } } return new org.springframework.http.ContentDisposition ( java.lang.String , java.lang.String , java.lang.String , java.nio.charset.Charset , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; int int = java.lang.String . int ( STRING ) ; int int = java.lang.String . int ( STRING , int + NUMBER ) ; if ( int == - NUMBER || int == - NUMBER ) { return java.lang.String ; } java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String . java.lang.String ( NUMBER , int ) ) ; Assert . isTrue ( java.nio.charset.Charset . boolean ( java.nio.charset.Charset ) || java.nio.charset.Charset . boolean ( java.nio.charset.Charset ) , STRING ) ; byte [] byte[] = java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) . byte[] ( java.nio.charset.Charset ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; int int = NUMBER ; while ( int < byte[] . int ) { byte byte = byte[] [ int ] ; if ( boolean ( byte ) ) { java.io.ByteArrayOutputStream . void ( ( char ) byte ) ; int ++ ; } else if ( byte == '%' ) { char [] char[] = { ( char ) byte[] [ int + NUMBER ] , ( char ) byte[] [ int + NUMBER ] } ; java.io.ByteArrayOutputStream . void ( java.lang.Integer . int ( java.lang.String . java.lang.String ( char[] ) , NUMBER ) ) ; int += NUMBER ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } } return new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) , java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( byte byte ) { return ( byte >= '0' && byte <= '9' ) || ( byte >= 'a' && byte <= 'z' ) || ( byte >= 'A' && byte <= 'Z' ) || byte == '!' || byte == '#' || byte == '$' || byte == '&' || byte == '+' || byte == '-' || byte == '.' || byte == '^' || byte == '_' || byte == '`' || byte == '|' || byte == '~' ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.http.ContentDisposition> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.http.ContentDisposition org.springframework.http.ContentDisposition = ( org.springframework.http.ContentDisposition ) java.lang.Object ; if ( java.lang.String != null ? ! java.lang.String . boolean ( org.springframework.http.ContentDisposition . java.lang.String ) : org.springframework.http.ContentDisposition . java.lang.String != null ) { return false ; } if ( java.lang.String != null ? ! java.lang.String . boolean ( org.springframework.http.ContentDisposition . java.lang.String ) : org.springframework.http.ContentDisposition . java.lang.String != null ) { return false ; } if ( java.lang.String != null ? ! java.lang.String . boolean ( org.springframework.http.ContentDisposition . java.lang.String ) : org.springframework.http.ContentDisposition . java.lang.String != null ) { return false ; } if ( java.nio.charset.Charset != null ? ! java.nio.charset.Charset . boolean ( org.springframework.http.ContentDisposition . java.nio.charset.Charset ) : org.springframework.http.ContentDisposition . java.nio.charset.Charset != null ) { return false ; } return java.lang.Long != null ? java.lang.Long . boolean ( org.springframework.http.ContentDisposition . java.lang.Long ) : org.springframework.http.ContentDisposition . java.lang.Long == null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = java.lang.String != null ? java.lang.String . int ( ) : NUMBER ; int = NUMBER * int + ( java.lang.String != null ? java.lang.String . int ( ) : NUMBER ) ; int = NUMBER * int + ( java.lang.String != null ? java.lang.String . int ( ) : NUMBER ) ; int = NUMBER * int + ( java.nio.charset.Charset != null ? java.nio.charset.Charset . int ( ) : NUMBER ) ; int = NUMBER * int + ( java.lang.Long != null ? java.lang.Long . int ( ) : NUMBER ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( this . java.lang.String ) ; if ( this . java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.String ) . java.lang.StringBuilder ( '\"' ) ; } if ( this . java.lang.String != null ) { if( this . java.nio.charset.Charset == null || java.nio.charset.StandardCharsets . java.nio.charset.Charset . boolean ( this . java.nio.charset.Charset ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.String ) . java.lang.StringBuilder ( '\"' ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( this . java.lang.String , this . java.nio.charset.Charset ) ) ; } } if ( this . java.lang.Long != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.Long ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.nio.charset.Charset , STRING ) ; if ( java.nio.charset.StandardCharsets . java.nio.charset.Charset . boolean ( java.nio.charset.Charset ) ) { return java.lang.String ; } Assert . isTrue ( java.nio.charset.Charset . boolean ( java.nio.charset.Charset ) || java.nio.charset.Charset . boolean ( java.nio.charset.Charset ) , STRING ) ; byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.Charset ) ; int int = byte[] . int ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( int << NUMBER ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.nio.charset.Charset . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( byte byte : byte[] ) { if ( boolean ( byte ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( ( char ) byte ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( '%' ) ; char char = java.lang.Character . char ( java.lang.Character . char ( ( byte >> NUMBER ) & NUMBER , NUMBER ) ) ; char char = java.lang.Character . char ( java.lang.Character . char ( byte & NUMBER , NUMBER ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( char ) ; java.lang.StringBuilder . java.lang.StringBuilder ( char ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset );  <METHOD_END>
<METHOD_START> org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.Long java.lang.Long );  <METHOD_END>
<METHOD_START> org.springframework.http.ContentDisposition org.springframework.http.ContentDisposition ( )  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset ) { this . java.lang.String = java.lang.String ; this . java.nio.charset.Charset = java.nio.charset.Charset ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.ContentDisposition.Builder org.springframework.http.ContentDisposition.Builder ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.ContentDisposition org.springframework.http.ContentDisposition ( ) { return new org.springframework.http.ContentDisposition ( this . java.lang.String , this . java.lang.String , this . java.lang.String , this . java.nio.charset.Charset , this . java.lang.Long ) ; }  <METHOD_END>
