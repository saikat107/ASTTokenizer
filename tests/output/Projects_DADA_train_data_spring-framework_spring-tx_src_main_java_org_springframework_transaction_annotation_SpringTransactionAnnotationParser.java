<METHOD_START> @ java.lang.Override public org.springframework.transaction.annotation.TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { AnnotationAttributes org.springframework.transaction.annotation.AnnotationAttributes = AnnotatedElementUtils . getMergedAnnotationAttributes ( java.lang.reflect.AnnotatedElement , Transactional .class ) ; if ( org.springframework.transaction.annotation.AnnotationAttributes != null ) { return org.springframework.transaction.annotation.TransactionAttribute ( org.springframework.transaction.annotation.AnnotationAttributes ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.annotation.TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute ( Transactional org.springframework.transaction.annotation.Transactional ) { return org.springframework.transaction.annotation.TransactionAttribute ( AnnotationUtils . getAnnotationAttributes ( org.springframework.transaction.annotation.Transactional , false , false ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.annotation.TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute ( AnnotationAttributes org.springframework.transaction.annotation.AnnotationAttributes ) { RuleBasedTransactionAttribute org.springframework.transaction.annotation.RuleBasedTransactionAttribute = new RuleBasedTransactionAttribute ( ) ; Propagation org.springframework.transaction.annotation.Propagation = org.springframework.transaction.annotation.AnnotationAttributes . getEnum ( STRING ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . setPropagationBehavior ( org.springframework.transaction.annotation.Propagation . value ( ) ) ; Isolation org.springframework.transaction.annotation.Isolation = org.springframework.transaction.annotation.AnnotationAttributes . getEnum ( STRING ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . setIsolationLevel ( org.springframework.transaction.annotation.Isolation . value ( ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . setTimeout ( org.springframework.transaction.annotation.AnnotationAttributes . getNumber ( STRING ) . intValue ( ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . setReadOnly ( org.springframework.transaction.annotation.AnnotationAttributes . getBoolean ( STRING ) ) ; org.springframework.transaction.annotation.RuleBasedTransactionAttribute . setQualifier ( org.springframework.transaction.annotation.AnnotationAttributes . getString ( STRING ) ) ; java.util.ArrayList<org.springframework.transaction.annotation.RollbackRuleAttribute> < RollbackRuleAttribute > java.util.ArrayList<org.springframework.transaction.annotation.RollbackRuleAttribute> = new java.util.ArrayList<org.springframework.transaction.annotation.RollbackRuleAttribute> <> ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.transaction.annotation.AnnotationAttributes . getClassArray ( STRING ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { RollbackRuleAttribute org.springframework.transaction.annotation.RollbackRuleAttribute = new RollbackRuleAttribute ( java.lang.Class<> ) ; java.util.ArrayList<org.springframework.transaction.annotation.RollbackRuleAttribute> . add ( org.springframework.transaction.annotation.RollbackRuleAttribute ) ; } java.lang.String [] java.lang.String[] = org.springframework.transaction.annotation.AnnotationAttributes . getStringArray ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { RollbackRuleAttribute org.springframework.transaction.annotation.RollbackRuleAttribute = new RollbackRuleAttribute ( java.lang.String ) ; java.util.ArrayList<org.springframework.transaction.annotation.RollbackRuleAttribute> . add ( org.springframework.transaction.annotation.RollbackRuleAttribute ) ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.transaction.annotation.AnnotationAttributes . getClassArray ( STRING ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { NoRollbackRuleAttribute org.springframework.transaction.annotation.NoRollbackRuleAttribute = new NoRollbackRuleAttribute ( java.lang.Class<> ) ; java.util.ArrayList<org.springframework.transaction.annotation.RollbackRuleAttribute> . add ( org.springframework.transaction.annotation.NoRollbackRuleAttribute ) ; } java.lang.String [] java.lang.String[] = org.springframework.transaction.annotation.AnnotationAttributes . getStringArray ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { NoRollbackRuleAttribute org.springframework.transaction.annotation.NoRollbackRuleAttribute = new NoRollbackRuleAttribute ( java.lang.String ) ; java.util.ArrayList<org.springframework.transaction.annotation.RollbackRuleAttribute> . add ( org.springframework.transaction.annotation.NoRollbackRuleAttribute ) ; } org.springframework.transaction.annotation.RuleBasedTransactionAttribute . getRollbackRules ( ) . addAll ( java.util.ArrayList<org.springframework.transaction.annotation.RollbackRuleAttribute> ) ; return org.springframework.transaction.annotation.RuleBasedTransactionAttribute ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || java.lang.Object instanceof org.springframework.transaction.annotation.SpringTransactionAnnotationParser ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.transaction.annotation.SpringTransactionAnnotationParser .class . int ( ) ; }  <METHOD_END>
