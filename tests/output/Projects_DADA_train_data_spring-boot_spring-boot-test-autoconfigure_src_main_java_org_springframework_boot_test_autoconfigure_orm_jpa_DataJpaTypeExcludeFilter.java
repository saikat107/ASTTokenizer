<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest = AnnotatedElementUtils . getMergedAnnotation ( java.lang.Class<> , DataJpaTest .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.test.autoconfigure.orm.jpa.Filter [] org.springframework.boot.test.autoconfigure.orm.jpa.Filter[] ( FilterType org.springframework.boot.test.autoconfigure.orm.jpa.FilterType ) { switch ( org.springframework.boot.test.autoconfigure.orm.jpa.FilterType ) { case INCLUDE : return this . org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest . includeFilters ( ) ; case EXCLUDE : return this . org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest . excludeFilters ( ) ; } throw new java.lang.IllegalStateException ( STRING + org.springframework.boot.test.autoconfigure.orm.jpa.FilterType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest . useDefaultFilters ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( ) ; }  <METHOD_END>
