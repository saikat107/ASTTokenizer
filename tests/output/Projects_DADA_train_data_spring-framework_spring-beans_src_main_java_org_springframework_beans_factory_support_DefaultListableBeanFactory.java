<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.beans.factory.support.BeanFactory ) { super( org.springframework.beans.factory.support.BeanFactory ); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.ref.Reference<org.springframework.beans.factory.support.DefaultListableBeanFactory>> . java.lang.ref.Reference<org.springframework.beans.factory.support.DefaultListableBeanFactory> ( java.lang.String , new java.lang.ref.WeakReference<org.springframework.beans.factory.support.DefaultListableBeanFactory> <> ( this ) ) ; } else if ( this . java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.ref.Reference<org.springframework.beans.factory.support.DefaultListableBeanFactory>> . java.lang.ref.Reference<org.springframework.beans.factory.support.DefaultListableBeanFactory> ( this . java.lang.String ) ; } this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> ) { this . java.util.Comparator<java.lang.Object> = java.util.Comparator<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> ( ) { return this . java.util.Comparator<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( final AutowireCandidateResolver org.springframework.beans.factory.support.AutowireCandidateResolver ) { Assert . notNull ( org.springframework.beans.factory.support.AutowireCandidateResolver , STRING ) ; if ( org.springframework.beans.factory.support.AutowireCandidateResolver instanceof BeanFactoryAware ) { if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { ( ( BeanFactoryAware ) org.springframework.beans.factory.support.AutowireCandidateResolver ) . setBeanFactory ( org.springframework.beans.factory.support.DefaultListableBeanFactory .this ) ; return null ; } } , getAccessControlContext ( ) ) ; } else { ( ( BeanFactoryAware ) org.springframework.beans.factory.support.AutowireCandidateResolver ) . setBeanFactory ( this ) ; } } this . org.springframework.beans.factory.support.AutowireCandidateResolver = org.springframework.beans.factory.support.AutowireCandidateResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { ( ( BeanFactoryAware ) org.springframework.beans.factory.support.AutowireCandidateResolver ) . setBeanFactory ( org.springframework.beans.factory.support.DefaultListableBeanFactory .this ) ; return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.AutowireCandidateResolver org.springframework.beans.factory.support.AutowireCandidateResolver ( ) { return this . org.springframework.beans.factory.support.AutowireCandidateResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableBeanFactory org.springframework.beans.factory.support.ConfigurableBeanFactory ) { super. copyConfigurationFrom ( org.springframework.beans.factory.support.ConfigurableBeanFactory ) ; if ( org.springframework.beans.factory.support.ConfigurableBeanFactory instanceof org.springframework.beans.factory.support.DefaultListableBeanFactory ) { org.springframework.beans.factory.support.DefaultListableBeanFactory org.springframework.beans.factory.support.DefaultListableBeanFactory = ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) org.springframework.beans.factory.support.ConfigurableBeanFactory ; this . boolean = org.springframework.beans.factory.support.DefaultListableBeanFactory . boolean ; this . boolean = org.springframework.beans.factory.support.DefaultListableBeanFactory . boolean ; this . java.util.Comparator<java.lang.Object> = org.springframework.beans.factory.support.DefaultListableBeanFactory . java.util.Comparator<java.lang.Object> ; void ( BeanUtils . instantiateClass ( org.springframework.beans.factory.support.AutowireCandidateResolver ( ) . getClass ( ) ) ) ; this . java.util.Map<java.lang.Class<?>,java.lang.Object> . void ( org.springframework.beans.factory.support.DefaultListableBeanFactory . java.util.Map<java.lang.Class<?>,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.beans.factory.support.BeansException { return T ( java.lang.Class<T> , ( java.lang.Object [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.beans.factory.support.BeansException { NamedBeanHolder < T > org.springframework.beans.factory.support.NamedBeanHolder<T> = org.springframework.beans.factory.support.NamedBeanHolder<T> ( java.lang.Class<T> , java.lang.Object[] ) ; if ( org.springframework.beans.factory.support.NamedBeanHolder<T> != null ) { return org.springframework.beans.factory.support.NamedBeanHolder<T> . getBeanInstance ( ) ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = getParentBeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory != null ) { return org.springframework.beans.factory.support.BeanFactory . getBean ( java.lang.Class<T> , java.lang.Object[] ) ; } throw new NoSuchBeanDefinitionException ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . containsKey ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { if ( this . java.lang.String[] != null ) { return this . java.lang.String[] . java.lang.Object ( ) ; } else { return StringUtils . toStringArray ( this . java.util.List<java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ResolvableType org.springframework.beans.factory.support.ResolvableType ) { return java.lang.String[] ( org.springframework.beans.factory.support.ResolvableType , true , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String[] ( java.lang.Class<> , true , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean , boolean boolean ) { if ( ! boolean ( ) || java.lang.Class<> == null || ! boolean ) { return java.lang.String[] ( ResolvableType . forRawClass ( java.lang.Class<> ) , boolean , boolean ) ; } java.util.Map<java.lang.Class<?>,java.lang.String[]> < java.lang.Class<?> < ? > , java.lang.String [] > java.util.Map<java.lang.Class<?>,java.lang.String[]> = ( boolean ? this . java.util.Map<java.lang.Class<?>,java.lang.String[]> : this . java.util.Map<java.lang.Class<?>,java.lang.String[]> ) ; java.lang.String [] java.lang.String[] = java.util.Map<java.lang.Class<?>,java.lang.String[]> . java.lang.String[] ( java.lang.Class<> ) ; if ( java.lang.String[] != null ) { return java.lang.String[] ; } java.lang.String[] = java.lang.String[] ( ResolvableType . forRawClass ( java.lang.Class<> ) , boolean , true ) ; if ( ClassUtils . isCacheSafe ( java.lang.Class<> , getBeanClassLoader ( ) ) ) { java.util.Map<java.lang.Class<?>,java.lang.String[]> . java.lang.String[] ( java.lang.Class<> , java.lang.String[] ) ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( ResolvableType org.springframework.beans.factory.support.ResolvableType , boolean boolean , boolean boolean ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { if ( ! isAlias ( java.lang.String ) ) { try { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = getMergedLocalBeanDefinition ( java.lang.String ) ; if ( ! org.springframework.beans.factory.support.RootBeanDefinition . isAbstract ( ) && ( boolean || ( ( org.springframework.beans.factory.support.RootBeanDefinition . hasBeanClass ( ) || ! org.springframework.beans.factory.support.RootBeanDefinition . isLazyInit ( ) || boolean ( ) ) ) && ! boolean ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryBeanName ( ) ) ) ) { boolean boolean = isFactoryBean ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder = org.springframework.beans.factory.support.RootBeanDefinition . getDecoratedDefinition ( ) ; boolean boolean = ( boolean || ! boolean || ( org.springframework.beans.factory.support.BeanDefinitionHolder != null && ! org.springframework.beans.factory.support.RootBeanDefinition . isLazyInit ( ) ) || containsSingleton ( java.lang.String ) ) && ( boolean || ( org.springframework.beans.factory.support.BeanDefinitionHolder != null ? org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) : isSingleton ( java.lang.String ) ) ) && isTypeMatch ( java.lang.String , org.springframework.beans.factory.support.ResolvableType ) ; if ( ! boolean && boolean ) { java.lang.String = FACTORY_BEAN_PREFIX + java.lang.String ; boolean = ( boolean || org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) && isTypeMatch ( java.lang.String , org.springframework.beans.factory.support.ResolvableType ) ; } if ( boolean ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } catch ( CannotLoadBeanClassException org.springframework.beans.factory.support.CannotLoadBeanClassException ) { if ( boolean ) { throw org.springframework.beans.factory.support.CannotLoadBeanClassException ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + java.lang.String + STRING , org.springframework.beans.factory.support.CannotLoadBeanClassException ) ; } onSuppressedException ( org.springframework.beans.factory.support.CannotLoadBeanClassException ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.support.BeanDefinitionStoreException ) { if ( boolean ) { throw org.springframework.beans.factory.support.BeanDefinitionStoreException ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + java.lang.String + STRING , org.springframework.beans.factory.support.BeanDefinitionStoreException ) ; } onSuppressedException ( org.springframework.beans.factory.support.BeanDefinitionStoreException ) ; } } } for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { try { if ( isFactoryBean ( java.lang.String ) ) { if ( ( boolean || isSingleton ( java.lang.String ) ) && isTypeMatch ( java.lang.String , org.springframework.beans.factory.support.ResolvableType ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; continue; } java.lang.String = FACTORY_BEAN_PREFIX + java.lang.String ; } if ( isTypeMatch ( java.lang.String , org.springframework.beans.factory.support.ResolvableType ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.support.NoSuchBeanDefinitionException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING , org.springframework.beans.factory.support.NoSuchBeanDefinitionException ) ; } } } return StringUtils . toStringArray ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return ( java.lang.String != null && isFactoryBean ( java.lang.String ) && ! containsSingleton ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Map<java.lang.String,T> < java.lang.String , T > java.util.Map<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.beans.factory.support.BeansException { return java.util.Map<java.lang.String,T> ( java.lang.Class<T> , true , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Map<java.lang.String,T> < java.lang.String , T > java.util.Map<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> , boolean boolean , boolean boolean )			throws org.springframework.beans.factory.support.BeansException { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.Class<T> , boolean , boolean ) ; java.util.Map<java.lang.String,T> < java.lang.String , T > java.util.Map<java.lang.String,T> = new java.util.LinkedHashMap<java.lang.String,T> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.util.Map<java.lang.String,T> . T ( java.lang.String , T ( java.lang.String , java.lang.Class<T> ) ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.beans.factory.support.BeanCreationException . getMostSpecificCause ( ) ; if ( java.lang.Throwable instanceof BeanCurrentlyInCreationException ) { BeanCreationException org.springframework.beans.factory.support.BeanCreationException = ( BeanCreationException ) java.lang.Throwable ; if ( isCurrentlyInCreation ( org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ) { if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + java.lang.String + STRING + org.springframework.beans.factory.support.BeanCreationException . getMessage ( ) ) ; } onSuppressedException ( org.springframework.beans.factory.support.BeanCreationException ) ; continue; } } throw org.springframework.beans.factory.support.BeanCreationException ; } } return java.util.Map<java.lang.String,T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { BeanDefinition org.springframework.beans.factory.support.BeanDefinition = org.springframework.beans.factory.support.BeanDefinition ( java.lang.String ) ; if ( ! org.springframework.beans.factory.support.BeanDefinition . isAbstract ( ) && findAnnotationOnBean ( java.lang.String , java.lang.Class<> ) != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { if ( ! java.util.List<java.lang.String> . boolean ( java.lang.String ) && findAnnotationOnBean ( java.lang.String , java.lang.Class<> ) != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.Class<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , T ( java.lang.String ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < A extends java.lang.annotation.Annotation > A A ( java.lang.String java.lang.String , java.lang.Class<A> < A > java.lang.Class<A> )			throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { A A = null ; java.lang.Class<?> < ? > java.lang.Class<?> = getType ( java.lang.String ) ; if ( java.lang.Class<> != null ) { A = AnnotationUtils . findAnnotation ( java.lang.Class<> , java.lang.Class<A> ) ; } if ( A == null && boolean ( java.lang.String ) ) { BeanDefinition org.springframework.beans.factory.support.BeanDefinition = getMergedBeanDefinition ( java.lang.String ) ; if ( org.springframework.beans.factory.support.BeanDefinition instanceof AbstractBeanDefinition ) { AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.support.BeanDefinition ; if ( org.springframework.beans.factory.support.AbstractBeanDefinition . hasBeanClass ( ) ) { A = AnnotationUtils . findAnnotation ( org.springframework.beans.factory.support.AbstractBeanDefinition . getBeanClass ( ) , java.lang.Class<A> ) ; } } } return A ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.Object != null ) { if ( ! ( java.lang.Object instanceof ObjectFactory || java.lang.Class<> . boolean ( java.lang.Object ) ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } this . java.util.Map<java.lang.Class<?>,java.lang.Object> . java.lang.Object ( java.lang.Class<> , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor )			throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { return boolean ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor , org.springframework.beans.factory.support.AutowireCandidateResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , AutowireCandidateResolver org.springframework.beans.factory.support.AutowireCandidateResolver )			throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.String java.lang.String = BeanFactoryUtils . transformedBeanName ( java.lang.String ) ; if ( boolean ( java.lang.String ) ) { return boolean ( java.lang.String , getMergedLocalBeanDefinition ( java.lang.String ) , org.springframework.beans.factory.support.DependencyDescriptor , org.springframework.beans.factory.support.AutowireCandidateResolver ) ; } else if ( containsSingleton ( java.lang.String ) ) { return boolean ( java.lang.String , new RootBeanDefinition ( getType ( java.lang.String ) ) , org.springframework.beans.factory.support.DependencyDescriptor , org.springframework.beans.factory.support.AutowireCandidateResolver ) ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = getParentBeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory instanceof org.springframework.beans.factory.support.DefaultListableBeanFactory ) { return ( ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) org.springframework.beans.factory.support.BeanFactory ) . boolean ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor , org.springframework.beans.factory.support.AutowireCandidateResolver ) ; } else if ( org.springframework.beans.factory.support.BeanFactory instanceof ConfigurableListableBeanFactory ) { return ( ( ConfigurableListableBeanFactory ) org.springframework.beans.factory.support.BeanFactory ) . isAutowireCandidate ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ; } else { return true ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , AutowireCandidateResolver org.springframework.beans.factory.support.AutowireCandidateResolver ) { java.lang.String java.lang.String = BeanFactoryUtils . transformedBeanName ( java.lang.String ) ; resolveBeanClass ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String ) ; if ( mbd . isFactoryMethodUnique ) { boolean boolean ; synchronized ( mbd . constructorArgumentLock ) { boolean = ( mbd . resolvedConstructorOrFactoryMethod == null ) ; } if ( boolean ) { new ConstructorResolver ( this ) . resolveFactoryMethodIfPossible ( org.springframework.beans.factory.support.RootBeanDefinition ) ; } } return org.springframework.beans.factory.support.AutowireCandidateResolver . isAutowireCandidate ( new BeanDefinitionHolder ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , getAliases ( java.lang.String ) ) , org.springframework.beans.factory.support.DependencyDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.BeanDefinition org.springframework.beans.factory.support.BeanDefinition ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { BeanDefinition org.springframework.beans.factory.support.BeanDefinition = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . get ( java.lang.String ) ; if ( org.springframework.beans.factory.support.BeanDefinition == null ) { if ( this . logger . isTraceEnabled ( ) ) { this . logger . trace ( STRING + java.lang.String + STRING + this ) ; } throw new NoSuchBeanDefinitionException ( java.lang.String ) ; } return org.springframework.beans.factory.support.BeanDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> ( ) { CompositeIterator < java.lang.String > org.springframework.beans.factory.support.CompositeIterator<java.lang.String> = new CompositeIterator <> ( ) ; org.springframework.beans.factory.support.CompositeIterator<java.lang.String> . add ( this . java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ) ; org.springframework.beans.factory.support.CompositeIterator<java.lang.String> . add ( this . java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ) ; return org.springframework.beans.factory.support.CompositeIterator<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. clearMetadataCache ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; this . java.lang.String[] = StringUtils . toStringArray ( this . java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { return ( this . boolean || super. isBeanEligibleForMetadataCaching ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.beans.factory.support.BeansException { if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + this ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( this . java.util.List<java.lang.String> ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = getMergedLocalBeanDefinition ( java.lang.String ) ; if ( ! org.springframework.beans.factory.support.RootBeanDefinition . isAbstract ( ) && org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) && ! org.springframework.beans.factory.support.RootBeanDefinition . isLazyInit ( ) ) { if ( isFactoryBean ( java.lang.String ) ) { final FactoryBean < ? > org.springframework.beans.factory.support.FactoryBean<?> = ( FactoryBean < ? > ) java.lang.Object ( FACTORY_BEAN_PREFIX + java.lang.String ) ; boolean boolean ; if ( java.lang.System . java.lang.SecurityManager ( ) != null && org.springframework.beans.factory.support.FactoryBean<> instanceof SmartFactoryBean ) { boolean = java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Boolean> < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) { return ( ( SmartFactoryBean < ? > ) org.springframework.beans.factory.support.FactoryBean<> ) . isEagerInit ( ) ; } } , getAccessControlContext ( ) ) ; } else { boolean = ( org.springframework.beans.factory.support.FactoryBean<> instanceof SmartFactoryBean && ( ( SmartFactoryBean < ? > ) org.springframework.beans.factory.support.FactoryBean<> ) . isEagerInit ( ) ) ; } if ( boolean ) { T ( java.lang.String ) ; } } else { T ( java.lang.String ) ; } } } for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.lang.Object java.lang.Object = getSingleton ( java.lang.String ) ; if ( java.lang.Object instanceof SmartInitializingSingleton ) { final SmartInitializingSingleton org.springframework.beans.factory.support.SmartInitializingSingleton = ( SmartInitializingSingleton ) java.lang.Object ; if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { java.security.AccessController . java.lang.Object ( new java.security.PrivilegedAction<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) { org.springframework.beans.factory.support.SmartInitializingSingleton . afterSingletonsInstantiated ( ) ; return null ; } } , getAccessControlContext ( ) ) ; } else { org.springframework.beans.factory.support.SmartInitializingSingleton . afterSingletonsInstantiated ( ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) { return ( ( SmartFactoryBean < ? > ) org.springframework.beans.factory.support.FactoryBean<> ) . isEagerInit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { org.springframework.beans.factory.support.SmartInitializingSingleton . afterSingletonsInstantiated ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , BeanDefinition org.springframework.beans.factory.support.BeanDefinition )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.beans.factory.support.BeanDefinition , STRING ) ; if ( org.springframework.beans.factory.support.BeanDefinition instanceof AbstractBeanDefinition ) { try { ( ( AbstractBeanDefinition ) org.springframework.beans.factory.support.BeanDefinition ) . validate ( ) ; } catch ( BeanDefinitionValidationException org.springframework.beans.factory.support.BeanDefinitionValidationException ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , java.lang.String , STRING , org.springframework.beans.factory.support.BeanDefinitionValidationException ) ; } } BeanDefinition org.springframework.beans.factory.support.BeanDefinition ; org.springframework.beans.factory.support.BeanDefinition = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . get ( java.lang.String ) ; if ( org.springframework.beans.factory.support.BeanDefinition != null ) { if ( ! boolean ( ) ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + org.springframework.beans.factory.support.BeanDefinition + STRING + java.lang.String + STRING + org.springframework.beans.factory.support.BeanDefinition + STRING ) ; } else if ( org.springframework.beans.factory.support.BeanDefinition . getRole ( ) < org.springframework.beans.factory.support.BeanDefinition . getRole ( ) ) { if ( this . logger . isWarnEnabled ( ) ) { this . logger . warn ( STRING + java.lang.String + STRING + org.springframework.beans.factory.support.BeanDefinition + STRING + org.springframework.beans.factory.support.BeanDefinition + STRING ) ; } } else if ( ! org.springframework.beans.factory.support.BeanDefinition . equals ( org.springframework.beans.factory.support.BeanDefinition ) ) { if ( this . logger . isInfoEnabled ( ) ) { this . logger . info ( STRING + java.lang.String + STRING + org.springframework.beans.factory.support.BeanDefinition + STRING + org.springframework.beans.factory.support.BeanDefinition + STRING ) ; } } else { if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( STRING + java.lang.String + STRING + org.springframework.beans.factory.support.BeanDefinition + STRING + org.springframework.beans.factory.support.BeanDefinition + STRING ) ; } } this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . put ( java.lang.String , org.springframework.beans.factory.support.BeanDefinition ) ; } else { if ( hasBeanCreationStarted ( ) ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> ) { this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . put ( java.lang.String , org.springframework.beans.factory.support.BeanDefinition ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( this . java.util.List<java.lang.String> . int ( ) + NUMBER ) ; java.util.List<java.lang.String> . boolean ( this . java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; if ( this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( this . java.util.Set<java.lang.String> ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ; } } } else { this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . put ( java.lang.String , org.springframework.beans.factory.support.BeanDefinition ) ; this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } this . java.lang.String[] = null ; } if ( org.springframework.beans.factory.support.BeanDefinition != null || containsSingleton ( java.lang.String ) ) { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { Assert . hasText ( java.lang.String , STRING ) ; BeanDefinition org.springframework.beans.factory.support.BeanDefinition = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . remove ( java.lang.String ) ; if ( org.springframework.beans.factory.support.BeanDefinition == null ) { if ( this . logger . isTraceEnabled ( ) ) { this . logger . trace ( STRING + java.lang.String + STRING + this ) ; } throw new NoSuchBeanDefinitionException ( java.lang.String ) ; } if ( hasBeanCreationStarted ( ) ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( this . java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; } } else { this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } this . java.lang.String[] = null ; void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { clearMergedBeanDefinition ( java.lang.String ) ; void ( java.lang.String ) ; for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { if ( ! java.lang.String . boolean ( java.lang.String ) ) { BeanDefinition org.springframework.beans.factory.support.BeanDefinition = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . get ( java.lang.String ) ; if ( java.lang.String . boolean ( org.springframework.beans.factory.support.BeanDefinition . getParentName ( ) ) ) { void ( java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws java.lang.IllegalStateException { super. registerSingleton ( java.lang.String , java.lang.Object ) ; if ( hasBeanCreationStarted ( ) ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> ) { if ( ! this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . containsKey ( java.lang.String ) ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( this . java.util.Set<java.lang.String> . int ( ) + NUMBER ) ; java.util.Set<java.lang.String> . boolean ( this . java.util.Set<java.lang.String> ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ; } } } else { if ( ! this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.BeanDefinition> . containsKey ( java.lang.String ) ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { super. destroySingleton ( java.lang.String ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. destroySingletons ( ) ; this . java.util.Set<java.lang.String> . void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . java.util.Map<java.lang.Class<?>,java.lang.String[]> . void ( ) ; this . java.util.Map<java.lang.Class<?>,java.lang.String[]> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.beans.factory.support.NamedBeanHolder<T> < T > org.springframework.beans.factory.support.NamedBeanHolder<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.beans.factory.support.BeansException { NamedBeanHolder < T > org.springframework.beans.factory.support.NamedBeanHolder<T> = org.springframework.beans.factory.support.NamedBeanHolder<T> ( java.lang.Class<T> , ( java.lang.Object [] ) null ) ; if ( org.springframework.beans.factory.support.NamedBeanHolder<T> != null ) { return org.springframework.beans.factory.support.NamedBeanHolder<T> ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = getParentBeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory instanceof AutowireCapableBeanFactory ) { return ( ( AutowireCapableBeanFactory ) org.springframework.beans.factory.support.BeanFactory ) . resolveNamedBean ( java.lang.Class<T> ) ; } throw new NoSuchBeanDefinitionException ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > org.springframework.beans.factory.support.NamedBeanHolder<T> < T > org.springframework.beans.factory.support.NamedBeanHolder<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.beans.factory.support.BeansException { Assert . notNull ( java.lang.Class<T> , STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.Class<T> ) ; if ( java.lang.String[] . int > NUMBER ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! boolean ( java.lang.String ) || org.springframework.beans.factory.support.BeanDefinition ( java.lang.String ) . isAutowireCandidate ( ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } if ( ! java.util.List<java.lang.String> . boolean ( ) ) { java.lang.String[] = java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; } } if ( java.lang.String[] . int == NUMBER ) { java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; return new NamedBeanHolder <> ( java.lang.String , T ( java.lang.String , java.lang.Class<T> , java.lang.Object[] ) ) ; } else if ( java.lang.String[] . int > NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( containsSingleton ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , T ( java.lang.String , java.lang.Class<T> , java.lang.Object[] ) ) ; } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , getType ( java.lang.String ) ) ; } } java.lang.String java.lang.String = java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<T> ) ; if ( java.lang.String == null ) { java.lang.String = java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<T> ) ; } if ( java.lang.String != null ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.Class ) { java.lang.Object = T ( java.lang.String , java.lang.Class<T> , java.lang.Object[] ) ; } return new NamedBeanHolder <> ( java.lang.String , ( T ) java.lang.Object ) ; } throw new NoUniqueBeanDefinitionException ( java.lang.Class<T> , java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String java.lang.String , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , TypeConverter org.springframework.beans.factory.support.TypeConverter ) throws org.springframework.beans.factory.support.BeansException { org.springframework.beans.factory.support.DependencyDescriptor . initParameterNameDiscovery ( getParameterNameDiscoverer ( ) ) ; if ( java.util.Optional .class == org.springframework.beans.factory.support.DependencyDescriptor . getDependencyType ( ) ) { return java.util.Optional<?> ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String ) ; } else if ( ObjectFactory .class == org.springframework.beans.factory.support.DependencyDescriptor . getDependencyType ( ) || ObjectProvider .class == org.springframework.beans.factory.support.DependencyDescriptor . getDependencyType ( ) ) { return new org.springframework.beans.factory.support.DefaultListableBeanFactory.DependencyObjectProvider ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String ) ; } else if ( java.lang.Class<> == org.springframework.beans.factory.support.DependencyDescriptor . getDependencyType ( ) ) { return new org.springframework.beans.factory.support.DefaultListableBeanFactory.Jsr330ProviderFactory ( ) . java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String ) ; } else { java.lang.Object java.lang.Object = org.springframework.beans.factory.support.AutowireCandidateResolver ( ) . getLazyResolutionProxyIfNecessary ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String , java.util.Set<java.lang.String> , org.springframework.beans.factory.support.TypeConverter ) ; } return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String java.lang.String , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , TypeConverter org.springframework.beans.factory.support.TypeConverter ) throws org.springframework.beans.factory.support.BeansException { InjectionPoint org.springframework.beans.factory.support.InjectionPoint = ConstructorResolver . setCurrentInjectionPoint ( org.springframework.beans.factory.support.DependencyDescriptor ) ; try { java.lang.Object java.lang.Object = org.springframework.beans.factory.support.DependencyDescriptor . resolveShortcut ( this ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.DependencyDescriptor . getDependencyType ( ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.support.AutowireCandidateResolver ( ) . getSuggestedValue ( org.springframework.beans.factory.support.DependencyDescriptor ) ; if ( java.lang.Object != null ) { if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = resolveEmbeddedValue ( ( java.lang.String ) java.lang.Object ) ; BeanDefinition org.springframework.beans.factory.support.BeanDefinition = ( java.lang.String != null && containsBean ( java.lang.String ) ? getMergedBeanDefinition ( java.lang.String ) : null ) ; java.lang.Object = evaluateBeanDefinitionString ( java.lang.String , org.springframework.beans.factory.support.BeanDefinition ) ; } TypeConverter org.springframework.beans.factory.support.TypeConverter = ( org.springframework.beans.factory.support.TypeConverter != null ? org.springframework.beans.factory.support.TypeConverter : getTypeConverter ( ) ) ; return ( org.springframework.beans.factory.support.DependencyDescriptor . getField ( ) != null ? org.springframework.beans.factory.support.TypeConverter . convertIfNecessary ( java.lang.Object , java.lang.Class<> , org.springframework.beans.factory.support.DependencyDescriptor . getField ( ) ) : org.springframework.beans.factory.support.TypeConverter . convertIfNecessary ( java.lang.Object , java.lang.Class<> , org.springframework.beans.factory.support.DependencyDescriptor . getMethodParameter ( ) ) ) ; } java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String , java.util.Set<java.lang.String> , org.springframework.beans.factory.support.TypeConverter ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.Class<> , org.springframework.beans.factory.support.DependencyDescriptor ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { if ( org.springframework.beans.factory.support.DependencyDescriptor . isRequired ( ) ) { void ( java.lang.Class<> , org.springframework.beans.factory.support.DependencyDescriptor . getResolvableType ( ) , org.springframework.beans.factory.support.DependencyDescriptor ) ; } return null ; } java.lang.String java.lang.String ; java.lang.Object java.lang.Object ; if ( java.util.Map<java.lang.String,java.lang.Object> . int ( ) > NUMBER ) { java.lang.String = java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.beans.factory.support.DependencyDescriptor ) ; if ( java.lang.String == null ) { if ( org.springframework.beans.factory.support.DependencyDescriptor . isRequired ( ) || ! boolean ( java.lang.Class<> ) ) { return org.springframework.beans.factory.support.DependencyDescriptor . resolveNotUnique ( java.lang.Class<> , java.util.Map<java.lang.String,java.lang.Object> ) ; } else { return null ; } } java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } else { java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) . java.util.Map.Entry<java.lang.String,java.lang.Object> ( ) ; java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; } if ( java.util.Set<java.lang.String> != null ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } return ( java.lang.Object instanceof java.lang.Class ? org.springframework.beans.factory.support.DependencyDescriptor . resolveCandidate ( java.lang.String , java.lang.Class<> , this ) : java.lang.Object ) ; } finally { ConstructorResolver . setCurrentInjectionPoint ( org.springframework.beans.factory.support.InjectionPoint ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String java.lang.String , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , TypeConverter org.springframework.beans.factory.support.TypeConverter ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.DependencyDescriptor . getDependencyType ( ) ; if ( java.lang.Class<> . boolean ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> . java.lang.Class<?> ( ) ; ResolvableType org.springframework.beans.factory.support.ResolvableType = org.springframework.beans.factory.support.DependencyDescriptor . getResolvableType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.ResolvableType . resolve ( ) ; if ( java.lang.Class<> != null && java.lang.Class<> != java.lang.Class<> ) { java.lang.Class<?> = java.lang.Class<> ; java.lang.Class<?> = org.springframework.beans.factory.support.ResolvableType . getComponentType ( ) . resolve ( ) ; } if ( java.lang.Class<> == null ) { return null ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.Class<> , new org.springframework.beans.factory.support.DefaultListableBeanFactory.MultiElementDescriptor ( org.springframework.beans.factory.support.DependencyDescriptor ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { return null ; } if ( java.util.Set<java.lang.String> != null ) { java.util.Set<java.lang.String> . boolean ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; } TypeConverter org.springframework.beans.factory.support.TypeConverter = ( org.springframework.beans.factory.support.TypeConverter != null ? org.springframework.beans.factory.support.TypeConverter : getTypeConverter ( ) ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.support.TypeConverter . convertIfNecessary ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) , java.lang.Class<> ) ; if ( java.util.Comparator<java.lang.Object> ( ) != null && java.lang.Object instanceof java.lang.Object [] ) { java.util.Arrays . void ( ( java.lang.Object [] ) java.lang.Object , java.util.Comparator<java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } return java.lang.Object ; } else if ( java.util.Collection .class . boolean ( java.lang.Class<> ) && java.lang.Class<> . boolean ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.DependencyDescriptor . getResolvableType ( ) . asCollection ( ) . resolveGeneric ( ) ; if ( java.lang.Class<> == null ) { return null ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.Class<> , new org.springframework.beans.factory.support.DefaultListableBeanFactory.MultiElementDescriptor ( org.springframework.beans.factory.support.DependencyDescriptor ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { return null ; } if ( java.util.Set<java.lang.String> != null ) { java.util.Set<java.lang.String> . boolean ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; } TypeConverter org.springframework.beans.factory.support.TypeConverter = ( org.springframework.beans.factory.support.TypeConverter != null ? org.springframework.beans.factory.support.TypeConverter : getTypeConverter ( ) ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.support.TypeConverter . convertIfNecessary ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) , java.lang.Class<> ) ; if ( java.util.Comparator<java.lang.Object> ( ) != null && java.lang.Object instanceof java.util.List ) { java.util.Collections . void ( ( java.util.List<?> < ? > ) java.lang.Object , java.util.Comparator<java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } return java.lang.Object ; } else if ( java.util.Map .class == java.lang.Class<> ) { ResolvableType org.springframework.beans.factory.support.ResolvableType = org.springframework.beans.factory.support.DependencyDescriptor . getResolvableType ( ) . asMap ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.ResolvableType . resolveGeneric ( NUMBER ) ; if ( java.lang.String .class != java.lang.Class<> ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.ResolvableType . resolveGeneric ( NUMBER ) ; if ( java.lang.Class<> == null ) { return null ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String , java.lang.Class<> , new org.springframework.beans.factory.support.DefaultListableBeanFactory.MultiElementDescriptor ( org.springframework.beans.factory.support.DependencyDescriptor ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { return null ; } if ( java.util.Set<java.lang.String> != null ) { java.util.Set<java.lang.String> . boolean ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java.lang.Class<> . boolean ( ) || ( java.lang.Class<> . boolean ( ) && ( java.util.Collection .class . boolean ( java.lang.Class<> ) || java.util.Map .class . boolean ( java.lang.Class<> ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> = java.util.Comparator<java.lang.Object> ( ) ; if ( java.util.Comparator<java.lang.Object> instanceof OrderComparator ) { return ( ( OrderComparator ) java.util.Comparator<java.lang.Object> ) . withSourceProvider ( org.springframework.beans.factory.support.DefaultListableBeanFactory.FactoryAwareOrderSourceProvider ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } else { return java.util.Comparator<java.lang.Object> ; } }  <METHOD_END>
<METHOD_START> private org.springframework.beans.factory.support.DefaultListableBeanFactory.FactoryAwareOrderSourceProvider org.springframework.beans.factory.support.DefaultListableBeanFactory.FactoryAwareOrderSourceProvider ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.IdentityHashMap<java.lang.Object,java.lang.String> < java.lang.Object , java.lang.String > java.util.IdentityHashMap<java.lang.Object,java.lang.String> = new java.util.IdentityHashMap<java.lang.Object,java.lang.String> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.util.IdentityHashMap<java.lang.Object,java.lang.String> . java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; } return new org.springframework.beans.factory.support.DefaultListableBeanFactory.FactoryAwareOrderSourceProvider ( java.util.IdentityHashMap<java.lang.Object,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor ) { java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this , java.lang.Class<> , true , org.springframework.beans.factory.support.DependencyDescriptor . isEager ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( java.lang.String[] . int ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : this . java.util.Map<java.lang.Class<?>,java.lang.Object> . java.util.Set<java.lang.Class<?>> ( ) ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { java.lang.Object java.lang.Object = this . java.util.Map<java.lang.Class<?>,java.lang.Object> . java.lang.Object ( java.lang.Class<> ) ; java.lang.Object = AutowireUtils . resolveAutowiringValue ( java.lang.Object , java.lang.Class<> ) ; if ( java.lang.Class<> . boolean ( java.lang.Object ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ObjectUtils . identityToString ( java.lang.Object ) , java.lang.Object ) ; break; } } } for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! boolean ( java.lang.String , java.lang.String ) && boolean ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) { void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor , java.lang.Class<> ) ; } } if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) && ! boolean ( java.lang.Class<> ) ) { DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = org.springframework.beans.factory.support.DependencyDescriptor . forFallbackMatch ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! boolean ( java.lang.String , java.lang.String ) && boolean ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) { void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor , java.lang.Class<> ) ; } } if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( boolean ( java.lang.String , java.lang.String ) && ( ! ( org.springframework.beans.factory.support.DependencyDescriptor instanceof org.springframework.beans.factory.support.DefaultListableBeanFactory.MultiElementDescriptor ) || ! java.lang.String . boolean ( java.lang.String ) ) && boolean ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor ) ) { void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor , java.lang.Class<> ) ; } } } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.beans.factory.support.DependencyDescriptor instanceof org.springframework.beans.factory.support.DefaultListableBeanFactory.MultiElementDescriptor || containsSingleton ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor . resolveCandidate ( java.lang.String , java.lang.Class<> , this ) ) ; } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , getType ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.DependencyDescriptor . getDependencyType ( ) ; java.lang.String java.lang.String = java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<> ) ; if ( java.lang.String != null ) { return java.lang.String ; } java.lang.String java.lang.String = java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<> ) ; if ( java.lang.String != null ) { return java.lang.String ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( ( java.lang.Object != null && this . java.util.Map<java.lang.Class<?>,java.lang.Object> . boolean ( java.lang.Object ) ) || boolean ( java.lang.String , org.springframework.beans.factory.support.DependencyDescriptor . getDependencyName ( ) ) ) { return java.lang.String ; } } return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = null ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( boolean ( java.lang.String , java.lang.Object ) ) { if ( java.lang.String != null ) { boolean boolean = boolean ( java.lang.String ) ; boolean boolean = boolean ( java.lang.String ) ; if ( boolean && boolean ) { throw new NoUniqueBeanDefinitionException ( java.lang.Class<> , java.util.Map<java.lang.String,java.lang.Object> . int ( ) , STRING + java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; } else if ( boolean ) { java.lang.String = java.lang.String ; } } else { java.lang.String = java.lang.String ; } } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = null ; java.lang.Integer java.lang.Integer = null ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; java.lang.Integer java.lang.Integer = java.lang.Integer ( java.lang.Object ) ; if ( java.lang.Integer != null ) { if ( java.lang.String != null ) { if ( java.lang.Integer . boolean ( java.lang.Integer ) ) { throw new NoUniqueBeanDefinitionException ( java.lang.Class<> , java.util.Map<java.lang.String,java.lang.Object> . int ( ) , STRING + java.lang.Integer + STRING + java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ; } else if ( java.lang.Integer < java.lang.Integer ) { java.lang.String = java.lang.String ; java.lang.Integer = java.lang.Integer ; } } else { java.lang.String = java.lang.String ; java.lang.Integer = java.lang.Integer ; } } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( boolean ( java.lang.String ) ) { return getMergedLocalBeanDefinition ( java.lang.String ) . isPrimary ( ) ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = getParentBeanFactory ( ) ; return ( org.springframework.beans.factory.support.BeanFactory instanceof org.springframework.beans.factory.support.DefaultListableBeanFactory && ( ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) org.springframework.beans.factory.support.BeanFactory ) . boolean ( java.lang.String , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( java.lang.Object java.lang.Object ) { java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> = java.util.Comparator<java.lang.Object> ( ) ; if ( java.util.Comparator<java.lang.Object> instanceof OrderComparator ) { return ( ( OrderComparator ) java.util.Comparator<java.lang.Object> ) . getPriority ( java.lang.Object ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return ( java.lang.String != null && ( java.lang.String . boolean ( java.lang.String ) || ObjectUtils . containsElement ( getAliases ( java.lang.String ) , java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return ( java.lang.String != null && java.lang.String != null && ( java.lang.String . boolean ( java.lang.String ) || ( boolean ( java.lang.String ) && java.lang.String . boolean ( getMergedLocalBeanDefinition ( java.lang.String ) . getFactoryBeanName ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.beans.factory.support.ResolvableType , DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor ) throws org.springframework.beans.factory.support.BeansException { void ( java.lang.Class<> , org.springframework.beans.factory.support.DependencyDescriptor ) ; throw new NoSuchBeanDefinitionException ( org.springframework.beans.factory.support.ResolvableType , STRING + STRING + ObjectUtils . nullSafeToString ( org.springframework.beans.factory.support.DependencyDescriptor . getAnnotations ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor ) { for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = getMergedLocalBeanDefinition ( java.lang.String ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.RootBeanDefinition . getTargetType ( ) ; if ( java.lang.Class<> != null && java.lang.Class<> . boolean ( java.lang.Class<> ) && boolean ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.DependencyDescriptor , org.springframework.beans.factory.support.AutowireCandidateResolver ( ) ) ) { java.lang.Object java.lang.Object = getSingleton ( java.lang.String , false ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : predictBeanType ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ) ; if ( ! java.lang.Class<> . boolean ( ( java.lang.Class<> ) ) ) { throw new BeanNotOfRequiredTypeException ( java.lang.String , java.lang.Class<> , java.lang.Class<> ) ; } } } BeanFactory org.springframework.beans.factory.support.BeanFactory = getParentBeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory instanceof org.springframework.beans.factory.support.DefaultListableBeanFactory ) { ( ( org.springframework.beans.factory.support.DefaultListableBeanFactory ) org.springframework.beans.factory.support.BeanFactory ) . void ( java.lang.Class<> , org.springframework.beans.factory.support.DependencyDescriptor ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Optional<?> < ? > java.util.Optional<?> ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String java.lang.String , final java.lang.Object ... java.lang.Object[] ) { DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new org.springframework.beans.factory.support.DefaultListableBeanFactory.NestedDependencyDescriptor ( org.springframework.beans.factory.support.DependencyDescriptor ) { @ java.lang.Override public boolean boolean ( ) { return false ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , BeanFactory org.springframework.beans.factory.support.BeanFactory ) { return ( ! ObjectUtils . isEmpty ( java.lang.Object[] ) ? org.springframework.beans.factory.support.BeanFactory . getBean ( java.lang.String , java.lang.Class<> , java.lang.Object[] ) : super. resolveCandidate ( java.lang.String , java.lang.Class<> , org.springframework.beans.factory.support.BeanFactory ) ) ; } } ; return java.util.Optional . java.util.Optional ( java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String , null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , BeanFactory org.springframework.beans.factory.support.BeanFactory ) { return ( ! ObjectUtils . isEmpty ( java.lang.Object[] ) ? org.springframework.beans.factory.support.BeanFactory . getBean ( java.lang.String , java.lang.Class<> , java.lang.Object[] ) : super. resolveCandidate ( java.lang.String , java.lang.Class<> , org.springframework.beans.factory.support.BeanFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ObjectUtils . identityToString ( this ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . collectionToCommaDelimitedString ( this . java.util.List<java.lang.String> ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; BeanFactory org.springframework.beans.factory.support.BeanFactory = getParentBeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory == null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( ObjectUtils . identityToString ( org.springframework.beans.factory.support.BeanFactory ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { throw new java.io.NotSerializableException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) java.io.ObjectStreamException { if ( this . java.lang.String != null ) { return new org.springframework.beans.factory.support.DefaultListableBeanFactory.SerializedBeanFactoryReference ( this . java.lang.String ) ; } else { throw new java.io.NotSerializableException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ) { java.lang.ref.Reference<?> < ? > java.lang.ref.Reference<?> = java.util.Map<java.lang.String,java.lang.ref.Reference<org.springframework.beans.factory.support.DefaultListableBeanFactory>> . java.lang.ref.Reference<org.springframework.beans.factory.support.DefaultListableBeanFactory> ( this . java.lang.String ) ; if ( java.lang.ref.Reference<> != null ) { java.lang.Object java.lang.Object = java.lang.ref.Reference<> . get ( ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } } return new StaticListableBeanFactory ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String java.lang.String ) { this . org.springframework.beans.factory.support.DependencyDescriptor = new org.springframework.beans.factory.support.DefaultListableBeanFactory.NestedDependencyDescriptor ( org.springframework.beans.factory.support.DependencyDescriptor ) ; this . boolean = ( this . org.springframework.beans.factory.support.DependencyDescriptor . getDependencyType ( ) == java.util.Optional .class ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { if ( this . boolean ) { return java.util.Optional<?> ( this . org.springframework.beans.factory.support.DependencyDescriptor , this . java.lang.String ) ; } else { return java.lang.Object ( this . org.springframework.beans.factory.support.DependencyDescriptor , this . java.lang.String , null , null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final java.lang.Object ... java.lang.Object[] ) throws org.springframework.beans.factory.support.BeansException { if ( this . boolean ) { return java.util.Optional<?> ( this . org.springframework.beans.factory.support.DependencyDescriptor , this . java.lang.String , java.lang.Object[] ) ; } else { DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.DependencyDescriptor ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , BeanFactory org.springframework.beans.factory.support.BeanFactory ) { return ( ( AbstractBeanFactory ) org.springframework.beans.factory.support.BeanFactory ) . getBean ( java.lang.String , java.lang.Class<> , java.lang.Object[] ) ; } } ; return java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , this . java.lang.String , null , null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , BeanFactory org.springframework.beans.factory.support.BeanFactory ) { return ( ( AbstractBeanFactory ) org.springframework.beans.factory.support.BeanFactory ) . getBean ( java.lang.String , java.lang.Class<> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { if ( this . boolean ) { return java.util.Optional<?> ( this . org.springframework.beans.factory.support.DependencyDescriptor , this . java.lang.String ) ; } else { DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.DependencyDescriptor ) { @ java.lang.Override public boolean boolean ( ) { return false ; } } ; return java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , this . java.lang.String , null , null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor = new DependencyDescriptor ( org.springframework.beans.factory.support.DependencyDescriptor ) { @ java.lang.Override public boolean boolean ( ) { return false ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return null ; } } ; if ( this . boolean ) { return java.util.Optional<?> ( org.springframework.beans.factory.support.DependencyDescriptor , this . java.lang.String ) ; } else { return java.lang.Object ( org.springframework.beans.factory.support.DependencyDescriptor , this . java.lang.String , null , null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return null ; }  <METHOD_END>
<METHOD_START> public void ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String java.lang.String ) { super( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { return java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String java.lang.String ) { return new org.springframework.beans.factory.support.DefaultListableBeanFactory.Jsr330DependencyProvider ( org.springframework.beans.factory.support.DependencyDescriptor , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.Object,java.lang.String> < java.lang.Object , java.lang.String > java.util.Map<java.lang.Object,java.lang.String> ) { this . java.util.Map<java.lang.Object,java.lang.String> = java.util.Map<java.lang.Object,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( this . java.util.Map<java.lang.Object,java.lang.String> . java.lang.String ( java.lang.Object ) ) ; if ( org.springframework.beans.factory.support.RootBeanDefinition == null ) { return null ; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( NUMBER ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.factory.support.RootBeanDefinition . getResolvedFactoryMethod ( ) ; if ( java.lang.reflect.Method != null ) { java.util.List<java.lang.Object> . boolean ( java.lang.reflect.Method ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.RootBeanDefinition . getTargetType ( ) ; if ( java.lang.Class<> != null && java.lang.Class<> != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { java.util.List<java.lang.Object> . boolean ( java.lang.Class<> ) ; } return java.util.List<java.lang.Object> . java.lang.Object[] ( new java.lang.Object [ java.util.List<java.lang.Object> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String java.lang.String ) { if ( java.lang.String != null && boolean ( java.lang.String ) ) { BeanDefinition org.springframework.beans.factory.support.BeanDefinition = getMergedBeanDefinition ( java.lang.String ) ; if ( org.springframework.beans.factory.support.BeanDefinition instanceof RootBeanDefinition ) { return ( RootBeanDefinition ) org.springframework.beans.factory.support.BeanDefinition ; } } return null ; }  <METHOD_END>
<METHOD_START> public void ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor ) { super( org.springframework.beans.factory.support.DependencyDescriptor ); increaseNestingLevel ( ) ; }  <METHOD_END>
<METHOD_START> public void ( DependencyDescriptor org.springframework.beans.factory.support.DependencyDescriptor ) { super( org.springframework.beans.factory.support.DependencyDescriptor ); }  <METHOD_END>
