<METHOD_START> public static org.springframework.web.reactive.function.client.ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction ( ClientHttpConnector org.springframework.web.reactive.function.client.ClientHttpConnector ) { return org.springframework.web.reactive.function.client.ExchangeFunction ( org.springframework.web.reactive.function.client.ClientHttpConnector , ExchangeStrategies . withDefaults ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.reactive.function.client.ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction ( ClientHttpConnector org.springframework.web.reactive.function.client.ClientHttpConnector , ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ) { Assert . notNull ( org.springframework.web.reactive.function.client.ClientHttpConnector , STRING ) ; Assert . notNull ( org.springframework.web.reactive.function.client.ExchangeStrategies , STRING ) ; return new org.springframework.web.reactive.function.client.ExchangeFunctions.DefaultExchangeFunction ( org.springframework.web.reactive.function.client.ClientHttpConnector , org.springframework.web.reactive.function.client.ExchangeStrategies ) ; }  <METHOD_END>
<METHOD_START> public void ( ClientHttpConnector org.springframework.web.reactive.function.client.ClientHttpConnector , ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ) { this . org.springframework.web.reactive.function.client.ClientHttpConnector = org.springframework.web.reactive.function.client.ClientHttpConnector ; this . org.springframework.web.reactive.function.client.ExchangeStrategies = org.springframework.web.reactive.function.client.ExchangeStrategies ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> < ClientResponse > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> ( ClientRequest org.springframework.web.reactive.function.client.ClientRequest ) { Assert . notNull ( org.springframework.web.reactive.function.client.ClientRequest , STRING ) ; return this . org.springframework.web.reactive.function.client.ClientHttpConnector . connect ( org.springframework.web.reactive.function.client.ClientRequest . method ( ) , org.springframework.web.reactive.function.client.ClientRequest . url ( ) , clientHttpRequest -> request . writeTo ( clientHttpRequest , this . strategies ) ) . log ( STRING , java.util.logging.Level . java.util.logging.Level ) . map ( clientHttpResponse -> new DefaultClientResponse ( clientHttpResponse , this . strategies ) ) ; }  <METHOD_END>
