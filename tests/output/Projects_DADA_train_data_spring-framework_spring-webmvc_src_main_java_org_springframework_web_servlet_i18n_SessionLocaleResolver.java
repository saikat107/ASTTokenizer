<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { java.util.Locale java.util.Locale = ( java.util.Locale ) WebUtils . getSessionAttribute ( org.springframework.web.servlet.i18n.HttpServletRequest , java.lang.String ) ; if ( java.util.Locale == null ) { java.util.Locale = java.util.Locale ( org.springframework.web.servlet.i18n.HttpServletRequest ) ; } return java.util.Locale ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.i18n.LocaleContext org.springframework.web.servlet.i18n.LocaleContext ( final HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { return new TimeZoneAwareLocaleContext ( ) { @ java.lang.Override public java.util.Locale java.util.Locale ( ) { java.util.Locale java.util.Locale = ( java.util.Locale ) WebUtils . getSessionAttribute ( org.springframework.web.servlet.i18n.HttpServletRequest , java.lang.String ) ; if ( java.util.Locale == null ) { java.util.Locale = java.util.Locale ( org.springframework.web.servlet.i18n.HttpServletRequest ) ; } return java.util.Locale ; } @ java.lang.Override public java.util.TimeZone java.util.TimeZone ( ) { java.util.TimeZone java.util.TimeZone = ( java.util.TimeZone ) WebUtils . getSessionAttribute ( org.springframework.web.servlet.i18n.HttpServletRequest , java.lang.String ) ; if ( java.util.TimeZone == null ) { java.util.TimeZone = java.util.TimeZone ( org.springframework.web.servlet.i18n.HttpServletRequest ) ; } return java.util.TimeZone ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( ) { java.util.Locale java.util.Locale = ( java.util.Locale ) WebUtils . getSessionAttribute ( org.springframework.web.servlet.i18n.HttpServletRequest , java.lang.String ) ; if ( java.util.Locale == null ) { java.util.Locale = java.util.Locale ( org.springframework.web.servlet.i18n.HttpServletRequest ) ; } return java.util.Locale ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.TimeZone java.util.TimeZone ( ) { java.util.TimeZone java.util.TimeZone = ( java.util.TimeZone ) WebUtils . getSessionAttribute ( org.springframework.web.servlet.i18n.HttpServletRequest , java.lang.String ) ; if ( java.util.TimeZone == null ) { java.util.TimeZone = java.util.TimeZone ( org.springframework.web.servlet.i18n.HttpServletRequest ) ; } return java.util.TimeZone ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.i18n.HttpServletResponse , LocaleContext org.springframework.web.servlet.i18n.LocaleContext ) { java.util.Locale java.util.Locale = null ; java.util.TimeZone java.util.TimeZone = null ; if ( org.springframework.web.servlet.i18n.LocaleContext != null ) { java.util.Locale = org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) ; if ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) { java.util.TimeZone = ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ; } } WebUtils . setSessionAttribute ( org.springframework.web.servlet.i18n.HttpServletRequest , java.lang.String , java.util.Locale ) ; WebUtils . setSessionAttribute ( org.springframework.web.servlet.i18n.HttpServletRequest , java.lang.String , java.util.TimeZone ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Locale java.util.Locale ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { java.util.Locale java.util.Locale = getDefaultLocale ( ) ; if ( java.util.Locale == null ) { java.util.Locale = org.springframework.web.servlet.i18n.HttpServletRequest . getLocale ( ) ; } return java.util.Locale ; }  <METHOD_END>
<METHOD_START> protected java.util.TimeZone java.util.TimeZone ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { return getDefaultTimeZone ( ) ; }  <METHOD_END>
