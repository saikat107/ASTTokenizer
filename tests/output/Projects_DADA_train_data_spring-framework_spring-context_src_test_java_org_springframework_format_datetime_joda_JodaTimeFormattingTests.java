<METHOD_START> @ Before public void void ( ) { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; }  <METHOD_END>
<METHOD_START> private void void ( JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) { org.springframework.format.datetime.joda.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.format.datetime.joda.FormattingConversionService ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . registerFormatters ( org.springframework.format.datetime.joda.FormattingConversionService ) ; org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean = new org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean ( ) ; org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean . java.util.List<org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean> ( ) . boolean ( new org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean ( ) ) ; org.springframework.format.datetime.joda.DataBinder = new DataBinder ( org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean ) ; org.springframework.format.datetime.joda.DataBinder . setConversionService ( org.springframework.format.datetime.joda.FormattingConversionService ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; JodaTimeContext org.springframework.format.datetime.joda.JodaTimeContext = new JodaTimeContext ( ) ; org.springframework.format.datetime.joda.JodaTimeContext . setTimeZone ( DateTimeZone . forID ( STRING ) ) ; JodaTimeContextHolder . setJodaTimeContext ( org.springframework.format.datetime.joda.JodaTimeContext ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { LocaleContextHolder . setLocale ( null ) ; JodaTimeContextHolder . setJodaTimeContext ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.io.PrintStream . void ( org . joda . time . format . DateTimeFormat . patternForStyle ( STRING , LocaleContextHolder . getLocale ( ) ) ) ; java.lang.System . java.io.PrintStream . void ( org . joda . time . format . DateTimeFormat . patternForStyle ( STRING , LocaleContextHolder . getLocale ( ) ) ) ; java.lang.System . java.io.PrintStream . void ( org . joda . time . format . DateTimeFormat . patternForStyle ( STRING , LocaleContextHolder . getLocale ( ) ) ) ; java.lang.System . java.io.PrintStream . void ( org . joda . time . format . DateTimeFormat . patternForStyle ( STRING , LocaleContextHolder . getLocale ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setDateStyle ( STRING ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setDateFormatter ( org . joda . time . format . DateTimeFormat . forPattern ( STRING ) ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , new java.lang.String [] { STRING } ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.datetime.joda.DataBinder . initDirectFieldAccess ( ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.datetime.joda.DataBinder . initDirectFieldAccess ( ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setTimeStyle ( STRING ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setTimeFormatter ( org . joda . time . format . DateTimeFormat . forPattern ( STRING ) ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , new LocalDateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , new LocalDateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , ISOChronology . getInstanceUTC ( ) ) ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setDateTimeStyle ( STRING ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , new LocalDateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setUseIsoFormat ( true ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setDateTimeFormatter ( org . joda . time . format . DateTimeFormat . forPattern ( STRING ) ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , ISOChronology . getInstanceUTC ( ) ) ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , ISOChronology . getInstanceUTC ( ) ) ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; java.lang.String java.lang.String = org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBinder org.springframework.format.datetime.joda.DataBinder = new DataBinder ( new org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean ( ) ) ; MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setDateTimeFormatter ( org . joda . time . format . DateTimeFormat . shortDateTime ( ) ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; java.lang.Object java.lang.Object = this . org.springframework.format.datetime.joda.FormattingConversionService . convert ( java.util.Date , TypeDescriptor . valueOf ( java.util.Date .class ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; java.lang.String java.lang.String = JodaTimeContextHolder . getFormatter ( org . joda . time . format . DateTimeFormat . shortDateTime ( ) , java.util.Locale . java.util.Locale ) . print ( new DateTime ( java.util.Date ) ) ; assertEquals ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.Date java.util.Date = this . org.springframework.format.datetime.joda.FormattingConversionService . convert ( java.lang.String , java.util.Date .class ) ; assertThat ( java.util.Date , equalTo ( new java.util.Date ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JodaTimeFormatterRegistrar org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar = new JodaTimeFormatterRegistrar ( ) ; DateTimeFormatterFactory org.springframework.format.datetime.joda.DateTimeFormatterFactory = new DateTimeFormatterFactory ( ) ; org.springframework.format.datetime.joda.DateTimeFormatterFactory . setIso ( ISO . DATE_TIME ) ; org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar . setDateTimeFormatter ( org.springframework.format.datetime.joda.DateTimeFormatterFactory . createDateTimeFormatter ( ) ) ; void ( org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar ) ; java.lang.String java.lang.String = STRING ; java.util.Date java.util.Date = this . org.springframework.format.datetime.joda.FormattingConversionService . convert ( java.lang.String , java.util.Date .class ) ; assertNotNull ( java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePropertyValues org.springframework.format.datetime.joda.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.datetime.joda.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.datetime.joda.DataBinder . bind ( org.springframework.format.datetime.joda.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertTrue ( org.springframework.format.datetime.joda.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) . toString ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.LocalDate org.springframework.format.datetime.joda.LocalDate ( ) { return org.springframework.format.datetime.joda.LocalDate ; }  <METHOD_END>
<METHOD_START> public void void ( LocalDate org.springframework.format.datetime.joda.LocalDate ) { this . org.springframework.format.datetime.joda.LocalDate = org.springframework.format.datetime.joda.LocalDate ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.LocalDate org.springframework.format.datetime.joda.LocalDate ( ) { return org.springframework.format.datetime.joda.LocalDate ; }  <METHOD_END>
<METHOD_START> public void void ( LocalDate org.springframework.format.datetime.joda.LocalDate ) { this . org.springframework.format.datetime.joda.LocalDate = org.springframework.format.datetime.joda.LocalDate ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.LocalTime org.springframework.format.datetime.joda.LocalTime ( ) { return org.springframework.format.datetime.joda.LocalTime ; }  <METHOD_END>
<METHOD_START> public void void ( LocalTime org.springframework.format.datetime.joda.LocalTime ) { this . org.springframework.format.datetime.joda.LocalTime = org.springframework.format.datetime.joda.LocalTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.LocalTime org.springframework.format.datetime.joda.LocalTime ( ) { return org.springframework.format.datetime.joda.LocalTime ; }  <METHOD_END>
<METHOD_START> public void void ( LocalTime org.springframework.format.datetime.joda.LocalTime ) { this . org.springframework.format.datetime.joda.LocalTime = org.springframework.format.datetime.joda.LocalTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.LocalDateTime org.springframework.format.datetime.joda.LocalDateTime ( ) { return org.springframework.format.datetime.joda.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public void void ( LocalDateTime org.springframework.format.datetime.joda.LocalDateTime ) { this . org.springframework.format.datetime.joda.LocalDateTime = org.springframework.format.datetime.joda.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.LocalDateTime org.springframework.format.datetime.joda.LocalDateTime ( ) { return org.springframework.format.datetime.joda.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public void void ( LocalDateTime org.springframework.format.datetime.joda.LocalDateTime ) { this . org.springframework.format.datetime.joda.LocalDateTime = org.springframework.format.datetime.joda.LocalDateTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.DateTime org.springframework.format.datetime.joda.DateTime ( ) { return org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public void void ( DateTime org.springframework.format.datetime.joda.DateTime ) { this . org.springframework.format.datetime.joda.DateTime = org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.DateTime org.springframework.format.datetime.joda.DateTime ( ) { return org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public void void ( DateTime org.springframework.format.datetime.joda.DateTime ) { this . org.springframework.format.datetime.joda.DateTime = org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.DateTime org.springframework.format.datetime.joda.DateTime ( ) { return org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public void void ( DateTime org.springframework.format.datetime.joda.DateTime ) { this . org.springframework.format.datetime.joda.DateTime = org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.DateTime org.springframework.format.datetime.joda.DateTime ( ) { return org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public void void ( DateTime org.springframework.format.datetime.joda.DateTime ) { this . org.springframework.format.datetime.joda.DateTime = org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
<METHOD_START> public java.util.Calendar java.util.Calendar ( ) { return java.util.Calendar ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Calendar java.util.Calendar ) { this . java.util.Calendar = java.util.Calendar ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ DateTimeFormat ( style = STRING ) public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( @ DateTimeFormat ( style = STRING ) java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.LocalDate org.springframework.format.datetime.joda.LocalDate ( ) { return org.springframework.format.datetime.joda.LocalDate ; }  <METHOD_END>
<METHOD_START> public void void ( LocalDate org.springframework.format.datetime.joda.LocalDate ) { this . org.springframework.format.datetime.joda.LocalDate = org.springframework.format.datetime.joda.LocalDate ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.LocalTime org.springframework.format.datetime.joda.LocalTime ( ) { return org.springframework.format.datetime.joda.LocalTime ; }  <METHOD_END>
<METHOD_START> public void void ( LocalTime org.springframework.format.datetime.joda.LocalTime ) { this . org.springframework.format.datetime.joda.LocalTime = org.springframework.format.datetime.joda.LocalTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.DateTime org.springframework.format.datetime.joda.DateTime ( ) { return org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public void void ( DateTime org.springframework.format.datetime.joda.DateTime ) { this . org.springframework.format.datetime.joda.DateTime = org.springframework.format.datetime.joda.DateTime ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.Instant org.springframework.format.datetime.joda.Instant ( ) { return org.springframework.format.datetime.joda.Instant ; }  <METHOD_END>
<METHOD_START> public void void ( Instant org.springframework.format.datetime.joda.Instant ) { this . org.springframework.format.datetime.joda.Instant = org.springframework.format.datetime.joda.Instant ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.Instant org.springframework.format.datetime.joda.Instant ( ) { return org.springframework.format.datetime.joda.Instant ; }  <METHOD_END>
<METHOD_START> public void void ( Instant org.springframework.format.datetime.joda.Instant ) { this . org.springframework.format.datetime.joda.Instant = org.springframework.format.datetime.joda.Instant ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.Period org.springframework.format.datetime.joda.Period ( ) { return org.springframework.format.datetime.joda.Period ; }  <METHOD_END>
<METHOD_START> public void void ( Period org.springframework.format.datetime.joda.Period ) { this . org.springframework.format.datetime.joda.Period = org.springframework.format.datetime.joda.Period ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.Duration org.springframework.format.datetime.joda.Duration ( ) { return org.springframework.format.datetime.joda.Duration ; }  <METHOD_END>
<METHOD_START> public void void ( Duration org.springframework.format.datetime.joda.Duration ) { this . org.springframework.format.datetime.joda.Duration = org.springframework.format.datetime.joda.Duration ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.YearMonth org.springframework.format.datetime.joda.YearMonth ( ) { return org.springframework.format.datetime.joda.YearMonth ; }  <METHOD_END>
<METHOD_START> public void void ( YearMonth org.springframework.format.datetime.joda.YearMonth ) { this . org.springframework.format.datetime.joda.YearMonth = org.springframework.format.datetime.joda.YearMonth ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.MonthDay org.springframework.format.datetime.joda.MonthDay ( ) { return org.springframework.format.datetime.joda.MonthDay ; }  <METHOD_END>
<METHOD_START> public void void ( MonthDay org.springframework.format.datetime.joda.MonthDay ) { this . org.springframework.format.datetime.joda.MonthDay = org.springframework.format.datetime.joda.MonthDay ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean> < org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean > java.util.List<org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean> ( ) { return java.util.List<org.springframework.format.datetime.joda.JodaTimeFormattingTests.JodaTimeBean> ; }  <METHOD_END>
