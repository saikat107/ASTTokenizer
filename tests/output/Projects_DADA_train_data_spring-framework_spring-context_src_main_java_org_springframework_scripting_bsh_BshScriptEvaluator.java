<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.bsh.ScriptSource ) { return java.lang.Object ( org.springframework.scripting.bsh.ScriptSource , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.bsh.ScriptSource , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { try { Interpreter org.springframework.scripting.bsh.Interpreter = new Interpreter ( ) ; org.springframework.scripting.bsh.Interpreter . setClassLoader ( this . java.lang.ClassLoader ) ; if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { org.springframework.scripting.bsh.Interpreter . set ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } return org.springframework.scripting.bsh.Interpreter . eval ( new java.io.StringReader ( org.springframework.scripting.bsh.ScriptSource . getScriptAsString ( ) ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new ScriptCompilationException ( org.springframework.scripting.bsh.ScriptSource , STRING , java.io.IOException ) ; } catch ( EvalError org.springframework.scripting.bsh.EvalError ) { throw new ScriptCompilationException ( org.springframework.scripting.bsh.ScriptSource , org.springframework.scripting.bsh.EvalError ) ; } }  <METHOD_END>
