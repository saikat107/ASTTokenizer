<METHOD_START> void ( java.lang.String java.lang.String , ResolvableType org.springframework.boot.test.mock.mockito.ResolvableType , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , Answers org.springframework.boot.test.mock.mockito.Answers , boolean boolean , MockReset org.springframework.boot.test.mock.mockito.MockReset , QualifierDefinition org.springframework.boot.test.mock.mockito.QualifierDefinition ) { super( java.lang.String , org.springframework.boot.test.mock.mockito.MockReset , false , org.springframework.boot.test.mock.mockito.QualifierDefinition ); Assert . notNull ( org.springframework.boot.test.mock.mockito.ResolvableType , STRING ) ; this . org.springframework.boot.test.mock.mockito.ResolvableType = org.springframework.boot.test.mock.mockito.ResolvableType ; this . java.util.Set<java.lang.Class<?>> = java.util.Set<java.lang.Class<?>> ( java.lang.Class<?>[] ) ; this . org.springframework.boot.test.mock.mockito.Answers = ( org.springframework.boot.test.mock.mockito.Answers != null ? org.springframework.boot.test.mock.mockito.Answers : Answers . RETURNS_DEFAULTS ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>> <> ( ) ; if ( java.lang.Class<?>[] != null ) { java.util.Set<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ) ; } return java.util.Collections . java.util.Set<java.lang.Class<?>> ( java.util.Set<java.lang.Class<?>> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.mock.mockito.ResolvableType org.springframework.boot.test.mock.mockito.ResolvableType ( ) { return this . org.springframework.boot.test.mock.mockito.ResolvableType ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) { return this . java.util.Set<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.mock.mockito.Answers org.springframework.boot.test.mock.mockito.Answers ( ) { return this . org.springframework.boot.test.mock.mockito.Answers ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = super. int ( ) ; int = int * int + ObjectUtils . nullSafeHashCode ( this . org.springframework.boot.test.mock.mockito.ResolvableType ) ; int = int * int + ObjectUtils . nullSafeHashCode ( this . java.util.Set<java.lang.Class<?>> ) ; int = int * int + ObjectUtils . nullSafeHashCode ( this . org.springframework.boot.test.mock.mockito.Answers ) ; int = int * int + ( this . boolean ? NUMBER : NUMBER ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( java.lang.Object == null || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) != java.lang.Class<? extends org.springframework.boot.test.mock.mockito.MockDefinition> ( ) ) { return false ; } org.springframework.boot.test.mock.mockito.MockDefinition org.springframework.boot.test.mock.mockito.MockDefinition = ( org.springframework.boot.test.mock.mockito.MockDefinition ) java.lang.Object ; boolean boolean = super. boolean ( java.lang.Object ) ; boolean = boolean && ObjectUtils . nullSafeEquals ( this . org.springframework.boot.test.mock.mockito.ResolvableType , org.springframework.boot.test.mock.mockito.MockDefinition . org.springframework.boot.test.mock.mockito.ResolvableType ) ; boolean = boolean && ObjectUtils . nullSafeEquals ( this . java.util.Set<java.lang.Class<?>> , org.springframework.boot.test.mock.mockito.MockDefinition . java.util.Set<java.lang.Class<?>> ) ; boolean = boolean && ObjectUtils . nullSafeEquals ( this . org.springframework.boot.test.mock.mockito.Answers , org.springframework.boot.test.mock.mockito.MockDefinition . org.springframework.boot.test.mock.mockito.Answers ) ; boolean = boolean && this . boolean == org.springframework.boot.test.mock.mockito.MockDefinition . boolean ; return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return new ToStringCreator ( this ) . append ( STRING , getName ( ) ) . append ( STRING , this . org.springframework.boot.test.mock.mockito.ResolvableType ) . append ( STRING , this . java.util.Set<java.lang.Class<?>> ) . append ( STRING , this . org.springframework.boot.test.mock.mockito.Answers ) . append ( STRING , this . boolean ) . append ( STRING , getReset ( ) ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( ) { return java.lang.Object ( getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.String java.lang.String ) { MockSettings org.springframework.boot.test.mock.mockito.MockSettings = MockReset . withSettings ( getReset ( ) ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.boot.test.mock.mockito.MockSettings . name ( java.lang.String ) ; } if ( ! this . java.util.Set<java.lang.Class<?>> . boolean ( ) ) { org.springframework.boot.test.mock.mockito.MockSettings . extraInterfaces ( this . java.util.Set<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [] {} ) ) ; } org.springframework.boot.test.mock.mockito.MockSettings . defaultAnswer ( MockitoApi . get ( ) . getAnswer ( this . org.springframework.boot.test.mock.mockito.Answers ) ) ; if ( this . boolean ) { org.springframework.boot.test.mock.mockito.MockSettings . serializable ( ) ; } return ( T ) Mockito . mock ( this . org.springframework.boot.test.mock.mockito.ResolvableType . resolve ( ) , org.springframework.boot.test.mock.mockito.MockSettings ) ; }  <METHOD_END>
