<METHOD_START> public void ( ) { try { this . java.io.File = java.io.File ( ) ; void ( ) ; void ( ) ; this . org.springframework.boot.loader.Archive = createArchive ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( ) { try { return new java.io.File ( java.lang.String ( java.lang.String , STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception , java.io.IOException { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; if ( java.lang.String ( java.lang.String ) != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( java.lang.String ) ) ; } else { java.lang.String [] java.lang.String[] = java.lang.String ( java.lang.String , STRING ) . java.lang.String[] ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<java.lang.String> . boolean ( STRING + java.io.File ( ) + STRING + java.lang.String + STRING ) ; java.util.List<java.lang.String> . boolean ( STRING + java.lang.String + STRING ) ; java.util.List<java.lang.String> . boolean ( STRING + java.lang.String + STRING ) ; } } for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.io.InputStream java.io.InputStream = java.io.InputStream ( java.lang.String ) ; if ( java.io.InputStream != null ) { void ( STRING + java.lang.String ) ; try { this . java.util.Properties . void ( java.io.InputStream ) ; } finally { java.io.InputStream . void ( ) ; } for ( java.lang.Object java.lang.Object : java.util.Collections . java.util.ArrayList<> ( this . java.util.Properties . java.util.Enumeration<?> ( ) ) ) { if ( java.lang.String . boolean ( STRING ) && ( ( java.lang.String ) java.lang.Object ) . boolean ( STRING ) ) { void ( STRING ) ; } java.lang.String java.lang.String = this . java.util.Properties . java.lang.String ( ( java.lang.String ) java.lang.Object ) ; java.lang.String java.lang.String = SystemPropertyUtils . resolvePlaceholders ( this . java.util.Properties , java.lang.String ) ; if ( java.lang.String != null ) { this . java.util.Properties . java.lang.Object ( java.lang.Object , java.lang.String ) ; } } if ( STRING . boolean ( java.lang.String ( java.lang.String ) ) ) { void ( STRING ) ; for ( java.lang.Object java.lang.Object : java.util.Collections . java.util.ArrayList<> ( this . java.util.Properties . java.util.Enumeration<?> ( ) ) ) { java.lang.String java.lang.String = this . java.util.Properties . java.lang.String ( ( java.lang.String ) java.lang.Object ) ; java.lang.System . java.lang.String ( ( java.lang.String ) java.lang.Object , java.lang.String ) ; } } return; } else { void ( STRING + java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.lang.Exception { if ( java.lang.String . boolean ( STRING ) ) { return java.io.InputStream ( java.lang.String . java.lang.String ( STRING . int ( ) ) ) ; } java.lang.String = java.lang.String ( java.lang.String ) ; if ( boolean ( java.lang.String ) ) { return java.io.InputStream ( java.lang.String ) ; } return java.io.InputStream ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( STRING . int ( ) ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) { while ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } java.lang.String = STRING + java.lang.String ; void ( STRING + java.lang.String ) ; return java.lang.Class<? extends org.springframework.boot.loader.PropertiesLauncher> ( ) . java.io.InputStream ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.lang.Exception { java.io.File java.io.File = new java.io.File ( java.lang.String ) ; void ( STRING + java.lang.String ) ; if ( java.io.File . boolean ( ) ) { return new java.io.FileInputStream ( java.io.File ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( java.lang.String ) ; if ( boolean ( java.net.URL ) ) { java.net.URLConnection java.net.URLConnection = java.net.URL . java.net.URLConnection ( ) ; try { return java.net.URLConnection . java.io.InputStream ( ) ; } catch ( java.io.IOException java.io.IOException ) { if ( java.net.URLConnection instanceof java.net.HttpURLConnection ) { ( ( java.net.HttpURLConnection ) java.net.URLConnection ) . void ( ) ; } throw java.io.IOException ; } } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.net.URL java.net.URL ) throws java.io.IOException { java.net.URLConnection java.net.URLConnection = java.net.URL . java.net.URLConnection ( ) ; try { java.net.URLConnection . void ( java.net.URLConnection . java.lang.Class<? extends java.net.URLConnection> ( ) . java.lang.String ( ) . boolean ( STRING ) ) ; if ( java.net.URLConnection instanceof java.net.HttpURLConnection ) { java.net.HttpURLConnection java.net.HttpURLConnection = ( java.net.HttpURLConnection ) java.net.URLConnection ; java.net.HttpURLConnection . void ( STRING ) ; int int = java.net.HttpURLConnection . int ( ) ; if ( int == java.net.HttpURLConnection . int ) { return true ; } else if ( int == java.net.HttpURLConnection . int ) { return false ; } } return ( java.net.URLConnection . int ( ) >= NUMBER ) ; } finally { if ( java.net.URLConnection instanceof java.net.HttpURLConnection ) { ( ( java.net.HttpURLConnection ) java.net.URLConnection ) . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.String ) ; } void ( STRING + this . java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String . java.lang.String[] ( STRING ) ) { java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! java.lang.String . boolean ( STRING ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } if ( java.util.List<java.lang.String> . boolean ( ) ) { java.util.List<java.lang.String> . boolean ( STRING ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ; java.lang.String[] = new java.lang.String [ java.lang.String[] . int + java.lang.String[] . int ] ; java.lang.System . void ( java.lang.String[] , NUMBER , java.lang.String[] , NUMBER , java.lang.String[] . int ) ; java.lang.System . void ( java.lang.String[] , NUMBER , java.lang.String[] , java.lang.String[] . int , java.lang.String[] . int ) ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( java.lang.String , STRING ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.ClassLoader java.lang.ClassLoader ( java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> ) throws java.lang.Exception { java.lang.ClassLoader java.lang.ClassLoader = super. createClassLoader ( java.util.List<org.springframework.boot.loader.Archive> ) ; java.lang.String java.lang.String = java.lang.String ( STRING ) ; if ( java.lang.String != null ) { java.lang.ClassLoader = java.lang.ClassLoader ( java.lang.ClassLoader , java.lang.String ) ; void ( STRING + java.lang.String ) ; } return java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.ClassLoader java.lang.ClassLoader ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.Class<java.lang.ClassLoader> < java.lang.ClassLoader > java.lang.Class<java.lang.ClassLoader> = ( java.lang.Class<java.lang.ClassLoader> < java.lang.ClassLoader > ) java.lang.Class . java.lang.Class<?> ( java.lang.String , true , java.lang.ClassLoader ) ; try { return java.lang.Class<java.lang.ClassLoader> . java.lang.reflect.Constructor<java.lang.ClassLoader> ( java.lang.ClassLoader .class ) . java.lang.ClassLoader ( java.lang.ClassLoader ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } try { return java.lang.Class<java.lang.ClassLoader> . java.lang.reflect.Constructor<java.lang.ClassLoader> ( java.net.URL [] .class , java.lang.ClassLoader .class ) . java.lang.ClassLoader ( new java.net.URL [ NUMBER ] , java.lang.ClassLoader ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } return java.lang.Class<java.lang.ClassLoader> . java.lang.ClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.lang.Exception { return java.lang.String ( java.lang.String , null , null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { return java.lang.String ( java.lang.String , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String )			throws java.lang.Exception { return java.lang.String ( java.lang.String , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { if ( java.lang.String == null ) { java.lang.String = java.lang.String . java.lang.String ( '.' , '-' ) ; java.lang.String = java.lang.String ( java.lang.String ) ; } java.lang.String java.lang.String = SystemPropertyUtils . getProperty ( java.lang.String ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = SystemPropertyUtils . resolvePlaceholders ( this . java.util.Properties , java.lang.String ) ; void ( STRING + java.lang.String + STRING + java.lang.String ) ; return java.lang.String ; } if ( this . java.util.Properties . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = SystemPropertyUtils . resolvePlaceholders ( this . java.util.Properties , this . java.util.Properties . java.lang.String ( java.lang.String ) ) ; void ( STRING + java.lang.String + STRING + java.lang.String ) ; return java.lang.String ; } try { if ( this . java.io.File != null ) { java.util.jar.Manifest java.util.jar.Manifest = new ExplodedArchive ( this . java.io.File , false ) . getManifest ( ) ; if ( java.util.jar.Manifest != null ) { java.lang.String java.lang.String = java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { void ( STRING + java.lang.String + STRING + java.lang.String ) ; return SystemPropertyUtils . resolvePlaceholders ( this . java.util.Properties , java.lang.String ) ; } } } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } java.util.jar.Manifest java.util.jar.Manifest = createArchive ( ) . getManifest ( ) ; if ( java.util.jar.Manifest != null ) { java.lang.String java.lang.String = java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { void ( STRING + java.lang.String + STRING + java.lang.String ) ; return SystemPropertyUtils . resolvePlaceholders ( this . java.util.Properties , java.lang.String ) ; } } return java.lang.String == null ? java.lang.String : SystemPropertyUtils . resolvePlaceholders ( this . java.util.Properties , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> ( ) java.lang.Exception { java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> = new java.util.ArrayList<org.springframework.boot.loader.Archive> <> ( ) ; for ( java.lang.String java.lang.String : this . java.util.List<java.lang.String> ) { for ( Archive org.springframework.boot.loader.Archive : java.util.List<org.springframework.boot.loader.Archive> ( java.lang.String ) ) { if ( org.springframework.boot.loader.Archive instanceof ExplodedArchive ) { java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> = new java.util.ArrayList <> ( org.springframework.boot.loader.Archive . getNestedArchives ( new org.springframework.boot.loader.PropertiesLauncher.ArchiveEntryFilter ( ) ) ) ; java.util.List<org.springframework.boot.loader.Archive> . add ( NUMBER , org.springframework.boot.loader.Archive ) ; java.util.List<org.springframework.boot.loader.Archive> . addAll ( java.util.List<org.springframework.boot.loader.Archive> ) ; } else { java.util.List<org.springframework.boot.loader.Archive> . add ( org.springframework.boot.loader.Archive ) ; } } } void ( java.util.List<org.springframework.boot.loader.Archive> ) ; return java.util.List<org.springframework.boot.loader.Archive> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> ( java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( java.lang.String ( java.lang.String ) ) ; java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> = new java.util.ArrayList<org.springframework.boot.loader.Archive> <> ( ) ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; if ( ! boolean ( java.lang.String ) ) { java.io.File = new java.io.File ( this . java.io.File , java.lang.String ) ; } if ( java.io.File . boolean ( ) ) { void ( STRING + java.io.File ) ; Archive org.springframework.boot.loader.Archive = new ExplodedArchive ( java.io.File , false ) ; java.util.List<org.springframework.boot.loader.Archive> . add ( org.springframework.boot.loader.Archive ) ; } Archive org.springframework.boot.loader.Archive = org.springframework.boot.loader.Archive ( java.io.File ) ; if ( org.springframework.boot.loader.Archive != null ) { void ( STRING + org.springframework.boot.loader.Archive . getUrl ( ) + java.lang.String ) ; java.util.List<org.springframework.boot.loader.Archive> . add ( org.springframework.boot.loader.Archive ) ; } java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> = java.util.List<org.springframework.boot.loader.Archive> ( java.lang.String ) ; if ( java.util.List<org.springframework.boot.loader.Archive> != null ) { void ( STRING + java.lang.String ) ; java.util.List<org.springframework.boot.loader.Archive> . addAll ( java.util.List<org.springframework.boot.loader.Archive> ) ; } return java.util.List<org.springframework.boot.loader.Archive> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.loader.Archive org.springframework.boot.loader.Archive ( java.io.File java.io.File ) throws java.io.IOException { java.lang.String java.lang.String = java.io.File . java.lang.String ( ) . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { return new JarFileArchive ( java.io.File ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> ( java.lang.String java.lang.String ) throws java.lang.Exception { if ( java.lang.String . boolean ( STRING ) || this . org.springframework.boot.loader.Archive . getUrl ( ) . equals ( this . java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ) { return null ; } Archive org.springframework.boot.loader.Archive = this . org.springframework.boot.loader.Archive ; if ( java.lang.String . boolean ( STRING ) && java.lang.String . boolean ( STRING ) ) { int int = java.lang.String . int ( STRING ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING . int ( ) , int ) ; org.springframework.boot.loader.Archive = new JarFileArchive ( new java.io.File ( java.lang.String ) ) ; java.lang.String = java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ; while ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } } EntryFilter org.springframework.boot.loader.EntryFilter = new org.springframework.boot.loader.PropertiesLauncher.PrefixMatchingArchiveFilter ( java.lang.String ) ; return org.springframework.boot.loader.Archive . getNestedArchives ( org.springframework.boot.loader.EntryFilter ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> ) { try { java.util.List<org.springframework.boot.loader.Archive> . addAll ( this . org.springframework.boot.loader.Archive . getNestedArchives ( new EntryFilter ( ) { @ java.lang.Override public boolean boolean ( Entry org.springframework.boot.loader.Entry ) { if ( org.springframework.boot.loader.Entry . isDirectory ( ) ) { return org.springframework.boot.loader.Entry . getName ( ) . startsWith ( JarLauncher . BOOT_INF_CLASSES ) ; } return org.springframework.boot.loader.Entry . getName ( ) . startsWith ( JarLauncher . BOOT_INF_LIB ) ; } } ) ) ; } catch ( java.io.IOException java.io.IOException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Entry org.springframework.boot.loader.Entry ) { if ( org.springframework.boot.loader.Entry . isDirectory ( ) ) { return org.springframework.boot.loader.Entry . getName ( ) . startsWith ( JarLauncher . BOOT_INF_CLASSES ) ; } return org.springframework.boot.loader.Entry . getName ( ) . startsWith ( JarLauncher . BOOT_INF_LIB ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } if ( java.lang.String . java.lang.String ( ) . boolean ( STRING ) || java.lang.String . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.String ; } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; } else { if ( ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String + STRING ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) throws java.lang.Exception { org.springframework.boot.loader.PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new org.springframework.boot.loader.PropertiesLauncher ( ) ; java.lang.String[] = org.springframework.boot.loader.PropertiesLauncher . java.lang.String[] ( java.lang.String[] ) ; org.springframework.boot.loader.PropertiesLauncher . launch ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.CharSequence java.lang.CharSequence ) { if ( java.lang.CharSequence == null ) { return null ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.CharSequence ) ; int int = NUMBER ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.CharSequence . java.lang.CharSequence ( int , java.util.regex.Matcher . int ( ) ) . java.lang.String ( ) ) ) ; int = java.util.regex.Matcher . int ( ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.CharSequence . java.lang.CharSequence ( int , java.lang.CharSequence . int ( ) ) . java.lang.String ( ) ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.Character . char ( java.lang.String . char ( NUMBER ) ) + java.lang.String . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { if ( java.lang.Boolean . boolean ( java.lang.String ) ) { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { java.lang.System . java.io.PrintStream . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Entry org.springframework.boot.loader.Entry ) { return org.springframework.boot.loader.Entry . getName ( ) . startsWith ( this . java.lang.String ) && this . org.springframework.boot.loader.PropertiesLauncher.ArchiveEntryFilter . boolean ( org.springframework.boot.loader.Entry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Entry org.springframework.boot.loader.Entry ) { return org.springframework.boot.loader.Entry . getName ( ) . endsWith ( java.lang.String ) || org.springframework.boot.loader.Entry . getName ( ) . endsWith ( java.lang.String ) ; }  <METHOD_END>
