<METHOD_START> public void ( TypeInformation < T > org.springframework.data.jpa.mapping.TypeInformation<T> , ProxyIdAccessor org.springframework.data.jpa.mapping.ProxyIdAccessor ) { super( org.springframework.data.jpa.mapping.TypeInformation<T> , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ); Assert . notNull ( org.springframework.data.jpa.mapping.ProxyIdAccessor , STRING ) ; this . org.springframework.data.jpa.mapping.ProxyIdAccessor = org.springframework.data.jpa.mapping.ProxyIdAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.mapping.JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty ( JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty ) { return org.springframework.data.jpa.mapping.JpaPersistentProperty . isIdProperty ( ) ? org.springframework.data.jpa.mapping.JpaPersistentProperty : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.mapping.IdentifierAccessor org.springframework.data.jpa.mapping.IdentifierAccessor ( java.lang.Object java.lang.Object ) { return new org.springframework.data.jpa.mapping.JpaPersistentEntityImpl.JpaProxyAwareIdentifierAccessor ( this , java.lang.Object , org.springframework.data.jpa.mapping.ProxyIdAccessor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. verify ( ) ; java.util.Optional<org.springframework.data.jpa.mapping.JpaPersistentProperty> < JpaPersistentProperty > java.util.Optional<org.springframework.data.jpa.mapping.JpaPersistentProperty> = getVersionProperty ( ) ; if ( ! java.util.Optional<org.springframework.data.jpa.mapping.JpaPersistentProperty> . isPresent ( ) ) { return; } if ( java.util.Optional<org.springframework.data.jpa.mapping.JpaPersistentProperty> . get ( ) . isAnnotationPresent ( Version .class ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( java.lang.String , java.util.Optional<org.springframework.data.jpa.mapping.JpaPersistentProperty> ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( JpaPersistentEntity < ? > org.springframework.data.jpa.mapping.JpaPersistentEntity<?> , java.lang.Object java.lang.Object , ProxyIdAccessor org.springframework.data.jpa.mapping.ProxyIdAccessor ) { super( org.springframework.data.jpa.mapping.JpaPersistentEntity<> , java.lang.Object ); Assert . notNull ( org.springframework.data.jpa.mapping.ProxyIdAccessor , STRING ) ; this . org.springframework.data.jpa.mapping.ProxyIdAccessor = org.springframework.data.jpa.mapping.ProxyIdAccessor ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( ) { return org.springframework.data.jpa.mapping.ProxyIdAccessor . shouldUseAccessorFor ( java.lang.Object ) ? java.util.Optional . java.util.Optional ( org.springframework.data.jpa.mapping.ProxyIdAccessor . getIdentifierFrom ( java.lang.Object ) ) : super. getIdentifier ( ) ; }  <METHOD_END>
