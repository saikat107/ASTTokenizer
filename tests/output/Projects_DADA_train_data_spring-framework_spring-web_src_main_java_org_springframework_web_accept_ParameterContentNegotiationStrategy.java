<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> ) { super( java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> ); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( NativeWebRequest org.springframework.web.accept.NativeWebRequest ) { return org.springframework.web.accept.NativeWebRequest . getParameter ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MediaType org.springframework.web.accept.MediaType ) { if ( org.springframework.web.accept.Log . isDebugEnabled ( ) ) { org.springframework.web.accept.Log . debug ( STRING + org.springframework.web.accept.MediaType + STRING + java.lang.String ( ) + STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.accept.MediaType org.springframework.web.accept.MediaType ( NativeWebRequest org.springframework.web.accept.NativeWebRequest , java.lang.String java.lang.String )			throws org.springframework.web.accept.HttpMediaTypeNotAcceptableException { throw new HttpMediaTypeNotAcceptableException ( getAllMediaTypes ( ) ) ; }  <METHOD_END>
