<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { AbstractApplicationContext org.springframework.integration.redis.store.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.redis.store.DelayerHandlerRescheduleIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.redis.store.MessageChannel = org.springframework.integration.redis.store.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; MessageGroupStore org.springframework.integration.redis.store.MessageGroupStore = org.springframework.integration.redis.store.AbstractApplicationContext . getBean ( STRING , MessageGroupStore .class ) ; java.lang.String java.lang.String = java.lang.String + STRING ; org.springframework.integration.redis.store.MessageGroupStore . removeMessageGroup ( java.lang.String ) ; Message < java.lang.String > org.springframework.integration.redis.store.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.redis.store.MessageChannel . send ( org.springframework.integration.redis.store.Message<java.lang.String> ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.redis.store.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; ThreadPoolTaskScheduler org.springframework.integration.redis.store.ThreadPoolTaskScheduler = ( ThreadPoolTaskScheduler ) IntegrationContextUtils . getTaskScheduler ( org.springframework.integration.redis.store.AbstractApplicationContext ) ; org.springframework.integration.redis.store.ThreadPoolTaskScheduler . shutdown ( ) ; org.springframework.integration.redis.store.ThreadPoolTaskScheduler . getScheduledExecutor ( ) . awaitTermination ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.integration.redis.store.AbstractApplicationContext . destroy ( ) ; try { org.springframework.integration.redis.store.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception instanceof java.lang.IllegalStateException ) ; assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroupStore . getMessageGroupCount ( ) ) ; assertEquals ( java.lang.String , org.springframework.integration.redis.store.MessageGroupStore . iterator ( ) . next ( ) . getGroupId ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroupStore . getMessageCountForAllMessageGroups ( ) ) ; MessageGroup org.springframework.integration.redis.store.MessageGroup = org.springframework.integration.redis.store.MessageGroupStore . getMessageGroup ( java.lang.String ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = org.springframework.integration.redis.store.MessageGroup . getMessages ( ) . iterator ( ) . next ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.store.Message<> . getPayload ( ) ; assertTrue ( java.lang.Object instanceof DelayHandler . DelayHandler ) ; assertEquals ( org.springframework.integration.redis.store.Message<java.lang.String> , ( ( DelayHandler . DelayHandler ) java.lang.Object ) . getOriginal ( ) ) ; org.springframework.integration.redis.store.AbstractApplicationContext . refresh ( ) ; PollableChannel org.springframework.integration.redis.store.PollableChannel = org.springframework.integration.redis.store.AbstractApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.redis.store.Message<?> = org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.store.Message<> . getPayload ( ) ; org.springframework.integration.redis.store.Message<?> = org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.store.Message<> . getPayload ( ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroupStore . getMessageGroupCount ( ) ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.redis.store.MessageGroupStore . messageGroupSize ( java.lang.String ) > NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertEquals ( NUMBER , org.springframework.integration.redis.store.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; org.springframework.integration.redis.store.MessageGroupStore . removeMessageGroup ( java.lang.String ) ; org.springframework.integration.redis.store.AbstractApplicationContext . destroy ( ) ; }  <METHOD_END>
