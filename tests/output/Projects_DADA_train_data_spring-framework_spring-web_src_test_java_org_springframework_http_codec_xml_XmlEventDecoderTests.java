<METHOD_START> @ Test public void void ( ) { Flux < javax.xml.stream.events.XMLEvent > org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> = this . org.springframework.http.codec.xml.XmlEventDecoder . decode ( Flux . just ( stringBuffer ( java.lang.String ) ) , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> ) . consumeNextWith ( e -> assertTrue ( e . isStartDocument ( ) ) ) . consumeNextWith ( e -> assertStartElement ( e , STRING ) ) . consumeNextWith ( e -> assertStartElement ( e , STRING ) ) . consumeNextWith ( e -> assertCharacters ( e , STRING ) ) . consumeNextWith ( e -> assertEndElement ( e , STRING ) ) . consumeNextWith ( e -> assertStartElement ( e , STRING ) ) . consumeNextWith ( e -> assertCharacters ( e , STRING ) ) . consumeNextWith ( e -> assertEndElement ( e , STRING ) ) . consumeNextWith ( e -> assertEndElement ( e , STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.codec.xml.XmlEventDecoder . useAalto = false ; Flux < javax.xml.stream.events.XMLEvent > org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> = this . org.springframework.http.codec.xml.XmlEventDecoder . decode ( Flux . just ( stringBuffer ( java.lang.String ) ) , null , null , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; StepVerifier . create ( org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> ) . consumeNextWith ( e -> assertTrue ( e . isStartDocument ( ) ) ) . consumeNextWith ( e -> assertStartElement ( e , STRING ) ) . consumeNextWith ( e -> assertStartElement ( e , STRING ) ) . consumeNextWith ( e -> assertCharacters ( e , STRING ) ) . consumeNextWith ( e -> assertEndElement ( e , STRING ) ) . consumeNextWith ( e -> assertStartElement ( e , STRING ) ) . consumeNextWith ( e -> assertCharacters ( e , STRING ) ) . consumeNextWith ( e -> assertEndElement ( e , STRING ) ) . consumeNextWith ( e -> assertEndElement ( e , STRING ) ) . consumeNextWith ( e -> assertTrue ( e . isEndDocument ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent , java.lang.String java.lang.String ) { assertTrue ( javax.xml.stream.events.XMLEvent . boolean ( ) ) ; assertEquals ( java.lang.String , javax.xml.stream.events.XMLEvent . javax.xml.stream.events.StartElement ( ) . javax.xml.namespace.QName ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent , java.lang.String java.lang.String ) { assertTrue ( javax.xml.stream.events.XMLEvent + STRING , javax.xml.stream.events.XMLEvent . boolean ( ) ) ; assertEquals ( java.lang.String , javax.xml.stream.events.XMLEvent . javax.xml.stream.events.EndElement ( ) . javax.xml.namespace.QName ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent , java.lang.String java.lang.String ) { assertTrue ( javax.xml.stream.events.XMLEvent . boolean ( ) ) ; assertEquals ( java.lang.String , javax.xml.stream.events.XMLEvent . javax.xml.stream.events.Characters ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
