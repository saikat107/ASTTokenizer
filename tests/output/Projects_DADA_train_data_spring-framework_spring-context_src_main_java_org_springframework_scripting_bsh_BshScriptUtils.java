<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.scripting.bsh.EvalError { return java.lang.Object ( java.lang.String , null , null ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws org.springframework.scripting.bsh.EvalError { return java.lang.Object ( java.lang.String , java.lang.Class<?>[] , ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.ClassLoader java.lang.ClassLoader )			throws org.springframework.scripting.bsh.EvalError { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , java.lang.Class<?>[] , java.lang.ClassLoader ) ; if ( java.lang.Object instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object ; try { return ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.Throwable ) ; } } else { return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) throws org.springframework.scripting.bsh.EvalError { Assert . hasText ( java.lang.String , STRING ) ; Interpreter org.springframework.scripting.bsh.Interpreter = new Interpreter ( ) ; org.springframework.scripting.bsh.Interpreter . setClassLoader ( java.lang.ClassLoader ) ; java.lang.Object java.lang.Object = org.springframework.scripting.bsh.Interpreter . eval ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) java.lang.Object ; } else if ( java.lang.Object != null ) { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> static java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.ClassLoader java.lang.ClassLoader )			throws org.springframework.scripting.bsh.EvalError { Assert . hasText ( java.lang.String , STRING ) ; Interpreter org.springframework.scripting.bsh.Interpreter = new Interpreter ( ) ; org.springframework.scripting.bsh.Interpreter . setClassLoader ( java.lang.ClassLoader ) ; java.lang.Object java.lang.Object = org.springframework.scripting.bsh.Interpreter . eval ( java.lang.String ) ; if ( java.lang.Object != null ) { return java.lang.Object ; } else { Assert . notEmpty ( java.lang.Class<?>[] , STRING ) ; XThis org.springframework.scripting.bsh.XThis = ( XThis ) org.springframework.scripting.bsh.Interpreter . eval ( STRING ) ; return java.lang.reflect.Proxy . java.lang.Object ( java.lang.ClassLoader , java.lang.Class<?>[] , new org.springframework.scripting.bsh.BshScriptUtils.BshObjectInvocationHandler ( org.springframework.scripting.bsh.XThis ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( XThis org.springframework.scripting.bsh.XThis ) { this . org.springframework.scripting.bsh.XThis = org.springframework.scripting.bsh.XThis ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( ReflectionUtils . isEqualsMethod ( java.lang.reflect.Method ) ) { return ( boolean ( java.lang.Object[] [ NUMBER ] ) ) ; } else if ( ReflectionUtils . isHashCodeMethod ( java.lang.reflect.Method ) ) { return this . org.springframework.scripting.bsh.XThis . hashCode ( ) ; } else if ( ReflectionUtils . isToStringMethod ( java.lang.reflect.Method ) ) { return STRING + this . org.springframework.scripting.bsh.XThis + STRING ; } try { java.lang.Object java.lang.Object = this . org.springframework.scripting.bsh.XThis . invokeMethod ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.Object[] ) ; if ( java.lang.Object == Primitive . NULL || java.lang.Object == Primitive . VOID ) { return null ; } if ( java.lang.Object instanceof Primitive ) { return ( ( Primitive ) java.lang.Object ) . getValue ( ) ; } return java.lang.Object ; } catch ( EvalError org.springframework.scripting.bsh.EvalError ) { throw new org.springframework.scripting.bsh.BshScriptUtils.BshExecutionException ( org.springframework.scripting.bsh.EvalError ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object ) { if ( ! java.lang.reflect.Proxy . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return false ; } java.lang.reflect.InvocationHandler java.lang.reflect.InvocationHandler = java.lang.reflect.Proxy . java.lang.reflect.InvocationHandler ( java.lang.Object ) ; return ( java.lang.reflect.InvocationHandler instanceof org.springframework.scripting.bsh.BshScriptUtils.BshObjectInvocationHandler && this . org.springframework.scripting.bsh.XThis . equals ( ( ( org.springframework.scripting.bsh.BshScriptUtils.BshObjectInvocationHandler ) java.lang.reflect.InvocationHandler ) . org.springframework.scripting.bsh.XThis ) ) ; }  <METHOD_END>
<METHOD_START> private void ( EvalError org.springframework.scripting.bsh.EvalError ) { super( STRING , org.springframework.scripting.bsh.EvalError ); }  <METHOD_END>
