<METHOD_START> public void ( RedisConnectionFactory org.springframework.integration.redis.store.RedisConnectionFactory ) { super( org.springframework.integration.redis.store.RedisConnectionFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public int int ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( ( java.lang.String ) java.lang.Object ) ; int int = NUMBER ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { int += this . getRedisTemplate ( ) . boundListOps ( java.lang.String ) . size ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.redis.store.MessageGroup org.springframework.integration.redis.store.MessageGroup ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.util.List<org.springframework.integration.redis.store.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.redis.store.Message<?>> = new java.util.LinkedList<org.springframework.integration.redis.store.Message<?>> < Message < ? > > ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( ( java.lang.String ) java.lang.Object ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<org.springframework.integration.redis.store.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.redis.store.Message<?>> = this . getRedisTemplate ( ) . boundListOps ( java.lang.String ) . range ( NUMBER , - NUMBER ) ; java.util.List<org.springframework.integration.redis.store.Message<?>> . addAll ( java.util.List<org.springframework.integration.redis.store.Message<?>> ) ; } return getMessageGroupFactory ( ) . create ( java.util.List<org.springframework.integration.redis.store.Message<?>> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.redis.store.MessageGroup org.springframework.integration.redis.store.MessageGroup ( java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.redis.store.Message<?> ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; java.lang.Integer java.lang.Integer = new IntegrationMessageHeaderAccessor ( org.springframework.integration.redis.store.Message<> ) . getPriority ( ) ; if ( java.lang.Integer != null && java.lang.Integer < NUMBER && java.lang.Integer >= NUMBER ) { java.lang.String = java.lang.String + STRING + java.lang.Integer ; } return super. addMessageToGroup ( java.lang.String , org.springframework.integration.redis.store.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.redis.store.Message<?> < ? > org.springframework.integration.redis.store.Message<?> ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( ( java.lang.String ) java.lang.Object ) ; Message < ? > org.springframework.integration.redis.store.Message<?> ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.integration.redis.store.Message<?> = super. pollMessageFromGroup ( java.lang.String ) ; if ( org.springframework.integration.redis.store.Message<> != null ) { return org.springframework.integration.redis.store.Message<> ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . getRedisTemplate ( ) . keys ( java.lang.String == null ? ( this . getBeanName ( ) + STRING ) : ( java.lang.String + STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Set<java.lang.Object> ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.util.List<java.lang.String> . boolean ( ( java.lang.String ) java.lang.Object ) ; } java.util.Collections . void ( java.util.List<java.lang.String> , this . java.util.Comparator<java.lang.String> ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public int int ( ) { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = java.util.Set<java.lang.Object> ( ) ; return java.util.Set<java.lang.Object> . int ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ( ) { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = this . getRedisTemplate ( ) . keys ( this . getBeanName ( ) + STRING ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.HashSet<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Set<java.lang.Object> ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; int int = java.lang.String . int ( STRING ) ; if ( java.lang.String . int ( STRING ) != int ) { java.util.Set<java.lang.Object> . boolean ( java.lang.String . java.lang.String ( NUMBER , int ) ) ; } else { java.util.Set<java.lang.Object> . boolean ( java.lang.Object ) ; } } return java.util.Set<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( ( java.lang.String ) java.lang.Object ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { super. removeMessageGroup ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public int int ( ) { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = java.util.Set<java.lang.Object> ( ) ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.Set<java.lang.Object> ) { int += this . int ( java.lang.Object ) ; } return int ; }  <METHOD_END>
