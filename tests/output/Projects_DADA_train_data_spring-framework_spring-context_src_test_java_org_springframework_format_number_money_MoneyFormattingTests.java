<METHOD_START> @ Before public void void ( ) { LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { LocaleContextHolder . setLocale ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.number.money.MoneyFormattingTests.MoneyHolder org.springframework.format.number.money.MoneyFormattingTests.MoneyHolder = new org.springframework.format.number.money.MoneyFormattingTests.MoneyHolder ( ) ; DataBinder org.springframework.format.number.money.DataBinder = new DataBinder ( org.springframework.format.number.money.MoneyFormattingTests.MoneyHolder ) ; org.springframework.format.number.money.DataBinder . setConversionService ( org.springframework.format.number.money.FormattingConversionService ) ; MutablePropertyValues org.springframework.format.number.money.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.number.money.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.number.money.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.MoneyHolder . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.MoneyHolder . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.MoneyHolder . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.MoneyHolder . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder1 org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder1 = new org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder1 ( ) ; DataBinder org.springframework.format.number.money.DataBinder = new DataBinder ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder1 ) ; org.springframework.format.number.money.DataBinder . setConversionService ( org.springframework.format.number.money.FormattingConversionService ) ; MutablePropertyValues org.springframework.format.number.money.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.number.money.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder1 . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder1 . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder1 . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder1 . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder2 org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder2 = new org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder2 ( ) ; DataBinder org.springframework.format.number.money.DataBinder = new DataBinder ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder2 ) ; org.springframework.format.number.money.DataBinder . setConversionService ( org.springframework.format.number.money.FormattingConversionService ) ; MutablePropertyValues org.springframework.format.number.money.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.number.money.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder2 . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder2 . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder3 org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder3 = new org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder3 ( ) ; DataBinder org.springframework.format.number.money.DataBinder = new DataBinder ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder3 ) ; org.springframework.format.number.money.DataBinder . setConversionService ( org.springframework.format.number.money.FormattingConversionService ) ; MutablePropertyValues org.springframework.format.number.money.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.number.money.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder3 . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder3 . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder4 org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder4 = new org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder4 ( ) ; DataBinder org.springframework.format.number.money.DataBinder = new DataBinder ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder4 ) ; org.springframework.format.number.money.DataBinder . setConversionService ( org.springframework.format.number.money.FormattingConversionService ) ; MutablePropertyValues org.springframework.format.number.money.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.number.money.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder4 . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder4 . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder5 org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder5 = new org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder5 ( ) ; DataBinder org.springframework.format.number.money.DataBinder = new DataBinder ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder5 ) ; org.springframework.format.number.money.DataBinder . setConversionService ( org.springframework.format.number.money.FormattingConversionService ) ; MutablePropertyValues org.springframework.format.number.money.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.format.number.money.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder5 . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder5 . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; org.springframework.format.number.money.DataBinder . bind ( org.springframework.format.number.money.MutablePropertyValues ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( NUMBER , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.format.number.money.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder5 . org.springframework.format.number.money.MonetaryAmount ( ) . getNumber ( ) . doubleValue ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.format.number.money.MoneyFormattingTests.FormattedMoneyHolder5 . org.springframework.format.number.money.MonetaryAmount ( ) . getCurrency ( ) . getCurrencyCode ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.number.money.MonetaryAmount org.springframework.format.number.money.MonetaryAmount ( ) { return org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public void void ( MonetaryAmount org.springframework.format.number.money.MonetaryAmount ) { this . org.springframework.format.number.money.MonetaryAmount = org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.number.money.CurrencyUnit org.springframework.format.number.money.CurrencyUnit ( ) { return org.springframework.format.number.money.CurrencyUnit ; }  <METHOD_END>
<METHOD_START> public void void ( CurrencyUnit org.springframework.format.number.money.CurrencyUnit ) { this . org.springframework.format.number.money.CurrencyUnit = org.springframework.format.number.money.CurrencyUnit ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.number.money.MonetaryAmount org.springframework.format.number.money.MonetaryAmount ( ) { return org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public void void ( MonetaryAmount org.springframework.format.number.money.MonetaryAmount ) { this . org.springframework.format.number.money.MonetaryAmount = org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.number.money.MonetaryAmount org.springframework.format.number.money.MonetaryAmount ( ) { return org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public void void ( MonetaryAmount org.springframework.format.number.money.MonetaryAmount ) { this . org.springframework.format.number.money.MonetaryAmount = org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.number.money.MonetaryAmount org.springframework.format.number.money.MonetaryAmount ( ) { return org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public void void ( MonetaryAmount org.springframework.format.number.money.MonetaryAmount ) { this . org.springframework.format.number.money.MonetaryAmount = org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.number.money.MonetaryAmount org.springframework.format.number.money.MonetaryAmount ( ) { return org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public void void ( MonetaryAmount org.springframework.format.number.money.MonetaryAmount ) { this . org.springframework.format.number.money.MonetaryAmount = org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.number.money.MonetaryAmount org.springframework.format.number.money.MonetaryAmount ( ) { return org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
<METHOD_START> public void void ( MonetaryAmount org.springframework.format.number.money.MonetaryAmount ) { this . org.springframework.format.number.money.MonetaryAmount = org.springframework.format.number.money.MonetaryAmount ; }  <METHOD_END>
