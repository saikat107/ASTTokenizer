<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.convert.TypeInformation<?>> = org.springframework.data.convert.TypeInformationMapper . resolveTypeFrom ( Alias . of ( STRING ) ) ; TypeInformation < ? > org.springframework.data.convert.TypeInformation<?> = ClassTypeInformation . from ( java.lang.String .class ) ; assertThat ( java.util.Optional<org.springframework.data.convert.TypeInformation<?>> ) . hasValue ( org.springframework.data.convert.TypeInformation<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.convert.TypeInformationMapper . resolveTypeFrom ( Alias . of ( new java.lang.Object ( ) ) ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.convert.TypeInformationMapper . resolveTypeFrom ( Alias . of ( STRING ) ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.convert.TypeInformationMapper . resolveTypeFrom ( Alias . of ( STRING ) ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.convert.TypeInformationMapper . createAliasFor ( ClassTypeInformation . from ( java.lang.String .class ) ) ) . isEqualTo ( Alias . of ( java.lang.String .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
