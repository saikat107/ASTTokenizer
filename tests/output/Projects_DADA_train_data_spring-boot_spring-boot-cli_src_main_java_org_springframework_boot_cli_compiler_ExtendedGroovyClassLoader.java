<METHOD_START> public void ( GroovyCompilerScope org.springframework.boot.cli.compiler.GroovyCompilerScope ) { this( org.springframework.boot.cli.compiler.GroovyCompilerScope , java.lang.ClassLoader ( org.springframework.boot.cli.compiler.GroovyCompilerScope ) , new CompilerConfiguration ( ) ); }  <METHOD_END>
<METHOD_START> private static java.lang.ClassLoader java.lang.ClassLoader ( GroovyCompilerScope org.springframework.boot.cli.compiler.GroovyCompilerScope ) { java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; if ( org.springframework.boot.cli.compiler.GroovyCompilerScope == GroovyCompilerScope . DEFAULT ) { java.lang.ClassLoader = new org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader.DefaultScopeParentClassLoader ( java.lang.ClassLoader ) ; } return java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> private void ( GroovyCompilerScope org.springframework.boot.cli.compiler.GroovyCompilerScope , java.lang.ClassLoader java.lang.ClassLoader , CompilerConfiguration org.springframework.boot.cli.compiler.CompilerConfiguration ) { super( java.lang.ClassLoader , org.springframework.boot.cli.compiler.CompilerConfiguration ); this . org.springframework.boot.cli.compiler.CompilerConfiguration = org.springframework.boot.cli.compiler.CompilerConfiguration ; this . org.springframework.boot.cli.compiler.GroovyCompilerScope = org.springframework.boot.cli.compiler.GroovyCompilerScope ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { try { return super. findClass ( java.lang.String ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { if ( this . org.springframework.boot.cli.compiler.GroovyCompilerScope == GroovyCompilerScope . DEFAULT && java.lang.String . boolean ( java.lang.String ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String ) ; if ( java.lang.Class<> != null ) { return java.lang.Class<> ; } } throw java.lang.ClassNotFoundException ; } }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) { try { java.lang.String java.lang.String = java.lang.String . java.lang.String ( '.' , '/' ) . java.lang.String ( STRING ) ; java.io.InputStream java.io.InputStream = getParent ( ) . getResourceAsStream ( java.lang.String ) ; if ( java.io.InputStream != null ) { try { return defineClass ( java.lang.String , FileCopyUtils . copyToByteArray ( java.io.InputStream ) ) ; } finally { java.io.InputStream . void ( ) ; } } return null ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) { java.io.InputStream java.io.InputStream = super. getResourceAsStream ( java.lang.String ) ; if ( java.io.InputStream == null ) { byte [] byte[] = this . java.util.Map<java.lang.String,byte[]> . byte[] ( java.lang.String ) ; java.io.InputStream = byte[] == null ? null : new java.io.ByteArrayInputStream ( byte[] ) ; } return java.io.InputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.compiler.ClassCollector org.springframework.boot.cli.compiler.ClassCollector ( CompilationUnit org.springframework.boot.cli.compiler.CompilationUnit , SourceUnit org.springframework.boot.cli.compiler.SourceUnit ) { InnerLoader org.springframework.boot.cli.compiler.InnerLoader = java.security.AccessController . org.springframework.boot.cli.compiler.InnerLoader ( new java.security.PrivilegedAction<org.springframework.boot.cli.compiler.InnerLoader> < InnerLoader > ( ) { @ java.lang.Override public org.springframework.boot.cli.compiler.InnerLoader org.springframework.boot.cli.compiler.InnerLoader ( ) { return new InnerLoader ( org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader .this ) { @ java.lang.Override public java.net.URL [] java.net.URL[] ( ) { return java.net.URL[] ; } } ; } } ) ; return new org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader.ExtendedClassCollector ( org.springframework.boot.cli.compiler.InnerLoader , org.springframework.boot.cli.compiler.CompilationUnit , org.springframework.boot.cli.compiler.SourceUnit ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.compiler.InnerLoader org.springframework.boot.cli.compiler.InnerLoader ( ) { return new InnerLoader ( org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader .this ) { @ java.lang.Override public java.net.URL [] java.net.URL[] ( ) { return java.net.URL[] ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL [] java.net.URL[] ( ) { return java.net.URL[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.cli.compiler.CompilerConfiguration org.springframework.boot.cli.compiler.CompilerConfiguration ( ) { return this . org.springframework.boot.cli.compiler.CompilerConfiguration ; }  <METHOD_END>
<METHOD_START> protected void ( InnerLoader org.springframework.boot.cli.compiler.InnerLoader , CompilationUnit org.springframework.boot.cli.compiler.CompilationUnit , SourceUnit org.springframework.boot.cli.compiler.SourceUnit ) { super( org.springframework.boot.cli.compiler.InnerLoader , org.springframework.boot.cli.compiler.CompilationUnit , org.springframework.boot.cli.compiler.SourceUnit ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( byte [] byte[] , ClassNode org.springframework.boot.cli.compiler.ClassNode ) { java.lang.Class<?> < ? > java.lang.Class<?> = super. createClass ( byte[] , org.springframework.boot.cli.compiler.ClassNode ) ; org.springframework.boot.cli.compiler.ExtendedGroovyClassLoader .this . java.util.Map<java.lang.String,byte[]> . byte[] ( org.springframework.boot.cli.compiler.ClassNode . getName ( ) . replace ( '.' , '/' ) + STRING , byte[] ) ; return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); this . java.net.URLClassLoader = new java.net.URLClassLoader ( java.net.URL[] ( java.lang.ClassLoader ) , null ) ; }  <METHOD_END>
<METHOD_START> private java.net.URL [] java.net.URL[] ( final java.lang.ClassLoader java.lang.ClassLoader ) { java.util.Set<java.net.URL> < java.net.URL > java.util.Set<java.net.URL> = new java.util.HashSet<java.net.URL> <> ( ) ; void ( java.lang.ClassLoader , java.util.Set<java.net.URL> ) ; if ( java.util.Set<java.net.URL> . boolean ( ) ) { void ( java.lang.ClassLoader , java.util.Set<java.net.URL> ) ; } Assert . state ( ! java.util.Set<java.net.URL> . boolean ( ) , STRING ) ; return new java.util.ArrayList<java.net.URL> <> ( java.util.Set<java.net.URL> ) . java.net.URL[] ( new java.net.URL [ java.util.Set<java.net.URL> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.ClassLoader java.lang.ClassLoader , java.util.Set<java.net.URL> < java.net.URL > java.util.Set<java.net.URL> ) { while ( java.lang.ClassLoader != null ) { if ( java.lang.ClassLoader instanceof java.net.URLClassLoader ) { for ( java.net.URL java.net.URL : ( ( java.net.URLClassLoader ) java.lang.ClassLoader ) . java.net.URL[] ( ) ) { if ( boolean ( java.net.URL . java.lang.String ( ) ) ) { java.util.Set<java.net.URL> . boolean ( java.net.URL ) ; } } } java.lang.ClassLoader = java.lang.ClassLoader . java.lang.ClassLoader ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.ClassLoader java.lang.ClassLoader , java.util.Set<java.net.URL> < java.net.URL > java.util.Set<java.net.URL> ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( java.lang.System . java.lang.String ( STRING ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( boolean ( java.lang.String ) ) { java.io.File java.io.File = new java.io.File ( java.lang.String ) ; if ( java.io.File . boolean ( ) ) { try { java.util.Set<java.net.URL> . boolean ( java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { } } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . boolean ( STRING + java.lang.String + STRING ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , boolean boolean )				throws java.lang.ClassNotFoundException { this . java.net.URLClassLoader . java.lang.Class<?> ( java.lang.String ) ; return super. java.lang.Class<?> ( java.lang.String , boolean ) ; }  <METHOD_END>
