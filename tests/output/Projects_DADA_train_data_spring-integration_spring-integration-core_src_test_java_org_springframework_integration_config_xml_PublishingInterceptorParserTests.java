<METHOD_START> @ Test public void void ( ) { MessageHandler org.springframework.integration.config.xml.MessageHandler = Mockito . mock ( MessageHandler .class ) ; org.springframework.integration.config.xml.SubscribableChannel . subscribe ( org.springframework.integration.config.xml.MessageHandler ) ; doAnswer ( invocation -> { Message < ? > message = invocation . getArgument ( NUMBER ) ; assertEquals ( STRING , message . getPayload ( ) ) ; return null ; } ) . when ( org.springframework.integration.config.xml.MessageHandler ) . handleMessage ( any ( Message .class ) ) ; org.springframework.integration.config.xml.PublishingInterceptorParserTests.TestBean . java.lang.String ( STRING ) ; verify ( org.springframework.integration.config.xml.MessageHandler , times ( NUMBER ) ) . handleMessage ( any ( Message .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHandler org.springframework.integration.config.xml.MessageHandler = Mockito . mock ( MessageHandler .class ) ; org.springframework.integration.config.xml.SubscribableChannel . subscribe ( org.springframework.integration.config.xml.MessageHandler ) ; doAnswer ( invocation -> { Message < ? > message = invocation . getArgument ( NUMBER ) ; assertEquals ( STRING , message . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , message . getPayload ( ) ) ; return null ; } ) . when ( org.springframework.integration.config.xml.MessageHandler ) . handleMessage ( any ( Message .class ) ) ; org.springframework.integration.config.xml.PublishingInterceptorParserTests.TestBean . java.lang.String ( STRING ) ; verify ( org.springframework.integration.config.xml.MessageHandler , times ( NUMBER ) ) . handleMessage ( any ( Message .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.xml.PublishingInterceptorParserTests.DefaultTestBean . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
