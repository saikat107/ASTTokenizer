<METHOD_START> void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws java.lang.Exception { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; this . org.springframework.boot.test.mock.mockito.MockitoAopProxyTargetInterceptor.Verification = new org.springframework.boot.test.mock.mockito.MockitoAopProxyTargetInterceptor.Verification ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.boot.test.mock.mockito.MethodInvocation ) throws java.lang.Throwable { if ( this . org.springframework.boot.test.mock.mockito.MockitoAopProxyTargetInterceptor.Verification . boolean ( ) ) { this . org.springframework.boot.test.mock.mockito.MockitoAopProxyTargetInterceptor.Verification . void ( this . java.lang.Object , this . java.lang.Object ) ; return AopUtils . invokeJoinpointUsingReflection ( this . java.lang.Object , org.springframework.boot.test.mock.mockito.MethodInvocation . getMethod ( ) , org.springframework.boot.test.mock.mockito.MethodInvocation . getArguments ( ) ) ; } return org.springframework.boot.test.mock.mockito.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public static void void ( java.lang.Object java.lang.Object ) { Assert . state ( AopUtils . isAopProxy ( java.lang.Object ) , STRING ) ; try { Advised org.springframework.boot.test.mock.mockito.Advised = ( Advised ) java.lang.Object ; for ( Advisor org.springframework.boot.test.mock.mockito.Advisor : org.springframework.boot.test.mock.mockito.Advised . getAdvisors ( ) ) { if ( org.springframework.boot.test.mock.mockito.Advisor instanceof org.springframework.boot.test.mock.mockito.MockitoAopProxyTargetInterceptor ) { return; } } java.lang.Object java.lang.Object = AopTestUtils . getUltimateTargetObject ( java.lang.Object ) ; Advice org.springframework.boot.test.mock.mockito.Advice = new org.springframework.boot.test.mock.mockito.MockitoAopProxyTargetInterceptor ( java.lang.Object , java.lang.Object ) ; org.springframework.boot.test.mock.mockito.Advised . addAdvice ( NUMBER , org.springframework.boot.test.mock.mockito.Advice ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.Object java.lang.Object ) { this . org.springframework.boot.test.mock.mockito.MockingProgress = MockitoApi . get ( ) . mockingProgress ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { synchronized ( this . java.lang.Object ) { VerificationMode org.springframework.boot.test.mock.mockito.VerificationMode = this . org.springframework.boot.test.mock.mockito.MockingProgress . pullVerificationMode ( ) ; if ( org.springframework.boot.test.mock.mockito.VerificationMode != null ) { void ( org.springframework.boot.test.mock.mockito.VerificationMode ) ; return true ; } return false ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { synchronized ( this . java.lang.Object ) { VerificationMode org.springframework.boot.test.mock.mockito.VerificationMode = this . org.springframework.boot.test.mock.mockito.MockingProgress . pullVerificationMode ( ) ; if ( org.springframework.boot.test.mock.mockito.VerificationMode != null ) { if ( org.springframework.boot.test.mock.mockito.VerificationMode instanceof MockAwareVerificationMode ) { MockAwareVerificationMode org.springframework.boot.test.mock.mockito.MockAwareVerificationMode = ( MockAwareVerificationMode ) org.springframework.boot.test.mock.mockito.VerificationMode ; if ( org.springframework.boot.test.mock.mockito.MockAwareVerificationMode . getMock ( ) == java.lang.Object ) { org.springframework.boot.test.mock.mockito.VerificationMode = MockitoApi . get ( ) . createMockAwareVerificationMode ( java.lang.Object , org.springframework.boot.test.mock.mockito.MockAwareVerificationMode ) ; } } void ( org.springframework.boot.test.mock.mockito.VerificationMode ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( VerificationMode org.springframework.boot.test.mock.mockito.VerificationMode ) { ArgumentMatcherStorage org.springframework.boot.test.mock.mockito.ArgumentMatcherStorage = this . org.springframework.boot.test.mock.mockito.MockingProgress . getArgumentMatcherStorage ( ) ; java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> < LocalizedMatcher > java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> = org.springframework.boot.test.mock.mockito.ArgumentMatcherStorage . pullLocalizedMatchers ( ) ; this . org.springframework.boot.test.mock.mockito.MockingProgress . verificationStarted ( org.springframework.boot.test.mock.mockito.VerificationMode ) ; MockitoApi . get ( ) . reportMatchers ( org.springframework.boot.test.mock.mockito.ArgumentMatcherStorage , java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> ) ; }  <METHOD_END>
