<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.mongodb.performance.MongoClient = MongoClients . create ( ) ; SimpleReactiveMongoDatabaseFactory org.springframework.data.mongodb.performance.SimpleReactiveMongoDatabaseFactory = new SimpleReactiveMongoDatabaseFactory ( this . org.springframework.data.mongodb.performance.MongoClient , java.lang.String ) ; MongoMappingContext org.springframework.data.mongodb.performance.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.performance.MongoMappingContext . setInitialEntitySet ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person>> ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person .class ) ) ; org.springframework.data.mongodb.performance.MongoMappingContext . afterPropertiesSet ( ) ; org.springframework.data.mongodb.performance.MongoConverter = new MappingMongoConverter ( new DbRefResolver ( ) { @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( MongoPersistentProperty org.springframework.data.mongodb.performance.MongoPersistentProperty , DBRef org.springframework.data.mongodb.performance.DBRef , DbRefResolverCallback org.springframework.data.mongodb.performance.DbRefResolverCallback , DbRefProxyHandler org.springframework.data.mongodb.performance.DbRefProxyHandler ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; } @ java.lang.Override public org.springframework.data.mongodb.performance.DBRef org.springframework.data.mongodb.performance.DBRef ( org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.mapping.DBRef , MongoPersistentEntity < ? > org.springframework.data.mongodb.performance.MongoPersistentEntity<?> , java.lang.Object java.lang.Object ) { return null ; } @ java.lang.Override public org.springframework.data.mongodb.performance.Document org.springframework.data.mongodb.performance.Document ( DBRef org.springframework.data.mongodb.performance.DBRef ) { return null ; } @ java.lang.Override public java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> ( java.util.List<org.springframework.data.mongodb.performance.DBRef> < DBRef > java.util.List<org.springframework.data.mongodb.performance.DBRef> ) { return null ; } } , org.springframework.data.mongodb.performance.MongoMappingContext ) ; org.springframework.data.mongodb.performance.ReactiveMongoTemplate = new ReactiveMongoTemplate ( org.springframework.data.mongodb.performance.SimpleReactiveMongoDatabaseFactory , org.springframework.data.mongodb.performance.MongoConverter ) ; ReactiveMongoRepositoryFactory org.springframework.data.mongodb.performance.ReactiveMongoRepositoryFactory = new ReactiveMongoRepositoryFactory ( org.springframework.data.mongodb.performance.ReactiveMongoTemplate ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.ReactivePersonRepository = org.springframework.data.mongodb.performance.ReactiveMongoRepositoryFactory . getRepository ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.ReactivePersonRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( MongoPersistentProperty org.springframework.data.mongodb.performance.MongoPersistentProperty , DBRef org.springframework.data.mongodb.performance.DBRef , DbRefResolverCallback org.springframework.data.mongodb.performance.DbRefResolverCallback , DbRefProxyHandler org.springframework.data.mongodb.performance.DbRefProxyHandler ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.performance.DBRef org.springframework.data.mongodb.performance.DBRef ( org . springframework . data . mongodb . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core . org.springframework.data.mongodb.core org.springframework.data.mongodb.core.mapping.DBRef , MongoPersistentEntity < ? > org.springframework.data.mongodb.performance.MongoPersistentEntity<?> , java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.performance.Document org.springframework.data.mongodb.performance.Document ( DBRef org.springframework.data.mongodb.performance.DBRef ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> ( java.util.List<org.springframework.data.mongodb.performance.DBRef> < DBRef > java.util.List<org.springframework.data.mongodb.performance.DBRef> ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ( java.lang.String , org.springframework.data.mongodb.performance.WriteConcern ) -> { void ( STRING + java.lang.String ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String . java.lang.String ( STRING , int , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String . java.lang.String ( STRING , int , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String . java.lang.String ( STRING , int , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String . java.lang.String ( STRING , int , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String . java.lang.String ( STRING , int , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String . java.lang.String ( STRING , int , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ) ; void ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics = new org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics ( STRING + int * NUMBER + STRING ) ; java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> = java.util.List<org.springframework.data.mongodb.performance.Document> ( int * NUMBER ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( java.util.List<org.springframework.data.mongodb.performance.Document> ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( java.util.List<org.springframework.data.mongodb.performance.Document> ) ) ; } org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( int ) ; }  <METHOD_END>
<METHOD_START> private long long ( final java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( ( ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = new java.util.ArrayList<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > ( ) ; for ( Document org.springframework.data.mongodb.performance.Document : java.util.List<org.springframework.data.mongodb.performance.Document> ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> . boolean ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ( new Document ( org.springframework.data.mongodb.performance.Document ) ) ) ; } return java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ; } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( final java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( ( ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = new java.util.ArrayList<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > ( ) ; for ( Document org.springframework.data.mongodb.performance.Document : java.util.List<org.springframework.data.mongodb.performance.Document> ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> . boolean ( org.springframework.data.mongodb.performance.MongoConverter . read ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person .class , org.springframework.data.mongodb.performance.Document ) ) ; } return java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ; } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( int , int , WriteConcern . SAFE ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , int int , WriteConcern org.springframework.data.mongodb.performance.WriteConcern ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics = new org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics ( STRING + int + STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { void ( ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( int , org.springframework.data.mongodb.performance.WriteConcern ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( ) ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , long ( ) ) ; if ( int > NUMBER && int % ( int / NUMBER ) == NUMBER ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( int ) ; } } org.springframework.data.mongodb.performance.ReactivePerformanceTests.Statistics . void ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { java.lang.System . java.io.PrintStream . void ( java.lang.String ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.System . java.io.PrintStream . void ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( ) { T ( ( ) { Query org.springframework.data.mongodb.performance.Query = query ( where ( STRING ) . regex ( STRING ) ) ; return org.springframework.data.mongodb.performance.ReactiveMongoTemplate . find ( org.springframework.data.mongodb.performance.Query , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person .class , STRING ) . collectList ( ) . block ( ) ; } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( ) { T ( ( ) org.springframework.data.mongodb.performance.ReactivePerformanceTests.ReactivePersonRepository . org.springframework.data.mongodb.performance.Flux<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( STRING ) . collectList ( ) . block ( ) ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.WriteConcernCallback org.springframework.data.mongodb.performance.ReactivePerformanceTests.WriteConcernCallback ) { Constants org.springframework.data.mongodb.performance.Constants = new Constants ( WriteConcern .class ) ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.performance.Constants . getNames ( null ) ) { if ( java.util.Collection<java.lang.String> . boolean ( java.lang.String ) ) { continue; } WriteConcern org.springframework.data.mongodb.performance.WriteConcern = ( WriteConcern ) org.springframework.data.mongodb.performance.Constants . asObject ( java.lang.String ) ; void ( ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.WriteConcernCallback . void ( java.lang.String , org.springframework.data.mongodb.performance.WriteConcern ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { MongoDatabase org.springframework.data.mongodb.performance.MongoDatabase = this . org.springframework.data.mongodb.performance.MongoClient . getDatabase ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { MongoCollection < Document > org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> = org.springframework.data.mongodb.performance.MongoDatabase . getCollection ( java.lang.String ) ; Mono . from ( org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> . drop ( ) ) . block ( ) ; Mono . from ( org.springframework.data.mongodb.performance.MongoDatabase . createCollection ( java.lang.String , org.springframework.data.mongodb.performance.CreateCollectionOptions ( ) ) ) . block ( ) ; org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> . createIndex ( new BasicDBObject ( STRING , - NUMBER ) ) ; org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> . createIndex ( new BasicDBObject ( STRING , - NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.performance.CreateCollectionOptions org.springframework.data.mongodb.performance.CreateCollectionOptions ( ) { CreateCollectionOptions org.springframework.data.mongodb.performance.CreateCollectionOptions = new CreateCollectionOptions ( ) ; return org.springframework.data.mongodb.performance.CreateCollectionOptions . sizeInBytes ( int ) . capped ( false ) ; }  <METHOD_END>
<METHOD_START> private long long ( int int , WriteConcern org.springframework.data.mongodb.performance.WriteConcern ) { final MongoCollection < Document > org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> = org.springframework.data.mongodb.performance.MongoClient . getDatabase ( java.lang.String ) . getCollection ( STRING ) . withWriteConcern ( org.springframework.data.mongodb.performance.WriteConcern ) ; final java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( int ) ; java.lang.Void ( new org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<java.lang.Void> < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( ) { for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person : java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) { Mono . from ( org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> . insertOne ( new Document ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person . org.springframework.data.mongodb.performance.Document ( ) ) ) ) . block ( ) ; } return null ; } } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( ) { for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person : java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) { Mono . from ( org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> . insertOne ( new Document ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person . org.springframework.data.mongodb.performance.Document ( ) ) ) ) . block ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private long long ( int int , WriteConcern org.springframework.data.mongodb.performance.WriteConcern ) { final java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( int ) ; org.springframework.data.mongodb.performance.ReactiveMongoTemplate . setWriteConcern ( org.springframework.data.mongodb.performance.WriteConcern ) ; java.lang.Void ( new org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<java.lang.Void> < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( ) { for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person : java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.ReactivePersonRepository . save ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ) . block ( ) ; } return null ; } } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( ) { for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person : java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.ReactivePersonRepository . save ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ) . block ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private long long ( int int , WriteConcern org.springframework.data.mongodb.performance.WriteConcern ) { final java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( int ) ; java.lang.Void ( new org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<java.lang.Void> < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( ) { org.springframework.data.mongodb.performance.ReactiveMongoTemplate . setWriteConcern ( org.springframework.data.mongodb.performance.WriteConcern ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person : java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) { Mono . from ( org.springframework.data.mongodb.performance.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person , STRING ) ) . block ( ) ; } return null ; } } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( ) { org.springframework.data.mongodb.performance.ReactiveMongoTemplate . setWriteConcern ( org.springframework.data.mongodb.performance.WriteConcern ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person : java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) { Mono . from ( org.springframework.data.mongodb.performance.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person , STRING ) ) . block ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private long long ( int int , WriteConcern org.springframework.data.mongodb.performance.WriteConcern ) { final MongoCollection < Document > org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> = org.springframework.data.mongodb.performance.MongoClient . getDatabase ( java.lang.String ) . getCollection ( STRING ) . withWriteConcern ( org.springframework.data.mongodb.performance.WriteConcern ) ; final java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( int ) ; java.lang.Void ( new org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<java.lang.Void> < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( ) { Flux . from ( org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> . insertMany ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> . java.util.stream.Stream<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( ) . java.util.stream.Stream<java.lang.Object> ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person -> new Document ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person . org.springframework.data.mongodb.performance.Document ( ) ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ) ) . then ( ) . block ( ) ; return null ; } } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( ) { Flux . from ( org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> . insertMany ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> . java.util.stream.Stream<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( ) . java.util.stream.Stream<java.lang.Object> ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person -> new Document ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person . org.springframework.data.mongodb.performance.Document ( ) ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ) ) . then ( ) . block ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private long long ( int int , WriteConcern org.springframework.data.mongodb.performance.WriteConcern ) { final java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( int ) ; org.springframework.data.mongodb.performance.ReactiveMongoTemplate . setWriteConcern ( org.springframework.data.mongodb.performance.WriteConcern ) ; java.lang.Void ( new org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<java.lang.Void> < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.ReactivePersonRepository . save ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) . then ( ) . block ( ) ; return null ; } } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.ReactivePersonRepository . save ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) . then ( ) . block ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private long long ( int int , WriteConcern org.springframework.data.mongodb.performance.WriteConcern ) { final java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( int ) ; java.lang.Void ( new org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<java.lang.Void> < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( ) { org.springframework.data.mongodb.performance.ReactiveMongoTemplate . setWriteConcern ( org.springframework.data.mongodb.performance.WriteConcern ) ; Flux . from ( org.springframework.data.mongodb.performance.ReactiveMongoTemplate . insertAll ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) ) . then ( ) . block ( ) ; return null ; } } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( ) { org.springframework.data.mongodb.performance.ReactiveMongoTemplate . setWriteConcern ( org.springframework.data.mongodb.performance.WriteConcern ) ; Flux . from ( org.springframework.data.mongodb.performance.ReactiveMongoTemplate . insertAll ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ) ) . then ( ) . block ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private long long ( ) { T ( ( ) Flux . from ( org.springframework.data.mongodb.performance.MongoClient . getDatabase ( java.lang.String ) . getCollection ( STRING ) . find ( ) ) . map ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person :: org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ) . collectList ( ) . block ( ) ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( ) { T ( ( ) org.springframework.data.mongodb.performance.ReactiveMongoTemplate . findAll ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person .class , STRING ) . collectList ( ) . block ( ) ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( ) { T ( ( ) org.springframework.data.mongodb.performance.ReactivePerformanceTests.ReactivePersonRepository . findAll ( ) . collectList ( ) . block ( ) ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private long long ( ) { T ( ( ) { MongoCollection < Document > org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> = org.springframework.data.mongodb.performance.MongoClient . getDatabase ( java.lang.String ) . getCollection ( STRING ) ; Document org.springframework.data.mongodb.performance.Document = new Document ( STRING , java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ) ; Document org.springframework.data.mongodb.performance.Document = new Document ( STRING , org.springframework.data.mongodb.performance.Document ) ; return Flux . from ( org.springframework.data.mongodb.performance.MongoCollection<org.springframework.data.mongodb.performance.Document> . find ( org.springframework.data.mongodb.performance.Document ) ) . map ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person :: org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ) . collectList ( ) . block ( ) ; } ) ; return org.springframework.data.mongodb.performance.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( int int ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> = new java.util.ArrayList<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> = new java.util.ArrayList<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> . boolean ( new org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address ( STRING + int , STRING + int ) ) ; } org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person = new org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ( STRING + int , STRING + int , java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person . java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> . boolean ( new org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem . java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> ( ) ) ) ; } java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> . boolean ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ) ; } return java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> ( int int ) { java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> = new java.util.ArrayList<org.springframework.data.mongodb.performance.Document> < Document > ( int ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person : java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( int ) ) { java.util.List<org.springframework.data.mongodb.performance.Document> . add ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person . org.springframework.data.mongodb.performance.Document ( ) ) ; } return java.util.List<org.springframework.data.mongodb.performance.Document> ; }  <METHOD_END>
<METHOD_START> private < T > T T ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<T> < T > org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<T> ) { org.springframework.data.mongodb.performance.StopWatch . start ( ) ; try { return org.springframework.data.mongodb.performance.ReactivePerformanceTests.WatchCallback<T> . T ( ) ; } finally { org.springframework.data.mongodb.performance.StopWatch . stop ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> ; this . java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> = new java.util.HashSet<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order > ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ( Document org.springframework.data.mongodb.performance.Document ) { java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> = ( java.util.List<org.springframework.data.mongodb.performance.Document> < Document > ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> = new java.util.ArrayList<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address > ( java.util.List<org.springframework.data.mongodb.performance.Document> . size ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.List<org.springframework.data.mongodb.performance.Document> ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> . boolean ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address ( ( Document ) java.lang.Object ) ) ; } java.util.List<org.springframework.data.mongodb.performance.Document> < Document > java.util.List<org.springframework.data.mongodb.performance.Document> = ( java.util.List<org.springframework.data.mongodb.performance.Document> < Document > ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order > java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> = new java.util.HashSet<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order > ( java.util.List<org.springframework.data.mongodb.performance.Document> . size ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.List<org.springframework.data.mongodb.performance.Document> ) { java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> . boolean ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order ( ( Document ) java.lang.Object ) ) ; } org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person = new org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ( ( java.lang.String ) org.springframework.data.mongodb.performance.Document . get ( STRING ) , ( java.lang.String ) org.springframework.data.mongodb.performance.Document . get ( STRING ) , java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person . java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> . boolean ( java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> ) ; return org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.performance.Document org.springframework.data.mongodb.performance.Document ( ) { Document org.springframework.data.mongodb.performance.Document = new Document ( ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , java.lang.String ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , java.lang.String ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , org.springframework.data.mongodb.performance.BasicDBList ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address> ) ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , org.springframework.data.mongodb.performance.BasicDBList ( java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order> ) ) ; return org.springframework.data.mongodb.performance.Document ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this( java.lang.String , java.lang.String , new java.util.HashSet<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType > ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType . org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType[] ( ) ) ) ) ); }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType > java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> = java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address ( Document org.springframework.data.mongodb.performance.Document ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; java.util.List java.util.List = ( java.util.List ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; return new org.springframework.data.mongodb.performance.ReactivePerformanceTests.Address ( java.lang.String , java.lang.String , new java.util.HashSet<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType > ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> ( java.util.List , org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType .class ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.performance.Document org.springframework.data.mongodb.performance.Document ( ) { Document org.springframework.data.mongodb.performance.Document = new Document ( ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , java.lang.String ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , java.lang.String ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , java.util.List ( java.util.Set<org.springframework.data.mongodb.performance.ReactivePerformanceTests.AddressType> ) ) ; return org.springframework.data.mongodb.performance.Document ; }  <METHOD_END>
<METHOD_START> private static < T extends java.lang.Enum<T> < T > > java.util.List<T> < T > java.util.List<T> ( java.util.List java.util.List , java.lang.Class<T> < T > java.lang.Class<T> ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( java.util.List . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.List ) { java.util.List<T> . boolean ( java.lang.Enum . T ( java.lang.Class<T> , java.lang.Object . java.lang.String ( ) ) ) ; } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> private static < T extends java.lang.Enum<T> < T > > java.util.List java.util.List ( java.util.Collection<T> < T > java.util.Collection<T> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( T T : java.util.Collection<T> ) { java.util.List<java.lang.String> . boolean ( T . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> , java.util.Date java.util.Date ) { this . java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> ; this . java.util.Date = java.util.Date ; this . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status = org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status ; }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> , java.util.Date java.util.Date , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status ) { this . java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> = java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> ; this . java.util.Date = java.util.Date ; this . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status = org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order ( Document org.springframework.data.mongodb.performance.Document ) { java.util.List java.util.List = ( java.util.List ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> = new java.util.ArrayList<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> < org.springframework.data.mongodb.performance.ReactivePerformanceTests . org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem > ( java.util.List . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.List ) { java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> . boolean ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem . org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem ( ( Document ) java.lang.Object ) ) ; } java.util.Date java.util.Date = ( java.util.Date ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status = org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status ( ( java.lang.String ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ) ; return new org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> , java.util.Date , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> ) { this( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> , new java.util.Date ( ) ); }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.performance.Document org.springframework.data.mongodb.performance.Document ( ) { Document org.springframework.data.mongodb.performance.Document = new Document ( ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , java.util.Date ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , org.springframework.data.mongodb.performance.BasicDBList ( java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> ) ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Order.Status . java.lang.String ( ) ) ; return org.springframework.data.mongodb.performance.Document ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int , double double ) { this . java.lang.String = java.lang.String ; this . int = int ; this . double = double ; }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem > java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> ( ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem = new org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem ( STRING , NUMBER , NUMBER ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem = new org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem ( STRING , NUMBER , NUMBER ) ; org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem = new org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem ( STRING , NUMBER , NUMBER ) ; return java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem> ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem , org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem , org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem ( Document org.springframework.data.mongodb.performance.Document ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; double double = ( java.lang.Double ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; int int = ( java.lang.Integer ) org.springframework.data.mongodb.performance.Document . get ( STRING ) ; return new org.springframework.data.mongodb.performance.ReactivePerformanceTests.LineItem ( java.lang.String , int , double ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.performance.Document org.springframework.data.mongodb.performance.Document ( ) { Document org.springframework.data.mongodb.performance.Document = new Document ( ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , java.lang.String ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , double ) ; org.springframework.data.mongodb.performance.Document . put ( STRING , int ) ; return org.springframework.data.mongodb.performance.Document ; }  <METHOD_END>
<METHOD_START> private static < T > java.util.List<T> < T > java.util.List<T> ( java.util.List<T> < T > java.util.List<T> ) { Assert . isTrue ( ! java.util.List<T> . boolean ( ) , STRING ) ; java.util.Random java.util.Random = new java.util.Random ( ) ; int int = java.util.Random . int ( java.util.List<T> . int ( ) ) ; int = int == NUMBER ? NUMBER : int ; java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( int ) ; while ( java.util.List<T> . int ( ) < int ) { int int = java.util.Random . int ( java.util.List<T> . int ( ) ) ; T T = java.util.List<T> . T ( int ) ; if ( ! java.util.List<T> . boolean ( T ) ) { java.util.List<T> . boolean ( T ) ; } } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , WriteConcern org.springframework.data.mongodb.performance.WriteConcern );  <METHOD_END>
<METHOD_START> T T ( )  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.performance.Flux<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person > org.springframework.data.mongodb.performance.Flux<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.performance.Document org.springframework.data.mongodb.performance.Document ( )  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.performance.BasicDBList org.springframework.data.mongodb.performance.BasicDBList ( java.util.Collection<? extends org.springframework.data.mongodb.performance.ReactivePerformanceTests.Convertible> < ? extends org.springframework.data.mongodb.performance.ReactivePerformanceTests.Convertible > java.util.Collection<? extends org.springframework.data.mongodb.performance.ReactivePerformanceTests.Convertible> ) { BasicDBList org.springframework.data.mongodb.performance.BasicDBList = new BasicDBList ( ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Convertible org.springframework.data.mongodb.performance.ReactivePerformanceTests.Convertible : java.util.Collection<> ) { org.springframework.data.mongodb.performance.BasicDBList . add ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Convertible . org.springframework.data.mongodb.performance.Document ( ) ) ; } return org.springframework.data.mongodb.performance.BasicDBList ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes> = new java.util.HashMap<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes > ( ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode : org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode[] ( ) ) { java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes> . org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , new org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , double double ) { java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes> . org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode ) . void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , double ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String , int ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String ) ; java.lang.System . java.io.PrintStream . void ( java.lang.String ( java.lang.String ) ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode : org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode[] ( ) ) { java.lang.String java.lang.String = java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes> . org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode ) . java.lang.String ( ) ; if ( ! java.lang.String . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( '\n' ) ; } } java.lang.System . java.io.PrintStream . void ( java.lang.StringBuilder . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes> . int ( ) ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes : this . java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes> . java.util.Collection<org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes> ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.ModeTimes . java.lang.String ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String . int ( ) ) ; for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode ) { this . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api = org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api ; this . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode = org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode ; this . java.util.List<java.lang.Double> = new java.util.ArrayList<java.lang.Double> < java.lang.Double > ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( double double ) { this . java.util.List<java.lang.Double> . boolean ( double ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! java.util.List<java.lang.Double> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public double double ( ) { double double = NUMBER ; for ( java.lang.Double java.lang.Double : java.util.List<java.lang.Double> ) { double += java.lang.Double ; } return double == NUMBER ? NUMBER : double / java.util.List<java.lang.Double> . int ( ) ; }  <METHOD_END>
<METHOD_START> public double double ( ) { if ( java.util.List<java.lang.Double> . boolean ( ) ) { return NUMBER ; } java.util.ArrayList<java.lang.Double> < java.lang.Double > java.util.ArrayList<java.lang.Double> = new java.util.ArrayList<java.lang.Double> < java.lang.Double > ( java.util.List<java.lang.Double> ) ; java.util.Collections . void ( java.util.ArrayList<java.lang.Double> ) ; int int = java.util.ArrayList<java.lang.Double> . int ( ) ; if ( int % NUMBER == NUMBER ) { return ( java.util.ArrayList<java.lang.Double> . java.lang.Double ( int / NUMBER - NUMBER ) + java.util.ArrayList<java.lang.Double> . java.lang.Double ( int / NUMBER ) ) / NUMBER ; } else { return java.util.ArrayList<java.lang.Double> . java.lang.Double ( int / NUMBER ) ; } }  <METHOD_END>
<METHOD_START> private double double ( double double ) { double double = double ( ) ; return double * NUMBER / double - NUMBER ; }  <METHOD_END>
<METHOD_START> private double double ( double double ) { double double = double ( ) ; return double * NUMBER / double - NUMBER ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( java.util.List<java.lang.Double> . boolean ( ) ) { return STRING ; } return java.lang.String ( STRING , STRING , STRING ) + '\n' ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , java.text.DecimalFormat . java.lang.String ( double ( ) ) , java.lang.String , java.lang.String , java.text.DecimalFormat . java.lang.String ( double ( ) ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( double double , double double ) { if ( java.util.List<java.lang.Double> . boolean ( ) ) { return STRING ; } return java.lang.String ( java.lang.String . java.lang.String ( STRING , java.text.DecimalFormat . java.lang.String ( double ( double ) ) ) , STRING , java.lang.String . java.lang.String ( STRING , java.text.DecimalFormat . java.lang.String ( double ( double ) ) ) ) + '\n' ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.util.List<java.lang.Double> . boolean ( ) ? STRING : java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode , StringUtils . collectionToCommaDelimitedString ( java.util.List<java.lang.Double> ) ) + '\n' ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode ) { this . java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> = new java.util.HashMap<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> < org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes > ( ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api : org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api[] ( ) ) { this . java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> . org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , new org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , org.springframework.data.mongodb.performance.ReactivePerformanceTests.Mode ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api , double double ) { java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> . org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api ) . void ( double ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { if ( java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> . boolean ( ) ) { return STRING ; } java.lang.Double java.lang.Double = null ; java.lang.Double java.lang.Double = null ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api : org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api . org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api[] ( ) ) { org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes = java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> . org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api ) ; if ( ! org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes . boolean ( ) ) { continue; } if ( java.lang.Double == null ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes . java.lang.String ( ) ) ; java.lang.Double = org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes . double ( ) ; java.lang.Double = org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes . double ( ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes . java.lang.String ( java.lang.Double , java.lang.Double ) ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> . int ( ) ) ; for ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes : this . java.util.Map<org.springframework.data.mongodb.performance.ReactivePerformanceTests.Api,org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> . java.util.Collection<org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes> ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.mongodb.performance.ReactivePerformanceTests.ApiTimes . java.lang.String ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
