<METHOD_START> public static org.springframework.jdbc.support.SQLErrorCodesFactory org.springframework.jdbc.support.SQLErrorCodesFactory ( ) { return org.springframework.jdbc.support.SQLErrorCodesFactory ; }  <METHOD_END>
<METHOD_START> protected void ( ) { java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> < java.lang.String , SQLErrorCodes > java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> ; try { DefaultListableBeanFactory org.springframework.jdbc.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.jdbc.support.DefaultListableBeanFactory . setBeanClassLoader ( java.lang.Class<? extends org.springframework.jdbc.support.SQLErrorCodesFactory> ( ) . java.lang.ClassLoader ( ) ) ; XmlBeanDefinitionReader org.springframework.jdbc.support.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.jdbc.support.DefaultListableBeanFactory ) ; Resource org.springframework.jdbc.support.Resource = org.springframework.jdbc.support.Resource ( java.lang.String ) ; if ( org.springframework.jdbc.support.Resource != null && org.springframework.jdbc.support.Resource . exists ( ) ) { org.springframework.jdbc.support.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.jdbc.support.Resource ) ; } else { org.springframework.jdbc.support.Log . warn ( STRING ) ; } org.springframework.jdbc.support.Resource = org.springframework.jdbc.support.Resource ( java.lang.String ) ; if ( org.springframework.jdbc.support.Resource != null && org.springframework.jdbc.support.Resource . exists ( ) ) { org.springframework.jdbc.support.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.jdbc.support.Resource ) ; org.springframework.jdbc.support.Log . info ( STRING ) ; } java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> = org.springframework.jdbc.support.DefaultListableBeanFactory . getBeansOfType ( SQLErrorCodes .class , true , false ) ; if ( org.springframework.jdbc.support.Log . isInfoEnabled ( ) ) { org.springframework.jdbc.support.Log . info ( STRING + java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> . keySet ( ) ) ; } } catch ( BeansException org.springframework.jdbc.support.BeansException ) { org.springframework.jdbc.support.Log . warn ( STRING , org.springframework.jdbc.support.BeansException ) ; java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> = java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; } this . java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> = java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jdbc.support.Resource org.springframework.jdbc.support.Resource ( java.lang.String java.lang.String ) { return new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.jdbc.support.SQLErrorCodesFactory> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.support.SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = this . java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> . get ( java.lang.String ) ; if ( org.springframework.jdbc.support.SQLErrorCodes == null ) { for ( SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes : this . java.util.Map<java.lang.String,org.springframework.jdbc.support.SQLErrorCodes> . values ( ) ) { if ( PatternMatchUtils . simpleMatch ( org.springframework.jdbc.support.SQLErrorCodes . getDatabaseProductNames ( ) , java.lang.String ) ) { org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ; break; } } } if ( org.springframework.jdbc.support.SQLErrorCodes != null ) { void ( java.lang.String , org.springframework.jdbc.support.SQLErrorCodes ) ; if ( org.springframework.jdbc.support.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.Log . debug ( STRING + java.lang.String + STRING ) ; } return org.springframework.jdbc.support.SQLErrorCodes ; } if ( org.springframework.jdbc.support.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.Log . debug ( STRING + java.lang.String + STRING ) ; } return new SQLErrorCodes ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.support.SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ( javax.sql.DataSource javax.sql.DataSource ) { Assert . notNull ( javax.sql.DataSource , STRING ) ; if ( org.springframework.jdbc.support.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.Log . debug ( STRING + java.lang.String ( javax.sql.DataSource ) + STRING ) ; } SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = this . java.util.Map<javax.sql.DataSource,org.springframework.jdbc.support.SQLErrorCodes> . get ( javax.sql.DataSource ) ; if ( org.springframework.jdbc.support.SQLErrorCodes == null ) { synchronized ( this . java.util.Map<javax.sql.DataSource,org.springframework.jdbc.support.SQLErrorCodes> ) { org.springframework.jdbc.support.SQLErrorCodes = this . java.util.Map<javax.sql.DataSource,org.springframework.jdbc.support.SQLErrorCodes> . get ( javax.sql.DataSource ) ; if ( org.springframework.jdbc.support.SQLErrorCodes == null ) { try { java.lang.String java.lang.String = ( java.lang.String ) JdbcUtils . extractDatabaseMetaData ( javax.sql.DataSource , STRING ) ; if ( java.lang.String != null ) { return org.springframework.jdbc.support.SQLErrorCodes ( javax.sql.DataSource , java.lang.String ) ; } } catch ( MetaDataAccessException org.springframework.jdbc.support.MetaDataAccessException ) { org.springframework.jdbc.support.Log . warn ( STRING , org.springframework.jdbc.support.MetaDataAccessException ) ; return new SQLErrorCodes ( ) ; } } } } if ( org.springframework.jdbc.support.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.Log . debug ( STRING + java.lang.String ( javax.sql.DataSource ) + STRING ) ; } return org.springframework.jdbc.support.SQLErrorCodes ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.support.SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String ) { SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes = org.springframework.jdbc.support.SQLErrorCodes ( java.lang.String ) ; if ( org.springframework.jdbc.support.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.Log . debug ( STRING + java.lang.String ( javax.sql.DataSource ) + STRING + java.lang.String + STRING ) ; } this . java.util.Map<javax.sql.DataSource,org.springframework.jdbc.support.SQLErrorCodes> . put ( javax.sql.DataSource , org.springframework.jdbc.support.SQLErrorCodes ) ; return org.springframework.jdbc.support.SQLErrorCodes ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.support.SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ( javax.sql.DataSource javax.sql.DataSource ) { return this . java.util.Map<javax.sql.DataSource,org.springframework.jdbc.support.SQLErrorCodes> . remove ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( javax.sql.DataSource javax.sql.DataSource ) { return javax.sql.DataSource . java.lang.Class<? extends javax.sql.DataSource> ( ) . java.lang.String ( ) + '@' + java.lang.Integer . java.lang.String ( javax.sql.DataSource . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , SQLErrorCodes org.springframework.jdbc.support.SQLErrorCodes ) { SQLExceptionTranslator org.springframework.jdbc.support.SQLExceptionTranslator = CustomSQLExceptionTranslatorRegistry . getInstance ( ) . findTranslatorForDatabase ( java.lang.String ) ; if ( org.springframework.jdbc.support.SQLExceptionTranslator != null ) { if ( org.springframework.jdbc.support.SQLErrorCodes . getCustomSqlExceptionTranslator ( ) != null && org.springframework.jdbc.support.Log . isWarnEnabled ( ) ) { org.springframework.jdbc.support.Log . warn ( STRING + org.springframework.jdbc.support.SQLErrorCodes . getCustomSqlExceptionTranslator ( ) . getClass ( ) . getSimpleName ( ) + STRING + org.springframework.jdbc.support.SQLExceptionTranslator . getClass ( ) . getSimpleName ( ) + STRING + java.lang.String + STRING ) ; } else if ( org.springframework.jdbc.support.Log . isInfoEnabled ( ) ) { org.springframework.jdbc.support.Log . info ( STRING + org.springframework.jdbc.support.SQLExceptionTranslator . getClass ( ) . getSimpleName ( ) + STRING + java.lang.String + STRING ) ; } org.springframework.jdbc.support.SQLErrorCodes . setCustomSqlExceptionTranslator ( org.springframework.jdbc.support.SQLExceptionTranslator ) ; } }  <METHOD_END>
