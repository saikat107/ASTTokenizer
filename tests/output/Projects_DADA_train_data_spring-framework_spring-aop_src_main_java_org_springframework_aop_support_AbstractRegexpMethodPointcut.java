<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . java.lang.String[] = new java.lang.String [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { this . java.lang.String[] [ int ] = StringUtils . trimWhitespace ( java.lang.String[] [ int ] ) ; } void ( this . java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . java.lang.String[] = new java.lang.String [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { this . java.lang.String[] [ int ] = StringUtils . trimWhitespace ( java.lang.String[] [ int ] ) ; } void ( this . java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( ( java.lang.Class<> != null && boolean ( ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method , java.lang.Class<> ) ) ) || boolean ( ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method ) ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { for ( int int = NUMBER ; int < this . java.lang.String[] . int ; int ++ ) { boolean boolean = boolean ( java.lang.String , int ) ; if ( boolean ) { for ( int int = NUMBER ; int < this . java.lang.String[] . int ; int ++ ) { boolean boolean = boolean ( java.lang.String , int ) ; if ( boolean ) { return false ; } } return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String [] java.lang.String[] ) throws java.lang.IllegalArgumentException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String [] java.lang.String[] ) throws java.lang.IllegalArgumentException ;  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( java.lang.String java.lang.String , int int );  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( java.lang.String java.lang.String , int int );  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.aop.support.AbstractRegexpMethodPointcut ) ) { return false ; } org.springframework.aop.support.AbstractRegexpMethodPointcut org.springframework.aop.support.AbstractRegexpMethodPointcut = ( org.springframework.aop.support.AbstractRegexpMethodPointcut ) java.lang.Object ; return ( java.util.Arrays . boolean ( this . java.lang.String[] , org.springframework.aop.support.AbstractRegexpMethodPointcut . java.lang.String[] ) && java.util.Arrays . boolean ( this . java.lang.String[] , org.springframework.aop.support.AbstractRegexpMethodPointcut . java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { int = NUMBER * int + java.lang.String . int ( ) ; } for ( java.lang.String java.lang.String : this . java.lang.String[] ) { int = NUMBER * int + java.lang.String . int ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.aop.support.AbstractRegexpMethodPointcut> ( ) . java.lang.String ( ) + STRING + ObjectUtils . nullSafeToString ( this . java.lang.String[] ) + STRING + ObjectUtils . nullSafeToString ( this . java.lang.String[] ) ; }  <METHOD_END>
