<METHOD_START> @ Before public void void ( ) { org.springframework.cassandra.config.PoolingOptionsFactoryBean = new PoolingOptionsFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObject ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObjectType ( ) ) . isEqualTo ( PoolingOptions .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . isSingleton ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.config.PoolingOptionsFactoryBean . setHeartbeatIntervalSeconds ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setIdleTimeoutSeconds ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setInitializationExecutor ( java.util.concurrent.Executor ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMinSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setPoolTimeoutMilliseconds ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMinSimultaneousRequests ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getHeartbeatIntervalSeconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getIdleTimeoutSeconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getInitializationExecutor ( ) ) . isEqualTo ( java.util.concurrent.Executor ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getLocalCoreConnections ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getLocalMaxConnections ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getLocalMaxSimultaneousRequests ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getLocalMinSimultaneousRequests ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getPoolTimeoutMilliseconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getRemoteCoreConnections ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getRemoteMaxConnections ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getRemoteMaxSimultaneousRequests ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getRemoteMinSimultaneousRequests ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PoolingOptionsFactoryBean org.springframework.cassandra.config.PoolingOptionsFactoryBean = new PoolingOptionsFactoryBean ( ) { @ java.lang.Override org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { org.springframework.cassandra.config.PoolingOptions . setNewConnectionThreshold ( HostDistance . LOCAL , NUMBER ) ; return org.springframework.cassandra.config.PoolingOptions ; } } ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setHeartbeatIntervalSeconds ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setIdleTimeoutSeconds ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setInitializationExecutor ( java.util.concurrent.Executor ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMinSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setPoolTimeoutMilliseconds ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObject ( ) ) . isNull ( ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObject ( ) ) . isSameAs ( org.springframework.cassandra.config.PoolingOptions ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObjectType ( ) ) . isEqualTo ( org.springframework.cassandra.config.PoolingOptions . getClass ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setHeartbeatIntervalSeconds ( eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setIdleTimeoutSeconds ( eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setInitializationExecutor ( eq ( java.util.concurrent.Executor ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setPoolTimeoutMillis ( eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setCoreConnectionsPerHost ( eq ( HostDistance . LOCAL ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setMaxConnectionsPerHost ( eq ( HostDistance . LOCAL ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setMaxRequestsPerConnection ( eq ( HostDistance . LOCAL ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setNewConnectionThreshold ( eq ( HostDistance . LOCAL ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setCoreConnectionsPerHost ( eq ( HostDistance . REMOTE ) , anyInt ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setMaxConnectionsPerHost ( eq ( HostDistance . REMOTE ) , anyInt ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setMaxRequestsPerConnection ( eq ( HostDistance . REMOTE ) , anyInt ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setNewConnectionThreshold ( eq ( HostDistance . REMOTE ) , anyInt ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { org.springframework.cassandra.config.PoolingOptions . setNewConnectionThreshold ( HostDistance . LOCAL , NUMBER ) ; return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PoolingOptionsFactoryBean org.springframework.cassandra.config.PoolingOptionsFactoryBean = new PoolingOptionsFactoryBean ( ) { @ java.lang.Override org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { org.springframework.cassandra.config.PoolingOptions . setNewConnectionThreshold ( HostDistance . REMOTE , NUMBER ) ; return org.springframework.cassandra.config.PoolingOptions ; } } ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setHeartbeatIntervalSeconds ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setIdleTimeoutSeconds ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setInitializationExecutor ( java.util.concurrent.Executor ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setPoolTimeoutMilliseconds ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMinSimultaneousRequests ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObject ( ) ) . isNull ( ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObject ( ) ) . isSameAs ( org.springframework.cassandra.config.PoolingOptions ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObjectType ( ) ) . isEqualTo ( org.springframework.cassandra.config.PoolingOptions . getClass ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setHeartbeatIntervalSeconds ( eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setIdleTimeoutSeconds ( eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setInitializationExecutor ( eq ( java.util.concurrent.Executor ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setPoolTimeoutMillis ( eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setCoreConnectionsPerHost ( eq ( HostDistance . REMOTE ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setMaxConnectionsPerHost ( eq ( HostDistance . REMOTE ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setMaxRequestsPerConnection ( eq ( HostDistance . REMOTE ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setCoreConnectionsPerHost ( eq ( HostDistance . LOCAL ) , anyInt ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setMaxConnectionsPerHost ( eq ( HostDistance . LOCAL ) , anyInt ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setMaxRequestsPerConnection ( eq ( HostDistance . LOCAL ) , anyInt ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setNewConnectionThreshold ( eq ( HostDistance . LOCAL ) , anyInt ( ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions , never ( ) ) . setNewConnectionThreshold ( eq ( HostDistance . REMOTE ) , eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { org.springframework.cassandra.config.PoolingOptions . setNewConnectionThreshold ( HostDistance . REMOTE , NUMBER ) ; return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( PoolingOptions .class , STRING , int .class ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( PoolingOptions .class , STRING ) ; assumeNotNull ( java.lang.reflect.Method ) ; PoolingOptionsFactoryBean org.springframework.cassandra.config.PoolingOptionsFactoryBean = new PoolingOptionsFactoryBean ( ) { @ java.lang.Override org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { return org.springframework.cassandra.config.PoolingOptions ; } } ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setMaxQueueSize ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObject ( ) ) . isSameAs ( org.springframework.cassandra.config.PoolingOptions ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObjectType ( ) ) . isEqualTo ( org.springframework.cassandra.config.PoolingOptions . getClass ( ) ) ; assertThat ( invokeMethod ( java.lang.reflect.Method , org.springframework.cassandra.config.PoolingOptions ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.config.PoolingOptionsFactoryBean = new PoolingOptionsFactoryBean ( ) { @ java.lang.Override org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { return spy ( super. newPoolingOptions ( ) ) ; } } ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMinSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMinSimultaneousRequests ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObject ( ) ) . isNull ( ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . afterPropertiesSet ( ) ; PoolingOptions org.springframework.cassandra.config.PoolingOptions = org.springframework.cassandra.config.PoolingOptionsFactoryBean . getObject ( ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions . getCoreConnectionsPerHost ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions . getMaxConnectionsPerHost ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions . getMaxRequestsPerConnection ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions . getNewConnectionThreshold ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions . getCoreConnectionsPerHost ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions . getMaxConnectionsPerHost ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions . getMaxRequestsPerConnection ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.config.PoolingOptions . getNewConnectionThreshold ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setMaxConnectionsPerHost ( eq ( HostDistance . LOCAL ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setCoreConnectionsPerHost ( eq ( HostDistance . LOCAL ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setMaxRequestsPerConnection ( eq ( HostDistance . LOCAL ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setNewConnectionThreshold ( eq ( HostDistance . LOCAL ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setMaxConnectionsPerHost ( eq ( HostDistance . REMOTE ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setCoreConnectionsPerHost ( eq ( HostDistance . REMOTE ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setMaxRequestsPerConnection ( eq ( HostDistance . REMOTE ) , eq ( NUMBER ) ) ; verify ( org.springframework.cassandra.config.PoolingOptions ) . setNewConnectionThreshold ( eq ( HostDistance . REMOTE ) , eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { return spy ( super. newPoolingOptions ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMinSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMinSimultaneousRequests ( NUMBER ) ; PoolingOptionsFactoryBean . PoolingOptionsFactoryBean PoolingOptionsFactoryBean.HostDistancePoolingOptions = org.springframework.cassandra.config.PoolingOptionsFactoryBean . newLocalHostDistancePoolingOptions ( ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getHostDistance ( ) ) . isEqualTo ( HostDistance . LOCAL ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getCoreConnectionsPerHost ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getMaxConnectionsPerHost ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getMaxRequestsPerConnection ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getNewConnectionThreshold ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setLocalMinSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteCoreConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxConnections ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMaxSimultaneousRequests ( NUMBER ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean . setRemoteMinSimultaneousRequests ( NUMBER ) ; PoolingOptionsFactoryBean . PoolingOptionsFactoryBean PoolingOptionsFactoryBean.HostDistancePoolingOptions = org.springframework.cassandra.config.PoolingOptionsFactoryBean . newRemoteHostDistancePoolingOptions ( ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getHostDistance ( ) ) . isEqualTo ( HostDistance . REMOTE ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getCoreConnectionsPerHost ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getMaxConnectionsPerHost ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getMaxRequestsPerConnection ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . getNewConnectionThreshold ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final PoolingOptionsFactoryBean . PoolingOptionsFactoryBean PoolingOptionsFactoryBean.HostDistancePoolingOptions = mock ( PoolingOptionsFactoryBean . PoolingOptionsFactoryBean .class ) ; when ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . configure ( any ( PoolingOptions .class ) ) ) . thenAnswer ( invocationOnMock -> invocationOnMock . getArgument ( NUMBER ) ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean = new PoolingOptionsFactoryBean ( ) { @ java.lang.Override protected org.springframework.cassandra.config.HostDistancePoolingOptions org.springframework.cassandra.config.HostDistancePoolingOptions ( ) { return PoolingOptionsFactoryBean.HostDistancePoolingOptions ; } } ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . configureLocalHostDistancePoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ) . isSameAs ( org.springframework.cassandra.config.PoolingOptions ) ; verify ( PoolingOptionsFactoryBean.HostDistancePoolingOptions ) . configure ( same ( org.springframework.cassandra.config.PoolingOptions ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.HostDistancePoolingOptions org.springframework.cassandra.config.HostDistancePoolingOptions ( ) { return PoolingOptionsFactoryBean.HostDistancePoolingOptions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final PoolingOptionsFactoryBean . PoolingOptionsFactoryBean PoolingOptionsFactoryBean.HostDistancePoolingOptions = mock ( PoolingOptionsFactoryBean . PoolingOptionsFactoryBean .class ) ; when ( PoolingOptionsFactoryBean.HostDistancePoolingOptions . configure ( any ( PoolingOptions .class ) ) ) . thenAnswer ( invocationOnMock -> invocationOnMock . getArgument ( NUMBER ) ) ; org.springframework.cassandra.config.PoolingOptionsFactoryBean = new PoolingOptionsFactoryBean ( ) { @ java.lang.Override protected org.springframework.cassandra.config.HostDistancePoolingOptions org.springframework.cassandra.config.HostDistancePoolingOptions ( ) { return PoolingOptionsFactoryBean.HostDistancePoolingOptions ; } } ; assertThat ( org.springframework.cassandra.config.PoolingOptionsFactoryBean . configureRemoteHostDistancePoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ) . isSameAs ( org.springframework.cassandra.config.PoolingOptions ) ; verify ( PoolingOptionsFactoryBean.HostDistancePoolingOptions ) . configure ( same ( org.springframework.cassandra.config.PoolingOptions ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.HostDistancePoolingOptions org.springframework.cassandra.config.HostDistancePoolingOptions ( ) { return PoolingOptionsFactoryBean.HostDistancePoolingOptions ; }  <METHOD_END>
