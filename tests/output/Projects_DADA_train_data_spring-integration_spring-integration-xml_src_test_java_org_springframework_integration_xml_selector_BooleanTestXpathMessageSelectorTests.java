<METHOD_START> @ Test public void void ( ) { BooleanTestXPathMessageSelector org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector = new BooleanTestXPathMessageSelector ( STRING ) ; assertTrue ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; assertFalse ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BooleanTestXPathMessageSelector org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector = new BooleanTestXPathMessageSelector ( STRING ) ; assertTrue ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < org.w3c.dom.Document > ( XmlTestUtil . getDocumentForString ( STRING ) ) ) ) ; assertFalse ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < org.w3c.dom.Document > ( XmlTestUtil . getDocumentForString ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BooleanTestXPathMessageSelector org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector = new BooleanTestXPathMessageSelector ( STRING , STRING , STRING ) ; assertTrue ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; assertFalse ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { XPathExpression org.springframework.integration.xml.selector.XPathExpression = XPathExpressionFactory . createXPathExpression ( STRING ) ; BooleanTestXPathMessageSelector org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector = new BooleanTestXPathMessageSelector ( org.springframework.integration.xml.selector.XPathExpression ) ; assertTrue ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; assertFalse ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XPathExpression org.springframework.integration.xml.selector.XPathExpression = XPathExpressionFactory . createXPathExpression ( STRING ) ; BooleanTestXPathMessageSelector org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector = new BooleanTestXPathMessageSelector ( org.springframework.integration.xml.selector.XPathExpression ) ; org.w3c.dom.Document org.w3c.dom.Document = XmlTestUtil . getDocumentForString ( STRING ) ; assertTrue ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < org.w3c.dom.Node > ( org.w3c.dom.Document . org.w3c.dom.NodeList ( STRING ) . org.w3c.dom.Node ( NUMBER ) ) ) ) ; assertFalse ( org.springframework.integration.xml.selector.BooleanTestXPathMessageSelector . accept ( new GenericMessage < org.w3c.dom.Node > ( org.w3c.dom.Document . org.w3c.dom.NodeList ( STRING ) . org.w3c.dom.Node ( NUMBER ) ) ) ) ; }  <METHOD_END>
