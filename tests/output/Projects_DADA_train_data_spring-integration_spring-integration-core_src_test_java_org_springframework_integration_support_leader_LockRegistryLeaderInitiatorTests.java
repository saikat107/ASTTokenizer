<METHOD_START> @ Before public void void ( ) { this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( new org.springframework.integration.support.leader.LockRegistryLeaderInitiatorTests.CountingPublisher ( this . java.util.concurrent.CountDownLatch , this . java.util.concurrent.CountDownLatch ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . start ( ) ; assertThat ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . isRunning ( ) , is ( true ) ) ; assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; java.lang.Thread . void ( NUMBER ) ; assertThat ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . stop ( ) ; assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . start ( ) ; assertThat ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . isRunning ( ) , is ( true ) ) ; assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . yield ( ) ; assertThat ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LockRegistryLeaderInitiator org.springframework.integration.support.leader.LockRegistryLeaderInitiator = new LockRegistryLeaderInitiator ( this . org.springframework.integration.support.leader.LockRegistry , new DefaultCandidate ( ) ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( new org.springframework.integration.support.leader.LockRegistryLeaderInitiatorTests.CountingPublisher ( java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . start ( ) ; assertThat ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . start ( ) ; this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator . stop ( ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; LockRegistryLeaderInitiator org.springframework.integration.support.leader.LockRegistryLeaderInitiator = new LockRegistryLeaderInitiator ( this . org.springframework.integration.support.leader.LockRegistry , new DefaultCandidate ( ) ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( new DefaultLeaderEventPublisher ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.support.leader.Context , java.lang.String java.lang.String ) { try { throw new java.lang.RuntimeException ( STRING ) ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } } } ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.support.leader.Context , java.lang.String java.lang.String ) { try { throw new java.lang.RuntimeException ( STRING ) ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( true ) ; LockRegistry org.springframework.integration.support.leader.LockRegistry = mock ( LockRegistry .class ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = mock ( java.util.concurrent.locks.Lock .class ) ; given ( org.springframework.integration.support.leader.LockRegistry . obtain ( anyString ( ) ) ) . willReturn ( java.util.concurrent.locks.Lock ) ; given ( java.util.concurrent.locks.Lock . boolean ( anyLong ( ) , any ( java.util.concurrent.TimeUnit .class ) ) ) . willAnswer ( i -> firstLocked . get ( ) ) ; LockRegistryLeaderInitiator org.springframework.integration.support.leader.LockRegistryLeaderInitiator = new LockRegistryLeaderInitiator ( org.springframework.integration.support.leader.LockRegistry , new DefaultCandidate ( ) ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setHeartBeatMillis ( NUMBER ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setBusyWaitMillis ( NUMBER ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( new org.springframework.integration.support.leader.LockRegistryLeaderInitiatorTests.CountingPublisher ( java.util.concurrent.CountDownLatch , java.util.concurrent.CountDownLatch ) ) ; LockRegistry org.springframework.integration.support.leader.LockRegistry = mock ( LockRegistry .class ) ; java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock = mock ( java.util.concurrent.locks.Lock .class ) ; given ( org.springframework.integration.support.leader.LockRegistry . obtain ( anyString ( ) ) ) . willReturn ( java.util.concurrent.locks.Lock ) ; given ( java.util.concurrent.locks.Lock . boolean ( anyLong ( ) , any ( java.util.concurrent.TimeUnit .class ) ) ) . willAnswer ( i -> ! firstLocked . get ( ) ) ; LockRegistryLeaderInitiator org.springframework.integration.support.leader.LockRegistryLeaderInitiator = new LockRegistryLeaderInitiator ( org.springframework.integration.support.leader.LockRegistry , new DefaultCandidate ( ) ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setHeartBeatMillis ( NUMBER ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setBusyWaitMillis ( NUMBER ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( new org.springframework.integration.support.leader.LockRegistryLeaderInitiatorTests.CountingPublisher ( java.util.concurrent.CountDownLatch , java.util.concurrent.CountDownLatch ) ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . start ( ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . start ( ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; assertThat ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; assertThat ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . stop ( ) ; org.springframework.integration.support.leader.LockRegistryLeaderInitiator . stop ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch , java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this( java.util.concurrent.CountDownLatch , new java.util.concurrent.CountDownLatch ( NUMBER ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.support.leader.Context , java.lang.String java.lang.String ) { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.support.leader.Context , java.lang.String java.lang.String ) { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
