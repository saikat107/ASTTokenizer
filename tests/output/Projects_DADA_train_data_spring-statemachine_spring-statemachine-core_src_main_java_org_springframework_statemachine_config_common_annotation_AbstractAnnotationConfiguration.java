<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.statemachine.config.common.annotation.AnnotationMetadata ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.statemachine.config.common.annotation.AnnotationMetadata . getAnnotationAttributes ( EnableAnnotationConfiguration .class . java.lang.String ( ) ) ; AnnotationAttributes org.springframework.statemachine.config.common.annotation.AnnotationAttributes = AnnotationAttributes . fromMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; if( org.springframework.statemachine.config.common.annotation.AnnotationAttributes == null ) { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( org.springframework.statemachine.config.common.annotation.AnnotationMetadata . getClassName ( ) , java.lang.ClassLoader ) ; for( java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ; java.lang.Class<> != null ; java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ) { EnableAnnotationConfiguration org.springframework.statemachine.config.common.annotation.EnableAnnotationConfiguration = AnnotationUtils . findAnnotation ( java.lang.Class<> , EnableAnnotationConfiguration .class ) ; if( org.springframework.statemachine.config.common.annotation.EnableAnnotationConfiguration == null ) { continue; } java.util.Map<java.lang.String,java.lang.Object> = AnnotationUtils . getAnnotationAttributes ( org.springframework.statemachine.config.common.annotation.EnableAnnotationConfiguration ) ; org.springframework.statemachine.config.common.annotation.AnnotationAttributes = AnnotationAttributes . fromMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; } } org.springframework.statemachine.config.common.annotation.AnnotationAttributes = org.springframework.statemachine.config.common.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> @ Autowired ( required = false ) public void void ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) throws java.lang.Exception { this . java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> = java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ; void ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.config.common.annotation.AnnotationAttributes org.springframework.statemachine.config.common.annotation.AnnotationAttributes ( ) { return org.springframework.statemachine.config.common.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ( ) { return java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> < AnnotationConfigurer < O , B > > java.util.List<org.springframework.statemachine.config.common.annotation.AnnotationConfigurer<O,B>> ) throws java.lang.Exception ;  <METHOD_END>
