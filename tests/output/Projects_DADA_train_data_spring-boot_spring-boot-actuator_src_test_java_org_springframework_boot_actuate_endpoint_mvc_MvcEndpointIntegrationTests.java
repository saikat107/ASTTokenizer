<METHOD_START> @ After public void void ( ) { TestSecurityContextHolder . clearContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSecurityContextHolder . getContext ( ) . setAuthentication ( new TestingAuthenticationToken ( STRING , STRING , STRING ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( content ( ) . string ( startsWith ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SpringHateoasConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SpringDataRestConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.DefaultConfiguration .class ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSecurityContextHolder . getContext ( ) . setAuthentication ( new TestingAuthenticationToken ( STRING , STRING , STRING ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext , STRING ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext , STRING ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSecurityContextHolder . getContext ( ) . setAuthentication ( new TestingAuthenticationToken ( STRING , STRING , STRING ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext , STRING ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isForbidden ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestSecurityContextHolder . getContext ( ) . setAuthentication ( new TestingAuthenticationToken ( STRING , STRING , STRING ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext , STRING ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext , STRING , STRING ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpointIntegrationTests.SecureConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext , STRING ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { TestSecurityContextHolder . getContext ( ) . setAuthentication ( new TestingAuthenticationToken ( STRING , STRING , STRING ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( java.lang.Class<> ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext , STRING ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( content ( ) . string ( startsWith ( STRING + java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) { return org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc ( ) { return org.springframework.boot.actuate.endpoint.mvc.MockMvc ( springSecurity ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc ( MockMvcConfigurer ... org.springframework.boot.actuate.endpoint.mvc.MockMvcConfigurer[] ) { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . refresh ( ) ; DefaultMockMvcBuilder org.springframework.boot.actuate.endpoint.mvc.DefaultMockMvcBuilder = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext ) ; for ( MockMvcConfigurer org.springframework.boot.actuate.endpoint.mvc.MockMvcConfigurer : org.springframework.boot.actuate.endpoint.mvc.MockMvcConfigurer[] ) { org.springframework.boot.actuate.endpoint.mvc.DefaultMockMvcBuilder . apply ( org.springframework.boot.actuate.endpoint.mvc.MockMvcConfigurer ) ; } return org.springframework.boot.actuate.endpoint.mvc.DefaultMockMvcBuilder . build ( ) ; }  <METHOD_END>
