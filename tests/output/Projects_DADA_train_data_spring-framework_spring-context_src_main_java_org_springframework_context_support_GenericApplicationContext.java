<METHOD_START> public void ( ) { this . org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; }  <METHOD_END>
<METHOD_START> public void ( DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory ) { Assert . notNull ( org.springframework.context.support.DefaultListableBeanFactory , STRING ) ; this . org.springframework.context.support.DefaultListableBeanFactory = org.springframework.context.support.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> public void ( ApplicationContext org.springframework.context.support.ApplicationContext ) { this(); void ( org.springframework.context.support.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public void ( DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory , ApplicationContext org.springframework.context.support.ApplicationContext ) { this( org.springframework.context.support.DefaultListableBeanFactory ); void ( org.springframework.context.support.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.context.support.ApplicationContext ) { super. setParent ( org.springframework.context.support.ApplicationContext ) ; this . org.springframework.context.support.DefaultListableBeanFactory . setParentBeanFactory ( getInternalParentBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { super. setId ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.context.support.DefaultListableBeanFactory . setAllowBeanDefinitionOverriding ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.context.support.DefaultListableBeanFactory . setAllowCircularReferences ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( ResourceLoader org.springframework.context.support.ResourceLoader ) { this . org.springframework.context.support.ResourceLoader = org.springframework.context.support.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.support.Resource org.springframework.context.support.Resource ( java.lang.String java.lang.String ) { if ( this . org.springframework.context.support.ResourceLoader != null ) { return this . org.springframework.context.support.ResourceLoader . getResource ( java.lang.String ) ; } return super. getResource ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.support.Resource [] org.springframework.context.support.Resource[] ( java.lang.String java.lang.String ) throws java.io.IOException { if ( this . org.springframework.context.support.ResourceLoader instanceof ResourcePatternResolver ) { return ( ( ResourcePatternResolver ) this . org.springframework.context.support.ResourceLoader ) . getResources ( java.lang.String ) ; } return super. getResources ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { super. setClassLoader ( java.lang.ClassLoader ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { if ( this . org.springframework.context.support.ResourceLoader != null && ! this . boolean ) { return this . org.springframework.context.support.ResourceLoader . getClassLoader ( ) ; } return super. getClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( ) java.lang.IllegalStateException { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.context.support.DefaultListableBeanFactory . setSerializationId ( getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeansException org.springframework.context.support.BeansException ) { this . org.springframework.context.support.DefaultListableBeanFactory . setSerializationId ( null ) ; super. cancelRefresh ( org.springframework.context.support.BeansException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( ) { this . org.springframework.context.support.DefaultListableBeanFactory . setSerializationId ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.context.support.ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory ( ) { return this . org.springframework.context.support.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> public final org.springframework.context.support.DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory ( ) { return this . org.springframework.context.support.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.support.AutowireCapableBeanFactory org.springframework.context.support.AutowireCapableBeanFactory ( ) java.lang.IllegalStateException { assertBeanFactoryActive ( ) ; return this . org.springframework.context.support.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , BeanDefinition org.springframework.context.support.BeanDefinition )			throws org.springframework.context.support.BeanDefinitionStoreException { this . org.springframework.context.support.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.context.support.BeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.context.support.NoSuchBeanDefinitionException { this . org.springframework.context.support.DefaultListableBeanFactory . removeBeanDefinition ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.support.BeanDefinition org.springframework.context.support.BeanDefinition ( java.lang.String java.lang.String ) throws org.springframework.context.support.NoSuchBeanDefinitionException { return this . org.springframework.context.support.DefaultListableBeanFactory . getBeanDefinition ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return this . org.springframework.context.support.DefaultListableBeanFactory . isBeanNameInUse ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.context.support.DefaultListableBeanFactory . registerAlias ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.context.support.DefaultListableBeanFactory . removeAlias ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return this . org.springframework.context.support.DefaultListableBeanFactory . isAlias ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public final < T > void void ( java.lang.Class<T> < T > java.lang.Class<T> , BeanDefinitionCustomizer ... org.springframework.context.support.BeanDefinitionCustomizer[] ) { void ( null , java.lang.Class<T> , null , org.springframework.context.support.BeanDefinitionCustomizer[] ) ; }  <METHOD_END>
<METHOD_START> public final < T > void void ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , BeanDefinitionCustomizer ... org.springframework.context.support.BeanDefinitionCustomizer[] ) { void ( java.lang.String , java.lang.Class<T> , null , org.springframework.context.support.BeanDefinitionCustomizer[] ) ; }  <METHOD_END>
<METHOD_START> public final < T > void void ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.function.Supplier<T> < T > java.util.function.Supplier<T> , BeanDefinitionCustomizer ... org.springframework.context.support.BeanDefinitionCustomizer[] ) { void ( null , java.lang.Class<T> , java.util.function.Supplier<T> , org.springframework.context.support.BeanDefinitionCustomizer[] ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.util.function.Supplier<T> < T > java.util.function.Supplier<T> , BeanDefinitionCustomizer ... org.springframework.context.support.BeanDefinitionCustomizer[] ) { Assert . isTrue ( java.lang.String != null || java.lang.Class<T> != null , STRING ) ; java.lang.String java.lang.String = ( java.lang.String != null ? java.lang.String : java.lang.Class<T> . java.lang.String ( ) ) ; BeanDefinition org.springframework.context.support.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( java.lang.Class<T> , java.util.function.Supplier<T> ) . applyCustomizers ( org.springframework.context.support.BeanDefinitionCustomizer[] ) . getRawBeanDefinition ( ) ; void ( java.lang.String , org.springframework.context.support.BeanDefinition ) ; }  <METHOD_END>
