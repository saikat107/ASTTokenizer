<METHOD_START> protected org.springframework.data.gemfire.PartitionResolver org.springframework.data.gemfire.PartitionResolver ( final java.lang.String java.lang.String ) { PartitionResolver org.springframework.data.gemfire.PartitionResolver = mock ( PartitionResolver .class ) ; when ( org.springframework.data.gemfire.PartitionResolver . getName ( ) ) . thenReturn ( java.lang.String ) ; return org.springframework.data.gemfire.PartitionResolver ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartitionAttributesFactoryBean org.springframework.data.gemfire.PartitionAttributesFactoryBean = new PartitionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setColocatedWith ( STRING ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setLocalMaxMemory ( NUMBER ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setPartitionResolver ( org.springframework.data.gemfire.PartitionResolver ( STRING ) ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setRecoveryDelay ( NUMBER ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setRedundantCopies ( NUMBER ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setStartupRecoveryDelay ( NUMBER ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setTotalMaxMemory ( NUMBER ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setTotalNumBuckets ( NUMBER ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . afterPropertiesSet ( ) ; PartitionAttributes org.springframework.data.gemfire.PartitionAttributes = org.springframework.data.gemfire.PartitionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.PartitionAttributes ) ; assertEquals ( STRING , org.springframework.data.gemfire.PartitionAttributes . getColocatedWith ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getLocalMaxMemory ( ) ) ; assertNotNull ( org.springframework.data.gemfire.PartitionAttributes . getPartitionResolver ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.PartitionAttributes . getPartitionResolver ( ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getStartupRecoveryDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalMaxMemory ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.PartitionAttributes . getTotalNumBuckets ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { PartitionAttributesFactoryBean org.springframework.data.gemfire.PartitionAttributesFactoryBean = new PartitionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setRedundantCopies ( NUMBER ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { PartitionAttributesFactoryBean org.springframework.data.gemfire.PartitionAttributesFactoryBean = new PartitionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . setRedundantCopies ( - NUMBER ) ; org.springframework.data.gemfire.PartitionAttributesFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
