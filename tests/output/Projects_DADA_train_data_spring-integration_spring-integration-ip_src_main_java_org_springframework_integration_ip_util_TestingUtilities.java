<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public static void void ( AbstractServerConnectionFactory org.springframework.integration.ip.util.AbstractServerConnectionFactory , java.lang.Long java.lang.Long )		throws java.lang.IllegalStateException { if ( java.lang.Long == null ) { java.lang.Long = NUMBER ; } else { java.lang.Long = java.lang.Long / NUMBER ; } int int = NUMBER ; while ( ! org.springframework.integration.ip.util.AbstractServerConnectionFactory . isListening ( ) ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } if ( int ++ > java.lang.Long ) { throw new java.lang.IllegalStateException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( UnicastReceivingChannelAdapter org.springframework.integration.ip.util.UnicastReceivingChannelAdapter , java.lang.Long java.lang.Long )		throws java.lang.IllegalStateException { if ( java.lang.Long == null ) { java.lang.Long = NUMBER ; } else { java.lang.Long = java.lang.Long / NUMBER ; } int int = NUMBER ; while ( ! org.springframework.integration.ip.util.UnicastReceivingChannelAdapter . isListening ( ) ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } if ( int ++ > java.lang.Long ) { throw new java.lang.IllegalStateException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( AbstractServerConnectionFactory org.springframework.integration.ip.util.AbstractServerConnectionFactory , java.lang.Long java.lang.Long )			throws java.lang.IllegalStateException { if ( java.lang.Long == null ) { java.lang.Long = NUMBER ; } else { java.lang.Long = java.lang.Long / NUMBER ; } int int = NUMBER ; while ( org.springframework.integration.ip.util.AbstractServerConnectionFactory . isListening ( ) ) { try { java.lang.Thread . void ( java.lang.Long ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } if ( int ++ > NUMBER ) { throw new java.lang.IllegalStateException ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( AbstractConnectionFactory org.springframework.integration.ip.util.AbstractConnectionFactory , int int )			throws java.lang.Exception { int int = NUMBER ; while ( int < NUMBER ) { if ( org.springframework.integration.ip.util.AbstractConnectionFactory . getOpenConnectionIds ( ) . size ( ) == int ) { return; } java.lang.Thread . void ( NUMBER ) ; int += NUMBER ; } throw new java.lang.IllegalStateException ( STRING + org.springframework.integration.ip.util.AbstractConnectionFactory . getOpenConnectionIds ( ) . size ( ) + STRING + int ) ; }  <METHOD_END>
