<METHOD_START> protected void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , RequestedContentTypeResolver org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver ) { super( org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver ); Assert . notEmpty ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , STRING ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> = java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> ; }  <METHOD_END>
<METHOD_START> protected void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , RequestedContentTypeResolver org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); Assert . notEmpty ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , STRING ) ; this . java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> = java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> ( ) { return this . java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.ResolvableType . resolve ( ) ; ReactiveAdapter org.springframework.web.reactive.result.method.annotation.ReactiveAdapter = getAdapterRegistry ( ) . getAdapter ( java.lang.Class<> , java.lang.Object ) ; Publisher < ? > org.springframework.web.reactive.result.method.annotation.Publisher<?> ; ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType ; if ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter != null ) { org.springframework.web.reactive.result.method.annotation.Publisher<?> = org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . toPublisher ( java.lang.Object ) ; org.springframework.web.reactive.result.method.annotation.ResolvableType = org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . isNoValue ( ) ? ResolvableType . forClass ( java.lang.Void .class ) : org.springframework.web.reactive.result.method.annotation.ResolvableType . getGeneric ( NUMBER ) ; } else { org.springframework.web.reactive.result.method.annotation.Publisher<?> = Mono . justOrEmpty ( java.lang.Object ) ; org.springframework.web.reactive.result.method.annotation.ResolvableType = ( java.lang.Class<> == null && java.lang.Object != null ? ResolvableType . forInstance ( java.lang.Object ) : org.springframework.web.reactive.result.method.annotation.ResolvableType ) ; } if ( void .class == org.springframework.web.reactive.result.method.annotation.ResolvableType . getRawClass ( ) || java.lang.Void .class == org.springframework.web.reactive.result.method.annotation.ResolvableType . getRawClass ( ) ) { return Mono . from ( ( Publisher < java.lang.Void > ) org.springframework.web.reactive.result.method.annotation.Publisher<> ) ; } ServerHttpRequest org.springframework.web.reactive.result.method.annotation.ServerHttpRequest = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequest ( ) ; ServerHttpResponse org.springframework.web.reactive.result.method.annotation.ServerHttpResponse = org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getResponse ( ) ; MediaType org.springframework.web.reactive.result.method.annotation.MediaType = selectMediaType ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , ( ) getProducibleMediaTypes ( elementType ) ) ; if ( org.springframework.web.reactive.result.method.annotation.MediaType != null ) { for ( HttpMessageWriter < ? > org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?> : java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> ( ) ) { if ( org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<> . canWrite ( org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.MediaType ) ) { return org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<> . write ( ( Publisher ) org.springframework.web.reactive.result.method.annotation.Publisher<> , org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.MediaType , org.springframework.web.reactive.result.method.annotation.ServerHttpRequest , org.springframework.web.reactive.result.method.annotation.ServerHttpResponse , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; } } } else { if ( java.util.List<org.springframework.web.reactive.result.method.annotation.MediaType> ( org.springframework.web.reactive.result.method.annotation.ResolvableType ) . isEmpty ( ) ) { return Mono . error ( new java.lang.IllegalStateException ( STRING + org.springframework.web.reactive.result.method.annotation.ResolvableType ) ) ; } } return Mono . error ( new NotAcceptableStatusException ( java.util.List<org.springframework.web.reactive.result.method.annotation.MediaType> ( org.springframework.web.reactive.result.method.annotation.ResolvableType ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.result.method.annotation.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.method.annotation.MediaType> ( ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType ) { return java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> ( ) . stream ( ) . filter ( converter -> converter . canWrite ( elementType , null ) ) . flatMap ( converter -> converter . getWritableMediaTypes ( ) . stream ( ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
