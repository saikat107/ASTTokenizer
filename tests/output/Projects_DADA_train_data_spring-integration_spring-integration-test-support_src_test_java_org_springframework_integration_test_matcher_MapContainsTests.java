<METHOD_START> @ Before public void void ( ) { java.util.HashMap<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , hasKey ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , not ( hasKey ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , hasEntry ( java.lang.String , java.lang.String ) ) ; assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , hasEntry ( java.lang.String , java.lang.Integer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , not ( hasEntry ( STRING , java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , hasEntry ( java.lang.String , is ( instanceOf ( java.lang.String .class ) ) ) ) ; assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , hasEntry ( java.lang.String , notNullValue ( ) ) ) ; assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , hasEntry ( java.lang.String , is ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , not ( hasEntry ( java.lang.String , is ( instanceOf ( java.lang.Integer .class ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> , hasEntry ( STRING , STRING ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> , not ( hasEntry ( java.lang.String , is ( STRING ) ) ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> , hasAllEntries ( java.util.Map<java.lang.String,java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , is ( java.lang.Integer ) ) ; assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , hasAllEntries ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , not ( nullValue ( ) ) ) ; assertThat ( java.util.HashMap<java.lang.String,java.lang.Object> , not ( hasAllEntries ( java.util.Map<java.lang.String,java.lang.Object> ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
