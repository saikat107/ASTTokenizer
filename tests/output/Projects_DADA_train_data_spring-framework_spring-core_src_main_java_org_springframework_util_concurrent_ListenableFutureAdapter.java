<METHOD_START> protected void ( ListenableFuture < S > org.springframework.util.concurrent.ListenableFuture<S> ) { super( org.springframework.util.concurrent.ListenableFuture<S> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final ListenableFutureCallback < ? super T > org.springframework.util.concurrent.ListenableFutureCallback<? super T> ) { void ( org.springframework.util.concurrent.ListenableFutureCallback<> , org.springframework.util.concurrent.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final SuccessCallback < ? super T > org.springframework.util.concurrent.SuccessCallback<? super T> , final FailureCallback org.springframework.util.concurrent.FailureCallback ) { ListenableFuture < S > org.springframework.util.concurrent.ListenableFuture<S> = ( ListenableFuture < S > ) getAdaptee ( ) ; org.springframework.util.concurrent.ListenableFuture<S> . addCallback ( new ListenableFutureCallback < S > ( ) { @ java.lang.Override public void void ( S S ) { T T ; try { T = adaptInternal ( S ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { java.lang.Throwable java.lang.Throwable = java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ; void ( java.lang.Throwable != null ? java.lang.Throwable : java.util.concurrent.ExecutionException ) ; return; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; return; } org.springframework.util.concurrent.SuccessCallback<> . onSuccess ( T ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.util.concurrent.FailureCallback . onFailure ( java.lang.Throwable ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( S S ) { T T ; try { T = adaptInternal ( S ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { java.lang.Throwable java.lang.Throwable = java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ; void ( java.lang.Throwable != null ? java.lang.Throwable : java.util.concurrent.ExecutionException ) ; return; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; return; } org.springframework.util.concurrent.SuccessCallback<> . onSuccess ( T ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.util.concurrent.FailureCallback . onFailure ( java.lang.Throwable ) ; }  <METHOD_END>
