<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . getIdProperty ( ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.solr.repository.support.SolrPersistentProperty ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentProperty . getFieldName ( ) ) . thenReturn ( STRING ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrOperations . getConverter ( ) ) . thenReturn ( org.springframework.data.solr.repository.support.SolrConverter ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrConverter . getMappingContext ( ) ) . thenReturn ( org.springframework.data.solr.repository.support.MappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; SolrRepositoryFactory org.springframework.data.solr.repository.support.SolrRepositoryFactory = new SolrRepositoryFactory ( org.springframework.data.solr.repository.support.SolrOperations ) ; SolrEntityInformation < ProductBean , java.lang.String > org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> = org.springframework.data.solr.repository.support.SolrRepositoryFactory . getEntityInformation ( ProductBean .class ) ; Assert . assertTrue ( org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> instanceof MappingSolrEntityInformation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; SolrRepositoryFactory org.springframework.data.solr.repository.support.SolrRepositoryFactory = new SolrRepositoryFactory ( org.springframework.data.solr.repository.support.SolrOperations ) ; org.springframework.data.solr.repository.support.SolrRepositoryFactoryTests.ProductRepository org.springframework.data.solr.repository.support.SolrRepositoryFactoryTests.ProductRepository = org.springframework.data.solr.repository.support.SolrRepositoryFactory . getRepository ( org.springframework.data.solr.repository.support.SolrRepositoryFactoryTests.ProductRepository .class ) ; Assert . assertNotNull ( org.springframework.data.solr.repository.support.SolrRepositoryFactoryTests.ProductRepository ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SolrTemplate org.springframework.data.solr.repository.support.SolrTemplate = new SolrTemplate ( new HttpSolrClient ( STRING ) , null ) ; org.springframework.data.solr.repository.support.SolrTemplate . afterPropertiesSet ( ) ; new SolrRepositoryFactory ( org.springframework.data.solr.repository.support.SolrTemplate ) . getRepository ( org.springframework.data.solr.repository.support.SolrRepositoryFactoryTests.UnmanagedEntityRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( ) { Mockito . when ( org.springframework.data.solr.repository.support.MappingContext . getPersistentEntity ( ProductBean .class ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . getType ( ) ) . thenReturn ( ProductBean .class ) ; }  <METHOD_END>
