<METHOD_START> @ Test public void void ( ) java.lang.Exception { StompHeaderAccessor org.springframework.integration.websocket.outbound.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SEND ) ; org.springframework.integration.websocket.outbound.StompHeaderAccessor . setMessageId ( STRING ) ; org.springframework.integration.websocket.outbound.StompHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.integration.websocket.outbound.StompHeaderAccessor . setDestination ( STRING ) ; java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.websocket.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setHeaders ( org.springframework.integration.websocket.outbound.StompHeaderAccessor ) . build ( ) ; this . org.springframework.integration.websocket.outbound.MessageHandler . handleMessage ( org.springframework.integration.websocket.outbound.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.websocket.outbound.Message<?> = this . org.springframework.integration.websocket.outbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.websocket.outbound.Message<> ) ; StompHeaderAccessor org.springframework.integration.websocket.outbound.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.integration.websocket.outbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.websocket.outbound.StompHeaderAccessor . getMessageId ( ) ) ; assertEquals ( STRING , org.springframework.integration.websocket.outbound.StompHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( STRING , org.springframework.integration.websocket.outbound.StompHeaderAccessor . getDestination ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.websocket.outbound.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( byte [] .class ) ) ; assertArrayEquals ( ( byte [] ) java.lang.Object , java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.outbound.TomcatWebSocketTestServer org.springframework.integration.websocket.outbound.TomcatWebSocketTestServer ( ) { return new TomcatWebSocketTestServer ( TestServerConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.outbound.WebSocketClient org.springframework.integration.websocket.outbound.WebSocketClient ( ) { return new SockJsClient ( java.util.Collections .< Transport > java.util.List<org.springframework.integration.websocket.outbound.Transport> ( new WebSocketTransport ( new StandardWebSocketClient ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer ( ) { ClientWebSocketContainer org.springframework.integration.websocket.outbound.ClientWebSocketContainer = new ClientWebSocketContainer ( org.springframework.integration.websocket.outbound.WebSocketClient ( ) , org.springframework.integration.websocket.outbound.TomcatWebSocketTestServer ( ) . getWsBaseUrl ( ) + STRING ) ; org.springframework.integration.websocket.outbound.ClientWebSocketContainer . setAutoStartup ( true ) ; return org.springframework.integration.websocket.outbound.ClientWebSocketContainer ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.outbound.SubProtocolHandler org.springframework.integration.websocket.outbound.SubProtocolHandler ( ) { return new StompSubProtocolHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.outbound.MessageHandler org.springframework.integration.websocket.outbound.MessageHandler ( ) { return new WebSocketOutboundMessageHandler ( org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer ( ) , new SubProtocolHandlerRegistry ( org.springframework.integration.websocket.outbound.SubProtocolHandler ( ) ) ) ; }  <METHOD_END>
