<METHOD_START> void ( JtaProperties org.springframework.boot.autoconfigure.transaction.jta.JtaProperties , ObjectProvider < TransactionManagerCustomizers > org.springframework.boot.autoconfigure.transaction.jta.ObjectProvider<org.springframework.boot.autoconfigure.transaction.jta.TransactionManagerCustomizers> ) { this . org.springframework.boot.autoconfigure.transaction.jta.JtaProperties = org.springframework.boot.autoconfigure.transaction.jta.JtaProperties ; this . org.springframework.boot.autoconfigure.transaction.jta.TransactionManagerCustomizers = org.springframework.boot.autoconfigure.transaction.jta.ObjectProvider<org.springframework.boot.autoconfigure.transaction.jta.TransactionManagerCustomizers> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( initMethod = STRING , destroyMethod = STRING ) @ ConditionalOnMissingBean ( UserTransactionService .class ) public org.springframework.boot.autoconfigure.transaction.jta.UserTransactionServiceImp org.springframework.boot.autoconfigure.transaction.jta.UserTransactionServiceImp ( AtomikosProperties org.springframework.boot.autoconfigure.transaction.jta.AtomikosProperties ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; if ( StringUtils . hasText ( this . org.springframework.boot.autoconfigure.transaction.jta.JtaProperties . getTransactionManagerId ( ) ) ) { java.util.Properties . java.lang.Object ( STRING , this . org.springframework.boot.autoconfigure.transaction.jta.JtaProperties . getTransactionManagerId ( ) ) ; } java.util.Properties . java.lang.Object ( STRING , java.lang.String ( ) ) ; java.util.Properties . void ( org.springframework.boot.autoconfigure.transaction.jta.AtomikosProperties . asProperties ( ) ) ; return new UserTransactionServiceImp ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { if ( StringUtils . hasLength ( this . org.springframework.boot.autoconfigure.transaction.jta.JtaProperties . getLogDir ( ) ) ) { return this . org.springframework.boot.autoconfigure.transaction.jta.JtaProperties . getLogDir ( ) ; } java.io.File java.io.File = new ApplicationHome ( ) . getDir ( ) ; return new java.io.File ( java.io.File , STRING ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( initMethod = STRING , destroyMethod = STRING ) @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.transaction.jta.UserTransactionManager org.springframework.boot.autoconfigure.transaction.jta.UserTransactionManager ( UserTransactionService org.springframework.boot.autoconfigure.transaction.jta.UserTransactionService ) throws java.lang.Exception { UserTransactionManager org.springframework.boot.autoconfigure.transaction.jta.UserTransactionManager = new UserTransactionManager ( ) ; org.springframework.boot.autoconfigure.transaction.jta.UserTransactionManager . setStartupTransactionService ( false ) ; org.springframework.boot.autoconfigure.transaction.jta.UserTransactionManager . setForceShutdown ( true ) ; return org.springframework.boot.autoconfigure.transaction.jta.UserTransactionManager ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( XADataSourceWrapper .class ) public org.springframework.boot.autoconfigure.transaction.jta.AtomikosXADataSourceWrapper org.springframework.boot.autoconfigure.transaction.jta.AtomikosXADataSourceWrapper ( ) { return new AtomikosXADataSourceWrapper ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public static org.springframework.boot.autoconfigure.transaction.jta.AtomikosDependsOnBeanFactoryPostProcessor org.springframework.boot.autoconfigure.transaction.jta.AtomikosDependsOnBeanFactoryPostProcessor ( ) { return new AtomikosDependsOnBeanFactoryPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager ( UserTransaction org.springframework.boot.autoconfigure.transaction.jta.UserTransaction , TransactionManager org.springframework.boot.autoconfigure.transaction.jta.TransactionManager ) { JtaTransactionManager org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager = new JtaTransactionManager ( org.springframework.boot.autoconfigure.transaction.jta.UserTransaction , org.springframework.boot.autoconfigure.transaction.jta.TransactionManager ) ; if ( this . org.springframework.boot.autoconfigure.transaction.jta.TransactionManagerCustomizers != null ) { this . org.springframework.boot.autoconfigure.transaction.jta.TransactionManagerCustomizers . customize ( org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager ) ; } return org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( XAConnectionFactoryWrapper .class ) public org.springframework.boot.autoconfigure.transaction.jta.AtomikosXAConnectionFactoryWrapper org.springframework.boot.autoconfigure.transaction.jta.AtomikosXAConnectionFactoryWrapper ( ) { return new AtomikosXAConnectionFactoryWrapper ( ) ; }  <METHOD_END>
