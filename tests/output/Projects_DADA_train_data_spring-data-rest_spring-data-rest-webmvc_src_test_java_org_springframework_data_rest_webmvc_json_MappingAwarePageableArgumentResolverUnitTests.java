<METHOD_START> @ Before public void void ( ) { org.springframework.data.rest.webmvc.json.MappingAwarePageableArgumentResolver = new MappingAwarePageableArgumentResolver ( org.springframework.data.rest.webmvc.json.JacksonMappingAwareSortTranslator , org.springframework.data.rest.webmvc.json.PageableHandlerMethodArgumentResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Sort org.springframework.data.rest.webmvc.json.Sort = Sort . by ( STRING ) ; Pageable org.springframework.data.rest.webmvc.json.Pageable = PageRequest . of ( NUMBER , NUMBER , Direction . ASC , STRING ) ; when ( org.springframework.data.rest.webmvc.json.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.json.MethodParameter , org.springframework.data.rest.webmvc.json.ModelAndViewContainer , org.springframework.data.rest.webmvc.json.NativeWebRequest , org.springframework.data.rest.webmvc.json.WebDataBinderFactory ) ) . thenReturn ( org.springframework.data.rest.webmvc.json.Pageable ) ; when ( org.springframework.data.rest.webmvc.json.JacksonMappingAwareSortTranslator . translateSort ( org.springframework.data.rest.webmvc.json.Pageable . getSort ( ) , org.springframework.data.rest.webmvc.json.MethodParameter , org.springframework.data.rest.webmvc.json.NativeWebRequest ) ) . thenReturn ( org.springframework.data.rest.webmvc.json.Sort ) ; Pageable org.springframework.data.rest.webmvc.json.Pageable = org.springframework.data.rest.webmvc.json.MappingAwarePageableArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.json.MethodParameter , org.springframework.data.rest.webmvc.json.ModelAndViewContainer , org.springframework.data.rest.webmvc.json.NativeWebRequest , org.springframework.data.rest.webmvc.json.WebDataBinderFactory ) ; assertThat ( org.springframework.data.rest.webmvc.json.Pageable . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.Pageable . getPageNumber ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.Pageable . getSort ( ) ) . isEqualTo ( org.springframework.data.rest.webmvc.json.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Pageable org.springframework.data.rest.webmvc.json.Pageable = PageRequest . of ( NUMBER , NUMBER ) ; when ( org.springframework.data.rest.webmvc.json.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.json.MethodParameter , org.springframework.data.rest.webmvc.json.ModelAndViewContainer , org.springframework.data.rest.webmvc.json.NativeWebRequest , org.springframework.data.rest.webmvc.json.WebDataBinderFactory ) ) . thenReturn ( org.springframework.data.rest.webmvc.json.Pageable ) ; Pageable org.springframework.data.rest.webmvc.json.Pageable = org.springframework.data.rest.webmvc.json.MappingAwarePageableArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.json.MethodParameter , org.springframework.data.rest.webmvc.json.ModelAndViewContainer , org.springframework.data.rest.webmvc.json.NativeWebRequest , org.springframework.data.rest.webmvc.json.WebDataBinderFactory ) ; assertThat ( org.springframework.data.rest.webmvc.json.Pageable . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.Pageable . getPageNumber ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.json.Pageable . getSort ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Pageable org.springframework.data.rest.webmvc.json.Pageable = org.springframework.data.rest.webmvc.json.MappingAwarePageableArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.json.MethodParameter , org.springframework.data.rest.webmvc.json.ModelAndViewContainer , org.springframework.data.rest.webmvc.json.NativeWebRequest , org.springframework.data.rest.webmvc.json.WebDataBinderFactory ) ; assertThat ( org.springframework.data.rest.webmvc.json.Pageable ) . isNull ( ) ; }  <METHOD_END>
