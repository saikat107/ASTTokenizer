<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.feed.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.feed.config.FeedInboundChannelAdapterParserTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.feed.config.SourcePollingChannelAdapter = org.springframework.integration.feed.config.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; FeedEntryMessageSource org.springframework.integration.feed.config.FeedEntryMessageSource = ( FeedEntryMessageSource ) TestUtils . getPropertyValue ( org.springframework.integration.feed.config.SourcePollingChannelAdapter , STRING ) ; assertSame ( org.springframework.integration.feed.config.ClassPathXmlApplicationContext . getBean ( MetadataStore .class ) , TestUtils . getPropertyValue ( org.springframework.integration.feed.config.FeedEntryMessageSource , STRING ) ) ; SyndFeedInput org.springframework.integration.feed.config.SyndFeedInput = TestUtils . getPropertyValue ( org.springframework.integration.feed.config.FeedEntryMessageSource , STRING , SyndFeedInput .class ) ; assertSame ( org.springframework.integration.feed.config.ClassPathXmlApplicationContext . getBean ( SyndFeedInput .class ) , org.springframework.integration.feed.config.SyndFeedInput ) ; assertFalse ( org.springframework.integration.feed.config.SyndFeedInput . isPreserveWireFeed ( ) ) ; org.springframework.integration.feed.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.feed.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.feed.config.FeedInboundChannelAdapterParserTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.feed.config.SourcePollingChannelAdapter = org.springframework.integration.feed.config.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; FeedEntryMessageSource org.springframework.integration.feed.config.FeedEntryMessageSource = ( FeedEntryMessageSource ) TestUtils . getPropertyValue ( org.springframework.integration.feed.config.SourcePollingChannelAdapter , STRING ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.feed.config.FeedEntryMessageSource , STRING ) ) ; org.springframework.integration.feed.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.CountDownLatch = spy ( new java.util.concurrent.CountDownLatch ( NUMBER ) ) ; ClassPathXmlApplicationContext org.springframework.integration.feed.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.feed.config.FeedInboundChannelAdapterParserTests> ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; verify ( java.util.concurrent.CountDownLatch , times ( NUMBER ) ) . countDown ( ) ; org.springframework.integration.feed.config.ClassPathXmlApplicationContext . close ( ) ; java.util.concurrent.CountDownLatch = spy ( new java.util.concurrent.CountDownLatch ( NUMBER ) ) ; org.springframework.integration.feed.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.feed.config.FeedInboundChannelAdapterParserTests> ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; verify ( java.util.concurrent.CountDownLatch , times ( NUMBER ) ) . countDown ( ) ; SourcePollingChannelAdapter org.springframework.integration.feed.config.SourcePollingChannelAdapter = org.springframework.integration.feed.config.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.feed.config.SourcePollingChannelAdapter , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.feed.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; MessageHandler org.springframework.integration.feed.config.MessageHandler = spy ( message -> latch . countDown ( ) ) ; ConfigurableApplicationContext org.springframework.integration.feed.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.feed.config.FeedInboundChannelAdapterParserTests> ( ) ) ; DirectChannel org.springframework.integration.feed.config.DirectChannel = org.springframework.integration.feed.config.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; org.springframework.integration.feed.config.DirectChannel . subscribe ( org.springframework.integration.feed.config.MessageHandler ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; verify ( org.springframework.integration.feed.config.MessageHandler , atLeast ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.feed.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.feed.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.feed.config.FeedInboundChannelAdapterParserTests> ( ) ) ; MessageChannel org.springframework.integration.feed.config.MessageChannel = org.springframework.integration.feed.config.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; SourcePollingChannelAdapter org.springframework.integration.feed.config.SourcePollingChannelAdapter = org.springframework.integration.feed.config.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; assertSame ( org.springframework.integration.feed.config.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.feed.config.SourcePollingChannelAdapter , STRING ) ) ; org.springframework.integration.feed.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.feed.config.Message<?> ) { MessageHistory org.springframework.integration.feed.config.MessageHistory = MessageHistory . read ( org.springframework.integration.feed.config.Message<> ) ; assertTrue ( org.springframework.integration.feed.config.MessageHistory . size ( ) == NUMBER ) ; java.util.Properties java.util.Properties = org.springframework.integration.feed.config.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; java.util.Properties = org.springframework.integration.feed.config.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; java.util.Properties = org.springframework.integration.feed.config.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( SyndEntry org.springframework.integration.feed.config.SyndEntry ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
