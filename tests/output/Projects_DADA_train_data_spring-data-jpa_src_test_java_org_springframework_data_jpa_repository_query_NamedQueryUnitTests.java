<METHOD_START> @ Before @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.reflect.Method = org.springframework.data.jpa.repository.query.NamedQueryUnitTests.SampleRepository .class . java.lang.reflect.Method ( STRING , Pageable .class ) ; when ( org.springframework.data.jpa.repository.query.RepositoryMetadata . getDomainType ( ) ) . thenReturn ( ( java.lang.Class ) java.lang.String .class ) ; when ( org.springframework.data.jpa.repository.query.RepositoryMetadata . getReturnedDomainClass ( java.lang.reflect.Method ) ) . thenReturn ( ( java.lang.Class ) java.lang.String .class ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . getMetamodel ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Metamodel ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . getEntityManagerFactory ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.EntityManagerFactory ) ; when ( org.springframework.data.jpa.repository.query.EntityManagerFactory . createEntityManager ( ) ) . thenReturn ( org.springframework.data.jpa.repository.query.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = QueryCreationException .class ) public void void ( ) { when ( org.springframework.data.jpa.repository.query.QueryExtractor . canExtractQuery ( ) ) . thenReturn ( false ) ; JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = new JpaQueryMethod ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.RepositoryMetadata , org.springframework.data.jpa.repository.query.ProjectionFactory , org.springframework.data.jpa.repository.query.QueryExtractor ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . createNamedQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getNamedCountQueryName ( ) ) ) . thenThrow ( new java.lang.IllegalArgumentException ( ) ) ; NamedQuery . lookupFrom ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.jpa.repository.query.QueryExtractor . canExtractQuery ( ) ) . thenReturn ( false ) ; JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = new JpaQueryMethod ( java.lang.reflect.Method , org.springframework.data.jpa.repository.query.RepositoryMetadata , org.springframework.data.jpa.repository.query.ProjectionFactory , org.springframework.data.jpa.repository.query.QueryExtractor ) ; TypedQuery < java.lang.Long > org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> = mock ( TypedQuery .class ) ; when ( org.springframework.data.jpa.repository.query.EntityManager . createNamedQuery ( eq ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getNamedCountQueryName ( ) ) , eq ( java.lang.Long .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ) ; NamedQuery org.springframework.data.jpa.repository.query.NamedQuery = ( NamedQuery ) NamedQuery . lookupFrom ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; org.springframework.data.jpa.repository.query.NamedQuery . doCreateCountQuery ( new java.lang.Object [ NUMBER ] ) ; verify ( org.springframework.data.jpa.repository.query.EntityManager , times ( NUMBER ) ) . createNamedQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getNamedCountQueryName ( ) , java.lang.Long .class ) ; verify ( org.springframework.data.jpa.repository.query.EntityManager , never ( ) ) . createQuery ( any ( java.lang.String .class ) , eq ( java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.jpa.repository.query.Page<java.lang.String> < java.lang.String > org.springframework.data.jpa.repository.query.Page<java.lang.String> ( Pageable org.springframework.data.jpa.repository.query.Pageable );  <METHOD_END>
