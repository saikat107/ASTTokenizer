<METHOD_START> @ Before public void void ( ) java.lang.InstantiationException , java.lang.IllegalAccessException { this . org.springframework.data.keyvalue.core.KeyValueTemplate = new KeyValueTemplate ( new MapKeyValueAdapter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . org.springframework.data.keyvalue.core.KeyValueTemplate . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( null , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DuplicateKeyException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Bar ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId = new org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId ( ) ; org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId = org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId , sameInstance ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId = new org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId ( ) ; org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId . java.lang.String = STRING ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId .class ) , is ( java.util.Optional . java.util.Optional<org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId> ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , is ( java.util.Optional . java.util.Optional<org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo> ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Bar .class ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; java.util.List<org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo> < org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo > java.util.List<org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo> = ( java.util.List<org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo> < org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo > ) org.springframework.data.keyvalue.core.KeyValueTemplate . find ( org.springframework.data.keyvalue.core.KeyValueQuery<java.lang.String> , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) ; assertThat ( java.util.List<org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo> . org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ( NUMBER ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findInRange ( NUMBER , NUMBER , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , emptyIterable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . update ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , is ( java.util.Optional . java.util.Optional<org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo> ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . update ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Bar ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , is ( java.util.Optional . java.util.Optional<org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo> ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . count ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo .class ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateTests.SubclassOfAliasedType ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findAll ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias> ( ) ) , containsInAnyOrder ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias , org.springframework.data.keyvalue.core.KeyValueTemplateTests.SubclassOfAliasedType ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) ) { return false ; } org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo = ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Foo . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.keyvalue.core.KeyValueTemplateTests.Bar ) ) { return false ; } org.springframework.data.keyvalue.core.KeyValueTemplateTests.Bar org.springframework.data.keyvalue.core.KeyValueTemplateTests.Bar = ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.Bar ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateTests.Bar . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; int = int * int + ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId ) ) { return false ; } org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId = ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId ) java.lang.Object ; if ( ! ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId . java.lang.String ) ) { return false ; } if ( ! ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithStringId . java.lang.String ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; int = int * int + ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias ) ) { return false ; } org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias = ( org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias ) java.lang.Object ; if ( ! ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias . java.lang.String ) ) { return false ; } if ( ! ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateTests.ClassWithTypeAlias . java.lang.String ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
