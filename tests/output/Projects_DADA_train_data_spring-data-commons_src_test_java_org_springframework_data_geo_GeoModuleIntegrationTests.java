<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.geo.ObjectMapper = new ObjectMapper ( ) ; this . org.springframework.data.geo.ObjectMapper . registerModule ( new GeoModule ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , Metrics . KILOMETERS ) ; assertThat ( org.springframework.data.geo.ObjectMapper . readValue ( java.lang.String , Distance .class ) ) . isEqualTo ( org.springframework.data.geo.Distance ) ; assertThat ( org.springframework.data.geo.ObjectMapper . writeValueAsString ( org.springframework.data.geo.Distance ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Point org.springframework.data.geo.Point = new Point ( NUMBER , NUMBER ) ; assertThat ( org.springframework.data.geo.ObjectMapper . readValue ( java.lang.String , Point .class ) ) . isEqualTo ( org.springframework.data.geo.Point ) ; assertThat ( org.springframework.data.geo.ObjectMapper . writeValueAsString ( org.springframework.data.geo.Point ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Circle org.springframework.data.geo.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) ) ; assertThat ( org.springframework.data.geo.ObjectMapper . readValue ( java.lang.String , Circle .class ) ) . isEqualTo ( org.springframework.data.geo.Circle ) ; assertThat ( org.springframework.data.geo.ObjectMapper . writeValueAsString ( org.springframework.data.geo.Circle ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Box org.springframework.data.geo.Box = new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.geo.ObjectMapper . readValue ( java.lang.String , Box .class ) ) . isEqualTo ( org.springframework.data.geo.Box ) ; assertThat ( org.springframework.data.geo.ObjectMapper . writeValueAsString ( org.springframework.data.geo.Box ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Polygon org.springframework.data.geo.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.geo.ObjectMapper . readValue ( java.lang.String , Polygon .class ) ) . isEqualTo ( org.springframework.data.geo.Polygon ) ; assertThat ( org.springframework.data.geo.ObjectMapper . writeValueAsString ( org.springframework.data.geo.Polygon ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
