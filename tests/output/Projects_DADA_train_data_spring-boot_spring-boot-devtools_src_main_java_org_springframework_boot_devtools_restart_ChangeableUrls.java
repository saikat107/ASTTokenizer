<METHOD_START> private void ( java.net.URL ... java.net.URL[] ) { DevToolsSettings org.springframework.boot.devtools.restart.DevToolsSettings = DevToolsSettings . get ( ) ; java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = new java.util.ArrayList<java.net.URL> <> ( java.net.URL[] . int ) ; for ( java.net.URL java.net.URL : java.net.URL[] ) { if ( ( org.springframework.boot.devtools.restart.DevToolsSettings . isRestartInclude ( java.net.URL ) || boolean ( java.net.URL . java.lang.String ( ) ) ) && ! org.springframework.boot.devtools.restart.DevToolsSettings . isRestartExclude ( java.net.URL ) ) { java.util.List<java.net.URL> . boolean ( java.net.URL ) ; } } if ( org.springframework.boot.devtools.restart.Log . isDebugEnabled ( ) ) { org.springframework.boot.devtools.restart.Log . debug ( STRING + java.util.List<java.net.URL> ) ; } this . java.util.List<java.net.URL> = java.util.Collections . java.util.List<java.net.URL> ( java.util.List<java.net.URL> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) && java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<java.net.URL> < java.net.URL > java.util.Iterator<java.net.URL> ( ) { return this . java.util.List<java.net.URL> . java.util.Iterator<java.net.URL> ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.List<java.net.URL> . int ( ) ; }  <METHOD_END>
<METHOD_START> public java.net.URL [] java.net.URL[] ( ) { return this . java.util.List<java.net.URL> . java.net.URL[] ( new java.net.URL [ this . java.util.List<java.net.URL> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ( ) { return java.util.Collections . java.util.List<java.net.URL> ( this . java.util.List<java.net.URL> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.util.List<java.net.URL> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.devtools.restart.ChangeableUrls org.springframework.boot.devtools.restart.ChangeableUrls ( java.net.URLClassLoader java.net.URLClassLoader ) { java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = new java.util.ArrayList<java.net.URL> <> ( ) ; for ( java.net.URL java.net.URL : java.net.URLClassLoader . java.net.URL[] ( ) ) { java.util.List<java.net.URL> . boolean ( java.net.URL ) ; java.util.List<java.net.URL> . boolean ( java.util.List<java.net.URL> ( java.net.URL ) ) ; } return org.springframework.boot.devtools.restart.ChangeableUrls ( java.util.List<java.net.URL> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ( java.net.URL java.net.URL ) { java.util.jar.JarFile java.util.jar.JarFile = java.util.jar.JarFile ( java.net.URL ) ; if ( java.util.jar.JarFile == null ) { return java.util.Collections .< java.net.URL > java.util.List<java.net.URL> ( ) ; } try { return java.util.List<java.net.URL> ( java.util.jar.JarFile ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.net.URL , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private static java.util.jar.JarFile java.util.jar.JarFile ( java.net.URL java.net.URL ) { try { java.io.File java.io.File = new java.io.File ( java.net.URL . java.net.URI ( ) ) ; if ( java.io.File . boolean ( ) ) { return new java.util.jar.JarFile ( java.io.File ) ; } } catch ( java.lang.Exception java.lang.Exception ) { } return null ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ( java.util.jar.JarFile java.util.jar.JarFile )			throws java.io.IOException { java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.JarFile . java.util.jar.Manifest ( ) ; if ( java.util.jar.Manifest == null ) { return java.util.Collections .< java.net.URL > java.util.List<java.net.URL> ( ) ; } java.lang.String java.lang.String = java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( java.util.jar.Attributes . java.util.jar.Attributes.Name . java.util.jar.Attributes.Name ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return java.util.Collections . java.util.List<java.net.URL> ( ) ; } java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( java.lang.String , STRING ) ; java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = new java.util.ArrayList<java.net.URL> <> ( java.lang.String[] . int ) ; java.io.File java.io.File = new java.io.File ( java.util.jar.JarFile . java.lang.String ( ) ) . java.io.File ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; if ( java.io.File . boolean ( ) ) { java.util.List<java.net.URL> . boolean ( java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ; } else { java.lang.System . java.io.PrintStream . void ( STRING + java.lang.String + STRING + java.util.jar.JarFile . java.lang.String ( ) + STRING + java.io.File + STRING ) ; } } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new java.lang.IllegalStateException ( STRING , java.net.MalformedURLException ) ; } } return java.util.List<java.net.URL> ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.devtools.restart.ChangeableUrls org.springframework.boot.devtools.restart.ChangeableUrls ( java.util.Collection<java.net.URL> < java.net.URL > java.util.Collection<java.net.URL> ) { return org.springframework.boot.devtools.restart.ChangeableUrls ( new java.util.ArrayList<java.net.URL> <> ( java.util.Collection<java.net.URL> ) . java.net.URL[] ( new java.net.URL [ java.util.Collection<java.net.URL> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.devtools.restart.ChangeableUrls org.springframework.boot.devtools.restart.ChangeableUrls ( java.net.URL ... java.net.URL[] ) { return new org.springframework.boot.devtools.restart.ChangeableUrls ( java.net.URL[] ) ; }  <METHOD_END>
