<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.Integer java.lang.Integer = NUMBER ; ResponseEntity < java.lang.Integer > org.springframework.http.ResponseEntity<java.lang.Integer> = ResponseEntity . status ( HttpStatus . OK ) . header ( java.lang.String , java.lang.String , java.lang.String ) . body ( java.lang.Integer ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Integer> ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Integer> . getStatusCode ( ) ) ; assertTrue ( org.springframework.http.ResponseEntity<java.lang.Integer> . getHeaders ( ) . containsKey ( java.lang.String ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.http.ResponseEntity<java.lang.Integer> . getHeaders ( ) . get ( java.lang.String ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( java.lang.String , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( java.lang.Integer , org.springframework.http.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . ok ( ) . build ( ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Void> ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertNull ( org.springframework.http.ResponseEntity<java.lang.Void> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; ResponseEntity < java.lang.Integer > org.springframework.http.ResponseEntity<java.lang.Integer> = ResponseEntity . ok ( java.lang.Integer ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Integer> ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Integer> . getStatusCode ( ) ) ; assertEquals ( java.lang.Integer , org.springframework.http.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . created ( java.net.URI ) . build ( ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Void> ) ; assertEquals ( HttpStatus . CREATED , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertTrue ( org.springframework.http.ResponseEntity<java.lang.Void> . getHeaders ( ) . containsKey ( STRING ) ) ; assertEquals ( java.net.URI . java.lang.String ( ) , org.springframework.http.ResponseEntity<java.lang.Void> . getHeaders ( ) . getFirst ( STRING ) ) ; assertNull ( org.springframework.http.ResponseEntity<java.lang.Void> . getBody ( ) ) ; ResponseEntity . created ( java.net.URI ) . header ( STRING , STRING ) . body ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . accepted ( ) . build ( ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Void> ) ; assertEquals ( HttpStatus . ACCEPTED , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertNull ( org.springframework.http.ResponseEntity<java.lang.Void> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { ResponseEntity < java.lang.String > org.springframework.http.ResponseEntity<java.lang.String> = ResponseEntity . accepted ( ) . build ( ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.String> ) ; assertEquals ( HttpStatus . ACCEPTED , org.springframework.http.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( org.springframework.http.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . noContent ( ) . build ( ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Void> ) ; assertEquals ( HttpStatus . NO_CONTENT , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertNull ( org.springframework.http.ResponseEntity<java.lang.Void> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . badRequest ( ) . build ( ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Void> ) ; assertEquals ( HttpStatus . BAD_REQUEST , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertNull ( org.springframework.http.ResponseEntity<java.lang.Void> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . notFound ( ) . build ( ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Void> ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertNull ( org.springframework.http.ResponseEntity<java.lang.Void> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { ResponseEntity < java.lang.String > org.springframework.http.ResponseEntity<java.lang.String> = ResponseEntity . unprocessableEntity ( ) . body ( STRING ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.String> ) ; assertEquals ( HttpStatus . UNPROCESSABLE_ENTITY , org.springframework.http.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.http.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; long long = NUMBER ; MediaType org.springframework.http.MediaType = MediaType . TEXT_PLAIN ; ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . ok ( ) . allow ( HttpMethod . GET ) . lastModified ( NUMBER ) . location ( java.net.URI ) . contentLength ( long ) . contentType ( org.springframework.http.MediaType ) . build ( ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Void> ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; HttpHeaders org.springframework.http.HttpHeaders = org.springframework.http.ResponseEntity<java.lang.Void> . getHeaders ( ) ; assertEquals ( STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( java.net.URI . java.lang.String ( ) , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( java.lang.String . java.lang.String ( long ) , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( org.springframework.http.MediaType . toString ( ) , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; assertNull ( org.springframework.http.ResponseEntity<java.lang.Void> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . ok ( ) . eTag ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.http.ResponseEntity<java.lang.Void> . getHeaders ( ) . getETag ( ) ) ; org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . ok ( ) . eTag ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.http.ResponseEntity<java.lang.Void> . getHeaders ( ) . getETag ( ) ) ; org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . ok ( ) . eTag ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.http.ResponseEntity<java.lang.Void> . getHeaders ( ) . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.http.HttpHeaders = new HttpHeaders ( ) ; org.springframework.http.HttpHeaders . set ( STRING , STRING ) ; ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . ok ( ) . headers ( org.springframework.http.HttpHeaders ) . build ( ) ; HttpHeaders org.springframework.http.HttpHeaders = org.springframework.http.ResponseEntity<java.lang.Void> . getHeaders ( ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( NUMBER , org.springframework.http.HttpHeaders . size ( ) ) ; assertEquals ( NUMBER , org.springframework.http.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.http.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . ok ( ) . headers ( new HttpHeaders ( ) ) . build ( ) ; ResponseEntity < java.lang.Void > org.springframework.http.ResponseEntity<java.lang.Void> = ResponseEntity . ok ( ) . headers ( null ) . build ( ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertTrue ( org.springframework.http.ResponseEntity<java.lang.Void> . getHeaders ( ) . isEmpty ( ) ) ; assertEquals ( org.springframework.http.ResponseEntity<java.lang.Void> . toString ( ) , org.springframework.http.ResponseEntity<java.lang.Void> . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; ResponseEntity < java.lang.Integer > org.springframework.http.ResponseEntity<java.lang.Integer> = ResponseEntity . status ( HttpStatus . OK ) . cacheControl ( CacheControl . empty ( ) ) . body ( java.lang.Integer ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Integer> ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Integer> . getStatusCode ( ) ) ; assertFalse ( org.springframework.http.ResponseEntity<java.lang.Integer> . getHeaders ( ) . containsKey ( HttpHeaders . CACHE_CONTROL ) ) ; assertEquals ( java.lang.Integer , org.springframework.http.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; ResponseEntity < java.lang.Integer > org.springframework.http.ResponseEntity<java.lang.Integer> = ResponseEntity . status ( HttpStatus . OK ) . cacheControl ( CacheControl . maxAge ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . cachePrivate ( ) . mustRevalidate ( ) . proxyRevalidate ( ) . sMaxAge ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . body ( java.lang.Integer ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Integer> ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Integer> . getStatusCode ( ) ) ; assertTrue ( org.springframework.http.ResponseEntity<java.lang.Integer> . getHeaders ( ) . containsKey ( HttpHeaders . CACHE_CONTROL ) ) ; assertEquals ( java.lang.Integer , org.springframework.http.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; java.lang.String java.lang.String = org.springframework.http.ResponseEntity<java.lang.Integer> . getHeaders ( ) . getCacheControl ( ) ; assertThat ( java.lang.String , Matchers . equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; ResponseEntity < java.lang.Integer > org.springframework.http.ResponseEntity<java.lang.Integer> = ResponseEntity . status ( HttpStatus . OK ) . cacheControl ( CacheControl . noStore ( ) ) . body ( java.lang.Integer ) ; assertNotNull ( org.springframework.http.ResponseEntity<java.lang.Integer> ) ; assertEquals ( HttpStatus . OK , org.springframework.http.ResponseEntity<java.lang.Integer> . getStatusCode ( ) ) ; assertTrue ( org.springframework.http.ResponseEntity<java.lang.Integer> . getHeaders ( ) . containsKey ( HttpHeaders . CACHE_CONTROL ) ) ; assertEquals ( java.lang.Integer , org.springframework.http.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; java.lang.String java.lang.String = org.springframework.http.ResponseEntity<java.lang.Integer> . getHeaders ( ) . getCacheControl ( ) ; assertThat ( java.lang.String , Matchers . equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; ResponseEntity < java.lang.Integer > org.springframework.http.ResponseEntity<java.lang.Integer> = ResponseEntity . status ( NUMBER ) . body ( java.lang.Integer ) ; assertEquals ( NUMBER , org.springframework.http.ResponseEntity<java.lang.Integer> . getStatusCode ( ) . value ( ) ) ; assertEquals ( java.lang.Integer , org.springframework.http.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = NUMBER ; ResponseEntity < java.lang.Integer > org.springframework.http.ResponseEntity<java.lang.Integer> = ResponseEntity . status ( NUMBER ) . body ( java.lang.Integer ) ; assertEquals ( NUMBER , org.springframework.http.ResponseEntity<java.lang.Integer> . getStatusCodeValue ( ) ) ; assertEquals ( java.lang.Integer , org.springframework.http.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; }  <METHOD_END>
