<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> , MappingContext < ? extends CassandraPersistentEntity < ? > , CassandraPersistentProperty > org.springframework.data.cassandra.repository.query.MappingContext<? extends org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<?>,org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> , EntityInstantiators org.springframework.data.cassandra.repository.query.EntityInstantiators ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.repository.query.MappingContext<,org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.repository.query.EntityInstantiators , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.data.cassandra.repository.query.MappingContext<? extends org.springframework.data.cassandra.repository.query.PersistentEntity<?,?>,? extends org.springframework.data.cassandra.repository.query.PersistentProperty<?>> = org.springframework.data.cassandra.repository.query.MappingContext<,org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> ; this . java.util.Optional<org.springframework.data.cassandra.repository.query.EntityInstantiator> = org.springframework.data.cassandra.repository.query.MappingContext<,org.springframework.data.cassandra.repository.query.CassandraPersistentProperty> . getPersistentEntity ( java.lang.Class<> ) . map ( org.springframework.data.cassandra.repository.query.EntityInstantiators :: getInstantiatorFor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Class<> . boolean ( ) ) { return java.lang.Object ; } PersistentEntity < ? , ? > org.springframework.data.cassandra.repository.query.PersistentEntity<?,?> = org.springframework.data.cassandra.repository.query.MappingContext<,> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; PersistentPropertyAccessor org.springframework.data.cassandra.repository.query.PersistentPropertyAccessor = org.springframework.data.cassandra.repository.query.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) ; PersistentEntity < ? , ? > org.springframework.data.cassandra.repository.query.PersistentEntity<?,?> = org.springframework.data.cassandra.repository.query.MappingContext<,> . getRequiredPersistentEntity ( java.lang.Class<> ) ; EntityInstantiator org.springframework.data.cassandra.repository.query.EntityInstantiator = this . java.util.Optional<org.springframework.data.cassandra.repository.query.EntityInstantiator> . orElseThrow ( ( ) new IllegalStateException ( String . format ( STRING , targetType ) ) ) ; @ java.lang.SuppressWarnings ( { STRING , STRING } ) java.lang.Object java.lang.Object = org.springframework.data.cassandra.repository.query.EntityInstantiator . createInstance ( org.springframework.data.cassandra.repository.query.PersistentEntity<,> , new ParameterValueProvider ( ) { @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( Parameter org.springframework.data.cassandra.repository.query.Parameter ) { return org.springframework.data.cassandra.repository.query.Parameter . getName ( ) . flatMap ( name -> sourceAccessor . getProperty ( sourceEntity . getRequiredPersistentProperty ( ( String ) name ) ) ) ; } } ) ; final PersistentPropertyAccessor org.springframework.data.cassandra.repository.query.PersistentPropertyAccessor = org.springframework.data.cassandra.repository.query.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) ; java.util.Optional<? extends org.springframework.data.cassandra.repository.query.PreferredConstructor<?,? extends org.springframework.data.cassandra.repository.query.PersistentProperty<?>>> < ? extends PreferredConstructor < ? , ? extends PersistentProperty < ? > > > java.util.Optional<? extends org.springframework.data.cassandra.repository.query.PreferredConstructor<?,? extends org.springframework.data.cassandra.repository.query.PersistentProperty<?>>> = org.springframework.data.cassandra.repository.query.PersistentEntity<,> . getPersistenceConstructor ( ) ; org.springframework.data.cassandra.repository.query.PersistentEntity<,> . doWithProperties ( ( SimplePropertyHandler ) property -> { if ( ! optionalConstructor . filter ( c -> c . isConstructorParameter ( property ) ) . isPresent ( ) ) { return; } targetAccessor . setProperty ( property , sourceAccessor . getProperty ( sourceEntity . getRequiredPersistentProperty ( property . getName ( ) ) ) ) ; } ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( Parameter org.springframework.data.cassandra.repository.query.Parameter ) { return org.springframework.data.cassandra.repository.query.Parameter . getName ( ) . flatMap ( name -> sourceAccessor . getProperty ( sourceEntity . getRequiredPersistentProperty ( ( String ) name ) ) ) ; }  <METHOD_END>
