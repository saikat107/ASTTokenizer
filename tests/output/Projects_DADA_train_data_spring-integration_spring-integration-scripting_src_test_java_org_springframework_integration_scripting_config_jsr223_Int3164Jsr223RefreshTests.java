<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) + java.io.File . java.lang.String + STRING ; java.io.File = new java.io.File ( java.lang.String ) ; void ( ) ; java.io.File . boolean ( ) ; java.io.File . void ( ) ; java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { if ( java.io.File != null && java.io.File . boolean ( ) ) { for ( java.io.File java.io.File : java.io.File . java.io.File[] ( ) ) { java.io.File . boolean ( ) ; } java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.scripting.config.jsr223.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; java.io.File . boolean ( java.lang.System . long ( ) + NUMBER ) ; this . org.springframework.integration.scripting.config.jsr223.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.scripting.config.jsr223.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
