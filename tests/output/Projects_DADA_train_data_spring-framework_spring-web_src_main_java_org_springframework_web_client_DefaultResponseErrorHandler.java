<METHOD_START> @ java.lang.Override public boolean boolean ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { return boolean ( org.springframework.web.client.HttpStatus ( org.springframework.web.client.ClientHttpResponse ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { HttpStatus org.springframework.web.client.HttpStatus = org.springframework.web.client.HttpStatus ( org.springframework.web.client.ClientHttpResponse ) ; switch ( org.springframework.web.client.HttpStatus . series ( ) ) { case CLIENT_ERROR : throw new HttpClientErrorException ( org.springframework.web.client.HttpStatus , org.springframework.web.client.ClientHttpResponse . getStatusText ( ) , org.springframework.web.client.ClientHttpResponse . getHeaders ( ) , byte[] ( org.springframework.web.client.ClientHttpResponse ) , java.nio.charset.Charset ( org.springframework.web.client.ClientHttpResponse ) ) ; case SERVER_ERROR : throw new HttpServerErrorException ( org.springframework.web.client.HttpStatus , org.springframework.web.client.ClientHttpResponse . getStatusText ( ) , org.springframework.web.client.ClientHttpResponse . getHeaders ( ) , byte[] ( org.springframework.web.client.ClientHttpResponse ) , java.nio.charset.Charset ( org.springframework.web.client.ClientHttpResponse ) ) ; default: throw new RestClientException ( STRING + org.springframework.web.client.HttpStatus + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.client.HttpStatus org.springframework.web.client.HttpStatus ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { try { return org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new UnknownHttpStatusCodeException ( org.springframework.web.client.ClientHttpResponse . getRawStatusCode ( ) , org.springframework.web.client.ClientHttpResponse . getStatusText ( ) , org.springframework.web.client.ClientHttpResponse . getHeaders ( ) , byte[] ( org.springframework.web.client.ClientHttpResponse ) , java.nio.charset.Charset ( org.springframework.web.client.ClientHttpResponse ) ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( HttpStatus org.springframework.web.client.HttpStatus ) { return ( org.springframework.web.client.HttpStatus . series ( ) == HttpStatus . Series . CLIENT_ERROR || org.springframework.web.client.HttpStatus . series ( ) == HttpStatus . Series . SERVER_ERROR ) ; }  <METHOD_END>
<METHOD_START> protected java.nio.charset.Charset java.nio.charset.Charset ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) { HttpHeaders org.springframework.web.client.HttpHeaders = org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ; MediaType org.springframework.web.client.MediaType = org.springframework.web.client.HttpHeaders . getContentType ( ) ; return ( org.springframework.web.client.MediaType != null ? org.springframework.web.client.MediaType . getCharset ( ) : null ) ; }  <METHOD_END>
<METHOD_START> protected byte [] byte[] ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) { try { return FileCopyUtils . copyToByteArray ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { } return new byte [ NUMBER ] ; }  <METHOD_END>
