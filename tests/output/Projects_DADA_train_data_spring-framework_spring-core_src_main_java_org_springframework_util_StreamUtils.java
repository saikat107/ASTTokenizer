<METHOD_START> public static byte [] byte[] ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { if ( java.io.InputStream == null ) { return new byte [ NUMBER ] ; } java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( int ) ; int ( java.io.InputStream , java.io.ByteArrayOutputStream ) ; return java.io.ByteArrayOutputStream . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.io.InputStream java.io.InputStream , java.nio.charset.Charset java.nio.charset.Charset ) throws java.io.IOException { if ( java.io.InputStream == null ) { return STRING ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader ( java.io.InputStream , java.nio.charset.Charset ) ; char [] char[] = new char [ int ] ; int int = - NUMBER ; while ( ( int = java.io.InputStreamReader . int ( char[] ) ) != - NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( char[] , NUMBER , int ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( byte [] byte[] , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { Assert . notNull ( byte[] , STRING ) ; Assert . notNull ( java.io.OutputStream , STRING ) ; java.io.OutputStream . void ( byte[] ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.nio.charset.Charset java.nio.charset.Charset , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.nio.charset.Charset , STRING ) ; Assert . notNull ( java.io.OutputStream , STRING ) ; java.io.Writer java.io.Writer = new java.io.OutputStreamWriter ( java.io.OutputStream , java.nio.charset.Charset ) ; java.io.Writer . void ( java.lang.String ) ; java.io.Writer . void ( ) ; }  <METHOD_END>
<METHOD_START> public static int int ( java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { Assert . notNull ( java.io.InputStream , STRING ) ; Assert . notNull ( java.io.OutputStream , STRING ) ; int int = NUMBER ; byte [] byte[] = new byte [ int ] ; int int = - NUMBER ; while ( ( int = java.io.InputStream . int ( byte[] ) ) != - NUMBER ) { java.io.OutputStream . void ( byte[] , NUMBER , int ) ; int += int ; } java.io.OutputStream . void ( ) ; return int ; }  <METHOD_END>
<METHOD_START> public static long long ( java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream , long long , long long ) throws java.io.IOException { Assert . notNull ( java.io.InputStream , STRING ) ; Assert . notNull ( java.io.OutputStream , STRING ) ; long long = java.io.InputStream . long ( long ) ; if ( long < long ) { throw new java.io.IOException ( STRING + long + STRING + long + STRING ) ; } long long = long - long + NUMBER ; byte byte[] [] = new byte [ org.springframework.util.StreamUtils . int ] ; while ( long > NUMBER ) { int int = java.io.InputStream . int ( byte[] ) ; if ( int == - NUMBER ) { break; } else if ( int <= long ) { java.io.OutputStream . void ( byte[] , NUMBER , int ) ; long -= int ; } else { java.io.OutputStream . void ( byte[] , NUMBER , ( int ) long ) ; long = NUMBER ; } } return ( long - long + NUMBER - long ) ; }  <METHOD_END>
<METHOD_START> public static int int ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { Assert . notNull ( java.io.InputStream , STRING ) ; byte [] byte[] = new byte [ int ] ; int int = - NUMBER ; int int = NUMBER ; while ( ( int = java.io.InputStream . int ( byte[] ) ) != - NUMBER ) { int += int ; } return int ; }  <METHOD_END>
<METHOD_START> public static java.io.InputStream java.io.InputStream ( ) { return new java.io.ByteArrayInputStream ( byte[] ) ; }  <METHOD_END>
<METHOD_START> public static java.io.InputStream java.io.InputStream ( java.io.InputStream java.io.InputStream ) { Assert . notNull ( java.io.InputStream , STRING ) ; return new org.springframework.util.StreamUtils.NonClosingInputStream ( java.io.InputStream ) ; }  <METHOD_END>
<METHOD_START> public static java.io.OutputStream java.io.OutputStream ( java.io.OutputStream java.io.OutputStream ) { Assert . notNull ( java.io.OutputStream , STRING ) ; return new org.springframework.util.StreamUtils.NonClosingOutputStream ( java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> public void ( java.io.InputStream java.io.InputStream ) { super( java.io.InputStream ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException {		}  <METHOD_END>
<METHOD_START> public void ( java.io.OutputStream java.io.OutputStream ) { super( java.io.OutputStream ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] , int int , int int ) throws java.io.IOException { java.io.OutputStream . void ( byte[] , int , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException {		}  <METHOD_END>
