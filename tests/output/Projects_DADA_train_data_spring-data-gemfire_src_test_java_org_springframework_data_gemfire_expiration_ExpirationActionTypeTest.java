<METHOD_START> @ Test public void void ( ) { assertEquals ( ExpirationAction . DESTROY , ExpirationActionType . getExpirationAction ( ExpirationActionType . DESTROY ) ) ; assertEquals ( ExpirationAction . LOCAL_DESTROY , ExpirationActionType . getExpirationAction ( ExpirationActionType . LOCAL_DESTROY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( ExpirationActionType . getExpirationAction ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( ExpirationAction . DESTROY , ExpirationActionType . DESTROY . getExpirationAction ( ) ) ; assertEquals ( ExpirationAction . INVALIDATE , ExpirationActionType . INVALIDATE . getExpirationAction ( ) ) ; assertEquals ( ExpirationAction . LOCAL_DESTROY , ExpirationActionType . LOCAL_DESTROY . getExpirationAction ( ) ) ; assertEquals ( ExpirationAction . LOCAL_INVALIDATE , ExpirationActionType . LOCAL_INVALIDATE . getExpirationAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( ExpirationAction . INVALIDATE , ExpirationActionType . DEFAULT . getExpirationAction ( ) ) ; assertSame ( ExpirationActionType . INVALIDATE , ExpirationActionType . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( ExpirationActionType . DESTROY , ExpirationActionType . valueOf ( ExpirationAction . DESTROY ) ) ; assertEquals ( ExpirationActionType . INVALIDATE , ExpirationActionType . valueOf ( ExpirationAction . INVALIDATE ) ) ; assertEquals ( ExpirationActionType . LOCAL_DESTROY , ExpirationActionType . valueOf ( ExpirationAction . LOCAL_DESTROY ) ) ; assertEquals ( ExpirationActionType . LOCAL_INVALIDATE , ExpirationActionType . valueOf ( ExpirationAction . LOCAL_INVALIDATE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { for ( int int = NUMBER ; int < java.lang.Integer . int ; int ++ ) { ExpirationAction org.springframework.data.gemfire.expiration.ExpirationAction = ExpirationAction . fromOrdinal ( int ) ; ExpirationActionType org.springframework.data.gemfire.expiration.ExpirationActionType = ExpirationActionType . valueOf ( org.springframework.data.gemfire.expiration.ExpirationAction ) ; assertNotNull ( org.springframework.data.gemfire.expiration.ExpirationActionType ) ; assertEquals ( org.springframework.data.gemfire.expiration.ExpirationAction , org.springframework.data.gemfire.expiration.ExpirationActionType . getExpirationAction ( ) ) ; } } catch ( java.lang.ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( ExpirationActionType . valueOf ( ( ExpirationAction ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( ExpirationActionType . DESTROY , ExpirationActionType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( ExpirationActionType . INVALIDATE , ExpirationActionType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( ExpirationActionType . LOCAL_DESTROY , ExpirationActionType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( ExpirationActionType . LOCAL_INVALIDATE , ExpirationActionType . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( ExpirationActionType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ExpirationActionType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ExpirationActionType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ExpirationActionType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( ExpirationActionType . valueOfIgnoreCase ( null ) ) ; }  <METHOD_END>
