<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , int int ) { this( java.lang.reflect.Method , int , NUMBER ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , int int , int int ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . int = int ( java.lang.reflect.Method , int ) ; this . int = int ; this . java.lang.reflect.Constructor<?> = null ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> , int int ) { this( java.lang.reflect.Constructor<> , int , NUMBER ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> , int int , int int ) { Assert . notNull ( java.lang.reflect.Constructor<> , STRING ) ; this . java.lang.reflect.Constructor<?> = java.lang.reflect.Constructor<> ; this . int = int ( java.lang.reflect.Constructor<> , int ) ; this . int = int ; this . java.lang.reflect.Method = null ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.core.MethodParameter org.springframework.core.MethodParameter ) { Assert . notNull ( org.springframework.core.MethodParameter , STRING ) ; this . java.lang.reflect.Method = org.springframework.core.MethodParameter . java.lang.reflect.Method ; this . java.lang.reflect.Constructor<?> = org.springframework.core.MethodParameter . java.lang.reflect.Constructor<> ; this . int = org.springframework.core.MethodParameter . int ; this . java.lang.reflect.Parameter = org.springframework.core.MethodParameter . java.lang.reflect.Parameter ; this . int = org.springframework.core.MethodParameter . int ; this . java.util.Map<java.lang.Integer,java.lang.Integer> = org.springframework.core.MethodParameter . java.util.Map<java.lang.Integer,java.lang.Integer> ; this . java.lang.Class<?> = org.springframework.core.MethodParameter . java.lang.Class<> ; this . java.lang.Class<?> = org.springframework.core.MethodParameter . java.lang.Class<> ; this . java.lang.reflect.Type = org.springframework.core.MethodParameter . java.lang.reflect.Type ; this . java.lang.annotation.Annotation[] = org.springframework.core.MethodParameter . java.lang.annotation.Annotation[] ; this . org.springframework.core.ParameterNameDiscoverer = org.springframework.core.MethodParameter . org.springframework.core.ParameterNameDiscoverer ; this . java.lang.String = org.springframework.core.MethodParameter . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> ( ) { return this . java.lang.reflect.Constructor<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.reflect.Member ( ) . java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Member java.lang.reflect.Member ( ) { return java.lang.reflect.Executable ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ( ) { return java.lang.reflect.Executable ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Executable java.lang.reflect.Executable ( ) { return ( this . java.lang.reflect.Method != null ? this . java.lang.reflect.Method : this . java.lang.reflect.Constructor<> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Parameter java.lang.reflect.Parameter ( ) { if ( this . java.lang.reflect.Parameter == null ) { this . java.lang.reflect.Parameter = java.lang.reflect.Executable ( ) . java.lang.reflect.Parameter[] ( ) [ this . int ] ; } return this . java.lang.reflect.Parameter ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.Map<java.lang.Integer,java.lang.Integer> ( ) . java.lang.Integer ( this . int ) ; this . int -- ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.Map<java.lang.Integer,java.lang.Integer> ( ) . java.lang.Integer ( this . int , int ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ( this . int ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( int int ) { return java.util.Map<java.lang.Integer,java.lang.Integer> ( ) . java.lang.Integer ( int ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.Integer,java.lang.Integer> < java.lang.Integer , java.lang.Integer > java.util.Map<java.lang.Integer,java.lang.Integer> ( ) { if ( this . java.util.Map<java.lang.Integer,java.lang.Integer> == null ) { this . java.util.Map<java.lang.Integer,java.lang.Integer> = new java.util.HashMap<java.lang.Integer,java.lang.Integer> <> ( NUMBER ) ; } return this . java.util.Map<java.lang.Integer,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.MethodParameter org.springframework.core.MethodParameter ( ) { if ( this . org.springframework.core.MethodParameter != null ) { return this . org.springframework.core.MethodParameter ; } org.springframework.core.MethodParameter org.springframework.core.MethodParameter = org.springframework.core.MethodParameter ( ) ; org.springframework.core.MethodParameter . int = this . int + NUMBER ; this . org.springframework.core.MethodParameter = org.springframework.core.MethodParameter ; return org.springframework.core.MethodParameter ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( java.lang.Class<?> ( ) == java.util.Optional .class || boolean ( ) || ( boolean && org.springframework.core.MethodParameter.KotlinDelegate . boolean ( this ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ( ) ) { if ( STRING . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.MethodParameter org.springframework.core.MethodParameter ( ) { return ( java.lang.Class<?> ( ) == java.util.Optional .class ? org.springframework.core.MethodParameter ( ) : this ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( this . java.lang.Class<> != null ? this . java.lang.Class<> : java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.Class<> == null ) { if ( this . int < NUMBER ) { this . java.lang.Class<?> = ( this . java.lang.reflect.Method != null ? this . java.lang.reflect.Method . java.lang.Class<?> ( ) : null ) ; } else { this . java.lang.Class<?> = ( this . java.lang.reflect.Method != null ? this . java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ this . int ] : this . java.lang.reflect.Constructor<> . java.lang.Class<?>[] ( ) [ this . int ] ) ; } } return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Type java.lang.reflect.Type ( ) { if ( this . java.lang.reflect.Type == null ) { if ( this . int < NUMBER ) { this . java.lang.reflect.Type = ( this . java.lang.reflect.Method != null ? this . java.lang.reflect.Method . java.lang.reflect.Type ( ) : null ) ; } else { this . java.lang.reflect.Type = ( this . java.lang.reflect.Method != null ? this . java.lang.reflect.Method . java.lang.reflect.Type[] ( ) [ this . int ] : this . java.lang.reflect.Constructor<> . java.lang.reflect.Type[] ( ) [ this . int ] ) ; } } return this . java.lang.reflect.Type ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . int > NUMBER ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type ( ) ; for ( int int = NUMBER ; int <= this . int ; int ++ ) { if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type [] java.lang.reflect.Type[] = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) ; java.lang.Integer java.lang.Integer = java.lang.Integer ( int ) ; java.lang.reflect.Type = java.lang.reflect.Type[] [ java.lang.Integer != null ? java.lang.Integer : java.lang.reflect.Type[] . int - NUMBER ] ; } } if ( java.lang.reflect.Type instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ; } else if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type java.lang.reflect.Type = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type ( ) ; if ( java.lang.reflect.Type instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ; } } return java.lang.Object .class ; } else { return java.lang.Class<?> ( ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Type java.lang.reflect.Type ( ) { if ( this . int > NUMBER ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type ( ) ; for ( int int = NUMBER ; int <= this . int ; int ++ ) { if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type [] java.lang.reflect.Type[] = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) ; java.lang.Integer java.lang.Integer = java.lang.Integer ( int ) ; java.lang.reflect.Type = java.lang.reflect.Type[] [ java.lang.Integer != null ? java.lang.Integer : java.lang.reflect.Type[] . int - NUMBER ] ; } } return java.lang.reflect.Type ; } else { return java.lang.reflect.Type ( ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { return java.lang.annotation.Annotation[] ( java.lang.reflect.AnnotatedElement ( ) . java.lang.annotation.Annotation[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public < A extends java.lang.annotation.Annotation > A A ( java.lang.Class<A> < A > java.lang.Class<A> ) { return A ( java.lang.reflect.AnnotatedElement ( ) . A ( java.lang.Class<A> ) ) ; }  <METHOD_END>
<METHOD_START> public < A extends java.lang.annotation.Annotation > boolean boolean ( java.lang.Class<A> < A > java.lang.Class<A> ) { return java.lang.reflect.AnnotatedElement ( ) . boolean ( java.lang.Class<A> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { if ( this . java.lang.annotation.Annotation[] == null ) { java.lang.annotation.Annotation [] [] java.lang.annotation.Annotation[][] = ( this . java.lang.reflect.Method != null ? this . java.lang.reflect.Method . java.lang.annotation.Annotation[][] ( ) : this . java.lang.reflect.Constructor<> . java.lang.annotation.Annotation[][] ( ) ) ; if ( this . int >= NUMBER && this . int < java.lang.annotation.Annotation[][] . int ) { this . java.lang.annotation.Annotation[] = java.lang.annotation.Annotation[] ( java.lang.annotation.Annotation[][] [ this . int ] ) ; } else { this . java.lang.annotation.Annotation[] = new java.lang.annotation.Annotation [ NUMBER ] ; } } return this . java.lang.annotation.Annotation[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( java.lang.annotation.Annotation[] ( ) . int != NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < A extends java.lang.annotation.Annotation > A A ( java.lang.Class<A> < A > java.lang.Class<A> ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.annotation.Annotation[] ( ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { if ( java.lang.Class<A> . boolean ( java.lang.annotation.Annotation ) ) { return ( A ) java.lang.annotation.Annotation ; } } return null ; }  <METHOD_END>
<METHOD_START> public < A extends java.lang.annotation.Annotation > boolean boolean ( java.lang.Class<A> < A > java.lang.Class<A> ) { return ( A ( java.lang.Class<A> ) != null ) ; }  <METHOD_END>
<METHOD_START> public void void ( ParameterNameDiscoverer org.springframework.core.ParameterNameDiscoverer ) { this . org.springframework.core.ParameterNameDiscoverer = org.springframework.core.ParameterNameDiscoverer ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { ParameterNameDiscoverer org.springframework.core.ParameterNameDiscoverer = this . org.springframework.core.ParameterNameDiscoverer ; if ( org.springframework.core.ParameterNameDiscoverer != null ) { java.lang.String [] java.lang.String[] = ( this . java.lang.reflect.Method != null ? org.springframework.core.ParameterNameDiscoverer . getParameterNames ( this . java.lang.reflect.Method ) : org.springframework.core.ParameterNameDiscoverer . getParameterNames ( this . java.lang.reflect.Constructor<> ) ) ; if ( java.lang.String[] != null ) { this . java.lang.String = java.lang.String[] [ this . int ] ; } this . org.springframework.core.ParameterNameDiscoverer = null ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected < A extends java.lang.annotation.Annotation > A A ( A A ) { return A ; }  <METHOD_END>
<METHOD_START> protected java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ) { return java.lang.annotation.Annotation[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.core.MethodParameter ) ) { return false ; } org.springframework.core.MethodParameter org.springframework.core.MethodParameter = ( org.springframework.core.MethodParameter ) java.lang.Object ; return ( this . int == org.springframework.core.MethodParameter . int && java.lang.reflect.Executable ( ) . boolean ( org.springframework.core.MethodParameter . java.lang.reflect.Executable ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( java.lang.reflect.Member ( ) . int ( ) * NUMBER + this . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . java.lang.reflect.Method != null ? STRING + this . java.lang.reflect.Method . java.lang.String ( ) + STRING : STRING ) + STRING + this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.MethodParameter org.springframework.core.MethodParameter ( ) { return new org.springframework.core.MethodParameter ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public static org.springframework.core.MethodParameter org.springframework.core.MethodParameter ( java.lang.Object java.lang.Object , int int ) { if ( ! ( java.lang.Object instanceof java.lang.reflect.Executable ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING ) ; } return org.springframework.core.MethodParameter ( ( java.lang.reflect.Executable ) java.lang.Object , int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.MethodParameter org.springframework.core.MethodParameter ( java.lang.reflect.Executable java.lang.reflect.Executable , int int ) { if ( java.lang.reflect.Executable instanceof java.lang.reflect.Method ) { return new org.springframework.core.MethodParameter ( ( java.lang.reflect.Method ) java.lang.reflect.Executable , int ) ; } else if ( java.lang.reflect.Executable instanceof java.lang.reflect.Constructor ) { return new org.springframework.core.MethodParameter ( ( java.lang.reflect.Constructor<?> < ? > ) java.lang.reflect.Executable , int ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.reflect.Executable ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.core.MethodParameter org.springframework.core.MethodParameter ( java.lang.reflect.Parameter java.lang.reflect.Parameter ) { return org.springframework.core.MethodParameter ( java.lang.reflect.Parameter . java.lang.reflect.Executable ( ) , int ( java.lang.reflect.Parameter ) ) ; }  <METHOD_END>
<METHOD_START> protected static int int ( java.lang.reflect.Parameter java.lang.reflect.Parameter ) { java.lang.reflect.Executable java.lang.reflect.Executable = java.lang.reflect.Parameter . java.lang.reflect.Executable ( ) ; java.lang.reflect.Parameter [] java.lang.reflect.Parameter[] = java.lang.reflect.Executable . java.lang.reflect.Parameter[] ( ) ; for ( int int = NUMBER ; int < java.lang.reflect.Parameter[] . int ; int ++ ) { if ( java.lang.reflect.Parameter == java.lang.reflect.Parameter[] [ int ] ) { return int ; } } throw new java.lang.IllegalArgumentException ( STRING + java.lang.reflect.Parameter + STRING ) ; }  <METHOD_END>
<METHOD_START> private static int int ( java.lang.reflect.Executable java.lang.reflect.Executable , int int ) { int int = java.lang.reflect.Executable . int ( ) ; Assert . isTrue ( int < int , ( ) STRING + ( count - NUMBER ) ) ; return int ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( org.springframework.core.MethodParameter org.springframework.core.MethodParameter ) { if ( org.springframework.core.MethodParameter . java.lang.Class<?> ( ) . boolean ( Metadata .class ) ) { int int = org.springframework.core.MethodParameter . int ( ) ; if ( int == - NUMBER ) { KFunction < ? > org.springframework.core.KFunction<?> = ReflectJvmMapping . getKotlinFunction ( org.springframework.core.MethodParameter . java.lang.reflect.Method ( ) ) ; return ( org.springframework.core.KFunction<> != null && org.springframework.core.KFunction<> . getReturnType ( ) . isMarkedNullable ( ) ) ; } else { KFunction < ? > org.springframework.core.KFunction<?> = ( org.springframework.core.MethodParameter . java.lang.reflect.Method ( ) != null ? ReflectJvmMapping . getKotlinFunction ( org.springframework.core.MethodParameter . java.lang.reflect.Method ( ) ) : ReflectJvmMapping . getKotlinFunction ( org.springframework.core.MethodParameter . java.lang.reflect.Constructor<?> ( ) ) ) ; if ( org.springframework.core.KFunction<> != null ) { java.util.List<org.springframework.core.KParameter> < KParameter > java.util.List<org.springframework.core.KParameter> = org.springframework.core.KFunction<> . getParameters ( ) ; return java.util.List<org.springframework.core.KParameter> . stream ( ) . filter ( p -> KParameter . Kind . VALUE . equals ( p . getKind ( ) ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) . get ( int ) . getType ( ) . isMarkedNullable ( ) ; } } } return false ; }  <METHOD_END>
