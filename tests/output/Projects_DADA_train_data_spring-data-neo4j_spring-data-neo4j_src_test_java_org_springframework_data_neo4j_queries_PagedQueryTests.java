<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.queries.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.queries.PlatformTransactionManager ) ; getGraphDatabaseService ( ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING } ; for ( java.lang.String java.lang.String : java.lang.String[] ) { Cinema org.springframework.data.neo4j.queries.Cinema = new Cinema ( java.lang.String ) ; org.springframework.data.neo4j.queries.Cinema . setLocation ( STRING ) ; org.springframework.data.neo4j.queries.Cinema . setCapacity ( NUMBER ) ; org.springframework.data.neo4j.queries.CinemaRepository . save ( org.springframework.data.neo4j.queries.Cinema ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { getGraphDatabaseService ( ) . execute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemas ( org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemas ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemas ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemas ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemasWithoutCountQuery ( org.springframework.data.neo4j.queries.Pageable ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < CinemaQueryResult > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemaQueryResults ( org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemaQueryResults ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemaQueryResults ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemaQueryResults ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResult> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Slice < CinemaQueryResult > org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemaQueryResults ( org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemaQueryResults ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemaQueryResults ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemaQueryResults ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.CinemaQueryResult> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < CinemaQueryResultInterface > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemaQueryResultInterfaces ( org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemaQueryResultInterfaces ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemaQueryResultInterfaces ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . getTotalElements ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemaQueryResultInterfaces ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.CinemaQueryResultInterface> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemasByCityWithPageCount ( STRING , org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemasByCityWithPageCount ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Slice < Cinema > org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Pageable ) ; assertNotNull ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER ) ; Slice < Cinema > org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ; Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocation ( STRING , org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocation ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocation ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING + STRING + STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationAndVisitedName ( STRING , STRING , new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationAndVisitedName ( STRING , STRING , new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationAndVisitedName ( STRING , STRING , new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocationAndVisitedName ( STRING , STRING , new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING + STRING + STRING + STRING + STRING + STRING ) ; org.springframework.data.neo4j.queries.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedName ( STRING , new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedName ( STRING , new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.queries.TransactionStatus ) { Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedName ( STRING , new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByVisitedName ( STRING , new PageRequest ( NUMBER , NUMBER , Sort . Direction . DESC , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Sort org.springframework.data.neo4j.queries.Sort = new Sort ( Sort . Direction . ASC , STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByLocation ( STRING , org.springframework.data.neo4j.queries.Sort ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ; Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacity ( NUMBER , org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacity ( NUMBER , org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . findByCapacity ( NUMBER , org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ; Page < Cinema > org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemas ( org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemas ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getPagedCinemas ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getTotalElements ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Page<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Pageable org.springframework.data.neo4j.queries.Pageable = new PageRequest ( NUMBER , NUMBER , Sort . Direction . ASC , STRING ) ; Slice < Cinema > org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Pageable ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertTrue ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getSlicedCinemasByName ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . nextPageable ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getNumberOfElements ( ) ) ; assertFalse ( org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . hasNext ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.neo4j.queries.Slice<org.springframework.data.neo4j.queries.Cinema> . getContent ( ) . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { void ( ) ; Sort org.springframework.data.neo4j.queries.Sort = new Sort ( Sort . Direction . ASC , STRING ) ; java.util.List<org.springframework.data.neo4j.queries.Cinema> < Cinema > java.util.List<org.springframework.data.neo4j.queries.Cinema> = org.springframework.data.neo4j.queries.CinemaRepository . getCinemasSortedByName ( org.springframework.data.neo4j.queries.Sort ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.neo4j.queries.Cinema> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.neo4j.queries.Cinema> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.PlatformTransactionManager org.springframework.data.neo4j.queries.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.queries.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.SessionFactory org.springframework.data.neo4j.queries.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
