<METHOD_START> public void ( ) { synchronized ( this ) { if ( org.springframework.expression.spel.support.ConversionService == null ) { org.springframework.expression.spel.support.ConversionService = new DefaultConversionService ( ) ; } } this . org.springframework.expression.spel.support.ConversionService = org.springframework.expression.spel.support.ConversionService ; }  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.expression.spel.support.ConversionService ) { this . org.springframework.expression.spel.support.ConversionService = org.springframework.expression.spel.support.ConversionService ; }  <METHOD_END>
<METHOD_START> public void void ( ConversionService org.springframework.expression.spel.support.ConversionService ) { this . org.springframework.expression.spel.support.ConversionService = org.springframework.expression.spel.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.expression.spel.support.BeanFactory ) throws org.springframework.expression.spel.support.BeansException { if ( org.springframework.expression.spel.support.BeanFactory instanceof ConfigurableBeanFactory ) { java.lang.Object java.lang.Object = ( ( ConfigurableBeanFactory ) org.springframework.expression.spel.support.BeanFactory ) . getTypeConverter ( ) ; if ( java.lang.Object instanceof SimpleTypeConverter ) { org.springframework.expression.spel.support.SimpleTypeConverter = ( SimpleTypeConverter ) java.lang.Object ; } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.expression.spel.support.ConversionService . canConvert ( java.lang.Class<> , java.lang.Class<> ) ) { return true ; } if ( ! java.lang.String .class . boolean ( java.lang.Class<> ) && ! java.lang.String .class . boolean ( java.lang.Class<> ) ) { return false ; } if ( ! java.lang.String .class . boolean ( java.lang.Class<> ) ) { return org.springframework.expression.spel.support.SimpleTypeConverter . findCustomEditor ( java.lang.Class<> , null ) != null || org.springframework.expression.spel.support.SimpleTypeConverter . getDefaultEditor ( java.lang.Class<> ) != null ; } return org.springframework.expression.spel.support.SimpleTypeConverter . findCustomEditor ( java.lang.Class<> , null ) != null || org.springframework.expression.spel.support.SimpleTypeConverter . getDefaultEditor ( java.lang.Class<> ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor , TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor ) { if ( org.springframework.expression.spel.support.ConversionService . canConvert ( org.springframework.expression.spel.support.TypeDescriptor , org.springframework.expression.spel.support.TypeDescriptor ) ) { return true ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.support.TypeDescriptor . getObjectType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.support.TypeDescriptor . getObjectType ( ) ; return boolean ( java.lang.Class<> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor , TypeDescriptor org.springframework.expression.spel.support.TypeDescriptor ) { if ( org.springframework.expression.spel.support.TypeDescriptor . getType ( ) == java.lang.Void .class || org.springframework.expression.spel.support.TypeDescriptor . getType ( ) == java.lang.Void . java.lang.Class<java.lang.Void> ) { return null ; } if ( org.springframework.expression.spel.support.ConversionService . canConvert ( org.springframework.expression.spel.support.TypeDescriptor , org.springframework.expression.spel.support.TypeDescriptor ) ) { return org.springframework.expression.spel.support.ConversionService . convert ( java.lang.Object , org.springframework.expression.spel.support.TypeDescriptor , org.springframework.expression.spel.support.TypeDescriptor ) ; } if ( ! java.lang.String .class . boolean ( org.springframework.expression.spel.support.TypeDescriptor . getType ( ) ) ) { java.beans.PropertyEditor java.beans.PropertyEditor = org.springframework.expression.spel.support.SimpleTypeConverter . findCustomEditor ( org.springframework.expression.spel.support.TypeDescriptor . getType ( ) , null ) ; java.beans.PropertyEditor . void ( java.lang.Object ) ; return java.beans.PropertyEditor . java.lang.String ( ) ; } return org.springframework.expression.spel.support.SimpleTypeConverter . convertIfNecessary ( java.lang.Object , org.springframework.expression.spel.support.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
