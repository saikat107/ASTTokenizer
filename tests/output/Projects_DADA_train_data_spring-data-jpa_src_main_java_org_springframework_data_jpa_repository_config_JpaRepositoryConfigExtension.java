<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return JpaRepositoryFactoryBean .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return java.lang.String ( ) . java.lang.String ( java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { return java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( Entity .class , MappedSuperclass .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collections .< java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( JpaRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.jpa.repository.config.BeanDefinitionBuilder , RepositoryConfigurationSource org.springframework.data.jpa.repository.config.RepositoryConfigurationSource ) { java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.data.jpa.repository.config.RepositoryConfigurationSource . getAttribute ( STRING ) ; org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Optional<java.lang.String> . java.lang.String ( java.lang.String ) ) ; org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.jpa.repository.config.AbstractBeanDefinition ( org.springframework.data.jpa.repository.config.RepositoryConfigurationSource , org.springframework.data.jpa.repository.config.RepositoryConfigurationSource . getSource ( ) ) ) ; org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . addPropertyReference ( STRING , JPA_MAPPING_CONTEXT_BEAN_NAME ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.jpa.repository.config.BeanDefinitionBuilder , AnnotationRepositoryConfigurationSource org.springframework.data.jpa.repository.config.AnnotationRepositoryConfigurationSource ) { AnnotationAttributes org.springframework.data.jpa.repository.config.AnnotationAttributes = org.springframework.data.jpa.repository.config.AnnotationRepositoryConfigurationSource . getAttributes ( ) ; org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , org.springframework.data.jpa.repository.config.AnnotationAttributes . getBoolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.jpa.repository.config.BeanDefinitionBuilder , XmlRepositoryConfigurationSource org.springframework.data.jpa.repository.config.XmlRepositoryConfigurationSource ) { java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.data.jpa.repository.config.XmlRepositoryConfigurationSource . getAttribute ( java.lang.String ) ; if ( java.util.Optional<java.lang.String> . boolean ( ) && StringUtils . hasText ( java.util.Optional<java.lang.String> . java.lang.String ( ) ) ) { org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , java.util.Optional<java.lang.String> . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionRegistry org.springframework.data.jpa.repository.config.BeanDefinitionRegistry , RepositoryConfigurationSource org.springframework.data.jpa.repository.config.RepositoryConfigurationSource ) { super. registerBeansForRoot ( org.springframework.data.jpa.repository.config.BeanDefinitionRegistry , org.springframework.data.jpa.repository.config.RepositoryConfigurationSource ) ; java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.config.RepositoryConfigurationSource . getSource ( ) ; registerIfNotAlreadyRegistered ( new RootBeanDefinition ( EntityManagerBeanDefinitionRegistrarPostProcessor .class ) , org.springframework.data.jpa.repository.config.BeanDefinitionRegistry , EM_BEAN_DEFINITION_REGISTRAR_POST_PROCESSOR_BEAN_NAME , java.lang.Object ) ; registerIfNotAlreadyRegistered ( new RootBeanDefinition ( JpaMetamodelMappingContextFactoryBean .class ) , org.springframework.data.jpa.repository.config.BeanDefinitionRegistry , JPA_MAPPING_CONTEXT_BEAN_NAME , java.lang.Object ) ; registerIfNotAlreadyRegistered ( new RootBeanDefinition ( java.lang.Class<> ) , org.springframework.data.jpa.repository.config.BeanDefinitionRegistry , AnnotationConfigUtils . PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME , java.lang.Object ) ; RootBeanDefinition org.springframework.data.jpa.repository.config.RootBeanDefinition = new RootBeanDefinition ( DefaultJpaContext .class ) ; org.springframework.data.jpa.repository.config.RootBeanDefinition . setAutowireMode ( AbstractBeanDefinition . AUTOWIRE_CONSTRUCTOR ) ; registerIfNotAlreadyRegistered ( org.springframework.data.jpa.repository.config.RootBeanDefinition , org.springframework.data.jpa.repository.config.BeanDefinitionRegistry , JPA_CONTEXT_BEAN_NAME , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.config.AbstractBeanDefinition org.springframework.data.jpa.repository.config.AbstractBeanDefinition ( RepositoryConfigurationSource org.springframework.data.jpa.repository.config.RepositoryConfigurationSource , java.lang.Object java.lang.Object ) { BeanDefinitionBuilder org.springframework.data.jpa.repository.config.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( STRING ) ; org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . setFactoryMethod ( STRING ) ; org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ( org.springframework.data.jpa.repository.config.RepositoryConfigurationSource ) ) ; AbstractBeanDefinition org.springframework.data.jpa.repository.config.AbstractBeanDefinition = org.springframework.data.jpa.repository.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) ; org.springframework.data.jpa.repository.config.AbstractBeanDefinition . setSource ( java.lang.Object ) ; return org.springframework.data.jpa.repository.config.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( RepositoryConfigurationSource org.springframework.data.jpa.repository.config.RepositoryConfigurationSource ) { java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.data.jpa.repository.config.RepositoryConfigurationSource == null ? java.util.Optional . java.util.Optional<java.lang.String> ( ) : org.springframework.data.jpa.repository.config.RepositoryConfigurationSource . getAttribute ( STRING ) ; return java.util.Optional<java.lang.String> . java.lang.String ( STRING ) ; }  <METHOD_END>
