<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( ) ; java.lang.String java.lang.String = STRING ; ThreadPoolTaskScheduler org.springframework.integration.endpoint.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.endpoint.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,org.springframework.integration.endpoint.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.endpoint.Expression> = new java.util.HashMap<java.lang.String,org.springframework.integration.endpoint.Expression> < java.lang.String , Expression > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.endpoint.Expression> . put ( STRING , new LiteralExpression ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.integration.endpoint.Expression> . put ( STRING , new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; ExpressionFactoryBean org.springframework.integration.endpoint.ExpressionFactoryBean = new ExpressionFactoryBean ( java.lang.String ) ; org.springframework.integration.endpoint.ExpressionFactoryBean . afterPropertiesSet ( ) ; Expression org.springframework.integration.endpoint.Expression = org.springframework.integration.endpoint.ExpressionFactoryBean . getObject ( ) ; ExpressionEvaluatingMessageSource < java.lang.Object > org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.Object> = new ExpressionEvaluatingMessageSource < java.lang.Object > ( org.springframework.integration.endpoint.Expression , java.lang.Object .class ) ; org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.Object> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.Object> . setHeaderExpressions ( java.util.Map<java.lang.String,org.springframework.integration.endpoint.Expression> ) ; SourcePollingChannelAdapter org.springframework.integration.endpoint.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setSource ( org.springframework.integration.endpoint.ExpressionEvaluatingMessageSource<java.lang.Object> ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setTaskScheduler ( org.springframework.integration.endpoint.ThreadPoolTaskScheduler ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setMaxMessagesPerPoll ( NUMBER ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . setErrorHandler ( t -> { throw new IllegalStateException ( STRING , t ) ; } ) ; org.springframework.integration.endpoint.SourcePollingChannelAdapter . start ( ) ; java.util.List<org.springframework.integration.endpoint.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.endpoint.Message<?>> = new java.util.ArrayList<org.springframework.integration.endpoint.Message<?>> < Message < ? > > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.integration.endpoint.Message<?>> . add ( org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ) ; } org.springframework.integration.endpoint.ThreadPoolTaskScheduler . destroy ( ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = java.util.List<org.springframework.integration.endpoint.Message<?>> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.endpoint.Message<> . getHeaders ( ) . get ( STRING ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = java.util.List<org.springframework.integration.endpoint.Message<?>> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.endpoint.Message<> . getHeaders ( ) . get ( STRING ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = java.util.List<org.springframework.integration.endpoint.Message<?>> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.endpoint.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public static int int ( ) { return java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
