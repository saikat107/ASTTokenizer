<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static org.springframework.test.annotation.ProfileValueSource org.springframework.test.annotation.ProfileValueSource ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; java.lang.Class<org.springframework.test.annotation.ProfileValueSourceConfiguration> < ProfileValueSourceConfiguration > java.lang.Class<org.springframework.test.annotation.ProfileValueSourceConfiguration> = ProfileValueSourceConfiguration .class ; ProfileValueSourceConfiguration org.springframework.test.annotation.ProfileValueSourceConfiguration = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , java.lang.Class<org.springframework.test.annotation.ProfileValueSourceConfiguration> ) ; if ( org.springframework.test.annotation.Log . isDebugEnabled ( ) ) { org.springframework.test.annotation.Log . debug ( STRING + org.springframework.test.annotation.ProfileValueSourceConfiguration + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } java.lang.Class<? extends org.springframework.test.annotation.ProfileValueSource> < ? extends ProfileValueSource > java.lang.Class<? extends org.springframework.test.annotation.ProfileValueSource> ; if ( org.springframework.test.annotation.ProfileValueSourceConfiguration != null ) { java.lang.Class<? extends org.springframework.test.annotation.ProfileValueSource> = org.springframework.test.annotation.ProfileValueSourceConfiguration . value ( ) ; } else { java.lang.Class<? extends org.springframework.test.annotation.ProfileValueSource> = ( java.lang.Class<? extends org.springframework.test.annotation.ProfileValueSource> < ? extends ProfileValueSource > ) AnnotationUtils . getDefaultValue ( java.lang.Class<org.springframework.test.annotation.ProfileValueSourceConfiguration> ) ; } if ( org.springframework.test.annotation.Log . isDebugEnabled ( ) ) { org.springframework.test.annotation.Log . debug ( STRING + java.lang.Class<> + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } ProfileValueSource org.springframework.test.annotation.ProfileValueSource ; if ( SystemProfileValueSource .class == java.lang.Class<> ) { org.springframework.test.annotation.ProfileValueSource = SystemProfileValueSource . getInstance ( ) ; } else { try { org.springframework.test.annotation.ProfileValueSource = ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.test.annotation.Log . isWarnEnabled ( ) ) { org.springframework.test.annotation.Log . warn ( STRING + java.lang.Class<> + STRING + java.lang.Class<> . java.lang.String ( ) + STRING , java.lang.Exception ) ; } org.springframework.test.annotation.ProfileValueSource = SystemProfileValueSource . getInstance ( ) ; } } return org.springframework.test.annotation.ProfileValueSource ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { IfProfileValue org.springframework.test.annotation.IfProfileValue = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , IfProfileValue .class ) ; return boolean ( org.springframework.test.annotation.ProfileValueSource ( java.lang.Class<> ) , org.springframework.test.annotation.IfProfileValue ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( org.springframework.test.annotation.ProfileValueSource ( java.lang.Class<> ) , java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( ProfileValueSource org.springframework.test.annotation.ProfileValueSource , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { IfProfileValue org.springframework.test.annotation.IfProfileValue = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , IfProfileValue .class ) ; boolean boolean = boolean ( org.springframework.test.annotation.ProfileValueSource , org.springframework.test.annotation.IfProfileValue ) ; if ( boolean ) { org.springframework.test.annotation.IfProfileValue = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , IfProfileValue .class ) ; return boolean ( org.springframework.test.annotation.ProfileValueSource , org.springframework.test.annotation.IfProfileValue ) ; } return false ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( ProfileValueSource org.springframework.test.annotation.ProfileValueSource , IfProfileValue org.springframework.test.annotation.IfProfileValue ) { if ( org.springframework.test.annotation.IfProfileValue == null ) { return true ; } java.lang.String java.lang.String = org.springframework.test.annotation.ProfileValueSource . get ( org.springframework.test.annotation.IfProfileValue . name ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.test.annotation.IfProfileValue . values ( ) ; if ( StringUtils . hasLength ( org.springframework.test.annotation.IfProfileValue . value ( ) ) ) { Assert . isTrue ( java.lang.String[] . int == NUMBER , ( ) STRING + STRING ) ; java.lang.String[] = new java.lang.String [] { org.springframework.test.annotation.IfProfileValue . value ( ) } ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ObjectUtils . nullSafeEquals ( java.lang.String , java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
