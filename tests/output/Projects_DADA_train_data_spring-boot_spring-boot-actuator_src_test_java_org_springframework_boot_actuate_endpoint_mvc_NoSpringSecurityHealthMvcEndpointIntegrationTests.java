<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.NoSpringSecurityHealthMvcEndpointIntegrationTests.TestConfiguration .class ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . refresh ( ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext ) . build ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . with ( org.springframework.boot.actuate.endpoint.mvc.RequestPostProcessor ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.endpoint.mvc.NoSpringSecurityHealthMvcEndpointIntegrationTests.TestConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext . refresh ( ) ; MockMvc org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.AnnotationConfigWebApplicationContext ) . build ( ) ; org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.RequestPostProcessor org.springframework.boot.actuate.endpoint.mvc.RequestPostProcessor ( ) { return new RequestPostProcessor ( ) { @ java.lang.Override public org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ) { java.security.Principal java.security.Principal = mock ( java.security.Principal .class ) ; org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest . setUserPrincipal ( java.security.Principal ) ; return org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ) { java.security.Principal java.security.Principal = mock ( java.security.Principal .class ) ; org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest . setUserPrincipal ( java.security.Principal ) ; return org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.mvc.HealthIndicator org.springframework.boot.actuate.endpoint.mvc.HealthIndicator ( ) { return new HealthIndicator ( ) { @ java.lang.Override public org.springframework.boot.actuate.endpoint.mvc.Health org.springframework.boot.actuate.endpoint.mvc.Health ( ) { return Health . up ( ) . withDetail ( STRING , STRING ) . build ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.endpoint.mvc.Health org.springframework.boot.actuate.endpoint.mvc.Health ( ) { return Health . up ( ) . withDetail ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
