<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.modelmbean.ModelMBeanInfo javax.management.modelmbean.ModelMBeanInfo = getMBeanInfoFromAssembler ( ) ; javax.management.modelmbean.ModelMBeanAttributeInfo javax.management.modelmbean.ModelMBeanAttributeInfo = javax.management.modelmbean.ModelMBeanInfo . javax.management.modelmbean.ModelMBeanAttributeInfo ( STRING ) ; assertTrue ( STRING , javax.management.modelmbean.ModelMBeanAttributeInfo . boolean ( ) ) ; assertTrue ( STRING , javax.management.modelmbean.ModelMBeanAttributeInfo . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.modelmbean.ModelMBeanInfo javax.management.modelmbean.ModelMBeanInfo = getMBeanInfoFromAssembler ( ) ; javax.management.modelmbean.ModelMBeanOperationInfo javax.management.modelmbean.ModelMBeanOperationInfo = javax.management.modelmbean.ModelMBeanInfo . javax.management.modelmbean.ModelMBeanOperationInfo ( STRING ) ; assertNotNull ( javax.management.modelmbean.ModelMBeanOperationInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.modelmbean.ModelMBeanInfo javax.management.modelmbean.ModelMBeanInfo = getMBeanInfoFromAssembler ( ) ; javax.management.modelmbean.ModelMBeanOperationInfo javax.management.modelmbean.ModelMBeanOperationInfo = javax.management.modelmbean.ModelMBeanInfo . javax.management.modelmbean.ModelMBeanOperationInfo ( STRING ) ; assertNotNull ( javax.management.modelmbean.ModelMBeanOperationInfo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = getContext ( ) . getBean ( STRING ) ; javax.management.modelmbean.ModelMBeanInfo javax.management.modelmbean.ModelMBeanInfo = getAssembler ( ) . getMBeanInfo ( java.lang.Object , STRING ) ; assertNotNull ( javax.management.modelmbean.ModelMBeanInfo ) ; assertEquals ( STRING , javax.management.modelmbean.ModelMBeanInfo . java.lang.String ( ) ) ; javax.management.modelmbean.ModelMBeanOperationInfo javax.management.modelmbean.ModelMBeanOperationInfo = javax.management.modelmbean.ModelMBeanInfo . javax.management.modelmbean.ModelMBeanOperationInfo ( STRING ) ; assertNotNull ( STRING , javax.management.modelmbean.ModelMBeanOperationInfo ) ; assertEquals ( STRING , javax.management.modelmbean.ModelMBeanOperationInfo . java.lang.String ( ) ) ; assertNull ( STRING , javax.management.modelmbean.ModelMBeanInfo . javax.management.modelmbean.ModelMBeanOperationInfo ( STRING ) ) ; javax.management.modelmbean.ModelMBeanAttributeInfo javax.management.modelmbean.ModelMBeanAttributeInfo = javax.management.modelmbean.ModelMBeanInfo . javax.management.modelmbean.ModelMBeanAttributeInfo ( STRING ) ; assertNotNull ( STRING , javax.management.modelmbean.ModelMBeanAttributeInfo ) ; assertEquals ( STRING , javax.management.modelmbean.ModelMBeanAttributeInfo . java.lang.String ( ) ) ; javax.management.modelmbean.ModelMBeanAttributeInfo javax.management.modelmbean.ModelMBeanAttributeInfo = javax.management.modelmbean.ModelMBeanInfo . javax.management.modelmbean.ModelMBeanAttributeInfo ( STRING ) ; assertNotNull ( STRING , javax.management.modelmbean.ModelMBeanAttributeInfo ) ; assertEquals ( STRING , STRING , javax.management.modelmbean.ModelMBeanAttributeInfo . javax.management.Descriptor ( ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jmx.export.annotation.JmxAttributeSource org.springframework.jmx.export.annotation.JmxAttributeSource ( ) { return new AnnotationJmxAttributeSource ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jmx.export.annotation.IJmxTestBean org.springframework.jmx.export.annotation.IJmxTestBean ( ) { return new AnnotationTestSubBean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( ) { return super. getExpectedAttributeCount ( ) + NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( ) { return super. getExpectedOperationCount ( ) + NUMBER ; }  <METHOD_END>
