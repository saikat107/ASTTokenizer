<METHOD_START> public void ( NettyInbound org.springframework.messaging.tcp.reactor.NettyInbound , NettyOutbound org.springframework.messaging.tcp.reactor.NettyOutbound , ReactorNettyCodec < P > org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P> , DirectProcessor < java.lang.Void > org.springframework.messaging.tcp.reactor.DirectProcessor<java.lang.Void> ) { this . org.springframework.messaging.tcp.reactor.NettyInbound = org.springframework.messaging.tcp.reactor.NettyInbound ; this . org.springframework.messaging.tcp.reactor.NettyOutbound = org.springframework.messaging.tcp.reactor.NettyOutbound ; this . org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P> = org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P> ; this . org.springframework.messaging.tcp.reactor.DirectProcessor<java.lang.Void> = org.springframework.messaging.tcp.reactor.DirectProcessor<java.lang.Void> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.tcp.reactor.ListenableFuture<java.lang.Void> < java.lang.Void > org.springframework.messaging.tcp.reactor.ListenableFuture<java.lang.Void> ( Message < P > org.springframework.messaging.tcp.reactor.Message<P> ) { ByteBuf org.springframework.messaging.tcp.reactor.ByteBuf = this . org.springframework.messaging.tcp.reactor.NettyOutbound . alloc ( ) . buffer ( ) ; this . org.springframework.messaging.tcp.reactor.ReactorNettyCodec<P> . encode ( org.springframework.messaging.tcp.reactor.Message<P> , org.springframework.messaging.tcp.reactor.ByteBuf ) ; Mono < java.lang.Void > org.springframework.messaging.tcp.reactor.Mono<java.lang.Void> = this . org.springframework.messaging.tcp.reactor.NettyOutbound . send ( Mono . just ( org.springframework.messaging.tcp.reactor.ByteBuf ) ) . then ( ) ; return new MonoToListenableFutureAdapter <> ( org.springframework.messaging.tcp.reactor.Mono<java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Runnable java.lang.Runnable , long long ) { ChannelPipeline org.springframework.messaging.tcp.reactor.ChannelPipeline = this . org.springframework.messaging.tcp.reactor.NettyInbound . context ( ) . channel ( ) . pipeline ( ) ; java.lang.String java.lang.String = NettyPipeline . OnChannelReadIdle ; if ( org.springframework.messaging.tcp.reactor.ChannelPipeline . context ( java.lang.String ) != null ) { org.springframework.messaging.tcp.reactor.ChannelPipeline . remove ( java.lang.String ) ; } this . org.springframework.messaging.tcp.reactor.NettyInbound . onReadIdle ( long , java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Runnable java.lang.Runnable , long long ) { this . org.springframework.messaging.tcp.reactor.NettyOutbound . onWriteIdle ( long , java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.messaging.tcp.reactor.DirectProcessor<java.lang.Void> . onComplete ( ) ; }  <METHOD_END>
