<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.aop.aspectj.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.DeclareParentsTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.DeclareParentsTests> ( ) ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.aop.aspectj.ITestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.aop.aspectj.ITestBean instanceof Lockable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . LONG_RUNNING ) ; java.lang.Object java.lang.Object = org.springframework.aop.aspectj.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( java.lang.Object ) ) ; Lockable org.springframework.aop.aspectj.Lockable = ( Lockable ) org.springframework.aop.aspectj.ITestBean ; assertFalse ( org.springframework.aop.aspectj.Lockable . locked ( ) ) ; org.springframework.aop.aspectj.ITestBean . getAge ( ) ; org.springframework.aop.aspectj.ITestBean . setName ( STRING ) ; org.springframework.aop.aspectj.Lockable . lock ( ) ; try { org.springframework.aop.aspectj.ITestBean . setName ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> public void void ( Lockable org.springframework.aop.aspectj.Lockable ) { if ( org.springframework.aop.aspectj.Lockable . locked ( ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
