<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.config.annotation.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( MessagingAnnotationPostProcessor .class ) ) ; RootBeanDefinition org.springframework.integration.config.annotation.RootBeanDefinition = new RootBeanDefinition ( DirectChannel .class ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.config.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.integration.config.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean .class ) ; org.springframework.integration.config.annotation.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( NUMBER ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.config.annotation.RootBeanDefinition ) ; org.springframework.integration.config.annotation.GenericApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean = ( org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean ) org.springframework.integration.config.annotation.GenericApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.config.annotation.MessageChannel = ( MessageChannel ) org.springframework.integration.config.annotation.GenericApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; org.springframework.integration.config.annotation.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.config.annotation.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( MessagingAnnotationPostProcessor .class ) ) ; BeanDefinitionBuilder org.springframework.integration.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( DirectChannel .class ) ; org.springframework.integration.config.annotation.BeanDefinitionBuilder . addConstructorArgValue ( null ) ; RootBeanDefinition org.springframework.integration.config.annotation.RootBeanDefinition = ( RootBeanDefinition ) org.springframework.integration.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.config.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.integration.config.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean .class ) ; org.springframework.integration.config.annotation.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( NUMBER ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.config.annotation.RootBeanDefinition ) ; org.springframework.integration.config.annotation.GenericApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean = ( org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean ) org.springframework.integration.config.annotation.GenericApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.config.annotation.MessageChannel = ( MessageChannel ) org.springframework.integration.config.annotation.GenericApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . void ( ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; org.springframework.integration.config.annotation.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.config.annotation.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( MessagingAnnotationPostProcessor .class ) ) ; RootBeanDefinition org.springframework.integration.config.annotation.RootBeanDefinition = new RootBeanDefinition ( DirectChannel .class ) ; org.springframework.integration.config.annotation.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( new RoundRobinLoadBalancingStrategy ( ) ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.config.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.integration.config.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean .class ) ; org.springframework.integration.config.annotation.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( NUMBER ) ; org.springframework.integration.config.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.config.annotation.RootBeanDefinition ) ; org.springframework.integration.config.annotation.GenericApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean = ( org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean ) org.springframework.integration.config.annotation.GenericApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.config.annotation.MessageChannel = ( MessageChannel ) org.springframework.integration.config.annotation.GenericApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = org.springframework.integration.config.annotation.SubscriberOrderTests.TestBean . java.util.List<java.lang.Integer> ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; org.springframework.integration.config.annotation.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) abstract void void ( Message < ? > org.springframework.integration.config.annotation.Message<?> );  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) abstract void void ( Message < ? > org.springframework.integration.config.annotation.Message<?> );  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> void void ( ) { this . java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; }  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) @ ServiceActivator ( inputChannel = STRING ) public void void ( Message < ? > org.springframework.integration.config.annotation.Message<?> ) { this . void ( NUMBER , org.springframework.integration.config.annotation.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING ) public void void ( Message < ? > org.springframework.integration.config.annotation.Message<?> ) { this . void ( NUMBER , org.springframework.integration.config.annotation.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) @ ServiceActivator ( inputChannel = STRING ) public void void ( Message < ? > org.springframework.integration.config.annotation.Message<?> ) { this . void ( NUMBER , org.springframework.integration.config.annotation.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) @ ServiceActivator ( inputChannel = STRING ) public void void ( Message < ? > org.springframework.integration.config.annotation.Message<?> ) { this . void ( NUMBER , org.springframework.integration.config.annotation.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING ) public void void ( Message < ? > org.springframework.integration.config.annotation.Message<?> ) { this . void ( NUMBER , org.springframework.integration.config.annotation.Message<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , Message < ? > org.springframework.integration.config.annotation.Message<?> ) { int int = NUMBER ; for ( int int : this . java.util.List<java.lang.Integer> ) { if ( int == int ) { int ++ ; if ( int >= this . int ) { throw new MessageRejectedException ( org.springframework.integration.config.annotation.Message<> , null ) ; } } } this . java.util.List<java.lang.Integer> . boolean ( int ) ; }  <METHOD_END>
