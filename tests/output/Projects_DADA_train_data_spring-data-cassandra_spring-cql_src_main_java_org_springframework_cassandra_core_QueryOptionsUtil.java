<METHOD_START> public static org.springframework.cassandra.core.PreparedStatement org.springframework.cassandra.core.PreparedStatement ( PreparedStatement org.springframework.cassandra.core.PreparedStatement , QueryOptions org.springframework.cassandra.core.QueryOptions ) { Assert . notNull ( org.springframework.cassandra.core.PreparedStatement , STRING ) ; if ( org.springframework.cassandra.core.QueryOptions != null ) { if ( org.springframework.cassandra.core.QueryOptions . getDriverConsistencyLevel ( ) != null ) { org.springframework.cassandra.core.PreparedStatement . setConsistencyLevel ( org.springframework.cassandra.core.QueryOptions . getDriverConsistencyLevel ( ) ) ; } else if ( org.springframework.cassandra.core.QueryOptions . getConsistencyLevel ( ) != null ) { org.springframework.cassandra.core.PreparedStatement . setConsistencyLevel ( ConsistencyLevelResolver . resolve ( org.springframework.cassandra.core.QueryOptions . getConsistencyLevel ( ) ) ) ; } if ( org.springframework.cassandra.core.QueryOptions . getDriverRetryPolicy ( ) != null ) { org.springframework.cassandra.core.PreparedStatement . setRetryPolicy ( org.springframework.cassandra.core.QueryOptions . getDriverRetryPolicy ( ) ) ; } else if ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) != null ) { org.springframework.cassandra.core.PreparedStatement . setRetryPolicy ( RetryPolicyResolver . resolve ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) ) ) ; } } return org.springframework.cassandra.core.PreparedStatement ; }  <METHOD_END>
<METHOD_START> public static < T extends org.springframework.cassandra.core.Statement > T T ( T T , QueryOptions org.springframework.cassandra.core.QueryOptions ) { Assert . notNull ( T , STRING ) ; if ( org.springframework.cassandra.core.QueryOptions != null ) { if ( org.springframework.cassandra.core.QueryOptions . getDriverConsistencyLevel ( ) != null ) { T . setConsistencyLevel ( org.springframework.cassandra.core.QueryOptions . getDriverConsistencyLevel ( ) ) ; } else if ( org.springframework.cassandra.core.QueryOptions . getConsistencyLevel ( ) != null ) { T . setConsistencyLevel ( ConsistencyLevelResolver . resolve ( org.springframework.cassandra.core.QueryOptions . getConsistencyLevel ( ) ) ) ; } if ( org.springframework.cassandra.core.QueryOptions . getDriverRetryPolicy ( ) != null ) { T . setRetryPolicy ( org.springframework.cassandra.core.QueryOptions . getDriverRetryPolicy ( ) ) ; } else if ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) != null ) { T . setRetryPolicy ( RetryPolicyResolver . resolve ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) ) ) ; } if ( org.springframework.cassandra.core.QueryOptions . getFetchSize ( ) != null ) { T . setFetchSize ( org.springframework.cassandra.core.QueryOptions . getFetchSize ( ) ) ; } if ( org.springframework.cassandra.core.QueryOptions . getReadTimeout ( ) != null ) { T . setReadTimeoutMillis ( org.springframework.cassandra.core.QueryOptions . getReadTimeout ( ) . intValue ( ) ) ; } if ( org.springframework.cassandra.core.QueryOptions . getTracing ( ) != null ) { if ( org.springframework.cassandra.core.QueryOptions . getTracing ( ) ) { T . enableTracing ( ) ; } else { T . disableTracing ( ) ; } } } return T ; }  <METHOD_END>
<METHOD_START> public static org.springframework.cassandra.core.Insert org.springframework.cassandra.core.Insert ( Insert org.springframework.cassandra.core.Insert , WriteOptions org.springframework.cassandra.core.WriteOptions ) { Assert . notNull ( org.springframework.cassandra.core.Insert , STRING ) ; if ( org.springframework.cassandra.core.WriteOptions != null ) { org.springframework.cassandra.core.Statement ( org.springframework.cassandra.core.Insert , org.springframework.cassandra.core.WriteOptions ) ; if ( org.springframework.cassandra.core.WriteOptions . getTtl ( ) != null ) { org.springframework.cassandra.core.Insert . using ( QueryBuilder . ttl ( org.springframework.cassandra.core.WriteOptions . getTtl ( ) ) ) ; } } return org.springframework.cassandra.core.Insert ; }  <METHOD_END>
<METHOD_START> public static org.springframework.cassandra.core.Update org.springframework.cassandra.core.Update ( Update org.springframework.cassandra.core.Update , WriteOptions org.springframework.cassandra.core.WriteOptions ) { Assert . notNull ( org.springframework.cassandra.core.Update , STRING ) ; if ( org.springframework.cassandra.core.WriteOptions != null ) { org.springframework.cassandra.core.Statement ( org.springframework.cassandra.core.Update , org.springframework.cassandra.core.WriteOptions ) ; if ( org.springframework.cassandra.core.WriteOptions . getTtl ( ) != null ) { org.springframework.cassandra.core.Update . using ( QueryBuilder . ttl ( org.springframework.cassandra.core.WriteOptions . getTtl ( ) ) ) ; } } return org.springframework.cassandra.core.Update ; }  <METHOD_END>
