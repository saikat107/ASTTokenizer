<METHOD_START> @ Test public void void ( ) java.io.FileNotFoundException , java.io.IOException { BuildResult org.springframework.boot.gradle.tasks.bundling.BuildResult = this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( STRING ) ; assertThat ( org.springframework.boot.gradle.tasks.bundling.BuildResult . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( java.io.File ( STRING ) ) . isFile ( ) ; assertThat ( java.io.File ( STRING ) ) . is ( org.springframework.boot.gradle.tasks.bundling.PomCondition ( ) . groupId ( STRING ) . artifactId ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . getProjectDir ( ) . getName ( ) ) . version ( STRING ) . noPackaging ( ) . noDependencies ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { BuildResult org.springframework.boot.gradle.tasks.bundling.BuildResult = this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . build ( STRING ) ; assertThat ( org.springframework.boot.gradle.tasks.bundling.BuildResult . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( java.io.File ( STRING ) ) . isFile ( ) ; assertThat ( java.io.File ( STRING ) ) . is ( org.springframework.boot.gradle.tasks.bundling.PomCondition ( ) . groupId ( STRING ) . artifactId ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . getProjectDir ( ) . getName ( ) ) . version ( STRING ) . packaging ( STRING ) . noDependencies ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . getProjectDir ( ) . getName ( ) ; return new java.io.File ( new java.io.File ( this . org.springframework.boot.gradle.tasks.bundling.GradleBuild . getProjectDir ( ) , STRING ) , java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.gradle.tasks.bundling.PomCondition org.springframework.boot.gradle.tasks.bundling.PomCondition ( ) { return new PomCondition ( ) ; }  <METHOD_END>
