<METHOD_START> protected void void ( java.lang.String java.lang.String ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( ) ) . thenReturn ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.xml.AbstractRegionParser . isRegionTemplate ( org.w3c.dom.Element ) ) . isEqualTo ( boolean ( java.lang.String , STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getLocalName ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; org.w3c.dom.Node org.w3c.dom.Node = mock ( org.w3c.dom.Node .class ) ; when ( org.w3c.dom.Element . org.w3c.dom.Node ( ) ) . thenReturn ( org.w3c.dom.Node ) ; when ( org.w3c.dom.Node . java.lang.String ( ) ) . thenReturn ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.xml.AbstractRegionParser . isSubRegion ( org.w3c.dom.Element ) ) . isEqualTo ( boolean ( java.lang.String , STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getParentNode ( ) ; verify ( org.w3c.dom.Node , times ( NUMBER ) ) . getLocalName ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return ( java.lang.String != null && java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractRegionParser org.springframework.data.gemfire.config.xml.AbstractRegionParser = spy ( AbstractRegionParser .class ) ; org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; doReturn ( org.springframework.data.gemfire.config.xml.AbstractRegionParserUnitTests .class ) . when ( org.springframework.data.gemfire.config.xml.AbstractRegionParser ) . getRegionFactoryClass ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.AbstractRegionParser . getBeanClass ( org.w3c.dom.Element ) ) . isEqualTo ( org.springframework.data.gemfire.config.xml.AbstractRegionParserUnitTests .class ) ; verify ( org.springframework.data.gemfire.config.xml.AbstractRegionParser , times ( NUMBER ) ) . getBeanClass ( eq ( org.w3c.dom.Element ) ) ; verify ( org.springframework.data.gemfire.config.xml.AbstractRegionParser , times ( NUMBER ) ) . getRegionFactoryClass ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.xml.AbstractRegionParser . getParentName ( org.w3c.dom.Element ) ) . isEqualTo ( STRING ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( null ) ; assertThat ( org.springframework.data.gemfire.config.xml.AbstractRegionParser . getParentName ( org.w3c.dom.Element ) ) . isNull ( ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractRegionParser org.springframework.data.gemfire.config.xml.AbstractRegionParser = spy ( AbstractRegionParser .class ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ) ; org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; org.w3c.dom.Node org.w3c.dom.Node = mock ( org.w3c.dom.Node .class ) ; when ( org.w3c.dom.Element . java.lang.String ( ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . org.w3c.dom.Node ( ) ) . thenReturn ( org.w3c.dom.Node ) ; when ( org.w3c.dom.Node . java.lang.String ( ) ) . thenReturn ( STRING ) ; org.springframework.data.gemfire.config.xml.AbstractRegionParser . doParse ( org.w3c.dom.Element , null , org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getRawBeanDefinition ( ) . isAbstract ( ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.config.xml.AbstractRegionParser , times ( NUMBER ) ) . doParse ( eq ( org.w3c.dom.Element ) , isNull ( ParserContext .class ) , eq ( org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ) ; verify ( org.springframework.data.gemfire.config.xml.AbstractRegionParser , times ( NUMBER ) ) . doParseRegion ( eq ( org.w3c.dom.Element ) , isNull ( ParserContext .class ) , eq ( org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) , eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractRegionParser org.springframework.data.gemfire.config.xml.AbstractRegionParser = spy ( AbstractRegionParser .class ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ) ; org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; org.w3c.dom.Node org.w3c.dom.Node = mock ( org.w3c.dom.Node .class ) ; when ( org.w3c.dom.Element . java.lang.String ( ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . org.w3c.dom.Node ( ) ) . thenReturn ( org.w3c.dom.Node ) ; when ( org.w3c.dom.Node . java.lang.String ( ) ) . thenReturn ( STRING ) ; org.springframework.data.gemfire.config.xml.AbstractRegionParser . doParse ( org.w3c.dom.Element , null , org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getRawBeanDefinition ( ) . isAbstract ( ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.config.xml.AbstractRegionParser , times ( NUMBER ) ) . doParse ( eq ( org.w3c.dom.Element ) , isNull ( ParserContext .class ) , eq ( org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ) ; verify ( org.springframework.data.gemfire.config.xml.AbstractRegionParser , times ( NUMBER ) ) . doParseRegion ( eq ( org.w3c.dom.Element ) , isNull ( ParserContext .class ) , eq ( org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) , eq ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . boolean ( matches ( STRING ) ) ) . thenReturn ( false ) ; when ( org.w3c.dom.Element . boolean ( matches ( STRING ) ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.config.xml.AbstractRegionParser . validateDataPolicyShortcutAttributesMutualExclusion ( org.w3c.dom.Element , null ) ; verify ( org.w3c.dom.Element ) . hasAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , never ( ) ) . hasAttribute ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . boolean ( matches ( STRING ) ) ) . thenReturn ( true ) ; when ( org.w3c.dom.Element . boolean ( matches ( STRING ) ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.config.xml.AbstractRegionParser . validateDataPolicyShortcutAttributesMutualExclusion ( org.w3c.dom.Element , null ) ; verify ( org.w3c.dom.Element ) . hasAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element ) . hasAttribute ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; when ( org.w3c.dom.Element . boolean ( matches ( STRING ) ) ) . thenReturn ( false ) ; when ( org.w3c.dom.Element . boolean ( matches ( STRING ) ) ) . thenReturn ( true ) ; org.springframework.data.gemfire.config.xml.AbstractRegionParser . validateDataPolicyShortcutAttributesMutualExclusion ( org.w3c.dom.Element , null ) ; verify ( org.w3c.dom.Element ) . hasAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , never ( ) ) . hasAttribute ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.Element org.w3c.dom.Element = mock ( org.w3c.dom.Element .class ) ; XmlReaderContext org.springframework.data.gemfire.config.xml.XmlReaderContext = mock ( XmlReaderContext .class ) ; ParserContext org.springframework.data.gemfire.config.xml.ParserContext = new ParserContext ( org.springframework.data.gemfire.config.xml.XmlReaderContext , null ) ; when ( org.w3c.dom.Element . boolean ( matches ( STRING ) ) ) . thenReturn ( true ) ; when ( org.w3c.dom.Element . boolean ( matches ( STRING ) ) ) . thenReturn ( true ) ; when ( org.w3c.dom.Element . java.lang.String ( ) ) . thenReturn ( STRING ) ; org.springframework.data.gemfire.config.xml.AbstractRegionParser . validateDataPolicyShortcutAttributesMutualExclusion ( org.w3c.dom.Element , org.springframework.data.gemfire.config.xml.ParserContext ) ; verify ( org.springframework.data.gemfire.config.xml.XmlReaderContext ) . error ( eq ( STRING ) , eq ( org.w3c.dom.Element ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<? extends org.springframework.data.gemfire.config.xml.AbstractRegionParserUnitTests.TestRegionParser> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.gemfire.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder , boolean boolean ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
