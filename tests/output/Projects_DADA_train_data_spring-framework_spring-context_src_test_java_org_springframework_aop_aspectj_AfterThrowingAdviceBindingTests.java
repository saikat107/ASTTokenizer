<METHOD_START> @ Before public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.AfterThrowingAdviceBindingTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.AfterThrowingAdviceBindingTests> ( ) ) ; org.springframework.aop.aspectj.ITestBean = ( ITestBean ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect = ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect ) org.springframework.aop.aspectj.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator = mock ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator .class ) ; org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect . void ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.Throwable .class ) public void void ( ) java.lang.Throwable { this . org.springframework.aop.aspectj.ITestBean . exceptional ( new java.lang.Throwable ( ) ) ; verify ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) . noArgs ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.Throwable .class ) public void void ( ) java.lang.Throwable { java.lang.Throwable java.lang.Throwable = new java.lang.Throwable ( ) ; this . org.springframework.aop.aspectj.ITestBean . exceptional ( java.lang.Throwable ) ; verify ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) . oneThrowable ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.Throwable .class ) public void void ( ) java.lang.Throwable { java.lang.Throwable java.lang.Throwable = new java.lang.Throwable ( ) ; this . org.springframework.aop.aspectj.ITestBean . exceptional ( java.lang.Throwable ) ; verify ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) . noArgs ( ) ; verify ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) . oneThrowable ( java.lang.Throwable ) ; verify ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) . noArgsOnThrowableMatch ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.Throwable .class ) public void void ( ) java.lang.Throwable { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; this . org.springframework.aop.aspectj.ITestBean . exceptional ( java.lang.RuntimeException ) ; verify ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) . oneRuntimeException ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.Throwable .class ) public void void ( ) java.lang.Throwable { this . org.springframework.aop.aspectj.ITestBean . exceptional ( new java.lang.Throwable ( ) ) ; verify ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) . noArgsOnThrowableMatch ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.Throwable .class ) public void void ( ) java.lang.Throwable { this . org.springframework.aop.aspectj.ITestBean . exceptional ( new java.lang.RuntimeException ( ) ) ; verify ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) . noArgsOnRuntimeExceptionMatch ( ) ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.Throwable java.lang.Throwable );  <METHOD_END>
<METHOD_START> void void ( java.lang.RuntimeException java.lang.RuntimeException );  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> public void void ( org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ) { this . org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator = org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable ) { this . org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator . void ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.RuntimeException java.lang.RuntimeException ) { this . org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator . void ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.aop.aspectj.AfterThrowingAdviceBindingTestAspect.AfterThrowingAdviceBindingCollaborator . void ( ) ; }  <METHOD_END>
