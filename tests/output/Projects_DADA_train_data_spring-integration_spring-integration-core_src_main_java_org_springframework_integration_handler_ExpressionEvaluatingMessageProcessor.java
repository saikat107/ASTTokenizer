<METHOD_START> public void ( Expression org.springframework.integration.handler.Expression ) { this( org.springframework.integration.handler.Expression , null ); }  <METHOD_END>
<METHOD_START> public void ( Expression org.springframework.integration.handler.Expression , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( org.springframework.integration.handler.Expression , STRING ) ; try { this . org.springframework.integration.handler.Expression = org.springframework.integration.handler.Expression ; this . java.lang.Class<T> = java.lang.Class<T> ; } catch ( ParseException org.springframework.integration.handler.ParseException ) { throw new java.lang.IllegalArgumentException ( STRING , org.springframework.integration.handler.ParseException ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { try { this . org.springframework.integration.handler.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; this . java.lang.Class<T> = null ; } catch ( ParseException org.springframework.integration.handler.ParseException ) { throw new java.lang.IllegalArgumentException ( STRING , org.springframework.integration.handler.ParseException ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { try { this . org.springframework.integration.handler.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; this . java.lang.Class<T> = java.lang.Class<T> ; } catch ( ParseException org.springframework.integration.handler.ParseException ) { throw new java.lang.IllegalArgumentException ( STRING , org.springframework.integration.handler.ParseException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Message < ? > org.springframework.integration.handler.Message<?> ) { return evaluateExpression ( this . org.springframework.integration.handler.Expression , org.springframework.integration.handler.Message<> , this . java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.integration.handler.Expression . getExpressionString ( ) + STRING ; }  <METHOD_END>
