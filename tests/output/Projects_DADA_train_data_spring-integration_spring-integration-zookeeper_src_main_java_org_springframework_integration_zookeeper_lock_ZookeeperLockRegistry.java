<METHOD_START> public void ( CuratorFramework org.springframework.integration.zookeeper.lock.CuratorFramework ) { this( org.springframework.integration.zookeeper.lock.CuratorFramework , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( CuratorFramework org.springframework.integration.zookeeper.lock.CuratorFramework , java.lang.String java.lang.String ) { this( org.springframework.integration.zookeeper.lock.CuratorFramework , new org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.DefaultKeyToPathStrategy ( java.lang.String ) ); }  <METHOD_END>
<METHOD_START> public void ( CuratorFramework org.springframework.integration.zookeeper.lock.CuratorFramework , org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.KeyToPathStrategy org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.KeyToPathStrategy ) { Assert . notNull ( org.springframework.integration.zookeeper.lock.CuratorFramework , STRING ) ; Assert . notNull ( org.springframework.integration.zookeeper.lock.CuratorFramework , STRING ) ; this . org.springframework.integration.zookeeper.lock.CuratorFramework = org.springframework.integration.zookeeper.lock.CuratorFramework ; this . org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.KeyToPathStrategy = org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.KeyToPathStrategy ; this . boolean = ! org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.KeyToPathStrategy . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( AsyncTaskExecutor org.springframework.integration.zookeeper.lock.AsyncTaskExecutor ) { Assert . notNull ( org.springframework.integration.zookeeper.lock.AsyncTaskExecutor , STRING ) ; ( ( ExecutorConfigurationSupport ) this . org.springframework.integration.zookeeper.lock.AsyncTaskExecutor ) . shutdown ( ) ; this . org.springframework.integration.zookeeper.lock.AsyncTaskExecutor = org.springframework.integration.zookeeper.lock.AsyncTaskExecutor ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.lang.String java.lang.String = this . org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.KeyToPathStrategy . java.lang.String ( ( java.lang.String ) java.lang.Object ) ; org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock = this . java.util.Map<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> . org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock ( java.lang.String ) ; if ( org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock == null ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> ) { org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock = this . java.util.Map<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> . org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock ( java.lang.String ) ; if ( org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock == null ) { org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock = new org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock ( this . org.springframework.integration.zookeeper.lock.CuratorFramework , this . org.springframework.integration.zookeeper.lock.AsyncTaskExecutor , java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> . org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock ( java.lang.String , org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock ) ; } if ( this . boolean ) { org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock . void ( java.lang.System . long ( ) ) ; } } } return org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) { if ( ! this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> < java.lang.String , org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock>> = this . java.util.Map<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock>> ( ) ; long long = java.lang.System . long ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock>> . boolean ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> < java.lang.String , org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock > java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock>> . java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> ( ) ; org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock = java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock> . org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock ( ) ; if ( long - org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock . long ( ) > long && ! org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock . boolean ( ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock>> . void ( ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( ! this . boolean ) { ( ( ExecutorConfigurationSupport ) this . org.springframework.integration.zookeeper.lock.AsyncTaskExecutor ) . shutdown ( ) ; } }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> default boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; if ( ! java.lang.String . boolean ( STRING ) ) { this . java.lang.String = java.lang.String + STRING ; } else { this . java.lang.String = java.lang.String ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> void ( CuratorFramework org.springframework.integration.zookeeper.lock.CuratorFramework , AsyncTaskExecutor org.springframework.integration.zookeeper.lock.AsyncTaskExecutor , java.lang.String java.lang.String ) { this . org.springframework.integration.zookeeper.lock.CuratorFramework = org.springframework.integration.zookeeper.lock.CuratorFramework ; this . org.springframework.integration.zookeeper.lock.InterProcessMutex = new InterProcessMutex ( org.springframework.integration.zookeeper.lock.CuratorFramework , java.lang.String ) ; this . org.springframework.integration.zookeeper.lock.AsyncTaskExecutor = org.springframework.integration.zookeeper.lock.AsyncTaskExecutor ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . org.springframework.integration.zookeeper.lock.InterProcessMutex . acquire ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( STRING + this . java.lang.String , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.InterruptedException { boolean boolean = false ; while ( ! boolean ) { boolean = boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { try { return boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException { java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> = null ; try { long long = java.lang.System . long ( ) ; java.util.concurrent.Future<java.lang.String> = this . org.springframework.integration.zookeeper.lock.AsyncTaskExecutor . submit ( new java.util.concurrent.Callable<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock .this . org.springframework.integration.zookeeper.lock.CuratorFramework . create ( ) . creatingParentContainersIfNeeded ( ) . withProtection ( ) . withMode ( CreateMode . EPHEMERAL_SEQUENTIAL ) . forPath ( org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock .this . java.lang.String ) ; } } ) ; long long = java.util.concurrent.TimeUnit . long ( long ) ; java.lang.String java.lang.String = java.util.concurrent.Future<java.lang.String> . java.lang.String ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( java.lang.String == null ) { java.util.concurrent.Future<java.lang.String> . boolean ( true ) ; return false ; } else { long = long - ( java.lang.System . long ( ) - long ) ; return this . org.springframework.integration.zookeeper.lock.InterProcessMutex . acquire ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } } catch ( java.util.concurrent.TimeoutException java.util.concurrent.TimeoutException ) { java.util.concurrent.Future<java.lang.String> . boolean ( true ) ; return false ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING + this . java.lang.String , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock .this . org.springframework.integration.zookeeper.lock.CuratorFramework . create ( ) . creatingParentContainersIfNeeded ( ) . withProtection ( ) . withMode ( CreateMode . EPHEMERAL_SEQUENTIAL ) . forPath ( org.springframework.integration.zookeeper.lock.ZookeeperLockRegistry.ZkLock .this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . org.springframework.integration.zookeeper.lock.InterProcessMutex . release ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING + this . java.lang.String , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.locks.Condition java.util.concurrent.locks.Condition ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.integration.zookeeper.lock.InterProcessMutex . isAcquiredInThisProcess ( ) ; }  <METHOD_END>
