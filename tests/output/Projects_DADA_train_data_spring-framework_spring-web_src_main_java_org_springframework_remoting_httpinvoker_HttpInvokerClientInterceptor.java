<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( HttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor ) { this . org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor = org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor ; }  <METHOD_END>
<METHOD_START> public org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor ( ) { if ( this . org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor == null ) { SimpleHttpInvokerRequestExecutor org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor = new SimpleHttpInvokerRequestExecutor ( ) ; org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor . setBeanClassLoader ( getBeanClassLoader ( ) ) ; this . org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor = org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor ; } return this . org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. afterPropertiesSet ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.httpinvoker.MethodInvocation ) throws java.lang.Throwable { if ( AopUtils . isToStringMethod ( org.springframework.remoting.httpinvoker.MethodInvocation . getMethod ( ) ) ) { return STRING + getServiceUrl ( ) + STRING ; } RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation = createRemoteInvocation ( org.springframework.remoting.httpinvoker.MethodInvocation ) ; RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ; try { org.springframework.remoting.httpinvoker.RemoteInvocationResult = org.springframework.remoting.httpinvoker.RemoteInvocationResult ( org.springframework.remoting.httpinvoker.RemoteInvocation , org.springframework.remoting.httpinvoker.MethodInvocation ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { RemoteAccessException org.springframework.remoting.httpinvoker.RemoteAccessException = org.springframework.remoting.httpinvoker.RemoteAccessException ( java.lang.Throwable ) ; throw ( org.springframework.remoting.httpinvoker.RemoteAccessException != null ? org.springframework.remoting.httpinvoker.RemoteAccessException : java.lang.Throwable ) ; } try { return recreateRemoteInvocationResult ( org.springframework.remoting.httpinvoker.RemoteInvocationResult ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.remoting.httpinvoker.RemoteInvocationResult . hasInvocationTargetException ( ) ) { throw java.lang.Throwable ; } else { throw new RemoteInvocationFailureException ( STRING + org.springframework.remoting.httpinvoker.MethodInvocation . getMethod ( ) + STRING + getServiceUrl ( ) + STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , MethodInvocation org.springframework.remoting.httpinvoker.MethodInvocation ) throws java.lang.Exception { return org.springframework.remoting.httpinvoker.RemoteInvocationResult ( org.springframework.remoting.httpinvoker.RemoteInvocation ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ) throws java.lang.Exception { return org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor ( ) . executeRequest ( this , org.springframework.remoting.httpinvoker.RemoteInvocation ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.RemoteAccessException org.springframework.remoting.httpinvoker.RemoteAccessException ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.net.ConnectException ) { return new RemoteConnectFailureException ( STRING + getServiceUrl ( ) + STRING , java.lang.Throwable ) ; } if ( java.lang.Throwable instanceof java.lang.ClassNotFoundException || java.lang.Throwable instanceof java.lang.NoClassDefFoundError || java.lang.Throwable instanceof java.io.InvalidClassException ) { return new RemoteAccessException ( STRING + getServiceUrl ( ) + STRING , java.lang.Throwable ) ; } if ( java.lang.Throwable instanceof java.lang.Exception ) { return new RemoteAccessException ( STRING + getServiceUrl ( ) + STRING , java.lang.Throwable ) ; } return null ; }  <METHOD_END>
