<METHOD_START> public void ( HandshakeHandler org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler ) { Assert . notNull ( org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler , STRING ) ; this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler = org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.transport.handler.TransportType org.springframework.web.socket.sockjs.transport.handler.TransportType ( ) { return TransportType . WEBSOCKET ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler ( ) { return this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.socket.sockjs.transport.handler.ServletContext ) { if ( this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler instanceof ServletContextAware ) { ( ( ServletContextAware ) this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler ) . setServletContext ( org.springframework.web.socket.sockjs.transport.handler.ServletContext ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! boolean ( ) ) { this . boolean = true ; if ( this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler ) . start ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( boolean ( ) ) { this . boolean = false ; if ( this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler ) . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( SockJsSession org.springframework.web.socket.sockjs.transport.handler.SockJsSession ) { return org.springframework.web.socket.sockjs.transport.handler.SockJsSession instanceof WebSocketServerSockJsSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ( java.lang.String java.lang.String , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return new WebSocketServerSockJsSession ( java.lang.String , getServiceConfig ( ) , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , SockJsSession org.springframework.web.socket.sockjs.transport.handler.SockJsSession ) throws org.springframework.web.socket.sockjs.transport.handler.SockJsException { WebSocketServerSockJsSession org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession = ( WebSocketServerSockJsSession ) org.springframework.web.socket.sockjs.transport.handler.SockJsSession ; try { org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler = new SockJsWebSocketHandler ( getServiceConfig ( ) , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession ) ; this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler . doHandshake ( org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession . getAttributes ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.transport.handler.WebSocketServerSockJsSession . tryCloseWithSockJsTransportError ( java.lang.Throwable , CloseStatus . SERVER_ERROR ) ; throw new SockJsTransportFailureException ( STRING , org.springframework.web.socket.sockjs.transport.handler.SockJsSession . getId ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws org.springframework.web.socket.sockjs.transport.handler.HandshakeFailureException { return this . org.springframework.web.socket.sockjs.transport.handler.HandshakeHandler . doHandshake ( org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest , org.springframework.web.socket.sockjs.transport.handler.ServerHttpResponse , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
