<METHOD_START> public void ( int int ) { this( int , NUMBER ); }  <METHOD_END>
<METHOD_START> public void ( int int , double double ) { this . int = int ; this . int = int * NUMBER ; this . double = double ; }  <METHOD_END>
<METHOD_START> public synchronized void void ( ) { this . long = NUMBER ; this . double = java.lang.Double . double ; this . double = NUMBER ; this . java.util.Deque<java.lang.Double> . void ( ) ; }  <METHOD_END>
<METHOD_START> public synchronized void void ( double double ) { if ( this . java.util.Deque<java.lang.Double> . int ( ) == this . int ) { this . java.util.Deque<java.lang.Double> . java.lang.Double ( ) ; } this . java.util.Deque<java.lang.Double> . boolean ( double ) ; this . long ++ ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.support.management.Statistics org.springframework.integration.support.management.Statistics ( ) { java.util.List<java.lang.Double> < java.lang.Double > java.util.List<java.lang.Double> ; long long ; synchronized ( this ) { java.util.List<java.lang.Double> = new java.util.ArrayList<java.lang.Double> < java.lang.Double > ( this . java.util.Deque<java.lang.Double> ) ; long = this . long ; } double double = NUMBER ; double double = NUMBER - NUMBER / this . int ; double double = NUMBER ; double double = NUMBER ; double double = this . double ; double double = this . double ; for ( java.lang.Double java.lang.Double : java.util.List<java.lang.Double> ) { java.lang.Double /= this . double ; if ( java.lang.Double > double ) { double = java.lang.Double ; } if ( java.lang.Double < double ) { double = java.lang.Double ; } double = double * double + java.lang.Double ; double = double * double + java.lang.Double * java.lang.Double ; double = double * double + NUMBER ; } synchronized ( this ) { if ( double > this . double ) { this . double = double ; } if ( double < this . double ) { this . double = double ; } } double double = double > NUMBER ? double / double : NUMBER ; double double = double > NUMBER ? double / double - double * double : NUMBER ; double double = double > NUMBER ? java.lang.Math . double ( double ) : NUMBER ; return new Statistics ( long , double == java.lang.Double . double ? NUMBER : double , double , double , double ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return ( int ) this . long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return org.springframework.integration.support.management.Statistics ( ) . getMean ( ) ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return org.springframework.integration.support.management.Statistics ( ) . getStandardDeviation ( ) ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return org.springframework.integration.support.management.Statistics ( ) . getMax ( ) ; }  <METHOD_END>
<METHOD_START> public double double ( ) { return org.springframework.integration.support.management.Statistics ( ) . getMin ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.support.management.Statistics org.springframework.integration.support.management.Statistics ( ) { return org.springframework.integration.support.management.Statistics ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.integration.support.management.Statistics ( ) . toString ( ) ; }  <METHOD_END>
