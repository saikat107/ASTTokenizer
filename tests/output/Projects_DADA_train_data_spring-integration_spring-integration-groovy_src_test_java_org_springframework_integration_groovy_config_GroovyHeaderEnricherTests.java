<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.groovy.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.integration.groovy.config.HeaderValueMessageProcessor<?>> < java.lang.String , HeaderValueMessageProcessor < ? > > java.util.Map<java.lang.String,org.springframework.integration.groovy.config.HeaderValueMessageProcessor<?>> = TestUtils . getPropertyValue ( org.springframework.integration.groovy.config.EventDrivenConsumer , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.integration.groovy.config.HeaderValueMessageProcessor<?>> . size ( ) ) ; HeaderValueMessageProcessor < ? > org.springframework.integration.groovy.config.HeaderValueMessageProcessor<?> = java.util.Map<java.lang.String,org.springframework.integration.groovy.config.HeaderValueMessageProcessor<?>> . get ( STRING ) ; assertThat ( org.springframework.integration.groovy.config.HeaderValueMessageProcessor<> . getClass ( ) . getName ( ) , Matchers . containsString ( STRING ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.groovy.config.HeaderValueMessageProcessor<> , STRING ) ; assertEquals ( GroovyScriptExecutingMessageProcessor .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.integration.groovy.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.groovy.config.QueueChannel . receive ( NUMBER ) . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
