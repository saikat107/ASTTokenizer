<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> = new java.util.ArrayList<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> <> ( NUMBER ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( new ByteBufferEncoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( CharSequenceEncoder . allMimeTypes ( ) ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new ResourceHttpMessageWriter ( ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( new Jaxb2XmlEncoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( new Jackson2JsonEncoder ( ) ) ) ; RequestedContentTypeResolver org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . build ( ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler = new ResponseBodyResultHandler ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.Object java.lang.Object = new org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.TestController ( ) ; java.lang.reflect.Method java.lang.reflect.Method ; java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.TestController .class ) . annotPresent ( ResponseBody .class ) . resolveMethod ( ) ; void ( java.lang.Object , java.lang.reflect.Method ) ; java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.TestController .class ) . annotNotPresent ( ResponseBody .class ) . resolveMethod ( ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , java.lang.reflect.Method ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler . supports ( org.springframework.web.reactive.result.method.annotation.HandlerResult ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.Object java.lang.Object = new org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.TestRestController ( ) ; java.lang.reflect.Method java.lang.reflect.Method ; java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.TestRestController .class ) . returning ( java.lang.String .class ) . resolveMethod ( ) ; void ( java.lang.Object , java.lang.reflect.Method ) ; java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.TestRestController .class ) . returning ( Mono .class , java.lang.String .class ) . resolveMethod ( ) ; void ( java.lang.Object , java.lang.reflect.Method ) ; java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.TestRestController .class ) . returning ( Single .class , java.lang.String .class ) . resolveMethod ( ) ; void ( java.lang.Object , java.lang.reflect.Method ) ; java.lang.reflect.Method = on ( org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandlerTests.TestRestController .class ) . returning ( Completable .class ) . resolveMethod ( ) ; void ( java.lang.Object , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , java.lang.reflect.Method ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler . supports ( org.springframework.web.reactive.result.method.annotation.HandlerResult ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { HandlerMethod org.springframework.web.reactive.result.method.annotation.HandlerMethod = new HandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; return new HandlerResult ( org.springframework.web.reactive.result.method.annotation.HandlerMethod , null , org.springframework.web.reactive.result.method.annotation.HandlerMethod . getReturnType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , this . org.springframework.web.reactive.result.method.annotation.ResponseBodyResultHandler . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.Single<java.lang.String> < java.lang.String > org.springframework.web.reactive.result.method.annotation.Single<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.method.annotation.Completable org.springframework.web.reactive.result.method.annotation.Completable ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ ResponseBody public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
