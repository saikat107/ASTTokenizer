<METHOD_START> void ( ApplicationContext org.springframework.boot.autoconfigure.security.oauth2.client.ApplicationContext ) { this . org.springframework.boot.autoconfigure.security.oauth2.client.ApplicationContext = org.springframework.boot.autoconfigure.security.oauth2.client.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( HttpSecurity org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity ) throws java.lang.Exception { OAuth2SsoProperties org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties = this . org.springframework.boot.autoconfigure.security.oauth2.client.ApplicationContext . getBean ( OAuth2SsoProperties .class ) ; org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity . apply ( new org.springframework.boot.autoconfigure.security.oauth2.client.SsoSecurityConfigurer.OAuth2ClientAuthenticationConfigurer ( org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter ( org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties ) ) ) ; void ( org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity , org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpSecurity org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity , OAuth2SsoProperties org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties )			throws java.lang.Exception { ExceptionHandlingConfigurer < HttpSecurity > org.springframework.boot.autoconfigure.security.oauth2.client.ExceptionHandlingConfigurer<org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity> = org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity . exceptionHandling ( ) ; ContentNegotiationStrategy org.springframework.boot.autoconfigure.security.oauth2.client.ContentNegotiationStrategy = org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity . getSharedObject ( ContentNegotiationStrategy .class ) ; if ( org.springframework.boot.autoconfigure.security.oauth2.client.ContentNegotiationStrategy == null ) { org.springframework.boot.autoconfigure.security.oauth2.client.ContentNegotiationStrategy = new HeaderContentNegotiationStrategy ( ) ; } MediaTypeRequestMatcher org.springframework.boot.autoconfigure.security.oauth2.client.MediaTypeRequestMatcher = new MediaTypeRequestMatcher ( org.springframework.boot.autoconfigure.security.oauth2.client.ContentNegotiationStrategy , MediaType . APPLICATION_XHTML_XML , new MediaType ( STRING , STRING ) , MediaType . TEXT_HTML , MediaType . TEXT_PLAIN ) ; org.springframework.boot.autoconfigure.security.oauth2.client.MediaTypeRequestMatcher . setIgnoredMediaTypes ( java.util.Collections . java.util.Set ( MediaType . ALL ) ) ; org.springframework.boot.autoconfigure.security.oauth2.client.ExceptionHandlingConfigurer<org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity> . defaultAuthenticationEntryPointFor ( new LoginUrlAuthenticationEntryPoint ( org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties . getLoginPath ( ) ) , org.springframework.boot.autoconfigure.security.oauth2.client.MediaTypeRequestMatcher ) ; org.springframework.boot.autoconfigure.security.oauth2.client.ExceptionHandlingConfigurer<org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity> . defaultAuthenticationEntryPointFor ( new HttpStatusEntryPoint ( HttpStatus . UNAUTHORIZED ) , new RequestHeaderRequestMatcher ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter ( OAuth2SsoProperties org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties ) { OAuth2RestOperations org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperations = this . org.springframework.boot.autoconfigure.security.oauth2.client.ApplicationContext . getBean ( UserInfoRestTemplateFactory .class ) . getUserInfoRestTemplate ( ) ; ResourceServerTokenServices org.springframework.boot.autoconfigure.security.oauth2.client.ResourceServerTokenServices = this . org.springframework.boot.autoconfigure.security.oauth2.client.ApplicationContext . getBean ( ResourceServerTokenServices .class ) ; OAuth2ClientAuthenticationProcessingFilter org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter = new OAuth2ClientAuthenticationProcessingFilter ( org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties . getLoginPath ( ) ) ; org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter . setRestTemplate ( org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperations ) ; org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter . setTokenServices ( org.springframework.boot.autoconfigure.security.oauth2.client.ResourceServerTokenServices ) ; org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter . setApplicationEventPublisher ( this . org.springframework.boot.autoconfigure.security.oauth2.client.ApplicationContext ) ; return org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter ; }  <METHOD_END>
<METHOD_START> void ( OAuth2ClientAuthenticationProcessingFilter org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter ) { this . org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter = org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpSecurity org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity ) throws java.lang.Exception { OAuth2ClientAuthenticationProcessingFilter org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter = this . org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter ; org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter . setSessionAuthenticationStrategy ( org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity . getSharedObject ( SessionAuthenticationStrategy .class ) ) ; org.springframework.boot.autoconfigure.security.oauth2.client.HttpSecurity . addFilterAfter ( org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAuthenticationProcessingFilter , AbstractPreAuthenticatedProcessingFilter .class ) ; }  <METHOD_END>
