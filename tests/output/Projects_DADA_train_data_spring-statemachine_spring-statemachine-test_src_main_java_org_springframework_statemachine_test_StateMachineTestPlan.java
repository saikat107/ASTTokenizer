<METHOD_START> public void ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> < java.lang.Object , StateMachine < S , E > > java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> , java.util.List<org.springframework.statemachine.test.StateMachineTestPlanStep<S,E>> < StateMachineTestPlanStep < S , E > > java.util.List<org.springframework.statemachine.test.StateMachineTestPlanStep<S,E>> , java.lang.Integer java.lang.Integer ) { this . java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> = java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> ; this . java.util.List<org.springframework.statemachine.test.StateMachineTestPlanStep<S,E>> = java.util.List<org.springframework.statemachine.test.StateMachineTestPlanStep<S,E>> ; if ( java.lang.Integer != null ) { this . java.lang.Integer = java.lang.Integer ; } }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> < StateMachine < S , E > , LatchStateMachineListener < S , E > > java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> = new java.util.HashMap<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> < StateMachine < S , E > , LatchStateMachineListener < S , E > > ( ) ; for ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> : java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) ) { LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> = new LatchStateMachineListener < S , E > ( ) ; java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . put ( org.springframework.statemachine.test.StateMachine<S,E> , org.springframework.statemachine.test.LatchStateMachineListener<S,E> ) ; org.springframework.statemachine.test.StateMachine<S,E> . addStateListener ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> ) ; } org.springframework.statemachine.test.Log . info ( STRING + StringUtils . collectionToCommaDelimitedString ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) ) ) ; int int = NUMBER ; for ( StateMachineTestPlanStep < S , E > org.springframework.statemachine.test.StateMachineTestPlanStep<S,E> : java.util.List<org.springframework.statemachine.test.StateMachineTestPlanStep<S,E>> ) { org.springframework.statemachine.test.Log . info ( STRING + int ++ ) ; for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { org.springframework.statemachine.test.LatchStateMachineListener<S,E> . reset ( step . expectStateChanged != null ? step . expectStateChanged : NUMBER , step . expectStateEntered != null ? step . expectStateEntered : NUMBER , step . expectStateExited != null ? step . expectStateExited : NUMBER , step . expectEventNotAccepted != null ? step . expectEventNotAccepted : NUMBER , step . expectTransition != null ? step . expectTransition : NUMBER , step . expectTransitionStarted != null ? step . expectTransitionStarted : NUMBER , step . expectTransitionEnded != null ? step . expectTransitionEnded : NUMBER , step . expectStateMachineStarted != null ? step . expectStateMachineStarted : NUMBER , step . expectStateMachineStopped != null ? step . expectStateMachineStopped : NUMBER , step . expectExtendedStateChanged != null ? step . expectExtendedStateChanged : NUMBER ) ; } for ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> : java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) ) { org.springframework.statemachine.test.StateMachine<S,E> . start ( ) ; } if ( step . expectStateMachineStarted != null ) { for ( java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> < StateMachine < S , E > , LatchStateMachineListener < S , E > > java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . entrySet ( ) ) { assertThat ( STRING + java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . getKey ( ) , java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . getValue ( ) . getStateMachineStartedLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( STRING + java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . getKey ( ) , java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . getValue ( ) . getStateMachineStarted ( ) . size ( ) , is ( step . expectStateMachineStarted ) ) ; } } if ( ! step . sendEvent . isEmpty ( ) ) { java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> < StateMachine < S , E > > java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> = new java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> < StateMachine < S , E > > ( ) ; if ( step . sendEventMachineId != null ) { java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> . add ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . get ( step . sendEventMachineId ) ) ; } else if ( step . sendEventToAll ) { java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> . addAll ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) ) ; } else { java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> . add ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) . iterator ( ) . next ( ) ) ; } assertThat ( STRING , java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> , not ( empty ( ) ) ) ; if ( ! step . sendEventParallel ) { for ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> : java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> ) { for ( E E : step . sendEvent ) { org.springframework.statemachine.test.Log . info ( STRING + E + STRING + org.springframework.statemachine.test.StateMachine<S,E> ) ; org.springframework.statemachine.test.StateMachine<S,E> . sendEvent ( E ) ; } } } else { for ( E E : step . sendEvent ) { void ( java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> , E ) ; } } } else if ( ! step . sendMessage . isEmpty ( ) ) { java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> < StateMachine < S , E > > java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> = new java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> < StateMachine < S , E > > ( ) ; if ( step . sendEventMachineId != null ) { java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> . add ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . get ( step . sendEventMachineId ) ) ; } else if ( step . sendEventToAll ) { java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> . addAll ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) ) ; } else { java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> . add ( java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) . iterator ( ) . next ( ) ) ; } assertThat ( STRING , java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> , not ( empty ( ) ) ) ; for ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> : java.util.ArrayList<org.springframework.statemachine.test.StateMachine<S,E>> ) { for ( Message < E > org.springframework.statemachine.test.Message<E> : step . sendMessage ) { org.springframework.statemachine.test.Log . info ( STRING + org.springframework.statemachine.test.Message<E> + STRING + org.springframework.statemachine.test.StateMachine<S,E> ) ; org.springframework.statemachine.test.StateMachine<S,E> . sendEvent ( org.springframework.statemachine.test.Message<E> ) ; } } } if ( step . expectStateChanged != null ) { for ( java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> < StateMachine < S , E > , LatchStateMachineListener < S , E > > java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . entrySet ( ) ) { assertThat ( STRING + java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . getKey ( ) , java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . getValue ( ) . getStateChangedLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( STRING + java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . getKey ( ) , java.util.Map.Entry<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . getValue ( ) . getStateChanged ( ) . size ( ) , is ( step . expectStateChanged ) ) ; } } if ( step . expectStateEntered != null ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getStateEnteredLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getStateEntered ( ) . size ( ) , is ( step . expectStateEntered ) ) ; } } if ( step . expectStateExited != null ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getStateExitedLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getStateExited ( ) . size ( ) , is ( step . expectStateExited ) ) ; } } if ( step . expectEventNotAccepted != null ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getEventNotAcceptedLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getEventNotAccepted ( ) . size ( ) , is ( step . expectEventNotAccepted ) ) ; } } if ( step . expectTransition != null ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getTransitionLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getTransition ( ) . size ( ) , is ( step . expectTransition ) ) ; } } if ( step . expectTransitionStarted != null ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getTransitionStartedLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getTransitionStarted ( ) . size ( ) , is ( step . expectTransitionStarted ) ) ; } } if ( step . expectTransitionEnded != null ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getTransitionEndedLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getTransitionEnded ( ) . size ( ) , is ( step . expectTransitionEnded ) ) ; } } if ( step . expectStateMachineStopped != null ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getStateMachineStoppedLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getStateMachineStopped ( ) . size ( ) , is ( step . expectStateMachineStopped ) ) ; } } if ( ! step . expectStates . isEmpty ( ) ) { for ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> : java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.StateMachine<S,E> . getState ( ) , notNullValue ( ) ) ; java.util.Collection<org.springframework.statemachine.test.Matcher<? super S>> < Matcher < ? super S > > java.util.Collection<org.springframework.statemachine.test.Matcher<? super S>> = new java.util.ArrayList<org.springframework.statemachine.test.Matcher<? super S>> < Matcher < ? super S > > ( ) ; for ( S S : step . expectStates ) { java.util.Collection<org.springframework.statemachine.test.Matcher<? super S>> . add ( is ( S ) ) ; } assertThat ( org.springframework.statemachine.test.StateMachine<S,E> . getState ( ) . getIds ( ) , containsInAnyOrder ( java.util.Collection<org.springframework.statemachine.test.Matcher<? super S>> ) ) ; } } if ( ! step . expectStatesEntrered . isEmpty ( ) ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { java.util.Collection<S> < S > java.util.Collection<S> = new java.util.ArrayList<S> < S > ( ) ; for ( State < S , E > org.springframework.statemachine.test.State<S,E> : org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getStateEntered ( ) ) { java.util.Collection<S> . boolean ( org.springframework.statemachine.test.State<S,E> . getId ( ) ) ; } assertThat ( step . expectStatesEntrered , contains ( java.util.Collection<S> . java.lang.Object[] ( ) ) ) ; } } if ( ! step . expectStatesExited . isEmpty ( ) ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { java.util.Collection<S> < S > java.util.Collection<S> = new java.util.ArrayList<S> < S > ( ) ; for ( State < S , E > org.springframework.statemachine.test.State<S,E> : org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getStateExited ( ) ) { java.util.Collection<S> . boolean ( org.springframework.statemachine.test.State<S,E> . getId ( ) ) ; } assertThat ( step . expectStatesExited , contains ( java.util.Collection<S> . java.lang.Object[] ( ) ) ) ; } } if ( step . expectExtendedStateChanged != null ) { for ( LatchStateMachineListener < S , E > org.springframework.statemachine.test.LatchStateMachineListener<S,E> : java.util.Map<org.springframework.statemachine.test.StateMachine<S,E>,org.springframework.statemachine.test.LatchStateMachineListener<S,E>> . values ( ) ) { assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getExtendedStateChangedLatch ( ) . await ( java.lang.Integer , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.test.LatchStateMachineListener<S,E> . getExtendedStateChanged ( ) . size ( ) , is ( step . expectExtendedStateChanged ) ) ; } } if ( ! step . expectVariableKeys . isEmpty ( ) ) { for ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> : java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.test.StateMachine<S,E> . getExtendedState ( ) . getVariables ( ) ; for ( java.lang.Object java.lang.Object : step . expectVariableKeys ) { assertThat ( STRING + java.lang.Object + STRING , java.util.Map<java.lang.Object,java.lang.Object> . boolean ( java.lang.Object ) , is ( true ) ) ; } } } if ( ! step . expectVariables . isEmpty ( ) ) { for ( StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> : java.util.Map<java.lang.Object,org.springframework.statemachine.test.StateMachine<S,E>> . values ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = org.springframework.statemachine.test.StateMachine<S,E> . getExtendedState ( ) . getVariables ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : step . expectVariables . entrySet ( ) ) { assertThat ( STRING + java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) + STRING , java.util.Map<java.lang.Object,java.lang.Object> . boolean ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) , is ( true ) ) ; assertThat ( STRING + java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) + STRING , java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) , is ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ) ; } } } } }  <METHOD_END>
<METHOD_START> private void void ( final java.util.List<org.springframework.statemachine.test.StateMachine<S,E>> < StateMachine < S , E > > java.util.List<org.springframework.statemachine.test.StateMachine<S,E>> , final E E ) { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.ArrayList<java.lang.Thread> < java.lang.Thread > java.util.ArrayList<java.lang.Thread> = new java.util.ArrayList<java.lang.Thread> < java.lang.Thread > ( ) ; int int = java.util.List<org.springframework.statemachine.test.StateMachine<S,E>> . size ( ) ; for ( int int = NUMBER ; int < int ; ++ int ) { final StateMachine < S , E > org.springframework.statemachine.test.StateMachine<S,E> = java.util.List<org.springframework.statemachine.test.StateMachine<S,E>> . get ( int ) ; java.lang.Runnable java.lang.Runnable = new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.statemachine.test.StateMachine<S,E> . sendEvent ( E ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} } } ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( java.lang.Runnable , STRING + int ) ; java.util.ArrayList<java.lang.Thread> . boolean ( java.lang.Thread ) ; java.lang.Thread . void ( ) ; } java.util.concurrent.CountDownLatch . void ( ) ; for ( java.lang.Thread java.lang.Thread : java.util.ArrayList<java.lang.Thread> ) { try { java.lang.Thread . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {			} } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.statemachine.test.StateMachine<S,E> . sendEvent ( E ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {					} }  <METHOD_END>
