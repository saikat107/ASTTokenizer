<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver = new ServletRequestMethodArgumentResolver ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolverTests> ( ) . java.lang.reflect.Method ( STRING , ServletRequest .class , MultipartRequest .class , HttpSession .class , java.security.Principal .class , java.util.Locale .class , java.io.InputStream .class , java.io.Reader .class , WebRequest .class , java.util.TimeZone .class , java.time.ZoneId .class , HttpMethod .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , java.lang.Object ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.web.servlet.mvc.method.annotation.MockHttpSession = new MockHttpSession ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setSession ( org.springframework.web.servlet.mvc.method.annotation.MockHttpSession ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpSession , java.lang.Object ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.security.Principal java.security.Principal = new java.security.Principal ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setUserPrincipal ( java.security.Principal ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , java.security.Principal , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertNull ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPreferredLocale ( java.util.Locale ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , java.util.Locale , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new FixedLocaleResolver ( java.util.Locale ) ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , java.util.Locale , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertEquals ( STRING , java.util.TimeZone . java.util.TimeZone ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.TimeZone java.util.TimeZone = java.util.TimeZone . java.util.TimeZone ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new FixedLocaleResolver ( java.util.Locale . java.util.Locale , java.util.TimeZone ) ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertEquals ( STRING , java.util.TimeZone , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertEquals ( STRING , java.time.ZoneId . java.time.ZoneId ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.TimeZone java.util.TimeZone = java.util.TimeZone . java.util.TimeZone ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( DispatcherServlet . LOCALE_RESOLVER_ATTRIBUTE , new FixedLocaleResolver ( java.util.Locale . java.util.Locale , java.util.TimeZone ) ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertEquals ( STRING , java.util.TimeZone . java.time.ZoneId ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getRequest ( ) . getInputStream ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getRequest ( ) . getReader ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletRequestMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertSame ( STRING , HttpMethod . valueOf ( org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getRequest ( ) . getMethod ( ) ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( ServletRequest org.springframework.web.servlet.mvc.method.annotation.ServletRequest , MultipartRequest org.springframework.web.servlet.mvc.method.annotation.MultipartRequest , HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession , java.security.Principal java.security.Principal , java.util.Locale java.util.Locale , java.io.InputStream java.io.InputStream , java.io.Reader java.io.Reader , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest , java.util.TimeZone java.util.TimeZone , java.time.ZoneId java.time.ZoneId , HttpMethod org.springframework.web.servlet.mvc.method.annotation.HttpMethod ) {	}  <METHOD_END>
