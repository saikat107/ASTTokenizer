<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( Region org.springframework.integration.gemfire.outbound.Region ) { Assert . notNull ( org.springframework.integration.gemfire.outbound.Region , STRING ) ; this . org.springframework.integration.gemfire.outbound.GemfireTemplate . setRegion ( org.springframework.integration.gemfire.outbound.Region ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; this . org.springframework.integration.gemfire.outbound.GemfireTemplate . afterPropertiesSet ( ) ; this . org.springframework.integration.gemfire.outbound.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( Message < ? > org.springframework.integration.gemfire.outbound.Message<?> ) { java.lang.Object java.lang.Object = org.springframework.integration.gemfire.outbound.Message<> . getPayload ( ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . size ( ) > NUMBER ) ? java.util.Map<java.lang.Object,java.lang.Object> ( org.springframework.integration.gemfire.outbound.Message<> ) : null ; if ( java.util.Map<,> == null ) { Assert . state ( java.lang.Object instanceof java.util.Map , STRING ) ; java.util.Map<?,?> = ( java.util.Map ) java.lang.Object ; } final java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = java.util.Map<,> ; this . org.springframework.integration.gemfire.outbound.GemfireTemplate . execute ( new GemfireCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Region org.springframework.integration.gemfire.outbound.Region ) throws org.springframework.integration.gemfire.outbound.GemFireCheckedException , org.springframework.integration.gemfire.outbound.GemFireException { org.springframework.integration.gemfire.outbound.Region . putAll ( java.util.Map<,> ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Region org.springframework.integration.gemfire.outbound.Region ) throws org.springframework.integration.gemfire.outbound.GemFireCheckedException , org.springframework.integration.gemfire.outbound.GemFireException { org.springframework.integration.gemfire.outbound.Region . putAll ( java.util.Map<,> ) ; return null ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( Message < ? > org.springframework.integration.gemfire.outbound.Message<?> ) { if ( this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . size ( ) == NUMBER ) { return null ; } else { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; for ( java.util.Map.Entry<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> < Expression , Expression > java.util.Map.Entry<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> : this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . entrySet ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . getKey ( ) . getValue ( this . org.springframework.integration.gemfire.outbound.EvaluationContext , org.springframework.integration.gemfire.outbound.Message<> ) , java.util.Map.Entry<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . getValue ( ) . getValue ( this . org.springframework.integration.gemfire.outbound.EvaluationContext , org.springframework.integration.gemfire.outbound.Message<> ) ) ; } return java.util.Map<java.lang.Object,java.lang.Object> ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { Assert . notNull ( java.util.Map<java.lang.String,java.lang.String> , STRING ) ; if ( this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . size ( ) > NUMBER ) { this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . clear ( ) ; } for ( java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . put ( org.springframework.integration.gemfire.outbound.SpelExpressionParser . parseExpression ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) , org.springframework.integration.gemfire.outbound.SpelExpressionParser . parseExpression ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> < Expression , Expression > java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> ) { Assert . notNull ( java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> , STRING ) ; if ( this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . size ( ) > NUMBER ) { this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . clear ( ) ; } this . java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> . putAll ( java.util.Map<org.springframework.integration.gemfire.outbound.Expression,org.springframework.integration.gemfire.outbound.Expression> ) ; }  <METHOD_END>
