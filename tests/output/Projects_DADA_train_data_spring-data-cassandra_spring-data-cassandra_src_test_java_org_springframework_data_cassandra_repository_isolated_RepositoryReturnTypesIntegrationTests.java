<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { AllPossibleTypes .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.isolated.SchemaAction org.springframework.data.cassandra.repository.isolated.SchemaAction ( ) { return SchemaAction . RECREATE_DROP_UNUSED ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . deleteAll ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.Optional<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.Optional<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.util.Optional<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> . isPresent ( ) ) . isTrue ( ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> . get ( ) ) . isInstanceOf ( AllPossibleTypes .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> . isEmpty ( ) ) . isFalse ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ) . contains ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.UnknownHostException { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setInet ( java.net.InetAddress . java.net.InetAddress ( STRING ) ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.net.InetAddress java.net.InetAddress = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.net.InetAddress ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.net.InetAddress ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getInet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.UnknownHostException { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setInet ( java.net.InetAddress . java.net.InetAddress ( STRING ) ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.Optional<java.net.InetAddress> < java.net.InetAddress > java.util.Optional<java.net.InetAddress> = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.util.Optional<java.net.InetAddress> ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.util.Optional<java.net.InetAddress> . boolean ( ) ) . isTrue ( ) ; assertThat ( java.util.Optional<java.net.InetAddress> . java.net.InetAddress ( ) ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getInet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBoxedByte ( java.lang.Byte . java.lang.Byte ( STRING ) ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.lang.Byte java.lang.Byte = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.lang.Byte ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.lang.Byte ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBoxedByte ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setPrimitiveByte ( java.lang.Byte . byte ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; byte byte = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . byte ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( byte ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getPrimitiveByte ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBoxedShort ( java.lang.Short . short ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.lang.Short java.lang.Short = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.lang.Short ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.lang.Short ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBoxedShort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBoxedLong ( java.lang.Long . long ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.lang.Long java.lang.Long = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.lang.Long ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.lang.Long ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBoxedLong ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBoxedInteger ( java.lang.Integer . int ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.lang.Integer java.lang.Integer = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.lang.Integer ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.lang.Integer ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBoxedInteger ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBoxedDouble ( java.lang.Double . double ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.lang.Double java.lang.Double = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.lang.Double ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.lang.Double ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBoxedDouble ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBoxedInteger ( java.lang.Integer . int ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.lang.Double java.lang.Double = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.lang.Double ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.lang.Double ) . isCloseTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBoxedInteger ( ) , offset ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBoxedBoolean ( true ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.lang.Boolean java.lang.Boolean = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.lang.Boolean ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.lang.Boolean ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBoxedBoolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setDate ( LocalDate . fromDaysSinceEpoch ( NUMBER ) ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; LocalDate org.springframework.data.cassandra.repository.isolated.LocalDate = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . org.springframework.data.cassandra.repository.isolated.LocalDate ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.isolated.LocalDate ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setTimestamp ( new java.util.Date ( NUMBER ) ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.Date java.util.Date = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.util.Date ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.util.Date ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBigDecimal ( java.math.BigDecimal . java.math.BigDecimal ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.math.BigDecimal java.math.BigDecimal = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.math.BigDecimal ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.math.BigDecimal ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBigDecimal ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBigInteger ( java.math.BigInteger . java.math.BigInteger ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.math.BigInteger java.math.BigInteger = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.math.BigInteger ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.math.BigInteger ) . isEqualTo ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getBigInteger ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AllPossibleTypes org.springframework.data.cassandra.repository.isolated.AllPossibleTypes = new AllPossibleTypes ( STRING ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setPrimitiveInteger ( NUMBER ) ; org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . setBigInteger ( java.math.BigInteger . java.math.BigInteger ) ; org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . save ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.cassandra.repository.isolated.RepositoryReturnTypesIntegrationTests.AllPossibleTypesRepository . java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.cassandra.repository.isolated.AllPossibleTypes . getId ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( ( java.lang.Object ) java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( ( java.lang.Object ) java.math.BigInteger . java.math.BigInteger ) ; }  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.Optional<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.Optional<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> < AllPossibleTypes > java.util.List<org.springframework.data.cassandra.repository.isolated.AllPossibleTypes> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.net.InetAddress java.net.InetAddress ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.Optional<java.net.InetAddress> < java.net.InetAddress > java.util.Optional<java.net.InetAddress> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Byte java.lang.Byte ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) byte byte ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Short java.lang.Short ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Long java.lang.Long ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Double java.lang.Double ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Double java.lang.Double ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.lang.Boolean java.lang.Boolean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) org.springframework.data.cassandra.repository.isolated.LocalDate org.springframework.data.cassandra.repository.isolated.LocalDate ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.Date java.util.Date ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.math.BigDecimal java.math.BigDecimal ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.math.BigInteger java.math.BigInteger ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String java.lang.String );  <METHOD_END>
