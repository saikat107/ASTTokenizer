<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> = new SimpleMongoRepository < Person , java.lang.String > ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<org.springframework.data.mongodb.repository.support.Person,java.lang.String> , org.springframework.data.mongodb.repository.support.MongoTemplate ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . deleteAll ( ) ; org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING , NUMBER ) ; org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING , NUMBER , Sex . FEMALE ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( java.util.List<org.springframework.data.mongodb.repository.support.Person> . size ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findOne ( org.springframework.data.mongodb.repository.support.Person . getId ( ) ) . get ( ) ; assertThat ( org.springframework.data.mongodb.repository.support.Person , is ( org.springframework.data.mongodb.repository.support.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . delete ( org.springframework.data.mongodb.repository.support.Person ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( java.util.List<org.springframework.data.mongodb.repository.support.Person> . size ( ) - NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.support.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . delete ( org.springframework.data.mongodb.repository.support.Person . getId ( ) ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( java.util.List<org.springframework.data.mongodb.repository.support.Person> . size ( ) - NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , not ( hasItem ( org.springframework.data.mongodb.repository.support.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( STRING + java.lang.String , STRING + java.lang.String , NUMBER ) ; org.springframework.data.mongodb.repository.support.Person = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . insert ( org.springframework.data.mongodb.repository.support.Person ) ; Person org.springframework.data.mongodb.repository.support.Person = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findOne ( org.springframework.data.mongodb.repository.support.Person . getId ( ) ) . get ( ) ; assertThat ( org.springframework.data.mongodb.repository.support.Person , is ( equalTo ( org.springframework.data.mongodb.repository.support.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> < java.lang.String , Person > java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.repository.support.Person> < java.lang.String , Person > ( ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = new java.util.ArrayList<org.springframework.data.mongodb.repository.support.Person> < Person > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( STRING + int + java.lang.String , STRING + java.lang.String + int , NUMBER + int ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> . put ( org.springframework.data.mongodb.repository.support.Person . getId ( ) , org.springframework.data.mongodb.repository.support.Person ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> . add ( org.springframework.data.mongodb.repository.support.Person ) ; } java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . insert ( java.util.List<org.springframework.data.mongodb.repository.support.Person> ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( java.util.List<org.springframework.data.mongodb.repository.support.Person> . size ( ) ) ) ; void ( java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> , java.util.List<org.springframework.data.mongodb.repository.support.Person> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> < java.lang.String , Person > java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> = new java.util.HashMap<java.lang.String,org.springframework.data.mongodb.repository.support.Person> < java.lang.String , Person > ( ) ; java.util.Set<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.Set<org.springframework.data.mongodb.repository.support.Person> = new java.util.HashSet<org.springframework.data.mongodb.repository.support.Person> < Person > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( STRING + int + java.lang.String , STRING + int + java.lang.String , NUMBER + int ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> . put ( org.springframework.data.mongodb.repository.support.Person . getId ( ) , org.springframework.data.mongodb.repository.support.Person ) ; java.util.Set<org.springframework.data.mongodb.repository.support.Person> . add ( org.springframework.data.mongodb.repository.support.Person ) ; } java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . insert ( java.util.Set<org.springframework.data.mongodb.repository.support.Person> ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( java.util.Set<org.springframework.data.mongodb.repository.support.Person> . size ( ) ) ) ; void ( java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> , java.util.List<org.springframework.data.mongodb.repository.support.Person> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setLastname ( STRING ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; Page < Person > org.springframework.data.mongodb.repository.support.Page<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.Page<org.springframework.data.mongodb.repository.support.Person> . getContent ( ) , hasItems ( org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.Page<org.springframework.data.mongodb.repository.support.Person> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.Page<org.springframework.data.mongodb.repository.support.Person> . getTotalPages ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setLastname ( STRING ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; Page < Person > org.springframework.data.mongodb.repository.support.Page<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) , new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.Page<org.springframework.data.mongodb.repository.support.Person> . getContent ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.Page<org.springframework.data.mongodb.repository.support.Person> . getTotalPages ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setLastname ( STRING ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , containsInAnyOrder ( org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.Person . setAddress ( new Address ( STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; org.springframework.data.mongodb.repository.support.Person . setAddress ( new Address ( STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setAddress ( org.springframework.data.mongodb.repository.support.Person . getAddress ( ) ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasItem ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.Person . setAddress ( new Address ( STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; org.springframework.data.mongodb.repository.support.Person . setAddress ( new Address ( STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setAddress ( new Address ( null , null , STRING ) ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasItems ( org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.Person . setAddress ( new Address ( STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setAddress ( new Address ( null , null , STRING ) ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; Example < Person > org.springframework.data.mongodb.repository.support.Example<org.springframework.data.mongodb.repository.support.Person> = Example . of ( org.springframework.data.mongodb.repository.support.Person , matching ( ) . withIncludeNullValues ( ) ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( org.springframework.data.mongodb.repository.support.Example<org.springframework.data.mongodb.repository.support.Person> ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.Person . setAddress ( new Address ( STRING , STRING , STRING ) ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setAddress ( org.springframework.data.mongodb.repository.support.Person . getAddress ( ) ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; Example < Person > org.springframework.data.mongodb.repository.support.Example<org.springframework.data.mongodb.repository.support.Person> = Example . of ( org.springframework.data.mongodb.repository.support.Person , matching ( ) . withIncludeNullValues ( ) ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( org.springframework.data.mongodb.repository.support.Example<org.springframework.data.mongodb.repository.support.Person> ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasItem ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setLastname ( STRING ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; Example < Person > org.springframework.data.mongodb.repository.support.Example<org.springframework.data.mongodb.repository.support.Person> = Example . of ( org.springframework.data.mongodb.repository.support.Person , matching ( ) . withStringMatcher ( StringMatcher . STARTING ) ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( org.springframework.data.mongodb.repository.support.Example<org.springframework.data.mongodb.repository.support.Person> ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasItems ( org.springframework.data.mongodb.repository.support.Person , org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.mongodb.repository.support.User = new User ( ) ; org.springframework.data.mongodb.repository.support.User . setId ( STRING ) ; org.springframework.data.mongodb.repository.support.User . setUsername ( STRING ) ; org.springframework.data.mongodb.repository.support.MongoTemplate . save ( org.springframework.data.mongodb.repository.support.User ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING ) ; org.springframework.data.mongodb.repository.support.Person . setCreator ( org.springframework.data.mongodb.repository.support.User ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setCreator ( org.springframework.data.mongodb.repository.support.User ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasItem ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING ) ; org.springframework.data.mongodb.repository.support.Person . setLocation ( new Point ( NUMBER , - NUMBER ) ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setLocation ( org.springframework.data.mongodb.repository.support.Person . getLocation ( ) ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasItem ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( STRING , STRING ) ; org.springframework.data.mongodb.repository.support.Person . setLocation ( new GeoJsonPoint ( NUMBER , - NUMBER ) ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.Person ) ; Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setLocation ( org.springframework.data.mongodb.repository.support.Person . getLocation ( ) ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasItem ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.Person> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended = new org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended ( ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended . setLastname ( STRING ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . save ( org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended = new org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended ( ) ; org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended . setLastname ( STRING ) ; void ( org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended , STRING , STRING , STRING ) ; java.util.List<org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended> < org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended > java.util.List<org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended> = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findAll ( Example . of ( org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended> , hasItem ( org.springframework.data.mongodb.repository.support.SimpleMongoRepositoryTests.PersonExtended ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setFirstname ( STRING ) ; org.springframework.data.mongodb.repository.support.Person . setLastname ( STRING ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; Person org.springframework.data.mongodb.repository.support.Person = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . findOne ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.Person , is ( equalTo ( org.springframework.data.mongodb.repository.support.Person ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setFirstname ( STRING ) ; org.springframework.data.mongodb.repository.support.Person . setLastname ( STRING ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; boolean boolean = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . exists ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( boolean , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.support.Person = new Person ( ) ; org.springframework.data.mongodb.repository.support.Person . setLastname ( STRING ) ; void ( org.springframework.data.mongodb.repository.support.Person , STRING , STRING , STRING ) ; long long = org.springframework.data.mongodb.repository.support.SimpleMongoRepository<org.springframework.data.mongodb.repository.support.Person,java.lang.String> . count ( Example . of ( org.springframework.data.mongodb.repository.support.Person ) ) ; assertThat ( long , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> < java.lang.String , Person > java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> , java.util.List<org.springframework.data.mongodb.repository.support.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.support.Person> ) { for ( Person org.springframework.data.mongodb.repository.support.Person : java.util.List<org.springframework.data.mongodb.repository.support.Person> ) { Person org.springframework.data.mongodb.repository.support.Person = java.util.Map<java.lang.String,org.springframework.data.mongodb.repository.support.Person> . get ( org.springframework.data.mongodb.repository.support.Person . getId ( ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.Person , is ( equalTo ( org.springframework.data.mongodb.repository.support.Person ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { ReflectionTestUtils . setField ( java.lang.Object , java.lang.String , null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Person org.springframework.data.mongodb.repository.support.Person ) { return org.springframework.data.mongodb.repository.support.Person . getId ( ) == null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( Person org.springframework.data.mongodb.repository.support.Person ) { return java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.repository.support.Person . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<java.lang.String> < java.lang.String > java.lang.Class<java.lang.String> ( ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<org.springframework.data.mongodb.repository.support.Person> < Person > java.lang.Class<org.springframework.data.mongodb.repository.support.Person> ( ) { return Person .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
