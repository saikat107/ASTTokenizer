<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.web.secure.custom.HttpHeaders = new HttpHeaders ( ) ; sample.web.secure.custom.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; ResponseEntity < java.lang.String > sample.web.secure.custom.ResponseEntity<java.lang.String> = this . sample.web.secure.custom.TestRestTemplate . exchange ( STRING , HttpMethod . GET , new HttpEntity < java.lang.Void > ( sample.web.secure.custom.HttpHeaders ) , java.lang.String .class ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FOUND ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getHeaders ( ) . getLocation ( ) . toString ( ) ) . endsWith ( this . int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.web.secure.custom.HttpHeaders = new HttpHeaders ( ) ; sample.web.secure.custom.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; ResponseEntity < java.lang.String > sample.web.secure.custom.ResponseEntity<java.lang.String> = this . sample.web.secure.custom.TestRestTemplate . exchange ( STRING , HttpMethod . GET , new HttpEntity < java.lang.Void > ( sample.web.secure.custom.HttpHeaders ) , java.lang.String .class ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.web.secure.custom.HttpHeaders = sample.web.secure.custom.HttpHeaders ( ) ; sample.web.secure.custom.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; sample.web.secure.custom.HttpHeaders . setContentType ( MediaType . APPLICATION_FORM_URLENCODED ) ; MultiValueMap < java.lang.String , java.lang.String > sample.web.secure.custom.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; sample.web.secure.custom.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; sample.web.secure.custom.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; ResponseEntity < java.lang.String > sample.web.secure.custom.ResponseEntity<java.lang.String> = this . sample.web.secure.custom.TestRestTemplate . exchange ( STRING , HttpMethod . POST , new HttpEntity <> ( sample.web.secure.custom.MultiValueMap<java.lang.String,java.lang.String> , sample.web.secure.custom.HttpHeaders ) , java.lang.String .class ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FOUND ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getHeaders ( ) . getLocation ( ) . toString ( ) ) . endsWith ( this . int + STRING ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getHeaders ( ) . get ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> private sample.web.secure.custom.HttpHeaders sample.web.secure.custom.HttpHeaders ( ) { HttpHeaders sample.web.secure.custom.HttpHeaders = new HttpHeaders ( ) ; ResponseEntity < java.lang.String > sample.web.secure.custom.ResponseEntity<java.lang.String> = this . sample.web.secure.custom.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; java.lang.String java.lang.String = sample.web.secure.custom.ResponseEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ; sample.web.secure.custom.HttpHeaders . set ( STRING , java.lang.String ) ; java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertThat ( java.util.regex.Matcher . boolean ( ) ) . as ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getBody ( ) ) . isTrue ( ) ; sample.web.secure.custom.HttpHeaders . set ( STRING , java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; return sample.web.secure.custom.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.web.secure.custom.ResponseEntity<java.lang.String> = this . sample.web.secure.custom.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.web.secure.custom.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; }  <METHOD_END>
