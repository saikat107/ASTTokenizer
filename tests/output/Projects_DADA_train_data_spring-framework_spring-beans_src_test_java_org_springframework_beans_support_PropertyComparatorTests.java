<METHOD_START> @ Test public void void ( ) { org.springframework.beans.support.PropertyComparatorTests.Dog org.springframework.beans.support.PropertyComparatorTests.Dog = new org.springframework.beans.support.PropertyComparatorTests.Dog ( ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; org.springframework.beans.support.PropertyComparatorTests.Dog org.springframework.beans.support.PropertyComparatorTests.Dog = new org.springframework.beans.support.PropertyComparatorTests.Dog ( ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; PropertyComparator < org.springframework.beans.support.PropertyComparatorTests.Dog > org.springframework.beans.support.PropertyComparator<org.springframework.beans.support.PropertyComparatorTests.Dog> = new PropertyComparator <> ( STRING , false , true ) ; assertTrue ( org.springframework.beans.support.PropertyComparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . compare ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) > NUMBER ) ; assertTrue ( org.springframework.beans.support.PropertyComparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . compare ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) == NUMBER ) ; assertTrue ( org.springframework.beans.support.PropertyComparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . compare ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.support.PropertyComparatorTests.Dog org.springframework.beans.support.PropertyComparatorTests.Dog = new org.springframework.beans.support.PropertyComparatorTests.Dog ( ) ; org.springframework.beans.support.PropertyComparatorTests.Dog org.springframework.beans.support.PropertyComparatorTests.Dog = new org.springframework.beans.support.PropertyComparatorTests.Dog ( ) ; PropertyComparator < org.springframework.beans.support.PropertyComparatorTests.Dog > org.springframework.beans.support.PropertyComparator<org.springframework.beans.support.PropertyComparatorTests.Dog> = new PropertyComparator <> ( STRING , false , true ) ; assertTrue ( org.springframework.beans.support.PropertyComparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . compare ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> < org.springframework.beans.support.PropertyComparatorTests.Dog > java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> = new PropertyComparator <> ( STRING , false , true ) ; org.springframework.beans.support.PropertyComparatorTests.Dog org.springframework.beans.support.PropertyComparatorTests.Dog = new org.springframework.beans.support.PropertyComparatorTests.Dog ( ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; org.springframework.beans.support.PropertyComparatorTests.Dog org.springframework.beans.support.PropertyComparatorTests.Dog = new org.springframework.beans.support.PropertyComparatorTests.Dog ( ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; assertTrue ( java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . int ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) == NUMBER ) ; java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> = java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> ( new PropertyComparator <> ( STRING , false , true ) ) ; assertTrue ( java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . int ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) > NUMBER ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; assertTrue ( java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . int ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> < org.springframework.beans.support.PropertyComparatorTests.Dog > java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> = ( new PropertyComparator < org.springframework.beans.support.PropertyComparatorTests.Dog > ( STRING , false , true ) ) . thenComparing ( new PropertyComparator <> ( STRING , false , true ) ) ; org.springframework.beans.support.PropertyComparatorTests.Dog org.springframework.beans.support.PropertyComparatorTests.Dog = new org.springframework.beans.support.PropertyComparatorTests.Dog ( ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; org.springframework.beans.support.PropertyComparatorTests.Dog org.springframework.beans.support.PropertyComparatorTests.Dog = new org.springframework.beans.support.PropertyComparatorTests.Dog ( ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; org.springframework.beans.support.PropertyComparatorTests.Dog . void ( STRING ) ; assertTrue ( java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . int ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) > NUMBER ) ; java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> = java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> ( ) ; assertTrue ( java.util.Comparator<org.springframework.beans.support.PropertyComparatorTests.Dog> . int ( org.springframework.beans.support.PropertyComparatorTests.Dog , org.springframework.beans.support.PropertyComparatorTests.Dog ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { return this . java.lang.String . int ( ( ( org.springframework.beans.support.PropertyComparatorTests.Dog ) java.lang.Object ) . java.lang.String ) ; }  <METHOD_END>
