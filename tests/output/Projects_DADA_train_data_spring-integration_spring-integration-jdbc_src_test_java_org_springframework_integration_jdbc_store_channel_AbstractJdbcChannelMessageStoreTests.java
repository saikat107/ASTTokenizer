<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore = new JdbcChannelMessageStore ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . setRegion ( STRING ) ; org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . setChannelMessageStoreQueryProvider ( org.springframework.integration.jdbc.store.channel.ChannelMessageStoreQueryProvider ) ; org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . afterPropertiesSet ( ) ; org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . removeMessageGroup ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . pollMessageFromGroup ( java.lang.String ) ; assertNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Message < java.lang.String > org.springframework.integration.jdbc.store.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; final TransactionTemplate org.springframework.integration.jdbc.store.channel.TransactionTemplate = new TransactionTemplate ( org.springframework.integration.jdbc.store.channel.PlatformTransactionManager ) ; org.springframework.integration.jdbc.store.channel.TransactionTemplate . setIsolationLevel ( Isolation . READ_COMMITTED . value ( ) ) ; org.springframework.integration.jdbc.store.channel.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRED ) ; org.springframework.integration.jdbc.store.channel.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jdbc.store.channel.TransactionStatus ) { org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; } } ) ; Message < ? > org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . pollMessageFromGroup ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; assertEquals ( org.springframework.integration.jdbc.store.channel.Message<java.lang.String> . getHeaders ( ) . getId ( ) , org.springframework.integration.jdbc.store.channel.Message<> . getHeaders ( ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jdbc.store.channel.TransactionStatus ) { org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; }  <METHOD_END>
