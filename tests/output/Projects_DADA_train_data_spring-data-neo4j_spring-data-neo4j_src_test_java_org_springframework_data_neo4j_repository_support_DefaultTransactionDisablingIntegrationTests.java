<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.repository.support.UserRepository . findOne ( NUMBER ) ; assertThat ( TransactionalRepositoryTests.DelegatingTransactionManager . getDefinition ( ) . isReadOnly ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.repository.support.UserRepository . findAll ( new PageRequest ( NUMBER , NUMBER ) ) ; assertThat ( TransactionalRepositoryTests.DelegatingTransactionManager . getDefinition ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.repository.support.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.data.neo4j.repository.support.ExpectedException . expectCause ( is ( Matchers .< java.lang.Throwable > instanceOf ( java.lang.IllegalStateException .class ) ) ) ; org.springframework.data.neo4j.repository.support.UserRepository . save ( new User ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public TransactionalRepositoryTests . TransactionalRepositoryTests.DelegatingTransactionManager TransactionalRepositoryTests.DelegatingTransactionManager ( ) java.lang.Exception { return new TransactionalRepositoryTests . TransactionalRepositoryTests ( new Neo4jTransactionManager ( org.springframework.data.neo4j.repository.support.SessionFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repository.support.SessionFactory org.springframework.data.neo4j.repository.support.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
