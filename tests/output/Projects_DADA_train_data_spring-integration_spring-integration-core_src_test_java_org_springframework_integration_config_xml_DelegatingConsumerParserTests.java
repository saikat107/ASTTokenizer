<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyFilter ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyFilter ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof MessageFilter ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyRouter ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyRouter ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyRouterMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyRouterMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyRouterARPMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyRouterARPMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyServiceARPMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyServiceARPMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MySplitter ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MySplitter ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MySplitterThatsAnARPMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MySplitterThatsAnARPMH ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , TestUtils . getPropertyValue ( org.springframework.integration.config.xml.MessageHandler , STRING , java.lang.Long .class ) ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof MessageTransformingHandler ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.MessageHandler , STRING ) instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyTransformer ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof MessageTransformingHandler ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.MessageHandler , STRING ) instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyTransformer ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyTransformerARPMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; assertTrue ( org.springframework.integration.config.xml.MessageHandler instanceof org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyTransformerARPMH ) ; void ( org.springframework.integration.config.xml.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServiceActivatorFactoryBean org.springframework.integration.config.xml.ServiceActivatorFactoryBean = new ServiceActivatorFactoryBean ( ) ; org.springframework.integration.config.xml.ServiceActivatorFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyServiceARPMH org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyServiceARPMH = new org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyServiceARPMH ( ) ; org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyServiceARPMH . setBeanName ( STRING ) ; org.springframework.integration.config.xml.ServiceActivatorFactoryBean . setTargetObject ( org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyServiceARPMH ) ; org.springframework.integration.config.xml.ServiceActivatorFactoryBean . getObject ( ) ; org.springframework.integration.config.xml.ServiceActivatorFactoryBean = new ServiceActivatorFactoryBean ( ) ; org.springframework.integration.config.xml.ServiceActivatorFactoryBean . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.config.xml.ServiceActivatorFactoryBean . setTargetObject ( org.springframework.integration.config.xml.DelegatingConsumerParserTests.MyServiceARPMH ) ; try { org.springframework.integration.config.xml.ServiceActivatorFactoryBean . getObject ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING + STRING , java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MessageHandler org.springframework.integration.config.xml.MessageHandler ) { Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; org.springframework.integration.config.xml.MessageHandler . handleMessage ( org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( message -> true ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.integration.config.xml.MessageChannel> < MessageChannel > java.util.Collection<org.springframework.integration.config.xml.MessageChannel> ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { java.util.List<org.springframework.integration.config.xml.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.config.xml.MessageChannel> = new java.util.ArrayList<org.springframework.integration.config.xml.MessageChannel> < MessageChannel > ( ) ; java.util.List<org.springframework.integration.config.xml.MessageChannel> . add ( org.springframework.integration.config.xml.QueueChannel ) ; return java.util.List<org.springframework.integration.config.xml.MessageChannel> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.config.xml.Message<?> ) throws org.springframework.integration.config.xml.MessagingException { org.springframework.integration.config.xml.QueueChannel . send ( org.springframework.integration.config.xml.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { org.springframework.integration.config.xml.QueueChannel . send ( org.springframework.integration.config.xml.Message<> ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return org.springframework.integration.config.xml.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) throws java.lang.Exception { return org.springframework.integration.config.xml.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return org.springframework.integration.config.xml.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return org.springframework.integration.config.xml.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return org.springframework.integration.config.xml.Message<> ; }  <METHOD_END>
