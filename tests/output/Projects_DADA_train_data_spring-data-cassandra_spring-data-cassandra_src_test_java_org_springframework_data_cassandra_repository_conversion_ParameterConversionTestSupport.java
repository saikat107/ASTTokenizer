<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { Contact .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.conversion.SchemaAction org.springframework.data.cassandra.repository.conversion.SchemaAction ( ) { return SchemaAction . RECREATE_DROP_UNUSED ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.conversion.CassandraSessionFactoryBean org.springframework.data.cassandra.repository.conversion.CassandraSessionFactoryBean ( ) java.lang.ClassNotFoundException { Cluster org.springframework.data.cassandra.repository.conversion.Cluster = cluster ( ) . getObject ( ) ; Session org.springframework.data.cassandra.repository.conversion.Session = org.springframework.data.cassandra.repository.conversion.Cluster . connect ( getKeyspaceName ( ) ) ; org.springframework.data.cassandra.repository.conversion.Session . execute ( STRING ) ; org.springframework.data.cassandra.repository.conversion.Session . close ( ) ; return super. session ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.conversion.CustomConversions org.springframework.data.cassandra.repository.conversion.CustomConversions ( ) { return new CustomConversions ( java.util.Arrays . java.util.List<T> ( org.springframework.data.cassandra.repository.conversion.ParameterConversionTestSupport.AddressReadConverter . org.springframework.data.cassandra.repository.conversion.ParameterConversionTestSupport.AddressReadConverter , org.springframework.data.cassandra.repository.conversion.ParameterConversionTestSupport.AddressWriteConverter . org.springframework.data.cassandra.repository.conversion.ParameterConversionTestSupport.AddressWriteConverter , org.springframework.data.cassandra.repository.conversion.ParameterConversionTestSupport.PhoneReadConverter . org.springframework.data.cassandra.repository.conversion.ParameterConversionTestSupport.PhoneReadConverter , new org.springframework.data.cassandra.repository.conversion.ParameterConversionTestSupport.PhoneWriteConverter ( new SimpleUserTypeResolver ( cluster ( ) . getObject ( ) , getKeyspaceName ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { deleteAllEntities ( ) ; org.springframework.data.cassandra.repository.conversion.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; org.springframework.data.cassandra.repository.conversion.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; org.springframework.data.cassandra.repository.conversion.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; org.springframework.data.cassandra.repository.conversion.CassandraOperations . getCqlOperations ( ) . execute ( STRING ) ; org.springframework.data.cassandra.repository.conversion.Contact = new Contact ( STRING ) ; org.springframework.data.cassandra.repository.conversion.Contact . setAddress ( new Address ( STRING , STRING ) ) ; org.springframework.data.cassandra.repository.conversion.Contact . setAddresses ( java.util.Arrays . java.util.List ( new Address ( STRING , STRING ) , new Address ( STRING , STRING ) , new Address ( STRING , STRING ) ) ) ; Phone org.springframework.data.cassandra.repository.conversion.Phone = new Phone ( ) ; org.springframework.data.cassandra.repository.conversion.Phone . setNumber ( STRING ) ; Phone org.springframework.data.cassandra.repository.conversion.Phone = new Phone ( ) ; org.springframework.data.cassandra.repository.conversion.Phone . setNumber ( STRING ) ; org.springframework.data.cassandra.repository.conversion.Contact . setMainPhone ( org.springframework.data.cassandra.repository.conversion.Phone ) ; org.springframework.data.cassandra.repository.conversion.Contact . setAlternativePhones ( java.util.Collections . java.util.List ( org.springframework.data.cassandra.repository.conversion.Phone ) ) ; org.springframework.data.cassandra.repository.conversion.Contact = new Contact ( STRING ) ; org.springframework.data.cassandra.repository.conversion.Contact . setAddress ( new Address ( STRING , STRING ) ) ; org.springframework.data.cassandra.repository.conversion.Contact . setAddresses ( java.util.Collections . java.util.List ( new Address ( STRING , STRING ) ) ) ; org.springframework.data.cassandra.repository.conversion.CassandraOperations . insert ( org.springframework.data.cassandra.repository.conversion.Contact ) ; org.springframework.data.cassandra.repository.conversion.CassandraOperations . insert ( org.springframework.data.cassandra.repository.conversion.Contact ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Address org.springframework.data.cassandra.repository.conversion.Address ) { try { return new ObjectMapper ( ) . writeValueAsString ( org.springframework.data.cassandra.repository.conversion.Address ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.repository.conversion.Phone org.springframework.data.cassandra.repository.conversion.Phone ( UDTValue org.springframework.data.cassandra.repository.conversion.UDTValue ) { Phone org.springframework.data.cassandra.repository.conversion.Phone = new Phone ( ) ; org.springframework.data.cassandra.repository.conversion.Phone . setNumber ( org.springframework.data.cassandra.repository.conversion.UDTValue . getString ( STRING ) ) ; return org.springframework.data.cassandra.repository.conversion.Phone ; }  <METHOD_END>
<METHOD_START> void ( UserTypeResolver org.springframework.data.cassandra.repository.conversion.UserTypeResolver ) { this . org.springframework.data.cassandra.repository.conversion.UserTypeResolver = org.springframework.data.cassandra.repository.conversion.UserTypeResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.repository.conversion.UDTValue org.springframework.data.cassandra.repository.conversion.UDTValue ( Phone org.springframework.data.cassandra.repository.conversion.Phone ) { UserType org.springframework.data.cassandra.repository.conversion.UserType = org.springframework.data.cassandra.repository.conversion.UserTypeResolver . resolveType ( CqlIdentifier . cqlId ( STRING ) ) ; UDTValue org.springframework.data.cassandra.repository.conversion.UDTValue = org.springframework.data.cassandra.repository.conversion.UserType . newValue ( ) ; org.springframework.data.cassandra.repository.conversion.UDTValue . setString ( STRING , org.springframework.data.cassandra.repository.conversion.Phone . getNumber ( ) ) ; return org.springframework.data.cassandra.repository.conversion.UDTValue ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.repository.conversion.Address org.springframework.data.cassandra.repository.conversion.Address ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { try { return new ObjectMapper ( ) . readValue ( java.lang.String , Address .class ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } } return null ; }  <METHOD_END>
