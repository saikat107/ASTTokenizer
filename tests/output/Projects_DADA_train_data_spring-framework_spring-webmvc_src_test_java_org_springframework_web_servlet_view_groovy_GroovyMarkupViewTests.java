<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.view.groovy.WebApplicationContext = mock ( WebApplicationContext .class ) ; this . org.springframework.web.servlet.view.groovy.ServletContext = new MockServletContext ( ) ; this . org.springframework.web.servlet.view.groovy.ServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , this . org.springframework.web.servlet.view.groovy.WebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = new GroovyMarkupView ( ) ; given ( this . org.springframework.web.servlet.view.groovy.WebApplicationContext . getBeansOfType ( GroovyMarkupConfig .class , true , false ) ) . willReturn ( new java.util.HashMap <> ( ) ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . setUrl ( STRING ) ; try { org.springframework.web.servlet.view.groovy.GroovyMarkupView . setApplicationContext ( this . org.springframework.web.servlet.view.groovy.WebApplicationContext ) ; fail ( ) ; } catch ( ApplicationContextException org.springframework.web.servlet.view.groovy.ApplicationContextException ) { assertTrue ( org.springframework.web.servlet.view.groovy.ApplicationContextException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = new GroovyMarkupView ( ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . setTemplateEngine ( new org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests.TestTemplateEngine ( ) ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . setApplicationContext ( this . org.springframework.web.servlet.view.groovy.WebApplicationContext ) ; DirectFieldAccessor org.springframework.web.servlet.view.groovy.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.view.groovy.GroovyMarkupView ) ; TemplateEngine org.springframework.web.servlet.view.groovy.TemplateEngine = ( TemplateEngine ) org.springframework.web.servlet.view.groovy.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( org.springframework.web.servlet.view.groovy.TemplateEngine ) ; assertEquals ( org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests.TestTemplateEngine .class , org.springframework.web.servlet.view.groovy.TemplateEngine . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = new GroovyMarkupView ( ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . setTemplateEngine ( new org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests.TestTemplateEngine ( ) ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . setApplicationContext ( this . org.springframework.web.servlet.view.groovy.WebApplicationContext ) ; DirectFieldAccessor org.springframework.web.servlet.view.groovy.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.view.groovy.GroovyMarkupView ) ; TemplateEngine org.springframework.web.servlet.view.groovy.TemplateEngine = ( TemplateEngine ) org.springframework.web.servlet.view.groovy.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( org.springframework.web.servlet.view.groovy.TemplateEngine ) ; assertEquals ( org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests.TestTemplateEngine .class , org.springframework.web.servlet.view.groovy.TemplateEngine . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = org.springframework.web.servlet.view.groovy.GroovyMarkupView ( STRING ) ; assertTrue ( org.springframework.web.servlet.view.groovy.GroovyMarkupView . checkResource ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = org.springframework.web.servlet.view.groovy.GroovyMarkupView ( STRING ) ; assertFalse ( org.springframework.web.servlet.view.groovy.GroovyMarkupView . checkResource ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = org.springframework.web.servlet.view.groovy.GroovyMarkupView ( STRING ) ; assertTrue ( org.springframework.web.servlet.view.groovy.GroovyMarkupView . checkResource ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = org.springframework.web.servlet.view.groovy.GroovyMarkupView ( STRING ) ; assertTrue ( org.springframework.web.servlet.view.groovy.GroovyMarkupView . checkResource ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.view.groovy.MockHttpServletResponse = org.springframework.web.servlet.view.groovy.MockHttpServletResponse ( STRING , java.util.Map<java.lang.String,java.lang.Object> , java.util.Locale . java.util.Locale ) ; assertThat ( org.springframework.web.servlet.view.groovy.MockHttpServletResponse . getContentAsString ( ) , Matchers . containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.view.groovy.MockHttpServletResponse = org.springframework.web.servlet.view.groovy.MockHttpServletResponse ( STRING , java.util.Map<java.lang.String,java.lang.Object> , java.util.Locale . java.util.Locale ) ; assertEquals ( STRING , org.springframework.web.servlet.view.groovy.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.view.groovy.MockHttpServletResponse = org.springframework.web.servlet.view.groovy.MockHttpServletResponse ( STRING , java.util.Map<java.lang.String,java.lang.Object> , java.util.Locale . java.util.Locale ) ; assertEquals ( STRING , org.springframework.web.servlet.view.groovy.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.view.groovy.MockHttpServletResponse = org.springframework.web.servlet.view.groovy.MockHttpServletResponse ( STRING , java.util.Map<java.lang.String,java.lang.Object> , new java.util.Locale ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.groovy.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.groovy.MockHttpServletResponse = org.springframework.web.servlet.view.groovy.MockHttpServletResponse ( STRING , java.util.Map<java.lang.String,java.lang.Object> , java.util.Locale . java.util.Locale ) ; assertEquals ( STRING , org.springframework.web.servlet.view.groovy.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.view.groovy.MockHttpServletResponse org.springframework.web.servlet.view.groovy.MockHttpServletResponse ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Locale java.util.Locale ) throws java.lang.Exception { GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = org.springframework.web.servlet.view.groovy.GroovyMarkupView ( java.lang.String ) ; MockHttpServletResponse org.springframework.web.servlet.view.groovy.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.web.servlet.view.groovy.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.view.groovy.MockHttpServletRequest . addPreferredLocale ( java.util.Locale ) ; LocaleContextHolder . setLocale ( java.util.Locale ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . renderMergedTemplateModel ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.groovy.MockHttpServletRequest , org.springframework.web.servlet.view.groovy.MockHttpServletResponse ) ; return org.springframework.web.servlet.view.groovy.MockHttpServletResponse ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.view.groovy.GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView ( java.lang.String java.lang.String ) throws java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.servlet.view.groovy.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.servlet.view.groovy.AnnotationConfigApplicationContext . register ( org.springframework.web.servlet.view.groovy.GroovyMarkupViewTests.GroovyMarkupConfiguration .class ) ; org.springframework.web.servlet.view.groovy.AnnotationConfigApplicationContext . refresh ( ) ; GroovyMarkupView org.springframework.web.servlet.view.groovy.GroovyMarkupView = new GroovyMarkupView ( ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . setApplicationContext ( org.springframework.web.servlet.view.groovy.AnnotationConfigApplicationContext ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupView . afterPropertiesSet ( ) ; return org.springframework.web.servlet.view.groovy.GroovyMarkupView ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( new TemplateConfiguration ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.view.groovy.Template org.springframework.web.servlet.view.groovy.Template ( java.io.Reader java.io.Reader ) { return null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.view.groovy.GroovyMarkupConfig org.springframework.web.servlet.view.groovy.GroovyMarkupConfig ( ) { GroovyMarkupConfigurer org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer = new GroovyMarkupConfigurer ( ) ; org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer . setResourceLoaderPath ( java.lang.String ) ; return org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer ; }  <METHOD_END>
