<METHOD_START> @ Before public void void ( ) { MongoMappingContext org.springframework.data.mongodb.repository.support.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.repository.support.MongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.repository.support.DbRefResolver , org.springframework.data.mongodb.repository.support.MongoMappingContext ) ; this . org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer = new SpringDataMongodbSerializer ( org.springframework.data.mongodb.repository.support.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringPath org.springframework.data.mongodb.repository.support.StringPath = QPerson . person . id ; assertThat ( org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . getKeyForPath ( org.springframework.data.mongodb.repository.support.StringPath , org.springframework.data.mongodb.repository.support.StringPath . getMetadata ( ) ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringPath org.springframework.data.mongodb.repository.support.StringPath = QPerson . person . address . street ; assertThat ( org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . getKeyForPath ( org.springframework.data.mongodb.repository.support.StringPath , org.springframework.data.mongodb.repository.support.StringPath . getMetadata ( ) ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address = new org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address ( ) ; org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address . java.lang.String = STRING ; org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address . java.lang.String = STRING ; DBObject org.springframework.data.mongodb.repository.support.DBObject = org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . asDBObject ( STRING , org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address ) ; assertThat ( org.springframework.data.mongodb.repository.support.DBObject , is ( instanceOf ( BasicDBObject .class ) ) ) ; BasicDBObject org.springframework.data.mongodb.repository.support.BasicDBObject = ( BasicDBObject ) org.springframework.data.mongodb.repository.support.DBObject ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.repository.support.BasicDBObject . get ( STRING ) ; assertThat ( java.lang.Object , is ( notNullValue ( ) ) ) ; assertThat ( java.lang.Object , is ( instanceOf ( Document .class ) ) ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.repository.support.MongoConverter . convertToMongoType ( org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address ) ; assertThat ( java.lang.Object , is ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QAddress org.springframework.data.mongodb.repository.support.QAddress = QPerson . person . shippingAddresses . any ( ) ; assertThat ( org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . getKeyForPath ( org.springframework.data.mongodb.repository.support.QAddress , org.springframework.data.mongodb.repository.support.QAddress . getMetadata ( ) ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectId org.springframework.data.mongodb.repository.support.ObjectId = new ObjectId ( ) ; PathBuilder < org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address > org.springframework.data.mongodb.repository.support.PathBuilder<org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address> = new PathBuilder < org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address > ( org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address .class , STRING ) ; StringPath org.springframework.data.mongodb.repository.support.StringPath = org.springframework.data.mongodb.repository.support.PathBuilder<org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address> . getString ( STRING ) ; DBObject org.springframework.data.mongodb.repository.support.DBObject = ( DBObject ) org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . visit ( ( BooleanOperation ) org.springframework.data.mongodb.repository.support.StringPath . eq ( org.springframework.data.mongodb.repository.support.ObjectId . toString ( ) ) , ( java.lang.Void ) null ) ; assertThat ( org.springframework.data.mongodb.repository.support.DBObject . get ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.DBObject . get ( STRING ) , is ( instanceOf ( ObjectId .class ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.support.DBObject . get ( STRING ) , is ( ( java.lang.Object ) org.springframework.data.mongodb.repository.support.ObjectId ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathBuilder < org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address > org.springframework.data.mongodb.repository.support.PathBuilder<org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address> = new PathBuilder < org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address > ( org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address .class , STRING ) ; SimplePath < java.lang.Object > org.springframework.data.mongodb.repository.support.SimplePath<java.lang.Object> = org.springframework.data.mongodb.repository.support.PathBuilder<org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.Address> . getArray ( STRING , java.lang.String [] .class ) . get ( NUMBER ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . getKeyForPath ( org.springframework.data.mongodb.repository.support.SimplePath<java.lang.Object> , org.springframework.data.mongodb.repository.support.SimplePath<java.lang.Object> . getMetadata ( ) ) ; assertThat ( java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectId org.springframework.data.mongodb.repository.support.ObjectId = new ObjectId ( STRING ) ; DBObject org.springframework.data.mongodb.repository.support.DBObject = org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . asDBObject ( STRING , new Document ( STRING , org.springframework.data.mongodb.repository.support.ObjectId . toString ( ) ) ) ; DBObject org.springframework.data.mongodb.repository.support.DBObject = getTypedValue ( new Document ( org.springframework.data.mongodb.repository.support.DBObject . toMap ( ) ) , STRING , DBObject .class ) ; ObjectId org.springframework.data.mongodb.repository.support.ObjectId = getTypedValue ( new Document ( org.springframework.data.mongodb.repository.support.DBObject . toMap ( ) ) , STRING , ObjectId .class ) ; assertThat ( org.springframework.data.mongodb.repository.support.ObjectId , is ( org.springframework.data.mongodb.repository.support.ObjectId ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectId org.springframework.data.mongodb.repository.support.ObjectId = new ObjectId ( STRING ) ; ObjectId org.springframework.data.mongodb.repository.support.ObjectId = new ObjectId ( STRING ) ; BasicDBList org.springframework.data.mongodb.repository.support.BasicDBList = new BasicDBList ( ) ; org.springframework.data.mongodb.repository.support.BasicDBList . add ( org.springframework.data.mongodb.repository.support.ObjectId . toString ( ) ) ; org.springframework.data.mongodb.repository.support.BasicDBList . add ( org.springframework.data.mongodb.repository.support.ObjectId . toString ( ) ) ; DBObject org.springframework.data.mongodb.repository.support.DBObject = org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . asDBObject ( STRING , new Document ( STRING , org.springframework.data.mongodb.repository.support.BasicDBList ) ) ; DBObject org.springframework.data.mongodb.repository.support.DBObject = getTypedValue ( new Document ( org.springframework.data.mongodb.repository.support.DBObject . toMap ( ) ) , STRING , DBObject .class ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getTypedValue ( new Document ( org.springframework.data.mongodb.repository.support.DBObject . toMap ( ) ) , STRING , java.util.List .class ) ; assertThat ( java.util.List<java.lang.Object> , IsIterableContainingInOrder .< java.lang.Object > contains ( org.springframework.data.mongodb.repository.support.ObjectId , org.springframework.data.mongodb.repository.support.ObjectId ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoMappingContext org.springframework.data.mongodb.repository.support.MongoMappingContext = new MongoMappingContext ( ) ; MappingMongoConverter org.springframework.data.mongodb.repository.support.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.repository.support.DbRefResolver , org.springframework.data.mongodb.repository.support.MongoMappingContext ) ; org.springframework.data.mongodb.repository.support.MappingMongoConverter . setCustomConversions ( new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.SexTypeWriteConverter> ( new org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializerUnitTests.SexTypeWriteConverter ( ) ) ) ) ; org.springframework.data.mongodb.repository.support.MappingMongoConverter . afterPropertiesSet ( ) ; this . org.springframework.data.mongodb.repository.support.MongoConverter = org.springframework.data.mongodb.repository.support.MappingMongoConverter ; this . org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer = new SpringDataMongodbSerializer ( this . org.springframework.data.mongodb.repository.support.MongoConverter ) ; java.lang.Object java.lang.Object = this . org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer . handle ( QPerson . person . sex . eq ( Sex . FEMALE ) ) ; assertThat ( java.lang.Object , is ( instanceOf ( DBObject .class ) ) ) ; assertThat ( ( ( DBObject ) java.lang.Object ) . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Sex org.springframework.data.mongodb.repository.support.Sex ) { if ( org.springframework.data.mongodb.repository.support.Sex == null ) { return null ; } switch ( org.springframework.data.mongodb.repository.support.Sex ) { case MALE : return STRING ; case FEMALE : return STRING ; default: throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
