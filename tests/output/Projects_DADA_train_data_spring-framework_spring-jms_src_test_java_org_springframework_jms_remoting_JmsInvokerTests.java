<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.jms.remoting.QueueConnectionFactory = mock ( QueueConnectionFactory .class ) ; org.springframework.jms.remoting.QueueConnection = mock ( QueueConnection .class ) ; org.springframework.jms.remoting.QueueSession = mock ( QueueSession .class ) ; org.springframework.jms.remoting.Queue = mock ( Queue .class ) ; given ( org.springframework.jms.remoting.QueueConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.remoting.QueueConnection ) ; given ( org.springframework.jms.remoting.QueueConnection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.remoting.QueueSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { given ( org.springframework.jms.remoting.QueueSession . createQueue ( STRING ) ) . willReturn ( org.springframework.jms.remoting.Queue ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsInvokerProxyFactoryBean org.springframework.jms.remoting.JmsInvokerProxyFactoryBean = new JmsInvokerProxyFactoryBean ( ) { @ java.lang.Override protected org.springframework.jms.remoting.Message org.springframework.jms.remoting.Message ( Session org.springframework.jms.remoting.Session , Queue org.springframework.jms.remoting.Queue , Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { return null ; } } ; org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setConnectionFactory ( this . org.springframework.jms.remoting.QueueConnectionFactory ) ; org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setQueue ( this . org.springframework.jms.remoting.Queue ) ; org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setReceiveTimeout ( NUMBER ) ; org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.jms.remoting.ITestBean = ( ITestBean ) org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . getObject ( ) ; org.springframework.jms.remoting.ExpectedException . expect ( RemoteTimeoutException .class ) ; org.springframework.jms.remoting.ExpectedException . expectMessage ( STRING ) ; org.springframework.jms.remoting.ExpectedException . expectMessage ( STRING ) ; org.springframework.jms.remoting.ITestBean . getAge ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jms.remoting.Message org.springframework.jms.remoting.Message ( Session org.springframework.jms.remoting.Session , Queue org.springframework.jms.remoting.Queue , Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Throwable { TestBean org.springframework.jms.remoting.TestBean = new TestBean ( STRING , NUMBER ) ; final JmsInvokerServiceExporter org.springframework.jms.remoting.JmsInvokerServiceExporter = new JmsInvokerServiceExporter ( ) ; org.springframework.jms.remoting.JmsInvokerServiceExporter . setServiceInterface ( ITestBean .class ) ; org.springframework.jms.remoting.JmsInvokerServiceExporter . setService ( org.springframework.jms.remoting.TestBean ) ; org.springframework.jms.remoting.JmsInvokerServiceExporter . setMessageConverter ( new org.springframework.jms.remoting.JmsInvokerTests.MockSimpleMessageConverter ( ) ) ; org.springframework.jms.remoting.JmsInvokerServiceExporter . afterPropertiesSet ( ) ; JmsInvokerProxyFactoryBean org.springframework.jms.remoting.JmsInvokerProxyFactoryBean = new JmsInvokerProxyFactoryBean ( ) { @ java.lang.Override protected org.springframework.jms.remoting.Message org.springframework.jms.remoting.Message ( Session org.springframework.jms.remoting.Session , Queue org.springframework.jms.remoting.Queue , Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { Session org.springframework.jms.remoting.Session = mock ( Session .class ) ; org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer = new org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer ( ) ; given ( org.springframework.jms.remoting.Session . createProducer ( org.springframework.jms.remoting.Message . getJMSReplyTo ( ) ) ) . willReturn ( org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer ) ; org.springframework.jms.remoting.JmsInvokerServiceExporter . onMessage ( org.springframework.jms.remoting.Message , org.springframework.jms.remoting.Session ) ; assertTrue ( org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer . boolean ) ; return org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer . org.springframework.jms.remoting.Message ; } } ; org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setConnectionFactory ( this . org.springframework.jms.remoting.QueueConnectionFactory ) ; if ( boolean ) { org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setQueueName ( STRING ) ; } else { org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setQueue ( this . org.springframework.jms.remoting.Queue ) ; } org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . setMessageConverter ( new org.springframework.jms.remoting.JmsInvokerTests.MockSimpleMessageConverter ( ) ) ; org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.jms.remoting.ITestBean = ( ITestBean ) org.springframework.jms.remoting.JmsInvokerProxyFactoryBean . getObject ( ) ; assertEquals ( STRING , org.springframework.jms.remoting.ITestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.remoting.ITestBean . getAge ( ) ) ; org.springframework.jms.remoting.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.jms.remoting.ITestBean . getAge ( ) ) ; org.springframework.jms.remoting.ITestBean . setStringArray ( new java.lang.String [] { STRING , STRING } ) ; assertTrue ( java.util.Arrays . boolean ( new java.lang.String [] { STRING , STRING } , org.springframework.jms.remoting.ITestBean . getStringArray ( ) ) ) ; try { org.springframework.jms.remoting.ITestBean . exceptional ( new java.lang.IllegalStateException ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } try { org.springframework.jms.remoting.ITestBean . exceptional ( new java.lang.IllegalAccessException ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jms.remoting.Message org.springframework.jms.remoting.Message ( Session org.springframework.jms.remoting.Session , Queue org.springframework.jms.remoting.Queue , Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { Session org.springframework.jms.remoting.Session = mock ( Session .class ) ; org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer = new org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer ( ) ; given ( org.springframework.jms.remoting.Session . createProducer ( org.springframework.jms.remoting.Message . getJMSReplyTo ( ) ) ) . willReturn ( org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer ) ; org.springframework.jms.remoting.JmsInvokerServiceExporter . onMessage ( org.springframework.jms.remoting.Message , org.springframework.jms.remoting.Session ) ; assertTrue ( org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer . boolean ) ; return org.springframework.jms.remoting.JmsInvokerTests.ResponseStoringProducer . org.springframework.jms.remoting.Message ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) org.springframework.jms.remoting.JMSException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) org.springframework.jms.remoting.JMSException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.remoting.Destination org.springframework.jms.remoting.Destination ( ) org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.jms.remoting.JMSException { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { this . org.springframework.jms.remoting.Message = org.springframework.jms.remoting.Message ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.remoting.Message , int int , int int , long long ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.remoting.Destination , Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.remoting.Destination , Message org.springframework.jms.remoting.Message , int int , int int , long long ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.remoting.Message , CompletionListener org.springframework.jms.remoting.CompletionListener ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.remoting.Message , int int , int int , long long , CompletionListener org.springframework.jms.remoting.CompletionListener ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.remoting.Destination , Message org.springframework.jms.remoting.Message , CompletionListener org.springframework.jms.remoting.CompletionListener ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.remoting.Destination , Message org.springframework.jms.remoting.Message , int int , int int , long long , CompletionListener org.springframework.jms.remoting.CompletionListener ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> public void ( java.io.Serializable java.io.Serializable ) { this . java.io.Serializable = java.io.Serializable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.Serializable java.io.Serializable ) throws org.springframework.jms.remoting.JMSException { this . java.io.Serializable = java.io.Serializable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.Serializable java.io.Serializable ( ) org.springframework.jms.remoting.JMSException { return java.io.Serializable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( ) org.springframework.jms.remoting.JMSException { return new byte [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.remoting.Destination org.springframework.jms.remoting.Destination ( ) org.springframework.jms.remoting.JMSException { return org.springframework.jms.remoting.Destination ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.remoting.Destination ) throws org.springframework.jms.remoting.JMSException { this . org.springframework.jms.remoting.Destination = org.springframework.jms.remoting.Destination ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.remoting.Destination org.springframework.jms.remoting.Destination ( ) org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Destination org.springframework.jms.remoting.Destination ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) org.springframework.jms.remoting.JMSException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class java.lang.Class ) throws org.springframework.jms.remoting.JMSException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte byte ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public short short ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public float float ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration java.util.Enumeration ( ) org.springframework.jms.remoting.JMSException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , boolean boolean ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , byte byte ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , short short ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , long long ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , float float ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , double double ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.jms.remoting.JMSException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.remoting.Message org.springframework.jms.remoting.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.remoting.Session ) throws org.springframework.jms.remoting.JMSException , org.springframework.jms.remoting.MessageConversionException { return new org.springframework.jms.remoting.JmsInvokerTests.MockObjectMessage ( ( java.io.Serializable ) java.lang.Object ) ; }  <METHOD_END>
