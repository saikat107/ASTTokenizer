<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.integration.conversion.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.integration.conversion.PlatformTransactionManager ) ; getGraphDatabaseService ( ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ; assertTrue ( this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . canConvert ( byte [] .class , java.lang.String .class ) ) ; assertEquals ( java.lang.String , this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . convert ( byte[] , java.lang.String .class ) ) ; assertTrue ( this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . canConvert ( java.lang.String .class , byte [] .class ) ) ; assertTrue ( java.util.Arrays . boolean ( byte[] , this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . convert ( java.lang.String , byte [] .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Result org.springframework.data.neo4j.integration.conversion.Result = getGraphDatabaseService ( ) . execute ( STRING ) ; java.lang.Long java.lang.Long = ( java.lang.Long ) org.springframework.data.neo4j.integration.conversion.Result . columnAs ( STRING ) . next ( ) ; byte [] byte[] = STRING . byte[] ( ) ; SiteMember org.springframework.data.neo4j.integration.conversion.SiteMember = this . org.springframework.data.neo4j.integration.conversion.SiteMemberRepository . findOne ( java.lang.Long ) . get ( ) ; assertTrue ( STRING , java.util.Arrays . boolean ( byte[] , org.springframework.data.neo4j.integration.conversion.SiteMember . getProfilePictureData ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PensionPlan org.springframework.data.neo4j.integration.conversion.PensionPlan = org.springframework.data.neo4j.integration.conversion.TransactionTemplate . execute ( status -> { conversionService . addConverter ( new SpringMonetaryAmountToIntegerConverter ( ) ) ; conversionService . addConverter ( new SpringIntegerToMonetaryAmountConverter ( ) ) ; conversionService . addConverter ( new SpringMonetaryAmountToLongConverter ( ) ) ; conversionService . addConverter ( new SpringLongToMonetaryAmountConverter ( ) ) ; PensionPlan pensionToSave1 = new PensionPlan ( new MonetaryAmount ( NUMBER , NUMBER ) , STRING ) ; pensionRepository . save ( pensionToSave1 ) ; return pensionToSave1 ; } ) ; Result org.springframework.data.neo4j.integration.conversion.Result = getGraphDatabaseService ( ) . execute ( STRING ) ; assertTrue ( STRING , org.springframework.data.neo4j.integration.conversion.Result . hasNext ( ) ) ; assertEquals ( STRING , STRING , java.lang.String . java.lang.String ( org.springframework.data.neo4j.integration.conversion.Result . next ( ) . get ( STRING ) ) ) ; org.springframework.data.neo4j.integration.conversion.Result . close ( ) ; PensionPlan org.springframework.data.neo4j.integration.conversion.PensionPlan = this . org.springframework.data.neo4j.integration.conversion.PensionRepository . findOne ( org.springframework.data.neo4j.integration.conversion.PensionPlan . getPensionPlanId ( ) ) . get ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.integration.conversion.PensionPlan . getFundValue ( ) , org.springframework.data.neo4j.integration.conversion.PensionPlan . getFundValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . addConverterFactory ( new SpringMonetaryAmountToNumberConverterFactory ( ) ) ; PensionPlan org.springframework.data.neo4j.integration.conversion.PensionPlan = new PensionPlan ( new MonetaryAmount ( NUMBER , NUMBER ) , STRING ) ; this . org.springframework.data.neo4j.integration.conversion.PensionRepository . save ( org.springframework.data.neo4j.integration.conversion.PensionPlan ) ; Result org.springframework.data.neo4j.integration.conversion.Result = getGraphDatabaseService ( ) . execute ( STRING ) ; assertTrue ( STRING , org.springframework.data.neo4j.integration.conversion.Result . hasNext ( ) ) ; assertEquals ( STRING , STRING , java.lang.String . java.lang.String ( org.springframework.data.neo4j.integration.conversion.Result . next ( ) . get ( STRING ) ) ) ; org.springframework.data.neo4j.integration.conversion.Result . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultConversionService . addDefaultConverters ( this . org.springframework.data.neo4j.integration.conversion.GenericConversionService ) ; JavaElement org.springframework.data.neo4j.integration.conversion.JavaElement = new JavaElement ( ) ; org.springframework.data.neo4j.integration.conversion.JavaElement . setName ( STRING ) ; org.springframework.data.neo4j.integration.conversion.JavaElement . setElementType ( java.lang.annotation.ElementType . java.lang.annotation.ElementType ) ; this . org.springframework.data.neo4j.integration.conversion.JavaElementRepository . save ( org.springframework.data.neo4j.integration.conversion.JavaElement ) ; Result org.springframework.data.neo4j.integration.conversion.Result = getGraphDatabaseService ( ) . execute ( STRING ) ; assertTrue ( STRING , org.springframework.data.neo4j.integration.conversion.Result . hasNext ( ) ) ; assertEquals ( STRING , STRING , org.springframework.data.neo4j.integration.conversion.Result . next ( ) . get ( STRING ) ) ; org.springframework.data.neo4j.integration.conversion.Result . close ( ) ; JavaElement org.springframework.data.neo4j.integration.conversion.JavaElement = this . org.springframework.data.neo4j.integration.conversion.JavaElementRepository . findAll ( ) . iterator ( ) . next ( ) ; assertEquals ( STRING , java.lang.annotation.ElementType . java.lang.annotation.ElementType , org.springframework.data.neo4j.integration.conversion.JavaElement . getElementType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConverterNotFoundException .class ) public void void ( ) { this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . addConverterFactory ( new SpringMonetaryAmountToNumberConverterFactory ( ) ) ; PensionPlan org.springframework.data.neo4j.integration.conversion.PensionPlan = new PensionPlan ( new MonetaryAmount ( NUMBER , NUMBER ) , STRING ) ; org.springframework.data.neo4j.integration.conversion.PensionPlan . setJavaElement ( new JavaElement ( ) ) ; this . org.springframework.data.neo4j.integration.conversion.PensionRepository . save ( org.springframework.data.neo4j.integration.conversion.PensionPlan ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . addConverter ( new SpringIntegerToByteArrayConverter ( ) ) ; this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . addConverter ( new SpringByteArrayToIntegerConverter ( ) ) ; java.lang.String java.lang.String = STRING ; byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ; assertTrue ( this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . canConvert ( byte [] .class , java.lang.String .class ) ) ; assertEquals ( java.lang.String , this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . convert ( byte[] , java.lang.String .class ) ) ; assertTrue ( this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . canConvert ( java.lang.String .class , byte [] .class ) ) ; assertTrue ( java.util.Arrays . boolean ( byte[] , this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . convert ( java.lang.String , byte [] .class ) ) ) ; SiteMember org.springframework.data.neo4j.integration.conversion.SiteMember = new SiteMember ( ) ; org.springframework.data.neo4j.integration.conversion.SiteMember . setProfilePictureData ( byte[] ) ; this . org.springframework.data.neo4j.integration.conversion.SiteMemberRepository . save ( org.springframework.data.neo4j.integration.conversion.SiteMember ) ; org.springframework.data.neo4j.integration.conversion.SiteMember = org.springframework.data.neo4j.integration.conversion.Session . loadAll ( SiteMember .class ) . iterator ( ) . next ( ) ; assertArrayEquals ( byte[] , org.springframework.data.neo4j.integration.conversion.SiteMember . getProfilePictureData ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . addConverter ( new SpringBigIntegerToBooleanConverter ( ) ) ; this . org.springframework.data.neo4j.integration.conversion.GenericConversionService . addConverter ( new SpringBooleanToBigIntegerConverter ( ) ) ; byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ; SiteMember org.springframework.data.neo4j.integration.conversion.SiteMember = new SiteMember ( ) ; org.springframework.data.neo4j.integration.conversion.SiteMember . setProfilePictureData ( byte[] ) ; org.springframework.data.neo4j.integration.conversion.SiteMember . setYears ( java.math.BigInteger . java.math.BigInteger ( NUMBER ) ) ; this . org.springframework.data.neo4j.integration.conversion.SiteMemberRepository . save ( org.springframework.data.neo4j.integration.conversion.SiteMember ) ; org.springframework.data.neo4j.integration.conversion.SiteMember = org.springframework.data.neo4j.integration.conversion.Session . loadAll ( SiteMember .class ) . iterator ( ) . next ( ) ; assertArrayEquals ( byte[] , org.springframework.data.neo4j.integration.conversion.SiteMember . getProfilePictureData ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.integration.conversion.SiteMember . getYears ( ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SiteMember org.springframework.data.neo4j.integration.conversion.SiteMember = new SiteMember ( ) ; org.springframework.data.neo4j.integration.conversion.SiteMember . setRoundingModes ( java.util.Arrays . java.util.List<java.math.RoundingMode> ( java.math.RoundingMode . java.math.RoundingMode , java.math.RoundingMode . java.math.RoundingMode ) ) ; this . org.springframework.data.neo4j.integration.conversion.SiteMemberRepository . save ( org.springframework.data.neo4j.integration.conversion.SiteMember ) ; org.springframework.data.neo4j.integration.conversion.SiteMember = org.springframework.data.neo4j.integration.conversion.Session . loadAll ( SiteMember .class ) . iterator ( ) . next ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.integration.conversion.SiteMember . getRoundingModes ( ) . size ( ) ) ; assertTrue ( org.springframework.data.neo4j.integration.conversion.SiteMember . getRoundingModes ( ) . contains ( java.math.RoundingMode . java.math.RoundingMode ) ) ; assertTrue ( org.springframework.data.neo4j.integration.conversion.SiteMember . getRoundingModes ( ) . contains ( java.math.RoundingMode . java.math.RoundingMode ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.integration.conversion.ConversionService org.springframework.data.neo4j.integration.conversion.ConversionService ( ) { return new MetaDataDrivenConversionService ( org.springframework.data.neo4j.integration.conversion.SessionFactory ( ) . metaData ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.integration.conversion.PlatformTransactionManager org.springframework.data.neo4j.integration.conversion.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.integration.conversion.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.integration.conversion.SessionFactory org.springframework.data.neo4j.integration.conversion.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
