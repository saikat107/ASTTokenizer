<METHOD_START> @ Before public void void ( ) { org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.autoproxy.AtAspectJAnnotationBindingTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.autoproxy.AtAspectJAnnotationBindingTests> ( ) ) ; org.springframework.aop.aspectj.autoproxy.AnnotatedTestBean = ( AnnotatedTestBean ) org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.aop.aspectj.autoproxy.AnnotatedTestBean . doThis ( ) ) ; assertEquals ( STRING , org.springframework.aop.aspectj.autoproxy.AnnotatedTestBean . doThat ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.autoproxy.AnnotatedTestBean . doArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.aop.aspectj.autoproxy.AnnotatedTestBean . doTheOther ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.autoproxy.ClassPathXmlApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Around ( STRING ) public java.lang.Object java.lang.Object ( ProceedingJoinPoint org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint , TestAnnotation org.springframework.aop.aspectj.autoproxy.TestAnnotation )	throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.aop.aspectj.autoproxy.TestAnnotation . value ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.aspectj.autoproxy.ProceedingJoinPoint . proceed ( ) ; return ( java.lang.Object instanceof java.lang.String ? java.lang.String + STRING + java.lang.Object : java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ TestAnnotation ( STRING ) public java.lang.Object java.lang.Object ( ) java.lang.Exception { return new Resource [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ TestAnnotation ( STRING ) public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return Resource [] .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
