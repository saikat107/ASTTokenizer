<METHOD_START> @ Before public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBeanNamesForType ( Flyway .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING , STRING ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getDataSource ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.FlywayDataSourceConfiguration .class , EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getDataSource ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getLocations ( ) ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getLocations ( ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING , STRING ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getLocations ( ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.boot.autoconfigure.flyway.Flyway . getSchemas ( ) ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.flyway.ExpectedException . expect ( BeanCreationException .class ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.flyway.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.flyway.ExpectedException . expectMessage ( STRING ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING , STRING ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.MockFlywayMigrationStrategy .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ) . isNotNull ( ) ; this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.MockFlywayMigrationStrategy .class ) . assertCalled ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.CustomFlywayMigrationInitializer .class , EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ) . isNotNull ( ) ; FlywayMigrationInitializer org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( FlywayMigrationInitializer .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer . getOrder ( ) ) . isEqualTo ( Ordered . HIGHEST_PRECEDENCE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.CustomFlywayWithJpaConfiguration .class , EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getBaselineVersion ( ) ) . isEqualTo ( MigrationVersion . fromVersion ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , NUMBER ) ; this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addLast ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getBaselineVersion ( ) ) . isEqualTo ( MigrationVersion . fromVersion ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext , STRING ) ; void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getLocations ( ) ) . containsExactlyInAnyOrder ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , org.springframework.boot.autoconfigure.flyway.FlywayAutoConfigurationTests.CallbackConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBeansOfType ( Flyway .class ) ) . hasSize ( NUMBER ) ; Flyway org.springframework.boot.autoconfigure.flyway.Flyway = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( Flyway .class ) ; FlywayCallback org.springframework.boot.autoconfigure.flyway.FlywayCallback = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( STRING , FlywayCallback .class ) ; FlywayCallback org.springframework.boot.autoconfigure.flyway.FlywayCallback = this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . getBean ( STRING , FlywayCallback .class ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getCallbacks ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getCallbacks ( ) ) . startsWith ( org.springframework.boot.autoconfigure.flyway.FlywayCallback , org.springframework.boot.autoconfigure.flyway.FlywayCallback ) ; assertThat ( org.springframework.boot.autoconfigure.flyway.Flyway . getCallbacks ( ) [ NUMBER ] ) . isInstanceOf ( SqlScriptFlywayCallback .class ) ; InOrder org.springframework.boot.autoconfigure.flyway.InOrder = inOrder ( org.springframework.boot.autoconfigure.flyway.FlywayCallback , org.springframework.boot.autoconfigure.flyway.FlywayCallback ) ; org.springframework.boot.autoconfigure.flyway.InOrder . verify ( org.springframework.boot.autoconfigure.flyway.FlywayCallback ) . beforeMigrate ( any ( java.sql.Connection .class ) ) ; org.springframework.boot.autoconfigure.flyway.InOrder . verify ( org.springframework.boot.autoconfigure.flyway.FlywayCallback ) . beforeMigrate ( any ( java.sql.Connection .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; this . org.springframework.boot.autoconfigure.flyway.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . url ( STRING ) . username ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ FlywayDataSource @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . url ( STRING ) . username ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer ( Flyway org.springframework.boot.autoconfigure.flyway.Flyway ) { FlywayMigrationInitializer org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer = new FlywayMigrationInitializer ( org.springframework.boot.autoconfigure.flyway.Flyway ) ; org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer . setOrder ( Ordered . HIGHEST_PRECEDENCE ) ; return org.springframework.boot.autoconfigure.flyway.FlywayMigrationInitializer ; }  <METHOD_END>
<METHOD_START> protected void ( javax.sql.DataSource javax.sql.DataSource ) { this . javax.sql.DataSource = javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.flyway.Flyway org.springframework.boot.autoconfigure.flyway.Flyway ( ) { return new Flyway ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.flyway.LocalContainerEntityManagerFactoryBean org.springframework.boot.autoconfigure.flyway.LocalContainerEntityManagerFactoryBean ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NoJtaPlatform . INSTANCE ) ; return new EntityManagerFactoryBuilder ( new HibernateJpaVendorAdapter ( ) , java.util.Map<java.lang.String,java.lang.Object> , null ) . dataSource ( this . javax.sql.DataSource ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Flyway org.springframework.boot.autoconfigure.flyway.Flyway ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertThat ( this . boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.boot.autoconfigure.flyway.FlywayCallback org.springframework.boot.autoconfigure.flyway.FlywayCallback ( ) { return mock ( FlywayCallback .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( NUMBER ) public org.springframework.boot.autoconfigure.flyway.FlywayCallback org.springframework.boot.autoconfigure.flyway.FlywayCallback ( ) { return mock ( FlywayCallback .class ) ; }  <METHOD_END>
