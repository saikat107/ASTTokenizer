<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.function.execution.GemfireFunctionOperations = mock ( GemfireFunctionOperations .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { GemfireFunctionProxyFactoryBean org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBean = new GemfireFunctionProxyFactoryBean ( org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.IFoo .class , org.springframework.data.gemfire.function.execution.GemfireFunctionOperations ) ; MethodInvocation org.springframework.data.gemfire.function.execution.MethodInvocation = new org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.TestInvocation ( org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.IFoo .class ) . org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.TestInvocation ( STRING , java.lang.String .class ) ; int int = NUMBER ; when ( org.springframework.data.gemfire.function.execution.GemfireFunctionOperations . executeAndExtract ( STRING , org.springframework.data.gemfire.function.execution.MethodInvocation . getArguments ( ) ) ) . thenReturn ( int ) ; java.lang.Object java.lang.Object = org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBean . invoke ( org.springframework.data.gemfire.function.execution.MethodInvocation ) ; verify ( org.springframework.data.gemfire.function.execution.GemfireFunctionOperations ) . executeAndExtract ( STRING , org.springframework.data.gemfire.function.execution.MethodInvocation . getArguments ( ) ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , java.lang.Object instanceof java.lang.Integer ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) java.lang.Throwable { GemfireFunctionProxyFactoryBean org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBean = new GemfireFunctionProxyFactoryBean ( org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.IFoo .class , org.springframework.data.gemfire.function.execution.GemfireFunctionOperations ) ; MethodInvocation org.springframework.data.gemfire.function.execution.MethodInvocation = new org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.TestInvocation ( org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.IFoo .class ) . org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.TestInvocation ( STRING , java.util.List .class ) ; java.util.List java.util.List = java.util.Arrays . java.util.List<java.lang.Integer> ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } ) ; when ( org.springframework.data.gemfire.function.execution.GemfireFunctionOperations . executeAndExtract ( STRING , org.springframework.data.gemfire.function.execution.MethodInvocation . getArguments ( ) ) ) . thenReturn ( java.util.List ) ; java.lang.Object java.lang.Object = org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBean . invoke ( org.springframework.data.gemfire.function.execution.MethodInvocation ) ; verify ( org.springframework.data.gemfire.function.execution.GemfireFunctionOperations ) . executeAndExtract ( STRING , org.springframework.data.gemfire.function.execution.MethodInvocation . getArguments ( ) ) ; ; assertTrue ( java.lang.Object instanceof java.util.List ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) java.lang.Object ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.TestInvocation org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.TestInvocation ( java.lang.Object ... java.lang.Object[] ) { this . java.lang.Object[] = java.lang.Object[] ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.TestInvocation org.springframework.data.gemfire.function.execution.GemfireFunctionProxyFactoryBeanTests.TestInvocation ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . java.lang.String = java.lang.String ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return this . java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.AccessibleObject java.lang.reflect.AccessibleObject ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { java.lang.reflect.Method java.lang.reflect.Method = null ; try { java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; } catch ( java.lang.SecurityException java.lang.SecurityException ) { java.lang.SecurityException . void ( ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { java.lang.NoSuchMethodException . void ( ) ; } return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ FunctionId ( STRING ) public abstract java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public abstract java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public abstract java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> );  <METHOD_END>
<METHOD_START> public abstract java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ( )  <METHOD_END>
