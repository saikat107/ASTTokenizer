<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.test.web.servlet.result.MvcResult . getHandler ( ) ; assertTrue ( STRING , java.lang.Object != null ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( HandlerMethod .class . boolean ( java.lang.Object ) ) { java.lang.Class<?> = ( ( HandlerMethod ) java.lang.Object ) . getBeanType ( ) ; } assertEquals ( STRING , java.lang.Class<> , ClassUtils . getUserClass ( java.lang.Class<> ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.test.web.servlet.result.MvcResult . getHandler ( ) ; assertTrue ( STRING , java.lang.Object != null ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( HandlerMethod .class . boolean ( java.lang.Object ) ) { java.lang.Class<?> = ( ( HandlerMethod ) java.lang.Object ) . getBeanType ( ) ; } assertEquals ( STRING , java.lang.Class<> , ClassUtils . getUserClass ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.Object java.lang.Object ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { if ( ! MethodInvocationInfo .class . boolean ( java.lang.Object ) ) { fail ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Object , MethodInvocationInfo .class . java.lang.String ( ) ) ) ; } MethodInvocationInfo org.springframework.test.web.servlet.result.MethodInvocationInfo = ( MethodInvocationInfo ) java.lang.Object ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.web.servlet.result.MethodInvocationInfo . getControllerMethod ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.web.servlet.result.HandlerMethod ( org.springframework.test.web.servlet.result.MvcResult ) . getMethod ( ) ; assertEquals ( STRING , java.lang.reflect.Method , java.lang.reflect.Method ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { if ( ! MethodInvocationInfo .class . boolean ( java.lang.Object ) ) { fail ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Object , MethodInvocationInfo .class . java.lang.String ( ) ) ) ; } MethodInvocationInfo org.springframework.test.web.servlet.result.MethodInvocationInfo = ( MethodInvocationInfo ) java.lang.Object ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.web.servlet.result.MethodInvocationInfo . getControllerMethod ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.web.servlet.result.HandlerMethod ( org.springframework.test.web.servlet.result.MvcResult ) . getMethod ( ) ; assertEquals ( STRING , java.lang.reflect.Method , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < ? super java.lang.String > org.springframework.test.web.servlet.result.Matcher<? super java.lang.String> ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { HandlerMethod org.springframework.test.web.servlet.result.HandlerMethod = org.springframework.test.web.servlet.result.HandlerMethod ( org.springframework.test.web.servlet.result.MvcResult ) ; assertThat ( STRING , org.springframework.test.web.servlet.result.HandlerMethod . getMethod ( ) . getName ( ) , org.springframework.test.web.servlet.result.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { HandlerMethod org.springframework.test.web.servlet.result.HandlerMethod = org.springframework.test.web.servlet.result.HandlerMethod ( org.springframework.test.web.servlet.result.MvcResult ) ; assertThat ( STRING , org.springframework.test.web.servlet.result.HandlerMethod . getMethod ( ) . getName ( ) , org.springframework.test.web.servlet.result.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { HandlerMethod org.springframework.test.web.servlet.result.HandlerMethod = org.springframework.test.web.servlet.result.HandlerMethod ( org.springframework.test.web.servlet.result.MvcResult ) ; assertEquals ( STRING , java.lang.String , org.springframework.test.web.servlet.result.HandlerMethod . getMethod ( ) . getName ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { HandlerMethod org.springframework.test.web.servlet.result.HandlerMethod = org.springframework.test.web.servlet.result.HandlerMethod ( org.springframework.test.web.servlet.result.MvcResult ) ; assertEquals ( STRING , java.lang.String , org.springframework.test.web.servlet.result.HandlerMethod . getMethod ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.reflect.Method java.lang.reflect.Method ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { HandlerMethod org.springframework.test.web.servlet.result.HandlerMethod = org.springframework.test.web.servlet.result.HandlerMethod ( org.springframework.test.web.servlet.result.MvcResult ) ; assertEquals ( STRING , java.lang.reflect.Method , org.springframework.test.web.servlet.result.HandlerMethod . getMethod ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) throws java.lang.Exception { HandlerMethod org.springframework.test.web.servlet.result.HandlerMethod = org.springframework.test.web.servlet.result.HandlerMethod ( org.springframework.test.web.servlet.result.MvcResult ) ; assertEquals ( STRING , java.lang.reflect.Method , org.springframework.test.web.servlet.result.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.test.web.servlet.result.HandlerMethod org.springframework.test.web.servlet.result.HandlerMethod ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { java.lang.Object java.lang.Object = org.springframework.test.web.servlet.result.MvcResult . getHandler ( ) ; assertTrue ( STRING , java.lang.Object != null ) ; assertTrue ( STRING + java.lang.Object , HandlerMethod .class . boolean ( java.lang.Object ) ) ; return ( HandlerMethod ) java.lang.Object ; }  <METHOD_END>
