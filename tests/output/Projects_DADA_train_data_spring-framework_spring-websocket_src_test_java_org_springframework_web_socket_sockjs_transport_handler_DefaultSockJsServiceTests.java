<METHOD_START> @ Before public void void ( ) { super. setUp ( ) ; MockitoAnnotations . initMocks ( this ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession = new TestSockJsSession ( java.lang.String , new StubSockJsServiceConfig ( ) , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; given ( this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler . getTransportType ( ) ) . willReturn ( TransportType . XHR ) ; given ( this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler . createSession ( java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) . willReturn ( this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession ) ; given ( this . org.springframework.web.socket.sockjs.transport.handler.TransportHandler . getTransportType ( ) ) . willReturn ( TransportType . XHR_SEND ) ; given ( this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler . getTransportType ( ) ) . willReturn ( TransportType . JSONP ) ; given ( this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler . createSession ( java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) . willReturn ( this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession ) ; given ( this . org.springframework.web.socket.sockjs.transport.handler.TransportHandler . getTransportType ( ) ) . willReturn ( TransportType . JSONP_SEND ) ; given ( this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.HandshakeTransportHandler . getTransportType ( ) ) . willReturn ( TransportType . WEBSOCKET ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService = new TransportHandlingSockJsService ( this . org.springframework.web.socket.sockjs.transport.handler.TaskScheduler , this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler , this . org.springframework.web.socket.sockjs.transport.handler.TransportHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultSockJsService org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService = new DefaultSockJsService ( mock ( TaskScheduler .class ) ) ; java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> < TransportType , TransportHandler > java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> = org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService . getTransportHandlers ( ) ; assertEquals ( NUMBER , java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . size ( ) ) ; assertNotNull ( java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( TransportType . WEBSOCKET ) ) ; assertNotNull ( java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( TransportType . XHR ) ) ; assertNotNull ( java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( TransportType . XHR_SEND ) ) ; assertNotNull ( java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( TransportType . XHR_STREAMING ) ) ; assertNotNull ( java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( TransportType . JSONP ) ) ; assertNotNull ( java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( TransportType . JSONP_SEND ) ) ; assertNotNull ( java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( TransportType . HTML_FILE ) ) ; assertNotNull ( java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( TransportType . EVENT_SOURCE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { XhrReceivingTransportHandler org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler = new XhrReceivingTransportHandler ( ) ; DefaultSockJsService org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService = new DefaultSockJsService ( mock ( TaskScheduler .class ) , org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler ) ; java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> < TransportType , TransportHandler > java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> = org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService . getTransportHandlers ( ) ; assertEquals ( NUMBER , java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . size ( ) ) ; assertSame ( org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler , java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . get ( org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler . getTransportType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TransportHandlingSockJsService org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService = new TransportHandlingSockJsService ( mock ( TaskScheduler .class ) , new XhrPollingTransportHandler ( ) , new XhrReceivingTransportHandler ( ) ) ; java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> < TransportType , TransportHandler > java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> = org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . getTransportHandlers ( ) ; assertEquals ( NUMBER , java.util.Map<org.springframework.web.socket.sockjs.transport.handler.TransportType,org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler ) . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession ) ; verify ( org.springframework.web.socket.sockjs.transport.handler.TaskScheduler ) . scheduleAtFixedRate ( any ( java.lang.Runnable .class ) , eq ( org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . getDisconnectDelay ( ) ) ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getCacheControl ( ) ) ; assertNull ( this . servletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertNull ( this . servletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_CREDENTIALS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . servletRequest . setServerName ( STRING ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . servletRequest . setServerName ( STRING ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertNull ( this . servletResponse . getHeader ( STRING ) ) ; assertNull ( this . servletResponse . getHeader ( STRING ) ) ; assertNull ( this . servletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; resetResponse ( ) ; java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler ) . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession ) ; resetResponse ( ) ; java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; given ( this . org.springframework.web.socket.sockjs.transport.handler.TransportHandler . checkSessionType ( this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession ) ) . willReturn ( true ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.TransportHandler ) . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; verify ( this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler ) . handleRequest ( this . request , this . response , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession ) ; this . org.springframework.web.socket.sockjs.transport.handler.TestSockJsSession . setPrincipal ( new TestPrincipal ( STRING ) ) ; this . servletRequest . setUserPrincipal ( new TestPrincipal ( STRING ) ) ; resetResponse ( ) ; reset ( this . org.springframework.web.socket.sockjs.transport.handler.TransportHandler ) ; java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; verifyNoMoreInteractions ( this . org.springframework.web.socket.sockjs.transport.handler.TransportHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransportHandlingSockJsService org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService = new TransportHandlingSockJsService ( this . org.springframework.web.socket.sockjs.transport.handler.TaskScheduler , this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.SessionCreatingTransportHandler , this . org.springframework.web.socket.sockjs.transport.handler.TransportHandler ) ; java.lang.String java.lang.String = java.lang.String + STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; resetRequestAndResponse ( ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; setRequest ( STRING , java.lang.String + java.lang.String ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; resetRequestAndResponse ( ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; setRequest ( STRING , java.lang.String + java.lang.String ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertNotEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TransportHandlingSockJsService org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService = new TransportHandlingSockJsService ( this . org.springframework.web.socket.sockjs.transport.handler.TaskScheduler , this . org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsServiceTests.HandshakeTransportHandler ) ; java.lang.String java.lang.String = STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertNotEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; resetRequestAndResponse ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; OriginHandshakeInterceptor org.springframework.web.socket.sockjs.transport.handler.OriginHandshakeInterceptor = new OriginHandshakeInterceptor ( java.util.List<java.lang.String> ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setHandshakeInterceptors ( java.util.Collections . java.util.List ( org.springframework.web.socket.sockjs.transport.handler.OriginHandshakeInterceptor ) ) ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertNotEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; resetRequestAndResponse ( ) ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . servletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertNotEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . servletResponse . getHeader ( STRING ) ) ; resetRequestAndResponse ( ) ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertNull ( this . servletResponse . getHeader ( STRING ) ) ; resetRequestAndResponse ( ) ; setRequest ( STRING , java.lang.String + java.lang.String ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . setAllowedOrigins ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; this . org.springframework.web.socket.sockjs.transport.handler.TransportHandlingSockJsService . handleRequest ( this . request , this . response , java.lang.String , this . org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; assertNotEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertNull ( this . servletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
