<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; SimpMessagingTemplate org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate = new SimpMessagingTemplate ( this . org.springframework.messaging.simp.annotation.support.MessageChannel ) ; org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate . setMessageConverter ( new StringMessageConverter ( ) ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler = new SendToMethodReturnValueHandler ( org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate , true ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler = new SendToMethodReturnValueHandler ( org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate , false ) ; SimpMessagingTemplate org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate = new SimpMessagingTemplate ( this . org.springframework.messaging.simp.annotation.support.MessageChannel ) ; org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate . setMessageConverter ( new MappingJackson2MessageConverter ( ) ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler = new SendToMethodReturnValueHandler ( org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate , true ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.SendToTestBean .class . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.SendToTestBean .class . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.SendToTestBean .class . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.SendToUserTestBean .class . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.SendToUserTestBean .class . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.reflect.Method = org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.SendToUserTestBean .class . java.lang.reflect.Method ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertFalse ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; assertTrue ( this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . supportsReturnType ( this . org.springframework.messaging.simp.annotation.support.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , STRING , STRING , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , STRING , STRING , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; void ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.SendToUserWithSendToOverrideTestBean .class ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.SendToUserWithSendToOverrideTestBean .class ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING ) ; MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , - NUMBER ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; void ( org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; void ( org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodParameter org.springframework.messaging.simp.annotation.support.MethodParameter , java.lang.String java.lang.String , int int , java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( int ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( org.springframework.messaging.simp.annotation.support.MimeType , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getContentType ( ) ) ; assertNull ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING , STRING , STRING , STRING , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING , STRING , STRING , STRING , null ) ; SimpMessageSendingOperations org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations = Mockito . mock ( SimpMessageSendingOperations .class ) ; SendToMethodReturnValueHandler org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler = new SendToMethodReturnValueHandler ( org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations , false ) ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; ArgumentCaptor < MessageHeaders > org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.MessageHeaders> = ArgumentCaptor . forClass ( MessageHeaders .class ) ; verify ( org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations ) . convertAndSend ( eq ( STRING ) , eq ( java.lang.String ) , org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.MessageHeaders> . capture ( ) ) ; MessageHeaders org.springframework.messaging.simp.annotation.support.MessageHeaders = org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.MessageHeaders> . getValue ( ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.annotation.support.MessageHeaders , SimpMessageHeaderAccessor .class ) ; assertNotNull ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ) ; assertTrue ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . isMutable ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertNull ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser = new org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ( ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertNull ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertNull ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( STRING + org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser . java.lang.String ( ) + STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertNull ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertNull ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( STRING + org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser . java.lang.String ( ) + STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setHeader ( DestinationVariableMethodArgumentResolver . DESTINATION_TEMPLATE_VARIABLES_HEADER , java.util.Map<java.lang.String,java.lang.String> ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = MessageBuilder . createMessage ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser = new org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ( ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertEquals ( org.springframework.messaging.simp.annotation.support.MimeType , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getContentType ( ) ) ; assertEquals ( STRING + org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser . java.lang.String ( ) + STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertNull ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER ) ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING + org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser . java.lang.String ( ) + STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( org.springframework.messaging.simp.annotation.support.MimeType , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getContentType ( ) ) ; assertNull ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser = new org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.UniqueUser ( ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser = new org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ( ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , STRING , STRING , org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertNull ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertNull ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( STRING + org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser . java.lang.String ( ) + STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser = new org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ( ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING , STRING , STRING , STRING , org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( STRING + org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser . java.lang.String ( ) + STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser = new org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ( ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , STRING , STRING , org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING + org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.TestUser . java.lang.String ( ) + STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( org.springframework.messaging.simp.annotation.support.MimeType , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getContentType ( ) ) ; assertNull ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ; assertEquals ( this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getHeader ( SimpMessagingTemplate . CONVERSION_HINT_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , null , null , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( java.lang.String , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( NUMBER ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getDestination ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getSessionId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.messaging.simp.annotation.support.MessageChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , STRING , STRING , STRING , null ) ; this . org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandler . handleReturnValue ( org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean ( ) , this . org.springframework.messaging.simp.annotation.support.MethodParameter , org.springframework.messaging.simp.annotation.support.Message<> ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageChannel ) . send ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . capture ( ) ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . getValue ( ) ; assertNotNull ( org.springframework.messaging.simp.annotation.support.Message<> ) ; java.lang.String java.lang.String = new java.lang.String ( ( byte [] ) org.springframework.messaging.simp.annotation.support.Message<> . getPayload ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.Message<?> < ? > org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.security.Principal java.security.Principal ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSubscriptionId ( java.lang.String ) ; if ( java.lang.String != null && java.lang.String != null ) { org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setDestination ( java.lang.String + java.lang.String ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setHeader ( DestinationPatternsMessageCondition . LOOKUP_DESTINATION_HEADER , java.lang.String ) ; } if ( java.security.Principal != null ) { org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setUser ( java.security.Principal ) ; } return MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ( int int ) { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<org.springframework.messaging.simp.annotation.support.Message<?>> . getAllValues ( ) . get ( int ) ; return MessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.annotation.support.Message<> , SimpMessageHeaderAccessor .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendTo @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendTo ( { STRING , STRING } ) @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendTo ( STRING ) @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendToUser @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendToUser ( broadcast = false ) @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendToUser ( { STRING , STRING } ) @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendToUser ( destinations = { STRING , STRING } , broadcast = false ) @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ JsonView ( org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.MyJacksonView1 .class ) @ java.lang.SuppressWarnings ( STRING ) org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean ( ) { org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean = new org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean ( ) ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean . void ( STRING ) ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean . void ( STRING ) ; org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean . void ( STRING ) ; return org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.JacksonViewBean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( javax.security.auth.Subject javax.security.auth.Subject ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendTo java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.MySendTo ( java.lang.String[] = { STRING , STRING } ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendToUser java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.MySendToUser ( java.lang.String[] = { STRING , STRING } ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ SendTo java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ org.springframework.messaging.simp.annotation.support.SendToMethodReturnValueHandlerTests.MySendTo ( java.lang.String[] = { STRING , STRING } ) java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
