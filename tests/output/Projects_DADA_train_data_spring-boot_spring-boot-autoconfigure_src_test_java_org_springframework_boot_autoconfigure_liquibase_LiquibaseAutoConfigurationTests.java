<METHOD_START> @ Before public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; new LiquibaseServiceLocatorApplicationListener ( ) . onApplicationEvent ( null ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBeanNamesForType ( SpringLiquibase .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getChangeLog ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getContexts ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getDefaultSchema ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . isDropFirst ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getChangeLog ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getChangeLog ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getChangeLog ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getContexts ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getDefaultSchema ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . isDropFirst ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getDataSource ( ) . getConnection ( ) . getMetaData ( ) . getURL ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase , STRING ) ; assertThat ( java.lang.Object ) . isInstanceOf ( CommonsLoggingLiquibaseLogger .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.liquibase.OutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getLabels ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.autoconfigure.liquibase.TemporaryFolder . newFile ( STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext , STRING + java.io.File . java.lang.String ( ) ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; java.io.File java.io.File = ( java.io.File ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase , STRING ) ; assertThat ( java.io.File ) . isEqualTo ( java.io.File ) . exists ( ) ; java.lang.String java.lang.String = new java.lang.String ( FileCopyUtils . copyToByteArray ( java.io.File ) ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfigurationTests.LiquibaseDataSourceConfiguration .class , EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . refresh ( ) ; SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( SpringLiquibase .class ) ; assertThat ( org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . getDataSource ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.liquibase.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . url ( STRING ) . username ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ LiquibaseDataSource @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . url ( STRING ) . username ( STRING ) . build ( ) ; }  <METHOD_END>
