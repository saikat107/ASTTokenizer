<METHOD_START> public void ( java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> < T > java.lang.Class<T> , BeanManager org.springframework.data.repository.cdi.BeanManager ) { this( java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> , org.springframework.data.repository.cdi.BeanManager , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> < T > java.lang.Class<T> , BeanManager org.springframework.data.repository.cdi.BeanManager , java.util.Optional<org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector> < CustomRepositoryImplementationDetector > java.util.Optional<org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector> ) { Assert . notNull ( java.util.Set<java.lang.annotation.Annotation> , STRING ) ; Assert . notNull ( org.springframework.data.repository.cdi.BeanManager , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; Assert . isTrue ( java.lang.Class<T> . boolean ( ) , STRING ) ; this . java.util.Set<java.lang.annotation.Annotation> = java.util.Set<java.lang.annotation.Annotation> ; this . java.lang.Class<T> = java.lang.Class<T> ; this . org.springframework.data.repository.cdi.BeanManager = org.springframework.data.repository.cdi.BeanManager ; this . java.util.Optional<org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector> = java.util.Optional<org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector> ; this . java.lang.String = java.lang.String ( java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.Set<java.lang.annotation.Annotation> . int ( ) ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.util.Set<java.lang.annotation.Annotation> ) { java.util.List<java.lang.String> . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ; } java.util.Collections . void ( java.util.List<java.lang.String> ) ; return StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , STRING ) + STRING + java.lang.Class<> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Set<java.lang.reflect.Type> < java.lang.reflect.Type > java.util.Set<java.lang.reflect.Type> ( ) { java.util.Set<java.lang.Class> < java.lang.Class > java.util.Set<java.lang.Class> = new java.util.HashSet<java.lang.Class> <> ( ) ; java.util.Set<java.lang.Class> . boolean ( java.lang.Class<T> ) ; java.util.Set<java.lang.Class> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<T> . java.lang.Class<?>[] ( ) ) ) ; return new java.util.HashSet<java.lang.reflect.Type> <> ( java.util.Set<java.lang.Class> ) ; }  <METHOD_END>
<METHOD_START> protected < S > S S ( Bean < S > org.springframework.data.repository.cdi.Bean<S> ) { return java.lang.Object ( org.springframework.data.repository.cdi.Bean<S> , org.springframework.data.repository.cdi.Bean<S> . getBeanClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < S > S S ( Bean < S > org.springframework.data.repository.cdi.Bean<S> , java.lang.Class<?> < ? > java.lang.Class<?> ) { CreationalContext < S > org.springframework.data.repository.cdi.CreationalContext<S> = org.springframework.data.repository.cdi.BeanManager . createCreationalContext ( org.springframework.data.repository.cdi.Bean<S> ) ; return ( S ) org.springframework.data.repository.cdi.BeanManager . getReference ( org.springframework.data.repository.cdi.Bean<S> , java.lang.Class<> , org.springframework.data.repository.cdi.CreationalContext<S> ) ; }  <METHOD_END>
<METHOD_START> public final void void ( ) { T ( org.springframework.data.repository.cdi.BeanManager . createCreationalContext ( this ) ) ; }  <METHOD_END>
<METHOD_START> public final T T ( CreationalContext < T > org.springframework.data.repository.cdi.CreationalContext<T> ) { if ( this . T != null ) { org.springframework.data.repository.cdi.Logger . debug ( STRING , java.lang.Class<T> . java.lang.String ( ) ) ; return this . T ; } org.springframework.data.repository.cdi.Logger . debug ( STRING , java.lang.Class<T> . java.lang.String ( ) ) ; this . T = T ( org.springframework.data.repository.cdi.CreationalContext<T> , java.lang.Class<T> ) ; return T ; }  <METHOD_END>
<METHOD_START> public void void ( T T , CreationalContext < T > org.springframework.data.repository.cdi.CreationalContext<T> ) { if ( org.springframework.data.repository.cdi.Logger . isDebugEnabled ( ) ) { org.springframework.data.repository.cdi.Logger . debug ( java.lang.String . java.lang.String ( STRING , T . java.lang.String ( ) , java.lang.Class<T> . java.lang.String ( ) ) ) ; } org.springframework.data.repository.cdi.CreationalContext<T> . release ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.repository.cdi.CdiRepositoryConfiguration org.springframework.data.repository.cdi.CdiRepositoryConfiguration ( BeanManager org.springframework.data.repository.cdi.BeanManager , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ) { return org.springframework.data.repository.cdi.BeanManager . getBeans ( CdiRepositoryConfiguration .class , java.lang.annotation.Annotation[] ( java.util.Set<java.lang.annotation.Annotation> ) ) . stream ( ) . findFirst ( ) . map ( it -> ( CdiRepositoryConfiguration ) getDependencyInstance ( it ) ) . orElse ( org.springframework.data.repository.cdi.CdiRepositoryConfiguration ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.springframework.data.repository.cdi.Bean<?>> < Bean < ? > > java.util.Optional<org.springframework.data.repository.cdi.Bean<?>> ( java.lang.Class<?> < ? > java.lang.Class<?> , BeanManager org.springframework.data.repository.cdi.BeanManager , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ) { return java.util.Optional<org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector> . flatMap ( it -> { CdiRepositoryConfiguration cdiRepositoryConfiguration = lookupConfiguration ( beanManager , qualifiers ) ; return getCustomImplementationClass ( repositoryType , cdiRepositoryConfiguration , it ) . flatMap ( type -> beanManager . getBeans ( type , getQualifiersArray ( qualifiers ) ) . stream ( ) . findFirst ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ( java.lang.Class<?> < ? > java.lang.Class<?> , CdiRepositoryConfiguration org.springframework.data.repository.cdi.CdiRepositoryConfiguration , CustomRepositoryImplementationDetector org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector ) { java.lang.String java.lang.String = java.lang.String ( java.lang.Class<> , org.springframework.data.repository.cdi.CdiRepositoryConfiguration ) ; java.util.Optional<org.springframework.data.repository.cdi.AbstractBeanDefinition> < AbstractBeanDefinition > java.util.Optional<org.springframework.data.repository.cdi.AbstractBeanDefinition> = org.springframework.data.repository.cdi.CustomRepositoryImplementationDetector . detectCustomImplementation ( java.lang.String , java.util.Collections . java.util.Set<java.lang.String> ( java.lang.Class<> . java.lang.Package ( ) . java.lang.String ( ) ) , java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ; return java.util.Optional<org.springframework.data.repository.cdi.AbstractBeanDefinition> . map ( it -> { try { return Class . forName ( it . getBeanClassName ( ) ) ; } catch ( ClassNotFoundException e ) { throw new UnsatisfiedResolutionException ( String . format ( STRING , it . getBeanClassName ( ) ) , e ) ; } } ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> , CdiRepositoryConfiguration org.springframework.data.repository.cdi.CdiRepositoryConfiguration ) { java.lang.String java.lang.String = org.springframework.data.repository.cdi.CdiRepositoryConfiguration . getRepositoryImplementationPostfix ( ) ; Assert . hasText ( java.lang.String , STRING ) ; return ClassUtils . getShortName ( java.lang.Class<> ) + java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ) { return java.util.Set<java.lang.annotation.Annotation> . java.lang.annotation.Annotation[] ( new java.lang.annotation.Annotation [ java.util.Set<java.lang.annotation.Annotation> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) { return java.util.Set<java.lang.annotation.Annotation> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.Class<T> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { return java.util.Arrays . java.util.stream.Stream<java.lang.annotation.Annotation> ( java.lang.Class<T> . java.lang.annotation.Annotation[] ( ) ) . java.util.stream.Stream<java.lang.Class<>> ( java.lang.annotation.Annotation :: java.lang.Class<? extends java.lang.annotation.Annotation> ) . java.util.stream.Stream<java.lang.Class<>> ( java.lang.Class<> -> java.lang.Class<> . boolean ( Stereotype .class ) ) . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Class<? extends java.lang.annotation.Annotation>,?,java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Class<T> . boolean ( Alternative .class ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.data.repository.cdi.InjectionPoint> < InjectionPoint > java.util.Set<org.springframework.data.repository.cdi.InjectionPoint> ( ) { return java.util.Collections . java.util.Set<org.springframework.data.repository.cdi.InjectionPoint> ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return ApplicationScoped .class ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> private T T ( CreationalContext < T > org.springframework.data.repository.cdi.CreationalContext<T> , java.lang.Class<T> < T > java.lang.Class<T> ) { java.util.Optional<org.springframework.data.repository.cdi.Bean<?>> < Bean < ? > > java.util.Optional<org.springframework.data.repository.cdi.Bean<?>> = java.util.Optional<org.springframework.data.repository.cdi.Bean<?>> ( java.lang.Class<T> , org.springframework.data.repository.cdi.BeanManager , java.util.Set<java.lang.annotation.Annotation> ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<org.springframework.data.repository.cdi.Bean<?>> . map ( it -> beanManager . getReference ( it , it . getBeanClass ( ) , beanManager . createCreationalContext ( it ) ) ) ; return T ( org.springframework.data.repository.cdi.CreationalContext<T> , java.lang.Class<T> , java.util.Optional<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> protected T T ( CreationalContext < T > org.springframework.data.repository.cdi.CreationalContext<T> , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { throw new java.lang.UnsupportedOperationException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.Class<T> . java.lang.String ( ) , java.util.Set<java.lang.annotation.Annotation> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return DefaultRepositoryConfiguration . DEFAULT_REPOSITORY_IMPLEMENTATION_POSTFIX ; }  <METHOD_END>
