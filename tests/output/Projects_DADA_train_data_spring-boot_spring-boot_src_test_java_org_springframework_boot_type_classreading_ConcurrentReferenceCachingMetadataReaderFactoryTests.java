<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory = spy ( new org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory ( ) ) ; MetadataReader org.springframework.boot.type.classreading.MetadataReader = org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory . getMetadataReader ( java.lang.Class<? extends org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests> ( ) . java.lang.String ( ) ) ; MetadataReader org.springframework.boot.type.classreading.MetadataReader = org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory . getMetadataReader ( java.lang.Class<? extends org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests> ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.type.classreading.MetadataReader ) . isSameAs ( org.springframework.boot.type.classreading.MetadataReader ) ; verify ( org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory , times ( NUMBER ) ) . createMetadataReader ( ( Resource ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory = spy ( new org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory ( ) ) ; MetadataReader org.springframework.boot.type.classreading.MetadataReader = org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory . getMetadataReader ( java.lang.Class<? extends org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests> ( ) . java.lang.String ( ) ) ; org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory . clearCache ( ) ; MetadataReader org.springframework.boot.type.classreading.MetadataReader = org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory . getMetadataReader ( java.lang.Class<? extends org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests> ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.type.classreading.MetadataReader ) . isNotEqualTo ( sameInstance ( org.springframework.boot.type.classreading.MetadataReader ) ) ; verify ( org.springframework.boot.type.classreading.ConcurrentReferenceCachingMetadataReaderFactoryTests.TestConcurrentReferenceCachingMetadataReaderFactory , times ( NUMBER ) ) . createMetadataReader ( ( Resource ) any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.type.classreading.MetadataReader org.springframework.boot.type.classreading.MetadataReader ( Resource org.springframework.boot.type.classreading.Resource ) throws java.io.IOException { return mock ( MetadataReader .class ) ; }  <METHOD_END>
