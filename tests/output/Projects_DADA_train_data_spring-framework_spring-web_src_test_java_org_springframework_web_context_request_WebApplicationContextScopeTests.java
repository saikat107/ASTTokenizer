<METHOD_START> private org.springframework.web.context.request.WebApplicationContext org.springframework.web.context.request.WebApplicationContext ( java.lang.String java.lang.String ) { MockServletContext org.springframework.web.context.request.MockServletContext = new MockServletContext ( ) ; GenericWebApplicationContext org.springframework.web.context.request.GenericWebApplicationContext = new GenericWebApplicationContext ( org.springframework.web.context.request.MockServletContext ) ; GenericBeanDefinition org.springframework.web.context.request.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.web.context.request.GenericBeanDefinition . setBeanClass ( DerivedTestBean .class ) ; org.springframework.web.context.request.GenericBeanDefinition . setScope ( java.lang.String ) ; org.springframework.web.context.request.GenericWebApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.web.context.request.GenericBeanDefinition ) ; org.springframework.web.context.request.GenericWebApplicationContext . refresh ( ) ; return org.springframework.web.context.request.GenericWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebApplicationContext org.springframework.web.context.request.WebApplicationContext = org.springframework.web.context.request.WebApplicationContext ( WebApplicationContext . SCOPE_REQUEST ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.ServletRequestAttributes ) ; try { assertNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( java.lang.String ) ) ; DerivedTestBean org.springframework.web.context.request.DerivedTestBean = org.springframework.web.context.request.WebApplicationContext . getBean ( java.lang.String , DerivedTestBean .class ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( java.lang.String ) ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , org.springframework.web.context.request.WebApplicationContext . getBean ( java.lang.String ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; assertTrue ( org.springframework.web.context.request.DerivedTestBean . wasDestroyed ( ) ) ; } finally { RequestContextHolder . setRequestAttributes ( null ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebApplicationContext org.springframework.web.context.request.WebApplicationContext = org.springframework.web.context.request.WebApplicationContext ( WebApplicationContext . SCOPE_SESSION ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.ServletRequestAttributes ) ; try { assertNull ( org.springframework.web.context.request.MockHttpServletRequest . getSession ( ) . getAttribute ( java.lang.String ) ) ; DerivedTestBean org.springframework.web.context.request.DerivedTestBean = org.springframework.web.context.request.WebApplicationContext . getBean ( java.lang.String , DerivedTestBean .class ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , org.springframework.web.context.request.MockHttpServletRequest . getSession ( ) . getAttribute ( java.lang.String ) ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , org.springframework.web.context.request.WebApplicationContext . getBean ( java.lang.String ) ) ; org.springframework.web.context.request.MockHttpServletRequest . getSession ( ) . invalidate ( ) ; assertTrue ( org.springframework.web.context.request.DerivedTestBean . wasDestroyed ( ) ) ; } finally { RequestContextHolder . setRequestAttributes ( null ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebApplicationContext org.springframework.web.context.request.WebApplicationContext = org.springframework.web.context.request.WebApplicationContext ( WebApplicationContext . SCOPE_APPLICATION ) ; assertNull ( org.springframework.web.context.request.WebApplicationContext . getServletContext ( ) . getAttribute ( java.lang.String ) ) ; DerivedTestBean org.springframework.web.context.request.DerivedTestBean = org.springframework.web.context.request.WebApplicationContext . getBean ( java.lang.String , DerivedTestBean .class ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , org.springframework.web.context.request.WebApplicationContext . getServletContext ( ) . getAttribute ( java.lang.String ) ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , org.springframework.web.context.request.WebApplicationContext . getBean ( java.lang.String ) ) ; new ContextCleanupListener ( ) . contextDestroyed ( new ServletContextEvent ( org.springframework.web.context.request.WebApplicationContext . getServletContext ( ) ) ) ; assertTrue ( org.springframework.web.context.request.DerivedTestBean . wasDestroyed ( ) ) ; }  <METHOD_END>
