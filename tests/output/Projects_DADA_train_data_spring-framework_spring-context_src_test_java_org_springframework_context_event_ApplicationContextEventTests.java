<METHOD_START> @ Test public void void ( ) { void ( true , ApplicationListener .class , new ContextClosedEvent ( new StaticApplicationContext ( ) ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , StringEventListener .class , createGenericTestEvent ( STRING ) , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , StringEventListener .class , createGenericTestEvent ( NUMBER ) , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , StringEventListener .class , createGenericTestEvent ( STRING ) , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , StringEventListener .class , new StringEvent ( this , STRING ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , StringEventListener .class , new LongEvent ( this , NUMBER ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , StringEventListener .class , new SmartGenericTestEvent <> ( this , STRING ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , StringEventListener .class , new SmartGenericTestEvent <> ( this , NUMBER ) , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , java.lang.Class<?> < ? > java.lang.Class<?> , ApplicationEvent org.springframework.context.event.ApplicationEvent , ResolvableType org.springframework.context.event.ResolvableType ) { @ java.lang.SuppressWarnings ( STRING ) ApplicationListener < ApplicationEvent > org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> = ( ApplicationListener < ApplicationEvent > ) mock ( java.lang.Class<> ) ; SimpleApplicationEventMulticaster org.springframework.context.event.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) ; if ( org.springframework.context.event.ResolvableType != null ) { org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( org.springframework.context.event.ApplicationEvent , org.springframework.context.event.ResolvableType ) ; } else { org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( org.springframework.context.event.ApplicationEvent ) ; } int int = boolean ? NUMBER : NUMBER ; verify ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> , times ( int ) ) . onApplicationEvent ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) ApplicationListener < ApplicationEvent > org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> = mock ( ApplicationListener .class ) ; ApplicationEvent org.springframework.context.event.ApplicationEvent = new ContextClosedEvent ( new StaticApplicationContext ( ) ) ; SimpleApplicationEventMulticaster org.springframework.context.event.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . setTaskExecutor ( new java.util.concurrent.Executor ( ) { @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { java.lang.Runnable . void ( ) ; java.lang.Runnable . void ( ) ; } } ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( org.springframework.context.event.ApplicationEvent ) ; verify ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> , times ( NUMBER ) ) . onApplicationEvent ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { java.lang.Runnable . void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) ApplicationListener < ApplicationEvent > org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> = mock ( ApplicationListener .class ) ; ApplicationEvent org.springframework.context.event.ApplicationEvent = new ContextClosedEvent ( new StaticApplicationContext ( ) ) ; SimpleApplicationEventMulticaster org.springframework.context.event.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) ; java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; willThrow ( java.lang.RuntimeException ) . given ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) . onApplicationEvent ( org.springframework.context.event.ApplicationEvent ) ; try { org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( org.springframework.context.event.ApplicationEvent ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertSame ( java.lang.RuntimeException , java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) ApplicationListener < ApplicationEvent > org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> = mock ( ApplicationListener .class ) ; ApplicationEvent org.springframework.context.event.ApplicationEvent = new ContextClosedEvent ( new StaticApplicationContext ( ) ) ; SimpleApplicationEventMulticaster org.springframework.context.event.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . setErrorHandler ( TaskUtils . LOG_AND_SUPPRESS_ERROR_HANDLER ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) ; willThrow ( new java.lang.RuntimeException ( ) ) . given ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) . onApplicationEvent ( org.springframework.context.event.ApplicationEvent ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 = new org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 ( ) ; org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 = new org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 ) ; SimpleApplicationEventMulticaster org.springframework.context.event.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( this ) ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 = new org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 ( ) ; org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener4 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener4 = new org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener4 ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 ) ; SimpleApplicationEventMulticaster org.springframework.context.event.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener4 ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( this ) ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 = new org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 ( ) ; org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 = new org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 ) ; ApplicationListener < ApplicationEvent > org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> = ( ApplicationListener < ApplicationEvent > ) new ProxyFactory ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 ) . getProxy ( ) ; ApplicationListener < ApplicationEvent > org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> = ( ApplicationListener < ApplicationEvent > ) new ProxyFactory ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 ) . getProxy ( ) ; SimpleApplicationEventMulticaster org.springframework.context.event.SimpleApplicationEventMulticaster = new SimpleApplicationEventMulticaster ( ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . addApplicationListener ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationEvent> ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( this ) ) ; org.springframework.context.event.SimpleApplicationEventMulticaster . multicastEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInvocation org.springframework.context.event.MethodInvocation = mock ( MethodInvocation .class ) ; ApplicationContext org.springframework.context.event.ApplicationContext = mock ( ApplicationContext .class ) ; EventPublicationInterceptor org.springframework.context.event.EventPublicationInterceptor = new EventPublicationInterceptor ( ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventClass ( org.springframework.context.event.ApplicationContextEventTests.MyEvent .class ) ; org.springframework.context.event.EventPublicationInterceptor . setApplicationEventPublisher ( org.springframework.context.event.ApplicationContext ) ; org.springframework.context.event.EventPublicationInterceptor . afterPropertiesSet ( ) ; given ( org.springframework.context.event.MethodInvocation . proceed ( ) ) . willReturn ( new java.lang.Object ( ) ) ; given ( org.springframework.context.event.MethodInvocation . getThis ( ) ) . willReturn ( new java.lang.Object ( ) ) ; org.springframework.context.event.EventPublicationInterceptor . invoke ( org.springframework.context.event.MethodInvocation ) ; verify ( org.springframework.context.event.ApplicationContext ) . publishEvent ( isA ( org.springframework.context.event.ApplicationContextEventTests.MyEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 .class ) ) ; RootBeanDefinition org.springframework.context.event.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener2 .class ) ; org.springframework.context.event.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( new RuntimeBeanReference ( STRING ) ) ; org.springframework.context.event.RootBeanDefinition . setLazyInit ( true ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.event.RootBeanDefinition ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.event.StaticApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 = org.springframework.context.event.StaticApplicationContext . getBean ( STRING , org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 .class ) ; org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent = new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ; assertFalse ( org.springframework.context.event.StaticApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; assertTrue ( org.springframework.context.event.StaticApplicationContext . getDefaultListableBeanFactory ( ) . containsSingleton ( STRING ) ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent = new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ) ; org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . clear ( ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ) ; AbstractApplicationEventMulticaster org.springframework.context.event.AbstractApplicationEventMulticaster = org.springframework.context.event.StaticApplicationContext . getBean ( AbstractApplicationEventMulticaster .class ) ; assertEquals ( NUMBER , multicaster . retrieverCache . size ( ) ) ; org.springframework.context.event.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.event.ApplicationContextEventTests.MyPayloadListener .class ) ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; org.springframework.context.event.ApplicationContextEventTests.MyPayloadListener org.springframework.context.event.ApplicationContextEventTests.MyPayloadListener = org.springframework.context.event.StaticApplicationContext . getBean ( STRING , org.springframework.context.event.ApplicationContextEventTests.MyPayloadListener .class ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( STRING ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( STRING ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( STRING ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( STRING ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyPayloadListener . java.util.Set<java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyPayloadListener . java.util.Set<java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyPayloadListener . java.util.Set<java.lang.Object> . boolean ( STRING ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyPayloadListener . java.util.Set<java.lang.Object> . boolean ( STRING ) ) ; AbstractApplicationEventMulticaster org.springframework.context.event.AbstractApplicationEventMulticaster = org.springframework.context.event.StaticApplicationContext . getBean ( AbstractApplicationEventMulticaster .class ) ; assertEquals ( NUMBER , multicaster . retrieverCache . size ( ) ) ; org.springframework.context.event.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; RootBeanDefinition org.springframework.context.event.RootBeanDefinition = new RootBeanDefinition ( StaticApplicationContext .class ) ; org.springframework.context.event.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.RootBeanDefinition . setInitMethodName ( STRING ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.event.RootBeanDefinition ) ; RootBeanDefinition org.springframework.context.event.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 .class ) ; org.springframework.context.event.RootBeanDefinition . setDependsOn ( STRING ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.event.RootBeanDefinition ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 = org.springframework.context.event.StaticApplicationContext . getBean ( STRING , org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 .class ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; SimpleApplicationEventMulticaster org.springframework.context.event.SimpleApplicationEventMulticaster = org.springframework.context.event.StaticApplicationContext . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME , SimpleApplicationEventMulticaster .class ) ; assertFalse ( org.springframework.context.event.SimpleApplicationEventMulticaster . getApplicationListeners ( ) . isEmpty ( ) ) ; org.springframework.context.event.StaticApplicationContext . close ( ) ; assertTrue ( org.springframework.context.event.SimpleApplicationEventMulticaster . getApplicationListeners ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; RootBeanDefinition org.springframework.context.event.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.event.ApplicationContextEventTests.MyNonSingletonListener .class ) ; org.springframework.context.event.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.event.RootBeanDefinition ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent = new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent = new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyNonSingletonListener . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyNonSingletonListener . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyNonSingletonListener . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; assertTrue ( org.springframework.context.event.ApplicationContextEventTests.MyNonSingletonListener . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ) ) ; org.springframework.context.event.ApplicationContextEventTests.MyNonSingletonListener . java.util.Set<org.springframework.context.event.ApplicationEvent> . clear ( ) ; org.springframework.context.event.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( BeanThatBroadcasts .class ) ) ; RootBeanDefinition org.springframework.context.event.RootBeanDefinition = new RootBeanDefinition ( BeanThatListens .class ) ; org.springframework.context.event.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( new RuntimeBeanReference ( STRING ) ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.event.RootBeanDefinition ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; BeanThatBroadcasts org.springframework.context.event.BeanThatBroadcasts = org.springframework.context.event.StaticApplicationContext . getBean ( STRING , BeanThatBroadcasts .class ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ) ; assertEquals ( STRING , NUMBER , broadcaster . receivedCount ) ; org.springframework.context.event.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; RootBeanDefinition org.springframework.context.event.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.event.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RootBeanDefinition ( BeanThatListens .class ) ) ; org.springframework.context.event.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.event.RootBeanDefinition ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( this ) ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( this ) ) ; TestBean org.springframework.context.event.TestBean = org.springframework.context.event.StaticApplicationContext . getBean ( TestBean .class ) ; assertEquals ( NUMBER , ( ( BeanThatListens ) org.springframework.context.event.TestBean . getFriends ( ) . iterator ( ) . next ( ) ) . getEventCount ( ) ) ; org.springframework.context.event.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> < org.springframework.context.event.ApplicationContextEventTests.MyEvent > java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> = new java.util.HashSet<org.springframework.context.event.ApplicationContextEventTests.MyEvent> <> ( ) ; StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.context.event.StaticApplicationContext . addApplicationListener ( new ApplicationListener < org.springframework.context.event.ApplicationContextEventTests.MyEvent > ( ) { @ java.lang.Override public void void ( org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent ) { java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> . boolean ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; } } ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( org.springframework.context.event.StaticApplicationContext ) ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; assertSame ( NUMBER , java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> . int ( ) ) ; assertTrue ( java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> . boolean ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; assertTrue ( java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> . boolean ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; org.springframework.context.event.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent ) { java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> . boolean ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> < org.springframework.context.event.ApplicationContextEventTests.MyEvent > java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> = new java.util.HashSet<org.springframework.context.event.ApplicationContextEventTests.MyEvent> <> ( ) ; StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; ApplicationListener < org.springframework.context.event.ApplicationContextEventTests.MyEvent > org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationContextEventTests.MyEvent> = java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> :: boolean ; org.springframework.context.event.StaticApplicationContext . addApplicationListener ( org.springframework.context.event.ApplicationListener<org.springframework.context.event.ApplicationContextEventTests.MyEvent> ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyOtherEvent ( org.springframework.context.event.StaticApplicationContext ) ) ; org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent = new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( org.springframework.context.event.StaticApplicationContext ) ; org.springframework.context.event.StaticApplicationContext . publishEvent ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ; assertSame ( NUMBER , java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> . int ( ) ) ; assertTrue ( java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> . boolean ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; assertTrue ( java.util.Set<org.springframework.context.event.ApplicationContextEventTests.MyEvent> . boolean ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; org.springframework.context.event.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.event.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.event.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( BeanThatListens .class ) ) ; org.springframework.context.event.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( StaticMessageSource .class ) ) ; org.springframework.context.event.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.event.ApplicationContextEventTests.EventPublishingBeanPostProcessor .class ) ) ; org.springframework.context.event.GenericApplicationContext . refresh ( ) ; org.springframework.context.event.GenericApplicationContext . publishEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( this ) ) ; BeanThatListens org.springframework.context.event.BeanThatListens = org.springframework.context.event.GenericApplicationContext . getBean ( BeanThatListens .class ) ; assertEquals ( NUMBER , org.springframework.context.event.BeanThatListens . getEventCount ( ) ) ; org.springframework.context.event.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) { this . java.util.Set<org.springframework.context.event.ApplicationEvent> . add ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 ) { this . org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 = org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent ) { assertTrue ( this . org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener1 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PayloadApplicationEvent org.springframework.context.event.PayloadApplicationEvent ) { this . java.util.Set<java.lang.Object> . boolean ( org.springframework.context.event.PayloadApplicationEvent . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) { java.util.Set<org.springframework.context.event.ApplicationEvent> . add ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) { this . java.util.Set<org.springframework.context.event.ApplicationEvent> . add ( org.springframework.context.event.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 ) { this . org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 = org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.context.event.ApplicationContextEventTests.MyEvent org.springframework.context.event.ApplicationContextEventTests.MyEvent ) { assertTrue ( this . org.springframework.context.event.ApplicationContextEventTests.MyOrderedListener3 . java.util.Set<org.springframework.context.event.ApplicationEvent> . contains ( org.springframework.context.event.ApplicationContextEventTests.MyEvent ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.context.event.ApplicationContext ) { this . org.springframework.context.event.ApplicationContext = org.springframework.context.event.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.context.event.BeansException { this . org.springframework.context.event.ApplicationContext . publishEvent ( new org.springframework.context.event.ApplicationContextEventTests.MyEvent ( this ) ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.context.event.BeansException { return java.lang.Object ; }  <METHOD_END>
