<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) ; if ( org.springframework.expression.spel.Expression == null ) { fail ( STRING ) ; } if ( boolean ) { SpelUtilities . printAbstractSyntaxTree ( java.lang.System . java.io.PrintStream , org.springframework.expression.spel.Expression ) ; } java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; if ( java.lang.Object == null ) { if ( java.lang.Object == null ) { return; } assertEquals ( STRING + java.lang.Object + STRING , java.lang.Object , null ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; assertEquals ( STRING + java.lang.Class<> + STRING + java.lang.Class<> + STRING , java.lang.Class<> , java.lang.Class<> ) ; if ( java.lang.Object instanceof java.lang.String ) { assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , org.springframework.expression.spel.AbstractExpressionTests . java.lang.String ( java.lang.Object ) ) ; } else { assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) ; if ( org.springframework.expression.spel.Expression == null ) { fail ( STRING ) ; } if ( boolean ) { SpelUtilities . printAbstractSyntaxTree ( java.lang.System . java.io.PrintStream , org.springframework.expression.spel.Expression ) ; } java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Class<> ) ; if ( java.lang.Object == null ) { if ( java.lang.Object == null ) { return; } assertEquals ( STRING + java.lang.Object + STRING , java.lang.Object , null ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; assertEquals ( STRING + java.lang.Class<> + STRING + java.lang.Class<> + STRING , java.lang.Class<> , java.lang.Class<> ) ; assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) ; if ( org.springframework.expression.spel.Expression == null ) { fail ( STRING ) ; } if ( boolean ) { SpelUtilities . printAbstractSyntaxTree ( java.lang.System . java.io.PrintStream , org.springframework.expression.spel.Expression ) ; } java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; if ( java.lang.Object == null ) { if ( java.lang.Object == null ) { return; } assertEquals ( STRING + java.lang.Object + STRING , java.lang.Object , null ) ; } java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( java.lang.Object instanceof java.lang.String ) { assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , org.springframework.expression.spel.AbstractExpressionTests . java.lang.String ( java.lang.Object ) ) ; } else { assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , java.lang.Object ) ; } assertEquals ( STRING + java.lang.Class<> + STRING + java.lang.Class<> + STRING , java.lang.Class<> . boolean ( java.lang.Class<> ) , true ) ; boolean boolean = org.springframework.expression.spel.Expression . isWritable ( org.springframework.expression.spel.StandardEvaluationContext ) ; if ( boolean != boolean ) { if ( boolean ) fail ( STRING ) ; else fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , SpelMessage org.springframework.expression.spel.SpelMessage , java.lang.Object ... java.lang.Object[] ) { void ( java.lang.String , null , org.springframework.expression.spel.SpelMessage , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , SpelMessage org.springframework.expression.spel.SpelMessage , java.lang.Object ... java.lang.Object[] ) { try { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) ; if ( org.springframework.expression.spel.Expression == null ) { fail ( STRING ) ; } if ( java.lang.Class<> != null ) { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Class<> ) ; } else { org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; } fail ( STRING + org.springframework.expression.spel.SpelMessage ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException = ( SpelEvaluationException ) org.springframework.expression.spel.EvaluationException ; if ( org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) != org.springframework.expression.spel.SpelMessage ) { assertEquals ( STRING , org.springframework.expression.spel.SpelMessage , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } if ( java.lang.Object[] != null && java.lang.Object[] . int != NUMBER ) { int int = ( ( java.lang.Integer ) java.lang.Object[] [ NUMBER ] ) . int ( ) ; assertEquals ( STRING , int , org.springframework.expression.spel.SpelEvaluationException . getPosition ( ) ) ; if ( java.lang.Object[] . int > NUMBER ) { java.lang.Object [] java.lang.Object[] = org.springframework.expression.spel.SpelEvaluationException . getInserts ( ) ; if ( java.lang.Object[] == null ) { java.lang.Object[] = new java.lang.Object [ NUMBER ] ; } if ( java.lang.Object[] . int < java.lang.Object[] . int - NUMBER ) { fail ( STRING + ( java.lang.Object[] . int - NUMBER ) + STRING + java.lang.Object[] . int + STRING ) ; } for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { if ( java.lang.Object[] [ int ] == null ) { if ( java.lang.Object[] [ int - NUMBER ] != null ) { fail ( STRING + java.lang.Object[] [ int - NUMBER ] + STRING ) ; } } else if ( java.lang.Object[] [ int - NUMBER ] == null ) { if ( java.lang.Object[] [ int ] != null ) { fail ( STRING + java.lang.Object[] [ int ] + STRING ) ; } } else if ( ! java.lang.Object[] [ int - NUMBER ] . boolean ( java.lang.Object[] [ int ] ) ) { fail ( STRING + java.lang.Object[] [ int ] + STRING + java.lang.Object[] [ int - NUMBER ] + STRING ) ; } } } } } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , SpelMessage org.springframework.expression.spel.SpelMessage , java.lang.Object ... java.lang.Object[] ) { try { Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( java.lang.String ) ; SpelUtilities . printAbstractSyntaxTree ( java.lang.System . java.io.PrintStream , org.springframework.expression.spel.Expression ) ; fail ( STRING ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { SpelParseException org.springframework.expression.spel.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.ParseException ; if ( org.springframework.expression.spel.SpelParseException . getMessageCode ( ) != org.springframework.expression.spel.SpelMessage ) { assertEquals ( STRING , org.springframework.expression.spel.SpelMessage , org.springframework.expression.spel.SpelParseException . getMessageCode ( ) ) ; } if ( java.lang.Object[] != null && java.lang.Object[] . int != NUMBER ) { int int = ( ( java.lang.Integer ) java.lang.Object[] [ NUMBER ] ) . int ( ) ; assertEquals ( STRING , int , org.springframework.expression.spel.SpelParseException . getPosition ( ) ) ; if ( java.lang.Object[] . int > NUMBER ) { java.lang.Object [] java.lang.Object[] = org.springframework.expression.spel.SpelParseException . getInserts ( ) ; if ( java.lang.Object[] == null ) { java.lang.Object[] = new java.lang.Object [ NUMBER ] ; } if ( java.lang.Object[] . int < java.lang.Object[] . int - NUMBER ) { fail ( STRING + ( java.lang.Object[] . int - NUMBER ) + STRING + java.lang.Object[] . int + STRING ) ; } for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { if ( ! java.lang.Object[] [ int - NUMBER ] . boolean ( java.lang.Object[] [ int ] ) ) { fail ( STRING + java.lang.Object[] [ int ] + STRING + java.lang.Object[] [ int - NUMBER ] + STRING ) ; } } } } } }  <METHOD_END>
<METHOD_START> protected static java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return java.lang.String ( java.lang.Object , false ) ; }  <METHOD_END>
<METHOD_START> protected static java.lang.String java.lang.String ( java.lang.Object java.lang.Object , boolean boolean ) { if ( java.lang.Object == null ) { return STRING ; } if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?> ( ) . boolean ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?> ( ) ; if ( java.lang.Class<> == java.lang.Integer . java.lang.Class<java.lang.Integer> ) { int [] int[] = ( int [] ) java.lang.Object ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int[] . int ) . java.lang.StringBuilder ( STRING ) ; for ( int int = NUMBER ; int < int[] . int ; int ++ ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( int[] [ int ] ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else if ( java.lang.Class<> == java.lang.Long . java.lang.Class<java.lang.Long> ) { long [] long[] = ( long [] ) java.lang.Object ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( long[] . int ) . java.lang.StringBuilder ( STRING ) ; for ( int int = NUMBER ; int < long[] . int ; int ++ ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( long[] [ int ] ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { throw new java.lang.RuntimeException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?> ( ) . boolean ( ) ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ; if ( ! boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?> ( ) . java.lang.String ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.util.List<java.lang.Object> . int ( ) ) . java.lang.StringBuilder ( STRING ) ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } int ++ ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Object , true ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ; if ( ! boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?> ( ) . java.lang.String ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.util.List<java.lang.Object> . int ( ) ) . java.lang.StringBuilder ( STRING ) ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } int ++ ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Object ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; } else { return java.lang.Object . java.lang.String ( ) ; } }  <METHOD_END>
