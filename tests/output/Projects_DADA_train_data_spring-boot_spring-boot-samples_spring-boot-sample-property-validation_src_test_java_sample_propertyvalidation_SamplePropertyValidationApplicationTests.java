<METHOD_START> @ After public void void ( ) { this . sample.propertyvalidation.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . sample.propertyvalidation.AnnotationConfigApplicationContext . register ( SamplePropertyValidationApplication .class ) ; EnvironmentTestUtils . addEnvironment ( this . sample.propertyvalidation.AnnotationConfigApplicationContext , STRING , STRING ) ; this . sample.propertyvalidation.AnnotationConfigApplicationContext . refresh ( ) ; SampleProperties sample.propertyvalidation.SampleProperties = this . sample.propertyvalidation.AnnotationConfigApplicationContext . getBean ( SampleProperties .class ) ; assertThat ( sample.propertyvalidation.SampleProperties . getHost ( ) ) . isEqualTo ( STRING ) ; assertThat ( sample.propertyvalidation.SampleProperties . getPort ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . sample.propertyvalidation.AnnotationConfigApplicationContext . register ( SamplePropertyValidationApplication .class ) ; EnvironmentTestUtils . addEnvironment ( this . sample.propertyvalidation.AnnotationConfigApplicationContext , STRING , STRING ) ; this . sample.propertyvalidation.ExpectedException . expect ( BeanCreationException .class ) ; this . sample.propertyvalidation.ExpectedException . expectMessage ( STRING ) ; this . sample.propertyvalidation.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . sample.propertyvalidation.AnnotationConfigApplicationContext . register ( SamplePropertyValidationApplication .class ) ; this . sample.propertyvalidation.ExpectedException . expect ( BeanCreationException .class ) ; this . sample.propertyvalidation.ExpectedException . expectMessage ( STRING ) ; this . sample.propertyvalidation.ExpectedException . expectMessage ( STRING ) ; this . sample.propertyvalidation.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . sample.propertyvalidation.AnnotationConfigApplicationContext . register ( SamplePropertyValidationApplication .class ) ; this . sample.propertyvalidation.AnnotationConfigApplicationContext . register ( ServerProperties .class ) ; EnvironmentTestUtils . addEnvironment ( this . sample.propertyvalidation.AnnotationConfigApplicationContext , STRING , STRING ) ; this . sample.propertyvalidation.AnnotationConfigApplicationContext . refresh ( ) ; SampleProperties sample.propertyvalidation.SampleProperties = this . sample.propertyvalidation.AnnotationConfigApplicationContext . getBean ( SampleProperties .class ) ; assertThat ( sample.propertyvalidation.SampleProperties . getHost ( ) ) . isEqualTo ( STRING ) ; assertThat ( sample.propertyvalidation.SampleProperties . getPort ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
