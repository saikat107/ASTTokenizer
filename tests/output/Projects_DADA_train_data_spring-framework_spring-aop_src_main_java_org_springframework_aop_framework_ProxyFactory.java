<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { setTarget ( java.lang.Object ) ; setInterfaces ( ClassUtils . getAllInterfaces ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { setInterfaces ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , Interceptor org.springframework.aop.framework.Interceptor ) { addInterface ( java.lang.Class<> ) ; addAdvice ( org.springframework.aop.framework.Interceptor ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , TargetSource org.springframework.aop.framework.TargetSource ) { addInterface ( java.lang.Class<> ) ; setTargetSource ( org.springframework.aop.framework.TargetSource ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return createAopProxy ( ) . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.ClassLoader java.lang.ClassLoader ) { return createAopProxy ( ) . getProxy ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , Interceptor org.springframework.aop.framework.Interceptor ) { return ( T ) new org.springframework.aop.framework.ProxyFactory ( java.lang.Class<T> , org.springframework.aop.framework.Interceptor ) . java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , TargetSource org.springframework.aop.framework.TargetSource ) { return ( T ) new org.springframework.aop.framework.ProxyFactory ( java.lang.Class<T> , org.springframework.aop.framework.TargetSource ) . java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( TargetSource org.springframework.aop.framework.TargetSource ) { if ( org.springframework.aop.framework.TargetSource . getTargetClass ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } org.springframework.aop.framework.ProxyFactory org.springframework.aop.framework.ProxyFactory = new org.springframework.aop.framework.ProxyFactory ( ) ; org.springframework.aop.framework.ProxyFactory . setTargetSource ( org.springframework.aop.framework.TargetSource ) ; org.springframework.aop.framework.ProxyFactory . setProxyTargetClass ( true ) ; return org.springframework.aop.framework.ProxyFactory . java.lang.Object ( ) ; }  <METHOD_END>
