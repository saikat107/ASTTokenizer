<METHOD_START> public void ( ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , ReactiveCassandraOperations org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations , SpelExpressionParser org.springframework.data.cassandra.repository.query.SpelExpressionParser , EvaluationContextProvider org.springframework.data.cassandra.repository.query.EvaluationContextProvider ) { this( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod . getAnnotatedQuery ( ) , org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations , org.springframework.data.cassandra.repository.query.SpelExpressionParser , org.springframework.data.cassandra.repository.query.EvaluationContextProvider ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , ReactiveCassandraQueryMethod org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , ReactiveCassandraOperations org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations , SpelExpressionParser org.springframework.data.cassandra.repository.query.SpelExpressionParser , EvaluationContextProvider org.springframework.data.cassandra.repository.query.EvaluationContextProvider ) { super( org.springframework.data.cassandra.repository.query.ReactiveCassandraQueryMethod , org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations ); Assert . hasText ( java.lang.String , STRING ) ; Cluster org.springframework.data.cassandra.repository.query.Cluster = org.springframework.data.cassandra.repository.query.ReactiveCassandraOperations . getReactiveCqlOperations ( ) . execute ( ( ReactiveSessionCallback < Cluster > ) session -> Flux . just ( session . getCluster ( ) ) ) . blockFirst ( ) ; CodecRegistry org.springframework.data.cassandra.repository.query.CodecRegistry = org.springframework.data.cassandra.repository.query.Cluster . getConfiguration ( ) . getCodecRegistry ( ) ; this . org.springframework.data.cassandra.repository.query.StringBasedQuery = new StringBasedQuery ( java.lang.String , new ExpressionEvaluatingParameterBinder ( org.springframework.data.cassandra.repository.query.SpelExpressionParser , org.springframework.data.cassandra.repository.query.EvaluationContextProvider ) , org.springframework.data.cassandra.repository.query.CodecRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( CassandraParameterAccessor org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) { try { java.lang.String java.lang.String = org.springframework.data.cassandra.repository.query.StringBasedQuery . bindQuery ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor , getQueryMethod ( ) ) ; if ( org.springframework.data.cassandra.repository.query.Logger . isDebugEnabled ( ) ) { org.springframework.data.cassandra.repository.query.Logger . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } return java.lang.String ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw QueryCreationException . create ( getQueryMethod ( ) , java.lang.RuntimeException ) ; } }  <METHOD_END>
