<METHOD_START> private static org.springframework.data.repository.util.ConversionService org.springframework.data.repository.util.ConversionService ( ConfigurableConversionService org.springframework.data.repository.util.ConfigurableConversionService ) { Assert . notNull ( org.springframework.data.repository.util.ConfigurableConversionService , STRING ) ; if ( ReactiveWrappers . isAvailable ( ReactiveLibrary . PROJECT_REACTOR ) ) { if ( ReactiveWrappers . isAvailable ( ReactiveLibrary . RXJAVA1 ) ) { org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava1CompletableConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava1CompletableConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1CompletableToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1CompletableToPublisherConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1CompletableToMonoConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1CompletableToMonoConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava1SingleConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava1SingleConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1SingleToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1SingleToPublisherConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1SingleToMonoConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1SingleToMonoConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1SingleToFluxConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1SingleToFluxConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava1ObservableConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava1ObservableConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1ObservableToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1ObservableToPublisherConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1ObservableToMonoConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1ObservableToMonoConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1ObservableToFluxConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1ObservableToFluxConverter ) ; } if ( ReactiveWrappers . isAvailable ( ReactiveLibrary . RXJAVA2 ) ) { org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2CompletableConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2CompletableConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2CompletableToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2CompletableToPublisherConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2CompletableToMonoConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2CompletableToMonoConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2SingleConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2SingleConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2SingleToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2SingleToPublisherConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2SingleToMonoConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2SingleToMonoConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2SingleToFluxConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2SingleToFluxConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2ObservableConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2ObservableConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToPublisherConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToMonoConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToMonoConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToFluxConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToFluxConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2FlowableConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2FlowableConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2FlowableToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2FlowableToPublisherConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2MaybeConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToRxJava2MaybeConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2MaybeToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2MaybeToPublisherConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2MaybeToMonoConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2MaybeToMonoConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2MaybeToFluxConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2MaybeToFluxConverter ) ; } org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToMonoConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToMonoConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToFluxConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.PublisherToFluxConverter ) ; if ( ReactiveWrappers . isAvailable ( ReactiveLibrary . RXJAVA1 ) ) { org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1SingleToObservableConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1SingleToObservableConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1ObservableToSingleConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1ObservableToSingleConverter ) ; } if ( ReactiveWrappers . isAvailable ( ReactiveLibrary . RXJAVA2 ) ) { org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2SingleToObservableConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2SingleToObservableConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToSingleConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToSingleConverter ) ; org.springframework.data.repository.util.ConfigurableConversionService . addConverter ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToMaybeConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2ObservableToMaybeConverter ) ; } } return org.springframework.data.repository.util.ConfigurableConversionService ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.repository.util.ReactiveWrapperConverters.RegistryHolder . org.springframework.data.repository.util.ReactiveAdapterRegistry != null && org.springframework.data.repository.util.ReactiveWrapperConverters.RegistryHolder . org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( java.lang.Class<> ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return ( T ) java.lang.Object ; } return org.springframework.data.repository.util.GenericConversionService . convert ( java.lang.Object , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.util.function.Function<java.lang.Object,java.lang.Object> , STRING ) ; return java.util.List<org.springframework.data.repository.util.ReactiveWrapperConverters.ReactiveTypeWrapper<?>> . java.util.stream.Stream<org.springframework.data.repository.util.ReactiveWrapperConverters.ReactiveTypeWrapper<?>> ( ) . java.util.stream.Stream<org.springframework.data.repository.util.ReactiveWrapperConverters.ReactiveTypeWrapper<?>> ( org.springframework.data.repository.util.ReactiveWrapperConverters.ReactiveTypeWrapper<?> -> ClassUtils . isAssignable ( org.springframework.data.repository.util.ReactiveWrapperConverters.ReactiveTypeWrapper<> . java.lang.Class<? super > ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) . java.util.Optional<org.springframework.data.repository.util.ReactiveWrapperConverters.ReactiveTypeWrapper<?>> ( ) . java.util.Optional<T> ( org.springframework.data.repository.util.ReactiveWrapperConverters.ReactiveTypeWrapper<?> -> ( T ) org.springframework.data.repository.util.ReactiveWrapperConverters.ReactiveTypeWrapper<> . java.lang.Object ( java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> ) ) . T ( ( ) new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; return org.springframework.data.repository.util.GenericConversionService . canConvert ( java.lang.Class<> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> java.lang.Class<? super T> < ? super T > java.lang.Class<? super T> ( )  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? super org.springframework.data.repository.util.Mono<?>> < ? super Mono < ? > > java.lang.Class<? super org.springframework.data.repository.util.Mono<?>> ( ) { return Mono .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Mono<?> < ? > org.springframework.data.repository.util.Mono<?> ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { return ( ( Mono < ? > ) java.lang.Object ) . map ( java.util.function.Function<java.lang.Object,java.lang.Object> :: java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? super org.springframework.data.repository.util.Flux<?>> < ? super Flux < ? > > java.lang.Class<? super org.springframework.data.repository.util.Flux<?>> ( ) { return Flux .class ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.util.Flux<?> < ? > org.springframework.data.repository.util.Flux<?> ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { return ( ( Flux < ? > ) java.lang.Object ) . map ( java.util.function.Function<java.lang.Object,java.lang.Object> :: java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? super org.springframework.data.repository.util.Publisher<?>> < ? super Publisher < ? > > java.lang.Class<? super org.springframework.data.repository.util.Publisher<?>> ( ) { return Publisher .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Publisher<?> < ? > org.springframework.data.repository.util.Publisher<?> ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { if ( java.lang.Object instanceof Mono ) { return org.springframework.data.repository.util.ReactiveWrapperConverters.MonoWrapper . org.springframework.data.repository.util.ReactiveWrapperConverters.MonoWrapper . org.springframework.data.repository.util.Mono<?> ( java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> ) ; } if ( java.lang.Object instanceof Flux ) { return org.springframework.data.repository.util.ReactiveWrapperConverters.FluxWrapper . org.springframework.data.repository.util.ReactiveWrapperConverters.FluxWrapper . org.springframework.data.repository.util.Flux<?> ( java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> ) ; } return org.springframework.data.repository.util.ReactiveWrapperConverters.FluxWrapper . org.springframework.data.repository.util.ReactiveWrapperConverters.FluxWrapper . org.springframework.data.repository.util.Flux<?> ( Flux . from ( ( Publisher < ? > ) java.lang.Object ) , java.util.function.Function<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? super org.springframework.data.repository.util.Single<?>> < ? super Single < ? > > java.lang.Class<? super org.springframework.data.repository.util.Single<?>> ( ) { return Single .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Single<?> < ? > org.springframework.data.repository.util.Single<?> ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { return ( ( Single < ? > ) java.lang.Object ) . map ( java.util.function.Function<java.lang.Object,java.lang.Object> :: java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? super org.springframework.data.repository.util.Observable<?>> < ? super Observable < ? > > java.lang.Class<? super org.springframework.data.repository.util.Observable<?>> ( ) { return Observable .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Observable<?> < ? > org.springframework.data.repository.util.Observable<?> ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { return ( ( Observable < ? > ) java.lang.Object ) . map ( java.util.function.Function<java.lang.Object,java.lang.Object> :: java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class < ? super io . io . io < ? > > getWrapperClass ( ) { return io . io . io .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > map ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { return ( ( io . io . io < ? > ) java.lang.Object ) . map ( java.util.function.Function<java.lang.Object,java.lang.Object> :: java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class < ? super io . io . io < ? > > getWrapperClass ( ) { return io . io . io .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > map ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { return ( ( io . io . io < ? > ) java.lang.Object ) . map ( java.util.function.Function<java.lang.Object,java.lang.Object> :: java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class < ? super io . io . io < ? > > getWrapperClass ( ) { return io . io . io .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > map ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { return ( ( io . io . io < ? > ) java.lang.Object ) . map ( java.util.function.Function<java.lang.Object,java.lang.Object> :: java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? super org.springframework.data.repository.util.Flowable<?>> < ? super Flowable < ? > > java.lang.Class<? super org.springframework.data.repository.util.Flowable<?>> ( ) { return io . io . io .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > map ( java.lang.Object java.lang.Object , java.util.function.Function<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.function.Function<java.lang.Object,java.lang.Object> ) { return ( ( io . io . io < ? > ) java.lang.Object ) . map ( java.util.function.Function<java.lang.Object,java.lang.Object> :: java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Flux<?> < ? > org.springframework.data.repository.util.Flux<?> ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return Flux . from ( org.springframework.data.repository.util.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Mono<?> < ? > org.springframework.data.repository.util.Mono<?> ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return Mono . from ( org.springframework.data.repository.util.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Single<?> < ? > org.springframework.data.repository.util.Single<?> ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return ( Single < ? > ) org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( Single .class ) . fromPublisher ( Mono . from ( org.springframework.data.repository.util.Publisher<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Completable org.springframework.data.repository.util.Completable ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return ( Completable ) org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( Completable .class ) . fromPublisher ( org.springframework.data.repository.util.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Observable<?> < ? > org.springframework.data.repository.util.Observable<?> ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return ( Observable < ? > ) org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( Observable .class ) . fromPublisher ( Flux . from ( org.springframework.data.repository.util.Publisher<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Publisher<?> < ? > org.springframework.data.repository.util.Publisher<?> ( Single < ? > org.springframework.data.repository.util.Single<?> ) { return Flux . defer ( ( ) REACTIVE_ADAPTER_REGISTRY . getAdapter ( Single .class ) . toPublisher ( source ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Mono<?> < ? > org.springframework.data.repository.util.Mono<?> ( Single < ? > org.springframework.data.repository.util.Single<?> ) { return Mono . defer ( ( ) Mono . from ( REACTIVE_ADAPTER_REGISTRY . getAdapter ( Single .class ) . toPublisher ( source ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Flux<?> < ? > org.springframework.data.repository.util.Flux<?> ( Single < ? > org.springframework.data.repository.util.Single<?> ) { return Flux . defer ( ( ) REACTIVE_ADAPTER_REGISTRY . getAdapter ( Single .class ) . toPublisher ( source ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Publisher<?> < ? > org.springframework.data.repository.util.Publisher<?> ( Completable org.springframework.data.repository.util.Completable ) { return Flux . defer ( ( ) REACTIVE_ADAPTER_REGISTRY . getAdapter ( Completable .class ) . toPublisher ( source ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Mono<?> < ? > org.springframework.data.repository.util.Mono<?> ( Completable org.springframework.data.repository.util.Completable ) { return Mono . from ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1CompletableToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava1CompletableToPublisherConverter . org.springframework.data.repository.util.Publisher<?> ( org.springframework.data.repository.util.Completable ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Publisher<?> < ? > org.springframework.data.repository.util.Publisher<?> ( Observable < ? > org.springframework.data.repository.util.Observable<?> ) { return Flux . defer ( ( ) REACTIVE_ADAPTER_REGISTRY . getAdapter ( Observable .class ) . toPublisher ( source ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Mono<?> < ? > org.springframework.data.repository.util.Mono<?> ( Observable < ? > org.springframework.data.repository.util.Observable<?> ) { return Mono . defer ( ( ) Mono . from ( REACTIVE_ADAPTER_REGISTRY . getAdapter ( Observable .class ) . toPublisher ( source ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Flux<?> < ? > org.springframework.data.repository.util.Flux<?> ( Observable < ? > org.springframework.data.repository.util.Observable<?> ) { return Flux . defer ( ( ) REACTIVE_ADAPTER_REGISTRY . getAdapter ( Observable .class ) . toPublisher ( source ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Single<?> < ? > org.springframework.data.repository.util.Single<?> ( Observable < ? > org.springframework.data.repository.util.Observable<?> ) { return org.springframework.data.repository.util.Observable<> . toSingle ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Observable<?> < ? > org.springframework.data.repository.util.Observable<?> ( Single < ? > org.springframework.data.repository.util.Single<?> ) { return org.springframework.data.repository.util.Single<> . toObservable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > convert ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return ( io . io . io < ? > ) org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( io . io . io .class ) . fromPublisher ( org.springframework.data.repository.util.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io.reactivex.Completable io.reactivex.Completable ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return ( io . io . io ) org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( io . io . io .class ) . fromPublisher ( org.springframework.data.repository.util.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > convert ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return ( io . io . io < ? > ) org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( io . io . io .class ) . fromPublisher ( org.springframework.data.repository.util.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Publisher < ? > convert ( io . io . io < ? > source ) { return org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( io . io . io .class ) . toPublisher ( source ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Mono < ? > convert ( io . io . io < ? > source ) { return Mono . from ( org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( io . io . io .class ) . toPublisher ( source ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Flux < ? > convert ( io . io . io < ? > source ) { return Flux . from ( org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( io . io . io .class ) . toPublisher ( source ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Publisher<?> < ? > org.springframework.data.repository.util.Publisher<?> ( io . io . io io.reactivex.Completable ) { return org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( io . io . io .class ) . toPublisher ( io.reactivex.Completable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.util.Mono<?> < ? > org.springframework.data.repository.util.Mono<?> ( io . io . io io.reactivex.Completable ) { return Mono . from ( org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2CompletableToPublisherConverter . org.springframework.data.repository.util.ReactiveWrapperConverters.RxJava2CompletableToPublisherConverter . org.springframework.data.repository.util.Publisher<?> ( io.reactivex.Completable ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Publisher < ? > convert ( io . io . io < ? > source ) { return source . toFlowable ( BackpressureStrategy . BUFFER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Mono < ? > convert ( io . io . io < ? > source ) { return Mono . from ( source . toFlowable ( BackpressureStrategy . BUFFER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Flux < ? > convert ( io . io . io < ? > source ) { return Flux . from ( source . toFlowable ( BackpressureStrategy . BUFFER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > convert ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return Flowable . fromPublisher ( org.springframework.data.repository.util.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Publisher < ? > convert ( io . io . io < ? > source ) { return source ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > convert ( Publisher < ? > org.springframework.data.repository.util.Publisher<?> ) { return ( io . io . io < ? > ) org.springframework.data.repository.util.ReactiveAdapterRegistry . getAdapter ( Maybe .class ) . fromPublisher ( org.springframework.data.repository.util.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Publisher < ? > convert ( io . io . io < ? > source ) { return source . toFlowable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Mono < ? > convert ( io . io . io < ? > source ) { return Mono . from ( source . toFlowable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Flux < ? > convert ( io . io . io < ? > source ) { return Flux . from ( source . toFlowable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > convert ( io . io . io < ? > source ) { return source . singleOrError ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > convert ( io . io . io < ? > source ) { return source . singleElement ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public io . io . io < ? > convert ( io . io . io < ? > source ) { return source . toObservable ( ) ; }  <METHOD_END>
