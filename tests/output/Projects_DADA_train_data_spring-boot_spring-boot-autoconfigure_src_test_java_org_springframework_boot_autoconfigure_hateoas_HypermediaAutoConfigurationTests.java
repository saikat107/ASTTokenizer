<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfigurationTests.BaseConfig .class ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . refresh ( ) ; LinkDiscoverers org.springframework.boot.autoconfigure.hateoas.LinkDiscoverers = this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . getBean ( LinkDiscoverers .class ) ; assertThat ( org.springframework.boot.autoconfigure.hateoas.LinkDiscoverers ) . isNotNull ( ) ; LinkDiscoverer org.springframework.boot.autoconfigure.hateoas.LinkDiscoverer = org.springframework.boot.autoconfigure.hateoas.LinkDiscoverers . getLinkDiscovererFor ( MediaTypes . HAL_JSON ) ; assertThat ( HalLinkDiscoverer .class . boolean ( org.springframework.boot.autoconfigure.hateoas.LinkDiscoverer ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfigurationTests.BaseConfig .class ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . refresh ( ) ; EntityLinks org.springframework.boot.autoconfigure.hateoas.EntityLinks = this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . getBean ( EntityLinks .class ) ; assertThat ( org.springframework.boot.autoconfigure.hateoas.EntityLinks ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfigurationTests.EnableHypermediaSupportConfig .class , org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfigurationTests.BaseConfig .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . refresh ( ) ; ObjectMapper org.springframework.boot.autoconfigure.hateoas.ObjectMapper = this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . getBean ( STRING , ObjectMapper .class ) ; assertThat ( org.springframework.boot.autoconfigure.hateoas.ObjectMapper . getSerializationConfig ( ) . isEnabled ( SerializationFeature . INDENT_OUTPUT ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfigurationTests.BaseConfig .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . refresh ( ) ; ObjectMapper org.springframework.boot.autoconfigure.hateoas.ObjectMapper = this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . getBean ( STRING , ObjectMapper .class ) ; assertThat ( org.springframework.boot.autoconfigure.hateoas.ObjectMapper . getSerializationConfig ( ) . isEnabled ( SerializationFeature . INDENT_OUTPUT ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfigurationTests.BaseConfig .class ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . refresh ( ) ; RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter = this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<?> : org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter . getMessageConverters ( ) ) { if ( org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<> instanceof TypeConstrainedMappingJackson2HttpMessageConverter ) { assertThat ( org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<> . getSupportedMediaTypes ( ) ) . contains ( MediaType . APPLICATION_JSON , MediaTypes . HAL_JSON ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfigurationTests.BaseConfig .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . refresh ( ) ; RequestMappingHandlerAdapter org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter = this . org.springframework.boot.autoconfigure.hateoas.AnnotationConfigWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<?> : org.springframework.boot.autoconfigure.hateoas.RequestMappingHandlerAdapter . getMessageConverters ( ) ) { if ( org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<> instanceof TypeConstrainedMappingJackson2HttpMessageConverter ) { assertThat ( org.springframework.boot.autoconfigure.hateoas.HttpMessageConverter<> . getSupportedMediaTypes ( ) ) . containsExactly ( MediaTypes . HAL_JSON ) ; } } }  <METHOD_END>
