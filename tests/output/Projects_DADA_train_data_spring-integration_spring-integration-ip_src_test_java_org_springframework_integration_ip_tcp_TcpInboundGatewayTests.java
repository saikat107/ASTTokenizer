<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( true ) ; TcpInboundGateway org.springframework.integration.ip.tcp.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; final QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; ServiceActivatingHandler org.springframework.integration.ip.tcp.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.ip.tcp.TcpInboundGatewayTests.Service ( ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . setChannelResolver ( channelName -> channel ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( false ) ; TcpInboundGateway org.springframework.integration.ip.tcp.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; final QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; ServiceActivatingHandler org.springframework.integration.ip.tcp.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.ip.tcp.TcpInboundGatewayTests.Service ( ) ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) { try { java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER , NUMBER ) ; java.util.concurrent.atomic.AtomicInteger . void ( java.net.ServerSocket . int ( ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.net.Socket . void ( ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( ! java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { java.lang.Exception . void ( ) ; } } } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . setSingleUse ( false ) ; TcpInboundGateway org.springframework.integration.ip.tcp.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ) ; final QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setClientMode ( true ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setRetryInterval ( NUMBER ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . afterPropertiesSet ( ) ; ServiceActivatingHandler org.springframework.integration.ip.tcp.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.ip.tcp.TcpInboundGatewayTests.Service ( ) ) ; ThreadPoolTaskScheduler org.springframework.integration.ip.tcp.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.ip.tcp.ThreadPoolTaskScheduler . setPoolSize ( NUMBER ) ; org.springframework.integration.ip.tcp.ThreadPoolTaskScheduler . initialize ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setTaskScheduler ( org.springframework.integration.ip.tcp.ThreadPoolTaskScheduler ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . start ( ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.Message<> ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( true ) ; TcpInboundGateway org.springframework.integration.ip.tcp.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; final QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; ServiceActivatingHandler org.springframework.integration.ip.tcp.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.ip.tcp.TcpInboundGatewayTests.Service ( ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . setChannelResolver ( channelName -> channel ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( false ) ; TcpInboundGateway org.springframework.integration.ip.tcp.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; final QueueChannel org.springframework.integration.ip.tcp.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.QueueChannel ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; ServiceActivatingHandler org.springframework.integration.ip.tcp.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.ip.tcp.TcpInboundGatewayTests.Service ( ) ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.ip.tcp.ServiceActivatingHandler . handleMessage ( org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; byte [] byte[] = new byte [ NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; java.util.Set<java.lang.String> . boolean ( new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; java.util.Set<java.lang.String> . boolean ( new java.lang.String ( byte[] ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . setSingleUse ( true ) ; TcpInboundGateway org.springframework.integration.ip.tcp.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory ) ; SubscribableChannel org.springframework.integration.ip.tcp.SubscribableChannel = new DirectChannel ( ) ; final java.lang.String java.lang.String = STRING ; org.springframework.integration.ip.tcp.SubscribableChannel . subscribe ( message -> { MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( new GenericMessage < String > ( errorMessage ) ) ; } ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setErrorChannel ( org.springframework.integration.ip.tcp.SubscribableChannel ) ; org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.AbstractServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.AbstractServerConnectionFactory . getPort ( ) ; final SubscribableChannel org.springframework.integration.ip.tcp.SubscribableChannel = new DirectChannel ( ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.SubscribableChannel ) ; org.springframework.integration.ip.tcp.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; ServiceActivatingHandler org.springframework.integration.ip.tcp.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.ip.tcp.TcpInboundGatewayTests.FailingService ( ) ) ; org.springframework.integration.ip.tcp.SubscribableChannel . subscribe ( org.springframework.integration.ip.tcp.ServiceActivatingHandler ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( java.lang.String + STRING , new java.lang.String ( byte[] ) ) ; void ( java.net.Socket . java.io.InputStream ( ) , byte[] ) ; assertEquals ( java.lang.String + STRING , new java.lang.String ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.InputStream java.io.InputStream , byte [] byte[] ) throws java.io.IOException { for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { byte[] [ int ] = ( byte ) java.io.InputStream . int ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( byte [] byte[] ) { return STRING + new java.lang.String ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( byte [] byte[] ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
