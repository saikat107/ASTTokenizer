<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.mongodb.core.convert.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( new DefaultDbRefResolver ( org.springframework.data.mongodb.core.convert.MongoDbFactory ) , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; this . org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; this . org.springframework.data.mongodb.core.convert.QueryMapper = new QueryMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , STRING ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Sample .class ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new ObjectId ( ) . toString ( ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.IdWrapper .class ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( ObjectId .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new java.math.BigInteger ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.IdWrapper .class ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectId org.springframework.data.mongodb.core.convert.ObjectId = new ObjectId ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new java.math.BigInteger ( org.springframework.data.mongodb.core.convert.ObjectId . toString ( ) , NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.IdWrapper .class ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) org.springframework.data.mongodb.core.convert.ObjectId ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.mongodb.core.convert.Criteria = where ( STRING ) . ne ( new ObjectId ( ) . toString ( ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Criteria . getCriteriaObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Sample .class ) ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) java.lang.Object ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( ObjectId .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum . org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . ne ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum . org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; java.lang.Object java.lang.Object = ( ( org . org.bson . org.bson ) java.lang.Object ) . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.lang.String .class ) ) ) ; assertThat ( java.lang.Object . java.lang.String ( ) , is ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum . org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum . org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; java.lang.Object java.lang.Object = ( ( org . org.bson . org.bson ) java.lang.Object ) . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( java.util.List .class ) ) ) ; java.util.List java.util.List = ( java.util.List ) java.lang.Object ; assertThat ( java.util.List . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List . java.lang.Object ( NUMBER ) , is ( instanceOf ( java.lang.String .class ) ) ) ; assertThat ( java.util.List . java.lang.Object ( NUMBER ) . java.lang.String ( ) , is ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum . org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Enum . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DBObject org.springframework.data.mongodb.core.convert.DBObject = new QueryBuilder ( ) . or ( new BasicDBObject ( STRING , STRING ) ) . get ( ) ; org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( new org . org.bson . org.bson ( org.springframework.data.mongodb.core.convert.DBObject . toMap ( ) ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , new org . org.bson . org.bson ( STRING , java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ) ; org.bson.Document . put ( STRING , new Person ( ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = new BasicQuery ( STRING ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.bson.Document . toJson ( ) , is ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new ObjectId ( ) . toString ( ) ) ; org.bson.Document . put ( STRING , new org . org.bson . org.bson ( STRING , new ObjectId ( ) . toString ( ) ) ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithDefaultId .class ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( ObjectId .class ) ) ) ; assertThat ( ( ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ) . get ( STRING ) , is ( instanceOf ( ObjectId .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectId org.springframework.data.mongodb.core.convert.ObjectId = new ObjectId ( ) ; Query org.springframework.data.mongodb.core.convert.Query = Query . query ( Criteria . where ( STRING ) . is ( STRING ) . and ( STRING ) . ne ( org.springframework.data.mongodb.core.convert.ObjectId . toString ( ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.UserEntity .class ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( org . org.bson . org.bson .class ) ) ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( new Criteria ( ) . orOperator ( where ( STRING ) . is ( STRING ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Sample .class ) ) ; assertThat ( org.bson.Document . keySet ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.bson.Document . keySet ( ) , hasItem ( STRING ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( org.bson.Document , STRING ) ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( java.util.List<java.lang.Object> , NUMBER ) ; assertThat ( org.bson.Document . keySet ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.CustomizedField ( ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.CustomizedField .class ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . keySet ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.CustomizedField ( ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.CustomizedField .class ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . keySet ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.CustomizedField ( ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.CustomizedField .class ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . keySet ( ) . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference . java.lang.Long = NUMBER ; Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( com . com.mongodb . com.mongodb .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference . java.lang.Long = NUMBER ; Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRefWrapper .class ) ) ; java.lang.Object java.lang.Object = org.bson.Document . get ( STRING ) ; assertThat ( java.lang.Object , is ( instanceOf ( com . com.mongodb . com.mongodb .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference . java.lang.Long = NUMBER ; Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . in ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference , org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ) ; org . org.bson . org.bson org.bson.Document = DocumentTestUtils . getAsDocument ( org.bson.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( org.bson.Document , STRING ) ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( instanceOf ( com . com.mongodb . com.mongodb .class ) ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( instanceOf ( com . com.mongodb . com.mongodb .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( null ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = new ObjectId ( ) . toString ( ) ; Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( java.lang.String ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) java.lang.String ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , new com . com.mongodb . com.mongodb ( STRING , STRING ) ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; org.bson.Document . put ( STRING , org.bson.Document ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithMapDBRef .class ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , instanceOf ( org . org.bson . org.bson .class ) ) ; assertThat ( ( ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ) . containsKey ( STRING ) , is ( true ) ) ; assertThat ( ( ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ) . get ( STRING ) , instanceOf ( com . com.mongodb . com.mongodb .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) . append ( STRING , new ObjectId ( ) . toString ( ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( instanceOf ( ObjectId .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . exists ( false ) ) ; BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<> ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference . java.lang.Long = NUMBER ; Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) . andOperator ( where ( STRING ) . in ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ) ) ) ; BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<> ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( org.bson.Document , STRING ) ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( getAsDocument ( getAsDocument ( java.util.List<java.lang.Object> , NUMBER ) , STRING ) , STRING ) ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( instanceOf ( com . com.mongodb . com.mongodb .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.bson.Document . keySet ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.bson.Document . keySet ( ) , hasSize ( NUMBER ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.convert.Query . fields ( ) . exclude ( STRING ) ; BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<> ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<> ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Sample .class ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<> . getIdProperty ( ) . get ( ) . getName ( ) ; org . org.bson . org.bson org.bson.Document = query ( where ( java.lang.String ) . in ( STRING ) ) . getQueryObject ( ) ; java.lang.Object java.lang.Object = getAsDocument ( org.bson.Document , java.lang.String ) . get ( STRING ) ; org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<> ) ; java.lang.Object java.lang.Object = getAsDocument ( org.bson.Document , java.lang.String ) . get ( STRING ) ; assertThat ( java.lang.Object , is ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = query ( where ( STRING ) . is ( new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ) . getQueryObject ( ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRefList .class ) ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document , is ( ( org . org.bson . org.bson ) new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.bson . org.bson org.bson.Document = query ( where ( STRING ) . is ( new org . org.bson . org.bson ( STRING , new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ) . getQueryObject ( ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; assertThat ( org.bson.Document , is ( ( org . org.bson . org.bson ) new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference . java.lang.Long = NUMBER ; org . org.bson . org.bson org.bson.Document = query ( where ( STRING ) . is ( new org . org.bson . org.bson ( STRING , java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference> ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Reference ) ) ) ) . getQueryObject ( ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ) ; org . org.bson . org.bson org.bson.Document = getAsDocument ( org.bson.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = getAsDBList ( org.bson.Document , STRING ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( instanceOf ( com . com.mongodb . com.mongodb .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicMongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ; Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.convert.Query . fields ( ) . include ( STRING ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.convert.BasicMongoPersistentEntity<> ) ; assertThat ( org.bson.Document , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass . java.lang.String = STRING ; Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . in ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass> ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass , org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo .class ) ) ; assertThat ( org.bson.Document , equalTo ( org . org.bson . Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo . java.util.List<org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass> = java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass> ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass ) ; Query org.springframework.data.mongodb.core.convert.Query = new Query ( Criteria . where ( STRING ) . elemMatch ( new Criteria ( ) . andOperator ( Criteria . where ( STRING ) . is ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass . java.lang.String ) ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , new BasicDbListBuilder ( ) . add ( new BasicDBObject ( STRING , org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass . java.lang.String ) ) . get ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) ) . with ( new Sort ( Direction . DESC , STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getSortObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.CustomizedField .class ) ) ; assertThat ( org.bson.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , - NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = new Query ( ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedFields ( org.springframework.data.mongodb.core.convert.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithTextScoreProperty .class ) ) ; assertThat ( org.bson.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , new org . org.bson . org.bson ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = new Query ( ) ; org.springframework.data.mongodb.core.convert.Query . fields ( ) . include ( STRING ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedFields ( org.springframework.data.mongodb.core.convert.Query . getFieldsObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithTextScoreProperty .class ) ) ; assertThat ( org.bson.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , new org . org.bson . org.bson ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = new Query ( ) . with ( new Sort ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedSort ( org.springframework.data.mongodb.core.convert.Query . getSortObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithTextScoreProperty .class ) ) ; assertThat ( org.bson.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , new org . org.bson . org.bson ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = new Query ( ) . with ( new Sort ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedSort ( org.springframework.data.mongodb.core.convert.Query . getSortObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithTextScoreProperty .class ) ) ; assertThat ( org.bson.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectId org.springframework.data.mongodb.core.convert.ObjectId = new ObjectId ( ) ; org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( STRING , new com . com.mongodb . com.mongodb ( STRING , org.springframework.data.mongodb.core.convert.ObjectId . toString ( ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.bson.Document , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; com . com.mongodb . com.mongodb com.mongodb.DBRef = getTypedValue ( org.bson.Document , STRING , com . com.mongodb . com.mongodb .class ) ; assertThat ( com.mongodb.DBRef . getId ( ) , is ( instanceOf ( ObjectId .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.RootForClassWithExplicitlyRenamedIdField .class ) ) ; assertThat ( org.bson.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = new Query ( ) . with ( new Sort ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedSort ( org.springframework.data.mongodb.core.convert.Query . getSortObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.RootForClassWithExplicitlyRenamedIdField .class ) ) ; assertThat ( org.bson.Document , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . near ( new GeoJsonPoint ( NUMBER , NUMBER ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . near ( new GeoJsonPoint ( NUMBER , NUMBER ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . nearSphere ( new GeoJsonPoint ( NUMBER , NUMBER ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . nearSphere ( new GeoJsonPoint ( NUMBER , NUMBER ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . within ( new GeoJsonPolygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . intersects ( new GeoJsonPolygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EntityWithComplexValueTypeMap .class ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.convert.Query = query ( where ( STRING ) . is ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EntityWithComplexValueTypeList .class ) ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo . org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo . org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.EmbeddedClass . java.lang.String = STRING ; Query org.springframework.data.mongodb.core.convert.Query = query ( byExample ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.Foo .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes = new org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes ( ) ; org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes . org.springframework.data.mongodb.core.convert.Point = new Point ( NUMBER , NUMBER ) ; Query org.springframework.data.mongodb.core.convert.Query = query ( byExample ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.ClassWithGeoTypes ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.convert.Query . getQueryObject ( ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getPersistentEntity ( org.springframework.data.mongodb.core.convert.QueryMapperUnitTests.WithDBRef .class ) ) ; assertThat ( org.bson.Document . get ( STRING ) , Is .< java.lang.Object > is ( NUMBER ) ) ; assertThat ( org.bson.Document . get ( STRING ) , Is .< java.lang.Object > is ( NUMBER ) ) ; }  <METHOD_END>
