<METHOD_START> public void ( int int ) { this( int , null ); }  <METHOD_END>
<METHOD_START> public void ( int int , java.lang.String java.lang.String ) { Assert . isTrue ( ( int >= NUMBER && int < NUMBER ) , STRING ) ; this . int = int ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.CloseStatus org.springframework.web.reactive.socket.CloseStatus ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return new org.springframework.web.reactive.socket.CloseStatus ( this . int , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.web.reactive.socket.CloseStatus org.springframework.web.reactive.socket.CloseStatus ) { return ( this . int == org.springframework.web.reactive.socket.CloseStatus . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.web.reactive.socket.CloseStatus ) ) { return false ; } org.springframework.web.reactive.socket.CloseStatus org.springframework.web.reactive.socket.CloseStatus = ( org.springframework.web.reactive.socket.CloseStatus ) java.lang.Object ; return ( this . int == org.springframework.web.reactive.socket.CloseStatus . int && ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.web.reactive.socket.CloseStatus . java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int * NUMBER + ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . int + STRING + this . java.lang.String + STRING ; }  <METHOD_END>
