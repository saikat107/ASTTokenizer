<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; Expression org.springframework.integration.aggregator.Expression = org.springframework.integration.aggregator.ExpressionParser . parseExpression ( java.lang.String ) ; this . org.springframework.integration.aggregator.ExpressionEvaluatingMessageProcessor<java.lang.Object> = new ExpressionEvaluatingMessageProcessor < java.lang.Object > ( org.springframework.integration.aggregator.Expression , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> public void ( Expression org.springframework.integration.aggregator.Expression ) { this . org.springframework.integration.aggregator.ExpressionEvaluatingMessageProcessor<java.lang.Object> = new ExpressionEvaluatingMessageProcessor < java.lang.Object > ( org.springframework.integration.aggregator.Expression , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.aggregator.Message<?> ) { return this . org.springframework.integration.aggregator.ExpressionEvaluatingMessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( BeanFactory org.springframework.integration.aggregator.BeanFactory ) throws org.springframework.integration.aggregator.BeansException { if ( org.springframework.integration.aggregator.BeanFactory != null ) { this . org.springframework.integration.aggregator.ExpressionEvaluatingMessageProcessor<java.lang.Object> . setBeanFactory ( org.springframework.integration.aggregator.BeanFactory ) ; } }  <METHOD_END>
