<METHOD_START> public void ( EntityManager org.springframework.data.jpa.repository.support.EntityManager , PathBuilder < ? > org.springframework.data.jpa.repository.support.PathBuilder<?> ) { Assert . notNull ( org.springframework.data.jpa.repository.support.EntityManager , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.support.PathBuilder<> , STRING ) ; this . org.springframework.data.jpa.repository.support.EntityManager = org.springframework.data.jpa.repository.support.EntityManager ; this . org.springframework.data.jpa.repository.support.PersistenceProvider = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.support.EntityManager ) ; this . org.springframework.data.jpa.repository.support.PathBuilder<?> = org.springframework.data.jpa.repository.support.PathBuilder<> ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.jpa.repository.support.AbstractJPAQuery<T,org.springframework.data.jpa.repository.support.JPAQuery<T>> < T , JPAQuery < T > > org.springframework.data.jpa.repository.support.AbstractJPAQuery<T,org.springframework.data.jpa.repository.support.JPAQuery<T>> ( ) { switch ( org.springframework.data.jpa.repository.support.PersistenceProvider ) { case ECLIPSELINK : return new JPAQuery < T > ( org.springframework.data.jpa.repository.support.EntityManager , EclipseLinkTemplates . DEFAULT ) ; case HIBERNATE : return new JPAQuery < T > ( org.springframework.data.jpa.repository.support.EntityManager , HQLTemplates . DEFAULT ) ; case OPEN_JPA : return new JPAQuery < T > ( org.springframework.data.jpa.repository.support.EntityManager , OpenJPATemplates . DEFAULT ) ; case GENERIC_JPA : default: return new JPAQuery < T > ( org.springframework.data.jpa.repository.support.EntityManager ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.support.AbstractJPAQuery<java.lang.Object,org.springframework.data.jpa.repository.support.JPAQuery<java.lang.Object>> < java.lang.Object , JPAQuery < java.lang.Object > > org.springframework.data.jpa.repository.support.AbstractJPAQuery<java.lang.Object,org.springframework.data.jpa.repository.support.JPAQuery<java.lang.Object>> ( org.springframework.data.jpa.repository.support.EntityPath<?> < ? > ... org.springframework.data.jpa.repository.support.EntityPath<?>[] ) { return org.springframework.data.jpa.repository.support.AbstractJPAQuery<java.lang.Object,org.springframework.data.jpa.repository.support.JPAQuery<java.lang.Object>> ( ) . from ( org.springframework.data.jpa.repository.support.EntityPath<?>[] ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> ( Pageable org.springframework.data.jpa.repository.support.Pageable , JPQLQuery < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> ) { if ( org.springframework.data.jpa.repository.support.Pageable . isUnpaged ( ) ) { return org.springframework.data.jpa.repository.support.JPQLQuery<T> ; } org.springframework.data.jpa.repository.support.JPQLQuery<T> . offset ( org.springframework.data.jpa.repository.support.Pageable . getOffset ( ) ) ; org.springframework.data.jpa.repository.support.JPQLQuery<T> . limit ( org.springframework.data.jpa.repository.support.Pageable . getPageSize ( ) ) ; return org.springframework.data.jpa.repository.support.JPQLQuery ( org.springframework.data.jpa.repository.support.Pageable . getSort ( ) , org.springframework.data.jpa.repository.support.JPQLQuery<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> ( Sort org.springframework.data.jpa.repository.support.Sort , JPQLQuery < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> ) { if ( org.springframework.data.jpa.repository.support.Sort == null ) { return org.springframework.data.jpa.repository.support.JPQLQuery<T> ; } if ( org.springframework.data.jpa.repository.support.Sort instanceof QSort ) { return org.springframework.data.jpa.repository.support.JPQLQuery ( ( QSort ) org.springframework.data.jpa.repository.support.Sort , org.springframework.data.jpa.repository.support.JPQLQuery<T> ) ; } return org.springframework.data.jpa.repository.support.JPQLQuery ( org.springframework.data.jpa.repository.support.Sort , org.springframework.data.jpa.repository.support.JPQLQuery<T> ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> ( QSort org.springframework.data.jpa.repository.support.QSort , JPQLQuery < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> ) { java.util.List<org.springframework.data.jpa.repository.support.OrderSpecifier<?>> < OrderSpecifier < ? > > java.util.List<org.springframework.data.jpa.repository.support.OrderSpecifier<?>> = org.springframework.data.jpa.repository.support.QSort . getOrderSpecifiers ( ) ; return org.springframework.data.jpa.repository.support.JPQLQuery<T> . orderBy ( java.util.List<org.springframework.data.jpa.repository.support.OrderSpecifier<?>> . toArray ( new OrderSpecifier [ java.util.List<org.springframework.data.jpa.repository.support.OrderSpecifier<?>> . size ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> ( Sort org.springframework.data.jpa.repository.support.Sort , JPQLQuery < T > org.springframework.data.jpa.repository.support.JPQLQuery<T> ) { Assert . notNull ( org.springframework.data.jpa.repository.support.Sort , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.support.JPQLQuery<T> , STRING ) ; for ( Order org.springframework.data.jpa.repository.support.Order : org.springframework.data.jpa.repository.support.Sort ) { org.springframework.data.jpa.repository.support.JPQLQuery<T> . orderBy ( org.springframework.data.jpa.repository.support.OrderSpecifier<?> ( org.springframework.data.jpa.repository.support.Order ) ) ; } return org.springframework.data.jpa.repository.support.JPQLQuery<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private org.springframework.data.jpa.repository.support.OrderSpecifier<?> < ? > org.springframework.data.jpa.repository.support.OrderSpecifier<?> ( Order org.springframework.data.jpa.repository.support.Order ) { return new OrderSpecifier ( org.springframework.data.jpa.repository.support.Order . isAscending ( ) ? com . querydsl . core . types . Order . ASC : com . querydsl . core . types . Order . DESC , org.springframework.data.jpa.repository.support.Expression<?> ( org.springframework.data.jpa.repository.support.Order ) , org.springframework.data.jpa.repository.support.NullHandling ( org.springframework.data.jpa.repository.support.Order . getNullHandling ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.support.NullHandling org.springframework.data.jpa.repository.support.NullHandling ( org . springframework . data . org.springframework.data.domain . org.springframework.data.domain . org.springframework.data.domain org.springframework.data.domain.Sort.NullHandling ) { Assert . notNull ( org.springframework.data.domain.Sort.NullHandling , STRING ) ; switch ( org.springframework.data.domain.Sort.NullHandling ) { case NULLS_FIRST : return NullHandling . NullsFirst ; case NULLS_LAST : return NullHandling . NullsLast ; case NATIVE : default: return NullHandling . Default ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.support.Expression<?> < ? > org.springframework.data.jpa.repository.support.Expression<?> ( Order org.springframework.data.jpa.repository.support.Order ) { Assert . notNull ( org.springframework.data.jpa.repository.support.Order , STRING ) ; PropertyPath org.springframework.data.jpa.repository.support.PropertyPath = PropertyPath . from ( org.springframework.data.jpa.repository.support.Order . getProperty ( ) , org.springframework.data.jpa.repository.support.PathBuilder<> . getType ( ) ) ; Expression < ? > org.springframework.data.jpa.repository.support.Expression<?> = org.springframework.data.jpa.repository.support.PathBuilder<> ; while ( org.springframework.data.jpa.repository.support.PropertyPath != null ) { if ( ! org.springframework.data.jpa.repository.support.PropertyPath . hasNext ( ) && org.springframework.data.jpa.repository.support.Order . isIgnoreCase ( ) ) { org.springframework.data.jpa.repository.support.Expression<?> = Expressions . stringPath ( ( Path < ? > ) org.springframework.data.jpa.repository.support.Expression<> , org.springframework.data.jpa.repository.support.PropertyPath . getSegment ( ) ) . lower ( ) ; } else { org.springframework.data.jpa.repository.support.Expression<?> = Expressions . path ( org.springframework.data.jpa.repository.support.PropertyPath . getType ( ) , ( Path < ? > ) org.springframework.data.jpa.repository.support.Expression<> , org.springframework.data.jpa.repository.support.PropertyPath . getSegment ( ) ) ; } org.springframework.data.jpa.repository.support.PropertyPath = org.springframework.data.jpa.repository.support.PropertyPath . next ( ) ; } return org.springframework.data.jpa.repository.support.Expression<> ; }  <METHOD_END>
