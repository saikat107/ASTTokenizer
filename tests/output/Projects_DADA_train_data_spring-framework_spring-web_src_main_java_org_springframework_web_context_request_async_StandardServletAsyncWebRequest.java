<METHOD_START> public void ( HttpServletRequest org.springframework.web.context.request.async.HttpServletRequest , HttpServletResponse org.springframework.web.context.request.async.HttpServletResponse ) { super( org.springframework.web.context.request.async.HttpServletRequest , org.springframework.web.context.request.async.HttpServletResponse ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Long java.lang.Long ) { Assert . state ( ! boolean ( ) , STRING ) ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { this . java.util.List<java.lang.Runnable> . boolean ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { this . java.util.List<java.lang.Runnable> . boolean ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.web.context.request.async.AsyncContext != null && getRequest ( ) . isAsyncStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . state ( getRequest ( ) . isAsyncSupported ( ) , STRING + STRING + STRING + STRING ) ; Assert . state ( ! boolean ( ) , STRING ) ; if ( boolean ( ) ) { return; } this . org.springframework.web.context.request.async.AsyncContext = getRequest ( ) . startAsync ( getRequest ( ) , getResponse ( ) ) ; this . org.springframework.web.context.request.async.AsyncContext . addListener ( this ) ; if ( this . java.lang.Long != null ) { this . org.springframework.web.context.request.async.AsyncContext . setTimeout ( this . java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( this . org.springframework.web.context.request.async.AsyncContext , STRING ) ; this . org.springframework.web.context.request.async.AsyncContext . dispatch ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.web.context.request.async.AsyncEvent ) throws java.io.IOException {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.web.context.request.async.AsyncEvent ) throws java.io.IOException { void ( org.springframework.web.context.request.async.AsyncEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.web.context.request.async.AsyncEvent ) throws java.io.IOException { for ( java.lang.Runnable java.lang.Runnable : this . java.util.List<java.lang.Runnable> ) { java.lang.Runnable . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.web.context.request.async.AsyncEvent ) throws java.io.IOException { for ( java.lang.Runnable java.lang.Runnable : this . java.util.List<java.lang.Runnable> ) { java.lang.Runnable . void ( ) ; } this . org.springframework.web.context.request.async.AsyncContext = null ; this . java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
