<METHOD_START> @ AfterClass public static void void ( ) { for ( java.lang.String java.lang.String : new java.io.File ( STRING ) . java.lang.String[] ( new java.io.FilenameFilter ( ) { @ java.lang.Override public boolean boolean ( java.io.File java.io.File , java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; } } ) ) { new java.io.File ( java.lang.String ) . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File , java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; ClientRegionFactoryBean org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , ClientRegionFactoryBean .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; assertEquals ( DataPolicy . EMPTY , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; ClientRegionFactoryBean org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , ClientRegionFactoryBean .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; CacheListener [] org.springframework.data.gemfire.config.xml.CacheListener[] = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; assertFalse ( ObjectUtils . isEmpty ( org.springframework.data.gemfire.config.xml.CacheListener[] ) ) ; assertEquals ( NUMBER , cacheListeners . length ) ; assertSame ( org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] , org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] instanceof SimpleCacheListener ) ; assertNotSame ( org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] , org.springframework.data.gemfire.config.xml.CacheListener[] [ NUMBER ] ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.RegionAttributes . getLoadFactor ( ) , NUMBER ) ; assertEquals ( ExpirationAction . INVALIDATE , org.springframework.data.gemfire.config.xml.RegionAttributes . getEntryTimeToLive ( ) . getAction ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.RegionAttributes . getEntryTimeToLive ( ) . getTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.RegionAttributes . getEvictionAttributes ( ) . getMaximum ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region org.springframework.data.gemfire.config.xml.Region = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region . getFullPath ( ) ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , org.springframework.data.gemfire.config.xml.RegionAttributes . getDataPolicy ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.RegionAttributes . getDiskStoreName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.RegionAttributes . getPoolName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; ClientRegionFactoryBean org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , ClientRegionFactoryBean .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ) ; RegionAttributes org.springframework.data.gemfire.config.xml.RegionAttributes = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.RegionAttributes ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.RegionAttributes . getDataPolicy ( ) ) ; EvictionAttributes org.springframework.data.gemfire.config.xml.EvictionAttributes = org.springframework.data.gemfire.config.xml.RegionAttributes . getEvictionAttributes ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.EvictionAttributes ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , org.springframework.data.gemfire.config.xml.EvictionAttributes . getAlgorithm ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.EvictionAttributes . getMaximum ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.EvictionAttributes . getObjectSizer ( ) instanceof SimpleObjectSizer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; ClientRegionFactoryBean org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , ClientRegionFactoryBean .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; assertEquals ( STRING , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ) ; assertEquals ( ClientRegionShortcut . LOCAL , TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ) ; assertTrue ( TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) instanceof org.springframework.data.gemfire.config.xml.ClientRegionNamespaceTest.TestCacheLoader ) ; assertTrue ( TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) instanceof org.springframework.data.gemfire.config.xml.ClientRegionNamespaceTest.TestCacheWriter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < ? , ? > org.springframework.data.gemfire.config.xml.Region<?,?> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region<,> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<,> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) ) ; assertEquals ( DataPolicy . EMPTY , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getPoolName ( ) ) ; assertTrue ( java.lang.String . java.lang.String ( STRING , ObjectUtils . nullSafeClassName ( org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCompressor ( ) ) ) , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCompressor ( ) instanceof org.springframework.data.gemfire.config.xml.ClientRegionNamespaceTest.TestCompressor ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<,> . getAttributes ( ) . getCompressor ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; Region < java.lang.Long , java.lang.String > org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , Region .class ) ; assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getName ( ) ) ; assertEquals ( Region . SEPARATOR + STRING , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getCloningEnabled ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getConcurrencyLevel ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getDataPolicy ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getDataPolicy ( ) . withPersistence ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( java.lang.Long .class , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( STRING , java.lang.String . java.lang.String ( org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getPoolName ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.config.xml.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getValueConstraint ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.gemfire.config.xml.ApplicationContext . containsBean ( STRING ) ) ; ClientRegionFactoryBean org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean = org.springframework.data.gemfire.config.xml.ApplicationContext . getBean ( STRING , ClientRegionFactoryBean .class ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; org.springframework.data.gemfire.config.xml.Interest<?> < ? > [] org.springframework.data.gemfire.config.xml.Interest<?>[] = TestUtils . readField ( STRING , org.springframework.data.gemfire.config.xml.ClientRegionFactoryBean ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Interest<?>[] ) ; assertEquals ( NUMBER , interests . length ) ; void ( true , false , InterestResultPolicy . KEYS , org.springframework.data.gemfire.config.xml.Interest ( STRING , org.springframework.data.gemfire.config.xml.Interest<?>[] ) ) ; void ( true , false , InterestResultPolicy . KEYS_VALUES , org.springframework.data.gemfire.config.xml.Interest ( STRING , org.springframework.data.gemfire.config.xml.Interest<?>[] ) ) ; Region org.springframework.data.gemfire.config.xml.Region = org.springframework.data.gemfire.config.xml.ClientRegionNamespaceTest.MockCacheFactoryBean . java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.xml.Region> . get ( ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region ) ; verify ( org.springframework.data.gemfire.config.xml.Region , times ( NUMBER ) ) . registerInterest ( eq ( STRING ) , eq ( InterestResultPolicy . KEYS ) , eq ( true ) , eq ( false ) ) ; verify ( org.springframework.data.gemfire.config.xml.Region , times ( NUMBER ) ) . registerInterestRegex ( eq ( STRING ) , eq ( InterestResultPolicy . KEYS_VALUES ) , eq ( true ) , eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final boolean boolean , final boolean boolean , final InterestResultPolicy org.springframework.data.gemfire.config.xml.InterestResultPolicy , final Interest org.springframework.data.gemfire.config.xml.Interest ) { assertNotNull ( org.springframework.data.gemfire.config.xml.Interest ) ; assertEquals ( boolean , org.springframework.data.gemfire.config.xml.Interest . isDurable ( ) ) ; assertEquals ( boolean , org.springframework.data.gemfire.config.xml.Interest . isReceiveValues ( ) ) ; assertEquals ( org.springframework.data.gemfire.config.xml.InterestResultPolicy , org.springframework.data.gemfire.config.xml.Interest . getPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.xml.Interest org.springframework.data.gemfire.config.xml.Interest ( final java.lang.String java.lang.String , final Interest ... org.springframework.data.gemfire.config.xml.Interest[] ) { for ( Interest org.springframework.data.gemfire.config.xml.Interest : org.springframework.data.gemfire.config.xml.Interest[] ) { if ( org.springframework.data.gemfire.config.xml.Interest . getKey ( ) . equals ( java.lang.String ) ) { return org.springframework.data.gemfire.config.xml.Interest ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.data.gemfire.config.xml.ClientCache = mock ( ClientCache .class , org.springframework.data.gemfire.config.xml.ClientRegionNamespaceTest .class . java.lang.String ( ) . java.lang.String ( STRING ) ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.xml.Region> . compareAndSet ( null , mock ( Region .class , org.springframework.data.gemfire.config.xml.ClientRegionNamespaceTest .class . java.lang.String ( ) . java.lang.String ( STRING ) ) ) ; when ( org.springframework.data.gemfire.config.xml.ClientCache . getRegion ( anyString ( ) ) ) . thenReturn ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.xml.Region> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.xml.ClientCache org.springframework.data.gemfire.config.xml.ClientCache ( ) java.lang.Exception { return org.springframework.data.gemfire.config.xml.ClientCache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ClientCache .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final LoaderHelper < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.xml.LoaderHelper<java.lang.Object,java.lang.Object> ) throws org.springframework.data.gemfire.config.xml.CacheLoaderException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( final byte [] byte[] ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( final byte [] byte[] ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
