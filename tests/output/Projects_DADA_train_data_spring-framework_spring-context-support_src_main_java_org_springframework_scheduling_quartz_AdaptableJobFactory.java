<METHOD_START> @ java.lang.Override public org.springframework.scheduling.quartz.Job org.springframework.scheduling.quartz.Job ( TriggerFiredBundle org.springframework.scheduling.quartz.TriggerFiredBundle , Scheduler org.springframework.scheduling.quartz.Scheduler ) throws org.springframework.scheduling.quartz.SchedulerException { try { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.scheduling.quartz.TriggerFiredBundle ) ; return org.springframework.scheduling.quartz.Job ( java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new SchedulerException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( TriggerFiredBundle org.springframework.scheduling.quartz.TriggerFiredBundle ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.scheduling.quartz.TriggerFiredBundle . getJobDetail ( ) . getJobClass ( ) ; return ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.scheduling.quartz.Job org.springframework.scheduling.quartz.Job ( java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( java.lang.Object instanceof Job ) { return ( Job ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.Runnable ) { return new DelegatingJob ( ( java.lang.Runnable ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING ) ; } }  <METHOD_END>
