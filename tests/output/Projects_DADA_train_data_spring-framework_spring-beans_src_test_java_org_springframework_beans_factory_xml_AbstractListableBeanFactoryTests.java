<METHOD_START> protected org.springframework.beans.factory.xml.ListableBeanFactory org.springframework.beans.factory.xml.ListableBeanFactory ( ) { BeanFactory org.springframework.beans.factory.xml.BeanFactory = getBeanFactory ( ) ; if ( ! ( org.springframework.beans.factory.xml.BeanFactory instanceof ListableBeanFactory ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } return ( ListableBeanFactory ) org.springframework.beans.factory.xml.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( int int ) { java.lang.String [] java.lang.String[] = org.springframework.beans.factory.xml.ListableBeanFactory ( ) . getBeanDefinitionNames ( ) ; assertTrue ( STRING + int + STRING + java.lang.String[] . int , java.lang.String[] . int == int ) ; }  <METHOD_END>
<METHOD_START> protected void void ( int int ) { java.lang.String [] java.lang.String[] = org.springframework.beans.factory.xml.ListableBeanFactory ( ) . getBeanNamesForType ( TestBean .class , true , false ) ; assertTrue ( STRING + int + STRING + java.lang.String[] . int , java.lang.String[] . int == int ) ; int int = int + NUMBER ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.xml.ListableBeanFactory ( ) . getBeanNamesForType ( TestBean .class , true , true ) ; assertTrue ( STRING + int + STRING + java.lang.String[] . int , java.lang.String[] . int == int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = org.springframework.beans.factory.xml.ListableBeanFactory ( ) . getBeanNamesForType ( java.lang.String .class ) ; assertTrue ( STRING , java.lang.String[] . int == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING + org.springframework.beans.factory.xml.ListableBeanFactory ( ) . getBeanNamesForType ( FactoryBean .class ) . length , org.springframework.beans.factory.xml.ListableBeanFactory ( ) . getBeanNamesForType ( FactoryBean .class ) . length == NUMBER ) ; assertTrue ( STRING + org.springframework.beans.factory.xml.ListableBeanFactory ( ) . getBeanNamesForType ( FactoryBean .class ) . length , org.springframework.beans.factory.xml.ListableBeanFactory ( ) . getBeanNamesForType ( FactoryBean .class ) . length == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.beans.factory.xml.ListableBeanFactory ( ) . containsBeanDefinition ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.ListableBeanFactory ( ) . containsBeanDefinition ( STRING ) ) ; }  <METHOD_END>
