<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.reflect.Method . java.lang.Class<?> ( ) == java.lang.Object .class ) { return null ; } java.lang.Object java.lang.Object = java.lang.Object ( java.lang.reflect.Method , java.lang.Class<> ) ; java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = this . java.util.Map<java.lang.Object,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . get ( java.lang.Object ) ; if ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> != null ) { return ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> != java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ? java.util.Collection<org.springframework.cache.interceptor.CacheOperation> : null ) ; } else { java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> != null ) { if ( org.springframework.cache.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.cache.interceptor.Log . debug ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING + java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ) ; } this . java.util.Map<java.lang.Object,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . put ( java.lang.Object , java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ) ; } else { this . java.util.Map<java.lang.Object,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . put ( java.lang.Object , java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ) ; } return java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return new MethodClassKey ( java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( boolean ( ) && ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { return null ; } java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method ) ; if ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> != null ) { return java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ; } java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; if ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> != null && ClassUtils . isUserLevelMethod ( java.lang.reflect.Method ) ) { return java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ; } if ( java.lang.reflect.Method != java.lang.reflect.Method ) { java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method ) ; if ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> != null ) { return java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ; } java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; if ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> != null && ClassUtils . isUserLevelMethod ( java.lang.reflect.Method ) ) { return java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ; } } return null ; }  <METHOD_END>
<METHOD_START> protected abstract java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method java.lang.reflect.Method );  <METHOD_END>
<METHOD_START> protected abstract java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
