<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( FTPClientConfig org.springframework.integration.ftp.session.FTPClientConfig ) { Assert . notNull ( org.springframework.integration.ftp.session.FTPClientConfig , STRING ) ; this . org.springframework.integration.ftp.session.FTPClientConfig = org.springframework.integration.ftp.session.FTPClientConfig ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int == FTPClient . ACTIVE_LOCAL_DATA_CONNECTION_MODE || int == FTPClient . PASSIVE_LOCAL_DATA_CONNECTION_MODE , STRING + int ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ftp.session.FtpSession org.springframework.integration.ftp.session.FtpSession ( ) { try { return new FtpSession ( this . T ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private T T ( ) java.io.IOException { final T T = this . T ( ) ; Assert . notNull ( T , STRING ) ; T . configure ( this . org.springframework.integration.ftp.session.FTPClientConfig ) ; Assert . hasText ( this . java.lang.String , STRING ) ; if ( this . java.lang.Integer != null ) { T . setConnectTimeout ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { T . setDefaultTimeout ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { T . setDataTimeout ( this . java.lang.Integer ) ; } T . setControlEncoding ( this . java.lang.String ) ; this . void ( T ) ; T . connect ( this . java.lang.String , this . int ) ; if ( ! FTPReply . isPositiveCompletion ( T . getReplyCode ( ) ) ) { throw new MessagingException ( STRING + this . java.lang.String + STRING + this . int + STRING ) ; } this . org.springframework.integration.ftp.session.Log . debug ( STRING + this . java.lang.String + STRING + this . int + STRING ) ; if ( ! T . login ( this . java.lang.String , this . java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + T . getReplyString ( ) ) ; } this . void ( T ) ; this . void ( T ) ; T . setFileType ( this . int ) ; T . setBufferSize ( this . int ) ; return T ; }  <METHOD_END>
<METHOD_START> private void void ( FTPClient org.springframework.integration.ftp.session.FTPClient ) { switch ( this . int ) { case FTPClient . ACTIVE_LOCAL_DATA_CONNECTION_MODE : org.springframework.integration.ftp.session.FTPClient . enterLocalActiveMode ( ) ; break; case FTPClient . PASSIVE_LOCAL_DATA_CONNECTION_MODE : org.springframework.integration.ftp.session.FTPClient . enterLocalPassiveMode ( ) ; break; default: break; } }  <METHOD_END>
<METHOD_START> protected abstract T T ( )  <METHOD_END>
<METHOD_START> protected void void ( T T ) throws java.io.IOException { }  <METHOD_END>
<METHOD_START> protected void void ( T T ) throws java.io.IOException { }  <METHOD_END>
