<METHOD_START> public void ( long long , java.nio.ByteBuffer java.nio.ByteBuffer ) { Assert . isTrue ( long > NUMBER , STRING ) ; Assert . notNull ( java.nio.ByteBuffer , STRING ) ; this . long = long ; this . java.nio.ByteBuffer = java.nio.ByteBuffer ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( HttpOutputMessage org.springframework.boot.devtools.tunnel.payload.HttpOutputMessage ) throws java.io.IOException { Assert . notNull ( org.springframework.boot.devtools.tunnel.payload.HttpOutputMessage , STRING ) ; HttpHeaders org.springframework.boot.devtools.tunnel.payload.HttpHeaders = org.springframework.boot.devtools.tunnel.payload.HttpOutputMessage . getHeaders ( ) ; org.springframework.boot.devtools.tunnel.payload.HttpHeaders . setContentLength ( this . java.nio.ByteBuffer . int ( ) ) ; org.springframework.boot.devtools.tunnel.payload.HttpHeaders . add ( java.lang.String , java.lang.Long . java.lang.String ( long ( ) ) ) ; org.springframework.boot.devtools.tunnel.payload.HttpHeaders . setContentType ( MediaType . APPLICATION_OCTET_STREAM ) ; java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel = java.nio.channels.Channels . java.nio.channels.ReadableByteChannel ( org.springframework.boot.devtools.tunnel.payload.HttpOutputMessage . getBody ( ) ) ; while ( this . java.nio.ByteBuffer . boolean ( ) ) { java.nio.channels.WritableByteChannel . int ( this . java.nio.ByteBuffer ) ; } java.nio.channels.WritableByteChannel . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.nio.channels.WritableByteChannel java.nio.channels.WritableByteChannel ) throws java.io.IOException { Assert . notNull ( java.nio.channels.WritableByteChannel , STRING ) ; while ( this . java.nio.ByteBuffer . boolean ( ) ) { java.nio.channels.WritableByteChannel . int ( this . java.nio.ByteBuffer ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( HttpInputMessage org.springframework.boot.devtools.tunnel.payload.HttpInputMessage ) throws java.io.IOException { long long = org.springframework.boot.devtools.tunnel.payload.HttpInputMessage . getHeaders ( ) . getContentLength ( ) ; if ( long <= NUMBER ) { return null ; } java.lang.String java.lang.String = org.springframework.boot.devtools.tunnel.payload.HttpInputMessage . getHeaders ( ) . getFirst ( java.lang.String ) ; Assert . state ( StringUtils . hasLength ( java.lang.String ) , STRING ) ; java.nio.channels.ReadableByteChannel java.nio.channels.ReadableByteChannel = java.nio.channels.Channels . java.nio.channels.ReadableByteChannel ( org.springframework.boot.devtools.tunnel.payload.HttpInputMessage . getBody ( ) ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( ( int ) long ) ; while ( java.nio.ByteBuffer . boolean ( ) ) { java.nio.channels.ReadableByteChannel . int ( java.nio.ByteBuffer ) ; } java.nio.channels.ReadableByteChannel . void ( ) ; java.nio.ByteBuffer . java.nio.Buffer ( ) ; return new org.springframework.boot.devtools.tunnel.payload.HttpTunnelPayload ( java.lang.Long . java.lang.Long ( java.lang.String ) , java.nio.ByteBuffer ) ; }  <METHOD_END>
<METHOD_START> public static java.nio.ByteBuffer java.nio.ByteBuffer ( java.nio.channels.ReadableByteChannel java.nio.channels.ReadableByteChannel )			throws java.io.IOException { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ; try { int int = java.nio.channels.ReadableByteChannel . int ( java.nio.ByteBuffer ) ; Assert . state ( int != - NUMBER , STRING ) ; java.nio.ByteBuffer . java.nio.Buffer ( ) ; return java.nio.ByteBuffer ; } catch ( java.io.InterruptedIOException java.io.InterruptedIOException ) { return null ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { if ( org.springframework.boot.devtools.tunnel.payload.Log . isTraceEnabled ( ) ) { org.springframework.boot.devtools.tunnel.payload.Log . trace ( java.lang.String + java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { byte [] byte[] = this . java.nio.ByteBuffer . byte[] ( ) ; char [] char[] = new char [ this . java.nio.ByteBuffer . int ( ) * NUMBER ] ; for ( int int = this . java.nio.ByteBuffer . int ( ) ; int < this . java.nio.ByteBuffer . int ( ) ; int ++ ) { int int = byte[] [ int ] & NUMBER ; char[] [ int * NUMBER ] = char[] [ int >>> NUMBER ] ; char[] [ int * NUMBER + NUMBER ] = char[] [ int & NUMBER ] ; } return new java.lang.String ( char[] ) ; }  <METHOD_END>
