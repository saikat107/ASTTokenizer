<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , boolean boolean ) { this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ( java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ) { java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> < java.lang.reflect.Method > ( ) ; java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> < java.lang.reflect.Method > ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { if ( java.lang.reflect.Method . boolean ( ) ) { continue; } if ( this . boolean && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( void .class ) ) { continue; } if ( StringUtils . hasText ( this . java.lang.String ) && ! this . java.lang.String . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { continue; } if ( this . java.lang.Class<> != null && AnnotationUtils . findAnnotation ( java.lang.reflect.Method , this . java.lang.Class<> ) != null ) { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } else { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } return ( ! java.util.List<java.lang.reflect.Method> . boolean ( ) ) ? java.util.List<java.lang.reflect.Method> : java.util.List<java.lang.reflect.Method> ; }  <METHOD_END>
