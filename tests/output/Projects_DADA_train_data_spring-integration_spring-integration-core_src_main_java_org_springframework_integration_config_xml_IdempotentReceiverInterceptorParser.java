<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.xml.AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ParserContext . extractSource ( org.w3c.dom.Element ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! boolean & ! ( boolean | boolean ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + STRING , java.lang.Object ) ; } if ( boolean & ( boolean | boolean | boolean | boolean | boolean ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + STRING + STRING , java.lang.Object ) ; } if ( boolean & boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + STRING , java.lang.Object ) ; } if ( boolean & boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + STRING , java.lang.Object ) ; } if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , java.lang.Object ) ; } BeanMetadataElement org.springframework.integration.config.xml.BeanMetadataElement = null ; if ( boolean ) { org.springframework.integration.config.xml.BeanMetadataElement = new RuntimeBeanReference ( java.lang.String ) ; } else { BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MetadataStoreSelector .class ) ; BeanMetadataElement org.springframework.integration.config.xml.BeanMetadataElement = null ; if ( boolean ) { org.springframework.integration.config.xml.BeanMetadataElement = new RuntimeBeanReference ( java.lang.String ) ; } else { org.springframework.integration.config.xml.BeanMetadataElement = BeanDefinitionBuilder . genericBeanDefinition ( ExpressionEvaluatingMessageProcessor .class ) . addConstructorArgValue ( BeanDefinitionBuilder . genericBeanDefinition ( ExpressionFactoryBean .class ) . addConstructorArgValue ( java.lang.String ) . getBeanDefinition ( ) ) . getBeanDefinition ( ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.BeanMetadataElement ) ; BeanMetadataElement org.springframework.integration.config.xml.BeanMetadataElement = null ; if ( boolean ) { org.springframework.integration.config.xml.BeanMetadataElement = new RuntimeBeanReference ( java.lang.String ) ; } else if ( boolean ) { org.springframework.integration.config.xml.BeanMetadataElement = BeanDefinitionBuilder . genericBeanDefinition ( ExpressionEvaluatingMessageProcessor .class ) . addConstructorArgValue ( BeanDefinitionBuilder . genericBeanDefinition ( ExpressionFactoryBean .class ) . addConstructorArgValue ( java.lang.String ) . getBeanDefinition ( ) ) . getBeanDefinition ( ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.BeanMetadataElement ) ; if ( boolean ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } else { org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( new RootBeanDefinition ( SimpleMetadataStore .class ) ) ; } org.springframework.integration.config.xml.BeanMetadataElement = org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; } BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( IdempotentReceiverInterceptor .class ) . addConstructorArgValue ( org.springframework.integration.config.xml.BeanMetadataElement ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition = org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; org.springframework.integration.config.xml.AbstractBeanDefinition . setAttribute ( IdempotentReceiverAutoProxyCreatorInitializer . IDEMPOTENT_ENDPOINTS_MAPPING , java.lang.String ) ; return org.springframework.integration.config.xml.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
