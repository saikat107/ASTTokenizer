<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( WorkManager org.springframework.jca.work.WorkManager ) { void ( org.springframework.jca.work.WorkManager ) ; }  <METHOD_END>
<METHOD_START> public void void ( WorkManager org.springframework.jca.work.WorkManager ) { Assert . notNull ( org.springframework.jca.work.WorkManager , STRING ) ; this . org.springframework.jca.work.WorkManager = org.springframework.jca.work.WorkManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BootstrapContext org.springframework.jca.work.BootstrapContext ) { Assert . notNull ( org.springframework.jca.work.BootstrapContext , STRING ) ; this . org.springframework.jca.work.WorkManager = org.springframework.jca.work.BootstrapContext . getWorkManager ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( WorkListener org.springframework.jca.work.WorkListener ) { this . org.springframework.jca.work.WorkListener = org.springframework.jca.work.WorkListener ; }  <METHOD_END>
<METHOD_START> public void void ( TaskDecorator org.springframework.jca.work.TaskDecorator ) { this . org.springframework.jca.work.TaskDecorator = org.springframework.jca.work.TaskDecorator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.naming.NamingException { if ( this . org.springframework.jca.work.WorkManager == null ) { if ( this . java.lang.String != null ) { this . org.springframework.jca.work.WorkManager = lookup ( this . java.lang.String , WorkManager .class ) ; } else { this . org.springframework.jca.work.WorkManager = org.springframework.jca.work.WorkManager ( ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.jca.work.WorkManager org.springframework.jca.work.WorkManager ( ) { return new SimpleTaskWorkManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { void ( java.lang.Runnable , TIMEOUT_INDEFINITE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable , long long ) { Assert . state ( this . org.springframework.jca.work.WorkManager != null , STRING ) ; Work org.springframework.jca.work.Work = new DelegatingWork ( this . org.springframework.jca.work.TaskDecorator != null ? this . org.springframework.jca.work.TaskDecorator . decorate ( java.lang.Runnable ) : java.lang.Runnable ) ; try { if ( this . boolean ) { if ( long != TIMEOUT_INDEFINITE || this . org.springframework.jca.work.WorkListener != null ) { this . org.springframework.jca.work.WorkManager . doWork ( org.springframework.jca.work.Work , long , null , this . org.springframework.jca.work.WorkListener ) ; } else { this . org.springframework.jca.work.WorkManager . doWork ( org.springframework.jca.work.Work ) ; } } else if ( this . boolean ) { if ( long != TIMEOUT_INDEFINITE || this . org.springframework.jca.work.WorkListener != null ) { this . org.springframework.jca.work.WorkManager . startWork ( org.springframework.jca.work.Work , long , null , this . org.springframework.jca.work.WorkListener ) ; } else { this . org.springframework.jca.work.WorkManager . startWork ( org.springframework.jca.work.Work ) ; } } else { if ( long != TIMEOUT_INDEFINITE || this . org.springframework.jca.work.WorkListener != null ) { this . org.springframework.jca.work.WorkManager . scheduleWork ( org.springframework.jca.work.Work , long , null , this . org.springframework.jca.work.WorkListener ) ; } else { this . org.springframework.jca.work.WorkManager . scheduleWork ( org.springframework.jca.work.Work ) ; } } } catch ( WorkRejectedException org.springframework.jca.work.WorkRejectedException ) { if ( WorkException . START_TIMED_OUT . equals ( org.springframework.jca.work.WorkRejectedException . getErrorCode ( ) ) ) { throw new TaskTimeoutException ( STRING + java.lang.Runnable , org.springframework.jca.work.WorkRejectedException ) ; } else { throw new TaskRejectedException ( STRING + java.lang.Runnable , org.springframework.jca.work.WorkRejectedException ) ; } } catch ( WorkException org.springframework.jca.work.WorkException ) { throw new SchedulingException ( STRING , org.springframework.jca.work.WorkException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> ( java.lang.Runnable java.lang.Runnable ) { java.util.concurrent.FutureTask<java.lang.Object> < java.lang.Object > java.util.concurrent.FutureTask<java.lang.Object> = new java.util.concurrent.FutureTask<java.lang.Object> <> ( java.lang.Runnable , null ) ; void ( java.util.concurrent.FutureTask<java.lang.Object> , TIMEOUT_INDEFINITE ) ; return java.util.concurrent.FutureTask<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.concurrent.Future<T> < T > java.util.concurrent.Future<T> ( java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { java.util.concurrent.FutureTask<T> < T > java.util.concurrent.FutureTask<T> = new java.util.concurrent.FutureTask<T> <> ( java.util.concurrent.Callable<T> ) ; void ( java.util.concurrent.FutureTask<T> , TIMEOUT_INDEFINITE ) ; return java.util.concurrent.FutureTask<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jca.work.ListenableFuture<?> < ? > org.springframework.jca.work.ListenableFuture<?> ( java.lang.Runnable java.lang.Runnable ) { ListenableFutureTask < java.lang.Object > org.springframework.jca.work.ListenableFutureTask<java.lang.Object> = new ListenableFutureTask <> ( java.lang.Runnable , null ) ; void ( org.springframework.jca.work.ListenableFutureTask<java.lang.Object> , TIMEOUT_INDEFINITE ) ; return org.springframework.jca.work.ListenableFutureTask<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.jca.work.ListenableFuture<T> < T > org.springframework.jca.work.ListenableFuture<T> ( java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { ListenableFutureTask < T > org.springframework.jca.work.ListenableFutureTask<T> = new ListenableFutureTask <> ( java.util.concurrent.Callable<T> ) ; void ( org.springframework.jca.work.ListenableFutureTask<T> , TIMEOUT_INDEFINITE ) ; return org.springframework.jca.work.ListenableFutureTask<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Work org.springframework.jca.work.Work ) throws org.springframework.jca.work.WorkException { this . org.springframework.jca.work.WorkManager . doWork ( org.springframework.jca.work.Work ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Work org.springframework.jca.work.Work , long long , ExecutionContext org.springframework.jca.work.ExecutionContext , WorkListener org.springframework.jca.work.WorkListener )			throws org.springframework.jca.work.WorkException { this . org.springframework.jca.work.WorkManager . doWork ( org.springframework.jca.work.Work , long , org.springframework.jca.work.ExecutionContext , org.springframework.jca.work.WorkListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( Work org.springframework.jca.work.Work ) throws org.springframework.jca.work.WorkException { return this . org.springframework.jca.work.WorkManager . startWork ( org.springframework.jca.work.Work ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( Work org.springframework.jca.work.Work , long long , ExecutionContext org.springframework.jca.work.ExecutionContext , WorkListener org.springframework.jca.work.WorkListener )			throws org.springframework.jca.work.WorkException { return this . org.springframework.jca.work.WorkManager . startWork ( org.springframework.jca.work.Work , long , org.springframework.jca.work.ExecutionContext , org.springframework.jca.work.WorkListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Work org.springframework.jca.work.Work ) throws org.springframework.jca.work.WorkException { this . org.springframework.jca.work.WorkManager . scheduleWork ( org.springframework.jca.work.Work ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Work org.springframework.jca.work.Work , long long , ExecutionContext org.springframework.jca.work.ExecutionContext , WorkListener org.springframework.jca.work.WorkListener )			throws org.springframework.jca.work.WorkException { this . org.springframework.jca.work.WorkManager . scheduleWork ( org.springframework.jca.work.Work , long , org.springframework.jca.work.ExecutionContext , org.springframework.jca.work.WorkListener ) ; }  <METHOD_END>
