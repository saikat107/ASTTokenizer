<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { Person .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader == null ? org . springframework . util . ClassUtils . getDefaultClassLoader ( ) : java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.cassandra.repository.support.BeanFactory ) throws org.springframework.data.cassandra.repository.support.BeansException { this . org.springframework.data.cassandra.repository.support.BeanFactory = org.springframework.data.cassandra.repository.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory = new CassandraRepositoryFactory ( org.springframework.data.cassandra.repository.support.CassandraOperations ) ; org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory . setRepositoryBaseClass ( SimpleCassandraRepository .class ) ; org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory . setBeanClassLoader ( java.lang.ClassLoader ) ; org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory . setBeanFactory ( org.springframework.data.cassandra.repository.support.BeanFactory ) ; org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory . setEvaluationContextProvider ( DefaultEvaluationContextProvider . INSTANCE ) ; org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory = org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory . getRepository ( org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory .class ) ; org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . deleteAll ( ) ; org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . save ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Boolean java.lang.Boolean = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . exists ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.lang.Boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { boolean boolean = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . exists ( STRING ) ; assertThat ( boolean ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { boolean boolean = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . exists ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . contains ( org.springframework.data.cassandra.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( STRING ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.List<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.support.Person> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.List<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person . getId ( ) , org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.support.Person> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . count ( ) ; assertThat ( long ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . deleteAll ( ) ; Person org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . insert ( org.springframework.data.cassandra.repository.support.Person ) ; assertThat ( org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . count ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . deleteAll ( ) ; org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . insert ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . count ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.Person . setFirstname ( STRING ) ; org.springframework.data.cassandra.repository.support.Person . setLastname ( STRING ) ; Person org.springframework.data.cassandra.repository.support.Person = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . save ( org.springframework.data.cassandra.repository.support.Person ) ; assertThat ( org.springframework.data.cassandra.repository.support.Person ) . isEqualTo ( org.springframework.data.cassandra.repository.support.Person ) ; java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . isPresent ( ) ; java.util.Optional<org.springframework.data.cassandra.repository.support.Person> . ifPresent ( actual -> { assertThat ( actual . getFirstname ( ) ) . isEqualTo ( dave . getFirstname ( ) ) ; assertThat ( actual . getLastname ( ) ) . isEqualTo ( dave . getLastname ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; Person org.springframework.data.cassandra.repository.support.Person = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . save ( org.springframework.data.cassandra.repository.support.Person ) ; assertThat ( org.springframework.data.cassandra.repository.support.Person ) . isEqualTo ( org.springframework.data.cassandra.repository.support.Person ) ; java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . contains ( org.springframework.data.cassandra.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . deleteAll ( ) ; java.util.List<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.List<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . save ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.support.Person> ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . count ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.repository.support.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.support.Person . setFirstname ( STRING ) ; org.springframework.data.cassandra.repository.support.Person . setLastname ( STRING ) ; java.util.List<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.List<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . save ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.support.Person> ) . hasSize ( NUMBER ) ; java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . contains ( org.springframework.data.cassandra.repository.support.Person ) ; java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . contains ( org.springframework.data.cassandra.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . deleteAll ( ) ; java.util.List<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.List<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findAll ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.repository.support.Person> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . delete ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . delete ( org.springframework.data.cassandra.repository.support.Person ) ; java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . delete ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.support.Person , org.springframework.data.cassandra.repository.support.Person ) ) ; java.util.Optional<org.springframework.data.cassandra.repository.support.Person> < Person > java.util.Optional<org.springframework.data.cassandra.repository.support.Person> = org.springframework.data.cassandra.repository.support.SimpleCassandraRepositoryIntegrationTests.PersonRepostitory . findOne ( org.springframework.data.cassandra.repository.support.Person . getId ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.repository.support.Person> ) . isEmpty ( ) ; }  <METHOD_END>
