<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; StopWatch org.springframework.util.StopWatch = new StopWatch ( java.lang.String ) ; long long = NUMBER ; long long = NUMBER ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertFalse ( org.springframework.util.StopWatch . isRunning ( ) ) ; org.springframework.util.StopWatch . start ( java.lang.String ) ; java.lang.Thread . void ( long ) ; assertTrue ( org.springframework.util.StopWatch . isRunning ( ) ) ; assertEquals ( java.lang.String , org.springframework.util.StopWatch . currentTaskName ( ) ) ; org.springframework.util.StopWatch . stop ( ) ; org.springframework.util.StopWatch . start ( java.lang.String ) ; java.lang.Thread . void ( long ) ; org.springframework.util.StopWatch . stop ( ) ; assertTrue ( org.springframework.util.StopWatch . getTaskCount ( ) == NUMBER ) ; java.lang.String java.lang.String = org.springframework.util.StopWatch . prettyPrint ( ) ; assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; StopWatch . StopWatch [] StopWatch.TaskInfo[] = org.springframework.util.StopWatch . getTaskInfo ( ) ; assertTrue ( tasks . length == NUMBER ) ; assertTrue ( StopWatch.TaskInfo[] [ NUMBER ] . getTaskName ( ) . equals ( java.lang.String ) ) ; assertTrue ( StopWatch.TaskInfo[] [ NUMBER ] . getTaskName ( ) . equals ( java.lang.String ) ) ; java.lang.String java.lang.String = org.springframework.util.StopWatch . toString ( ) ; assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; assertEquals ( java.lang.String , org.springframework.util.StopWatch . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.util.StopWatch . setKeepTaskList ( false ) ; long long = NUMBER ; long long = NUMBER ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertFalse ( org.springframework.util.StopWatch . isRunning ( ) ) ; org.springframework.util.StopWatch . start ( java.lang.String ) ; java.lang.Thread . void ( long ) ; assertTrue ( org.springframework.util.StopWatch . isRunning ( ) ) ; org.springframework.util.StopWatch . stop ( ) ; org.springframework.util.StopWatch . start ( java.lang.String ) ; java.lang.Thread . void ( long ) ; org.springframework.util.StopWatch . stop ( ) ; assertTrue ( org.springframework.util.StopWatch . getTaskCount ( ) == NUMBER ) ; java.lang.String java.lang.String = org.springframework.util.StopWatch . prettyPrint ( ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.util.StopWatch . toString ( ) ; assertFalse ( java.lang.String . boolean ( java.lang.String ) ) ; assertFalse ( java.lang.String . boolean ( java.lang.String ) ) ; org.springframework.util.ExpectedException . expect ( java.lang.UnsupportedOperationException .class ) ; org.springframework.util.StopWatch . getTaskInfo ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.util.StopWatch . getLastTaskTimeMillis ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.util.StopWatch . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.StopWatch . start ( STRING ) ; org.springframework.util.StopWatch . stop ( ) ; org.springframework.util.StopWatch . start ( STRING ) ; assertTrue ( org.springframework.util.StopWatch . isRunning ( ) ) ; org.springframework.util.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.util.StopWatch . start ( STRING ) ; }  <METHOD_END>
