<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.halbrowser.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockHttpServletRequest org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest . setContextPath ( STRING ) ; View org.springframework.data.rest.webmvc.halbrowser.View = new HalBrowser ( ) . browser ( org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.halbrowser.View ) . isInstanceOf ( RedirectView .class ) ; ( ( AbstractView ) org.springframework.data.rest.webmvc.halbrowser.View ) . render ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) , org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest , org.springframework.data.rest.webmvc.halbrowser.MockHttpServletResponse ) ; UriComponents org.springframework.data.rest.webmvc.halbrowser.UriComponents = UriComponentsBuilder . fromUriString ( org.springframework.data.rest.webmvc.halbrowser.MockHttpServletResponse . getHeader ( HttpHeaders . LOCATION ) ) . build ( ) ; assertThat ( org.springframework.data.rest.webmvc.halbrowser.UriComponents . getPath ( ) , startsWith ( STRING ) ) ; assertThat ( org.springframework.data.rest.webmvc.halbrowser.UriComponents . getFragment ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest . addHeader ( STRING , STRING ) ; View org.springframework.data.rest.webmvc.halbrowser.View = new HalBrowser ( ) . browser ( org.springframework.data.rest.webmvc.halbrowser.MockHttpServletRequest ) ; assertThat ( org.springframework.data.rest.webmvc.halbrowser.View ) . isInstanceOf ( RedirectView .class ) ; java.lang.String java.lang.String = ( ( RedirectView ) org.springframework.data.rest.webmvc.halbrowser.View ) . getUrl ( ) ; assertThat ( java.lang.String , startsWith ( STRING ) ) ; assertThat ( java.lang.String , endsWith ( STRING ) ) ; }  <METHOD_END>
