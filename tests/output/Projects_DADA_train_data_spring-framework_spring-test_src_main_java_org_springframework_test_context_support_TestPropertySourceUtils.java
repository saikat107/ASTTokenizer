<METHOD_START> static org.springframework.test.context.support.MergedTestPropertySources org.springframework.test.context.support.MergedTestPropertySources ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Class<org.springframework.test.context.support.TestPropertySource> < TestPropertySource > java.lang.Class<org.springframework.test.context.support.TestPropertySource> = TestPropertySource .class ; AnnotationDescriptor < TestPropertySource > org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestPropertySource> = findAnnotationDescriptor ( java.lang.Class<> , java.lang.Class<org.springframework.test.context.support.TestPropertySource> ) ; if ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestPropertySource> == null ) { return new MergedTestPropertySources ( ) ; } java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> < TestPropertySourceAttributes > java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> = java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ( java.lang.Class<> ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ) ; return new MergedTestPropertySources ( java.lang.String[] , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> < TestPropertySourceAttributes > java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> < TestPropertySourceAttributes > java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> = new java.util.ArrayList<org.springframework.test.context.support.TestPropertySourceAttributes> <> ( ) ; java.lang.Class<org.springframework.test.context.support.TestPropertySource> < TestPropertySource > java.lang.Class<org.springframework.test.context.support.TestPropertySource> = TestPropertySource .class ; AnnotationDescriptor < TestPropertySource > org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestPropertySource> = findAnnotationDescriptor ( java.lang.Class<> , java.lang.Class<org.springframework.test.context.support.TestPropertySource> ) ; Assert . notNull ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestPropertySource> , java.lang.String . java.lang.String ( STRING , java.lang.Class<org.springframework.test.context.support.TestPropertySource> . getName ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; while ( org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestPropertySource> != null ) { TestPropertySource org.springframework.test.context.support.TestPropertySource = org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestPropertySource> . synthesizeAnnotation ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestPropertySource> . getRootDeclaringClass ( ) ; if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.TestPropertySource , java.lang.Class<> . java.lang.String ( ) ) ) ; } TestPropertySourceAttributes org.springframework.test.context.support.TestPropertySourceAttributes = new TestPropertySourceAttributes ( java.lang.Class<> , org.springframework.test.context.support.TestPropertySource ) ; if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( STRING + org.springframework.test.context.support.TestPropertySourceAttributes ) ; } java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> . add ( org.springframework.test.context.support.TestPropertySourceAttributes ) ; org.springframework.test.context.support.AnnotationDescriptor<org.springframework.test.context.support.TestPropertySource> = findAnnotationDescriptor ( java.lang.Class<> . java.lang.Class<? super > ( ) , java.lang.Class<org.springframework.test.context.support.TestPropertySource> ) ; } return java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ; }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> < TestPropertySourceAttributes > java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( TestPropertySourceAttributes org.springframework.test.context.support.TestPropertySourceAttributes : java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ) { if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.TestPropertySourceAttributes ) ) ; } java.lang.String [] java.lang.String[] = TestContextResourceUtils . convertToClasspathResourcePaths ( org.springframework.test.context.support.TestPropertySourceAttributes . getDeclaringClass ( ) , org.springframework.test.context.support.TestPropertySourceAttributes . getLocations ( ) ) ; java.util.List<java.lang.String> . boolean ( NUMBER , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; if ( ! org.springframework.test.context.support.TestPropertySourceAttributes . isInheritLocations ( ) ) { break; } } return StringUtils . toStringArray ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> < TestPropertySourceAttributes > java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( TestPropertySourceAttributes org.springframework.test.context.support.TestPropertySourceAttributes : java.util.List<org.springframework.test.context.support.TestPropertySourceAttributes> ) { if ( org.springframework.test.context.support.Log . isTraceEnabled ( ) ) { org.springframework.test.context.support.Log . trace ( java.lang.String . java.lang.String ( STRING , org.springframework.test.context.support.TestPropertySourceAttributes ) ) ; } java.util.List<java.lang.String> . boolean ( NUMBER , java.util.Arrays . java.util.List ( org.springframework.test.context.support.TestPropertySourceAttributes . getProperties ( ) ) ) ; if ( ! org.springframework.test.context.support.TestPropertySourceAttributes . isInheritProperties ( ) ) { break; } } return StringUtils . toStringArray ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableApplicationContext org.springframework.test.context.support.ConfigurableApplicationContext , java.lang.String ... java.lang.String[] ) { Assert . notNull ( org.springframework.test.context.support.ConfigurableApplicationContext , STRING ) ; Assert . notNull ( java.lang.String[] , STRING ) ; void ( org.springframework.test.context.support.ConfigurableApplicationContext . getEnvironment ( ) , org.springframework.test.context.support.ConfigurableApplicationContext , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableEnvironment org.springframework.test.context.support.ConfigurableEnvironment , ResourceLoader org.springframework.test.context.support.ResourceLoader , java.lang.String ... java.lang.String[] ) { Assert . notNull ( org.springframework.test.context.support.ConfigurableEnvironment , STRING ) ; Assert . notNull ( org.springframework.test.context.support.ResourceLoader , STRING ) ; Assert . notNull ( java.lang.String[] , STRING ) ; try { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = org.springframework.test.context.support.ConfigurableEnvironment . resolveRequiredPlaceholders ( java.lang.String ) ; Resource org.springframework.test.context.support.Resource = org.springframework.test.context.support.ResourceLoader . getResource ( java.lang.String ) ; org.springframework.test.context.support.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( new ResourcePropertySource ( org.springframework.test.context.support.Resource ) ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableApplicationContext org.springframework.test.context.support.ConfigurableApplicationContext , java.lang.String ... java.lang.String[] ) { Assert . notNull ( org.springframework.test.context.support.ConfigurableApplicationContext , STRING ) ; Assert . notNull ( java.lang.String[] , STRING ) ; void ( org.springframework.test.context.support.ConfigurableApplicationContext . getEnvironment ( ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ConfigurableEnvironment org.springframework.test.context.support.ConfigurableEnvironment , java.lang.String ... java.lang.String[] ) { Assert . notNull ( org.springframework.test.context.support.ConfigurableEnvironment , STRING ) ; Assert . notNull ( java.lang.String[] , STRING ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( STRING + ObjectUtils . nullSafeToString ( java.lang.String[] ) ) ; } MapPropertySource org.springframework.test.context.support.MapPropertySource = ( MapPropertySource ) org.springframework.test.context.support.ConfigurableEnvironment . getPropertySources ( ) . get ( java.lang.String ) ; if ( org.springframework.test.context.support.MapPropertySource == null ) { org.springframework.test.context.support.MapPropertySource = new MapPropertySource ( java.lang.String , new java.util.LinkedHashMap <> ( ) ) ; org.springframework.test.context.support.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( org.springframework.test.context.support.MapPropertySource ) ; } org.springframework.test.context.support.MapPropertySource . getSource ( ) . putAll ( java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String[] ) ) ; } }  <METHOD_END>
<METHOD_START> public static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { continue; } try { java.util.Properties . void ( new java.io.StringReader ( java.lang.String ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } Assert . state ( java.util.Properties . int ( ) == NUMBER , ( ) STRING + pair + STRING ) ; for ( java.lang.String java.lang.String : java.util.Properties . java.util.Set<java.lang.String> ( ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.Properties . java.lang.String ( java.lang.String ) ) ; } java.util.Properties . void ( ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
