<METHOD_START> public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ( ) { return java.util.Collections . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ( this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> . clear ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite ( HandlerMethodReturnValueHandler org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ) { this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> . add ( org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite ( java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> < ? extends HandlerMethodReturnValueHandler > java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ) { if ( java.util.List<> != null ) { for ( HandlerMethodReturnValueHandler org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler : java.util.List<> ) { this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> . add ( org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ) ; } } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.messaging.handler.invocation.MethodParameter ) { return org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ( org.springframework.messaging.handler.invocation.MethodParameter ) != null ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ( MethodParameter org.springframework.messaging.handler.invocation.MethodParameter ) { for ( HandlerMethodReturnValueHandler org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler : this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ) { if ( org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler . supportsReturnType ( org.springframework.messaging.handler.invocation.MethodParameter ) ) { return org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.messaging.handler.invocation.MethodParameter , Message < ? > org.springframework.messaging.handler.invocation.Message<?> )			throws java.lang.Exception { HandlerMethodReturnValueHandler org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler = org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ( org.springframework.messaging.handler.invocation.MethodParameter ) ; if ( org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.messaging.handler.invocation.MethodParameter . getParameterType ( ) ) ; } if ( org.springframework.messaging.handler.invocation.Log . isTraceEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . trace ( STRING + org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ) ; } org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler . handleReturnValue ( java.lang.Object , org.springframework.messaging.handler.invocation.MethodParameter , org.springframework.messaging.handler.invocation.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object , MethodParameter org.springframework.messaging.handler.invocation.MethodParameter ) { HandlerMethodReturnValueHandler org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler = org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ( org.springframework.messaging.handler.invocation.MethodParameter ) ; return ( org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler instanceof AsyncHandlerMethodReturnValueHandler && ( ( AsyncHandlerMethodReturnValueHandler ) org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ) . isAsyncReturnValue ( java.lang.Object , org.springframework.messaging.handler.invocation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.handler.invocation.ListenableFuture<?> < ? > org.springframework.messaging.handler.invocation.ListenableFuture<?> ( java.lang.Object java.lang.Object , MethodParameter org.springframework.messaging.handler.invocation.MethodParameter ) { HandlerMethodReturnValueHandler org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler = org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ( org.springframework.messaging.handler.invocation.MethodParameter ) ; Assert . state ( org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler instanceof AsyncHandlerMethodReturnValueHandler , STRING ) ; return ( ( AsyncHandlerMethodReturnValueHandler ) org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler ) . toListenableFuture ( java.lang.Object , org.springframework.messaging.handler.invocation.MethodParameter ) ; }  <METHOD_END>
