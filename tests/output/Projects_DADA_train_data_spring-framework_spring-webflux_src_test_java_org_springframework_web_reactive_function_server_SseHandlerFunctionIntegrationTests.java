<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.function.server.RouterFunction<?> < ? > org.springframework.web.reactive.function.server.RouterFunction<?> ( ) { org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.SseHandler org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.SseHandler = new org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.SseHandler ( ) ; return route ( RequestPredicates . GET ( STRING ) , org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.SseHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) . and ( route ( RequestPredicates . GET ( STRING ) , org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.SseHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) ) . and ( route ( RequestPredicates . GET ( STRING ) , org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.SseHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { super. setup ( ) ; this . org.springframework.web.reactive.function.server.WebClient = WebClient . create ( STRING + this . port ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < java.lang.String > org.springframework.web.reactive.function.server.Flux<java.lang.String> = this . org.springframework.web.reactive.function.server.WebClient . get ( ) . uri ( STRING ) . accept ( TEXT_EVENT_STREAM ) . exchange ( ) . flatMap ( response -> response . body ( toFlux ( String .class ) ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Flux<java.lang.String> ) . expectNext ( STRING ) . expectNext ( STRING ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person > org.springframework.web.reactive.function.server.Flux<org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person> = this . org.springframework.web.reactive.function.server.WebClient . get ( ) . uri ( STRING ) . accept ( TEXT_EVENT_STREAM ) . exchange ( ) . flatMap ( response -> response . body ( toFlux ( Person .class ) ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Flux<org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person> ) . expectNext ( new org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person ( STRING ) ) . expectNext ( new org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person ( STRING ) ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flux < ServerSentEvent < java.lang.String > > org.springframework.web.reactive.function.server.Flux<org.springframework.web.reactive.function.server.ServerSentEvent<java.lang.String>> = this . org.springframework.web.reactive.function.server.WebClient . get ( ) . uri ( STRING ) . accept ( TEXT_EVENT_STREAM ) . exchange ( ) . flatMap ( response -> response . body ( toFlux ( forClassWithGenerics ( ServerSentEvent .class , String .class ) ) ) ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Flux<org.springframework.web.reactive.function.server.ServerSentEvent<java.lang.String>> ) . consumeNextWith ( event -> { assertEquals ( STRING , event . id ( ) . get ( ) ) ; assertEquals ( STRING , event . data ( ) . get ( ) ) ; assertEquals ( STRING , event . comment ( ) . get ( ) ) ; assertFalse ( event . event ( ) . isPresent ( ) ) ; assertFalse ( event . retry ( ) . isPresent ( ) ) ; } ) . consumeNextWith ( event -> { assertEquals ( STRING , event . id ( ) . get ( ) ) ; assertEquals ( STRING , event . data ( ) . get ( ) ) ; assertEquals ( STRING , event . comment ( ) . get ( ) ) ; assertFalse ( event . event ( ) . isPresent ( ) ) ; assertFalse ( event . retry ( ) . isPresent ( ) ) ; } ) . expectComplete ( ) . verify ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { Flux < java.lang.String > org.springframework.web.reactive.function.server.Flux<java.lang.String> = Flux . interval ( java.time.Duration . java.time.Duration ( NUMBER ) ) . map ( l -> STRING + l ) . take ( NUMBER ) ; return ServerResponse . ok ( ) . body ( fromServerSentEvents ( org.springframework.web.reactive.function.server.Flux<java.lang.String> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { Flux < org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person > org.springframework.web.reactive.function.server.Flux<org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person> = Flux . interval ( java.time.Duration . java.time.Duration ( NUMBER ) ) . map ( l -> new Person ( STRING + l ) ) . take ( NUMBER ) ; return ServerResponse . ok ( ) . body ( fromServerSentEvents ( org.springframework.web.reactive.function.server.Flux<org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person> , org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person .class ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { Flux < ServerSentEvent < java.lang.String > > org.springframework.web.reactive.function.server.Flux<org.springframework.web.reactive.function.server.ServerSentEvent<java.lang.String>> = Flux . interval ( java.time.Duration . java.time.Duration ( NUMBER ) ) . map ( l -> ServerSentEvent .< String > builder ( ) . data ( STRING ) . id ( Long . toString ( l ) ) . comment ( STRING ) . build ( ) ) . take ( NUMBER ) ; return ServerResponse . ok ( ) . body ( fromServerSentEvents ( org.springframework.web.reactive.function.server.Flux<org.springframework.web.reactive.function.server.ServerSentEvent<java.lang.String>> ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person = ( org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person ) java.lang.Object ; return ! ( this . java.lang.String != null ? ! this . java.lang.String . boolean ( org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person . java.lang.String ) : org.springframework.web.reactive.function.server.SseHandlerFunctionIntegrationTests.Person . java.lang.String != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String != null ? this . java.lang.String . int ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + java.lang.String + '\'' + '}' ; }  <METHOD_END>
