<METHOD_START> @ Before public void void ( ) { this . org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; new org.springframework.transaction.aspectj.JtaTransactionAspectsTests.JtaAnnotationPublicAnnotatedMember ( ) . void ( null ) ; assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; java.lang.InterruptedException java.lang.InterruptedException = new java.lang.InterruptedException ( ) ; try { new org.springframework.transaction.aspectj.JtaTransactionAspectsTests.JtaAnnotationPublicAnnotatedMember ( ) . void ( java.lang.InterruptedException ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { assertEquals ( STRING , java.lang.InterruptedException , java.lang.Throwable ) ; } assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . rollbacks ) ; assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; java.io.IOException java.io.IOException = new java.io.IOException ( ) ; try { new org.springframework.transaction.aspectj.JtaTransactionAspectsTests.JtaAnnotationPublicAnnotatedMember ( ) . void ( java.io.IOException ) ; fail ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { assertEquals ( STRING , java.io.IOException , java.lang.Throwable ) ; } assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . rollbacks ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; new org.springframework.transaction.aspectj.JtaTransactionAspectsTests.JtaAnnotationProtectedAnnotatedMember ( ) . void ( ) ; assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; new org.springframework.transaction.aspectj.JtaTransactionAspectsTests.JtaAnnotationProtectedAnnotatedMember ( ) . void ( ) ; assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; new org.springframework.transaction.aspectj.JtaTransactionAspectsTests.JtaAnnotationPrivateAnnotatedMember ( ) . void ( ) ; assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; new org.springframework.transaction.aspectj.JtaTransactionAspectsTests.JtaAnnotationPrivateAnnotatedMember ( ) . void ( ) ; assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; new TransactionAspectTests . TransactionAspectTests ( ) . noop ( ) ; assertEquals ( NUMBER , this . org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( rollbackOn = java.lang.InterruptedException .class ) public void void ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Throwable { if ( java.lang.Throwable != null ) { throw java.lang.Throwable ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Transactional protected void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ Transactional private void void ( ) {		}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.aspectj.CallCountingTransactionManager org.springframework.transaction.aspectj.CallCountingTransactionManager ( ) { return new CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.transaction.aspectj.JtaAnnotationTransactionAspect org.springframework.transaction.aspectj.JtaAnnotationTransactionAspect ( ) { JtaAnnotationTransactionAspect org.springframework.transaction.aspectj.JtaAnnotationTransactionAspect = JtaAnnotationTransactionAspect . aspectOf ( ) ; org.springframework.transaction.aspectj.JtaAnnotationTransactionAspect . setTransactionManager ( org.springframework.transaction.aspectj.CallCountingTransactionManager ( ) ) ; return org.springframework.transaction.aspectj.JtaAnnotationTransactionAspect ; }  <METHOD_END>
