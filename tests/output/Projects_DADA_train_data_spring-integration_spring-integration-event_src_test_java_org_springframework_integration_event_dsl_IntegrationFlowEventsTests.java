<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.integration.event.dsl.MessageGroupStore . addMessageToGroup ( java.lang.String , new GenericMessage <> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( this . java.util.concurrent.atomic.AtomicReference<java.lang.Object> . java.lang.Object ( ) ) ; this . org.springframework.integration.event.dsl.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; assertNotNull ( this . java.util.concurrent.atomic.AtomicReference<java.lang.Object> . java.lang.Object ( ) ) ; assertEquals ( NUMBER , this . java.util.concurrent.atomic.AtomicReference<java.lang.Object> . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.event.dsl.ApplicationContext . publishEvent ( new org.springframework.integration.event.dsl.IntegrationFlowEventsTests.TestApplicationEvent1 ( ) ) ; Message < ? > org.springframework.integration.event.dsl.Message<?> = this . org.springframework.integration.event.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.dsl.Message<> ) ; assertThat ( org.springframework.integration.event.dsl.Message<> . getPayload ( ) , instanceOf ( org.springframework.integration.event.dsl.IntegrationFlowEventsTests.TestApplicationEvent1 .class ) ) ; this . org.springframework.integration.event.dsl.ApplicationContext . publishEvent ( new org.springframework.integration.event.dsl.IntegrationFlowEventsTests.TestApplicationEvent2 ( ) ) ; org.springframework.integration.event.dsl.Message<?> = this . org.springframework.integration.event.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.dsl.Message<> ) ; assertThat ( org.springframework.integration.event.dsl.Message<> . getPayload ( ) , instanceOf ( org.springframework.integration.event.dsl.IntegrationFlowEventsTests.TestApplicationEvent2 .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.event.dsl.Message<?> = this . org.springframework.integration.event.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.dsl.Message<> ) ; assertEquals ( STRING , org.springframework.integration.event.dsl.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.event.dsl.MessageGroupStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.event.dsl.MessageGroupStore . getMessageCountForAllMessageGroups ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.atomic.AtomicReference<java.lang.Object> < java.lang.Object > java.util.concurrent.atomic.AtomicReference<java.lang.Object> ( ) { return new java.util.concurrent.atomic.AtomicReference<java.lang.Object> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.event.dsl.ApplicationListener<org.springframework.integration.event.dsl.MessagingEvent> < MessagingEvent > org.springframework.integration.event.dsl.ApplicationListener<org.springframework.integration.event.dsl.MessagingEvent> ( ) { return event -> eventHolder ( ) . set ( event . getMessage ( ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.event.dsl.IntegrationFlow org.springframework.integration.event.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . handle ( java.lang.Integer .class , new GenericHandler < java.lang.Integer > ( ) { @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) {						} @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Integer java.lang.Integer ) {						} @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Integer java.lang.Integer , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return java.lang.Integer * NUMBER ; } } ) . handle ( new ApplicationEventPublishingMessageHandler ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) {						}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Integer java.lang.Integer ) {						}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Integer java.lang.Integer , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return java.lang.Integer * NUMBER ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.event.dsl.ApplicationListener<?> < ? > org.springframework.integration.event.dsl.ApplicationListener<?> ( ) { ApplicationEventListeningMessageProducer org.springframework.integration.event.dsl.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.dsl.ApplicationEventListeningMessageProducer . setEventTypes ( org.springframework.integration.event.dsl.IntegrationFlowEventsTests.TestApplicationEvent1 .class ) ; org.springframework.integration.event.dsl.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.dsl.PollableChannel ( ) ) ; return org.springframework.integration.event.dsl.ApplicationEventListeningMessageProducer ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.event.dsl.PollableChannel org.springframework.integration.event.dsl.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.event.dsl.IntegrationFlow org.springframework.integration.event.dsl.IntegrationFlow ( ) { ApplicationEventListeningMessageProducer org.springframework.integration.event.dsl.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.dsl.ApplicationEventListeningMessageProducer . setEventTypes ( org.springframework.integration.event.dsl.IntegrationFlowEventsTests.TestApplicationEvent2 .class ) ; return IntegrationFlows . from ( org.springframework.integration.event.dsl.ApplicationEventListeningMessageProducer ) . channel ( org.springframework.integration.event.dsl.PollableChannel ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.event.dsl.IntegrationFlow org.springframework.integration.event.dsl.IntegrationFlow ( ) { return flow -> flow . delay ( GROUP_ID , e -> e . messageStore ( messageGroupStore ) . id ( STRING ) ) . channel ( MessageChannels . queue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING ); }  <METHOD_END>
