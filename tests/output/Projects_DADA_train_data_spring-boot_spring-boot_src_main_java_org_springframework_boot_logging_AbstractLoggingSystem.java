<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LoggingInitializationContext org.springframework.boot.logging.LoggingInitializationContext , java.lang.String java.lang.String , LogFile org.springframework.boot.logging.LogFile ) { if ( StringUtils . hasLength ( java.lang.String ) ) { void ( org.springframework.boot.logging.LoggingInitializationContext , java.lang.String , org.springframework.boot.logging.LogFile ) ; return; } void ( org.springframework.boot.logging.LoggingInitializationContext , org.springframework.boot.logging.LogFile ) ; }  <METHOD_END>
<METHOD_START> private void void ( LoggingInitializationContext org.springframework.boot.logging.LoggingInitializationContext , java.lang.String java.lang.String , LogFile org.springframework.boot.logging.LogFile ) { java.lang.String = SystemPropertyUtils . resolvePlaceholders ( java.lang.String ) ; void ( org.springframework.boot.logging.LoggingInitializationContext , java.lang.String , org.springframework.boot.logging.LogFile ) ; }  <METHOD_END>
<METHOD_START> private void void ( LoggingInitializationContext org.springframework.boot.logging.LoggingInitializationContext , LogFile org.springframework.boot.logging.LogFile ) { java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String != null && org.springframework.boot.logging.LogFile == null ) { void ( org.springframework.boot.logging.LoggingInitializationContext ) ; return; } if ( java.lang.String == null ) { java.lang.String = java.lang.String ( ) ; } if ( java.lang.String != null ) { void ( org.springframework.boot.logging.LoggingInitializationContext , java.lang.String , org.springframework.boot.logging.LogFile ) ; return; } void ( org.springframework.boot.logging.LoggingInitializationContext , org.springframework.boot.logging.LogFile ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String[] ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ( java.lang.String[] ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String [] java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { ClassPathResource org.springframework.boot.logging.ClassPathResource = new ClassPathResource ( java.lang.String , this . java.lang.ClassLoader ) ; if ( org.springframework.boot.logging.ClassPathResource . exists ( ) ) { return STRING + java.lang.String ; } } return null ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String [] java.lang.String[] ( )  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.String java.lang.String = StringUtils . getFilenameExtension ( java.lang.String[] [ int ] ) ; java.lang.String[] [ int ] = java.lang.String[] [ int ] . java.lang.String ( NUMBER , java.lang.String[] [ int ] . int ( ) - java.lang.String . int ( ) - NUMBER ) + STRING + java.lang.String ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( LoggingInitializationContext org.springframework.boot.logging.LoggingInitializationContext , LogFile org.springframework.boot.logging.LogFile );  <METHOD_END>
<METHOD_START> protected abstract void void ( LoggingInitializationContext org.springframework.boot.logging.LoggingInitializationContext , java.lang.String java.lang.String , LogFile org.springframework.boot.logging.LogFile );  <METHOD_END>
<METHOD_START> protected void void ( LoggingInitializationContext org.springframework.boot.logging.LoggingInitializationContext ) {	}  <METHOD_END>
<METHOD_START> protected final java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> protected final java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = ClassUtils . getPackageName ( java.lang.Class<? extends org.springframework.boot.logging.AbstractLoggingSystem> ( ) ) ; java.lang.String = java.lang.String . java.lang.String ( '.' , '/' ) ; java.lang.String = java.lang.String + STRING + java.lang.String ; java.lang.String = STRING + java.lang.String ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected final void void ( Environment org.springframework.boot.logging.Environment , LogFile org.springframework.boot.logging.LogFile ) { new LoggingSystemProperties ( org.springframework.boot.logging.Environment ) . apply ( org.springframework.boot.logging.LogFile ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . java.util.Map<org.springframework.boot.logging.LogLevel,T> = new java.util.HashMap <> ( ) ; this . java.util.Map<T,org.springframework.boot.logging.LogLevel> = new java.util.HashMap <> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( LogLevel org.springframework.boot.logging.LogLevel , T T ) { if ( ! this . java.util.Map<org.springframework.boot.logging.LogLevel,T> . containsKey ( org.springframework.boot.logging.LogLevel ) ) { this . java.util.Map<org.springframework.boot.logging.LogLevel,T> . put ( org.springframework.boot.logging.LogLevel , T ) ; } if ( ! this . java.util.Map<T,org.springframework.boot.logging.LogLevel> . containsKey ( T ) ) { this . java.util.Map<T,org.springframework.boot.logging.LogLevel> . put ( T , org.springframework.boot.logging.LogLevel ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.logging.LogLevel org.springframework.boot.logging.LogLevel ( T T ) { return this . java.util.Map<T,org.springframework.boot.logging.LogLevel> . get ( T ) ; }  <METHOD_END>
<METHOD_START> public T T ( LogLevel org.springframework.boot.logging.LogLevel ) { return this . java.util.Map<org.springframework.boot.logging.LogLevel,T> . get ( org.springframework.boot.logging.LogLevel ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.boot.logging.LogLevel> < LogLevel > java.util.Set<org.springframework.boot.logging.LogLevel> ( ) { return new java.util.LinkedHashSet <> ( this . java.util.Map<T,org.springframework.boot.logging.LogLevel> . values ( ) ) ; }  <METHOD_END>
