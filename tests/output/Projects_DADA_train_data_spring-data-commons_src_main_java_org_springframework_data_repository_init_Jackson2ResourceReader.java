<METHOD_START> public void ( ) { this( org.springframework.data.repository.init.ObjectMapper ); }  <METHOD_END>
<METHOD_START> public void ( ObjectMapper org.springframework.data.repository.init.ObjectMapper ) { this . org.springframework.data.repository.init.ObjectMapper = org.springframework.data.repository.init.ObjectMapper == null ? org.springframework.data.repository.init.ObjectMapper : org.springframework.data.repository.init.ObjectMapper ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( Resource org.springframework.data.repository.init.Resource , java.lang.ClassLoader java.lang.ClassLoader ) throws java.lang.Exception { java.io.InputStream java.io.InputStream = org.springframework.data.repository.init.Resource . getInputStream ( ) ; JsonNode org.springframework.data.repository.init.JsonNode = org.springframework.data.repository.init.ObjectMapper . readerFor ( JsonNode .class ) . readTree ( java.io.InputStream ) ; if ( org.springframework.data.repository.init.JsonNode . isArray ( ) ) { java.util.Iterator<org.springframework.data.repository.init.JsonNode> < JsonNode > java.util.Iterator<org.springframework.data.repository.init.JsonNode> = org.springframework.data.repository.init.JsonNode . elements ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; while ( java.util.Iterator<org.springframework.data.repository.init.JsonNode> . hasNext ( ) ) { JsonNode org.springframework.data.repository.init.JsonNode = java.util.Iterator<org.springframework.data.repository.init.JsonNode> . next ( ) ; java.util.List<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.repository.init.JsonNode , java.lang.ClassLoader ) ) ; } return java.util.List<java.lang.Object> ; } return java.lang.Object ( org.springframework.data.repository.init.JsonNode , java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( JsonNode org.springframework.data.repository.init.JsonNode , java.lang.ClassLoader java.lang.ClassLoader ) throws java.io.IOException { JsonNode org.springframework.data.repository.init.JsonNode = org.springframework.data.repository.init.JsonNode . findValue ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.data.repository.init.JsonNode == null ? null : org.springframework.data.repository.init.JsonNode . asText ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( java.lang.String , java.lang.ClassLoader ) ; return org.springframework.data.repository.init.ObjectMapper . readerFor ( java.lang.Class<> ) . readValue ( org.springframework.data.repository.init.JsonNode ) ; }  <METHOD_END>
