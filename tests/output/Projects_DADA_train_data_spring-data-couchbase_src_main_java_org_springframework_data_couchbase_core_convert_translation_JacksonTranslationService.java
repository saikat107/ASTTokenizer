<METHOD_START> @ java.lang.Override public final java.lang.String java.lang.String ( final CouchbaseStorable org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable ) { java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; try { JsonGenerator org.springframework.data.couchbase.core.convert.translation.JsonGenerator = org.springframework.data.couchbase.core.convert.translation.JsonFactory . createGenerator ( java.io.Writer ) ; void ( org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable , org.springframework.data.couchbase.core.convert.translation.JsonGenerator ) ; org.springframework.data.couchbase.core.convert.translation.JsonGenerator . close ( ) ; java.io.Writer . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( STRING , java.io.IOException ) ; } return java.io.Writer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( final CouchbaseStorable org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable , final JsonGenerator org.springframework.data.couchbase.core.convert.translation.JsonGenerator ) throws java.io.IOException { org.springframework.data.couchbase.core.convert.translation.JsonGenerator . writeStartObject ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : ( ( CouchbaseDocument ) org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable ) . export ( ) . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; org.springframework.data.couchbase.core.convert.translation.JsonGenerator . writeFieldName ( java.lang.String ) ; if ( java.lang.Object instanceof CouchbaseDocument ) { void ( ( CouchbaseDocument ) java.lang.Object , org.springframework.data.couchbase.core.convert.translation.JsonGenerator ) ; continue; } final java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( org.springframework.data.couchbase.core.convert.translation.SimpleTypeHolder . isSimpleType ( java.lang.Class<> ) && ! boolean ( java.lang.Class<> ) ) { org.springframework.data.couchbase.core.convert.translation.JsonGenerator . writeObject ( java.lang.Object ) ; } else { org.springframework.data.couchbase.core.convert.translation.ObjectMapper . writeValue ( org.springframework.data.couchbase.core.convert.translation.JsonGenerator , java.lang.Object ) ; } } org.springframework.data.couchbase.core.convert.translation.JsonGenerator . writeEndObject ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Enum .class . boolean ( java.lang.Class<> ) || java.lang.Class .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable ( final java.lang.String java.lang.String , final CouchbaseStorable org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable ) { try { JsonParser org.springframework.data.couchbase.core.convert.translation.JsonParser = org.springframework.data.couchbase.core.convert.translation.JsonFactory . createParser ( ( java.lang.String ) java.lang.String ) ; while ( org.springframework.data.couchbase.core.convert.translation.JsonParser . nextToken ( ) != null ) { JsonToken org.springframework.data.couchbase.core.convert.translation.JsonToken = org.springframework.data.couchbase.core.convert.translation.JsonParser . getCurrentToken ( ) ; if ( org.springframework.data.couchbase.core.convert.translation.JsonToken == JsonToken . START_OBJECT ) { return org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument ( org.springframework.data.couchbase.core.convert.translation.JsonParser , ( CouchbaseDocument ) org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable ) ; } else if ( org.springframework.data.couchbase.core.convert.translation.JsonToken == JsonToken . START_ARRAY ) { return org.springframework.data.couchbase.core.convert.translation.CouchbaseList ( org.springframework.data.couchbase.core.convert.translation.JsonParser , new CouchbaseList ( ) ) ; } else { throw new MappingException ( STRING ) ; } } org.springframework.data.couchbase.core.convert.translation.JsonParser . close ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( STRING , java.io.IOException ) ; } return org.springframework.data.couchbase.core.convert.translation.CouchbaseStorable ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument ( final JsonParser org.springframework.data.couchbase.core.convert.translation.JsonParser , final CouchbaseDocument org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument ) throws java.io.IOException { JsonToken org.springframework.data.couchbase.core.convert.translation.JsonToken = org.springframework.data.couchbase.core.convert.translation.JsonParser . nextToken ( ) ; java.lang.String java.lang.String = STRING ; while ( org.springframework.data.couchbase.core.convert.translation.JsonToken != null && org.springframework.data.couchbase.core.convert.translation.JsonToken != JsonToken . END_OBJECT ) { if ( org.springframework.data.couchbase.core.convert.translation.JsonToken == JsonToken . START_OBJECT ) { org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument . put ( java.lang.String , org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument ( org.springframework.data.couchbase.core.convert.translation.JsonParser , new CouchbaseDocument ( ) ) ) ; } else if ( org.springframework.data.couchbase.core.convert.translation.JsonToken == JsonToken . START_ARRAY ) { org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument . put ( java.lang.String , org.springframework.data.couchbase.core.convert.translation.CouchbaseList ( org.springframework.data.couchbase.core.convert.translation.JsonParser , new CouchbaseList ( ) ) ) ; } else if ( org.springframework.data.couchbase.core.convert.translation.JsonToken == JsonToken . FIELD_NAME ) { java.lang.String = org.springframework.data.couchbase.core.convert.translation.JsonParser . getCurrentName ( ) ; } else { org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument . put ( java.lang.String , java.lang.Object ( org.springframework.data.couchbase.core.convert.translation.JsonToken , org.springframework.data.couchbase.core.convert.translation.JsonParser ) ) ; } org.springframework.data.couchbase.core.convert.translation.JsonToken = org.springframework.data.couchbase.core.convert.translation.JsonParser . nextToken ( ) ; } return org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.convert.translation.CouchbaseList org.springframework.data.couchbase.core.convert.translation.CouchbaseList ( final JsonParser org.springframework.data.couchbase.core.convert.translation.JsonParser , final CouchbaseList org.springframework.data.couchbase.core.convert.translation.CouchbaseList ) throws java.io.IOException { JsonToken org.springframework.data.couchbase.core.convert.translation.JsonToken = org.springframework.data.couchbase.core.convert.translation.JsonParser . nextToken ( ) ; while ( org.springframework.data.couchbase.core.convert.translation.JsonToken != null && org.springframework.data.couchbase.core.convert.translation.JsonToken != JsonToken . END_ARRAY ) { if ( org.springframework.data.couchbase.core.convert.translation.JsonToken == JsonToken . START_OBJECT ) { org.springframework.data.couchbase.core.convert.translation.CouchbaseList . put ( org.springframework.data.couchbase.core.convert.translation.CouchbaseDocument ( org.springframework.data.couchbase.core.convert.translation.JsonParser , new CouchbaseDocument ( ) ) ) ; } else if ( org.springframework.data.couchbase.core.convert.translation.JsonToken == JsonToken . START_ARRAY ) { org.springframework.data.couchbase.core.convert.translation.CouchbaseList . put ( org.springframework.data.couchbase.core.convert.translation.CouchbaseList ( org.springframework.data.couchbase.core.convert.translation.JsonParser , new CouchbaseList ( ) ) ) ; } else { org.springframework.data.couchbase.core.convert.translation.CouchbaseList . put ( java.lang.Object ( org.springframework.data.couchbase.core.convert.translation.JsonToken , org.springframework.data.couchbase.core.convert.translation.JsonParser ) ) ; } org.springframework.data.couchbase.core.convert.translation.JsonToken = org.springframework.data.couchbase.core.convert.translation.JsonParser . nextToken ( ) ; } return org.springframework.data.couchbase.core.convert.translation.CouchbaseList ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( final JsonToken org.springframework.data.couchbase.core.convert.translation.JsonToken , final JsonParser org.springframework.data.couchbase.core.convert.translation.JsonParser ) throws java.io.IOException { switch ( org.springframework.data.couchbase.core.convert.translation.JsonToken ) { case VALUE_TRUE : case VALUE_FALSE : return org.springframework.data.couchbase.core.convert.translation.JsonParser . getBooleanValue ( ) ; case VALUE_STRING : return org.springframework.data.couchbase.core.convert.translation.JsonParser . getValueAsString ( ) ; case VALUE_NUMBER_INT : return org.springframework.data.couchbase.core.convert.translation.JsonParser . getNumberValue ( ) ; case VALUE_NUMBER_FLOAT : return org.springframework.data.couchbase.core.convert.translation.JsonParser . getDoubleValue ( ) ; case VALUE_NULL : return null ; default: throw new MappingException ( STRING + org.springframework.data.couchbase.core.convert.translation.JsonToken ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { try { return org.springframework.data.couchbase.core.convert.translation.ObjectMapper . readValue ( java.lang.String , java.lang.Class<T> ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public void void ( final ObjectMapper org.springframework.data.couchbase.core.convert.translation.ObjectMapper ) { this . org.springframework.data.couchbase.core.convert.translation.ObjectMapper = org.springframework.data.couchbase.core.convert.translation.ObjectMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.data.couchbase.core.convert.translation.ObjectMapper == null ) { org.springframework.data.couchbase.core.convert.translation.ObjectMapper = new ObjectMapper ( ) ; } }  <METHOD_END>
