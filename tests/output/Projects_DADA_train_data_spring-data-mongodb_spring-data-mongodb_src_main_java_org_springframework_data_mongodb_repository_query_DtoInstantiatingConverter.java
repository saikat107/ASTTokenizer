<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.repository.query.MappingContext<? extends org.springframework.data.mongodb.repository.query.MongoPersistentEntity<?>,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> , EntityInstantiators org.springframework.data.mongodb.repository.query.EntityInstantiators ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.repository.query.EntityInstantiators , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.data.mongodb.repository.query.MappingContext<? extends org.springframework.data.mongodb.repository.query.PersistentEntity<?,?>,? extends org.springframework.data.mongodb.repository.query.PersistentProperty<?>> = org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ; this . org.springframework.data.mongodb.repository.query.EntityInstantiator = org.springframework.data.mongodb.repository.query.EntityInstantiators . getInstantiatorFor ( org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Class<> . boolean ( ) ) { return java.lang.Object ; } final PersistentEntity < ? , ? > org.springframework.data.mongodb.repository.query.PersistentEntity<?,?> = org.springframework.data.mongodb.repository.query.MappingContext<,> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; final PersistentPropertyAccessor org.springframework.data.mongodb.repository.query.PersistentPropertyAccessor = org.springframework.data.mongodb.repository.query.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) ; final PersistentEntity < ? , ? > org.springframework.data.mongodb.repository.query.PersistentEntity<?,?> = org.springframework.data.mongodb.repository.query.MappingContext<,> . getRequiredPersistentEntity ( java.lang.Class<> ) ; final PreferredConstructor < ? , ? extends PersistentProperty < ? > > org.springframework.data.mongodb.repository.query.PreferredConstructor<?,? extends org.springframework.data.mongodb.repository.query.PersistentProperty<?>> = org.springframework.data.mongodb.repository.query.PersistentEntity<,> . getPersistenceConstructor ( ) . get ( ) ; @ java.lang.SuppressWarnings ( { STRING , STRING } ) java.lang.Object java.lang.Object = org.springframework.data.mongodb.repository.query.EntityInstantiator . createInstance ( org.springframework.data.mongodb.repository.query.PersistentEntity<,> , new ParameterValueProvider ( ) { @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( Parameter org.springframework.data.mongodb.repository.query.Parameter ) { return org.springframework.data.mongodb.repository.query.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.repository.query.PersistentEntity<,> . getPersistentProperty ( org.springframework.data.mongodb.repository.query.Parameter . getName ( ) . get ( ) . toString ( ) ) . get ( ) ) ; } } ) ; final PersistentPropertyAccessor org.springframework.data.mongodb.repository.query.PersistentPropertyAccessor = org.springframework.data.mongodb.repository.query.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) ; org.springframework.data.mongodb.repository.query.PersistentEntity<,> . doWithProperties ( new SimplePropertyHandler ( ) { @ java.lang.Override public void void ( PersistentProperty < ? > org.springframework.data.mongodb.repository.query.PersistentProperty<?> ) { if ( org.springframework.data.mongodb.repository.query.PreferredConstructor<,> . isConstructorParameter ( org.springframework.data.mongodb.repository.query.PersistentProperty<> ) ) { return; } org.springframework.data.mongodb.repository.query.PersistentPropertyAccessor . setProperty ( org.springframework.data.mongodb.repository.query.PersistentProperty<> , org.springframework.data.mongodb.repository.query.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.repository.query.PersistentEntity<,> . getPersistentProperty ( org.springframework.data.mongodb.repository.query.PersistentProperty<> . getName ( ) ) . get ( ) ) ) ; } } ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( Parameter org.springframework.data.mongodb.repository.query.Parameter ) { return org.springframework.data.mongodb.repository.query.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.repository.query.PersistentEntity<,> . getPersistentProperty ( org.springframework.data.mongodb.repository.query.Parameter . getName ( ) . get ( ) . toString ( ) ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PersistentProperty < ? > org.springframework.data.mongodb.repository.query.PersistentProperty<?> ) { if ( org.springframework.data.mongodb.repository.query.PreferredConstructor<,> . isConstructorParameter ( org.springframework.data.mongodb.repository.query.PersistentProperty<> ) ) { return; } org.springframework.data.mongodb.repository.query.PersistentPropertyAccessor . setProperty ( org.springframework.data.mongodb.repository.query.PersistentProperty<> , org.springframework.data.mongodb.repository.query.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.repository.query.PersistentEntity<,> . getPersistentProperty ( org.springframework.data.mongodb.repository.query.PersistentProperty<> . getName ( ) ) . get ( ) ) ) ; }  <METHOD_END>
