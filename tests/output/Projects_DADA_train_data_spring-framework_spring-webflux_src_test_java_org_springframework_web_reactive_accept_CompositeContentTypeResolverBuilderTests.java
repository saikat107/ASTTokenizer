<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . build ( ) ; MockServerWebExchange org.springframework.web.reactive.accept.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( MediaType . IMAGE_GIF ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.MockServerWebExchange ) ) ; org.springframework.web.reactive.accept.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( STRING , java.util.Collections .< MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> ( ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.MockServerWebExchange ) ) ; org.springframework.web.reactive.accept.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( STRING , java.util.Collections .< MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> ( ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.MockServerWebExchange ) ) ; org.springframework.web.reactive.accept.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . accept ( MediaType . IMAGE_GIF ) . toExchange ( ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( MediaType . IMAGE_GIF ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . favorPathExtension ( true ) . mediaType ( STRING , new MediaType ( STRING , STRING ) ) . mediaType ( STRING , new MediaType ( STRING , STRING ) ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ) ; org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ) ; org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . IMAGE_GIF ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NotAcceptableStatusException .class ) public void void ( ) java.lang.Exception { RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . favorPathExtension ( true ) . ignoreUnknownPathExtensions ( false ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . favorParameter ( true ) . mediaType ( STRING , MediaType . APPLICATION_JSON ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NotAcceptableStatusException .class ) public void void ( ) java.lang.Exception { RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . favorParameter ( true ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . ignoreAcceptHeader ( true ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . accept ( MediaType . IMAGE_GIF ) . toExchange ( ) ; assertEquals ( java.util.Collections .< MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> ( ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . defaultContentType ( MediaType . APPLICATION_JSON ) . build ( ) ; ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . accept ( MediaType . ALL ) . toExchange ( ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . defaultContentTypeResolver ( new FixedContentTypeResolver ( MediaType . APPLICATION_JSON ) ) . build ( ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = java.util.Collections . java.util.List ( MediaType . APPLICATION_JSON ) ; ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertEquals ( java.util.List<org.springframework.web.reactive.accept.MediaType> , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ) ; org.springframework.web.reactive.accept.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . accept ( MediaType . ALL ) . toExchange ( ) ; assertEquals ( java.util.List<org.springframework.web.reactive.accept.MediaType> , org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ) ; }  <METHOD_END>
