<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { super( java.lang.String , java.lang.Throwable ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( STRING + ( java.lang.String != null ? STRING + java.lang.String + STRING : STRING ) + STRING + java.lang.String ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { this( java.lang.String , java.lang.String ); initCause ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( STRING + ( java.lang.String != null ? STRING + java.lang.String + STRING : STRING ) + ( java.lang.String != null ? STRING + java.lang.String : STRING ) + STRING + java.lang.String ); this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { this( java.lang.String , java.lang.String , java.lang.String ); initCause ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable ) { if ( this . java.util.List<java.lang.Throwable> == null ) { this . java.util.List<java.lang.Throwable> = new java.util.LinkedList<java.lang.Throwable> <> ( ) ; } this . java.util.List<java.lang.Throwable> . boolean ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Throwable [] java.lang.Throwable[] ( ) { if ( this . java.util.List<java.lang.Throwable> == null ) { return null ; } return this . java.util.List<java.lang.Throwable> . java.lang.Throwable[] ( new java.lang.Throwable [ this . java.util.List<java.lang.Throwable> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( super. java.lang.String ( ) ) ; if ( this . java.util.List<java.lang.Throwable> != null ) { for ( java.lang.Throwable java.lang.Throwable : this . java.util.List<java.lang.Throwable> ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Throwable ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.PrintStream java.io.PrintStream ) { synchronized ( java.io.PrintStream ) { super. printStackTrace ( java.io.PrintStream ) ; if ( this . java.util.List<java.lang.Throwable> != null ) { for ( java.lang.Throwable java.lang.Throwable : this . java.util.List<java.lang.Throwable> ) { java.io.PrintStream . void ( STRING ) ; java.lang.Throwable . void ( java.io.PrintStream ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.PrintWriter java.io.PrintWriter ) { synchronized ( java.io.PrintWriter ) { super. printStackTrace ( java.io.PrintWriter ) ; if ( this . java.util.List<java.lang.Throwable> != null ) { for ( java.lang.Throwable java.lang.Throwable : this . java.util.List<java.lang.Throwable> ) { java.io.PrintWriter . void ( STRING ) ; java.lang.Throwable . void ( java.io.PrintWriter ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( super. contains ( java.lang.Class<> ) ) { return true ; } if ( this . java.util.List<java.lang.Throwable> != null ) { for ( java.lang.Throwable java.lang.Throwable : this . java.util.List<java.lang.Throwable> ) { if ( java.lang.Throwable instanceof NestedRuntimeException && ( ( NestedRuntimeException ) java.lang.Throwable ) . contains ( java.lang.Class<> ) ) { return true ; } } } return false ; }  <METHOD_END>
