<METHOD_START> public void ( ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new ResourceHttpMessageConverter ( false ) ) ; this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new SourceHttpMessageConverter <> ( ) ) ; this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new AllEncompassingFormHttpMessageConverter ( ) ) ; if ( boolean ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new AtomFeedHttpMessageConverter ( ) ) ; this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new RssChannelHttpMessageConverter ( ) ) ; } if ( boolean ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new MappingJackson2XmlHttpMessageConverter ( ) ) ; } else if ( boolean ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new Jaxb2RootElementHttpMessageConverter ( ) ) ; } if ( boolean ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; } else if ( boolean ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new GsonHttpMessageConverter ( ) ) ; } else if ( boolean ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new JsonbHttpMessageConverter ( ) ) ; } if ( boolean ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new MappingJackson2SmileHttpMessageConverter ( ) ) ; } if ( boolean ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . add ( new MappingJackson2CborHttpMessageConverter ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( ClientHttpRequestFactory org.springframework.web.client.ClientHttpRequestFactory ) { this(); setRequestFactory ( org.springframework.web.client.ClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) { Assert . notEmpty ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> , STRING ) ; this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . addAll ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) { Assert . notEmpty ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> , STRING ) ; if ( this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> != java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) { this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . clear ( ) ; this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> . addAll ( java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) { return this . java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> public void void ( ResponseErrorHandler org.springframework.web.client.ResponseErrorHandler ) { Assert . notNull ( org.springframework.web.client.ResponseErrorHandler , STRING ) ; this . org.springframework.web.client.ResponseErrorHandler = org.springframework.web.client.ResponseErrorHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.client.ResponseErrorHandler org.springframework.web.client.ResponseErrorHandler ( ) { return this . org.springframework.web.client.ResponseErrorHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( this . org.springframework.web.client.UriTemplateHandler instanceof DefaultUriBuilderFactory ) { ( ( DefaultUriBuilderFactory ) this . org.springframework.web.client.UriTemplateHandler ) . setDefaultUriVariables ( java.util.Map<java.lang.String,> ) ; } else if ( this . org.springframework.web.client.UriTemplateHandler instanceof org . springframework . web . org.springframework.web.util . org.springframework.web.util ) { ( ( org . springframework . web . org.springframework.web.util . org.springframework.web.util ) this . org.springframework.web.client.UriTemplateHandler ) . setDefaultUriVariables ( java.util.Map<java.lang.String,> ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( UriTemplateHandler org.springframework.web.client.UriTemplateHandler ) { Assert . notNull ( org.springframework.web.client.UriTemplateHandler , STRING ) ; this . org.springframework.web.client.UriTemplateHandler = org.springframework.web.client.UriTemplateHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.client.UriTemplateHandler org.springframework.web.client.UriTemplateHandler ( ) { return this . org.springframework.web.client.UriTemplateHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) , logger ) ; return java.lang.Object ( java.lang.String , HttpMethod . GET , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) , logger ) ; return java.lang.Object ( java.lang.String , HttpMethod . GET , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.net.URI java.net.URI , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) , logger ) ; return java.lang.Object ( java.net.URI , HttpMethod . GET , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.lang.String , HttpMethod . GET , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> )			throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.lang.String , HttpMethod . GET , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.net.URI java.net.URI , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.net.URI , HttpMethod . GET , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.HttpHeaders org.springframework.web.client.HttpHeaders ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { return java.lang.Object ( java.lang.String , HttpMethod . HEAD , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.HttpHeaders org.springframework.web.client.HttpHeaders ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { return java.lang.Object ( java.lang.String , HttpMethod . HEAD , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.HttpHeaders org.springframework.web.client.HttpHeaders ( java.net.URI java.net.URI ) throws org.springframework.web.client.RestClientException { return java.lang.Object ( java.net.URI , HttpMethod . HEAD , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object ) ; HttpHeaders org.springframework.web.client.HttpHeaders = java.lang.Object ( java.lang.String , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) , java.lang.Object[] ) ; return org.springframework.web.client.HttpHeaders . getLocation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object ) ; HttpHeaders org.springframework.web.client.HttpHeaders = java.lang.Object ( java.lang.String , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) , java.util.Map<java.lang.String,> ) ; return org.springframework.web.client.HttpHeaders . getLocation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( java.net.URI java.net.URI , java.lang.Object java.lang.Object ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object ) ; HttpHeaders org.springframework.web.client.HttpHeaders = java.lang.Object ( java.net.URI , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ) ; return org.springframework.web.client.HttpHeaders . getLocation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) , logger ) ; return java.lang.Object ( java.lang.String , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> )			throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) , logger ) ; return java.lang.Object ( java.lang.String , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.net.URI java.net.URI , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) ) ; return java.lang.Object ( java.net.URI , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] )			throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.lang.String , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> )			throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.lang.String , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.net.URI java.net.URI , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.net.URI , HttpMethod . POST , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object ) ; java.lang.Object ( java.lang.String , HttpMethod . PUT , org.springframework.web.client.RequestCallback , null , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object ) ; java.lang.Object ( java.lang.String , HttpMethod . PUT , org.springframework.web.client.RequestCallback , null , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.URI java.net.URI , java.lang.Object java.lang.Object ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object ) ; java.lang.Object ( java.net.URI , HttpMethod . PUT , org.springframework.web.client.RequestCallback , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) , logger ) ; return java.lang.Object ( java.lang.String , HttpMethod . PATCH , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) , logger ) ; return java.lang.Object ( java.lang.String , HttpMethod . PATCH , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.net.URI java.net.URI , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> )			throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( java.lang.Object , java.lang.Class<T> ) ; HttpMessageConverterExtractor < T > org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.Class<T> , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) ) ; return java.lang.Object ( java.net.URI , HttpMethod . PATCH , org.springframework.web.client.RequestCallback , org.springframework.web.client.HttpMessageConverterExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { java.lang.Object ( java.lang.String , HttpMethod . DELETE , null , null , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { java.lang.Object ( java.lang.String , HttpMethod . DELETE , null , null , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.URI java.net.URI ) throws org.springframework.web.client.RestClientException { java.lang.Object ( java.net.URI , HttpMethod . DELETE , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; HttpHeaders org.springframework.web.client.HttpHeaders = java.lang.Object ( java.lang.String , HttpMethod . OPTIONS , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> , java.lang.Object[] ) ; return org.springframework.web.client.HttpHeaders . getAllow ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; HttpHeaders org.springframework.web.client.HttpHeaders = java.lang.Object ( java.lang.String , HttpMethod . OPTIONS , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> , java.util.Map<java.lang.String,> ) ; return org.springframework.web.client.HttpHeaders . getAllow ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> ( java.net.URI java.net.URI ) throws org.springframework.web.client.RestClientException { ResponseExtractor < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) ; HttpHeaders org.springframework.web.client.HttpHeaders = java.lang.Object ( java.net.URI , HttpMethod . OPTIONS , null , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ) ; return org.springframework.web.client.HttpHeaders . getAllow ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.lang.String , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.lang.String , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.web.client.RestClientException { RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , ParameterizedTypeReference < T > org.springframework.web.client.ParameterizedTypeReference<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.client.ParameterizedTypeReference<T> . getType ( ) ; RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.reflect.Type ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.reflect.Type ) ; return java.lang.Object ( java.lang.String , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , ParameterizedTypeReference < T > org.springframework.web.client.ParameterizedTypeReference<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.client.ParameterizedTypeReference<T> . getType ( ) ; RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.reflect.Type ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.reflect.Type ) ; return java.lang.Object ( java.lang.String , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , HttpEntity < ? > org.springframework.web.client.HttpEntity<?> , ParameterizedTypeReference < T > org.springframework.web.client.ParameterizedTypeReference<T> ) throws org.springframework.web.client.RestClientException { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.client.ParameterizedTypeReference<T> . getType ( ) ; RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( org.springframework.web.client.HttpEntity<> , java.lang.reflect.Type ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.reflect.Type ) ; return java.lang.Object ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( RequestEntity < ? > org.springframework.web.client.RequestEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> )			throws org.springframework.web.client.RestClientException { Assert . notNull ( org.springframework.web.client.RequestEntity<> , STRING ) ; RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( org.springframework.web.client.RequestEntity<> , java.lang.Class<T> ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.Class<T> ) ; return java.lang.Object ( org.springframework.web.client.RequestEntity<> . getUrl ( ) , org.springframework.web.client.RequestEntity<> . getMethod ( ) , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( RequestEntity < ? > org.springframework.web.client.RequestEntity<?> , ParameterizedTypeReference < T > org.springframework.web.client.ParameterizedTypeReference<T> )			throws org.springframework.web.client.RestClientException { Assert . notNull ( org.springframework.web.client.RequestEntity<> , STRING ) ; java.lang.reflect.Type java.lang.reflect.Type = org.springframework.web.client.ParameterizedTypeReference<T> . getType ( ) ; RequestCallback org.springframework.web.client.RequestCallback = org.springframework.web.client.RequestCallback ( org.springframework.web.client.RequestEntity<> , java.lang.reflect.Type ) ; ResponseExtractor < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> = org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<java.lang.Object>> ( java.lang.reflect.Type ) ; return java.lang.Object ( org.springframework.web.client.RequestEntity<> . getUrl ( ) , org.springframework.web.client.RequestEntity<> . getMethod ( ) , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , RequestCallback org.springframework.web.client.RequestCallback , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.web.client.RestClientException { java.net.URI java.net.URI = org.springframework.web.client.UriTemplateHandler ( ) . expand ( java.lang.String , java.lang.Object[] ) ; return java.lang.Object ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , HttpMethod org.springframework.web.client.HttpMethod , RequestCallback org.springframework.web.client.RequestCallback , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) throws org.springframework.web.client.RestClientException { java.net.URI java.net.URI = org.springframework.web.client.UriTemplateHandler ( ) . expand ( java.lang.String , java.util.Map<java.lang.String,> ) ; return java.lang.Object ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , RequestCallback org.springframework.web.client.RequestCallback , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> ) throws org.springframework.web.client.RestClientException { return java.lang.Object ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.RequestCallback , org.springframework.web.client.ResponseExtractor<T> ) ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , RequestCallback org.springframework.web.client.RequestCallback , ResponseExtractor < T > org.springframework.web.client.ResponseExtractor<T> ) throws org.springframework.web.client.RestClientException { Assert . notNull ( java.net.URI , STRING ) ; Assert . notNull ( org.springframework.web.client.HttpMethod , STRING ) ; ClientHttpResponse org.springframework.web.client.ClientHttpResponse = null ; try { ClientHttpRequest org.springframework.web.client.ClientHttpRequest = createRequest ( java.net.URI , org.springframework.web.client.HttpMethod ) ; if ( org.springframework.web.client.RequestCallback != null ) { org.springframework.web.client.RequestCallback . doWithRequest ( org.springframework.web.client.ClientHttpRequest ) ; } org.springframework.web.client.ClientHttpResponse = org.springframework.web.client.ClientHttpRequest . execute ( ) ; void ( java.net.URI , org.springframework.web.client.HttpMethod , org.springframework.web.client.ClientHttpResponse ) ; if ( org.springframework.web.client.ResponseExtractor<T> != null ) { return org.springframework.web.client.ResponseExtractor<T> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; } else { return null ; } } catch ( java.io.IOException java.io.IOException ) { java.lang.String java.lang.String = java.net.URI . java.lang.String ( ) ; java.lang.String java.lang.String = java.net.URI . java.lang.String ( ) ; java.lang.String = ( java.lang.String != null ? java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( java.lang.String ) - NUMBER ) : java.lang.String ) ; throw new ResourceAccessException ( STRING + org.springframework.web.client.HttpMethod . name ( ) + STRING + java.lang.String + STRING + java.io.IOException . java.lang.String ( ) , java.io.IOException ) ; } finally { if ( org.springframework.web.client.ClientHttpResponse != null ) { org.springframework.web.client.ClientHttpResponse . close ( ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.net.URI java.net.URI , HttpMethod org.springframework.web.client.HttpMethod , ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { ResponseErrorHandler org.springframework.web.client.ResponseErrorHandler = org.springframework.web.client.ResponseErrorHandler ( ) ; boolean boolean = org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ; if ( logger . isDebugEnabled ( ) ) { try { logger . debug ( org.springframework.web.client.HttpMethod . name ( ) + STRING + java.net.URI + STRING + org.springframework.web.client.ClientHttpResponse . getRawStatusCode ( ) + STRING + org.springframework.web.client.ClientHttpResponse . getStatusText ( ) + STRING + ( boolean ? STRING : STRING ) ) ; } catch ( java.io.IOException java.io.IOException ) { } } if ( boolean ) { org.springframework.web.client.ResponseErrorHandler . handleError ( org.springframework.web.client.ClientHttpResponse ) ; } }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.RequestCallback org.springframework.web.client.RequestCallback ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.web.client.RestTemplate.AcceptHeaderRequestCallback ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.RequestCallback org.springframework.web.client.RequestCallback ( java.lang.Object java.lang.Object ) { return new org.springframework.web.client.RestTemplate.HttpEntityRequestCallback ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.RequestCallback org.springframework.web.client.RequestCallback ( java.lang.Object java.lang.Object , java.lang.reflect.Type java.lang.reflect.Type ) { return new org.springframework.web.client.RestTemplate.HttpEntityRequestCallback ( java.lang.Object , java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.ResponseEntity<T>> ( java.lang.reflect.Type java.lang.reflect.Type ) { return new org.springframework.web.client.RestTemplate.ResponseEntityResponseExtractor <> ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> < HttpHeaders > org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ( ) { return this . org.springframework.web.client.ResponseExtractor<org.springframework.web.client.HttpHeaders> ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.reflect.Type java.lang.reflect.Type ) { this . java.lang.reflect.Type = java.lang.reflect.Type ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ClientHttpRequest org.springframework.web.client.ClientHttpRequest ) throws java.io.IOException { if ( this . java.lang.reflect.Type != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( this . java.lang.reflect.Type instanceof java.lang.Class ) { java.lang.Class<?> = ( java.lang.Class<?> < ? > ) this . java.lang.reflect.Type ; } java.util.List<org.springframework.web.client.MediaType> < MediaType > java.util.List<org.springframework.web.client.MediaType> = new java.util.ArrayList<org.springframework.web.client.MediaType> <> ( ) ; for ( HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> : java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) ) { if ( java.lang.Class<> != null ) { if ( org.springframework.web.client.HttpMessageConverter<> . canRead ( java.lang.Class<> , null ) ) { java.util.List<org.springframework.web.client.MediaType> . addAll ( java.util.List<org.springframework.web.client.MediaType> ( org.springframework.web.client.HttpMessageConverter<> ) ) ; } } else if ( org.springframework.web.client.HttpMessageConverter<> instanceof GenericHttpMessageConverter ) { GenericHttpMessageConverter < ? > org.springframework.web.client.GenericHttpMessageConverter<?> = ( GenericHttpMessageConverter < ? > ) org.springframework.web.client.HttpMessageConverter<> ; if ( org.springframework.web.client.GenericHttpMessageConverter<> . canRead ( this . java.lang.reflect.Type , null , null ) ) { java.util.List<org.springframework.web.client.MediaType> . addAll ( java.util.List<org.springframework.web.client.MediaType> ( org.springframework.web.client.HttpMessageConverter<> ) ) ; } } } if ( ! java.util.List<org.springframework.web.client.MediaType> . isEmpty ( ) ) { MediaType . sortBySpecificity ( java.util.List<org.springframework.web.client.MediaType> ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.util.List<org.springframework.web.client.MediaType> ) ; } org.springframework.web.client.ClientHttpRequest . getHeaders ( ) . setAccept ( java.util.List<org.springframework.web.client.MediaType> ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.client.MediaType> < MediaType > java.util.List<org.springframework.web.client.MediaType> ( HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> ) { java.util.List<org.springframework.web.client.MediaType> < MediaType > java.util.List<org.springframework.web.client.MediaType> = org.springframework.web.client.HttpMessageConverter<> . getSupportedMediaTypes ( ) ; java.util.List<org.springframework.web.client.MediaType> < MediaType > java.util.List<org.springframework.web.client.MediaType> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.client.MediaType> . size ( ) ) ; for ( MediaType org.springframework.web.client.MediaType : java.util.List<org.springframework.web.client.MediaType> ) { if ( org.springframework.web.client.MediaType . getCharset ( ) != null ) { org.springframework.web.client.MediaType = new MediaType ( org.springframework.web.client.MediaType . getType ( ) , org.springframework.web.client.MediaType . getSubtype ( ) ) ; } java.util.List<org.springframework.web.client.MediaType> . add ( org.springframework.web.client.MediaType ) ; } return java.util.List<org.springframework.web.client.MediaType> ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { this( java.lang.Object , null ); }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.lang.reflect.Type java.lang.reflect.Type ) { super( java.lang.reflect.Type ); if ( java.lang.Object instanceof HttpEntity ) { this . org.springframework.web.client.HttpEntity<?> = ( HttpEntity < ? > ) java.lang.Object ; } else if ( java.lang.Object != null ) { this . org.springframework.web.client.HttpEntity<?> = new HttpEntity <> ( java.lang.Object ) ; } else { this . org.springframework.web.client.HttpEntity<?> = HttpEntity . EMPTY ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( ClientHttpRequest org.springframework.web.client.ClientHttpRequest ) throws java.io.IOException { super. void ( org.springframework.web.client.ClientHttpRequest ) ; if ( ! this . org.springframework.web.client.HttpEntity<> . hasBody ( ) ) { HttpHeaders org.springframework.web.client.HttpHeaders = org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ; HttpHeaders org.springframework.web.client.HttpHeaders = this . org.springframework.web.client.HttpEntity<> . getHeaders ( ) ; if ( ! org.springframework.web.client.HttpHeaders . isEmpty ( ) ) { org.springframework.web.client.HttpHeaders . putAll ( org.springframework.web.client.HttpHeaders ) ; } if ( org.springframework.web.client.HttpHeaders . getContentLength ( ) < NUMBER ) { org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; } } else { java.lang.Object java.lang.Object = this . org.springframework.web.client.HttpEntity<> . getBody ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; java.lang.reflect.Type java.lang.reflect.Type = ( this . org.springframework.web.client.HttpEntity<> instanceof RequestEntity ? ( ( RequestEntity < ? > ) this . org.springframework.web.client.HttpEntity<> ) . getType ( ) : java.lang.Class<> ) ; HttpHeaders org.springframework.web.client.HttpHeaders = this . org.springframework.web.client.HttpEntity<> . getHeaders ( ) ; MediaType org.springframework.web.client.MediaType = org.springframework.web.client.HttpHeaders . getContentType ( ) ; for ( HttpMessageConverter < ? > org.springframework.web.client.HttpMessageConverter<?> : java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) ) { if ( org.springframework.web.client.HttpMessageConverter<> instanceof GenericHttpMessageConverter ) { GenericHttpMessageConverter < java.lang.Object > org.springframework.web.client.GenericHttpMessageConverter<java.lang.Object> = ( GenericHttpMessageConverter < java.lang.Object > ) org.springframework.web.client.HttpMessageConverter<> ; if ( org.springframework.web.client.GenericHttpMessageConverter<java.lang.Object> . canWrite ( java.lang.reflect.Type , java.lang.Class<> , org.springframework.web.client.MediaType ) ) { if ( ! org.springframework.web.client.HttpHeaders . isEmpty ( ) ) { org.springframework.web.client.ClientHttpRequest . getHeaders ( ) . putAll ( org.springframework.web.client.HttpHeaders ) ; } if ( logger . isDebugEnabled ( ) ) { if ( org.springframework.web.client.MediaType != null ) { logger . debug ( STRING + java.lang.Object + STRING + org.springframework.web.client.MediaType + STRING + org.springframework.web.client.HttpMessageConverter<> + STRING ) ; } else { logger . debug ( STRING + java.lang.Object + STRING + org.springframework.web.client.HttpMessageConverter<> + STRING ) ; } } org.springframework.web.client.GenericHttpMessageConverter<java.lang.Object> . write ( java.lang.Object , java.lang.reflect.Type , org.springframework.web.client.MediaType , org.springframework.web.client.ClientHttpRequest ) ; return; } } else if ( org.springframework.web.client.HttpMessageConverter<> . canWrite ( java.lang.Class<> , org.springframework.web.client.MediaType ) ) { if ( ! org.springframework.web.client.HttpHeaders . isEmpty ( ) ) { org.springframework.web.client.ClientHttpRequest . getHeaders ( ) . putAll ( org.springframework.web.client.HttpHeaders ) ; } if ( logger . isDebugEnabled ( ) ) { if ( org.springframework.web.client.MediaType != null ) { logger . debug ( STRING + java.lang.Object + STRING + org.springframework.web.client.MediaType + STRING + org.springframework.web.client.HttpMessageConverter<> + STRING ) ; } else { logger . debug ( STRING + java.lang.Object + STRING + org.springframework.web.client.HttpMessageConverter<> + STRING ) ; } } ( ( HttpMessageConverter < java.lang.Object > ) org.springframework.web.client.HttpMessageConverter<> ) . write ( java.lang.Object , org.springframework.web.client.MediaType , org.springframework.web.client.ClientHttpRequest ) ; return; } } java.lang.String java.lang.String = STRING + java.lang.Class<> . java.lang.String ( ) + STRING ; if ( org.springframework.web.client.MediaType != null ) { java.lang.String += STRING + org.springframework.web.client.MediaType + STRING ; } throw new RestClientException ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Type java.lang.reflect.Type ) { if ( java.lang.reflect.Type != null && java.lang.Void .class != java.lang.reflect.Type ) { this . org.springframework.web.client.HttpMessageConverterExtractor<T> = new HttpMessageConverterExtractor <> ( java.lang.reflect.Type , java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( ) , logger ) ; } else { this . org.springframework.web.client.HttpMessageConverterExtractor<T> = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.ResponseEntity<T> < T > org.springframework.web.client.ResponseEntity<T> ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { if ( this . org.springframework.web.client.HttpMessageConverterExtractor<T> != null ) { T T = this . org.springframework.web.client.HttpMessageConverterExtractor<T> . extractData ( org.springframework.web.client.ClientHttpResponse ) ; return new ResponseEntity <> ( T , org.springframework.web.client.ClientHttpResponse . getHeaders ( ) , org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) ; } else { return new ResponseEntity <> ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) , org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.client.HttpHeaders org.springframework.web.client.HttpHeaders ( ClientHttpResponse org.springframework.web.client.ClientHttpResponse ) throws java.io.IOException { return org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ; }  <METHOD_END>
