<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , new ExponentialMovingAverage ( int , NUMBER ) , new ExponentialMovingAverageRate ( long , long , int , true ) , new ExponentialMovingAverageRatio ( long , int , true ) , new ExponentialMovingAverageRate ( long , long , int , true ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , ExponentialMovingAverage org.springframework.integration.support.management.ExponentialMovingAverage , ExponentialMovingAverageRate org.springframework.integration.support.management.ExponentialMovingAverageRate , ExponentialMovingAverageRatio org.springframework.integration.support.management.ExponentialMovingAverageRatio , ExponentialMovingAverageRate org.springframework.integration.support.management.ExponentialMovingAverageRate ) { super( java.lang.String ); this . org.springframework.integration.support.management.ExponentialMovingAverage = org.springframework.integration.support.management.ExponentialMovingAverage ; this . org.springframework.integration.support.management.ExponentialMovingAverageRate = org.springframework.integration.support.management.ExponentialMovingAverageRate ; this . org.springframework.integration.support.management.ExponentialMovingAverageRatio = org.springframework.integration.support.management.ExponentialMovingAverageRatio ; this . org.springframework.integration.support.management.ExponentialMovingAverageRate = org.springframework.integration.support.management.ExponentialMovingAverageRate ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( this . org.springframework.integration.support.management.ExponentialMovingAverage ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.management.MetricsContext org.springframework.integration.support.management.MetricsContext ( ) { long long = NUMBER ; if ( isFullStatsEnabled ( ) ) { long = java.lang.System . long ( ) ; this . org.springframework.integration.support.management.ExponentialMovingAverageRate . increment ( long ) ; } this . java.util.concurrent.atomic.AtomicLong . long ( ) ; return new org.springframework.integration.support.management.DefaultMessageChannelMetrics.DefaultChannelMetricsContext ( long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MetricsContext org.springframework.integration.support.management.MetricsContext , boolean boolean ) { if ( boolean && isFullStatsEnabled ( ) ) { long long = java.lang.System . long ( ) ; this . org.springframework.integration.support.management.ExponentialMovingAverageRatio . success ( long ) ; this . org.springframework.integration.support.management.ExponentialMovingAverage . append ( long - ( ( org.springframework.integration.support.management.DefaultMessageChannelMetrics.DefaultChannelMetricsContext ) org.springframework.integration.support.management.MetricsContext ) . long ) ; } else { if ( isFullStatsEnabled ( ) ) { long long = java.lang.System . long ( ) ; this . org.springframework.integration.support.management.ExponentialMovingAverageRatio . failure ( long ) ; this . org.springframework.integration.support.management.ExponentialMovingAverageRate . increment ( long ) ; } this . java.util.concurrent.atomic.AtomicLong . long ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { this . org.springframework.integration.support.management.ExponentialMovingAverage . reset ( ) ; this . org.springframework.integration.support.management.ExponentialMovingAverageRate . reset ( ) ; this . org.springframework.integration.support.management.ExponentialMovingAverageRatio . reset ( ) ; this . org.springframework.integration.support.management.ExponentialMovingAverageRate . reset ( ) ; this . java.util.concurrent.atomic.AtomicLong . void ( NUMBER ) ; this . java.util.concurrent.atomic.AtomicLong . void ( NUMBER ) ; this . java.util.concurrent.atomic.AtomicLong . void ( NUMBER ) ; this . java.util.concurrent.atomic.AtomicLong . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( int ) this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( int ) this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverageRate . getTimeSinceLastMeasurement ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverageRate . getMean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverageRate . getMean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return NUMBER - this . org.springframework.integration.support.management.ExponentialMovingAverageRatio . getMean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverage . getMean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverage . getMin ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverage . getMax ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public double double ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverage . getStandardDeviation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.management.Statistics org.springframework.integration.support.management.Statistics ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverage . getStatistics ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.management.Statistics org.springframework.integration.support.management.Statistics ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverageRate . getStatistics ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.management.Statistics org.springframework.integration.support.management.Statistics ( ) { return this . org.springframework.integration.support.management.ExponentialMovingAverageRate . getStatistics ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( int ) this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( int ) this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING + ( this . java.util.concurrent.atomic.AtomicLong . long ( ) == NUMBER ? STRING : this . java.util.concurrent.atomic.AtomicLong . long ( ) ) + STRING , name , this . java.util.concurrent.atomic.AtomicLong . long ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( long long ) { this . long = long ; }  <METHOD_END>
