<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( java.lang.String ) . build ( ) ; Assert . hasText ( org.springframework.web.util.UriComponents . getScheme ( ) , STRING ) ; Assert . hasText ( org.springframework.web.util.UriComponents . getHost ( ) , STRING ) ; Assert . isNull ( org.springframework.web.util.UriComponents . getQuery ( ) , STRING ) ; Assert . isNull ( org.springframework.web.util.UriComponents . getFragment ( ) , STRING ) ; } this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( ) ; if ( java.util.Map<java.lang.String,> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( ! java.util.Map<java.lang.String,?> ( ) . boolean ( ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,?> ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,> ) ; java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,java.lang.Object> ; } java.net.URI java.net.URI = java.net.URI ( java.lang.String , java.util.Map<java.lang.String,> ) ; return java.net.URI ( java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.net.URI java.net.URI = java.net.URI ( java.lang.String , java.lang.Object[] ) ; return java.net.URI ( java.net.URI ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.net.URI java.net.URI ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> );  <METHOD_END>
<METHOD_START> protected abstract java.net.URI java.net.URI ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] );  <METHOD_END>
<METHOD_START> private java.net.URI java.net.URI ( java.net.URI java.net.URI ) { try { java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String != null && java.net.URI . java.lang.String ( ) == null ) { java.net.URI = new java.net.URI ( java.lang.String + java.net.URI . java.lang.String ( ) ) ; } return java.net.URI ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalArgumentException ( STRING + java.net.URI , java.net.URISyntaxException ) ; } }  <METHOD_END>
