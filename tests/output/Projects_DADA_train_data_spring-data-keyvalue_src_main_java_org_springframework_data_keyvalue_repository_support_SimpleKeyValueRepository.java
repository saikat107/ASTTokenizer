<METHOD_START> public void ( EntityInformation < T , ID > org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> , KeyValueOperations org.springframework.data.keyvalue.repository.support.KeyValueOperations ) { Assert . notNull ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> , STRING ) ; Assert . notNull ( org.springframework.data.keyvalue.repository.support.KeyValueOperations , STRING ) ; this . org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> = org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> ; this . org.springframework.data.keyvalue.repository.support.KeyValueOperations = org.springframework.data.keyvalue.repository.support.KeyValueOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( Sort org.springframework.data.keyvalue.repository.support.Sort ) { return org.springframework.data.keyvalue.repository.support.KeyValueOperations . findAll ( org.springframework.data.keyvalue.repository.support.Sort , org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.keyvalue.repository.support.Page<T> < T > org.springframework.data.keyvalue.repository.support.Page<T> ( Pageable org.springframework.data.keyvalue.repository.support.Pageable ) { if ( org.springframework.data.keyvalue.repository.support.Pageable == null ) { java.util.List<T> < T > java.util.List<T> = java.util.List<T> ( ) ; return new PageImpl < T > ( java.util.List<T> , Pageable . unpaged ( ) , java.util.List<T> . int ( ) ) ; } java.lang.Iterable<T> < T > java.lang.Iterable<T> = org.springframework.data.keyvalue.repository.support.KeyValueOperations . findInRange ( org.springframework.data.keyvalue.repository.support.Pageable . getOffset ( ) , org.springframework.data.keyvalue.repository.support.Pageable . getPageSize ( ) , org.springframework.data.keyvalue.repository.support.Pageable . getSort ( ) , org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ; return new PageImpl < T > ( IterableConverter . toList ( java.lang.Iterable<T> ) , org.springframework.data.keyvalue.repository.support.Pageable , this . org.springframework.data.keyvalue.repository.support.KeyValueOperations . count ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > S S ( S S ) { Assert . notNull ( S , STRING ) ; if ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . isNew ( S ) ) { org.springframework.data.keyvalue.repository.support.KeyValueOperations . insert ( S ) ; } else { org.springframework.data.keyvalue.repository.support.KeyValueOperations . update ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getId ( S ) . get ( ) , S ) ; } return S ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.lang.Iterable<S> < S > java.lang.Iterable<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { for ( S S : java.lang.Iterable<S> ) { S ( S ) ; } return java.lang.Iterable<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<T> < T > java.util.Optional<T> ( ID ID ) { return org.springframework.data.keyvalue.repository.support.KeyValueOperations . findById ( ID , org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ID ID ) { return java.util.Optional<T> ( ID ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( ) { return IterableConverter . toList ( org.springframework.data.keyvalue.repository.support.KeyValueOperations . findAll ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; for ( ID ID : java.lang.Iterable<ID> ) { java.util.Optional<T> < T > java.util.Optional<T> = java.util.Optional<T> ( ID ) ; if ( java.util.Optional<T> . boolean ( ) ) { java.util.List<T> . boolean ( java.util.Optional<T> . T ( ) ) ; } } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return org.springframework.data.keyvalue.repository.support.KeyValueOperations . count ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ID ID ) { org.springframework.data.keyvalue.repository.support.KeyValueOperations . delete ( ID , org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( T T ) { void ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getId ( T ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Iterable<? extends T> < ? extends T > java.lang.Iterable<? extends T> ) { for ( T T : java.lang.Iterable<> ) { void ( T ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.data.keyvalue.repository.support.KeyValueOperations . delete ( org.springframework.data.keyvalue.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
