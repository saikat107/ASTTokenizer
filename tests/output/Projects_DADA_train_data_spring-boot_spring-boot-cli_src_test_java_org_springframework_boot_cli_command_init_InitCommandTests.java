<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { InitializrService org.springframework.boot.cli.command.init.InitializrService = new InitializrService ( this . http ) ; this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler = new org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler ( org.springframework.boot.cli.command.init.InitializrService ) ; this . org.springframework.boot.cli.command.init.InitCommand = new InitCommand ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mockSuccessfulMetadataTextGet ( ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mockSuccessfulMetadataGet ( true ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mockSuccessfulMetadataGetV2 ( true ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) + STRING ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isFalse ( ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , java.lang.String ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; try { assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( ) ) . isEqualTo ( ExitStatus . OK ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; } finally { assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , null ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( ) ) . isEqualTo ( ExitStatus . ERROR ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.cli.command.init.TemporaryFolder . newFolder ( ) ; byte [] byte[] = byte[] ( STRING , STRING ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , STRING , byte[] ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , java.io.File . java.lang.String ( ) ) ) . isEqualTo ( ExitStatus . OK ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; assertThat ( java.io.File ) . exists ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.cli.command.init.TemporaryFolder . newFolder ( ) ; byte [] byte[] = byte[] ( STRING , STRING ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , STRING , byte[] ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( java.io.File . java.lang.String ( ) + STRING ) ) . isEqualTo ( ExitStatus . OK ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; assertThat ( java.io.File ) . exists ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; assertThat ( java.lang.String . boolean ( STRING ) ) . as ( STRING ) . isFalse ( ) ; byte [] byte[] = byte[] ( STRING , STRING ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , STRING , byte[] ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; try { assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( java.lang.String ) ) . isEqualTo ( ExitStatus . OK ) ; assertThat ( java.io.File ) . exists ( ) ; } finally { java.io.File . boolean ( ) ; java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; java.lang.String java.lang.String = STRING ; byte [] byte[] = java.lang.String . byte[] ( ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , STRING , byte[] ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; try { assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( java.lang.String ) ) . isEqualTo ( ExitStatus . OK ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; } finally { java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.cli.command.init.TemporaryFolder . newFolder ( ) ; java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) + STRING ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isFalse ( ) ; try { byte [] byte[] = byte[] ( STRING , STRING ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , java.lang.String , byte[] ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , java.io.File . java.lang.String ( ) ) ) . isEqualTo ( ExitStatus . OK ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; } finally { assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.cli.command.init.TemporaryFolder . newFolder ( ) ; java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) + STRING ; java.io.File java.io.File = new java.io.File ( java.lang.String ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isFalse ( ) ; try { byte [] byte[] = byte[] ( STRING , STRING ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( null , java.lang.String , byte[] ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , java.io.File . java.lang.String ( ) ) ) . isEqualTo ( ExitStatus . OK ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; } finally { assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.cli.command.init.TemporaryFolder . newFile ( ) ; long long = java.io.File . long ( ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , java.io.File . java.lang.String ( ) ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( ) ) . as ( STRING ) . isEqualTo ( ExitStatus . ERROR ) ; assertThat ( java.io.File . long ( ) ) . as ( STRING ) . isEqualTo ( long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.cli.command.init.TemporaryFolder . newFile ( ) ; long long = java.io.File . long ( ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , java.io.File . java.lang.String ( ) ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING ) ) . isEqualTo ( ExitStatus . OK ) ; assertThat ( long != java.io.File . long ( ) ) . as ( STRING ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.cli.command.init.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; long long = java.io.File . long ( ) ; byte [] byte[] = byte[] ( STRING , STRING ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , STRING , byte[] ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , java.io.File . java.lang.String ( ) ) ) . isEqualTo ( ExitStatus . ERROR ) ; assertThat ( java.io.File . long ( ) ) . as ( STRING ) . isEqualTo ( long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . void ( ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getGroupId ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getArtifactId ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getVersion ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getDescription ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getPackageName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getType ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getBuild ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getFormat ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getPackaging ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getJavaVersion ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getLanguage ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getBootVersion ( ) ) . isEqualTo ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getDependencies ( ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; assertThat ( java.util.List<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.cli.command.init.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; assertThat ( java.io.File . boolean ( ) ) . as ( STRING ) . isTrue ( ) ; long long = java.io.File . long ( ) ; byte [] byte[] = byte[] ( STRING , STRING ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , STRING , byte[] ) ; mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , STRING , java.io.File . java.lang.String ( ) ) ) . isEqualTo ( ExitStatus . OK ) ; assertThat ( long != java.io.File . long ( ) ) . as ( STRING ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . void ( ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getBuild ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getFormat ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . isDetectType ( ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . void ( ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getBuild ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getFormat ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . isDetectType ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getType ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . void ( ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getBuild ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getFormat ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . isDetectType ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getType ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . void ( ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getOutput ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . void ( ) ; this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . getOutput ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . org.springframework.boot.cli.command.init.ProjectGenerationRequest . isExtract ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.init.InitCommandTests.TestableInitCommandOptionHandler . void ( ) ; assertThat ( this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , STRING ) ) . isEqualTo ( ExitStatus . ERROR ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.init.InitCommand . run ( STRING , STRING ) ; verify ( this . http ) . execute ( this . org.springframework.boot.cli.command.init.ArgumentCaptor<org.springframework.boot.cli.command.init.HttpUriRequest> . capture ( ) ) ; Header org.springframework.boot.cli.command.init.Header = this . org.springframework.boot.cli.command.init.ArgumentCaptor<org.springframework.boot.cli.command.init.HttpUriRequest> . getValue ( ) . getHeaders ( STRING ) [ NUMBER ] ; assertThat ( org.springframework.boot.cli.command.init.Header . getValue ( ) ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( java.lang.String java.lang.String , java.lang.String java.lang.String )			throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream = new java.util.zip.ZipOutputStream ( java.io.ByteArrayOutputStream ) ; try { java.util.zip.ZipEntry java.util.zip.ZipEntry = new java.util.zip.ZipEntry ( java.lang.String ) ; java.util.zip.ZipOutputStream . void ( java.util.zip.ZipEntry ) ; java.util.zip.ZipOutputStream . void ( java.lang.String . byte[] ( ) ) ; java.util.zip.ZipOutputStream . void ( ) ; } finally { java.io.ByteArrayOutputStream . void ( ) ; } return java.io.ByteArrayOutputStream . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> void ( InitializrService org.springframework.boot.cli.command.init.InitializrService ) { super( org.springframework.boot.cli.command.init.InitializrService ); }  <METHOD_END>
<METHOD_START> void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( OptionSet org.springframework.boot.cli.command.init.OptionSet ) throws java.io.IOException { this . org.springframework.boot.cli.command.init.ProjectGenerationRequest = createProjectGenerationRequest ( org.springframework.boot.cli.command.init.OptionSet ) ; if ( ! this . boolean ) { super. generateProject ( org.springframework.boot.cli.command.init.OptionSet ) ; } }  <METHOD_END>
