<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.neo4j.web.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.data.neo4j.web.WebApplicationContext ) . build ( ) ; org.springframework.data.neo4j.web.User = new User ( STRING ) ; org.springframework.data.neo4j.web.User = new User ( STRING ) ; org.springframework.data.neo4j.web.User = new User ( STRING ) ; org.springframework.data.neo4j.web.User = new User ( STRING ) ; org.springframework.data.neo4j.web.User . befriend ( org.springframework.data.neo4j.web.User ) ; org.springframework.data.neo4j.web.User . befriend ( org.springframework.data.neo4j.web.User ) ; org.springframework.data.neo4j.web.User . befriend ( org.springframework.data.neo4j.web.User ) ; org.springframework.data.neo4j.web.UserRepository . save ( org.springframework.data.neo4j.web.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.data.neo4j.web.MockHttpSession = new MockHttpSession ( ) ; org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) . session ( org.springframework.data.neo4j.web.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) . session ( org.springframework.data.neo4j.web.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) . session ( org.springframework.data.neo4j.web.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) . session ( org.springframework.data.neo4j.web.MockHttpSession ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { final int int = int ; java.util.concurrent.ExecutorService . java.util.concurrent.Future<?> ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { if ( int % NUMBER == NUMBER ) { try { org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } else { try { org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } } } ) ; } java.util.concurrent.ExecutorService . void ( ) ; java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( int % NUMBER == NUMBER ) { try { org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } else { try { org.springframework.data.neo4j.web.MockMvc . perform ( get ( STRING , org.springframework.data.neo4j.web.User . getUuid ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( MockMvcResultMatchers . content ( ) . string ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } }  <METHOD_END>
