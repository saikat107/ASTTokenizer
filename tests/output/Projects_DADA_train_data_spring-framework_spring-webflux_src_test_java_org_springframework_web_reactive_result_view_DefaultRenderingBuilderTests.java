<METHOD_START> @ Test public void void ( ) { Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . view ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.reactive.result.view.Rendering . view ( ) . orElse ( null ) ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) , org.springframework.web.reactive.result.view.Rendering . modelAttributes ( ) ) ; assertNull ( org.springframework.web.reactive.result.view.Rendering . status ( ) . orElse ( null ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.view.Rendering . headers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . redirectTo ( STRING ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.view.Rendering . view ( ) . orElse ( null ) ; assertEquals ( RedirectView .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , ( ( RedirectView ) java.lang.Object ) . getUrl ( ) ) ; assertTrue ( ( ( RedirectView ) java.lang.Object ) . isContextRelative ( ) ) ; assertFalse ( ( ( RedirectView ) java.lang.Object ) . isPropagateQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . view ( STRING ) . build ( ) ; assertEquals ( STRING , org.springframework.web.reactive.result.view.Rendering . view ( ) . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo = new org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo ( ) ; Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . view ( STRING ) . modelAttribute ( org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo ) . build ( ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo> ( STRING , org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo ) , org.springframework.web.reactive.result.view.Rendering . modelAttributes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo = new org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo ( ) ; org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Bar org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Bar = new org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Bar ( ) ; Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . view ( STRING ) . modelAttributes ( org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo , org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Bar ) . build ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Bar ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.reactive.result.view.Rendering . modelAttributes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Foo ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.web.reactive.result.view.DefaultRenderingBuilderTests.Bar ( ) ) ; Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . view ( STRING ) . model ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.reactive.result.view.Rendering . modelAttributes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . view ( STRING ) . header ( STRING , STRING ) . build ( ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.view.Rendering . headers ( ) . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.reactive.result.view.Rendering . headers ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.reactive.result.view.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.result.view.HttpHeaders . add ( STRING , STRING ) ; Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . view ( STRING ) . headers ( org.springframework.web.reactive.result.view.HttpHeaders ) . build ( ) ; assertEquals ( org.springframework.web.reactive.result.view.HttpHeaders , org.springframework.web.reactive.result.view.Rendering . headers ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . redirectTo ( STRING ) . contextRelative ( false ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.view.Rendering . view ( ) . orElse ( null ) ; assertEquals ( RedirectView .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertFalse ( ( ( RedirectView ) java.lang.Object ) . isContextRelative ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Rendering org.springframework.web.reactive.result.view.Rendering = Rendering . redirectTo ( STRING ) . propagateQuery ( true ) . build ( ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.view.Rendering . view ( ) . orElse ( null ) ; assertEquals ( RedirectView .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertTrue ( ( ( RedirectView ) java.lang.Object ) . isPropagateQuery ( ) ) ; }  <METHOD_END>
