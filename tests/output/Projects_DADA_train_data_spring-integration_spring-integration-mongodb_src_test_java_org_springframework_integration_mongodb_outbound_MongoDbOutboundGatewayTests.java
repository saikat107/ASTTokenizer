<METHOD_START> @ Before public void void ( ) { BulkOperations org.springframework.integration.mongodb.outbound.BulkOperations = this . org.springframework.integration.mongodb.outbound.MongoOperations . bulkOps ( BulkOperations . BulkMode . ORDERED , java.lang.String ) ; org.springframework.integration.mongodb.outbound.BulkOperations . insert ( java.util.Arrays . java.util.List ( this . createPerson ( STRING ) , this . createPerson ( STRING ) , this . createPerson ( STRING ) , this . createPerson ( STRING ) ) ) ; org.springframework.integration.mongodb.outbound.BulkOperations . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.integration.mongodb.outbound.MongoOperations . dropCollection ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ MongoDbAvailable public void void ( ) { MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory = null ; try { new MongoDbOutboundGateway ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; Assert . fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ MongoDbAvailable public void void ( ) { MongoOperations org.springframework.integration.mongodb.outbound.MongoOperations = null ; try { new MongoDbOutboundGateway ( org.springframework.integration.mongodb.outbound.MongoOperations ) ; Assert . fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; try { org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Assert . fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( org.springframework.integration.mongodb.outbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.outbound.Person> = java.util.List<org.springframework.integration.mongodb.outbound.Person> ( java.lang.Object ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.outbound.Person> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; java.util.function.Function<org.springframework.integration.mongodb.outbound.Message<java.lang.String>,org.springframework.integration.mongodb.outbound.Query> < Message < java.lang.String > , Query > java.util.function.Function<org.springframework.integration.mongodb.outbound.Message<java.lang.String>,org.springframework.integration.mongodb.outbound.Query> = org.springframework.integration.mongodb.outbound.Message<java.lang.String> -> new BasicQuery ( STRING + org.springframework.integration.mongodb.outbound.Message<java.lang.String> . getPayload ( ) + STRING ) ; FunctionExpression < Message < java.lang.String > > org.springframework.integration.mongodb.outbound.FunctionExpression<org.springframework.integration.mongodb.outbound.Message<java.lang.String>> = new FunctionExpression <> ( java.util.function.Function<org.springframework.integration.mongodb.outbound.Message<java.lang.String>,org.springframework.integration.mongodb.outbound.Query> ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( org.springframework.integration.mongodb.outbound.FunctionExpression<org.springframework.integration.mongodb.outbound.Message<java.lang.String>> ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setExpectSingleResult ( true ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setEntityClass ( Person .class ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Person org.springframework.integration.mongodb.outbound.Person = ( Person ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) { MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = new MongoDbOutboundGateway ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setBeanFactory ( org.springframework.integration.mongodb.outbound.BeanFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setMongoConverter ( org.springframework.integration.mongodb.outbound.MongoConverter ) ; try { org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; Assert . fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setEntityClass ( Person .class ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( org.springframework.integration.mongodb.outbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.outbound.Person> = java.util.List<org.springframework.integration.mongodb.outbound.Person> ( java.lang.Object ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.outbound.Person> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setEntityClass ( Person .class ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( org.springframework.integration.mongodb.outbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.outbound.Person> = java.util.List<org.springframework.integration.mongodb.outbound.Person> ( java.lang.Object ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.outbound.Person> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.mongodb.outbound.Person> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( org.springframework.integration.mongodb.outbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setExpectSingleResult ( true ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setEntityClass ( Person .class ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Person org.springframework.integration.mongodb.outbound.Person = ( Person ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( org.springframework.integration.mongodb.outbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setExpectSingleResult ( true ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setEntityClass ( Person .class ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Person org.springframework.integration.mongodb.outbound.Person = ( Person ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Person . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setExpectSingleResult ( true ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; Document org.springframework.integration.mongodb.outbound.Document = ( Document ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.Document . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = new MongoDbOutboundGateway ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setBeanFactory ( org.springframework.integration.mongodb.outbound.BeanFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setExpectSingleResult ( true ) ; try { org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; Assert . fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setQueryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setExpectSingleResult ( true ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setCollectionNameExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; assertNull ( java.lang.Object ) ; LiteralExpression org.springframework.integration.mongodb.outbound.LiteralExpression = ( LiteralExpression ) TestUtils . getPropertyValue ( org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway , STRING ) ; assertNotNull ( org.springframework.integration.mongodb.outbound.LiteralExpression ) ; assertEquals ( STRING , org.springframework.integration.mongodb.outbound.LiteralExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setEntityClass ( Person .class ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setCollectionNameExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setCollectionCallback ( MongoCollection :: count ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; long long = ( long ) org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.mongodb.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setEntityClass ( Person .class ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setCollectionNameExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setRequiresReply ( false ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setCollectionCallback ( collection -> { collection . insertOne ( new Document ( STRING , STRING ) ) ; return null ; } ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . handleRequestMessage ( org.springframework.integration.mongodb.outbound.Message<java.lang.String> ) ; java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.outbound.Person> = this . org.springframework.integration.mongodb.outbound.MongoOperations . find ( new Query ( ) , Person .class , java.lang.String ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.outbound.Person> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.integration.mongodb.outbound.Person> . stream ( ) . anyMatch ( p -> p . getName ( ) . equals ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.outbound.Person> ( java.lang.Object java.lang.Object ) { return ( java.util.List<org.springframework.integration.mongodb.outbound.Person> < Person > ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ( ) { MongoDbOutboundGateway org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway = new MongoDbOutboundGateway ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setBeanFactory ( org.springframework.integration.mongodb.outbound.BeanFactory ) ; org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway . setCollectionNameExpression ( new LiteralExpression ( STRING ) ) ; return org.springframework.integration.mongodb.outbound.MongoDbOutboundGateway ; }  <METHOD_END>
