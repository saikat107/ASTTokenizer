<METHOD_START> @ Bean public static org.springframework.data.neo4j.repository.support.SessionBeanDefinitionRegistrarPostProcessor org.springframework.data.neo4j.repository.support.SessionBeanDefinitionRegistrarPostProcessor ( ) { return new SessionBeanDefinitionRegistrarPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repository.support.PlatformTransactionManager org.springframework.data.neo4j.repository.support.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.repository.support.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repository.support.SessionFactory org.springframework.data.neo4j.repository.support.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.neo4j.repository.support.SessionBeanDefinitionRegistrarPostProcessorTests.SessionInjectionTarget , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.neo4j.repository.support.SessionBeanDefinitionRegistrarPostProcessorTests.SessionInjectionTarget . org.springframework.data.neo4j.repository.support.Session , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( Session org.springframework.data.neo4j.repository.support.Session ) { this . org.springframework.data.neo4j.repository.support.Session = org.springframework.data.neo4j.repository.support.Session ; }  <METHOD_END>
