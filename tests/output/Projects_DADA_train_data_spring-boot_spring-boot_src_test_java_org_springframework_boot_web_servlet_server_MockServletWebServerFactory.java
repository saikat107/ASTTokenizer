<METHOD_START> @ java.lang.Override public org.springframework.boot.web.servlet.server.WebServer org.springframework.boot.web.servlet.server.WebServer ( ServletContextInitializer ... org.springframework.boot.web.servlet.server.ServletContextInitializer[] ) { this . org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer = spy ( new org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ( mergeInitializers ( org.springframework.boot.web.servlet.server.ServletContextInitializer[] ) , getPort ( ) ) ) ; return this . org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ( ) { return this . org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.server.ServletContext org.springframework.boot.web.servlet.server.ServletContext ( ) { return org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ( ) == null ? null : org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ( ) . org.springframework.boot.web.servlet.server.ServletContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet ( int int ) { return org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ( ) == null ? null : org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ( ) . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> ( ) . org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet ( int ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter ( int int ) { return org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ( ) == null ? null : org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer ( ) . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter> ( ) . org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter ( int ) ; }  <METHOD_END>
<METHOD_START> public void ( ServletContextInitializer [] org.springframework.boot.web.servlet.server.ServletContextInitializer[] , int int ) { this . org.springframework.boot.web.servlet.server.ServletContextInitializer[] = org.springframework.boot.web.servlet.server.ServletContextInitializer[] ; this . int = int ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { try { this . org.springframework.boot.web.servlet.server.ServletContext = mock ( ServletContext .class ) ; given ( this . org.springframework.boot.web.servlet.server.ServletContext . addServlet ( anyString ( ) , ( Servlet ) any ( ) ) ) . willAnswer ( new Answer < ServletRegistration . ServletRegistration > ( ) { @ java.lang.Override public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( InvocationOnMock org.springframework.boot.web.servlet.server.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet = new org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet ( ( Servlet ) org.springframework.boot.web.servlet.server.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer .this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> . boolean ( org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet ) ; return org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet . ServletRegistration.Dynamic ( ) ; } } ) ; given ( this . org.springframework.boot.web.servlet.server.ServletContext . addFilter ( anyString ( ) , ( Filter ) any ( ) ) ) . willAnswer ( new Answer < FilterRegistration . FilterRegistration > ( ) { @ java.lang.Override public FilterRegistration . FilterRegistration.Dynamic FilterRegistration.Dynamic ( InvocationOnMock org.springframework.boot.web.servlet.server.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter = new org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter ( ( Filter ) org.springframework.boot.web.servlet.server.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer .this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter> . boolean ( org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter ) ; return org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter . FilterRegistration.Dynamic ( ) ; } } ) ; final java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; given ( this . org.springframework.boot.web.servlet.server.ServletContext . setInitParameter ( anyString ( ) , anyString ( ) ) ) . will ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.boot.web.servlet.server.InvocationOnMock )									throws java.lang.Throwable { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.boot.web.servlet.server.InvocationOnMock . getArgument ( NUMBER ) , org.springframework.boot.web.servlet.server.InvocationOnMock . getArgument ( NUMBER ) ) ; return null ; } } ) ; given ( this . org.springframework.boot.web.servlet.server.ServletContext . getInitParameterNames ( ) ) . willReturn ( java.util.Collections . java.util.Enumeration<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) ) ) ; given ( this . org.springframework.boot.web.servlet.server.ServletContext . getInitParameter ( anyString ( ) ) ) . willAnswer ( new Answer < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( InvocationOnMock org.springframework.boot.web.servlet.server.InvocationOnMock )									throws java.lang.Throwable { return java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.boot.web.servlet.server.InvocationOnMock . getArgument ( NUMBER ) ) ; } } ) ; given ( this . org.springframework.boot.web.servlet.server.ServletContext . getAttributeNames ( ) ) . willReturn ( org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer .< java.lang.String > java.util.Enumeration<java.lang.String> ( ) ) ; given ( this . org.springframework.boot.web.servlet.server.ServletContext . getNamedDispatcher ( STRING ) ) . willReturn ( mock ( RequestDispatcher .class ) ) ; for ( ServletContextInitializer org.springframework.boot.web.servlet.server.ServletContextInitializer : this . org.springframework.boot.web.servlet.server.ServletContextInitializer[] ) { org.springframework.boot.web.servlet.server.ServletContextInitializer . onStartup ( this . org.springframework.boot.web.servlet.server.ServletContext ) ; } } catch ( ServletException org.springframework.boot.web.servlet.server.ServletException ) { throw new java.lang.RuntimeException ( org.springframework.boot.web.servlet.server.ServletException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( InvocationOnMock org.springframework.boot.web.servlet.server.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet = new org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet ( ( Servlet ) org.springframework.boot.web.servlet.server.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer .this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> . boolean ( org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet ) ; return org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet . ServletRegistration.Dynamic ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public FilterRegistration . FilterRegistration.Dynamic FilterRegistration.Dynamic ( InvocationOnMock org.springframework.boot.web.servlet.server.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter = new org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter ( ( Filter ) org.springframework.boot.web.servlet.server.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer .this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter> . boolean ( org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter ) ; return org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter . FilterRegistration.Dynamic ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.boot.web.servlet.server.InvocationOnMock )									throws java.lang.Throwable { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.boot.web.servlet.server.InvocationOnMock . getArgument ( NUMBER ) , org.springframework.boot.web.servlet.server.InvocationOnMock . getArgument ( NUMBER ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( InvocationOnMock org.springframework.boot.web.servlet.server.InvocationOnMock )									throws java.lang.Throwable { return java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.boot.web.servlet.server.InvocationOnMock . getArgument ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > java.util.Enumeration<T> < T > java.util.Enumeration<T> ( ) { return ( java.util.Enumeration<T> < T > ) org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer.EmptyEnumeration . org.springframework.boot.web.servlet.server.MockServletWebServerFactory.MockServletWebServer.EmptyEnumeration<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.servlet.server.WebServerException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.boot.web.servlet.server.ServletContext = null ; this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> . void ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.server.Servlet [] org.springframework.boot.web.servlet.server.Servlet[] ( ) { Servlet [] org.springframework.boot.web.servlet.server.Servlet[] = new Servlet [ this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> . int ( ) ] ; for ( int int = NUMBER ; int < servlets . length ; int ++ ) { org.springframework.boot.web.servlet.server.Servlet[] [ int ] = this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> . org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet ( int ) . org.springframework.boot.web.servlet.server.Servlet ( ) ; } return org.springframework.boot.web.servlet.server.Servlet[] ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> < org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet > java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> ( ) { return this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredServlet> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter> < org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter > java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter> ( ) { return this . java.util.List<org.springframework.boot.web.servlet.server.MockServletWebServerFactory.RegisteredFilter> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public E E ( ) { throw new java.util.NoSuchElementException ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Servlet org.springframework.boot.web.servlet.server.Servlet ) { this . org.springframework.boot.web.servlet.server.Servlet = org.springframework.boot.web.servlet.server.Servlet ; this . ServletRegistration.Dynamic = mock ( ServletRegistration . ServletRegistration .class ) ; }  <METHOD_END>
<METHOD_START> public ServletRegistration . ServletRegistration.Dynamic ServletRegistration.Dynamic ( ) { return this . ServletRegistration.Dynamic ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.server.Servlet org.springframework.boot.web.servlet.server.Servlet ( ) { return this . org.springframework.boot.web.servlet.server.Servlet ; }  <METHOD_END>
<METHOD_START> public void ( Filter org.springframework.boot.web.servlet.server.Filter ) { this . org.springframework.boot.web.servlet.server.Filter = org.springframework.boot.web.servlet.server.Filter ; this . FilterRegistration.Dynamic = mock ( FilterRegistration . FilterRegistration .class ) ; }  <METHOD_END>
<METHOD_START> public FilterRegistration . FilterRegistration.Dynamic FilterRegistration.Dynamic ( ) { return this . FilterRegistration.Dynamic ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.servlet.server.Filter org.springframework.boot.web.servlet.server.Filter ( ) { return this . org.springframework.boot.web.servlet.server.Filter ; }  <METHOD_END>
