<METHOD_START> public boolean boolean ( java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> < StateMachineInterceptor < S , E > > java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { synchronized ( this . java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { this . java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> . clear ( ) ; return this . java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> . addAll ( java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) { return java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> . add ( org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) { return java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> . remove ( org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.support.Message<E> < E > org.springframework.statemachine.support.Message<E> ( Message < E > org.springframework.statemachine.support.Message<E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { for ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> : java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { if ( ( org.springframework.statemachine.support.Message<E> = org.springframework.statemachine.support.StateMachineInterceptor<S,E> . preEvent ( org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.StateMachine<S,E> ) ) == null ) { break; } } return org.springframework.statemachine.support.Message<E> ; }  <METHOD_END>
<METHOD_START> public void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { for ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> : java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { org.springframework.statemachine.support.StateMachineInterceptor<S,E> . preStateChange ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { for ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> : java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { org.springframework.statemachine.support.StateMachineInterceptor<S,E> . postStateChange ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.support.StateContext<S,E> < S , E > org.springframework.statemachine.support.StateContext<S,E> ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { for ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> : java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { if ( ( org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateMachineInterceptor<S,E> . preTransition ( org.springframework.statemachine.support.StateContext<S,E> ) ) == null ) { break; } } return org.springframework.statemachine.support.StateContext<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.support.StateContext<S,E> < S , E > org.springframework.statemachine.support.StateContext<S,E> ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { for ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> : java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { if ( ( org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateMachineInterceptor<S,E> . postTransition ( org.springframework.statemachine.support.StateContext<S,E> ) ) == null ) { break; } } return org.springframework.statemachine.support.StateContext<S,E> ; }  <METHOD_END>
<METHOD_START> public java.lang.Exception java.lang.Exception ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.lang.Exception java.lang.Exception ) { for ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> : java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> ) { if ( ( java.lang.Exception = org.springframework.statemachine.support.StateMachineInterceptor<S,E> . stateMachineError ( org.springframework.statemachine.support.StateMachine<S,E> , java.lang.Exception ) ) == null ) { break; } } return java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.List<org.springframework.statemachine.support.StateMachineInterceptor<S,E>> + STRING ; }  <METHOD_END>
