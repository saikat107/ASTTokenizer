<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( IntegrationUtils . INTEGRATION_CONVERSION_SERVICE_BEAN_NAME ) . equals ( org.springframework.integration.config.xml.ConversionService ) ) ; assertTrue ( org.springframework.integration.config.xml.ConversionService . canConvert ( org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 .class , org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean2 .class ) ) ; assertTrue ( org.springframework.integration.config.xml.ConversionService . canConvert ( org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 .class , org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean3 .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.config.xml.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests .class ) ; GenericApplicationContext org.springframework.integration.config.xml.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.xml.GenericApplicationContext . setParent ( org.springframework.integration.config.xml.ClassPathXmlApplicationContext ) ; org.springframework.integration.config.xml.GenericApplicationContext . refresh ( ) ; GenericConversionService org.springframework.integration.config.xml.GenericConversionService = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( IntegrationUtils . INTEGRATION_CONVERSION_SERVICE_BEAN_NAME , GenericConversionService .class ) ; GenericConversionService org.springframework.integration.config.xml.GenericConversionService = org.springframework.integration.config.xml.GenericApplicationContext . getBean ( IntegrationUtils . INTEGRATION_CONVERSION_SERVICE_BEAN_NAME , GenericConversionService .class ) ; assertTrue ( org.springframework.integration.config.xml.GenericConversionService == org.springframework.integration.config.xml.GenericConversionService ) ; org.springframework.integration.config.xml.GenericConversionService . addConverter ( new org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestConverter ( ) ) ; org.springframework.integration.config.xml.GenericConversionService . addConverter ( new org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestConverter3 ( ) ) ; assertTrue ( org.springframework.integration.config.xml.GenericConversionService . canConvert ( org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 .class , org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean2 .class ) ) ; assertTrue ( org.springframework.integration.config.xml.GenericConversionService . canConvert ( org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 .class , org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean3 .class ) ) ; org.springframework.integration.config.xml.GenericApplicationContext . close ( ) ; org.springframework.integration.config.xml.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean2 org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean2 ( org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 ) { return new org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean2 ( org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 . java.lang.String . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean3 org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean3 ( org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 ) { return new org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean3 ( org.springframework.integration.config.xml.ConverterParserWithExistingConversionServiceTests.TestBean1 . java.lang.String . java.lang.String ( ) ) ; }  <METHOD_END>
