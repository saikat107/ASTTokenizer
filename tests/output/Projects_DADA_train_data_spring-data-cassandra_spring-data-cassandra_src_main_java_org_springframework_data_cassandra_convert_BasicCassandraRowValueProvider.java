<METHOD_START> public void ( Row org.springframework.data.cassandra.convert.Row , DefaultSpELExpressionEvaluator org.springframework.data.cassandra.convert.DefaultSpELExpressionEvaluator ) { Assert . notNull ( org.springframework.data.cassandra.convert.Row , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.convert.DefaultSpELExpressionEvaluator , STRING ) ; this . org.springframework.data.cassandra.convert.ColumnReader = new ColumnReader ( org.springframework.data.cassandra.convert.Row ) ; this . org.springframework.data.cassandra.convert.SpELExpressionEvaluator = org.springframework.data.cassandra.convert.DefaultSpELExpressionEvaluator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > java.util.Optional<T> < T > java.util.Optional<T> ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = org.springframework.data.cassandra.convert.CassandraPersistentProperty . getSpelExpression ( ) ; if ( java.util.Optional<java.lang.String> . boolean ( ) ) { return java.util.Optional<java.lang.String> . java.util.Optional<T> ( java.lang.String -> java.util.Optional . java.util.Optional ( org.springframework.data.cassandra.convert.SpELExpressionEvaluator . evaluate ( java.lang.String ) ) ) ; } return java.util.Optional . java.util.Optional<T> ( ( T ) org.springframework.data.cassandra.convert.ColumnReader . get ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getColumnName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.convert.Row org.springframework.data.cassandra.convert.Row ( ) { return org.springframework.data.cassandra.convert.ColumnReader . getRow ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { Assert . notNull ( org.springframework.data.cassandra.convert.CassandraPersistentProperty , STRING ) ; return org.springframework.data.cassandra.convert.Row ( ) . getColumnDefinitions ( ) . contains ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) ) ; }  <METHOD_END>
