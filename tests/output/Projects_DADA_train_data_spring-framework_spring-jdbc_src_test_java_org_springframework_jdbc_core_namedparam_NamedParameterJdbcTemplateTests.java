<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.sql.Connection = mock ( java.sql.Connection .class ) ; javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; java.sql.PreparedStatement = mock ( java.sql.PreparedStatement .class ) ; java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate = new NamedParameterJdbcTemplate ( javax.sql.DataSource ) ; java.sql.DatabaseMetaData = mock ( java.sql.DatabaseMetaData .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( anyString ( ) ) ) . willReturn ( java.sql.PreparedStatement ) ; given ( java.sql.PreparedStatement . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; given ( java.sql.PreparedStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( STRING ) ; given ( java.sql.DatabaseMetaData . boolean ( ) ) . willReturn ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.core.namedparam.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; new NamedParameterJdbcTemplate ( ( javax.sql.DataSource ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.core.namedparam.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; new NamedParameterJdbcTemplate ( ( JdbcOperations ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.PreparedStatement . int ( ) ) . willReturn ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . execute ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , new PreparedStatementCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.PreparedStatement java.sql.PreparedStatement )							throws java.sql.SQLException { assertEquals ( java.sql.PreparedStatement , java.sql.PreparedStatement ) ; java.sql.PreparedStatement . int ( ) ; return STRING ; } } ) ; assertEquals ( STRING , java.lang.Object ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.PreparedStatement java.sql.PreparedStatement )							throws java.sql.SQLException { assertEquals ( java.sql.PreparedStatement , java.sql.PreparedStatement ) ; java.sql.PreparedStatement . int ( ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.PreparedStatement . int ( ) ) . willReturn ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new SqlParameterValue ( java.sql.Types . int , NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new SqlParameterValue ( java.sql.Types . int , NUMBER ) ) ; java.lang.Object java.lang.Object = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . execute ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , new PreparedStatementCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.PreparedStatement java.sql.PreparedStatement )							throws java.sql.SQLException { assertEquals ( java.sql.PreparedStatement , java.sql.PreparedStatement ) ; java.sql.PreparedStatement . int ( ) ; return STRING ; } } ) ; assertEquals ( STRING , java.lang.Object ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.PreparedStatement java.sql.PreparedStatement )							throws java.sql.SQLException { assertEquals ( java.sql.PreparedStatement , java.sql.PreparedStatement ) ; java.sql.PreparedStatement . int ( ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.PreparedStatement . int ( ) ) . willReturn ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . execute ( java.lang.String , new PreparedStatementCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.PreparedStatement java.sql.PreparedStatement )							throws java.sql.SQLException { assertEquals ( java.sql.PreparedStatement , java.sql.PreparedStatement ) ; java.sql.PreparedStatement . java.sql.ResultSet ( ) ; return STRING ; } } ) ; assertEquals ( STRING , java.lang.Object ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.PreparedStatement java.sql.PreparedStatement )							throws java.sql.SQLException { assertEquals ( java.sql.PreparedStatement , java.sql.PreparedStatement ) ; java.sql.PreparedStatement . java.sql.ResultSet ( ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new SqlParameterValue ( java.sql.Types . int , NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Customer org.springframework.jdbc.core.namedparam.Customer = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . query ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , new ResultSetExtractor < Customer > ( ) { @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException , org.springframework.jdbc.core.namedparam.DataAccessException { java.sql.ResultSet . boolean ( ) ; Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; } } ) ; assertTrue ( STRING , org.springframework.jdbc.core.namedparam.Customer . getId ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.core.namedparam.Customer . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException , org.springframework.jdbc.core.namedparam.DataAccessException { java.sql.ResultSet . boolean ( ) ; Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; Customer org.springframework.jdbc.core.namedparam.Customer = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . query ( java.lang.String , new ResultSetExtractor < Customer > ( ) { @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException , org.springframework.jdbc.core.namedparam.DataAccessException { java.sql.ResultSet . boolean ( ) ; Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; } } ) ; assertTrue ( STRING , org.springframework.jdbc.core.namedparam.Customer . getId ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.core.namedparam.Customer . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException , org.springframework.jdbc.core.namedparam.DataAccessException { java.sql.ResultSet . boolean ( ) ; Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new SqlParameterValue ( java.sql.Types . int , NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; final java.util.List<org.springframework.jdbc.core.namedparam.Customer> < Customer > java.util.List<org.springframework.jdbc.core.namedparam.Customer> = new java.util.LinkedList<org.springframework.jdbc.core.namedparam.Customer> <> ( ) ; org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . query ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , new RowCallbackHandler ( ) { @ java.lang.Override public void void ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; java.util.List<org.springframework.jdbc.core.namedparam.Customer> . add ( org.springframework.jdbc.core.namedparam.Customer ) ; } } ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . size ( ) ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . get ( NUMBER ) . getId ( ) == NUMBER ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . get ( NUMBER ) . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; java.util.List<org.springframework.jdbc.core.namedparam.Customer> . add ( org.springframework.jdbc.core.namedparam.Customer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; final java.util.List<org.springframework.jdbc.core.namedparam.Customer> < Customer > java.util.List<org.springframework.jdbc.core.namedparam.Customer> = new java.util.LinkedList<org.springframework.jdbc.core.namedparam.Customer> <> ( ) ; org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . query ( java.lang.String , new RowCallbackHandler ( ) { @ java.lang.Override public void void ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; java.util.List<org.springframework.jdbc.core.namedparam.Customer> . add ( org.springframework.jdbc.core.namedparam.Customer ) ; } } ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . size ( ) ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . get ( NUMBER ) . getId ( ) == NUMBER ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . get ( NUMBER ) . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; java.util.List<org.springframework.jdbc.core.namedparam.Customer> . add ( org.springframework.jdbc.core.namedparam.Customer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new SqlParameterValue ( java.sql.Types . int , NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.List<org.springframework.jdbc.core.namedparam.Customer> < Customer > java.util.List<org.springframework.jdbc.core.namedparam.Customer> = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . query ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , new RowMapper < Customer > ( ) { @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; } } ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . size ( ) ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . get ( NUMBER ) . getId ( ) == NUMBER ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . get ( NUMBER ) . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; java.util.List<org.springframework.jdbc.core.namedparam.Customer> < Customer > java.util.List<org.springframework.jdbc.core.namedparam.Customer> = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . query ( java.lang.String , new RowMapper < Customer > ( ) { @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; } } ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . size ( ) ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . get ( NUMBER ) . getId ( ) == NUMBER ) ; assertTrue ( STRING , java.util.List<org.springframework.jdbc.core.namedparam.Customer> . get ( NUMBER ) . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new SqlParameterValue ( java.sql.Types . int , NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Customer org.springframework.jdbc.core.namedparam.Customer = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , new RowMapper < Customer > ( ) { @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; } } ) ; assertTrue ( STRING , org.springframework.jdbc.core.namedparam.Customer . getId ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.core.namedparam.Customer . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.core.namedparam.Customer org.springframework.jdbc.core.namedparam.Customer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { Customer org.springframework.jdbc.core.namedparam.Customer = new Customer ( ) ; org.springframework.jdbc.core.namedparam.Customer . setId ( java.sql.ResultSet . int ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.jdbc.core.namedparam.Customer . setForename ( java.sql.ResultSet . java.lang.String ( java.lang.String[] [ NUMBER ] ) ) ; return org.springframework.jdbc.core.namedparam.Customer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.PreparedStatement . int ( ) ) . willReturn ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; int int = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . update ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , int ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { given ( java.sql.PreparedStatement . int ( ) ) . willReturn ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new SqlParameterValue ( java.sql.Types . int , NUMBER ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new SqlParameterValue ( java.sql.Types . int , NUMBER ) ) ; int int = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . update ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , int ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) final java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > [] java.util.Map<java.lang.String,java.lang.Integer>[] = new java.util.Map [ NUMBER ] ; java.util.Map<java.lang.String,java.lang.Integer>[] [ NUMBER ] = java.util.Collections . java.util.Map<java.lang.String,java.lang.Integer> ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer>[] [ NUMBER ] = java.util.Collections . java.util.Map<java.lang.String,java.lang.Integer> ( STRING , NUMBER ) ; final int [] int[] = new int [] { NUMBER , NUMBER } ; given ( java.sql.PreparedStatement . int[] ( ) ) . willReturn ( int[] ) ; given ( java.sql.Connection . java.sql.DatabaseMetaData ( ) ) . willReturn ( java.sql.DatabaseMetaData ) ; JdbcTemplate org.springframework.jdbc.core.namedparam.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource , false ) ; org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate = new NamedParameterJdbcTemplate ( org.springframework.jdbc.core.namedparam.JdbcTemplate ) ; int [] int[] = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . batchUpdate ( STRING , java.util.Map<java.lang.String,java.lang.Integer>[] ) ; assertTrue ( STRING , int[] . int == NUMBER ) ; assertEquals ( int[] [ NUMBER ] , int[] [ NUMBER ] ) ; assertEquals ( int[] [ NUMBER ] , int[] [ NUMBER ] ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement , times ( NUMBER ) ) . addBatch ( ) ; verify ( java.sql.PreparedStatement , atLeastOnce ( ) ) . close ( ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SqlParameterSource [] org.springframework.jdbc.core.namedparam.SqlParameterSource[] = new SqlParameterSource [ NUMBER ] ; org.springframework.jdbc.core.namedparam.SqlParameterSource[] [ NUMBER ] = new MapSqlParameterSource ( STRING , NUMBER ) ; org.springframework.jdbc.core.namedparam.SqlParameterSource[] [ NUMBER ] = new MapSqlParameterSource ( STRING , NUMBER ) ; final int [] int[] = new int [] { NUMBER , NUMBER } ; given ( java.sql.PreparedStatement . int[] ( ) ) . willReturn ( int[] ) ; given ( java.sql.Connection . java.sql.DatabaseMetaData ( ) ) . willReturn ( java.sql.DatabaseMetaData ) ; JdbcTemplate org.springframework.jdbc.core.namedparam.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource , false ) ; org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate = new NamedParameterJdbcTemplate ( org.springframework.jdbc.core.namedparam.JdbcTemplate ) ; int [] int[] = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . batchUpdate ( STRING , org.springframework.jdbc.core.namedparam.SqlParameterSource[] ) ; assertTrue ( STRING , int[] . int == NUMBER ) ; assertEquals ( int[] [ NUMBER ] , int[] [ NUMBER ] ) ; assertEquals ( int[] [ NUMBER ] , int[] [ NUMBER ] ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement , times ( NUMBER ) ) . addBatch ( ) ; verify ( java.sql.PreparedStatement , atLeastOnce ( ) ) . close ( ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SqlParameterSource [] org.springframework.jdbc.core.namedparam.SqlParameterSource[] = new SqlParameterSource [ NUMBER ] ; org.springframework.jdbc.core.namedparam.SqlParameterSource[] [ NUMBER ] = new MapSqlParameterSource ( ) . addValue ( STRING , NUMBER , java.sql.Types . int ) ; org.springframework.jdbc.core.namedparam.SqlParameterSource[] [ NUMBER ] = new MapSqlParameterSource ( ) . addValue ( STRING , NUMBER , java.sql.Types . int ) ; final int [] int[] = new int [] { NUMBER , NUMBER } ; given ( java.sql.PreparedStatement . int[] ( ) ) . willReturn ( int[] ) ; given ( java.sql.Connection . java.sql.DatabaseMetaData ( ) ) . willReturn ( java.sql.DatabaseMetaData ) ; JdbcTemplate org.springframework.jdbc.core.namedparam.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource , false ) ; org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate = new NamedParameterJdbcTemplate ( org.springframework.jdbc.core.namedparam.JdbcTemplate ) ; int [] int[] = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . batchUpdate ( STRING , org.springframework.jdbc.core.namedparam.SqlParameterSource[] ) ; assertTrue ( STRING , int[] . int == NUMBER ) ; assertEquals ( int[] [ NUMBER ] , int[] [ NUMBER ] ) ; assertEquals ( int[] [ NUMBER ] , int[] [ NUMBER ] ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement , times ( NUMBER ) ) . addBatch ( ) ; verify ( java.sql.PreparedStatement , atLeastOnce ( ) ) . close ( ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
