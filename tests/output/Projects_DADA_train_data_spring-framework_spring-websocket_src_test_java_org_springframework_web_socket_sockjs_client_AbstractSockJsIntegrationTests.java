<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + this . org.springframework.web.socket.sockjs.client.TestName . getMethodName ( ) + STRING ) ; this . org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter = new org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter ( ) ; this . org.springframework.web.socket.sockjs.client.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.web.socket.sockjs.client.AnnotationConfigWebApplicationContext . register ( org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestConfig .class , java.lang.Class<?> ( ) ) ; this . org.springframework.web.socket.sockjs.client.WebSocketTestServer = org.springframework.web.socket.sockjs.client.WebSocketTestServer ( ) ; this . org.springframework.web.socket.sockjs.client.WebSocketTestServer . setup ( ) ; this . org.springframework.web.socket.sockjs.client.WebSocketTestServer . deployConfig ( this . org.springframework.web.socket.sockjs.client.AnnotationConfigWebApplicationContext , this . org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter ) ; this . org.springframework.web.socket.sockjs.client.WebSocketTestServer . start ( ) ; this . org.springframework.web.socket.sockjs.client.AnnotationConfigWebApplicationContext . setServletContext ( this . org.springframework.web.socket.sockjs.client.WebSocketTestServer . getServletContext ( ) ) ; this . org.springframework.web.socket.sockjs.client.AnnotationConfigWebApplicationContext . refresh ( ) ; this . java.lang.String = STRING + this . org.springframework.web.socket.sockjs.client.WebSocketTestServer . getPort ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { try { this . org.springframework.web.socket.sockjs.client.SockJsClient . stop ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING , java.lang.Throwable ) ; } try { this . org.springframework.web.socket.sockjs.client.WebSocketTestServer . undeployConfig ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING , java.lang.Throwable ) ; } try { this . org.springframework.web.socket.sockjs.client.WebSocketTestServer . stop ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING , java.lang.Throwable ) ; } try { this . org.springframework.web.socket.sockjs.client.AnnotationConfigWebApplicationContext . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<?> < ? > java.lang.Class<?> ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.socket.sockjs.client.WebSocketTestServer org.springframework.web.socket.sockjs.client.WebSocketTestServer ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.socket.sockjs.client.Transport org.springframework.web.socket.sockjs.client.Transport ( )  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.socket.sockjs.client.AbstractXhrTransport org.springframework.web.socket.sockjs.client.AbstractXhrTransport ( )  <METHOD_END>
<METHOD_START> protected void void ( Transport ... org.springframework.web.socket.sockjs.client.Transport[] ) { this . org.springframework.web.socket.sockjs.client.SockJsClient = new SockJsClient ( java.util.Arrays . java.util.List ( org.springframework.web.socket.sockjs.client.Transport[] ) ) ; this . org.springframework.web.socket.sockjs.client.SockJsClient . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( NUMBER , org.springframework.web.socket.sockjs.client.Transport ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( NUMBER , org.springframework.web.socket.sockjs.client.AbstractXhrTransport ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractXhrTransport org.springframework.web.socket.sockjs.client.AbstractXhrTransport = org.springframework.web.socket.sockjs.client.AbstractXhrTransport ( ) ; org.springframework.web.socket.sockjs.client.AbstractXhrTransport . setXhrStreamingDisabled ( true ) ; void ( NUMBER , org.springframework.web.socket.sockjs.client.AbstractXhrTransport , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractXhrTransport org.springframework.web.socket.sockjs.client.AbstractXhrTransport = org.springframework.web.socket.sockjs.client.AbstractXhrTransport ( ) ; org.springframework.web.socket.sockjs.client.AbstractXhrTransport . setXhrStreamingDisabled ( true ) ; WebSocketHttpHeaders org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders = new WebSocketHttpHeaders ( ) ; org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders . add ( STRING , STRING ) ; void ( NUMBER , org.springframework.web.socket.sockjs.client.AbstractXhrTransport , org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.web.socket.sockjs.client.HttpHeaders> < java.lang.String , HttpHeaders > java.util.Map.Entry<java.lang.String,org.springframework.web.socket.sockjs.client.HttpHeaders> : this . org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter . java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.client.HttpHeaders> . entrySet ( ) ) { HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = java.util.Map.Entry<java.lang.String,org.springframework.web.socket.sockjs.client.HttpHeaders> . getValue ( ) ; assertEquals ( STRING + java.util.Map.Entry<java.lang.String,org.springframework.web.socket.sockjs.client.HttpHeaders> . getKey ( ) , STRING , org.springframework.web.socket.sockjs.client.HttpHeaders . getFirst ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.socket.sockjs.client.Transport ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.socket.sockjs.client.AbstractXhrTransport ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractXhrTransport org.springframework.web.socket.sockjs.client.AbstractXhrTransport = org.springframework.web.socket.sockjs.client.AbstractXhrTransport ( ) ; org.springframework.web.socket.sockjs.client.AbstractXhrTransport . setXhrStreamingDisabled ( true ) ; void ( org.springframework.web.socket.sockjs.client.AbstractXhrTransport , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler = new org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler ( ) ; this . org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter . java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; void ( org.springframework.web.socket.sockjs.client.Transport ( ) ) ; this . org.springframework.web.socket.sockjs.client.SockJsClient . doHandshake ( org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler , this . java.lang.String + STRING ) . addCallback ( new ListenableFutureCallback < WebSocketSession > ( ) { @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession ) {					} @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession ) {					}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter . java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; this . org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter . java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler = new org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler ( ) ; void ( org.springframework.web.socket.sockjs.client.Transport ( ) , org.springframework.web.socket.sockjs.client.AbstractXhrTransport ( ) ) ; WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession = this . org.springframework.web.socket.sockjs.client.SockJsClient . doHandshake ( org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler , this . java.lang.String + STRING ) . get ( ) ; assertEquals ( STRING , XhrClientSockJsSession .class , org.springframework.web.socket.sockjs.client.WebSocketSession . getClass ( ) ) ; TextMessage org.springframework.web.socket.sockjs.client.TextMessage = new TextMessage ( STRING ) ; org.springframework.web.socket.sockjs.client.WebSocketSession . sendMessage ( org.springframework.web.socket.sockjs.client.TextMessage ) ; org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler . void ( org.springframework.web.socket.sockjs.client.TextMessage , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( timeout = NUMBER ) public void void ( ) java.lang.Exception { org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler = new org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler ( ) ; this . org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter . java.util.Map<java.lang.String,java.lang.Long> . java.lang.Long ( STRING , NUMBER ) ; this . org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestFilter . java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; void ( org.springframework.web.socket.sockjs.client.AbstractXhrTransport ( ) ) ; this . org.springframework.web.socket.sockjs.client.SockJsClient . setConnectTimeoutScheduler ( this . org.springframework.web.socket.sockjs.client.AnnotationConfigWebApplicationContext . getBean ( ThreadPoolTaskScheduler .class ) ) ; WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession = org.springframework.web.socket.sockjs.client.SockJsClient . doHandshake ( org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler , this . java.lang.String + STRING ) . get ( ) ; assertEquals ( STRING , XhrClientSockJsSession .class , org.springframework.web.socket.sockjs.client.WebSocketSession . getClass ( ) ) ; TextMessage org.springframework.web.socket.sockjs.client.TextMessage = new TextMessage ( STRING ) ; org.springframework.web.socket.sockjs.client.WebSocketSession . sendMessage ( org.springframework.web.socket.sockjs.client.TextMessage ) ; org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler . void ( org.springframework.web.socket.sockjs.client.TextMessage , NUMBER ) ; org.springframework.web.socket.sockjs.client.WebSocketSession . close ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , Transport org.springframework.web.socket.sockjs.client.Transport , WebSocketHttpHeaders org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders ) throws java.lang.Exception { java.util.List<org.springframework.web.socket.sockjs.client.TextMessage> < TextMessage > java.util.List<org.springframework.web.socket.sockjs.client.TextMessage> = new java.util.ArrayList<org.springframework.web.socket.sockjs.client.TextMessage> <> ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.List<org.springframework.web.socket.sockjs.client.TextMessage> . add ( new TextMessage ( STRING + int ) ) ; } org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler = new org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler ( ) ; void ( org.springframework.web.socket.sockjs.client.Transport ) ; java.net.URI java.net.URI = new java.net.URI ( this . java.lang.String + STRING ) ; WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession = this . org.springframework.web.socket.sockjs.client.SockJsClient . doHandshake ( org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler , org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; for ( TextMessage org.springframework.web.socket.sockjs.client.TextMessage : java.util.List<org.springframework.web.socket.sockjs.client.TextMessage> ) { org.springframework.web.socket.sockjs.client.WebSocketSession . sendMessage ( org.springframework.web.socket.sockjs.client.TextMessage ) ; } org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler . void ( int , NUMBER ) ; for ( TextMessage org.springframework.web.socket.sockjs.client.TextMessage : java.util.List<org.springframework.web.socket.sockjs.client.TextMessage> ) { assertTrue ( STRING + org.springframework.web.socket.sockjs.client.TextMessage , org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler . java.util.concurrent.BlockingQueue<org.springframework.web.socket.sockjs.client.TextMessage> . remove ( org.springframework.web.socket.sockjs.client.TextMessage ) ) ; } assertEquals ( STRING + org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler . java.util.concurrent.BlockingQueue<org.springframework.web.socket.sockjs.client.TextMessage> , NUMBER , org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler . java.util.concurrent.BlockingQueue<org.springframework.web.socket.sockjs.client.TextMessage> . size ( ) ) ; org.springframework.web.socket.sockjs.client.WebSocketSession . close ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( Transport org.springframework.web.socket.sockjs.client.Transport , WebSocketHttpHeaders org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders )			throws java.lang.Exception { org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler = new org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler ( ) ; void ( org.springframework.web.socket.sockjs.client.Transport ) ; this . org.springframework.web.socket.sockjs.client.SockJsClient . doHandshake ( org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler , org.springframework.web.socket.sockjs.client.WebSocketHttpHeaders , new java.net.URI ( this . java.lang.String + STRING ) ) . get ( ) ; org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler = this . org.springframework.web.socket.sockjs.client.AnnotationConfigWebApplicationContext . getBean ( org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler .class ) ; assertNotNull ( STRING , org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler . org.springframework.web.socket.sockjs.client.WebSocketSession ) ; org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler . org.springframework.web.socket.sockjs.client.WebSocketSession ( NUMBER ) ; TextMessage org.springframework.web.socket.sockjs.client.TextMessage = new TextMessage ( STRING ) ; org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler . org.springframework.web.socket.sockjs.client.WebSocketSession . sendMessage ( org.springframework.web.socket.sockjs.client.TextMessage ) ; org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestClientHandler . void ( org.springframework.web.socket.sockjs.client.TextMessage , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.util.function.BooleanSupplier java.util.function.BooleanSupplier , long long , java.lang.String java.lang.String ) { long long = NUMBER ; for ( int int = NUMBER ; int < java.lang.Math . double ( long / long ) ; int ++ ) { if ( java.util.function.BooleanSupplier . boolean ( ) ) { return; } try { java.lang.Thread . void ( long ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , java.lang.InterruptedException ) ; } } throw new java.lang.IllegalStateException ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketHandlerRegistry org.springframework.web.socket.sockjs.client.WebSocketHandlerRegistry ) { HandshakeHandler org.springframework.web.socket.sockjs.client.HandshakeHandler = new DefaultHandshakeHandler ( this . org.springframework.web.socket.sockjs.client.RequestUpgradeStrategy ) ; org.springframework.web.socket.sockjs.client.WebSocketHandlerRegistry . addHandler ( new org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.EchoHandler ( ) , STRING ) . setHandshakeHandler ( org.springframework.web.socket.sockjs.client.HandshakeHandler ) . withSockJS ( ) ; org.springframework.web.socket.sockjs.client.WebSocketHandlerRegistry . addHandler ( org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler ( ) , STRING ) . setHandshakeHandler ( org.springframework.web.socket.sockjs.client.HandshakeHandler ) . withSockJS ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler ( ) { return new org.springframework.web.socket.sockjs.client.AbstractSockJsIntegrationTests.TestServerHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession ) throws java.lang.Exception { this . org.springframework.web.socket.sockjs.client.WebSocketSession = org.springframework.web.socket.sockjs.client.WebSocketSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession , TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) throws java.lang.Exception { this . java.util.concurrent.BlockingQueue<org.springframework.web.socket.sockjs.client.TextMessage> . add ( org.springframework.web.socket.sockjs.client.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { this . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> public void void ( final int int , long long ) throws java.lang.Exception { void ( ( ) receivedMessages . size ( ) >= count , long , int + STRING + this . java.util.concurrent.BlockingQueue<org.springframework.web.socket.sockjs.client.TextMessage> ) ; }  <METHOD_END>
<METHOD_START> public void void ( TextMessage org.springframework.web.socket.sockjs.client.TextMessage , long long ) throws java.lang.InterruptedException { TextMessage org.springframework.web.socket.sockjs.client.TextMessage = this . java.util.concurrent.BlockingQueue<org.springframework.web.socket.sockjs.client.TextMessage> . poll ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( org.springframework.web.socket.sockjs.client.TextMessage != null ) { assertEquals ( org.springframework.web.socket.sockjs.client.TextMessage , org.springframework.web.socket.sockjs.client.TextMessage ) ; } else if ( this . java.lang.Throwable != null ) { throw new java.lang.AssertionError ( STRING , this . java.lang.Throwable ) ; } else { fail ( STRING + org.springframework.web.socket.sockjs.client.TextMessage + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession , TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) throws java.lang.Exception { org.springframework.web.socket.sockjs.client.WebSocketSession . sendMessage ( org.springframework.web.socket.sockjs.client.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession ) throws java.lang.Exception { this . org.springframework.web.socket.sockjs.client.WebSocketSession = org.springframework.web.socket.sockjs.client.WebSocketSession ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.WebSocketSession org.springframework.web.socket.sockjs.client.WebSocketSession ( long long ) throws java.lang.InterruptedException { void ( ( ) this . org.springframework.web.socket.sockjs.client.WebSocketSession != null , long , STRING ) ; return this . org.springframework.web.socket.sockjs.client.WebSocketSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.socket.sockjs.client.ServletRequest , ServletResponse org.springframework.web.socket.sockjs.client.ServletResponse , FilterChain org.springframework.web.socket.sockjs.client.FilterChain )				throws java.io.IOException , org.springframework.web.socket.sockjs.client.ServletException { HttpServletRequest org.springframework.web.socket.sockjs.client.HttpServletRequest = ( HttpServletRequest ) org.springframework.web.socket.sockjs.client.ServletRequest ; java.lang.String java.lang.String = org.springframework.web.socket.sockjs.client.HttpServletRequest . getRequestURI ( ) ; HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = new ServletServerHttpRequest ( org.springframework.web.socket.sockjs.client.HttpServletRequest ) . getHeaders ( ) ; this . java.util.Map<java.lang.String,org.springframework.web.socket.sockjs.client.HttpHeaders> . put ( java.lang.String , org.springframework.web.socket.sockjs.client.HttpHeaders ) ; for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.lang.Long> . java.util.Set<java.lang.String> ( ) ) { if ( ( org.springframework.web.socket.sockjs.client.HttpServletRequest ) . getRequestURI ( ) . endsWith ( java.lang.String ) ) { try { java.lang.Thread . void ( this . java.util.Map<java.lang.String,java.lang.Long> . java.lang.Long ( java.lang.String ) ) ; break; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.InterruptedException . void ( ) ; } } } for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.lang.Integer> . java.util.Set<java.lang.String> ( ) ) { if ( ( org.springframework.web.socket.sockjs.client.HttpServletRequest ) . getRequestURI ( ) . endsWith ( java.lang.String ) ) { ( ( HttpServletResponse ) org.springframework.web.socket.sockjs.client.ServletResponse ) . sendError ( this . java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) ) ; return; } } org.springframework.web.socket.sockjs.client.FilterChain . doFilter ( org.springframework.web.socket.sockjs.client.ServletRequest , org.springframework.web.socket.sockjs.client.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FilterConfig org.springframework.web.socket.sockjs.client.FilterConfig ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
