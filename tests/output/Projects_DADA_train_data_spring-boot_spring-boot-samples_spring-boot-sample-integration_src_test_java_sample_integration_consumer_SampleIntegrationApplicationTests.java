<METHOD_START> @ Before public void void ( ) java.lang.InterruptedException { void ( new java.io.File ( STRING ) ) ; void ( new java.io.File ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File ) throws java.lang.InterruptedException { if ( java.io.File . boolean ( ) ) { assertThat ( FileSystemUtils . deleteRecursively ( java.io.File ) ) . isTrue ( ) ; } }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . sample.integration.consumer.ConfigurableApplicationContext != null ) { this . sample.integration.consumer.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.integration.consumer.ConfigurableApplicationContext = SpringApplication . run ( SampleIntegrationApplication .class ) ; SpringApplication . run ( ProducerApplication .class , STRING ) ; java.lang.String java.lang.String = java.lang.String ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.integration.consumer.ConfigurableApplicationContext = SpringApplication . run ( SampleIntegrationApplication .class , STRING ) ; java.lang.String java.lang.String = java.lang.String ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) java.lang.Exception { java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . java.util.concurrent.Future<java.lang.String> ( new java.util.concurrent.Callable<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { Resource [] sample.integration.consumer.Resource[] = sample.integration.consumer.Resource[] ( ) ; while ( resources . length == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; sample.integration.consumer.Resource[] = sample.integration.consumer.Resource[] ( ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( Resource sample.integration.consumer.Resource : sample.integration.consumer.Resource[] ) { java.io.InputStream java.io.InputStream = sample.integration.consumer.Resource . getInputStream ( ) ; try { java.lang.StringBuilder . java.lang.StringBuilder ( new java.lang.String ( StreamUtils . copyToByteArray ( java.io.InputStream ) ) ) ; } finally { java.io.InputStream . void ( ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; } } ) ; return java.util.concurrent.Future<java.lang.String> . java.lang.String ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { Resource [] sample.integration.consumer.Resource[] = sample.integration.consumer.Resource[] ( ) ; while ( resources . length == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; sample.integration.consumer.Resource[] = sample.integration.consumer.Resource[] ( ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( Resource sample.integration.consumer.Resource : sample.integration.consumer.Resource[] ) { java.io.InputStream java.io.InputStream = sample.integration.consumer.Resource . getInputStream ( ) ; try { java.lang.StringBuilder . java.lang.StringBuilder ( new java.lang.String ( StreamUtils . copyToByteArray ( java.io.InputStream ) ) ) ; } finally { java.io.InputStream . void ( ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private sample.integration.consumer.Resource [] sample.integration.consumer.Resource[] ( ) java.io.IOException { Resource [] sample.integration.consumer.Resource[] = ResourcePatternUtils . getResourcePatternResolver ( new DefaultResourceLoader ( ) ) . getResources ( STRING ) ; for ( Resource sample.integration.consumer.Resource : sample.integration.consumer.Resource[] ) { if ( sample.integration.consumer.Resource . contentLength ( ) == NUMBER ) { return new Resource [ NUMBER ] ; } } return sample.integration.consumer.Resource[] ; }  <METHOD_END>
