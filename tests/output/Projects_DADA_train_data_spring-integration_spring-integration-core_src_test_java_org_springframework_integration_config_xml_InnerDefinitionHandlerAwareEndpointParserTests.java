<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { ApplicationContext org.springframework.integration.config.xml.ApplicationContext = this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; EventDrivenConsumer org.springframework.integration.config.xml.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertNotNull ( org.springframework.integration.config.xml.EventDrivenConsumer ) ; MessageBuilder < java.lang.String [] > org.springframework.integration.config.xml.MessageBuilder<java.lang.String[]> = MessageBuilder . withPayload ( new java.lang.String [] { STRING , STRING } ) ; Message < java.lang.String [] > org.springframework.integration.config.xml.Message<java.lang.String[]> = org.springframework.integration.config.xml.MessageBuilder<java.lang.String[]> . build ( ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<java.lang.String[]> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( ) . getPayload ( ) instanceof java.lang.String ) ; org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( ) . getPayload ( ) instanceof java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { ApplicationContext org.springframework.integration.config.xml.ApplicationContext = this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; EventDrivenConsumer org.springframework.integration.config.xml.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertNotNull ( org.springframework.integration.config.xml.EventDrivenConsumer ) ; MessageBuilder < java.lang.String [] > org.springframework.integration.config.xml.MessageBuilder<java.lang.String[]> = MessageBuilder . withPayload ( new java.lang.String [] { STRING , STRING } ) ; Message < java.lang.String [] > org.springframework.integration.config.xml.Message<java.lang.String[]> = org.springframework.integration.config.xml.MessageBuilder<java.lang.String[]> . build ( ) ; DirectChannel org.springframework.integration.config.xml.DirectChannel = ( DirectChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.xml.DirectChannel . send ( org.springframework.integration.config.xml.Message<java.lang.String[]> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.config.xml.PollableChannel . receive ( ) . getPayload ( ) ; Assert . assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { ApplicationContext org.springframework.integration.config.xml.ApplicationContext = this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; EventDrivenConsumer org.springframework.integration.config.xml.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertNotNull ( org.springframework.integration.config.xml.EventDrivenConsumer ) ; MessageBuilder < java.lang.String > org.springframework.integration.config.xml.MessageBuilder<java.lang.String> = MessageBuilder . withPayload ( STRING ) ; Message < java.lang.String > org.springframework.integration.config.xml.Message<java.lang.String> = org.springframework.integration.config.xml.MessageBuilder<java.lang.String> . build ( ) ; DirectChannel org.springframework.integration.config.xml.DirectChannel = ( DirectChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.xml.DirectChannel . send ( org.springframework.integration.config.xml.Message<java.lang.String> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( ) . getPayload ( ) . equals ( STRING ) ) ; org.springframework.integration.config.xml.MessageBuilder<java.lang.String> = MessageBuilder . withPayload ( STRING ) ; org.springframework.integration.config.xml.Message<java.lang.String> = org.springframework.integration.config.xml.MessageBuilder<java.lang.String> . build ( ) ; org.springframework.integration.config.xml.DirectChannel . send ( org.springframework.integration.config.xml.Message<java.lang.String> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( ) . getPayload ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { ApplicationContext org.springframework.integration.config.xml.ApplicationContext = this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; EventDrivenConsumer org.springframework.integration.config.xml.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertNotNull ( org.springframework.integration.config.xml.EventDrivenConsumer ) ; MessageBuilder < java.lang.String > org.springframework.integration.config.xml.MessageBuilder<java.lang.String> = MessageBuilder . withPayload ( STRING ) ; Message < java.lang.String > org.springframework.integration.config.xml.Message<java.lang.String> = org.springframework.integration.config.xml.MessageBuilder<java.lang.String> . build ( ) ; DirectChannel org.springframework.integration.config.xml.DirectChannel = ( DirectChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.xml.DirectChannel . send ( org.springframework.integration.config.xml.Message<java.lang.String> ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Assert . assertTrue ( org.springframework.integration.config.xml.PollableChannel . receive ( ) . getPayload ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { ApplicationContext org.springframework.integration.config.xml.ApplicationContext = this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( int , NUMBER , NUMBER ) ; Message < java.lang.Integer > org.springframework.integration.config.xml.Message<java.lang.Integer> = MessageBuilder . withPayload ( int ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<java.lang.Integer> ) ; } PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( NUMBER + NUMBER + NUMBER + NUMBER + NUMBER , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { ApplicationContext org.springframework.integration.config.xml.ApplicationContext = this . org.springframework.integration.config.xml.ApplicationContext ( java.lang.String ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = ( MessageChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = ( PollableChannel ) org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.config.xml.ApplicationContext org.springframework.integration.config.xml.ApplicationContext ( java.lang.String java.lang.String ) { java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ; GenericApplicationContext org.springframework.integration.config.xml.GenericApplicationContext = new GenericApplicationContext ( ) ; XmlBeanDefinitionReader org.springframework.integration.config.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.integration.config.xml.GenericApplicationContext ) ; org.springframework.integration.config.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_XSD ) ; org.springframework.integration.config.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( new InputStreamResource ( java.io.ByteArrayInputStream ) ) ; org.springframework.integration.config.xml.GenericApplicationContext . refresh ( ) ; return org.springframework.integration.config.xml.GenericApplicationContext ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( int int , int int , int int ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . CORRELATION_ID , int ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.String [] java.lang.String[] ) { return CollectionUtils . arrayToList ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String [] java.lang.String[] ) { return StringUtils . arrayToDelimitedString ( java.lang.String[] , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return ( java.lang.String . boolean ( STRING ) ) ? STRING : STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.List<java.lang.Integer> ) { int += java.lang.Integer ; } return int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
