<METHOD_START> @ Test public void void ( ) { IntegrationTestUtils . assertSession ( org.springframework.cassandra.test.integration.config.xml.Session ) ; IntegrationTestUtils . assertKeyspaceExists ( STRING , org.springframework.cassandra.test.integration.config.xml.Session ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.CqlOperations ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolingOptions org.springframework.cassandra.test.integration.config.xml.PoolingOptions = org.springframework.cassandra.test.integration.config.xml.Cluster . getConfiguration ( ) . getPoolingOptions ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getHeartbeatIntervalSeconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getIdleTimeoutSeconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getCoreConnectionsPerHost ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getMaxConnectionsPerHost ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getMaxRequestsPerConnection ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getNewConnectionThreshold ( HostDistance . LOCAL ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getCoreConnectionsPerHost ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getMaxConnectionsPerHost ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getMaxRequestsPerConnection ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.PoolingOptions . getNewConnectionThreshold ( HostDistance . REMOTE ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SocketOptions org.springframework.cassandra.test.integration.config.xml.SocketOptions = org.springframework.cassandra.test.integration.config.xml.Cluster . getConfiguration ( ) . getSocketOptions ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions ) . isNotNull ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getConnectTimeoutMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getKeepAlive ( ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getReadTimeoutMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getReceiveBufferSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getReuseAddress ( ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getSendBufferSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getSoLinger ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.test.integration.config.xml.SocketOptions . getTcpNoDelay ( ) ) . isFalse ( ) ; }  <METHOD_END>
