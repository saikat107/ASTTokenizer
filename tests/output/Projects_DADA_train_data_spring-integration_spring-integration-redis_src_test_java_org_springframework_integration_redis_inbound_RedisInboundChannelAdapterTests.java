<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { void ( int ) ; } }  <METHOD_END>
<METHOD_START> private void void ( int int ) throws java.lang.Exception { int int = NUMBER ; java.lang.String java.lang.String = STRING ; QueueChannel org.springframework.integration.redis.inbound.QueueChannel = new QueueChannel ( ) ; RedisConnectionFactory org.springframework.integration.redis.inbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; RedisInboundChannelAdapter org.springframework.integration.redis.inbound.RedisInboundChannelAdapter = new RedisInboundChannelAdapter ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . setTopics ( java.lang.String ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . setOutputChannel ( org.springframework.integration.redis.inbound.QueueChannel ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . start ( ) ; StringRedisTemplate org.springframework.integration.redis.inbound.StringRedisTemplate = new StringRedisTemplate ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . afterPropertiesSet ( ) ; awaitFullySubscribed ( TestUtils . getPropertyValue ( org.springframework.integration.redis.inbound.RedisInboundChannelAdapter , STRING , RedisMessageListenerContainer .class ) , org.springframework.integration.redis.inbound.StringRedisTemplate , java.lang.String , org.springframework.integration.redis.inbound.QueueChannel , STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.String java.lang.String = STRING + int + STRING + int ; org.springframework.integration.redis.inbound.StringRedisTemplate . convertAndSend ( java.lang.String , java.lang.String ) ; } int int = NUMBER ; for ( int int = NUMBER ; int < int ; int ++ ) { Message < ? > org.springframework.integration.redis.inbound.Message<?> = org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; if ( org.springframework.integration.redis.inbound.Message<> == null ) { throw new java.lang.RuntimeException ( STRING + int + STRING + int ) ; } assertNotNull ( org.springframework.integration.redis.inbound.Message<> ) ; assertTrue ( org.springframework.integration.redis.inbound.Message<> . getPayload ( ) . toString ( ) . startsWith ( STRING ) ) ; int ++ ; } assertEquals ( int , int ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . stop ( ) ; java.lang.String = STRING ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . setTopics ( java.lang.String ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . setSerializer ( null ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . start ( ) ; RedisTemplate < ? , ? > org.springframework.integration.redis.inbound.RedisTemplate<?,?> = new RedisTemplate <> ( ) ; org.springframework.integration.redis.inbound.RedisTemplate<,> . setConnectionFactory ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.RedisTemplate<,> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.inbound.RedisTemplate<,> . afterPropertiesSet ( ) ; awaitFullySubscribed ( TestUtils . getPropertyValue ( org.springframework.integration.redis.inbound.RedisInboundChannelAdapter , STRING , RedisMessageListenerContainer .class ) , org.springframework.integration.redis.inbound.RedisTemplate<,> , java.lang.String , org.springframework.integration.redis.inbound.QueueChannel , STRING . byte[] ( ) ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.String java.lang.String = STRING + int + STRING + int ; org.springframework.integration.redis.inbound.RedisTemplate<,> . convertAndSend ( java.lang.String , java.lang.String . byte[] ( ) ) ; } int = NUMBER ; for ( int int = NUMBER ; int < int ; int ++ ) { Message < ? > org.springframework.integration.redis.inbound.Message<?> = org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; if ( org.springframework.integration.redis.inbound.Message<> == null ) { throw new java.lang.RuntimeException ( STRING + int + STRING + int ) ; } assertNotNull ( org.springframework.integration.redis.inbound.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.inbound.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( byte [] .class ) ) ; assertTrue ( new java.lang.String ( ( byte [] ) java.lang.Object ) . boolean ( STRING ) ) ; int ++ ; } assertEquals ( int , int ) ; org.springframework.integration.redis.inbound.RedisInboundChannelAdapter . stop ( ) ; }  <METHOD_END>
