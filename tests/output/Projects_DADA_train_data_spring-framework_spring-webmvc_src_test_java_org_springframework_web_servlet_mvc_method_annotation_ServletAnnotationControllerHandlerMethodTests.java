<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ControllerWithEmptyValueMapping .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setServletPath ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ControllerWithErrorThrown .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setServletPath ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.CustomAnnotationController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , HttpServletResponse . SC_OK , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext = initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequiredParamController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , HttpServletResponse . SC_BAD_REQUEST , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext . isSingleton ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequiredParamController .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequiredParamController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , HttpServletResponse . SC_BAD_REQUEST , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.OptionalParamController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.OptionalParamController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DefaultValueParamController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( PropertyPlaceholderConfigurer .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DefaultExpressionValueParamController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; try { getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( PropertyPlaceholderConfigurer .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( FormattingConversionServiceFactoryBean .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestBeanConverter ( ) ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( ConfigurableWebBindingInitializer .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.NestedSetController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( FormattingConversionServiceFactoryBean .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestBeanConverter ( ) ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( ConfigurableWebBindingInitializer .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( FormattingConversionServiceFactoryBean .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.AnnotatedExceptionRaisingConverter ( ) ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( ConfigurableWebBindingInitializer .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.PathVariableWithCustomConverterController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( FormattingConversionServiceFactoryBean .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.AnnotatedExceptionRaisingConverter ( ) ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( ConfigurableWebBindingInitializer .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MethodNotAllowedController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , HttpServletResponse . SC_METHOD_NOT_ALLOWED , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ; assertNotNull ( STRING , java.lang.String ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( StringUtils . delimitedListToStringArray ( java.lang.String , STRING ) ) ) ; assertEquals ( STRING , NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertTrue ( STRING , java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( STRING , java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( InternalResourceViewResolver .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.EmptyParameterListHandlerMethodController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.EmptyParameterListHandlerMethodController . boolean = false ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.EmptyParameterListHandlerMethodController . boolean ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( InternalResourceViewResolver .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelExposingViewResolver .class ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySessionAttributesController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setSession ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelExposingViewResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelExposingViewResolver .class ) ) ; DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySessionAttributesControllerImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setSession ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelExposingViewResolver .class ) ) ; DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelExposingViewResolver .class ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterizedControllerImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setSession ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelExposingViewResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelExposingViewResolver .class ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterizedControllerImplWithOverriddenMappings .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setSession ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) != null ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; assertTrue ( ( ( java.util.Map ) org.springframework.web.servlet.mvc.method.annotation.HttpSession . getAttribute ( STRING ) ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelExposingViewResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyAdaptedController .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyAdaptedController2 .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyAdaptedController3 .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { initServletWithControllers ( java.lang.Class<> ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setCookies ( new Cookie ( STRING , STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyFormController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyModelFormController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyFormController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyWebBindingInitializer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyCommandProvidingFormController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyWebBindingInitializer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyWebBindingInitializer ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletWebArgumentResolverAdapter ( new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArgumentResolver ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyTypedCommandProvidingFormController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyWebBindingInitializer ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> . add ( new ServletWebArgumentResolverAdapter ( new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArgumentResolver ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.List<org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver> ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyBinderInitializingCommandProvidingFormController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecificBinderInitializingCommandProvidingFormController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestViewResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockServletContext org.springframework.web.servlet.mvc.method.annotation.MockServletContext = new MockServletContext ( ) ; final MockServletConfig org.springframework.web.servlet.mvc.method.annotation.MockServletConfig = new MockServletConfig ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext ) ; WebApplicationContext org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext = initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . setServletContext ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerResolvableDependency ( ServletConfig .class , org.springframework.web.servlet.mvc.method.annotation.MockServletConfig ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterDispatchingController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext , STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MockServletConfig , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getId ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getRequestURI ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getLocale ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MockServletConfig , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.HttpSession . getId ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getRequestURI ( ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterDispatchingController org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterDispatchingController = ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterDispatchingController ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.web.servlet.mvc.method.annotation.WebApplicationContext . getBean ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterDispatchingController .class . java.lang.String ( ) ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterDispatchingController . org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyParameterDispatchingController . org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . setServletContext ( org.springframework.web.servlet.mvc.method.annotation.MockServletContext ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerResolvableDependency ( ServletConfig .class , org.springframework.web.servlet.mvc.method.annotation.MockServletConfig ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyRelativePathDispatchingController .class ) ; getServlet ( ) . init ( new MockServletConfig ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyRelativeMethodPathDispatchingController .class ) ; getServlet ( ) . init ( new MockServletConfig ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyNullCommandController .class ) ; getServlet ( ) . init ( new MockServletConfig ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setUserPrincipal ( new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.OtherPrincipal ( ) ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ChildController .class ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.web.servlet.mvc.method.annotation.BeanCreationException ) { assertTrue ( org.springframework.web.servlet.mvc.method.annotation.BeanCreationException . getCause ( ) instanceof java.lang.IllegalStateException ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.BeanCreationException . getCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.PathOrderingController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestResponseBodyController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestResponseBodyController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; StringHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestResponseBodyProducesController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; StringHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.StringHttpMessageConverter ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestResponseBodyController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new ByteArrayHttpMessageConverter ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestResponseBodyController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new ByteArrayHttpMessageConverter ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestResponseBodyController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.NotReadableMessageConverter ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestResponseBodyController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , HttpServletResponse . SC_BAD_REQUEST , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.NotReadableMessageConverter ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ResponseEntityController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.SimpleMessageConverter ( new MediaType ( STRING , STRING ) , MediaType . ALL ) ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestResponseBodyController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new StringHttpMessageConverter ( ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> . add ( new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.SimpleMessageConverter ( new MediaType ( STRING , STRING ) , MediaType . ALL ) ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ResponseBodyVoidController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { Jaxb2Marshaller org.springframework.web.servlet.mvc.method.annotation.Jaxb2Marshaller = new Jaxb2Marshaller ( ) ; org.springframework.web.servlet.mvc.method.annotation.Jaxb2Marshaller . setClassesToBeBound ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.A .class , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.B .class ) ; try { org.springframework.web.servlet.mvc.method.annotation.Jaxb2Marshaller . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanCreationException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } MarshallingHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( org.springframework.web.servlet.mvc.method.annotation.Jaxb2Marshaller ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.MarshallingHttpMessageConverter ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestBodyArgMismatchController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { Jaxb2Marshaller org.springframework.web.servlet.mvc.method.annotation.Jaxb2Marshaller = new Jaxb2Marshaller ( ) ; org.springframework.web.servlet.mvc.method.annotation.Jaxb2Marshaller . setClassesToBeBound ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.A .class , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.B .class ) ; try { org.springframework.web.servlet.mvc.method.annotation.Jaxb2Marshaller . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanCreationException ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } MarshallingHttpMessageConverter org.springframework.web.servlet.mvc.method.annotation.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( org.springframework.web.servlet.mvc.method.annotation.Jaxb2Marshaller ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.MarshallingHttpMessageConverter ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ContentTypeHeadersController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ConsumesController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.NegatedContentTypeHeadersController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.AcceptHeadersController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ProducesController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ResponseStatusController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getErrorMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; ModelAndViewResolver [] org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver[] = new ModelAndViewResolver [] { new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyModelAndViewResolver ( ) } ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver[] ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelAndViewResolverController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; ModelAndViewResolver [] org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver[] = new ModelAndViewResolver [] { new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyModelAndViewResolver ( ) } ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewResolver[] ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.BindingCookieValueController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setCookies ( new Cookie ( STRING , STRING ) ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.AmbiguousParamsController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.AmbiguousPathAndRequestMethodController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestControllerImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestParamMapController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , new java.lang.String [] { STRING , STRING } ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RequestHeaderMapController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , new java.lang.String [] { STRING , STRING } ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.IMyControllerImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.IMyControllerImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyAbstractControllerImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TrailingSlashController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.CustomMapEditorController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MultipartController .class ) ; MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MultipartController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MultipartController .class ) ; MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MultipartController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MultipartController .class ) ; MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MultipartController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( FormattingConversionServiceFactoryBean .class ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( ConfigurableWebBindingInitializer .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.CsvController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( FormattingConversionServiceFactoryBean .class ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( ConfigurableWebBindingInitializer .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.NoPathGetAndM2PostController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.HeadersConditionController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getForwardedUrl ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getForwardedUrl ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RedirectAttributesController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getForwardedUrl ( ) ) ; assertTrue ( RequestContextUtils . getOutputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) . isEmpty ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setSession ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getRedirectedUrl ( ) ) ; assertEquals ( STRING , RequestContextUtils . getOutputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) . get ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setQueryString ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setSession ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; assertTrue ( RequestContextUtils . getOutputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.RedirectAttributesController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; HttpSession org.springframework.web.servlet.mvc.method.annotation.HttpSession = org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getSession ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getRedirectedUrl ( ) ) ; assertEquals ( STRING , RequestContextUtils . getOutputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) . get ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setQueryString ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setSession ( org.springframework.web.servlet.mvc.method.annotation.HttpSession ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; assertTrue ( RequestContextUtils . getOutputFlashMap ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.PrototypeController .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.PrototypeController .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ThisWillActuallyRun .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.HttpHeadersResponseController .class ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( new MockHttpServletRequest ( STRING , STRING ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , MockHttpServletResponse . SC_CREATED , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeaderNames ( ) . size ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.HttpHeadersResponseController .class ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( new MockHttpServletRequest ( STRING , STRING ) , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , MockHttpServletResponse . SC_CREATED , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeaderNames ( ) . size ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TextRestController .class ) ; byte [] byte[] = STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( byte[] ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertArrayEquals ( byte[] , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TextRestController .class ) ; byte [] byte[] = STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( byte[] ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentType ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertArrayEquals ( byte[] , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TextRestController .class ) ; byte [] byte[] = STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( byte[] ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentType ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertArrayEquals ( byte[] , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServlet ( new ApplicationContextInitializer < GenericWebApplicationContext > ( ) { @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; } } , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TextRestController .class ) ; byte [] byte[] = STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContent ( byte[] ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentType ( ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertArrayEquals ( byte[] , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext ) { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; RootBeanDefinition org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition = new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ; org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , org.springframework.web.servlet.mvc.method.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelAndViewController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getForwardedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelAndViewController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getForwardedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ResponseEntityController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentLength ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) . length == NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentLength ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ResponseEntityController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ResponseEntityController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsByteArray ( ) . length == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DataClassController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.mvc.method.annotation.ServletException , java.io.IOException { initServletWithControllers ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DataClassController .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addParameter ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; getServlet ( ) . service ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public void void ( java.lang.Exception java.lang.Exception , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.Exception . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { throw new java.lang.AssertionError ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public void void ( java.lang.Error java.lang.Error , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.Error . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( STRING ) java.lang.String java.lang.String , @ RequestParam ( STRING ) int int , @ RequestHeader ( STRING ) long long , @ CookieValue ( name = STRING ) Cookie org.springframework.web.servlet.mvc.method.annotation.Cookie , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + java.lang.String + STRING + int + STRING + long + STRING + org.springframework.web.servlet.mvc.method.annotation.Cookie . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , Errors org.springframework.web.servlet.mvc.method.annotation.Errors , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( STRING ) java.lang.String java.lang.String , int int , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , @ RequestHeader ( STRING ) java.lang.String java.lang.String , @ CookieValue ( STRING ) java.lang.String java.lang.String ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + java.lang.String + STRING + int + STRING + java.lang.String + STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , Errors org.springframework.web.servlet.mvc.method.annotation.Errors , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( STRING ) T T , int int , @ RequestHeader java.lang.Integer java.lang.Integer , @ CookieValue int int , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + T + STRING + int + STRING + java.lang.Integer + STRING + int ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( @ RequestParam ( STRING ) java.lang.String java.lang.String , @ RequestParam ( value = STRING , required = false ) java.lang.String java.lang.String , int int ) { assertNull ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( @ RequestParam ( STRING ) java.lang.String java.lang.String , @ RequestParam ( value = STRING , required = false ) java.lang.String java.lang.String , int int ) { assertNull ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( @ RequestParam ( STRING ) java.lang.String java.lang.String , int int , @ RequestHeader java.lang.Integer java.lang.Integer , @ CookieValue int int , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + java.lang.String + STRING + int + STRING + java.lang.Integer + STRING + int ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , Errors org.springframework.web.servlet.mvc.method.annotation.Errors , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ InitBinder public void void ( @ RequestParam ( STRING ) java.lang.String java.lang.String , @ RequestParam ( value = STRING , required = false ) java.lang.String java.lang.String , int int ) { assertNull ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ModelAttribute public void void ( @ RequestParam ( STRING ) java.lang.String java.lang.String , @ RequestParam ( value = STRING , required = false ) java.lang.String java.lang.String , int int ) { assertNull ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) { org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.EmptyParameterListHandlerMethodController . boolean = true ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) public java.lang.String java.lang.String ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new java.lang.Object ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new java.lang.Object ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . POST ) public java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) java.lang.Object java.lang.Object ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) java.lang.String java.lang.String ( Model org.springframework.web.servlet.mvc.method.annotation.Model );  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . POST ) java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new java.lang.Object ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new java.lang.Object ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) java.lang.Object java.lang.Object ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( STRING ) java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ( )  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) java.lang.String java.lang.String ( Model org.springframework.web.servlet.mvc.method.annotation.Model );  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . POST ) java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) T T );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> = new java.util.LinkedList<org.springframework.web.servlet.mvc.method.annotation.TestBean> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . add ( new TestBean ( STRING ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . add ( new TestBean ( STRING ) ) ; return java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new TestBean ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new TestBean ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ModelAttribute ( STRING ) public java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> = new java.util.LinkedList<org.springframework.web.servlet.mvc.method.annotation.TestBean> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . add ( new TestBean ( STRING ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . add ( new TestBean ( STRING ) ) ; return java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ RequestMapping ( method = RequestMethod . GET ) public java.lang.String java.lang.String ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new TestBean ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new TestBean ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ RequestMapping ( method = RequestMethod . POST ) public java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( STRING ) public java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> = new java.util.LinkedList<org.springframework.web.servlet.mvc.method.annotation.TestBean> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . add ( new TestBean ( STRING ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . add ( new TestBean ( STRING ) ) ; return java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , BindingResult org.springframework.web.servlet.mvc.method.annotation.BindingResult , ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap ) { FieldError org.springframework.web.servlet.mvc.method.annotation.FieldError = org.springframework.web.servlet.mvc.method.annotation.BindingResult . getFieldError ( STRING ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.FieldError ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.FieldError . getRejectedValue ( ) ) ; if ( ! org.springframework.web.servlet.mvc.method.annotation.ModelMap . containsKey ( STRING ) ) { org.springframework.web.servlet.mvc.method.annotation.ModelMap . addAttribute ( STRING , STRING ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> = new java.util.LinkedList<org.springframework.web.servlet.mvc.method.annotation.TestBean> <> ( ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . add ( new TestBean ( STRING ) ) ; java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . add ( new TestBean ( STRING ) ) ; return java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ModelAttribute ( STRING ) public java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , BindingResult org.springframework.web.servlet.mvc.method.annotation.BindingResult , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { if ( ! org.springframework.web.servlet.mvc.method.annotation.Model . containsAttribute ( STRING ) ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , STRING ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ ModelAttribute ( STRING ) private org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ValidTestBean org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ValidTestBean ( @ RequestParam T T , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , @ RequestParam java.util.Date java.util.Date ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ValidTestBean org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ValidTestBean = new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ValidTestBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ValidTestBean . setName ( T . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + T . java.lang.String ( ) ) ; return org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ValidTestBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) @ Valid TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , BindingResult org.springframework.web.servlet.mvc.method.annotation.BindingResult , ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap ) { if ( ! org.springframework.web.servlet.mvc.method.annotation.BindingResult . hasFieldErrors ( STRING ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } return super. java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.BindingResult , org.springframework.web.servlet.mvc.method.annotation.ModelMap ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( TB TB , BindingResult org.springframework.web.servlet.mvc.method.annotation.BindingResult , ExtendedModelMap org.springframework.web.servlet.mvc.method.annotation.ExtendedModelMap , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg ) { TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) TB ; org.springframework.web.servlet.mvc.method.annotation.TestBean . setName ( STRING ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ExtendedModelMap . get ( STRING ) instanceof DerivedTestBean ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg ) ; return super. java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.BindingResult , org.springframework.web.servlet.mvc.method.annotation.ExtendedModelMap ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( TB TB , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , new TestBean ( STRING , NUMBER ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ ModelAttribute protected TB2 TB2 ( ) { return ( TB2 ) new DerivedTestBean ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ InitBinder private void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) { org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . initBeanPropertyAccess ( ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . setRequiredFields ( STRING ) ; LocalValidatorFactoryBean org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean = new LocalValidatorFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean . afterPropertiesSet ( ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . setValidator ( org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING ) ; java.text.SimpleDateFormat . void ( false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( java.text.SimpleDateFormat , false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( @ ModelAttribute ( STRING ) @ Valid TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , BindingResult org.springframework.web.servlet.mvc.method.annotation.BindingResult , ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap ) { if ( ! org.springframework.web.servlet.mvc.method.annotation.BindingResult . hasFieldErrors ( STRING ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } return super. java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.TestBean , org.springframework.web.servlet.mvc.method.annotation.BindingResult , org.springframework.web.servlet.mvc.method.annotation.ModelMap ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ InitBinder ( { STRING , STRING } ) private void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , java.lang.String java.lang.String , @ RequestParam ( STRING ) java.lang.String [] java.lang.String[] ) { LocalValidatorFactoryBean org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean = new LocalValidatorFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean . afterPropertiesSet ( ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . setValidator ( org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING ) ; java.text.SimpleDateFormat . void ( false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( java.text.SimpleDateFormat , false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) { LocalValidatorFactoryBean org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean = new LocalValidatorFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean . afterPropertiesSet ( ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . setValidator ( org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING ) ; java.text.SimpleDateFormat . void ( false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( java.text.SimpleDateFormat , false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) { if ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) . equals ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg .class ) ) { return new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg ( STRING ) ; } return UNRESOLVED ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) throws java.io.IOException { if ( this . org.springframework.web.servlet.mvc.method.annotation.ServletContext == null || this . org.springframework.web.servlet.mvc.method.annotation.ServletConfig == null || this . org.springframework.web.servlet.mvc.method.annotation.HttpSession == null || this . org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest == null || this . org.springframework.web.servlet.mvc.method.annotation.WebRequest == null ) { throw new java.lang.IllegalStateException ( ) ; } org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . setAttribute ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.ServletContext ) ; org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . setAttribute ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.ServletConfig ) ; org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . setAttribute ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.HttpSession . getId ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . setAttribute ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getRequestURI ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . setAttribute ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.WebRequest . getLocale ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = { STRING , STRING } ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET , params = { STRING , STRING } ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = { RequestMethod . POST , RequestMethod . GET } , params = STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = { STRING , STRING } ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET , params = { STRING , STRING } ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING STRING ) public void void ( HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public org.springframework.web.servlet.mvc.method.annotation.TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public java.security.Principal java.security.Principal ( ) { return new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestPrincipal ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ ModelAttribute TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , Errors org.springframework.web.servlet.mvc.method.annotation.Errors , @ ModelAttribute org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestPrincipal org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestPrincipal , org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.OtherPrincipal org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.OtherPrincipal , java.io.Writer java.io.Writer ) throws java.io.IOException { assertNull ( org.springframework.web.servlet.mvc.method.annotation.TestBean ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.TestPrincipal ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.OtherPrincipal ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.Errors . hasErrors ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.Errors . reject ( STRING ) ; java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.View org.springframework.web.servlet.mvc.method.annotation.View ( final java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.lang.Exception { return new View ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING , STRING } ) public void void ( java.util.Map java.util.Map , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse )						throws java.lang.Exception { TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) java.util.Map . java.lang.Object ( STRING ) ; if ( org.springframework.web.servlet.mvc.method.annotation.TestBean == null ) { org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) java.util.Map . java.lang.Object ( STRING ) ; } if ( org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) != null && org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) . endsWith ( STRING ) ) { assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.TestBean . getDate ( ) . getYear ( ) ) ; } Errors org.springframework.web.servlet.mvc.method.annotation.Errors = ( Errors ) java.util.Map . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + STRING ) ; if ( org.springframework.web.servlet.mvc.method.annotation.Errors == null ) { org.springframework.web.servlet.mvc.method.annotation.Errors = ( Errors ) java.util.Map . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + STRING ) ; } if ( org.springframework.web.servlet.mvc.method.annotation.Errors . hasFieldErrors ( STRING ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( java.util.Map . boolean ( STRING ) ) { assertTrue ( java.util.Map . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + STRING ) instanceof Errors ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> = ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > ) java.util.Map . java.lang.Object ( STRING ) ; if ( org.springframework.web.servlet.mvc.method.annotation.Errors . hasFieldErrors ( STRING ) ) { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.String + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldError ( STRING ) . getCode ( ) + STRING + java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . get ( NUMBER ) . getName ( ) + STRING + java.util.Map . java.lang.Object ( STRING ) + ( java.util.Map . boolean ( STRING ) ? STRING + java.util.Map . java.lang.Object ( STRING ) : STRING ) ) ; } else { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.String + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldValue ( STRING ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldValue ( STRING ) ) ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING , STRING } ) public void void ( java.util.Map java.util.Map , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse )						throws java.lang.Exception { TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) java.util.Map . java.lang.Object ( STRING ) ; if ( org.springframework.web.servlet.mvc.method.annotation.TestBean == null ) { org.springframework.web.servlet.mvc.method.annotation.TestBean = ( TestBean ) java.util.Map . java.lang.Object ( STRING ) ; } if ( org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) != null && org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) . endsWith ( STRING ) ) { assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.TestBean . getDate ( ) . getYear ( ) ) ; } Errors org.springframework.web.servlet.mvc.method.annotation.Errors = ( Errors ) java.util.Map . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + STRING ) ; if ( org.springframework.web.servlet.mvc.method.annotation.Errors == null ) { org.springframework.web.servlet.mvc.method.annotation.Errors = ( Errors ) java.util.Map . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + STRING ) ; } if ( org.springframework.web.servlet.mvc.method.annotation.Errors . hasFieldErrors ( STRING ) ) { throw new java.lang.IllegalStateException ( ) ; } if ( java.util.Map . boolean ( STRING ) ) { assertTrue ( java.util.Map . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + STRING ) instanceof Errors ) ; } java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> = ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> < TestBean > ) java.util.Map . java.lang.Object ( STRING ) ; if ( org.springframework.web.servlet.mvc.method.annotation.Errors . hasFieldErrors ( STRING ) ) { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.String + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldError ( STRING ) . getCode ( ) + STRING + java.util.List<org.springframework.web.servlet.mvc.method.annotation.TestBean> . get ( NUMBER ) . getName ( ) + STRING + java.util.Map . java.lang.Object ( STRING ) + ( java.util.Map . boolean ( STRING ) ? STRING + java.util.Map . java.lang.Object ( STRING ) : STRING ) ) ; } else { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.String + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getName ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.TestBean . getAge ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldValue ( STRING ) + STRING + org.springframework.web.servlet.mvc.method.annotation.Errors . getFieldValue ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.View org.springframework.web.servlet.mvc.method.annotation.View ( final java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.lang.Exception { return new View ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } @ java.lang.Override public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) { org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . setAttribute ( STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getSession ( ) . setAttribute ( STRING , java.util.Map<java.lang.String,> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) { org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . setAttribute ( STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getSession ( ) . setAttribute ( STRING , java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) public void void ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) public void void ( HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse , @ RequestParam ( STRING ) java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( value = STRING , required = true ) int int , @ RequestHeader ( value = STRING , required = true ) java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( required = false ) java.lang.String java.lang.String , @ RequestParam ( required = false ) boolean boolean , @ RequestHeader ( value = STRING , required = false ) java.lang.String java.lang.String , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.String . java.lang.String ( java.lang.String ) + STRING + boolean + STRING + java.lang.String . java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( value = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestParam ( value = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestHeader ( defaultValue = STRING ) java.lang.String java.lang.String , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.String . java.lang.String ( java.lang.String ) + STRING + java.lang.String . java.lang.String ( java.lang.String ) + STRING + java.lang.String . java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( value = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestHeader ( defaultValue = STRING ) java.lang.String java.lang.String , @ Value ( STRING ) java.lang.String java.lang.String , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.String . java.lang.String ( java.lang.String ) + STRING + java.lang.String . java.lang.String ( java.lang.String ) + STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( GenericBean < ? > org.springframework.web.servlet.mvc.method.annotation.GenericBean<?> , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( org.springframework.web.servlet.mvc.method.annotation.GenericBean<> . getTestBeanSet ( ) . toString ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.GenericBean<> . getTestBeanSet ( ) . iterator ( ) . next ( ) . getClass ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.ITestBean org.springframework.web.servlet.mvc.method.annotation.ITestBean ( java.lang.String java.lang.String ) { return new TestBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ PathVariable ( STRING ) ITestBean org.springframework.web.servlet.mvc.method.annotation.ITestBean ) throws java.lang.Exception {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.ITestBean org.springframework.web.servlet.mvc.method.annotation.ITestBean ( java.lang.String java.lang.String ) { throw new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.AnnotatedExceptionRaisingConverter.NotFoundException ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . DELETE ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . HEAD ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . OPTIONS ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . PUT ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . TRACE ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = { STRING , STRING STRING } ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . PUT ) @ ResponseBody public java.lang.String java.lang.String ( @ RequestBody java.lang.String java.lang.String ) throws java.io.IOException { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . PATCH ) @ ResponseBody public java.lang.String java.lang.String ( @ RequestBody java.lang.String java.lang.String ) throws java.io.IOException { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . PUT , produces = STRING ) @ ResponseBody public java.lang.String java.lang.String ( @ RequestBody java.lang.String java.lang.String ) throws java.io.IOException { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseBody public void void ( ) java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . PUT ) public void void ( @ RequestBody org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.A org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.A ) throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> < MediaType > java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> ( ) { return java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage )				throws java.io.IOException , org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotReadableException { throw new HttpMessageNotReadableException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType , HttpOutputMessage org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage )				throws java.io.IOException , org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotWritableException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( MediaType ... org.springframework.web.servlet.mvc.method.annotation.MediaType[] ) { this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> = java.util.Arrays . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MediaType[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) { return java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> . contains ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) { return java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> . contains ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> < MediaType > java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> ( ) { return java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.web.servlet.mvc.method.annotation.HttpInputMessage )				throws java.io.IOException , org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotReadableException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType , HttpOutputMessage org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage )				throws java.io.IOException , org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotWritableException { org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage . getHeaders ( ) . setContentType ( org.springframework.web.servlet.mvc.method.annotation.MediaType ) ; org.springframework.web.servlet.mvc.method.annotation.HttpOutputMessage . getBody ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , headers = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , headers = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , consumes = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , consumes = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , headers = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , headers = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , headers = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , headers = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , produces = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , produces = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseStatus ( code = HttpStatus . CREATED , reason = STRING ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg ( ) { return new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object , ExtendedModelMap org.springframework.web.servlet.mvc.method.annotation.ExtendedModelMap , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) { if ( java.lang.Object instanceof org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MySpecialArg ) { return new ModelAndView ( new View ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse )							throws java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; } } ) ; } return UNRESOLVED ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse )							throws java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( params = STRING ) public void void ( @ RequestParam ( STRING ) int int , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + int ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) { org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . initBeanPropertyAccess ( ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING ) ; java.text.SimpleDateFormat . void ( false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( java.text.SimpleDateFormat , false ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) public void void ( @ CookieValue ( STRING ) java.util.Date java.util.Date , java.io.Writer java.io.Writer ) throws java.io.IOException { assertEquals ( STRING , new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER ) . java.util.Date ( ) , java.util.Date ) ; java.io.Writer . void ( STRING + new java.text.SimpleDateFormat ( STRING ) . java.lang.String ( java.util.Date ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( T T );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ RequestMapping ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyEntity org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyEntity ) { return new ModelAndView ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.io.Writer java.io.Writer ) throws java.io.IOException { for ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> . boolean ( ) ;) { java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> = java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> . java.util.Map.Entry<java.lang.String,java.lang.String> ( ) ; java.io.Writer . void ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) + STRING + java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; if ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> . boolean ( ) ) { java.io.Writer . void ( ',' ) ; } } }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> , java.io.Writer java.io.Writer ) throws java.io.IOException { for ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> = org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . entrySet ( ) . iterator ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> . boolean ( ) ;) { java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> = java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> ( ) ; java.io.Writer . void ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) + STRING ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.io.Writer . void ( java.lang.String ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.io.Writer . void ( ',' ) ; } } java.io.Writer . void ( ']' ) ; if ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> . boolean ( ) ) { java.io.Writer . void ( ',' ) ; } } }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestHeader java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.io.Writer java.io.Writer ) throws java.io.IOException { for ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> . boolean ( ) ;) { java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> = java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> . java.util.Map.Entry<java.lang.String,java.lang.String> ( ) ; java.io.Writer . void ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) + STRING + java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; if ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.String>> . boolean ( ) ) { java.io.Writer . void ( ',' ) ; } } }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestHeader MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> , java.io.Writer java.io.Writer )				throws java.io.IOException { for ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> = org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . entrySet ( ) . iterator ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> . boolean ( ) ;) { java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> = java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> ( ) ; java.io.Writer . void ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) + STRING ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.io.Writer . void ( java.lang.String ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.io.Writer . void ( ',' ) ; } } java.io.Writer . void ( ']' ) ; if ( java.util.Iterator<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> . boolean ( ) ) { java.io.Writer . void ( ',' ) ; } } }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestHeader HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , java.io.Writer java.io.Writer ) throws java.io.IOException { assertEquals ( STRING , new MediaType ( STRING , STRING ) , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . getContentType ( ) ) ; void ( org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , java.io.Writer ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) void void ( java.io.Writer java.io.Writer , @ RequestParam ( value = STRING , required = false ) java.lang.String java.lang.String ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.Writer java.io.Writer , @ RequestParam ( value = STRING , required = false ) java.lang.String java.lang.String ) throws java.io.IOException { java.io.Writer . void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public abstract void void ( java.io.Writer java.io.Writer ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . POST ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( HttpEntity < byte [] > org.springframework.web.servlet.mvc.method.annotation.HttpEntity<byte[]> ) throws java.lang.Exception { assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<byte[]> ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.HttpEntity<byte[]> . getHeaders ( ) . getFirst ( STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.HttpEntity<byte[]> . getBody ( ) , STRING ) ; assertEquals ( STRING , java.lang.String ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; return ResponseEntity . created ( java.net.URI ) . header ( STRING , STRING ) . body ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> ( ) { return ResponseEntity . notFound ( ) . header ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( ) { return ResponseEntity . ok ( ) . header ( STRING , STRING ) . body ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . HEAD ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> ( ) { return ResponseEntity . ok ( ) . header ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( ) { return ResponseEntity . ok ( ) . body ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) { org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . initBeanPropertyAccess ( ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Map .class , new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.CustomMapEditor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ RequestMapping ( STRING ) public void void ( @ RequestParam ( STRING ) java.util.Map java.util.Map , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + java.util.Map ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( StringUtils . hasText ( java.lang.String ) ) { void ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , java.lang.String ) ) ; } else { void ( null ) ; } }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) { org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.lang.String .class , new StringMultipartFileEditor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( STRING ) java.lang.String java.lang.String , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( STRING ) java.lang.String [] java.lang.String[] , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( StringUtils . arrayToDelimitedString ( java.lang.String[] , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( STRING ) java.lang.Integer java.lang.Integer , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( java.lang.Integer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( @ RequestParam ( STRING ) java.lang.Integer [] java.lang.Integer[] , HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) throws java.io.IOException { org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . getWriter ( ) . write ( StringUtils . arrayToDelimitedString ( java.lang.Integer[] , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( method = RequestMethod . GET ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET , headers = STRING ) @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) { org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . setRequiredFields ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public void void ( ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING + org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public java.lang.String java.lang.String ( TestBean org.springframework.web.servlet.mvc.method.annotation.TestBean , BindingResult org.springframework.web.servlet.mvc.method.annotation.BindingResult , RedirectAttributes org.springframework.web.servlet.mvc.method.annotation.RedirectAttributes ) { if ( org.springframework.web.servlet.mvc.method.annotation.BindingResult . hasErrors ( ) ) { return STRING ; } org.springframework.web.servlet.mvc.method.annotation.RedirectAttributes . addAttribute ( STRING , STRING ) . addAttribute ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.RedirectAttributes . addFlashAttribute ( STRING , STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Void> ( RedirectAttributes org.springframework.web.servlet.mvc.method.annotation.RedirectAttributes ) { org.springframework.web.servlet.mvc.method.annotation.RedirectAttributes . addFlashAttribute ( STRING , STRING ) ; java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; return ResponseEntity . status ( HttpStatus . FOUND ) . location ( java.net.URI ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ) { this . int ++ ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( Model org.springframework.web.servlet.mvc.method.annotation.Model ) { this . int ++ ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( int int , java.io.Writer java.io.Writer ) throws java.io.IOException { this . int ++ ; java.io.Writer . void ( STRING + this . int ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ResponseStatus ( HttpStatus . CREATED ) public org.springframework.web.servlet.mvc.method.annotation.HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders ( ) java.net.URISyntaxException { HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . setLocation ( new java.net.URI ( STRING ) ) ; return org.springframework.web.servlet.mvc.method.annotation.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ResponseStatus ( HttpStatus . CREATED ) public org.springframework.web.servlet.mvc.method.annotation.HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders ( ) java.net.URISyntaxException { return new HttpHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( @ RequestBody java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( @ RequestBody java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET , produces = STRING ) public java.lang.String java.lang.String ( @ RequestBody java.lang.String java.lang.String ) throws java.io.IOException { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( @ RequestBody java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyEntity org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.MyEntity ) { return new ModelAndView ( STRING , HttpStatus . UNPROCESSABLE_ENTITY ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) java.lang.Exception { throw new org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelAndViewController.TestException ( ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.ModelAndViewController.TestException .class ) public org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( ) { return new ModelAndView ( STRING , HttpStatus . UNPROCESSABLE_ENTITY ) ; }  <METHOD_END>
<METHOD_START> @ java.beans.ConstructorProperties ( { STRING , STRING } ) public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DataClass org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DataClass ) { return org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DataClass . java.lang.String + STRING + org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DataClass . int + STRING + org.springframework.web.servlet.mvc.method.annotation.ServletAnnotationControllerHandlerMethodTests.DataClass . int ; }  <METHOD_END>
