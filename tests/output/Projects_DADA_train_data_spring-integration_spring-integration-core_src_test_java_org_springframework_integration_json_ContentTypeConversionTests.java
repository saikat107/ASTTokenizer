<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; TestPerson org.springframework.integration.json.TestPerson = this . org.springframework.integration.json.ContentTypeConversionTests.ServiceGateway . org.springframework.integration.json.TestPerson ( java.lang.String ) ; assertEquals ( java.lang.String , this . java.util.concurrent.atomic.AtomicReference<java.lang.Object> . java.lang.Object ( ) ) ; assertEquals ( STRING , org.springframework.integration.json.TestPerson . getFirstName ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.json.TestPerson . getAge ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; java.lang.String java.lang.String = this . org.springframework.integration.json.ContentTypeConversionTests.ServiceGateway . java.lang.String ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Gateway ( headers = @ GatewayHeader ( name = MessageHeaders . CONTENT_TYPE , value = STRING ) ) org.springframework.integration.json.TestPerson org.springframework.integration.json.TestPerson ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> );  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.atomic.AtomicReference<java.lang.Object> < java.lang.Object > java.util.concurrent.atomic.AtomicReference<java.lang.Object> ( ) { return new java.util.concurrent.atomic.AtomicReference<java.lang.Object> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.json.MessageChannel org.springframework.integration.json.MessageChannel ( final java.util.concurrent.atomic.AtomicReference<java.lang.Object> < java.lang.Object > java.util.concurrent.atomic.AtomicReference<java.lang.Object> ) { return MessageChannels . direct ( ) . interceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.json.Message<?> < ? > org.springframework.integration.json.Message<?> ( Message < ? > org.springframework.integration.json.Message<?> , MessageChannel org.springframework.integration.json.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Object> . void ( org.springframework.integration.json.Message<> . getPayload ( ) ) ; return super. preSend ( org.springframework.integration.json.Message<> , org.springframework.integration.json.MessageChannel ) ; } } ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.json.Message<?> < ? > org.springframework.integration.json.Message<?> ( Message < ? > org.springframework.integration.json.Message<?> , MessageChannel org.springframework.integration.json.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Object> . void ( org.springframework.integration.json.Message<> . getPayload ( ) ) ; return super. preSend ( org.springframework.integration.json.Message<> , org.springframework.integration.json.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.json.IntegrationFlow org.springframework.integration.json.IntegrationFlow ( ) { return IntegrationFlows . from ( org.springframework.integration.json.ContentTypeConversionTests.ServiceGateway .class ) . channel ( STRING ) . handle ( this ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator @ Default public org.springframework.integration.json.TestPerson org.springframework.integration.json.TestPerson ( TestPerson org.springframework.integration.json.TestPerson ) { return org.springframework.integration.json.TestPerson ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator public java.lang.String java.lang.String ( @ Payload java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { return java.util.Map<,> . java.lang.String ( ) ; }  <METHOD_END>
