<METHOD_START> @ Before public void void ( ) { StaticWebApplicationContext org.springframework.web.servlet.config.annotation.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.config.annotation.StaticWebApplicationContext . registerSingleton ( STRING , FreeMarkerConfigurer .class ) ; org.springframework.web.servlet.config.annotation.StaticWebApplicationContext . registerSingleton ( STRING , TilesConfigurer .class ) ; org.springframework.web.servlet.config.annotation.StaticWebApplicationContext . registerSingleton ( STRING , GroovyMarkupConfigurer .class ) ; org.springframework.web.servlet.config.annotation.StaticWebApplicationContext . registerSingleton ( STRING , ScriptTemplateConfigurer .class ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry = new ViewResolverRegistry ( ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . setApplicationContext ( org.springframework.web.servlet.config.annotation.StaticWebApplicationContext ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . setContentNegotiationManager ( new ContentNegotiationManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( Ordered . LOWEST_PRECEDENCE , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getOrder ( ) ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . enableContentNegotiation ( ) ; assertEquals ( Ordered . HIGHEST_PRECEDENCE , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . hasRegistrations ( ) ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . freeMarker ( ) ; assertTrue ( this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . hasRegistrations ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . hasRegistrations ( ) ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . enableContentNegotiation ( ) ; assertTrue ( this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . hasRegistrations ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . size ( ) ) ; assertFalse ( this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . hasRegistrations ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { InternalResourceViewResolver org.springframework.web.servlet.config.annotation.InternalResourceViewResolver = new InternalResourceViewResolver ( STRING , STRING ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . viewResolver ( org.springframework.web.servlet.config.annotation.InternalResourceViewResolver ) ; assertSame ( org.springframework.web.servlet.config.annotation.InternalResourceViewResolver , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . beanName ( ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . size ( ) ) ; assertEquals ( BeanNameViewResolver .class , org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . jsp ( ) ; InternalResourceViewResolver org.springframework.web.servlet.config.annotation.InternalResourceViewResolver = T ( InternalResourceViewResolver .class ) ; void ( org.springframework.web.servlet.config.annotation.InternalResourceViewResolver , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . jsp ( STRING , STRING ) ; InternalResourceViewResolver org.springframework.web.servlet.config.annotation.InternalResourceViewResolver = T ( InternalResourceViewResolver .class ) ; void ( org.springframework.web.servlet.config.annotation.InternalResourceViewResolver , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . jsp ( ) . viewNames ( STRING , STRING ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . jsp ( ) . viewNames ( STRING , STRING ) ; assertNotNull ( this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . size ( ) ) ; assertEquals ( InternalResourceViewResolver .class , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( InternalResourceViewResolver .class , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . tiles ( ) ; T ( TilesViewResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . freeMarker ( ) . prefix ( STRING ) . suffix ( STRING ) . cache ( false ) ; FreeMarkerViewResolver org.springframework.web.servlet.config.annotation.FreeMarkerViewResolver = T ( FreeMarkerViewResolver .class ) ; void ( org.springframework.web.servlet.config.annotation.FreeMarkerViewResolver , STRING , STRING , STRING , STRING , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . freeMarker ( ) ; FreeMarkerViewResolver org.springframework.web.servlet.config.annotation.FreeMarkerViewResolver = T ( FreeMarkerViewResolver .class ) ; void ( org.springframework.web.servlet.config.annotation.FreeMarkerViewResolver , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . groovy ( ) . prefix ( STRING ) . suffix ( STRING ) . cache ( true ) ; GroovyMarkupViewResolver org.springframework.web.servlet.config.annotation.GroovyMarkupViewResolver = T ( GroovyMarkupViewResolver .class ) ; void ( org.springframework.web.servlet.config.annotation.GroovyMarkupViewResolver , STRING , STRING , STRING , STRING , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . groovy ( ) ; GroovyMarkupViewResolver org.springframework.web.servlet.config.annotation.GroovyMarkupViewResolver = T ( GroovyMarkupViewResolver .class ) ; void ( org.springframework.web.servlet.config.annotation.GroovyMarkupViewResolver , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . scriptTemplate ( ) . prefix ( STRING ) . suffix ( STRING ) . cache ( true ) ; ScriptTemplateViewResolver org.springframework.web.servlet.config.annotation.ScriptTemplateViewResolver = T ( ScriptTemplateViewResolver .class ) ; void ( org.springframework.web.servlet.config.annotation.ScriptTemplateViewResolver , STRING , STRING , STRING , STRING , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . scriptTemplate ( ) ; ScriptTemplateViewResolver org.springframework.web.servlet.config.annotation.ScriptTemplateViewResolver = T ( ScriptTemplateViewResolver .class ) ; void ( org.springframework.web.servlet.config.annotation.ScriptTemplateViewResolver , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingJackson2JsonView org.springframework.web.servlet.config.annotation.MappingJackson2JsonView = new MappingJackson2JsonView ( ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . enableContentNegotiation ( org.springframework.web.servlet.config.annotation.MappingJackson2JsonView ) ; ContentNegotiatingViewResolver org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver = T ( ContentNegotiatingViewResolver .class ) ; assertEquals ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.config.annotation.MappingJackson2JsonView ) , org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . getDefaultViews ( ) ) ; assertEquals ( Ordered . HIGHEST_PRECEDENCE , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MappingJackson2JsonView org.springframework.web.servlet.config.annotation.MappingJackson2JsonView = new MappingJackson2JsonView ( ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . enableContentNegotiation ( org.springframework.web.servlet.config.annotation.MappingJackson2JsonView ) ; ContentNegotiatingViewResolver org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver = T ( ContentNegotiatingViewResolver .class ) ; assertEquals ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.config.annotation.MappingJackson2JsonView ) , org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . getDefaultViews ( ) ) ; MarshallingView org.springframework.web.servlet.config.annotation.MarshallingView = new MarshallingView ( ) ; this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . enableContentNegotiation ( org.springframework.web.servlet.config.annotation.MarshallingView ) ; ContentNegotiatingViewResolver org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver = T ( ContentNegotiatingViewResolver .class ) ; assertEquals ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.config.annotation.MappingJackson2JsonView , org.springframework.web.servlet.config.annotation.MarshallingView ) , org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver . getDefaultViews ( ) ) ; assertSame ( org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver , org.springframework.web.servlet.config.annotation.ContentNegotiatingViewResolver ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T extends org.springframework.web.servlet.config.annotation.ViewResolver > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { assertNotNull ( this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . size ( ) ) ; assertEquals ( java.lang.Class<T> , this . org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . get ( NUMBER ) . getClass ( ) ) ; return ( T ) org.springframework.web.servlet.config.annotation.ViewResolverRegistry . getViewResolvers ( ) . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ViewResolver org.springframework.web.servlet.config.annotation.ViewResolver , java.lang.Object ... java.lang.Object[] ) { DirectFieldAccessor org.springframework.web.servlet.config.annotation.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.annotation.ViewResolver ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ , int ++ ) { java.lang.Object java.lang.Object = java.lang.Object[] [ int + NUMBER ] ; java.lang.Object java.lang.Object = org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( ( java.lang.String ) java.lang.Object[] [ int ] ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; } }  <METHOD_END>
