<METHOD_START> public void ( ) { this( false ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { MessagingTemplate org.springframework.integration.gateway.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.gateway.MessagingTemplate . setMessageConverter ( this . org.springframework.integration.gateway.SimpleMessageConverter ) ; org.springframework.integration.gateway.MessagingTemplate . setSendTimeout ( long ) ; org.springframework.integration.gateway.MessagingTemplate . setReceiveTimeout ( this . long ) ; this . org.springframework.integration.gateway.MessagingTemplate = org.springframework.integration.gateway.MessagingTemplate ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.gateway.MessageChannel ) { this . org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.gateway.MessageChannel ) { this . org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.gateway.MessageChannel ) { this . org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.integration.gateway.MessagingTemplate . setSendTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; this . org.springframework.integration.gateway.MessagingTemplate . setReceiveTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( InboundMessageMapper < ? > org.springframework.integration.gateway.InboundMessageMapper<?> ) { org.springframework.integration.gateway.InboundMessageMapper<?> = ( org.springframework.integration.gateway.InboundMessageMapper<> != null ) ? org.springframework.integration.gateway.InboundMessageMapper<> : new org.springframework.integration.gateway.MessagingGatewaySupport.DefaultRequestMapper ( ) ; this . org.springframework.integration.gateway.InboundMessageMapper = org.springframework.integration.gateway.InboundMessageMapper<> ; this . org.springframework.integration.gateway.SimpleMessageConverter . setInboundMessageMapper ( org.springframework.integration.gateway.InboundMessageMapper<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( OutboundMessageMapper < ? > org.springframework.integration.gateway.OutboundMessageMapper<?> ) { this . org.springframework.integration.gateway.SimpleMessageConverter . setOutboundMessageMapper ( org.springframework.integration.gateway.OutboundMessageMapper<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . org.springframework.integration.gateway.HistoryWritingMessagePostProcessor . setShouldTrack ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( int ) this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.gateway.MessageChannel != null ) , STRING ) ; Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.gateway.MessageChannel != null ) , STRING ) ; Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.gateway.MessageChannel != null ) , STRING ) ; this . org.springframework.integration.gateway.HistoryWritingMessagePostProcessor . setTrackableComponent ( this ) ; this . org.springframework.integration.gateway.HistoryWritingMessagePostProcessor . setMessageBuilderFactory ( this . getMessageBuilderFactory ( ) ) ; if ( this . getBeanFactory ( ) != null ) { this . org.springframework.integration.gateway.MessagingTemplate . setBeanFactory ( this . getBeanFactory ( ) ) ; if ( this . org.springframework.integration.gateway.InboundMessageMapper instanceof org.springframework.integration.gateway.MessagingGatewaySupport.DefaultRequestMapper ) { ( ( org.springframework.integration.gateway.MessagingGatewaySupport.DefaultRequestMapper ) this . org.springframework.integration.gateway.InboundMessageMapper ) . void ( this . getMessageBuilderFactory ( ) ) ; } this . org.springframework.integration.gateway.SimpleMessageConverter . setBeanFactory ( this . getBeanFactory ( ) ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! this . boolean ) { this . afterPropertiesSet ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.gateway.MessageChannel org.springframework.integration.gateway.MessageChannel ( ) { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null ) { this . org.springframework.integration.gateway.MessageChannel = getChannelResolver ( ) . resolveDestination ( this . java.lang.String ) ; this . java.lang.String = null ; } } } return this . org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.gateway.MessageChannel org.springframework.integration.gateway.MessageChannel ( ) { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null ) { this . org.springframework.integration.gateway.MessageChannel = getChannelResolver ( ) . resolveDestination ( this . java.lang.String ) ; this . java.lang.String = null ; } } } return this . org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.gateway.MessageChannel org.springframework.integration.gateway.MessageChannel ( ) { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null ) { this . org.springframework.integration.gateway.MessageChannel = getChannelResolver ( ) . resolveDestination ( this . java.lang.String ) ; this . java.lang.String = null ; } } } return this . org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { this . void ( ) ; Assert . notNull ( java.lang.Object , STRING ) ; MessageChannel org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ( ) ; Assert . state ( org.springframework.integration.gateway.MessageChannel != null , STRING ) ; try { if ( this . boolean ) { this . java.util.concurrent.atomic.AtomicLong . long ( ) ; } this . org.springframework.integration.gateway.MessagingTemplate . convertAndSend ( org.springframework.integration.gateway.MessageChannel , java.lang.Object , this . org.springframework.integration.gateway.HistoryWritingMessagePostProcessor ) ; } catch ( java.lang.Exception java.lang.Exception ) { MessageChannel org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ( ) ; if ( org.springframework.integration.gateway.MessageChannel != null ) { this . org.springframework.integration.gateway.MessagingTemplate . send ( org.springframework.integration.gateway.MessageChannel , new ErrorMessage ( java.lang.Exception ) ) ; } else { this . void ( java.lang.Exception , STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) { this . void ( ) ; MessageChannel org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ( ) ; Assert . state ( org.springframework.integration.gateway.MessageChannel != null && ( org.springframework.integration.gateway.MessageChannel instanceof PollableChannel ) , STRING ) ; return this . org.springframework.integration.gateway.MessagingTemplate . receiveAndConvert ( org.springframework.integration.gateway.MessageChannel , null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( ) { void ( ) ; MessageChannel org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ( ) ; Assert . state ( org.springframework.integration.gateway.MessageChannel instanceof PollableChannel , STRING ) ; return this . org.springframework.integration.gateway.MessagingTemplate . receive ( org.springframework.integration.gateway.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.lang.Object ( java.lang.Object , true ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( java.lang.Object java.lang.Object ) { return ( Message < ? > ) this . java.lang.Object ( java.lang.Object , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , boolean boolean ) { this . void ( ) ; Assert . notNull ( java.lang.Object , STRING ) ; MessageChannel org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ( ) ; if ( org.springframework.integration.gateway.MessageChannel == null ) { throw new MessagingException ( STRING ) ; } MessageChannel org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ( ) ; if ( org.springframework.integration.gateway.MessageChannel != null && this . org.springframework.integration.gateway.AbstractEndpoint == null ) { this . void ( ) ; } java.lang.Object java.lang.Object = null ; java.lang.Throwable java.lang.Throwable = null ; try { if ( this . boolean ) { this . java.util.concurrent.atomic.AtomicLong . long ( ) ; } if ( boolean ) { java.lang.Object = this . org.springframework.integration.gateway.MessagingTemplate . convertSendAndReceive ( org.springframework.integration.gateway.MessageChannel , java.lang.Object , null , this . org.springframework.integration.gateway.HistoryWritingMessagePostProcessor ) ; if ( java.lang.Object instanceof java.lang.Throwable ) { java.lang.Throwable = ( java.lang.Throwable ) java.lang.Object ; } } else { Message < ? > org.springframework.integration.gateway.Message<?> = ( java.lang.Object instanceof Message < ? > ) ? ( Message < ? > ) java.lang.Object : this . org.springframework.integration.gateway.InboundMessageMapper . toMessage ( java.lang.Object ) ; org.springframework.integration.gateway.Message<?> = this . org.springframework.integration.gateway.HistoryWritingMessagePostProcessor . postProcessMessage ( org.springframework.integration.gateway.Message<> ) ; java.lang.Object = this . org.springframework.integration.gateway.MessagingTemplate . sendAndReceive ( org.springframework.integration.gateway.MessageChannel , org.springframework.integration.gateway.Message<> ) ; if ( java.lang.Object instanceof ErrorMessage ) { java.lang.Throwable = ( ( ErrorMessage ) java.lang.Object ) . getPayload ( ) ; } } if ( java.lang.Object == null && this . boolean ) { if ( java.lang.Object instanceof Message ) { java.lang.Throwable = new MessageTimeoutException ( ( Message < ? > ) java.lang.Object , STRING ) ; } else { java.lang.Throwable = new MessageTimeoutException ( STRING ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Exception . java.lang.String ( ) ) ; } java.lang.Throwable = java.lang.Exception ; } if ( java.lang.Throwable != null ) { MessageChannel org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ( ) ; if ( org.springframework.integration.gateway.MessageChannel != null ) { Message < ? > org.springframework.integration.gateway.Message<?> = new ErrorMessage ( java.lang.Throwable ) ; Message < ? > org.springframework.integration.gateway.Message<?> = null ; try { org.springframework.integration.gateway.Message<?> = this . org.springframework.integration.gateway.MessagingTemplate . sendAndReceive ( org.springframework.integration.gateway.MessageChannel , org.springframework.integration.gateway.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( org.springframework.integration.gateway.Message<> , STRING , java.lang.Exception ) ; } if ( boolean ) { java.lang.Object java.lang.Object = ( org.springframework.integration.gateway.Message<> != null ) ? org.springframework.integration.gateway.Message<> . getPayload ( ) : null ; if ( java.lang.Object instanceof java.lang.Throwable ) { this . void ( ( java.lang.Throwable ) java.lang.Object , STRING ) ; } return java.lang.Object ; } if ( org.springframework.integration.gateway.Message<> != null && org.springframework.integration.gateway.Message<> . getPayload ( ) instanceof java.lang.Throwable ) { this . void ( ( java.lang.Throwable ) org.springframework.integration.gateway.Message<> . getPayload ( ) , STRING ) ; } if ( org.springframework.integration.gateway.Message<> == null && this . boolean ) { if ( java.lang.Object instanceof Message ) { throw new MessageTimeoutException ( ( Message < ? > ) java.lang.Object , STRING ) ; } else { throw new MessageTimeoutException ( STRING ) ; } } return org.springframework.integration.gateway.Message<> ; } else { this . void ( java.lang.Throwable , STRING ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable , java.lang.String java.lang.String ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Throwable ; } throw new MessagingException ( java.lang.String , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.integration.gateway.AbstractEndpoint != null ) { return; } AbstractEndpoint org.springframework.integration.gateway.AbstractEndpoint = null ; BridgeHandler org.springframework.integration.gateway.BridgeHandler = new BridgeHandler ( ) ; if ( this . getBeanFactory ( ) != null ) { org.springframework.integration.gateway.BridgeHandler . setBeanFactory ( this . getBeanFactory ( ) ) ; } org.springframework.integration.gateway.BridgeHandler . afterPropertiesSet ( ) ; MessageChannel org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ( ) ; if ( org.springframework.integration.gateway.MessageChannel instanceof SubscribableChannel ) { org.springframework.integration.gateway.AbstractEndpoint = new EventDrivenConsumer ( ( SubscribableChannel ) org.springframework.integration.gateway.MessageChannel , org.springframework.integration.gateway.BridgeHandler ) ; } else if ( org.springframework.integration.gateway.MessageChannel instanceof PollableChannel ) { PollingConsumer org.springframework.integration.gateway.PollingConsumer = new PollingConsumer ( ( PollableChannel ) org.springframework.integration.gateway.MessageChannel , org.springframework.integration.gateway.BridgeHandler ) ; org.springframework.integration.gateway.PollingConsumer . setBeanFactory ( this . getBeanFactory ( ) ) ; org.springframework.integration.gateway.PollingConsumer . setReceiveTimeout ( this . long ) ; org.springframework.integration.gateway.PollingConsumer . afterPropertiesSet ( ) ; org.springframework.integration.gateway.AbstractEndpoint = org.springframework.integration.gateway.PollingConsumer ; } else { throw new MessagingException ( STRING + org.springframework.integration.gateway.MessageChannel . getClass ( ) + STRING + STRING ) ; } if ( this . isRunning ( ) ) { org.springframework.integration.gateway.AbstractEndpoint . start ( ) ; } this . org.springframework.integration.gateway.AbstractEndpoint = org.springframework.integration.gateway.AbstractEndpoint ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.gateway.AbstractEndpoint != null ) { this . org.springframework.integration.gateway.AbstractEndpoint . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.gateway.AbstractEndpoint != null ) { this . org.springframework.integration.gateway.AbstractEndpoint . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.concurrent.atomic.AtomicLong . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> void void ( MessageBuilderFactory org.springframework.integration.gateway.MessageBuilderFactory ) { this . org.springframework.integration.gateway.MessageBuilderFactory = org.springframework.integration.gateway.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( java.lang.Object instanceof Message < ? > ) { return ( Message < ? > ) java.lang.Object ; } return ( java.lang.Object != null ) ? this . org.springframework.integration.gateway.MessageBuilderFactory . withPayload ( java.lang.Object ) . build ( ) : null ; }  <METHOD_END>
