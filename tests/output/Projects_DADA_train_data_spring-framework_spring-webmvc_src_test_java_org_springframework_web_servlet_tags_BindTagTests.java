<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getExpression ( ) == null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , ! org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . reject ( STRING , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getExpression ( ) == null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . reject ( STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getExpression ( ) == null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . reject ( null , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getExpression ( ) == null ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . reject ( STRING , null , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) , STRING ) ; org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . reject ( STRING , null , STRING ) ; org.springframework.web.servlet.tags.Errors . reject ( STRING , null , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) , STRING ) ; org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.TestBean . setName ( STRING ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . setHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( NUMBER ) . boolean ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.TestBean . setName ( STRING ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . setHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( NUMBER ) . boolean ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.TestBean . setName ( STRING ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , null , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , null , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , null , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . setHtmlEscape ( true ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , new java.lang.Integer ( NUMBER ) . boolean ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) == null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.TestBean . setName ( STRING ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.TestBean . setName ( STRING ) ; org.springframework.web.servlet.tags.TestBean . setSpouse ( org.springframework.web.servlet.tags.TestBean ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCode ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessage ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessagesAsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; org.springframework.web.servlet.tags.TestBean . setName ( STRING ) ; Errors org.springframework.web.servlet.tags.Errors = new BindException ( org.springframework.web.servlet.tags.TestBean , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , null , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , null , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertNull ( org.springframework.web.servlet.tags.BindTag . getProperty ( ) ) ; org.springframework.web.servlet.tags.BindTag . release ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindTag . getProperty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; IndexedTestBean org.springframework.web.servlet.tags.IndexedTestBean = new IndexedTestBean ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.IndexedTestBean , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) instanceof TestBean ) ; assertTrue ( STRING , STRING . boolean ( ( ( TestBean ) org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; IndexedTestBean org.springframework.web.servlet.tags.IndexedTestBean = new IndexedTestBean ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.IndexedTestBean , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) instanceof TestBean ) ; assertTrue ( STRING , STRING . boolean ( ( ( TestBean ) org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . isError ( ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) . length == NUMBER ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorCodes ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getErrorMessages ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; IndexedTestBean org.springframework.web.servlet.tags.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.web.servlet.tags.DataBinder = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.IndexedTestBean , STRING ) ; org.springframework.web.servlet.tags.DataBinder . registerCustomEditor ( TestBean .class , null , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ) ; Errors org.springframework.web.servlet.tags.Errors = org.springframework.web.servlet.tags.DataBinder . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) instanceof java.lang.String ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . setHtmlEscape ( true ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( STRING , NUMBER ) ; NestedTestBean org.springframework.web.servlet.tags.NestedTestBean = new NestedTestBean ( STRING ) ; org.springframework.web.servlet.tags.TestBean . setDoctor ( org.springframework.web.servlet.tags.NestedTestBean ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( STRING , org.springframework.web.servlet.tags.TestBean ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ; assertTrue ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) instanceof NestedTestBean ) ; assertTrue ( org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) . indexOf ( STRING ) != - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . setHtmlEscape ( true ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( STRING , new TestBean ( STRING , NUMBER ) ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ; assertTrue ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) instanceof java.util.Set ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( STRING , new TestBean ( STRING , NUMBER ) ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . setHtmlEscape ( true ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( STRING , new TestBean ( STRING , NUMBER ) ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( STRING , new TestBean ( STRING , NUMBER ) ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertNull ( org.springframework.web.servlet.tags.BindStatus . getExpression ( ) ) ; assertNull ( org.springframework.web.servlet.tags.BindStatus . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; try { org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; fail ( STRING ) ; } catch ( JspException org.springframework.web.servlet.tags.JspException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindErrorsTag org.springframework.web.servlet.tags.BindErrorsTag = new BindErrorsTag ( ) ; org.springframework.web.servlet.tags.BindErrorsTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindErrorsTag . setName ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindErrorsTag . doStartTag ( ) == Tag . SKIP_BODY ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( BindErrorsTag . ERRORS_VARIABLE_NAME ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.Errors . reject ( STRING , null , STRING ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; BindErrorsTag org.springframework.web.servlet.tags.BindErrorsTag = new BindErrorsTag ( ) ; org.springframework.web.servlet.tags.BindErrorsTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindErrorsTag . setName ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindErrorsTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( BindErrorsTag . ERRORS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) == org.springframework.web.servlet.tags.Errors ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; BindErrorsTag org.springframework.web.servlet.tags.BindErrorsTag = new BindErrorsTag ( ) ; org.springframework.web.servlet.tags.BindErrorsTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindErrorsTag . setName ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindErrorsTag . doStartTag ( ) == Tag . SKIP_BODY ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; int int = org.springframework.web.servlet.tags.NestedPathTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertNull ( org.springframework.web.servlet.tags.PageContext . getAttribute ( NestedPathTag . NESTED_PATH_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . doEndTag ( ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( NestedPathTag . NESTED_PATH_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ) ; org.springframework.web.servlet.tags.NestedPathTag . doEndTag ( ) ; assertNull ( org.springframework.web.servlet.tags.PageContext . getAttribute ( NestedPathTag . NESTED_PATH_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; int int = org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( NestedPathTag . NESTED_PATH_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( NestedPathTag . NESTED_PATH_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( NestedPathTag . NESTED_PATH_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( NestedPathTag . NESTED_PATH_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ) ; org.springframework.web.servlet.tags.NestedPathTag . doEndTag ( ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( NestedPathTag . NESTED_PATH_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getPath ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getPath ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ; org.springframework.web.servlet.tags.BindTag . doEndTag ( ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertSame ( STRING , org.springframework.web.servlet.tags.BindStatus , org.springframework.web.servlet.tags.BindStatus ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getPath ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.tags.BindStatus . getDisplayValue ( ) ) ; org.springframework.web.servlet.tags.BindTag . doEndTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . doEndTag ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; Errors org.springframework.web.servlet.tags.Errors = new ServletRequestDataBinder ( new TestBean ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.Errors ) ; NestedPathTag org.springframework.web.servlet.tags.NestedPathTag = new NestedPathTag ( ) ; org.springframework.web.servlet.tags.NestedPathTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.NestedPathTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.NestedPathTag . doStartTag ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setIgnoreNestedPath ( true ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; BindStatus org.springframework.web.servlet.tags.BindStatus = ( BindStatus ) org.springframework.web.servlet.tags.PageContext . getAttribute ( BindTag . STATUS_VARIABLE_NAME , PageContext . REQUEST_SCOPE ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.BindStatus != null ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.BindStatus . getPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING ) ; ServletRequestDataBinder org.springframework.web.servlet.tags.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) ; CustomDateEditor org.springframework.web.servlet.tags.CustomDateEditor = new CustomDateEditor ( java.text.DateFormat , true ) ; org.springframework.web.servlet.tags.ServletRequestDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.tags.CustomDateEditor ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.ServletRequestDataBinder . getBindingResult ( ) ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; TransformTag org.springframework.web.servlet.tags.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.TransformTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag . setParent ( org.springframework.web.servlet.tags.BindTag ) ; org.springframework.web.servlet.tags.TransformTag . setValue ( org.springframework.web.servlet.tags.TestBean . getDate ( ) ) ; org.springframework.web.servlet.tags.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . doStartTag ( ) ; assertNotNull ( org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; assertEquals ( org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) , java.text.DateFormat . java.lang.String ( org.springframework.web.servlet.tags.TestBean . getDate ( ) ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; org.springframework.web.servlet.tags.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.TransformTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag . setValue ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setParent ( org.springframework.web.servlet.tags.BindTag ) ; org.springframework.web.servlet.tags.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . doStartTag ( ) ; assertNotNull ( org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING ) ; ServletRequestDataBinder org.springframework.web.servlet.tags.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) ; CustomDateEditor org.springframework.web.servlet.tags.CustomDateEditor = new CustomDateEditor ( java.text.DateFormat , true ) ; org.springframework.web.servlet.tags.ServletRequestDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.tags.CustomDateEditor ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.ServletRequestDataBinder . getBindingResult ( ) ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; TransformTag org.springframework.web.servlet.tags.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.TransformTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag . setValue ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setParent ( org.springframework.web.servlet.tags.BindTag ) ; org.springframework.web.servlet.tags.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setHtmlEscape ( true ) ; org.springframework.web.servlet.tags.TransformTag . doStartTag ( ) ; assertNotNull ( org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING ) ; ServletRequestDataBinder org.springframework.web.servlet.tags.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) ; CustomDateEditor org.springframework.web.servlet.tags.CustomDateEditor = new CustomDateEditor ( java.text.DateFormat , true ) ; org.springframework.web.servlet.tags.ServletRequestDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.tags.CustomDateEditor ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.ServletRequestDataBinder . getBindingResult ( ) ) ; TransformTag org.springframework.web.servlet.tags.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.TransformTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setValue ( STRING ) ; try { org.springframework.web.servlet.tags.TransformTag . doStartTag ( ) ; fail ( STRING ) ; } catch ( JspException org.springframework.web.servlet.tags.JspException ) { } MessageTag org.springframework.web.servlet.tags.MessageTag = new MessageTag ( ) ; org.springframework.web.servlet.tags.MessageTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.TransformTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setValue ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setParent ( org.springframework.web.servlet.tags.MessageTag ) ; try { org.springframework.web.servlet.tags.TransformTag . doStartTag ( ) ; fail ( STRING ) ; } catch ( JspException org.springframework.web.servlet.tags.JspException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING ) ; ServletRequestDataBinder org.springframework.web.servlet.tags.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) ; CustomDateEditor org.springframework.web.servlet.tags.CustomDateEditor = new CustomDateEditor ( java.text.DateFormat , true ) ; org.springframework.web.servlet.tags.ServletRequestDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.tags.CustomDateEditor ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.ServletRequestDataBinder . getBindingResult ( ) ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; TransformTag org.springframework.web.servlet.tags.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.TransformTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag . setValue ( null ) ; org.springframework.web.servlet.tags.TransformTag . setParent ( org.springframework.web.servlet.tags.BindTag ) ; org.springframework.web.servlet.tags.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . doStartTag ( ) ; assertNull ( org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING ) ; ServletRequestDataBinder org.springframework.web.servlet.tags.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) ; CustomDateEditor org.springframework.web.servlet.tags.CustomDateEditor = new CustomDateEditor ( java.text.DateFormat , true ) ; org.springframework.web.servlet.tags.ServletRequestDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.tags.CustomDateEditor ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.ServletRequestDataBinder . getBindingResult ( ) ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; TransformTag org.springframework.web.servlet.tags.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.TransformTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag . setParent ( org.springframework.web.servlet.tags.BindTag ) ; org.springframework.web.servlet.tags.TransformTag . setValue ( org.springframework.web.servlet.tags.TestBean . getDate ( ) ) ; org.springframework.web.servlet.tags.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setScope ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . doStartTag ( ) ; org.springframework.web.servlet.tags.TransformTag . release ( ) ; assertNotNull ( org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; assertEquals ( java.text.DateFormat . java.lang.String ( org.springframework.web.servlet.tags.TestBean . getDate ( ) ) , org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; org.springframework.web.servlet.tags.TransformTag = new TransformTag ( ) ; org.springframework.web.servlet.tags.TransformTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.TransformTag . setValue ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setParent ( org.springframework.web.servlet.tags.BindTag ) ; org.springframework.web.servlet.tags.TransformTag . setVar ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . setScope ( STRING ) ; org.springframework.web.servlet.tags.TransformTag . doStartTag ( ) ; org.springframework.web.servlet.tags.TransformTag . release ( ) ; assertNotNull ( org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.PageContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; TestBean org.springframework.web.servlet.tags.TestBean = new TestBean ( ) ; java.text.DateFormat java.text.DateFormat = new java.text.SimpleDateFormat ( STRING ) ; ServletRequestDataBinder org.springframework.web.servlet.tags.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.servlet.tags.TestBean , STRING ) ; CustomDateEditor org.springframework.web.servlet.tags.CustomDateEditor = new CustomDateEditor ( java.text.DateFormat , true ) ; org.springframework.web.servlet.tags.ServletRequestDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.tags.CustomDateEditor ) ; org.springframework.web.servlet.tags.PageContext . getRequest ( ) . setAttribute ( BindingResult . MODEL_KEY_PREFIX + STRING , org.springframework.web.servlet.tags.ServletRequestDataBinder . getBindingResult ( ) ) ; FormTag org.springframework.web.servlet.tags.FormTag = new FormTag ( ) { @ java.lang.Override protected org.springframework.web.servlet.tags.TagWriter org.springframework.web.servlet.tags.TagWriter ( ) { return new TagWriter ( new java.io.StringWriter ( ) ) ; } } ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.tags.FormTag . setName ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setCssClass ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setCssStyle ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setAction ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setModelAttribute ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setEnctype ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setMethod ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setOnsubmit ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setOnreset ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setAcceptCharset ( java.lang.String ) ; org.springframework.web.servlet.tags.FormTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.FormTag . doStartTag ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; org.springframework.web.servlet.tags.BindTag . doEndTag ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; org.springframework.web.servlet.tags.BindTag . doEndTag ( ) ; BindTag org.springframework.web.servlet.tags.BindTag = new BindTag ( ) ; org.springframework.web.servlet.tags.BindTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.BindTag . setPath ( STRING ) ; org.springframework.web.servlet.tags.BindTag . doStartTag ( ) ; org.springframework.web.servlet.tags.BindTag . doEndTag ( ) ; org.springframework.web.servlet.tags.FormTag . doEndTag ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.tags.TagWriter org.springframework.web.servlet.tags.TagWriter ( ) { return new TagWriter ( new java.io.StringWriter ( ) ) ; }  <METHOD_END>
