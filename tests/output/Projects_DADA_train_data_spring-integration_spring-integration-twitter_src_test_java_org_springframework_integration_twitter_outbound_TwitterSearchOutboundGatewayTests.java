<METHOD_START> @ Test public void void ( ) { Tweet org.springframework.integration.twitter.outbound.Tweet = mock ( Tweet .class ) ; SearchMetadata org.springframework.integration.twitter.outbound.SearchMetadata = mock ( SearchMetadata .class ) ; final SearchResults org.springframework.integration.twitter.outbound.SearchResults = new SearchResults ( java.util.Collections . java.util.List ( org.springframework.integration.twitter.outbound.Tweet ) , org.springframework.integration.twitter.outbound.SearchMetadata ) ; doAnswer ( invocation -> { SearchParameters searchParameters = invocation . getArgument ( NUMBER ) ; assertEquals ( STRING , searchParameters . getQuery ( ) ) ; assertEquals ( Integer . valueOf ( NUMBER ) , searchParameters . getCount ( ) ) ; return searchResults ; } ) . when ( this . org.springframework.integration.twitter.outbound.SearchOperations ) . search ( any ( SearchParameters .class ) ) ; this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.twitter.outbound.Message<?> = this . org.springframework.integration.twitter.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.twitter.outbound.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> = ( java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > ) org.springframework.integration.twitter.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . size ( ) ) ; assertSame ( org.springframework.integration.twitter.outbound.Tweet , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.twitter.outbound.SearchMetadata , org.springframework.integration.twitter.outbound.Message<> . getHeaders ( ) . get ( TwitterHeaders . SEARCH_METADATA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . setSearchArgsExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; Tweet org.springframework.integration.twitter.outbound.Tweet = mock ( Tweet .class ) ; SearchMetadata org.springframework.integration.twitter.outbound.SearchMetadata = mock ( SearchMetadata .class ) ; final SearchResults org.springframework.integration.twitter.outbound.SearchResults = new SearchResults ( java.util.Collections . java.util.List ( org.springframework.integration.twitter.outbound.Tweet ) , org.springframework.integration.twitter.outbound.SearchMetadata ) ; doAnswer ( invocation -> { SearchParameters searchParameters = invocation . getArgument ( NUMBER ) ; assertEquals ( STRING , searchParameters . getQuery ( ) ) ; assertEquals ( Integer . valueOf ( NUMBER ) , searchParameters . getCount ( ) ) ; return searchResults ; } ) . when ( this . org.springframework.integration.twitter.outbound.SearchOperations ) . search ( any ( SearchParameters .class ) ) ; this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.twitter.outbound.Message<?> = this . org.springframework.integration.twitter.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.twitter.outbound.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> = ( java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > ) org.springframework.integration.twitter.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . size ( ) ) ; assertSame ( org.springframework.integration.twitter.outbound.Tweet , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.twitter.outbound.SearchMetadata , org.springframework.integration.twitter.outbound.Message<> . getHeaders ( ) . get ( TwitterHeaders . SEARCH_METADATA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . setSearchArgsExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; Tweet org.springframework.integration.twitter.outbound.Tweet = mock ( Tweet .class ) ; SearchMetadata org.springframework.integration.twitter.outbound.SearchMetadata = mock ( SearchMetadata .class ) ; final SearchResults org.springframework.integration.twitter.outbound.SearchResults = new SearchResults ( java.util.Collections . java.util.List ( org.springframework.integration.twitter.outbound.Tweet ) , org.springframework.integration.twitter.outbound.SearchMetadata ) ; doAnswer ( invocation -> { SearchParameters searchParameters = invocation . getArgument ( NUMBER ) ; assertEquals ( STRING , searchParameters . getQuery ( ) ) ; assertEquals ( Integer . valueOf ( NUMBER ) , searchParameters . getCount ( ) ) ; assertEquals ( Long . valueOf ( NUMBER ) , searchParameters . getSinceId ( ) ) ; assertEquals ( Long . valueOf ( NUMBER ) , searchParameters . getMaxId ( ) ) ; return searchResults ; } ) . when ( this . org.springframework.integration.twitter.outbound.SearchOperations ) . search ( any ( SearchParameters .class ) ) ; this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.twitter.outbound.Message<?> = this . org.springframework.integration.twitter.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.twitter.outbound.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> = ( java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > ) org.springframework.integration.twitter.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . size ( ) ) ; assertSame ( org.springframework.integration.twitter.outbound.Tweet , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.twitter.outbound.SearchMetadata , org.springframework.integration.twitter.outbound.Message<> . getHeaders ( ) . get ( TwitterHeaders . SEARCH_METADATA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Tweet org.springframework.integration.twitter.outbound.Tweet = mock ( Tweet .class ) ; SearchMetadata org.springframework.integration.twitter.outbound.SearchMetadata = mock ( SearchMetadata .class ) ; final SearchResults org.springframework.integration.twitter.outbound.SearchResults = new SearchResults ( java.util.Collections . java.util.List ( org.springframework.integration.twitter.outbound.Tweet ) , org.springframework.integration.twitter.outbound.SearchMetadata ) ; final SearchParameters org.springframework.integration.twitter.outbound.SearchParameters = new SearchParameters ( STRING ) ; doAnswer ( invocation -> { SearchParameters searchParameters = invocation . getArgument ( NUMBER ) ; assertSame ( parameters , searchParameters ) ; return searchResults ; } ) . when ( this . org.springframework.integration.twitter.outbound.SearchOperations ) . search ( any ( SearchParameters .class ) ) ; this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . handleMessage ( new GenericMessage < SearchParameters > ( org.springframework.integration.twitter.outbound.SearchParameters ) ) ; Message < ? > org.springframework.integration.twitter.outbound.Message<?> = this . org.springframework.integration.twitter.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.twitter.outbound.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> = ( java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > ) org.springframework.integration.twitter.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . size ( ) ) ; assertSame ( org.springframework.integration.twitter.outbound.Tweet , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.twitter.outbound.SearchMetadata , org.springframework.integration.twitter.outbound.Message<> . getHeaders ( ) . get ( TwitterHeaders . SEARCH_METADATA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . setSearchArgsExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; Tweet org.springframework.integration.twitter.outbound.Tweet = mock ( Tweet .class ) ; SearchMetadata org.springframework.integration.twitter.outbound.SearchMetadata = mock ( SearchMetadata .class ) ; final SearchResults org.springframework.integration.twitter.outbound.SearchResults = new SearchResults ( java.util.Collections . java.util.List ( org.springframework.integration.twitter.outbound.Tweet ) , org.springframework.integration.twitter.outbound.SearchMetadata ) ; doAnswer ( invocation -> { SearchParameters searchParameters = invocation . getArgument ( NUMBER ) ; assertEquals ( STRING , searchParameters . getQuery ( ) ) ; assertEquals ( Integer . valueOf ( NUMBER ) , searchParameters . getCount ( ) ) ; assertEquals ( Long . valueOf ( NUMBER ) , searchParameters . getSinceId ( ) ) ; return searchResults ; } ) . when ( this . org.springframework.integration.twitter.outbound.SearchOperations ) . search ( any ( SearchParameters .class ) ) ; this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.twitter.outbound.Message<?> = this . org.springframework.integration.twitter.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.twitter.outbound.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> = ( java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > ) org.springframework.integration.twitter.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . size ( ) ) ; assertSame ( org.springframework.integration.twitter.outbound.Tweet , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.twitter.outbound.SearchMetadata , org.springframework.integration.twitter.outbound.Message<> . getHeaders ( ) . get ( TwitterHeaders . SEARCH_METADATA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SearchMetadata org.springframework.integration.twitter.outbound.SearchMetadata = mock ( SearchMetadata .class ) ; java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> = new java.util.ArrayList<org.springframework.integration.twitter.outbound.Tweet> < Tweet > ( NUMBER ) ; final SearchResults org.springframework.integration.twitter.outbound.SearchResults = new SearchResults ( java.util.List<org.springframework.integration.twitter.outbound.Tweet> , org.springframework.integration.twitter.outbound.SearchMetadata ) ; doAnswer ( invocation -> { SearchParameters searchParameters = invocation . getArgument ( NUMBER ) ; assertEquals ( STRING , searchParameters . getQuery ( ) ) ; assertEquals ( Integer . valueOf ( NUMBER ) , searchParameters . getCount ( ) ) ; return searchResults ; } ) . when ( this . org.springframework.integration.twitter.outbound.SearchOperations ) . search ( any ( SearchParameters .class ) ) ; this . org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.twitter.outbound.Message<?> = this . org.springframework.integration.twitter.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.twitter.outbound.Message<> ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > java.util.List<org.springframework.integration.twitter.outbound.Tweet> = ( java.util.List<org.springframework.integration.twitter.outbound.Tweet> < Tweet > ) org.springframework.integration.twitter.outbound.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.twitter.outbound.Tweet> . size ( ) ) ; assertSame ( org.springframework.integration.twitter.outbound.SearchMetadata , org.springframework.integration.twitter.outbound.Message<> . getHeaders ( ) . get ( TwitterHeaders . SEARCH_METADATA ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway ( ) { TwitterSearchOutboundGateway org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway = new TwitterSearchOutboundGateway ( org.springframework.integration.twitter.outbound.Twitter ( ) ) ; org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway . setOutputChannel ( org.springframework.integration.twitter.outbound.PollableChannel ( ) ) ; return org.springframework.integration.twitter.outbound.TwitterSearchOutboundGateway ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.twitter.outbound.PollableChannel org.springframework.integration.twitter.outbound.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.twitter.outbound.Twitter org.springframework.integration.twitter.outbound.Twitter ( ) { Twitter org.springframework.integration.twitter.outbound.Twitter = mock ( Twitter .class ) ; when ( org.springframework.integration.twitter.outbound.Twitter . searchOperations ( ) ) . thenReturn ( org.springframework.integration.twitter.outbound.SearchOperations ( ) ) ; return org.springframework.integration.twitter.outbound.Twitter ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.twitter.outbound.SearchOperations org.springframework.integration.twitter.outbound.SearchOperations ( ) { return mock ( SearchOperations .class ) ; }  <METHOD_END>
