<METHOD_START> protected void ( RequestedContentTypeResolver org.springframework.web.reactive.result.RequestedContentTypeResolver ) { this( org.springframework.web.reactive.result.RequestedContentTypeResolver , new ReactiveAdapterRegistry ( ) ); }  <METHOD_END>
<METHOD_START> protected void ( RequestedContentTypeResolver org.springframework.web.reactive.result.RequestedContentTypeResolver , ReactiveAdapterRegistry org.springframework.web.reactive.result.ReactiveAdapterRegistry ) { Assert . notNull ( org.springframework.web.reactive.result.RequestedContentTypeResolver , STRING ) ; Assert . notNull ( org.springframework.web.reactive.result.ReactiveAdapterRegistry , STRING ) ; this . org.springframework.web.reactive.result.RequestedContentTypeResolver = org.springframework.web.reactive.result.RequestedContentTypeResolver ; this . org.springframework.web.reactive.result.ReactiveAdapterRegistry = org.springframework.web.reactive.result.ReactiveAdapterRegistry ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.ReactiveAdapterRegistry org.springframework.web.reactive.result.ReactiveAdapterRegistry ( ) { return this . org.springframework.web.reactive.result.ReactiveAdapterRegistry ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.RequestedContentTypeResolver org.springframework.web.reactive.result.RequestedContentTypeResolver ( ) { return this . org.springframework.web.reactive.result.RequestedContentTypeResolver ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.ReactiveAdapter org.springframework.web.reactive.result.ReactiveAdapter ( HandlerResult org.springframework.web.reactive.result.HandlerResult ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.HandlerResult . getReturnType ( ) . getRawClass ( ) ; return org.springframework.web.reactive.result.ReactiveAdapterRegistry ( ) . getAdapter ( java.lang.Class<> , org.springframework.web.reactive.result.HandlerResult . getReturnValue ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.MediaType org.springframework.web.reactive.result.MediaType ( ServerWebExchange org.springframework.web.reactive.result.ServerWebExchange , java.util.function.Supplier<java.util.List<org.springframework.web.reactive.result.MediaType>> < java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > > java.util.function.Supplier<java.util.List<org.springframework.web.reactive.result.MediaType>> ) { java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> = java.util.List<org.springframework.web.reactive.result.MediaType> ( org.springframework.web.reactive.result.ServerWebExchange ) ; java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> = java.util.List<org.springframework.web.reactive.result.MediaType> ( org.springframework.web.reactive.result.ServerWebExchange , java.util.function.Supplier<java.util.List<org.springframework.web.reactive.result.MediaType>> ) ; java.util.Set<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.MediaType> = new java.util.LinkedHashSet<org.springframework.web.reactive.result.MediaType> <> ( ) ; for ( MediaType org.springframework.web.reactive.result.MediaType : java.util.List<org.springframework.web.reactive.result.MediaType> ) { for ( MediaType org.springframework.web.reactive.result.MediaType : java.util.List<org.springframework.web.reactive.result.MediaType> ) { if ( org.springframework.web.reactive.result.MediaType . isCompatibleWith ( org.springframework.web.reactive.result.MediaType ) ) { java.util.Set<org.springframework.web.reactive.result.MediaType> . add ( org.springframework.web.reactive.result.MediaType ( org.springframework.web.reactive.result.MediaType , org.springframework.web.reactive.result.MediaType ) ) ; } } } java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> = new java.util.ArrayList <> ( java.util.Set<org.springframework.web.reactive.result.MediaType> ) ; MediaType . sortBySpecificityAndQuality ( java.util.List<org.springframework.web.reactive.result.MediaType> ) ; for ( MediaType org.springframework.web.reactive.result.MediaType : java.util.Set<org.springframework.web.reactive.result.MediaType> ) { if ( org.springframework.web.reactive.result.MediaType . isConcrete ( ) ) { return org.springframework.web.reactive.result.MediaType ; } else if ( org.springframework.web.reactive.result.MediaType . equals ( MediaType . ALL ) || org.springframework.web.reactive.result.MediaType . equals ( org.springframework.web.reactive.result.MediaType ) ) { return MediaType . APPLICATION_OCTET_STREAM ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> ( ServerWebExchange org.springframework.web.reactive.result.ServerWebExchange ) { java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> = org.springframework.web.reactive.result.RequestedContentTypeResolver ( ) . resolveMediaTypes ( org.springframework.web.reactive.result.ServerWebExchange ) ; return ( java.util.List<org.springframework.web.reactive.result.MediaType> . isEmpty ( ) ? java.util.Collections . java.util.List ( MediaType . ALL ) : java.util.List<org.springframework.web.reactive.result.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> ( ServerWebExchange org.springframework.web.reactive.result.ServerWebExchange , java.util.function.Supplier<java.util.List<org.springframework.web.reactive.result.MediaType>> < java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > > java.util.function.Supplier<java.util.List<org.springframework.web.reactive.result.MediaType>> ) { java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.web.reactive.result.ServerWebExchange . getAttribute ( HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE ) ; if ( java.util.Optional<java.lang.Object> . boolean ( ) ) { java.util.Set<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.Set<org.springframework.web.reactive.result.MediaType> = ( java.util.Set<org.springframework.web.reactive.result.MediaType> < MediaType > ) java.util.Optional<java.lang.Object> . java.lang.Object ( ) ; return new java.util.ArrayList <> ( java.util.Set<org.springframework.web.reactive.result.MediaType> ) ; } return java.util.function.Supplier<java.util.List<org.springframework.web.reactive.result.MediaType>> . get ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.MediaType org.springframework.web.reactive.result.MediaType ( MediaType org.springframework.web.reactive.result.MediaType , MediaType org.springframework.web.reactive.result.MediaType ) { org.springframework.web.reactive.result.MediaType = org.springframework.web.reactive.result.MediaType . copyQualityValue ( org.springframework.web.reactive.result.MediaType ) ; java.util.Comparator<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.Comparator<org.springframework.web.reactive.result.MediaType> = MediaType . SPECIFICITY_COMPARATOR ; return ( java.util.Comparator<org.springframework.web.reactive.result.MediaType> . compare ( org.springframework.web.reactive.result.MediaType , org.springframework.web.reactive.result.MediaType ) <= NUMBER ? org.springframework.web.reactive.result.MediaType : org.springframework.web.reactive.result.MediaType ) ; }  <METHOD_END>
