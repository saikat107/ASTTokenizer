<METHOD_START> public void ( ReactiveSession org.springframework.data.cassandra.core.ReactiveSession ) { this( org.springframework.data.cassandra.core.ReactiveSession , org.springframework.data.cassandra.core.MappingCassandraConverter ( ) ); }  <METHOD_END>
<METHOD_START> public void ( ReactiveSession org.springframework.data.cassandra.core.ReactiveSession , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { this( new DefaultReactiveSessionFactory ( org.springframework.data.cassandra.core.ReactiveSession ) , org.springframework.data.cassandra.core.CassandraConverter ); }  <METHOD_END>
<METHOD_START> public void ( ReactiveSessionFactory org.springframework.data.cassandra.core.ReactiveSessionFactory , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { Assert . notNull ( org.springframework.data.cassandra.core.ReactiveSessionFactory , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.core.CassandraConverter , STRING ) ; this . org.springframework.data.cassandra.core.CassandraConverter = org.springframework.data.cassandra.core.CassandraConverter ; this . org.springframework.data.cassandra.core.CassandraMappingContext = this . org.springframework.data.cassandra.core.CassandraConverter . getMappingContext ( ) ; this . org.springframework.data.cassandra.core.ReactiveCqlOperations = new ReactiveCqlTemplate ( org.springframework.data.cassandra.core.ReactiveSessionFactory ) ; }  <METHOD_END>
<METHOD_START> public void ( ReactiveCqlOperations org.springframework.data.cassandra.core.ReactiveCqlOperations , CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ) { Assert . notNull ( org.springframework.data.cassandra.core.ReactiveCqlOperations , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.core.CassandraConverter , STRING ) ; this . org.springframework.data.cassandra.core.CassandraConverter = org.springframework.data.cassandra.core.CassandraConverter ; this . org.springframework.data.cassandra.core.CassandraMappingContext = this . org.springframework.data.cassandra.core.CassandraConverter . getMappingContext ( ) ; this . org.springframework.data.cassandra.core.ReactiveCqlOperations = org.springframework.data.cassandra.core.ReactiveCqlOperations ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.cassandra.core.MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter ( ) { MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter = new MappingCassandraConverter ( ) ; org.springframework.data.cassandra.core.MappingCassandraConverter . afterPropertiesSet ( ) ; return org.springframework.data.cassandra.core.MappingCassandraConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Flux<T> < T > org.springframework.data.cassandra.core.Flux<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . hasText ( java.lang.String , STRING ) ; return org.springframework.data.cassandra.core.Flux ( new SimpleStatement ( java.lang.String ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.cassandra.core.Flux<T> ( java.lang.String , java.lang.Class<T> ) . next ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Flux<T> < T > org.springframework.data.cassandra.core.Flux<T> ( Statement org.springframework.data.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( org.springframework.data.cassandra.core.Statement , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return org.springframework.data.cassandra.core.ReactiveCqlOperations . query ( org.springframework.data.cassandra.core.Statement , ( row , rowNum ) -> converter . read ( entityClass , row ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( Statement org.springframework.data.cassandra.core.Statement , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.cassandra.core.Flux ( org.springframework.data.cassandra.core.Statement , java.lang.Class<T> ) . next ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<T> ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . all ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Select . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return org.springframework.data.cassandra.core.Mono ( org.springframework.data.cassandra.core.Select , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.cassandra.core.Mono<java.lang.Boolean> ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Select . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return org.springframework.data.cassandra.core.ReactiveCqlOperations . queryForRows ( org.springframework.data.cassandra.core.Select ) . hasElements ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.Mono<java.lang.Long> < java.lang.Long > org.springframework.data.cassandra.core.Mono<java.lang.Long> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Select org.springframework.data.cassandra.core.Select = QueryBuilder . select ( ) . countAll ( ) . from ( org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) . getTableName ( ) . toCql ( ) ) ; return org.springframework.data.cassandra.core.ReactiveCqlOperations . queryForObject ( org.springframework.data.cassandra.core.Select , java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( T T ) { return org.springframework.data.cassandra.core.Mono<T> ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( T T , WriteOptions org.springframework.data.cassandra.core.WriteOptions ) { Assert . notNull ( T , STRING ) ; Insert org.springframework.data.cassandra.core.Insert = QueryUtils . createInsertQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T ) . toCql ( ) , T , org.springframework.data.cassandra.core.WriteOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; class InsertCallback implements ReactiveSessionCallback < T > , CqlProvider { @ java.lang.Override public org.springframework.data.cassandra.core.Publisher<T> < T > org.springframework.data.cassandra.core.Publisher<T> ( ReactiveSession org.springframework.data.cassandra.core.ReactiveSession ) throws org.springframework.data.cassandra.core.DriverException , org.springframework.data.cassandra.core.DataAccessException { return org.springframework.data.cassandra.core.ReactiveSession . execute ( org.springframework.data.cassandra.core.Insert ) . flatMap ( reactiveResultSet -> reactiveResultSet . wasApplied ( ) ? Mono . just ( entity ) : Mono . empty ( ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.cassandra.core.Insert . toString ( ) ; } } return org.springframework.data.cassandra.core.ReactiveCqlOperations . execute ( new InsertCallback ( ) ) . next ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.Publisher<T> < T > org.springframework.data.cassandra.core.Publisher<T> ( ReactiveSession org.springframework.data.cassandra.core.ReactiveSession ) throws org.springframework.data.cassandra.core.DriverException , org.springframework.data.cassandra.core.DataAccessException { return org.springframework.data.cassandra.core.ReactiveSession . execute ( org.springframework.data.cassandra.core.Insert ) . flatMap ( reactiveResultSet -> reactiveResultSet . wasApplied ( ) ? Mono . just ( entity ) : Mono . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.cassandra.core.Insert . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Flux<T> < T > org.springframework.data.cassandra.core.Flux<T> ( Publisher < ? extends T > org.springframework.data.cassandra.core.Publisher<? extends T> ) { return org.springframework.data.cassandra.core.Mono ( org.springframework.data.cassandra.core.Publisher<> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Flux<T> < T > org.springframework.data.cassandra.core.Flux<T> ( Publisher < ? extends T > org.springframework.data.cassandra.core.Publisher<? extends T> , WriteOptions org.springframework.data.cassandra.core.WriteOptions ) { Assert . notNull ( org.springframework.data.cassandra.core.Publisher<> , STRING ) ; return Flux . from ( org.springframework.data.cassandra.core.Publisher<> ) . flatMap ( entity -> insert ( entity , options ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( T T ) { return org.springframework.data.cassandra.core.Mono<T> ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( T T , WriteOptions org.springframework.data.cassandra.core.WriteOptions ) { Assert . notNull ( T , STRING ) ; Update org.springframework.data.cassandra.core.Update = QueryUtils . createUpdateQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T ) . toCql ( ) , T , org.springframework.data.cassandra.core.WriteOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; class UpdateCallback implements ReactiveSessionCallback < T > , CqlProvider { @ java.lang.Override public org.springframework.data.cassandra.core.Publisher<T> < T > org.springframework.data.cassandra.core.Publisher<T> ( ReactiveSession org.springframework.data.cassandra.core.ReactiveSession ) throws org.springframework.data.cassandra.core.DriverException , org.springframework.data.cassandra.core.DataAccessException { return org.springframework.data.cassandra.core.ReactiveSession . execute ( org.springframework.data.cassandra.core.Update ) . flatMap ( reactiveResultSet -> reactiveResultSet . wasApplied ( ) ? Mono . just ( entity ) : Mono . empty ( ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.cassandra.core.Update . toString ( ) ; } } return org.springframework.data.cassandra.core.ReactiveCqlOperations . execute ( new UpdateCallback ( ) ) . next ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.Publisher<T> < T > org.springframework.data.cassandra.core.Publisher<T> ( ReactiveSession org.springframework.data.cassandra.core.ReactiveSession ) throws org.springframework.data.cassandra.core.DriverException , org.springframework.data.cassandra.core.DataAccessException { return org.springframework.data.cassandra.core.ReactiveSession . execute ( org.springframework.data.cassandra.core.Update ) . flatMap ( reactiveResultSet -> reactiveResultSet . wasApplied ( ) ? Mono . just ( entity ) : Mono . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.cassandra.core.Update . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Flux<T> < T > org.springframework.data.cassandra.core.Flux<T> ( Publisher < ? extends T > org.springframework.data.cassandra.core.Publisher<? extends T> ) { return org.springframework.data.cassandra.core.Mono ( org.springframework.data.cassandra.core.Publisher<> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Flux<T> < T > org.springframework.data.cassandra.core.Flux<T> ( Publisher < ? extends T > org.springframework.data.cassandra.core.Publisher<? extends T> , WriteOptions org.springframework.data.cassandra.core.WriteOptions ) { Assert . notNull ( org.springframework.data.cassandra.core.Publisher<> , STRING ) ; return Flux . from ( org.springframework.data.cassandra.core.Publisher<> ) . flatMap ( entity -> update ( entity , options ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.Mono<java.lang.Boolean> < java.lang.Boolean > org.springframework.data.cassandra.core.Mono<java.lang.Boolean> ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> = org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; Delete org.springframework.data.cassandra.core.Delete = QueryBuilder . delete ( ) . from ( org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getTableName ( ) . toCql ( ) ) ; org.springframework.data.cassandra.core.CassandraConverter . write ( java.lang.Object , org.springframework.data.cassandra.core.Delete . where ( ) , org.springframework.data.cassandra.core.CassandraPersistentEntity<> ) ; return org.springframework.data.cassandra.core.ReactiveCqlOperations . execute ( org.springframework.data.cassandra.core.Delete ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( T T ) { return org.springframework.data.cassandra.core.Mono<T> ( T , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Mono<T> < T > org.springframework.data.cassandra.core.Mono<T> ( T T , QueryOptions org.springframework.data.cassandra.core.QueryOptions ) { Assert . notNull ( T , STRING ) ; Delete org.springframework.data.cassandra.core.Delete = QueryUtils . createDeleteQuery ( org.springframework.data.cassandra.core.CqlIdentifier ( T ) . toCql ( ) , T , org.springframework.data.cassandra.core.QueryOptions , org.springframework.data.cassandra.core.CassandraConverter ) ; class DeleteCallback implements ReactiveSessionCallback < T > , CqlProvider { @ java.lang.Override public org.springframework.data.cassandra.core.Publisher<T> < T > org.springframework.data.cassandra.core.Publisher<T> ( ReactiveSession org.springframework.data.cassandra.core.ReactiveSession ) throws org.springframework.data.cassandra.core.DriverException , org.springframework.data.cassandra.core.DataAccessException { return org.springframework.data.cassandra.core.ReactiveSession . execute ( org.springframework.data.cassandra.core.Delete ) . flatMap ( reactiveResultSet -> reactiveResultSet . wasApplied ( ) ? Mono . just ( entity ) : Mono . empty ( ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.cassandra.core.Delete . toString ( ) ; } } return org.springframework.data.cassandra.core.ReactiveCqlOperations . execute ( new DeleteCallback ( ) ) . next ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.Publisher<T> < T > org.springframework.data.cassandra.core.Publisher<T> ( ReactiveSession org.springframework.data.cassandra.core.ReactiveSession ) throws org.springframework.data.cassandra.core.DriverException , org.springframework.data.cassandra.core.DataAccessException { return org.springframework.data.cassandra.core.ReactiveSession . execute ( org.springframework.data.cassandra.core.Delete ) . flatMap ( reactiveResultSet -> reactiveResultSet . wasApplied ( ) ? Mono . just ( entity ) : Mono . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.cassandra.core.Delete . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Flux<T> < T > org.springframework.data.cassandra.core.Flux<T> ( Publisher < ? extends T > org.springframework.data.cassandra.core.Publisher<? extends T> ) { return org.springframework.data.cassandra.core.Mono ( org.springframework.data.cassandra.core.Publisher<> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.data.cassandra.core.Flux<T> < T > org.springframework.data.cassandra.core.Flux<T> ( Publisher < ? extends T > org.springframework.data.cassandra.core.Publisher<? extends T> , QueryOptions org.springframework.data.cassandra.core.QueryOptions ) { Assert . notNull ( org.springframework.data.cassandra.core.Publisher<> , STRING ) ; return Flux . from ( org.springframework.data.cassandra.core.Publisher<> ) . flatMap ( entity -> delete ( entity , options ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.Mono<java.lang.Void> < java.lang.Void > org.springframework.data.cassandra.core.Mono<java.lang.Void> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Truncate org.springframework.data.cassandra.core.Truncate = QueryBuilder . truncate ( org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) . getTableName ( ) . toCql ( ) ) ; return org.springframework.data.cassandra.core.ReactiveCqlOperations . execute ( org.springframework.data.cassandra.core.Truncate ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraConverter org.springframework.data.cassandra.core.CassandraConverter ( ) { return org.springframework.data.cassandra.core.CassandraConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.ReactiveCqlOperations org.springframework.data.cassandra.core.ReactiveCqlOperations ( ) { return org.springframework.data.cassandra.core.ReactiveCqlOperations ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.core.CqlIdentifier org.springframework.data.cassandra.core.CqlIdentifier ( java.lang.Object java.lang.Object ) { return org.springframework.data.cassandra.core.CassandraMappingContext . getRequiredPersistentEntity ( ClassUtils . getUserClass ( java.lang.Object ) ) . getTableName ( ) ; }  <METHOD_END>
