<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( PlatformTransactionManager org.springframework.transaction.support.PlatformTransactionManager ) { this . org.springframework.transaction.support.PlatformTransactionManager = org.springframework.transaction.support.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public void ( PlatformTransactionManager org.springframework.transaction.support.PlatformTransactionManager , TransactionDefinition org.springframework.transaction.support.TransactionDefinition ) { super( org.springframework.transaction.support.TransactionDefinition ); this . org.springframework.transaction.support.PlatformTransactionManager = org.springframework.transaction.support.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public void void ( PlatformTransactionManager org.springframework.transaction.support.PlatformTransactionManager ) { this . org.springframework.transaction.support.PlatformTransactionManager = org.springframework.transaction.support.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.transaction.support.PlatformTransactionManager org.springframework.transaction.support.PlatformTransactionManager ( ) { return this . org.springframework.transaction.support.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.transaction.support.PlatformTransactionManager == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( TransactionCallback < T > org.springframework.transaction.support.TransactionCallback<T> ) throws org.springframework.transaction.support.TransactionException { if ( this . org.springframework.transaction.support.PlatformTransactionManager instanceof CallbackPreferringPlatformTransactionManager ) { return ( ( CallbackPreferringPlatformTransactionManager ) this . org.springframework.transaction.support.PlatformTransactionManager ) . execute ( this , org.springframework.transaction.support.TransactionCallback<T> ) ; } else { TransactionStatus org.springframework.transaction.support.TransactionStatus = this . org.springframework.transaction.support.PlatformTransactionManager . getTransaction ( this ) ; T T ; try { T = org.springframework.transaction.support.TransactionCallback<T> . doInTransaction ( org.springframework.transaction.support.TransactionStatus ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( org.springframework.transaction.support.TransactionStatus , java.lang.RuntimeException ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { void ( org.springframework.transaction.support.TransactionStatus , java.lang.Error ) ; throw java.lang.Error ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( org.springframework.transaction.support.TransactionStatus , java.lang.Throwable ) ; throw new java.lang.reflect.UndeclaredThrowableException ( java.lang.Throwable , STRING ) ; } this . org.springframework.transaction.support.PlatformTransactionManager . commit ( org.springframework.transaction.support.TransactionStatus ) ; return T ; } }  <METHOD_END>
<METHOD_START> private void void ( TransactionStatus org.springframework.transaction.support.TransactionStatus , java.lang.Throwable java.lang.Throwable ) throws org.springframework.transaction.support.TransactionException { org.springframework.transaction.support.Log . debug ( STRING , java.lang.Throwable ) ; try { this . org.springframework.transaction.support.PlatformTransactionManager . rollback ( org.springframework.transaction.support.TransactionStatus ) ; } catch ( TransactionSystemException org.springframework.transaction.support.TransactionSystemException ) { org.springframework.transaction.support.Log . error ( STRING , java.lang.Throwable ) ; org.springframework.transaction.support.TransactionSystemException . initApplicationException ( java.lang.Throwable ) ; throw org.springframework.transaction.support.TransactionSystemException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { org.springframework.transaction.support.Log . error ( STRING , java.lang.Throwable ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { org.springframework.transaction.support.Log . error ( STRING , java.lang.Throwable ) ; throw java.lang.Error ; } }  <METHOD_END>
