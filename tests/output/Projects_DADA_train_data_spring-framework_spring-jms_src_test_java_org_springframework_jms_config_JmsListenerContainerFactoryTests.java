<METHOD_START> @ Test public void void ( ) { SimpleJmsListenerContainerFactory org.springframework.jms.config.SimpleJmsListenerContainerFactory = new SimpleJmsListenerContainerFactory ( ) ; void ( org.springframework.jms.config.SimpleJmsListenerContainerFactory ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; MessageListener org.springframework.jms.config.MessageListener = new MessageListenerAdapter ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.config.MessageListener ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; SimpleMessageListenerContainer org.springframework.jms.config.SimpleMessageListenerContainer = org.springframework.jms.config.SimpleJmsListenerContainerFactory . createListenerContainer ( org.springframework.jms.config.SimpleJmsListenerEndpoint ) ; void ( org.springframework.jms.config.SimpleMessageListenerContainer ) ; assertEquals ( org.springframework.jms.config.MessageListener , org.springframework.jms.config.SimpleMessageListenerContainer . getMessageListener ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.SimpleMessageListenerContainer . getDestinationName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultJmsListenerContainerFactory org.springframework.jms.config.DefaultJmsListenerContainerFactory = new DefaultJmsListenerContainerFactory ( ) ; void ( org.springframework.jms.config.DefaultJmsListenerContainerFactory ) ; org.springframework.jms.config.DefaultJmsListenerContainerFactory . setCacheLevel ( DefaultMessageListenerContainer . CACHE_CONSUMER ) ; org.springframework.jms.config.DefaultJmsListenerContainerFactory . setConcurrency ( STRING ) ; org.springframework.jms.config.DefaultJmsListenerContainerFactory . setMaxMessagesPerTask ( NUMBER ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; MessageListener org.springframework.jms.config.MessageListener = new MessageListenerAdapter ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.config.MessageListener ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = org.springframework.jms.config.DefaultJmsListenerContainerFactory . createListenerContainer ( org.springframework.jms.config.SimpleJmsListenerEndpoint ) ; void ( org.springframework.jms.config.DefaultMessageListenerContainer ) ; assertEquals ( DefaultMessageListenerContainer . CACHE_CONSUMER , org.springframework.jms.config.DefaultMessageListenerContainer . getCacheLevel ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getConcurrentConsumers ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getMaxConcurrentConsumers ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getMaxMessagesPerTask ( ) ) ; assertEquals ( org.springframework.jms.config.MessageListener , org.springframework.jms.config.DefaultMessageListenerContainer . getMessageListener ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.DefaultMessageListenerContainer . getDestinationName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultJcaListenerContainerFactory org.springframework.jms.config.DefaultJcaListenerContainerFactory = new DefaultJcaListenerContainerFactory ( ) ; void ( org.springframework.jms.config.DefaultJcaListenerContainerFactory ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setConcurrency ( STRING ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; MessageListener org.springframework.jms.config.MessageListener = new MessageListenerAdapter ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.config.MessageListener ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager = org.springframework.jms.config.DefaultJcaListenerContainerFactory . createListenerContainer ( org.springframework.jms.config.SimpleJmsListenerEndpoint ) ; void ( org.springframework.jms.config.JmsMessageEndpointManager ) ; assertEquals ( NUMBER , org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) . getMaxConcurrency ( ) ) ; assertEquals ( org.springframework.jms.config.MessageListener , org.springframework.jms.config.JmsMessageEndpointManager . getMessageListener ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) . getDestinationName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultJcaListenerContainerFactory org.springframework.jms.config.DefaultJcaListenerContainerFactory = new DefaultJcaListenerContainerFactory ( ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setDestinationResolver ( org.springframework.jms.config.DestinationResolver ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setActivationSpecFactory ( new StubJmsActivationSpecFactory ( ) ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( new MessageListenerAdapter ( ) ) ; org.springframework.jms.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . createListenerContainer ( org.springframework.jms.config.SimpleJmsListenerEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultJmsListenerContainerFactory org.springframework.jms.config.DefaultJmsListenerContainerFactory = new DefaultJmsListenerContainerFactory ( ) ; BackOff org.springframework.jms.config.BackOff = new FixedBackOff ( ) ; org.springframework.jms.config.DefaultJmsListenerContainerFactory . setBackOff ( org.springframework.jms.config.BackOff ) ; org.springframework.jms.config.DefaultJmsListenerContainerFactory . setRecoveryInterval ( NUMBER ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; MessageListener org.springframework.jms.config.MessageListener = new MessageListenerAdapter ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.config.MessageListener ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = org.springframework.jms.config.DefaultJmsListenerContainerFactory . createListenerContainer ( org.springframework.jms.config.SimpleJmsListenerEndpoint ) ; assertSame ( org.springframework.jms.config.BackOff , new DirectFieldAccessor ( org.springframework.jms.config.DefaultMessageListenerContainer ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractJmsListenerContainerFactory < ? > org.springframework.jms.config.AbstractJmsListenerContainerFactory<?> ) { org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setConnectionFactory ( org.springframework.jms.config.ConnectionFactory ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setDestinationResolver ( org.springframework.jms.config.DestinationResolver ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setMessageConverter ( org.springframework.jms.config.MessageConverter ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setSessionTransacted ( true ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setSessionAcknowledgeMode ( Session . DUPS_OK_ACKNOWLEDGE ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setPubSubDomain ( true ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setReplyPubSubDomain ( true ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setSubscriptionDurable ( true ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setClientId ( STRING ) ; org.springframework.jms.config.AbstractJmsListenerContainerFactory<> . setAutoStartup ( false ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractMessageListenerContainer org.springframework.jms.config.AbstractMessageListenerContainer ) { assertEquals ( org.springframework.jms.config.ConnectionFactory , org.springframework.jms.config.AbstractMessageListenerContainer . getConnectionFactory ( ) ) ; assertEquals ( org.springframework.jms.config.DestinationResolver , org.springframework.jms.config.AbstractMessageListenerContainer . getDestinationResolver ( ) ) ; assertEquals ( org.springframework.jms.config.MessageConverter , org.springframework.jms.config.AbstractMessageListenerContainer . getMessageConverter ( ) ) ; assertEquals ( true , org.springframework.jms.config.AbstractMessageListenerContainer . isSessionTransacted ( ) ) ; assertEquals ( Session . DUPS_OK_ACKNOWLEDGE , org.springframework.jms.config.AbstractMessageListenerContainer . getSessionAcknowledgeMode ( ) ) ; assertEquals ( true , org.springframework.jms.config.AbstractMessageListenerContainer . isPubSubDomain ( ) ) ; assertEquals ( true , org.springframework.jms.config.AbstractMessageListenerContainer . isReplyPubSubDomain ( ) ) ; assertEquals ( true , org.springframework.jms.config.AbstractMessageListenerContainer . isSubscriptionDurable ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.AbstractMessageListenerContainer . getClientId ( ) ) ; assertEquals ( false , org.springframework.jms.config.AbstractMessageListenerContainer . isAutoStartup ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultJcaListenerContainerFactory org.springframework.jms.config.DefaultJcaListenerContainerFactory ) { org.springframework.jms.config.DefaultJcaListenerContainerFactory . setDestinationResolver ( org.springframework.jms.config.DestinationResolver ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setTransactionManager ( org.springframework.jms.config.TransactionManager ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setMessageConverter ( org.springframework.jms.config.MessageConverter ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setAcknowledgeMode ( Session . DUPS_OK_ACKNOWLEDGE ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setPubSubDomain ( true ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setSubscriptionDurable ( true ) ; org.springframework.jms.config.DefaultJcaListenerContainerFactory . setClientId ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager ) { assertEquals ( org.springframework.jms.config.MessageConverter , org.springframework.jms.config.JmsMessageEndpointManager . getMessageConverter ( ) ) ; assertEquals ( org.springframework.jms.config.DestinationResolver , org.springframework.jms.config.JmsMessageEndpointManager . getDestinationResolver ( ) ) ; JmsActivationSpecConfig org.springframework.jms.config.JmsActivationSpecConfig = org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) ; assertNotNull ( org.springframework.jms.config.JmsActivationSpecConfig ) ; assertEquals ( Session . DUPS_OK_ACKNOWLEDGE , org.springframework.jms.config.JmsActivationSpecConfig . getAcknowledgeMode ( ) ) ; assertEquals ( true , org.springframework.jms.config.JmsActivationSpecConfig . isPubSubDomain ( ) ) ; assertEquals ( true , org.springframework.jms.config.JmsActivationSpecConfig . isSubscriptionDurable ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsActivationSpecConfig . getClientId ( ) ) ; }  <METHOD_END>
