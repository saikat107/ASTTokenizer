<METHOD_START> public void ( java.lang.String java.lang.String , byte [] byte[] ) { this( java.lang.String , null , byte[] ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.io.InputStream java.io.InputStream ) throws java.io.IOException { this( java.lang.String , java.lang.String , FileCopyUtils . copyToByteArray ( java.io.InputStream ) ); }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.String java.lang.String , byte [] byte[] ) { Assert . hasLength ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . byte[] = ( byte[] != null ? byte[] : new byte [ NUMBER ] ) ; this . org.springframework.mock.web.test.HttpHeaders . setContentDispositionFormData ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { MediaType org.springframework.mock.web.test.MediaType = this . org.springframework.mock.web.test.HttpHeaders . getContentType ( ) ; return ( org.springframework.mock.web.test.MediaType != null ? org.springframework.mock.web.test.MediaType . toString ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . byte[] . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( this . byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.mock.web.test.HttpHeaders . getFirst ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.String java.lang.String ) { return this . org.springframework.mock.web.test.HttpHeaders . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return this . org.springframework.mock.web.test.HttpHeaders . keySet ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.web.test.HttpHeaders org.springframework.mock.web.test.HttpHeaders ( ) { return this . org.springframework.mock.web.test.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.io.IOException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
