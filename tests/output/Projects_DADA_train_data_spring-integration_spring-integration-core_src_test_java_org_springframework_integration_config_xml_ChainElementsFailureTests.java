<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( XmlBeanDefinitionStoreException org.springframework.integration.config.xml.XmlBeanDefinitionStoreException ) { assertEquals ( STRING + STRING , org.springframework.integration.config.xml.XmlBeanDefinitionStoreException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { final java.lang.String java.lang.String = STRING + STRING + STRING ; final java.lang.String java.lang.String = org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) ; assertTrue ( STRING + java.lang.String + STRING + java.lang.String + STRING , java.lang.String . boolean ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) . contains ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.config.xml.ApplicationContext org.springframework.integration.config.xml.ApplicationContext ( java.lang.String java.lang.String ) throws java.lang.Exception { PropertiesFactoryBean org.springframework.integration.config.xml.PropertiesFactoryBean = new PropertiesFactoryBean ( ) ; org.springframework.integration.config.xml.PropertiesFactoryBean . setLocation ( new ClassPathResource ( STRING ) ) ; org.springframework.integration.config.xml.PropertiesFactoryBean . afterPropertiesSet ( ) ; java.util.Properties java.util.Properties = org.springframework.integration.config.xml.PropertiesFactoryBean . getObject ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Properties . java.lang.String ( STRING ) ) . java.lang.StringBuilder ( java.util.Properties . java.lang.String ( java.lang.String ) ) . java.lang.StringBuilder ( java.util.Properties . java.lang.String ( STRING ) ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( java.lang.StringBuilder . java.lang.String ( ) . byte[] ( ) ) ; GenericApplicationContext org.springframework.integration.config.xml.GenericApplicationContext = new GenericApplicationContext ( ) ; XmlBeanDefinitionReader org.springframework.integration.config.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.integration.config.xml.GenericApplicationContext ) ; org.springframework.integration.config.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_XSD ) ; org.springframework.integration.config.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( new InputStreamResource ( java.io.ByteArrayInputStream ) ) ; org.springframework.integration.config.xml.GenericApplicationContext . refresh ( ) ; return org.springframework.integration.config.xml.GenericApplicationContext ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
