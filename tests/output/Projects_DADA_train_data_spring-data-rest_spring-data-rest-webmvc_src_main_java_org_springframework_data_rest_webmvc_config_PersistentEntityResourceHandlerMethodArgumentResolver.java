<METHOD_START> public void ( java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> , RootResourceInformationHandlerMethodArgumentResolver org.springframework.data.rest.webmvc.config.RootResourceInformationHandlerMethodArgumentResolver , BackendIdHandlerMethodArgumentResolver org.springframework.data.rest.webmvc.config.BackendIdHandlerMethodArgumentResolver , DomainObjectReader org.springframework.data.rest.webmvc.config.DomainObjectReader ) { Assert . notEmpty ( java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.config.RootResourceInformationHandlerMethodArgumentResolver , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.config.BackendIdHandlerMethodArgumentResolver , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.config.DomainObjectReader , STRING ) ; this . java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> = java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> ; this . org.springframework.data.rest.webmvc.config.RootResourceInformationHandlerMethodArgumentResolver = org.springframework.data.rest.webmvc.config.RootResourceInformationHandlerMethodArgumentResolver ; this . org.springframework.data.rest.webmvc.config.BackendIdHandlerMethodArgumentResolver = org.springframework.data.rest.webmvc.config.BackendIdHandlerMethodArgumentResolver ; this . org.springframework.data.rest.webmvc.config.DomainObjectReader = org.springframework.data.rest.webmvc.config.DomainObjectReader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.data.rest.webmvc.config.MethodParameter ) { return PersistentEntityResource .class . boolean ( org.springframework.data.rest.webmvc.config.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) public java.lang.Object java.lang.Object ( MethodParameter org.springframework.data.rest.webmvc.config.MethodParameter , ModelAndViewContainer org.springframework.data.rest.webmvc.config.ModelAndViewContainer , NativeWebRequest org.springframework.data.rest.webmvc.config.NativeWebRequest , WebDataBinderFactory org.springframework.data.rest.webmvc.config.WebDataBinderFactory ) throws java.lang.Exception { RootResourceInformation org.springframework.data.rest.webmvc.config.RootResourceInformation = org.springframework.data.rest.webmvc.config.RootResourceInformationHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.config.MethodParameter , org.springframework.data.rest.webmvc.config.ModelAndViewContainer , org.springframework.data.rest.webmvc.config.NativeWebRequest , org.springframework.data.rest.webmvc.config.WebDataBinderFactory ) ; HttpServletRequest org.springframework.data.rest.webmvc.config.HttpServletRequest = org.springframework.data.rest.webmvc.config.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; ServletServerHttpRequest org.springframework.data.rest.webmvc.config.ServletServerHttpRequest = new ServletServerHttpRequest ( org.springframework.data.rest.webmvc.config.HttpServletRequest ) ; IncomingRequest org.springframework.data.rest.webmvc.config.IncomingRequest = new IncomingRequest ( org.springframework.data.rest.webmvc.config.ServletServerHttpRequest ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.config.RootResourceInformation . getDomainType ( ) ; MediaType org.springframework.data.rest.webmvc.config.MediaType = org.springframework.data.rest.webmvc.config.ServletServerHttpRequest . getHeaders ( ) . getContentType ( ) ; for ( HttpMessageConverter org.springframework.data.rest.webmvc.config.HttpMessageConverter : java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> ) { if ( ! org.springframework.data.rest.webmvc.config.HttpMessageConverter . canRead ( PersistentEntityResource .class , org.springframework.data.rest.webmvc.config.MediaType ) ) { continue; } java.io.Serializable java.io.Serializable = org.springframework.data.rest.webmvc.config.BackendIdHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.config.MethodParameter , org.springframework.data.rest.webmvc.config.ModelAndViewContainer , org.springframework.data.rest.webmvc.config.NativeWebRequest , org.springframework.data.rest.webmvc.config.WebDataBinderFactory ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> ( java.io.Serializable , org.springframework.data.rest.webmvc.config.RootResourceInformation ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.rest.webmvc.config.RootResourceInformation , org.springframework.data.rest.webmvc.config.IncomingRequest , org.springframework.data.rest.webmvc.config.HttpMessageConverter , java.util.Optional<java.lang.Object> ) ; if ( java.lang.Object == null ) { throw new HttpMessageNotReadableException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.Class<> ) ) ; } PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.config.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.config.RootResourceInformation . getPersistentEntity ( ) ; boolean boolean = java.util.Optional<java.lang.Object> . boolean ( ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> org.springframework.data.rest.webmvc.config.PersistentEntity<,> . getIdentifierAccessor ( java.lang.Object ) . getIdentifier ( ) ) ; if ( java.util.Optional<java.lang.Object> . boolean ( ) ) { org.springframework.data.rest.webmvc.config.PersistentEntity<,> . getPropertyAccessor ( java.lang.Object ) . setProperty ( org.springframework.data.rest.webmvc.config.PersistentEntity<,> . getRequiredIdProperty ( ) , java.util.Optional<java.lang.Object> ) ; } Builder org.springframework.data.rest.webmvc.config.Builder = PersistentEntityResource . build ( java.lang.Object , org.springframework.data.rest.webmvc.config.PersistentEntity<,> ) ; return boolean ? org.springframework.data.rest.webmvc.config.Builder . build ( ) : org.springframework.data.rest.webmvc.config.Builder . forCreation ( ) ; } throw new HttpMessageNotReadableException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.Class<> , org.springframework.data.rest.webmvc.config.MediaType ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( RootResourceInformation org.springframework.data.rest.webmvc.config.RootResourceInformation , IncomingRequest org.springframework.data.rest.webmvc.config.IncomingRequest , HttpMessageConverter < java.lang.Object > org.springframework.data.rest.webmvc.config.HttpMessageConverter<java.lang.Object> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { if ( org.springframework.data.rest.webmvc.config.IncomingRequest . isPatchRequest ( ) && org.springframework.data.rest.webmvc.config.HttpMessageConverter<java.lang.Object> instanceof MappingJackson2HttpMessageConverter ) { return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> { ObjectMapper org.springframework.data.rest.webmvc.config.ObjectMapper = ( ( MappingJackson2HttpMessageConverter ) org.springframework.data.rest.webmvc.config.HttpMessageConverter<java.lang.Object> ) . getObjectMapper ( ) ; return java.lang.Object ( org.springframework.data.rest.webmvc.config.IncomingRequest , org.springframework.data.rest.webmvc.config.ObjectMapper , java.lang.Object ) ; } ) . orElseThrow ( ( ) new ResourceNotFoundException ( ) ) ; } else if ( org.springframework.data.rest.webmvc.config.HttpMessageConverter<java.lang.Object> instanceof MappingJackson2HttpMessageConverter ) { ObjectMapper org.springframework.data.rest.webmvc.config.ObjectMapper = ( ( MappingJackson2HttpMessageConverter ) org.springframework.data.rest.webmvc.config.HttpMessageConverter<java.lang.Object> ) . getObjectMapper ( ) ; return java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> java.lang.Object ( org.springframework.data.rest.webmvc.config.IncomingRequest , org.springframework.data.rest.webmvc.config.ObjectMapper , java.lang.Object ) ) . orElseGet ( ( ) read ( request , converter , information ) ) ; } return java.lang.Object ( org.springframework.data.rest.webmvc.config.IncomingRequest , org.springframework.data.rest.webmvc.config.HttpMessageConverter<java.lang.Object> , org.springframework.data.rest.webmvc.config.RootResourceInformation ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( IncomingRequest org.springframework.data.rest.webmvc.config.IncomingRequest , ObjectMapper org.springframework.data.rest.webmvc.config.ObjectMapper , java.lang.Object java.lang.Object ) { try { JsonPatchHandler org.springframework.data.rest.webmvc.config.JsonPatchHandler = new JsonPatchHandler ( org.springframework.data.rest.webmvc.config.ObjectMapper , org.springframework.data.rest.webmvc.config.DomainObjectReader ) ; return org.springframework.data.rest.webmvc.config.JsonPatchHandler . apply ( org.springframework.data.rest.webmvc.config.IncomingRequest , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof HttpMessageNotReadableException ) { throw ( HttpMessageNotReadableException ) java.lang.Exception ; } throw new HttpMessageNotReadableException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( IncomingRequest org.springframework.data.rest.webmvc.config.IncomingRequest , ObjectMapper org.springframework.data.rest.webmvc.config.ObjectMapper , java.lang.Object java.lang.Object ) { try { JsonPatchHandler org.springframework.data.rest.webmvc.config.JsonPatchHandler = new JsonPatchHandler ( org.springframework.data.rest.webmvc.config.ObjectMapper , org.springframework.data.rest.webmvc.config.DomainObjectReader ) ; JsonNode org.springframework.data.rest.webmvc.config.JsonNode = org.springframework.data.rest.webmvc.config.ObjectMapper . readTree ( org.springframework.data.rest.webmvc.config.IncomingRequest . getBody ( ) ) ; return org.springframework.data.rest.webmvc.config.JsonPatchHandler . applyPut ( ( ObjectNode ) org.springframework.data.rest.webmvc.config.JsonNode , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new HttpMessageNotReadableException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( IncomingRequest org.springframework.data.rest.webmvc.config.IncomingRequest , HttpMessageConverter < java.lang.Object > org.springframework.data.rest.webmvc.config.HttpMessageConverter<java.lang.Object> , RootResourceInformation org.springframework.data.rest.webmvc.config.RootResourceInformation ) { try { return org.springframework.data.rest.webmvc.config.HttpMessageConverter<java.lang.Object> . read ( org.springframework.data.rest.webmvc.config.RootResourceInformation . getDomainType ( ) , org.springframework.data.rest.webmvc.config.IncomingRequest . getServerHttpRequest ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new HttpMessageNotReadableException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.rest.webmvc.config.RootResourceInformation . getDomainType ( ) ) , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private static java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.io.Serializable java.io.Serializable , RootResourceInformation org.springframework.data.rest.webmvc.config.RootResourceInformation ) { if ( java.io.Serializable == null ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; } return org.springframework.data.rest.webmvc.config.RootResourceInformation . getInvoker ( ) . invokeFindOne ( java.io.Serializable ) ; }  <METHOD_END>
