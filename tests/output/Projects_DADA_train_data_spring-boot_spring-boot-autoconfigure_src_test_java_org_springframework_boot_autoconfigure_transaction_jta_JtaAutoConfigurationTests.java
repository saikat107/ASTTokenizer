<METHOD_START> @ Before public void void ( ) { FileSystemUtils . deleteRecursively ( new java.io.File ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.CustomTransactionManagerConfig .class , JtaAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( JtaTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( JtaAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBeansOfType ( JtaTransactionManager .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBeansOfType ( XADataSourceWrapper .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBeansOfType ( XAConnectionFactoryWrapper .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( JtaProperties .class , AtomikosJtaConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( AtomikosProperties .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( UserTransactionService .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( UserTransactionManager .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( UserTransaction .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( XADataSourceWrapper .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( XAConnectionFactoryWrapper .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( AtomikosDependsOnBeanFactoryPostProcessor .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( JtaTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( JtaProperties .class , BitronixJtaConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( bitronix . bitronix . bitronix .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( TransactionManager .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( XADataSourceWrapper .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( XAConnectionFactoryWrapper .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( BitronixDependentBeanFactoryPostProcessor .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( JtaTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.UnknownHostException { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.JtaPropertiesConfiguration .class , BitronixJtaConfiguration .class ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( bitronix . bitronix . bitronix .class ) . getServerId ( ) ; assertThat ( java.lang.String ) . isEqualTo ( java.net.InetAddress . java.net.InetAddress ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.UnknownHostException { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.JtaPropertiesConfiguration .class , BitronixJtaConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( bitronix . bitronix . bitronix .class ) . getServerId ( ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.UnknownHostException { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.JtaPropertiesConfiguration .class , AtomikosJtaConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; java.io.File java.io.File = new java.io.File ( STRING + java.net.InetAddress . java.net.InetAddress ( ) . java.lang.String ( ) + STRING ) ; assertThat ( java.io.File . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.transaction.jta.BeansException , java.lang.Exception { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.JtaPropertiesConfiguration .class , AtomikosJtaConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; assertThat ( java.io.File . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.JtaPropertiesConfiguration .class , AtomikosJtaConfiguration .class , org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.PoolConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; AtomikosConnectionFactoryBean org.springframework.boot.autoconfigure.transaction.jta.AtomikosConnectionFactoryBean = this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( AtomikosConnectionFactoryBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.AtomikosConnectionFactoryBean . getMinPoolSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.AtomikosConnectionFactoryBean . getMaxPoolSize ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.JtaPropertiesConfiguration .class , BitronixJtaConfiguration .class , org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.PoolConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; PoolingConnectionFactoryBean org.springframework.boot.autoconfigure.transaction.jta.PoolingConnectionFactoryBean = this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( PoolingConnectionFactoryBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.PoolingConnectionFactoryBean . getMinPoolSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.PoolingConnectionFactoryBean . getMaxPoolSize ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.JtaPropertiesConfiguration .class , AtomikosJtaConfiguration .class , org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.PoolConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; AtomikosDataSourceBean org.springframework.boot.autoconfigure.transaction.jta.AtomikosDataSourceBean = this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( AtomikosDataSourceBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.AtomikosDataSourceBean . getMinPoolSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.AtomikosDataSourceBean . getMaxPoolSize ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.JtaPropertiesConfiguration .class , BitronixJtaConfiguration .class , org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfigurationTests.PoolConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; PoolingDataSourceBean org.springframework.boot.autoconfigure.transaction.jta.PoolingDataSourceBean = this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( PoolingDataSourceBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.PoolingDataSourceBean . getMinPoolSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.PoolingDataSourceBean . getMaxPoolSize ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( AtomikosJtaConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; JtaTransactionManager org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager = this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( JtaTransactionManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager . getDefaultTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager . isRollbackOnCommitFailure ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . register ( BitronixJtaConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . refresh ( ) ; JtaTransactionManager org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager = this . org.springframework.boot.autoconfigure.transaction.jta.AnnotationConfigApplicationContext . getBean ( JtaTransactionManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager . getDefaultTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.transaction.jta.JtaTransactionManager . isRollbackOnCommitFailure ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.jta.PlatformTransactionManager org.springframework.boot.autoconfigure.transaction.jta.PlatformTransactionManager ( ) { return mock ( PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.transaction.jta.ConnectionFactory org.springframework.boot.autoconfigure.transaction.jta.ConnectionFactory ( XAConnectionFactoryWrapper org.springframework.boot.autoconfigure.transaction.jta.XAConnectionFactoryWrapper ) throws java.lang.Exception { XAConnectionFactory org.springframework.boot.autoconfigure.transaction.jta.XAConnectionFactory = mock ( XAConnectionFactory .class ) ; XAConnection org.springframework.boot.autoconfigure.transaction.jta.XAConnection = mock ( XAConnection .class ) ; XASession org.springframework.boot.autoconfigure.transaction.jta.XASession = mock ( XASession .class ) ; TemporaryQueue org.springframework.boot.autoconfigure.transaction.jta.TemporaryQueue = mock ( TemporaryQueue .class ) ; javax.transaction.xa.XAResource javax.transaction.xa.XAResource = mock ( javax.transaction.xa.XAResource .class ) ; given ( org.springframework.boot.autoconfigure.transaction.jta.XAConnectionFactory . createXAConnection ( ) ) . willReturn ( org.springframework.boot.autoconfigure.transaction.jta.XAConnection ) ; given ( org.springframework.boot.autoconfigure.transaction.jta.XAConnection . createXASession ( ) ) . willReturn ( org.springframework.boot.autoconfigure.transaction.jta.XASession ) ; given ( org.springframework.boot.autoconfigure.transaction.jta.XASession . createTemporaryQueue ( ) ) . willReturn ( org.springframework.boot.autoconfigure.transaction.jta.TemporaryQueue ) ; given ( org.springframework.boot.autoconfigure.transaction.jta.XASession . getXAResource ( ) ) . willReturn ( javax.transaction.xa.XAResource ) ; return org.springframework.boot.autoconfigure.transaction.jta.XAConnectionFactoryWrapper . wrapConnectionFactory ( org.springframework.boot.autoconfigure.transaction.jta.XAConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( XADataSourceWrapper org.springframework.boot.autoconfigure.transaction.jta.XADataSourceWrapper ) throws java.lang.Exception { javax.sql.XADataSource javax.sql.XADataSource = mock ( javax.sql.XADataSource .class ) ; return org.springframework.boot.autoconfigure.transaction.jta.XADataSourceWrapper . wrapDataSource ( javax.sql.XADataSource ) ; }  <METHOD_END>
