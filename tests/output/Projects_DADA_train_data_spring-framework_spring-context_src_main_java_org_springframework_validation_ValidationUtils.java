<METHOD_START> public static void void ( Validator org.springframework.validation.Validator , java.lang.Object java.lang.Object , Errors org.springframework.validation.Errors ) { void ( org.springframework.validation.Validator , java.lang.Object , org.springframework.validation.Errors , ( java.lang.Object [] ) null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Validator org.springframework.validation.Validator , java.lang.Object java.lang.Object , Errors org.springframework.validation.Errors , java.lang.Object ... java.lang.Object[] ) { Assert . notNull ( org.springframework.validation.Validator , STRING ) ; Assert . notNull ( org.springframework.validation.Errors , STRING ) ; if ( org.springframework.validation.Log . isDebugEnabled ( ) ) { org.springframework.validation.Log . debug ( STRING + org.springframework.validation.Validator + STRING ) ; } if ( java.lang.Object != null && ! org.springframework.validation.Validator . supports ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.validation.Validator . getClass ( ) + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; } if ( ! ObjectUtils . isEmpty ( java.lang.Object[] ) && org.springframework.validation.Validator instanceof SmartValidator ) { ( ( SmartValidator ) org.springframework.validation.Validator ) . validate ( java.lang.Object , org.springframework.validation.Errors , java.lang.Object[] ) ; } else { org.springframework.validation.Validator . validate ( java.lang.Object , org.springframework.validation.Errors ) ; } if ( org.springframework.validation.Log . isDebugEnabled ( ) ) { if ( org.springframework.validation.Errors . hasErrors ( ) ) { org.springframework.validation.Log . debug ( STRING + org.springframework.validation.Errors . getErrorCount ( ) + STRING ) ; } else { org.springframework.validation.Log . debug ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( Errors org.springframework.validation.Errors , java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( org.springframework.validation.Errors , java.lang.String , java.lang.String , null , null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Errors org.springframework.validation.Errors , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( org.springframework.validation.Errors , java.lang.String , java.lang.String , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Errors org.springframework.validation.Errors , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] ) { void ( org.springframework.validation.Errors , java.lang.String , java.lang.String , java.lang.Object[] , null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Errors org.springframework.validation.Errors , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.validation.Errors , STRING ) ; java.lang.Object java.lang.Object = org.springframework.validation.Errors . getFieldValue ( java.lang.String ) ; if ( java.lang.Object == null || ! StringUtils . hasLength ( java.lang.Object . java.lang.String ( ) ) ) { org.springframework.validation.Errors . rejectValue ( java.lang.String , java.lang.String , java.lang.Object[] , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( Errors org.springframework.validation.Errors , java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( org.springframework.validation.Errors , java.lang.String , java.lang.String , null , null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Errors org.springframework.validation.Errors , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( org.springframework.validation.Errors , java.lang.String , java.lang.String , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Errors org.springframework.validation.Errors , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] ) { void ( org.springframework.validation.Errors , java.lang.String , java.lang.String , java.lang.Object[] , null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Errors org.springframework.validation.Errors , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.validation.Errors , STRING ) ; java.lang.Object java.lang.Object = org.springframework.validation.Errors . getFieldValue ( java.lang.String ) ; if ( java.lang.Object == null || ! StringUtils . hasText ( java.lang.Object . java.lang.String ( ) ) ) { org.springframework.validation.Errors . rejectValue ( java.lang.String , java.lang.String , java.lang.Object[] , java.lang.String ) ; } }  <METHOD_END>
