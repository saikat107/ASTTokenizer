<METHOD_START> private org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo ( final java.lang.String java.lang.String ) throws java.lang.Exception { YamlConfigurationFactory < org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo > org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo> = new YamlConfigurationFactory <> ( org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo .class ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo> . setYaml ( java.lang.String ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo> . setPropertyAliases ( this . java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo> . setValidator ( this . org.springframework.boot.bind.Validator ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo> . setMessageSource ( new StaticMessageSource ( ) ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; return org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo> . getObject ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee ( final java.lang.String java.lang.String ) throws java.lang.Exception { YamlConfigurationFactory < org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee > org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee> = new YamlConfigurationFactory <> ( org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee .class ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee> . setYaml ( java.lang.String ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee> . setPropertyAliases ( this . java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee> . setValidator ( this . org.springframework.boot.bind.Validator ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee> . setMessageSource ( new StaticMessageSource ( ) ) ; org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee> . afterPropertiesSet ( ) ; return org.springframework.boot.bind.YamlConfigurationFactory<org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee> . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo = org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo ( STRING ) ; assertThat ( org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> . java.util.Map<java.lang.String,java.lang.String> ( org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo .class , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo = org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo ( STRING ) ; assertThat ( org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = YAMLException .class ) public void void ( ) java.lang.Exception { org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BindException .class ) public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.Validator = new SpringValidatorAdapter ( Validation . buildDefaultValidatorFactory ( ) . getValidator ( ) ) ; org.springframework.boot.bind.YamlConfigurationFactoryTests.Foo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee = org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee ( STRING ) ; assertThat ( org.springframework.boot.bind.YamlConfigurationFactoryTests.Jee . java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
