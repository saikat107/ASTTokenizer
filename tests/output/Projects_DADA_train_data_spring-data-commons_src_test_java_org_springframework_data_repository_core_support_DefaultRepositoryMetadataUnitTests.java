<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultRepositoryMetadata ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultRepositoryMetadata ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultRepositoryMetadata ( java.util.Collection .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultRepositoryMetadata ( Repository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.UserRepository .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getDomainType ( ) ) . isEqualTo ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User .class ) ; org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.SomeDao .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getDomainType ( ) ) . isEqualTo ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.ExtensionOfUserCustomExtendedDao .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getDomainType ( ) ) . isEqualTo ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.GenericEntityRepository .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getDomainType ( ) ) . isEqualTo ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.GenericEntity .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.UserRepository .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getIdType ( ) ) . isEqualTo ( java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.ConcreteRepository .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getIdType ( ) ) . isEqualTo ( java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.OptionalRepository .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.OptionalRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getReturnedDomainClass ( java.lang.reflect.Method ) ) . isEqualTo ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.OptionalRepository .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.OptionalRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getReturnedDomainClass ( java.lang.reflect.Method ) ) . isEqualTo ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata = new DefaultRepositoryMetadata ( org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.IdTypeFixingRepository .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getDomainType ( ) ) . isEqualTo ( java.lang.Object .class ) ; assertThat ( org.springframework.data.repository.core.support.RepositoryMetadata . getIdType ( ) ) . isEqualTo ( java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.Page<org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User> < org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User > org.springframework.data.repository.core.support.Page<org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User> ( Pageable org.springframework.data.repository.core.support.Pageable , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public java . util . java.util.Optional<T> < T > java.util.Optional<T> ( ID ID ) { return java . util . java.util.Optional . java.util.Optional<T> ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.Optional<org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User> < org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User > org.springframework.data.repository.core.support.Optional<org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.core.support.Optional<org.springframework.data.repository.core.support.Optional<org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User>> < Optional < org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User > > org.springframework.data.repository.core.support.Optional<org.springframework.data.repository.core.support.Optional<org.springframework.data.repository.core.support.DefaultRepositoryMetadataUnitTests.User>> ( java.lang.String java.lang.String );  <METHOD_END>
