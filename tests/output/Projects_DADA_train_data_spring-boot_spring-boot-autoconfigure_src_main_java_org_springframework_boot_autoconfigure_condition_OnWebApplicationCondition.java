<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { boolean boolean = org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . isAnnotated ( ConditionalOnWebApplication .class . java.lang.String ( ) ) ; ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome = org.springframework.boot.autoconfigure.condition.ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , boolean ) ; if ( boolean && ! org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) ) { return ConditionOutcome . noMatch ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . getConditionMessage ( ) ) ; } if ( ! boolean && org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) ) { return ConditionOutcome . noMatch ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . getConditionMessage ( ) ) ; } return ConditionOutcome . match ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . getConditionMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , boolean boolean ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( ConditionalOnWebApplication .class , boolean ? STRING : STRING ) ; Type org.springframework.boot.autoconfigure.condition.Type = org.springframework.boot.autoconfigure.condition.Type ( org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) ; if ( Type . SERVLET == org.springframework.boot.autoconfigure.condition.Type ) { return org.springframework.boot.autoconfigure.condition.ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionContext ) ; } else if ( Type . REACTIVE == org.springframework.boot.autoconfigure.condition.Type ) { return org.springframework.boot.autoconfigure.condition.ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionContext ) ; } else { ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome = org.springframework.boot.autoconfigure.condition.ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionContext ) ; if ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) && boolean ) { return new ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) , ConditionMessage.Builder . because ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . getMessage ( ) ) ) ; } ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome = org.springframework.boot.autoconfigure.condition.ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionContext ) ; if ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) && boolean ) { return new ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) , ConditionMessage.Builder . because ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . getMessage ( ) ) ) ; } boolean boolean = ( boolean ? org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) && org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) : org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) || org.springframework.boot.autoconfigure.condition.ConditionOutcome . isMatch ( ) ) ; return new ConditionOutcome ( boolean , ConditionMessage.Builder . because ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . getMessage ( ) ) . append ( STRING ) . append ( org.springframework.boot.autoconfigure.condition.ConditionOutcome . getMessage ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( ! ClassUtils . isPresent ( java.lang.String , org.springframework.boot.autoconfigure.condition.ConditionContext . getClassLoader ( ) ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; } if ( org.springframework.boot.autoconfigure.condition.ConditionContext . getBeanFactory ( ) != null ) { java.lang.String [] java.lang.String[] = org.springframework.boot.autoconfigure.condition.ConditionContext . getBeanFactory ( ) . getRegisteredScopeNames ( ) ; if ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } } if ( org.springframework.boot.autoconfigure.condition.ConditionContext . getEnvironment ( ) instanceof StandardServletEnvironment ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } if ( org.springframework.boot.autoconfigure.condition.ConditionContext . getResourceLoader ( ) instanceof WebApplicationContext ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . because ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( org.springframework.boot.autoconfigure.condition.ConditionContext . getResourceLoader ( ) instanceof ReactiveWebApplicationContext ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . because ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.Type org.springframework.boot.autoconfigure.condition.Type ( AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . getAnnotationAttributes ( ConditionalOnWebApplication .class . java.lang.String ( ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { return ( Type ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; } return Type . ANY ; }  <METHOD_END>
