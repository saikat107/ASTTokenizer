<METHOD_START> private void void ( java.lang.String java.lang.String ) { try { org.springframework.data.couchbase.core.CouchbaseTemplate . remove ( java.lang.String ) ; } catch ( DocumentDoesNotExistException org.springframework.data.couchbase.core.DocumentDoesNotExistException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; void ( java.lang.String ) ; java.lang.String java.lang.String = STRING ; boolean boolean = false ; Beer org.springframework.data.couchbase.core.Beer = new Beer ( java.lang.String , java.lang.String , boolean , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.Beer ) ; RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . get ( java.lang.String , RawJsonDocument .class ) ; assertNotNull ( org.springframework.data.couchbase.core.RawJsonDocument ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.core.RawJsonDocument . content ( ) ; assertNotNull ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.data.couchbase.core.ObjectMapper . readValue ( java.lang.String , new TypeReference < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ( ) {} ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MappingCouchbaseConverter . TYPEKEY_DEFAULT ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MappingCouchbaseConverter . TYPEKEY_DEFAULT ) ) ; assertEquals ( false , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithExpiry org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithExpiry = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithExpiry ( java.lang.String ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithExpiry ) ; assertNotNull ( org.springframework.data.couchbase.core.Bucket . get ( java.lang.String ) ) ; java.lang.Thread . void ( NUMBER ) ; assertNull ( org.springframework.data.couchbase.core.Bucket . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; void ( java.lang.String ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson ( java.lang.String , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson ) ; RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . get ( java.lang.String , RawJsonDocument .class ) ; assertNotNull ( org.springframework.data.couchbase.core.RawJsonDocument ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.core.RawJsonDocument . content ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.data.couchbase.core.ObjectMapper . readValue ( java.lang.String , new TypeReference < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( ) {} ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson ( java.lang.String , STRING ) ; try { org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.core.OptimisticLockingFailureException ) { } org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . get ( java.lang.String , RawJsonDocument .class ) ; assertNotNull ( org.springframework.data.couchbase.core.RawJsonDocument ) ; java.lang.String = org.springframework.data.couchbase.core.RawJsonDocument . content ( ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.data.couchbase.core.ObjectMapper . readValue ( java.lang.String , new TypeReference < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( ) {} ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson ( java.lang.String , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . update ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimplePerson ) ; assertNull ( org.springframework.data.couchbase.core.Bucket . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Beer org.springframework.data.couchbase.core.Beer = new Beer ( java.lang.String , STRING , false , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.Beer ) ; java.lang.Object java.lang.Object = org.springframework.data.couchbase.core.Bucket . get ( java.lang.String ) ; assertNotNull ( java.lang.Object ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . remove ( org.springframework.data.couchbase.core.Beer ) ; java.lang.Object = org.springframework.data.couchbase.core.Bucket . get ( java.lang.String ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( null ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.LinkedList<java.lang.Integer> < java.lang.Integer > ( ) ; java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> = new java.util.HashMap<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > ( ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , true ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , false ) ; java.util.Map<java.lang.String,java.lang.Boolean> . java.lang.Boolean ( STRING , null ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > ( ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson ( java.lang.String , java.util.List<java.lang.String> , java.util.List<java.lang.Integer> , java.util.Map<java.lang.String,java.lang.Boolean> , java.util.Map<java.lang.String,java.lang.Integer> ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson ) ; assertNotNull ( org.springframework.data.couchbase.core.Bucket . get ( java.lang.String ) ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson .class ) ; assertEquals ( java.util.List<java.lang.String> , org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson . java.util.List<java.lang.String> ( ) ) ; assertEquals ( java.util.List<java.lang.Integer> , org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson . java.util.List<java.lang.Integer> ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson . java.lang.String ( ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Boolean> , org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson . java.util.Map<java.lang.String,java.lang.Boolean> ( ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Integer> , org.springframework.data.couchbase.core.CouchbaseTemplateTests.ComplexPerson . java.util.Map<java.lang.String,java.lang.Integer> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; boolean boolean = true ; Beer org.springframework.data.couchbase.core.Beer = new Beer ( java.lang.String , java.lang.String , boolean , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.Beer ) ; Beer org.springframework.data.couchbase.core.Beer = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( java.lang.String , Beer .class ) ; assertNotNull ( org.springframework.data.couchbase.core.Beer ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.core.Beer . getId ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.couchbase.core.Beer . getName ( ) ) ; assertEquals ( boolean , org.springframework.data.couchbase.core.Beer . getActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ViewQuery org.springframework.data.couchbase.core.ViewQuery = ViewQuery . from ( STRING , STRING ) ; org.springframework.data.couchbase.core.ViewQuery . stale ( Stale . FALSE ) ; final java.util.List<org.springframework.data.couchbase.core.Beer> < Beer > java.util.List<org.springframework.data.couchbase.core.Beer> = org.springframework.data.couchbase.core.CouchbaseTemplate . findByView ( org.springframework.data.couchbase.core.ViewQuery , Beer .class ) ; assertTrue ( java.util.List<org.springframework.data.couchbase.core.Beer> . size ( ) > NUMBER ) ; for ( Beer org.springframework.data.couchbase.core.Beer : java.util.List<org.springframework.data.couchbase.core.Beer> ) { assertNotNull ( org.springframework.data.couchbase.core.Beer . getId ( ) ) ; assertNotNull ( org.springframework.data.couchbase.core.Beer . getName ( ) ) ; assertNotNull ( org.springframework.data.couchbase.core.Beer . getActive ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { N1qlQuery org.springframework.data.couchbase.core.N1qlQuery = N1qlQuery . simple ( select ( STRING ) . from ( i ( org.springframework.data.couchbase.core.Bucket . name ( ) ) ) . where ( x ( STRING ) . isNotMissing ( ) ) ) ; N1qlQueryResult org.springframework.data.couchbase.core.N1qlQueryResult = org.springframework.data.couchbase.core.CouchbaseTemplate . queryN1QL ( org.springframework.data.couchbase.core.N1qlQuery ) ; assertNotNull ( org.springframework.data.couchbase.core.N1qlQueryResult ) ; assertTrue ( org.springframework.data.couchbase.core.N1qlQueryResult . errors ( ) . toString ( ) , org.springframework.data.couchbase.core.N1qlQueryResult . finalSuccess ( ) ) ; assertFalse ( org.springframework.data.couchbase.core.N1qlQueryResult . allRows ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment ( STRING , NUMBER , STRING , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment ( STRING , NUMBER , STRING , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( java.util.Arrays . java.util.List<org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment> ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment , org.springframework.data.couchbase.core.CouchbaseTemplateTests.FullFragment ) ) ; N1qlQuery org.springframework.data.couchbase.core.N1qlQuery = N1qlQuery . simple ( select ( i ( STRING ) ) . from ( i ( org.springframework.data.couchbase.core.Bucket . name ( ) ) ) . where ( x ( STRING ) . eq ( s ( STRING ) ) . and ( x ( STRING ) . gt ( NUMBER ) ) ) , N1qlParams . build ( ) . consistency ( ScanConsistency . REQUEST_PLUS ) ) ; java.util.List<org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment> < org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment > java.util.List<org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment> = org.springframework.data.couchbase.core.CouchbaseTemplate . findByN1QLProjection ( org.springframework.data.couchbase.core.N1qlQuery , org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment .class ) ; assertNotNull ( java.util.List<org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment> ) ; assertFalse ( java.util.List<org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment> . boolean ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment> . int ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment> . org.springframework.data.couchbase.core.CouchbaseTemplateTests.Fragment ( NUMBER ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final long long = new java.util.Date ( ) . long ( ) ; final int int = new java.util.Random ( ) . int ( ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( new org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt ( STRING , long , int ) ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt .class ) ; assertNotNull ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt ) ; assertEquals ( long , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt . long ( ) ) ; assertEquals ( int , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt . int ( ) ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( new org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt ( STRING , int , int ) ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt .class ) ; assertNotNull ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt ) ; assertEquals ( int , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt . long ( ) ) ; assertEquals ( int , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithLongAndInt . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum . org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type . org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum .class ) ; assertNotNull ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum ) ; assertEquals ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum . org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ( ) , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum . org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type . org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass ( STRING , java.lang.Integer .class ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass . void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass .class ) ; assertNotNull ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass ) ; assertThat ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithClass . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = org.springframework.data.couchbase.core.Bucket . get ( STRING , RawJsonDocument .class ) ; assertEquals ( org.springframework.data.couchbase.core.RawJsonDocument . cas ( ) , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( STRING , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; long long = org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ; try { org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.core.OptimisticLockingFailureException ) { } long long = org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ; assertTrue ( long > NUMBER ) ; assertTrue ( long > NUMBER ) ; assertEquals ( long , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( STRING , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; long long = org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; long long = org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ; assertTrue ( long > NUMBER ) ; assertTrue ( long > NUMBER ) ; assertNotEquals ( long , long ) ; assertEquals ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass .class ) . getField ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = OptimisticLockingFailureException .class ) public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( STRING , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = RawJsonDocument . create ( STRING , STRING ) ; assertNotNull ( org.springframework.data.couchbase.core.Bucket . upsert ( org.springframework.data.couchbase.core.RawJsonDocument ) ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . update ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( STRING , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; long long = org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . update ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; long long = org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ; assertTrue ( long > NUMBER ) ; assertTrue ( long > NUMBER ) ; assertNotEquals ( long , long ) ; assertEquals ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass .class ) . getField ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = OptimisticLockingFailureException .class ) public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( STRING , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; RawJsonDocument org.springframework.data.couchbase.core.RawJsonDocument = RawJsonDocument . create ( STRING , STRING ) ; assertNotNull ( org.springframework.data.couchbase.core.Bucket . upsert ( org.springframework.data.couchbase.core.RawJsonDocument ) ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . update ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( STRING , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; assertTrue ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) > NUMBER ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( STRING , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass .class ) ; assertEquals ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = org.springframework.data.couchbase.core.TestName . getMethodName ( ) ; void ( java.lang.String ) ; final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( java.lang.String , STRING ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; AsyncUtils . executeConcurrently ( NUMBER , new java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { boolean boolean = false ; while( ! boolean ) { long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass .class ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . java.lang.String = STRING + long ; try { org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; boolean = true ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.core.OptimisticLockingFailureException ) {					} } return null ; } } ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass .class ) ; assertNotEquals ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . java.lang.String ) ; assertNotEquals ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { boolean boolean = false ; while( ! boolean ) { long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass .class ) ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass . java.lang.String = STRING + long ; try { org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; boolean = true ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.core.OptimisticLockingFailureException ) {					} } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = org.springframework.data.couchbase.core.TestName . getMethodName ( ) ; void ( java.lang.String ) ; final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( ) ; final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( ) ; AsyncUtils . executeConcurrently ( NUMBER , new java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; java.lang.String java.lang.String = STRING + long ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( java.lang.String , java.lang.String ) ; try { org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.core.OptimisticLockingFailureException ) { java.util.concurrent.atomic.AtomicLong . long ( ) ; } return null ; } } ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicLong . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; java.lang.String java.lang.String = STRING + long ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ( java.lang.String , java.lang.String ) ; try { org.springframework.data.couchbase.core.CouchbaseTemplate . insert ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.VersionedClass ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.core.OptimisticLockingFailureException ) { java.util.concurrent.atomic.AtomicLong . long ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithTouchOnRead org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithTouchOnRead = new org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithTouchOnRead ( java.lang.String ) ; org.springframework.data.couchbase.core.CouchbaseTemplate . save ( org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithTouchOnRead ) ; java.lang.Thread . void ( NUMBER ) ; assertNotNull ( org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithTouchOnRead .class ) ) ; java.lang.Thread . void ( NUMBER ) ; assertNotNull ( org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithTouchOnRead .class ) ) ; java.lang.Thread . void ( NUMBER ) ; assertNull ( org.springframework.data.couchbase.core.CouchbaseTemplate . findById ( java.lang.String , org.springframework.data.couchbase.core.CouchbaseTemplateTests.DocumentWithTouchOnRead .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ViewQuery org.springframework.data.couchbase.core.ViewQuery = ViewQuery . from ( STRING , STRING ) ; org.springframework.data.couchbase.core.ViewQuery . descending ( ) . includeDocsOrdered ( true ) ; java.lang.String java.lang.String = null ; java.util.List<org.springframework.data.couchbase.core.Beer> < Beer > java.util.List<org.springframework.data.couchbase.core.Beer> = org.springframework.data.couchbase.core.CouchbaseTemplate . findByView ( org.springframework.data.couchbase.core.ViewQuery , Beer .class ) ; assertTrue ( org.springframework.data.couchbase.core.ViewQuery . isIncludeDocs ( ) ) ; assertTrue ( org.springframework.data.couchbase.core.ViewQuery . isOrderRetained ( ) ) ; assertEquals ( RawJsonDocument .class , org.springframework.data.couchbase.core.ViewQuery . includeDocsTarget ( ) ) ; for ( Beer org.springframework.data.couchbase.core.Beer : java.util.List<org.springframework.data.couchbase.core.Beer> ) { if ( java.lang.String != null ) { assertThat ( org.springframework.data.couchbase.core.Beer . getName ( ) + STRING + java.lang.String , org.springframework.data.couchbase.core.Beer . getName ( ) . compareTo ( java.lang.String ) < NUMBER ) ; } java.lang.String = org.springframework.data.couchbase.core.Beer . getName ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> , java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> , java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ) { this . java.lang.String = java.lang.String ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; this . java.util.List<java.lang.Integer> = java.util.List<java.lang.Integer> ; this . java.util.Map<java.lang.String,java.lang.Boolean> = java.util.Map<java.lang.String,java.lang.Boolean> ; this . java.util.Map<java.lang.String,java.lang.Integer> = java.util.Map<java.lang.String,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( ) { return java.util.List<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,java.lang.Boolean> < java.lang.String , java.lang.Boolean > java.util.Map<java.lang.String,java.lang.Boolean> ( ) { return java.util.Map<java.lang.String,java.lang.Boolean> ; }  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ( ) { return java.util.Map<java.lang.String,java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( final java.lang.String java.lang.String , final long long , int int ) { this . java.lang.String = java.lang.String ; this . long = long ; this . int = int ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> void void ( final long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> void ( final java.lang.String java.lang.String , final org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ) { this . java.lang.String = java.lang.String ; this . org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type = org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ( ) { return org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ; }  <METHOD_END>
<METHOD_START> void void ( final org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ) { this . org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type = org.springframework.data.couchbase.core.CouchbaseTemplateTests.SimpleWithEnum.Type ; }  <METHOD_END>
<METHOD_START> void ( final java.lang.String java.lang.String , final java.lang.Class<java.lang.Integer> < java.lang.Integer > java.lang.Class<java.lang.Integer> ) { this . java.lang.String = java.lang.String ; this . java.lang.Class<java.lang.Integer> = java.lang.Class<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.Class<java.lang.Integer> < java.lang.Integer > java.lang.Class<java.lang.Integer> ( ) { return java.lang.Class<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> void void ( final java.lang.Class<java.lang.Integer> < java.lang.Integer > java.lang.Class<java.lang.Integer> ) { this . java.lang.Class<java.lang.Integer> = java.lang.Class<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + java.lang.String + '\'' + STRING + long + STRING + java.lang.String + '\'' + '}' ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , long long , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . long = long ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
