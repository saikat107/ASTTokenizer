<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.config.xml.AbstractBeanDefinition org.springframework.data.gemfire.config.xml.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.gemfire.config.xml.ParserContext ) { BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = new ClientCacheParser ( ) . parse ( org.w3c.dom.Element , org.springframework.data.gemfire.config.xml.ParserContext ) ; org.springframework.data.gemfire.config.xml.ParserContext . getRegistry ( ) . registerBeanDefinition ( GemfireConstants . DEFAULT_GEMFIRE_CACHE_NAME , org.springframework.data.gemfire.config.xml.BeanDefinition ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = new PoolParser ( ) . parse ( org.w3c.dom.Element , org.springframework.data.gemfire.config.xml.ParserContext ) ; MutablePropertyValues org.springframework.data.gemfire.config.xml.MutablePropertyValues = org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) ; if ( ! org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.data.gemfire.config.xml.MutablePropertyValues . add ( java.lang.String , true ) ; } org.springframework.data.gemfire.config.xml.ParserContext . getRegistry ( ) . registerBeanDefinition ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME , org.springframework.data.gemfire.config.xml.BeanDefinition ) ; if ( org.springframework.data.gemfire.config.xml.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.config.xml.Log . debug ( java.lang.String . java.lang.String ( STRING , GemfireConstants . DEFAULT_GEMFIRE_CACHE_NAME , org.springframework.data.gemfire.config.xml.BeanDefinition . getBeanClassName ( ) ) ) ; } BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( GemfireDataSourcePostProcessor .class ) ; org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( GemfireConstants . DEFAULT_GEMFIRE_CACHE_NAME ) ; BeanDefinitionReaderUtils . registerWithGeneratedName ( org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) , org.springframework.data.gemfire.config.xml.ParserContext . getRegistry ( ) ) ; return null ; }  <METHOD_END>
