<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.socket.messaging.StompSubProtocolHandler = new StompSubProtocolHandler ( ) ; this . org.springframework.web.socket.messaging.MessageChannel = Mockito . mock ( MessageChannel .class ) ; this . org.springframework.web.socket.messaging.ArgumentCaptor<org.springframework.web.socket.messaging.Message> = ArgumentCaptor . forClass ( Message .class ) ; when ( this . org.springframework.web.socket.messaging.MessageChannel . send ( any ( ) ) ) . thenReturn ( true ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession = new TestWebSocketSession ( ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession . setId ( STRING ) ; this . org.springframework.web.socket.messaging.TestWebSocketSession . setPrincipal ( new TestPrincipal ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECTED ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; WebSocketMessage < ? > org.springframework.web.socket.messaging.WebSocketMessage<?> = this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertEquals ( STRING + STRING + STRING + STRING , org.springframework.web.socket.messaging.WebSocketMessage<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.socket.messaging.TestWebSocketSession . setPrincipal ( new org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.UniqueUser ( STRING ) ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECTED ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; WebSocketMessage < ? > org.springframework.web.socket.messaging.WebSocketMessage<?> = this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertEquals ( STRING + STRING + STRING + STRING , org.springframework.web.socket.messaging.WebSocketMessage<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setHeartbeat ( NUMBER , NUMBER ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setAcceptVersion ( STRING ) ; Message < ? > org.springframework.web.socket.messaging.Message<?> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; SimpMessageHeaderAccessor org.springframework.web.socket.messaging.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . CONNECT_ACK ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . CONNECT_MESSAGE_HEADER , org.springframework.web.socket.messaging.Message<> ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . HEART_BEAT_HEADER , new long [] { NUMBER , NUMBER } ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = ( TextMessage ) this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertEquals ( STRING + STRING + STRING + STRING + STRING + STRING , org.springframework.web.socket.messaging.TextMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setHeartbeat ( NUMBER , NUMBER ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setAcceptVersion ( STRING ) ; Message < ? > org.springframework.web.socket.messaging.Message<?> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; SimpMessageHeaderAccessor org.springframework.web.socket.messaging.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . CONNECT_ACK ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . CONNECT_MESSAGE_HEADER , org.springframework.web.socket.messaging.Message<> ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = ( TextMessage ) this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertEquals ( STRING + STRING + STRING + STRING + STRING + STRING , org.springframework.web.socket.messaging.TextMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . DISCONNECT ) ; Message < ? > org.springframework.web.socket.messaging.Message<?> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; SimpMessageHeaderAccessor org.springframework.web.socket.messaging.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . DISCONNECT_ACK ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . DISCONNECT_MESSAGE_HEADER , org.springframework.web.socket.messaging.Message<> ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = ( TextMessage ) this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertEquals ( STRING + STRING + STRING + STRING , org.springframework.web.socket.messaging.TextMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . DISCONNECT ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setReceipt ( STRING ) ; Message < ? > org.springframework.web.socket.messaging.Message<?> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; SimpMessageHeaderAccessor org.springframework.web.socket.messaging.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . DISCONNECT_ACK ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . DISCONNECT_MESSAGE_HEADER , org.springframework.web.socket.messaging.Message<> ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = ( TextMessage ) this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertEquals ( STRING + STRING + STRING , org.springframework.web.socket.messaging.TextMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpMessageHeaderAccessor org.springframework.web.socket.messaging.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . HEARTBEAT ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setSessionId ( STRING ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setUser ( new TestPrincipal ( STRING ) ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = ( TextMessage ) this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.web.socket.messaging.TextMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { SockJsSession org.springframework.web.socket.messaging.SockJsSession = Mockito . mock ( SockJsSession .class ) ; when ( org.springframework.web.socket.messaging.SockJsSession . getId ( ) ) . thenReturn ( STRING ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECTED ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setHeartbeat ( NUMBER , NUMBER ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( org.springframework.web.socket.messaging.SockJsSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; verify ( org.springframework.web.socket.messaging.SockJsSession ) . getId ( ) ; verify ( org.springframework.web.socket.messaging.SockJsSession ) . getPrincipal ( ) ; verify ( org.springframework.web.socket.messaging.SockJsSession ) . disableHeartbeat ( ) ; verify ( org.springframework.web.socket.messaging.SockJsSession ) . sendMessage ( any ( WebSocketMessage .class ) ) ; verifyNoMoreInteractions ( org.springframework.web.socket.messaging.SockJsSession ) ; org.springframework.web.socket.messaging.SockJsSession = Mockito . mock ( SockJsSession .class ) ; when ( org.springframework.web.socket.messaging.SockJsSession . getId ( ) ) . thenReturn ( STRING ) ; org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECTED ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setHeartbeat ( NUMBER , NUMBER ) ; org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( org.springframework.web.socket.messaging.SockJsSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; verify ( org.springframework.web.socket.messaging.SockJsSession ) . getId ( ) ; verify ( org.springframework.web.socket.messaging.SockJsSession ) . getPrincipal ( ) ; verify ( org.springframework.web.socket.messaging.SockJsSession ) . sendMessage ( any ( WebSocketMessage .class ) ) ; verifyNoMoreInteractions ( org.springframework.web.socket.messaging.SockJsSession ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . MESSAGE ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setMessageId ( STRING ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setDestination ( STRING ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setNativeHeader ( StompHeaderAccessor . ORIGINAL_DESTINATION , STRING ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; WebSocketMessage < ? > org.springframework.web.socket.messaging.WebSocketMessage<?> = this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertTrue ( ( ( java.lang.String ) org.springframework.web.socket.messaging.WebSocketMessage<> . getPayload ( ) ) . boolean ( STRING ) ) ; assertFalse ( ( ( java.lang.String ) org.springframework.web.socket.messaging.WebSocketMessage<> . getPayload ( ) ) . boolean ( SimpMessageHeaderAccessor . ORIGINAL_DESTINATION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . MESSAGE ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setMessageId ( STRING ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setContentType ( MimeTypeUtils . APPLICATION_OCTET_STREAM ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setDestination ( STRING ) ; byte [] byte[] = new byte [ NUMBER ] ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; WebSocketMessage < ? > org.springframework.web.socket.messaging.WebSocketMessage<?> = this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertTrue ( org.springframework.web.socket.messaging.WebSocketMessage<> instanceof BinaryMessage ) ; byte[] = byte[] ; org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; org.springframework.web.socket.messaging.WebSocketMessage<?> = this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertTrue ( org.springframework.web.socket.messaging.WebSocketMessage<> instanceof TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextMessage org.springframework.web.socket.messaging.TextMessage = StompTextMessageBuilder . create ( StompCommand . CONNECT ) . headers ( STRING , STRING , STRING , STRING ) . build ( ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionStarted ( this . org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , this . org.springframework.web.socket.messaging.MessageChannel ) ; verify ( this . org.springframework.web.socket.messaging.MessageChannel ) . send ( this . org.springframework.web.socket.messaging.ArgumentCaptor<org.springframework.web.socket.messaging.Message> . capture ( ) ) ; Message < ? > org.springframework.web.socket.messaging.Message<?> = this . org.springframework.web.socket.messaging.ArgumentCaptor<org.springframework.web.socket.messaging.Message> . getValue ( ) ; assertNotNull ( org.springframework.web.socket.messaging.Message<> ) ; assertEquals ( STRING , SimpMessageHeaderAccessor . getSessionId ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) ) ; assertNotNull ( SimpMessageHeaderAccessor . getSessionAttributes ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) ) ; assertNotNull ( SimpMessageHeaderAccessor . getUser ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) ) ; assertEquals ( STRING , SimpMessageHeaderAccessor . getUser ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) . getName ( ) ) ; assertNotNull ( SimpMessageHeaderAccessor . getHeartbeat ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) ) ; assertArrayEquals ( new long [] { NUMBER , NUMBER } , SimpMessageHeaderAccessor . getHeartbeat ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.web.socket.messaging.Message<> ) ; assertEquals ( StompCommand . CONNECT , org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.messaging.StompHeaderAccessor . getLogin ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.messaging.StompHeaderAccessor . getPasscode ( ) ) ; assertArrayEquals ( new long [] { NUMBER , NUMBER } , org.springframework.web.socket.messaging.StompHeaderAccessor . getHeartbeat ( ) ) ; assertEquals ( new java.util.HashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) , org.springframework.web.socket.messaging.StompHeaderAccessor . getAcceptVersion ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> <> ( ) ; ExecutorSubscribableChannel org.springframework.web.socket.messaging.ExecutorSubscribableChannel = new ExecutorSubscribableChannel ( ) ; org.springframework.web.socket.messaging.ExecutorSubscribableChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.web.socket.messaging.Message<?> < ? > org.springframework.web.socket.messaging.Message<?> ( Message < ? > org.springframework.web.socket.messaging.Message<?> , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . void ( MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , MessageHeaderAccessor .class ) . isMutable ( ) ) ; return org.springframework.web.socket.messaging.Message<> ; } } ) ; org.springframework.web.socket.messaging.ExecutorSubscribableChannel . addInterceptor ( new ImmutableMessageChannelInterceptor ( ) ) ; StompSubProtocolHandler org.springframework.web.socket.messaging.StompSubProtocolHandler = new StompSubProtocolHandler ( ) ; org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionStarted ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.ExecutorSubscribableChannel ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = StompTextMessageBuilder . create ( StompCommand . CONNECT ) . build ( ) ; org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , org.springframework.web.socket.messaging.ExecutorSubscribableChannel ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . java.lang.Boolean ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . java.lang.Boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.Message<?> < ? > org.springframework.web.socket.messaging.Message<?> ( Message < ? > org.springframework.web.socket.messaging.Message<?> , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . void ( MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , MessageHeaderAccessor .class ) . isMutable ( ) ) ; return org.springframework.web.socket.messaging.Message<> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> <> ( ) ; ExecutorSubscribableChannel org.springframework.web.socket.messaging.ExecutorSubscribableChannel = new ExecutorSubscribableChannel ( ) ; org.springframework.web.socket.messaging.ExecutorSubscribableChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.web.socket.messaging.Message<?> < ? > org.springframework.web.socket.messaging.Message<?> ( Message < ? > org.springframework.web.socket.messaging.Message<?> , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . void ( MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , MessageHeaderAccessor .class ) . isMutable ( ) ) ; return org.springframework.web.socket.messaging.Message<> ; } } ) ; StompSubProtocolHandler org.springframework.web.socket.messaging.StompSubProtocolHandler = new StompSubProtocolHandler ( ) ; org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionStarted ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.ExecutorSubscribableChannel ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = StompTextMessageBuilder . create ( StompCommand . CONNECT ) . build ( ) ; org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , org.springframework.web.socket.messaging.ExecutorSubscribableChannel ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . java.lang.Boolean ( ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . java.lang.Boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.Message<?> < ? > org.springframework.web.socket.messaging.Message<?> ( Message < ? > org.springframework.web.socket.messaging.Message<?> , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> . void ( MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , MessageHeaderAccessor .class ) . isMutable ( ) ) ; return org.springframework.web.socket.messaging.Message<> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExecutorSubscribableChannel org.springframework.web.socket.messaging.ExecutorSubscribableChannel = new ExecutorSubscribableChannel ( ) ; org.springframework.web.socket.messaging.ExecutorSubscribableChannel . addInterceptor ( new org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.AuthenticationInterceptor ( STRING ) ) ; org.springframework.web.socket.messaging.ExecutorSubscribableChannel . addInterceptor ( new ImmutableMessageChannelInterceptor ( ) ) ; org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestMessageHandler org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestMessageHandler = new org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestMessageHandler ( ) ; org.springframework.web.socket.messaging.ExecutorSubscribableChannel . subscribe ( org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestMessageHandler ) ; StompSubProtocolHandler org.springframework.web.socket.messaging.StompSubProtocolHandler = new StompSubProtocolHandler ( ) ; org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionStarted ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.ExecutorSubscribableChannel ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = StompTextMessageBuilder . create ( StompCommand . CONNECT ) . build ( ) ; org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , org.springframework.web.socket.messaging.ExecutorSubscribableChannel ) ; assertEquals ( NUMBER , org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestMessageHandler . java.util.List<org.springframework.web.socket.messaging.Message<?>> ( ) . size ( ) ) ; Message < ? > org.springframework.web.socket.messaging.Message<?> = org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestMessageHandler . java.util.List<org.springframework.web.socket.messaging.Message<?>> ( ) . get ( NUMBER ) ; java.security.Principal java.security.Principal = SimpMessageHeaderAccessor . getUser ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) ; assertNotNull ( java.security.Principal ) ; assertEquals ( STRING , java.security.Principal . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TextMessage org.springframework.web.socket.messaging.TextMessage = new TextMessage ( STRING ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionStarted ( this . org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , this . org.springframework.web.socket.messaging.MessageChannel ) ; verifyZeroInteractions ( this . org.springframework.web.socket.messaging.MessageChannel ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = ( TextMessage ) this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertTrue ( org.springframework.web.socket.messaging.TextMessage . getPayload ( ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher = new org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher ( ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . setApplicationEventPublisher ( org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionStarted ( this . org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = new TextMessage ( new StompEncoder ( ) . encode ( org.springframework.web.socket.messaging.Message<byte[]> ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , this . org.springframework.web.socket.messaging.MessageChannel ) ; org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECTED ) ; org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SUBSCRIBE ) ; org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.web.socket.messaging.TextMessage = new TextMessage ( new StompEncoder ( ) . encode ( org.springframework.web.socket.messaging.Message<byte[]> ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , this . org.springframework.web.socket.messaging.MessageChannel ) ; org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . UNSUBSCRIBE ) ; org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; org.springframework.web.socket.messaging.TextMessage = new TextMessage ( new StompEncoder ( ) . encode ( org.springframework.web.socket.messaging.Message<byte[]> ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , this . org.springframework.web.socket.messaging.MessageChannel ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionEnded ( this . org.springframework.web.socket.messaging.TestWebSocketSession , CloseStatus . BAD_DATA , this . org.springframework.web.socket.messaging.MessageChannel ) ; assertEquals ( STRING + org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher . java.util.List<org.springframework.web.socket.messaging.ApplicationEvent> , NUMBER , org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher . java.util.List<org.springframework.web.socket.messaging.ApplicationEvent> . size ( ) ) ; assertEquals ( SessionConnectEvent .class , org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher . java.util.List<org.springframework.web.socket.messaging.ApplicationEvent> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( SessionConnectedEvent .class , org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher . java.util.List<org.springframework.web.socket.messaging.ApplicationEvent> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( SessionSubscribeEvent .class , org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher . java.util.List<org.springframework.web.socket.messaging.ApplicationEvent> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( SessionUnsubscribeEvent .class , org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher . java.util.List<org.springframework.web.socket.messaging.ApplicationEvent> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( SessionDisconnectEvent .class , org.springframework.web.socket.messaging.StompSubProtocolHandlerTests.TestPublisher . java.util.List<org.springframework.web.socket.messaging.ApplicationEvent> . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationEventPublisher org.springframework.web.socket.messaging.ApplicationEventPublisher = mock ( ApplicationEventPublisher .class ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . setApplicationEventPublisher ( org.springframework.web.socket.messaging.ApplicationEventPublisher ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionStarted ( this . org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = new TextMessage ( new StompEncoder ( ) . encode ( org.springframework.web.socket.messaging.Message<byte[]> ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , this . org.springframework.web.socket.messaging.MessageChannel ) ; verify ( this . org.springframework.web.socket.messaging.MessageChannel ) . send ( this . org.springframework.web.socket.messaging.ArgumentCaptor<org.springframework.web.socket.messaging.Message> . capture ( ) ) ; Message < ? > org.springframework.web.socket.messaging.Message<?> = this . org.springframework.web.socket.messaging.ArgumentCaptor<org.springframework.web.socket.messaging.Message> . getValue ( ) ; assertNotNull ( org.springframework.web.socket.messaging.Message<> ) ; assertEquals ( StompCommand . CONNECT , StompHeaderAccessor . wrap ( org.springframework.web.socket.messaging.Message<> ) . getCommand ( ) ) ; reset ( this . org.springframework.web.socket.messaging.MessageChannel ) ; org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECTED ) ; org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageToClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.Message<byte[]> ) ; assertEquals ( NUMBER , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . size ( ) ) ; org.springframework.web.socket.messaging.TextMessage = ( TextMessage ) this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) . get ( NUMBER ) ; assertEquals ( STRING + STRING + STRING + STRING , org.springframework.web.socket.messaging.TextMessage . getPayload ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionEnded ( this . org.springframework.web.socket.messaging.TestWebSocketSession , CloseStatus . BAD_DATA , this . org.springframework.web.socket.messaging.MessageChannel ) ; verify ( this . org.springframework.web.socket.messaging.MessageChannel ) . send ( this . org.springframework.web.socket.messaging.ArgumentCaptor<org.springframework.web.socket.messaging.Message> . capture ( ) ) ; org.springframework.web.socket.messaging.Message<?> = this . org.springframework.web.socket.messaging.ArgumentCaptor<org.springframework.web.socket.messaging.Message> . getValue ( ) ; assertNotNull ( org.springframework.web.socket.messaging.Message<> ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.web.socket.messaging.Message<> ) ; assertEquals ( StompCommand . DISCONNECT , org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.messaging.StompHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.messaging.StompHeaderAccessor . getUser ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Runnable java.lang.Runnable = Mockito . mock ( java.lang.Runnable .class ) ; SimpAttributes org.springframework.web.socket.messaging.SimpAttributes = new SimpAttributes ( this . org.springframework.web.socket.messaging.TestWebSocketSession . getId ( ) , this . org.springframework.web.socket.messaging.TestWebSocketSession . getAttributes ( ) ) ; org.springframework.web.socket.messaging.SimpAttributes . setAttribute ( STRING , STRING ) ; org.springframework.web.socket.messaging.SimpAttributes . registerDestructionCallback ( STRING , java.lang.Runnable ) ; MessageChannel org.springframework.web.socket.messaging.MessageChannel = new MessageChannel ( ) { @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.web.socket.messaging.Message<?> ) { SimpAttributes org.springframework.web.socket.messaging.SimpAttributes = SimpAttributesContextHolder . currentAttributes ( ) ; assertThat ( org.springframework.web.socket.messaging.SimpAttributes . getAttribute ( STRING ) , is ( STRING ) ) ; return true ; } @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.web.socket.messaging.Message<?> , long long ) { return false ; } } ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionStarted ( this . org.springframework.web.socket.messaging.TestWebSocketSession , this . org.springframework.web.socket.messaging.MessageChannel ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; TextMessage org.springframework.web.socket.messaging.TextMessage = new TextMessage ( new StompEncoder ( ) . encode ( org.springframework.web.socket.messaging.Message<byte[]> ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . handleMessageFromClient ( this . org.springframework.web.socket.messaging.TestWebSocketSession , org.springframework.web.socket.messaging.TextMessage , org.springframework.web.socket.messaging.MessageChannel ) ; assertEquals ( java.util.Collections .< WebSocketMessage < ? > > java.util.List<org.springframework.web.socket.messaging.WebSocketMessage<?>> ( ) , org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) ) ; this . org.springframework.web.socket.messaging.StompSubProtocolHandler . afterSessionEnded ( this . org.springframework.web.socket.messaging.TestWebSocketSession , CloseStatus . BAD_DATA , org.springframework.web.socket.messaging.MessageChannel ) ; assertEquals ( java.util.Collections .< WebSocketMessage < ? > > java.util.List<org.springframework.web.socket.messaging.WebSocketMessage<?>> ( ) , this . org.springframework.web.socket.messaging.TestWebSocketSession . getSentMessages ( ) ) ; verify ( java.lang.Runnable , times ( NUMBER ) ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.web.socket.messaging.Message<?> ) { SimpAttributes org.springframework.web.socket.messaging.SimpAttributes = SimpAttributesContextHolder . currentAttributes ( ) ; assertThat ( org.springframework.web.socket.messaging.SimpAttributes . getAttribute ( STRING ) , is ( STRING ) ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.web.socket.messaging.Message<?> , long long ) { return false ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.web.socket.messaging.ApplicationEvent ) { java.util.List<org.springframework.web.socket.messaging.ApplicationEvent> . add ( org.springframework.web.socket.messaging.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { void ( new PayloadApplicationEvent <> ( this , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.socket.messaging.Message<?>> < Message < ? > > java.util.List<org.springframework.web.socket.messaging.Message<?>> ( ) { return this . java.util.List<org.springframework.web.socket.messaging.Message<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.web.socket.messaging.Message<?> ) throws org.springframework.web.socket.messaging.MessagingException { this . java.util.List<org.springframework.web.socket.messaging.Message<?>> . add ( org.springframework.web.socket.messaging.Message<> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.messaging.Message<?> < ? > org.springframework.web.socket.messaging.Message<?> ( Message < ? > org.springframework.web.socket.messaging.Message<?> , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { TestPrincipal org.springframework.web.socket.messaging.TestPrincipal = new TestPrincipal ( java.lang.String ) ; MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , StompHeaderAccessor .class ) . setUser ( org.springframework.web.socket.messaging.TestPrincipal ) ; return org.springframework.web.socket.messaging.Message<> ; }  <METHOD_END>
