<METHOD_START> @ Before public void void ( ) { this . sample.secure.oauth2.MockMvc = webAppContextSetup ( this . sample.secure.oauth2.WebApplicationContext ) . addFilters ( this . sample.secure.oauth2.FilterChainProxy ) . build ( ) ; SecurityContextHolder . clearContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.secure.oauth2.MockMvc . perform ( get ( STRING ) . accept ( MediaTypes . HAL_JSON ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) . andDo ( print ( ) ) ; this . sample.secure.oauth2.MockMvc . perform ( get ( STRING ) . accept ( MediaTypes . HAL_JSON ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) . andDo ( print ( ) ) ; this . sample.secure.oauth2.MockMvc . perform ( get ( STRING ) . accept ( MediaTypes . HAL_JSON ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) . andDo ( print ( ) ) ; this . sample.secure.oauth2.MockMvc . perform ( get ( STRING ) . accept ( MediaTypes . HAL_JSON ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) . andDo ( print ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + new java.lang.String ( Base64 . encode ( STRING . byte[] ( ) ) ) ; this . sample.secure.oauth2.MockMvc . perform ( get ( STRING ) . accept ( MediaTypes . HAL_JSON ) . header ( STRING , java.lang.String ) ) . andExpect ( header ( ) . string ( STRING , MediaTypes . HAL_JSON . toString ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andDo ( print ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + new java.lang.String ( Base64 . encode ( STRING . byte[] ( ) ) ) ; MvcResult sample.secure.oauth2.MvcResult = this . sample.secure.oauth2.MockMvc . perform ( post ( STRING ) . header ( STRING , java.lang.String ) . param ( STRING , STRING ) . param ( STRING , STRING ) . param ( STRING , STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andDo ( print ( ) ) . andReturn ( ) ; java.lang.Object java.lang.Object = this . sample.secure.oauth2.ObjectMapper . readValue ( sample.secure.oauth2.MvcResult . getResponse ( ) . getContentAsString ( ) , java.util.Map .class ) . get ( STRING ) ; MvcResult sample.secure.oauth2.MvcResult = this . sample.secure.oauth2.MockMvc . perform ( get ( STRING ) . accept ( MediaTypes . HAL_JSON ) . header ( STRING , STRING + java.lang.Object ) ) . andExpect ( header ( ) . string ( STRING , MediaTypes . HAL_JSON . toString ( ) + STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andDo ( print ( ) ) . andReturn ( ) ; Flight sample.secure.oauth2.Flight = this . sample.secure.oauth2.ObjectMapper . readValue ( sample.secure.oauth2.MvcResult . getResponse ( ) . getContentAsString ( ) , Flight .class ) ; assertThat ( sample.secure.oauth2.Flight . getOrigin ( ) ) . isEqualTo ( STRING ) ; assertThat ( sample.secure.oauth2.Flight . getDestination ( ) ) . isEqualTo ( STRING ) ; assertThat ( sample.secure.oauth2.Flight . getAirline ( ) ) . isEqualTo ( STRING ) ; assertThat ( sample.secure.oauth2.Flight . getFlightNumber ( ) ) . isEqualTo ( STRING ) ; assertThat ( sample.secure.oauth2.Flight . getTraveler ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
