<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Polygon ( null , null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Polygon org.springframework.data.geo.Polygon = new Polygon ( org.springframework.data.geo.Point , org.springframework.data.geo.Point , org.springframework.data.geo.Point ) ; assertThat ( org.springframework.data.geo.Polygon ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Polygon org.springframework.data.geo.Polygon = new Polygon ( org.springframework.data.geo.Point , org.springframework.data.geo.Point , org.springframework.data.geo.Point ) ; Polygon org.springframework.data.geo.Polygon = new Polygon ( org.springframework.data.geo.Point , org.springframework.data.geo.Point , org.springframework.data.geo.Point ) ; assertThat ( org.springframework.data.geo.Polygon ) . isEqualTo ( org.springframework.data.geo.Polygon ) ; assertThat ( org.springframework.data.geo.Polygon ) . isEqualTo ( org.springframework.data.geo.Polygon ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Polygon ( org.springframework.data.geo.Point , org.springframework.data.geo.Point , org.springframework.data.geo.Point ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Polygon org.springframework.data.geo.Polygon = new Polygon ( org.springframework.data.geo.Point , org.springframework.data.geo.Point , org.springframework.data.geo.Point ) ; Polygon org.springframework.data.geo.Polygon = ( Polygon ) SerializationUtils . deserialize ( SerializationUtils . serialize ( org.springframework.data.geo.Polygon ) ) ; assertThat ( org.springframework.data.geo.Polygon ) . isEqualTo ( org.springframework.data.geo.Polygon ) ; }  <METHOD_END>
