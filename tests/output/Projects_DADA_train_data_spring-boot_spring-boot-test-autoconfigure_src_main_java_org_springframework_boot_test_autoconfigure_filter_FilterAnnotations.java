<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader , Filter [] org.springframework.boot.test.autoconfigure.filter.Filter[] ) { Assert . notNull ( org.springframework.boot.test.autoconfigure.filter.Filter[] , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; this . java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> = java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> ( org.springframework.boot.test.autoconfigure.filter.Filter[] ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> < TypeFilter > java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> ( Filter [] org.springframework.boot.test.autoconfigure.filter.Filter[] ) { java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> < TypeFilter > java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> = new java.util.ArrayList<org.springframework.boot.test.autoconfigure.filter.TypeFilter> <> ( ) ; for ( Filter org.springframework.boot.test.autoconfigure.filter.Filter : org.springframework.boot.test.autoconfigure.filter.Filter[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : org.springframework.boot.test.autoconfigure.filter.Filter . classes ( ) ) { java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> . add ( org.springframework.boot.test.autoconfigure.filter.TypeFilter ( org.springframework.boot.test.autoconfigure.filter.Filter . type ( ) , java.lang.Class<> ) ) ; } for ( java.lang.String java.lang.String : org.springframework.boot.test.autoconfigure.filter.Filter . pattern ( ) ) { java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> . add ( org.springframework.boot.test.autoconfigure.filter.TypeFilter ( org.springframework.boot.test.autoconfigure.filter.Filter . type ( ) , java.lang.String ) ) ; } } return java.util.Collections . java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> ( java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.boot.test.autoconfigure.filter.TypeFilter org.springframework.boot.test.autoconfigure.filter.TypeFilter ( FilterType org.springframework.boot.test.autoconfigure.filter.FilterType , java.lang.Class<?> < ? > java.lang.Class<?> ) { switch ( org.springframework.boot.test.autoconfigure.filter.FilterType ) { case ANNOTATION : Assert . isAssignable ( java.lang.annotation.Annotation .class , java.lang.Class<> , STRING ) ; return new AnnotationTypeFilter ( ( java.lang.Class<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > ) java.lang.Class<> ) ; case ASSIGNABLE_TYPE : return new AssignableTypeFilter ( java.lang.Class<> ) ; case CUSTOM : Assert . isAssignable ( TypeFilter .class , java.lang.Class<> , STRING ) ; return BeanUtils . instantiateClass ( java.lang.Class<> , TypeFilter .class ) ; } throw new java.lang.IllegalArgumentException ( STRING + org.springframework.boot.test.autoconfigure.filter.FilterType ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.autoconfigure.filter.TypeFilter org.springframework.boot.test.autoconfigure.filter.TypeFilter ( FilterType org.springframework.boot.test.autoconfigure.filter.FilterType , java.lang.String java.lang.String ) { switch ( org.springframework.boot.test.autoconfigure.filter.FilterType ) { case ASPECTJ : return new AspectJTypeFilter ( java.lang.String , this . java.lang.ClassLoader ) ; case REGEX : return new RegexPatternTypeFilter ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ) ; } throw new java.lang.IllegalArgumentException ( STRING + org.springframework.boot.test.autoconfigure.filter.FilterType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.boot.test.autoconfigure.filter.TypeFilter> < TypeFilter > java.util.Iterator<org.springframework.boot.test.autoconfigure.filter.TypeFilter> ( ) { return this . java.util.List<org.springframework.boot.test.autoconfigure.filter.TypeFilter> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( MetadataReader org.springframework.boot.test.autoconfigure.filter.MetadataReader , MetadataReaderFactory org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) throws java.io.IOException { for ( TypeFilter org.springframework.boot.test.autoconfigure.filter.TypeFilter : this ) { if ( org.springframework.boot.test.autoconfigure.filter.TypeFilter . match ( org.springframework.boot.test.autoconfigure.filter.MetadataReader , org.springframework.boot.test.autoconfigure.filter.MetadataReaderFactory ) ) { return true ; } } return false ; }  <METHOD_END>
