<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( JarFile org.springframework.boot.loader.jar.JarFile ) { this . org.springframework.boot.loader.jar.JarFile = org.springframework.boot.loader.jar.JarFile ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.net.URLConnection java.net.URLConnection ( java.net.URL java.net.URL ) throws java.io.IOException { if ( this . org.springframework.boot.loader.jar.JarFile != null ) { return JarURLConnection . get ( java.net.URL , this . org.springframework.boot.loader.jar.JarFile ) ; } try { return JarURLConnection . get ( java.net.URL , org.springframework.boot.loader.jar.JarFile ( java.net.URL ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { return java.net.URLConnection ( java.net.URL , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.net.URLConnection java.net.URLConnection ( java.net.URL java.net.URL , java.lang.Exception java.lang.Exception )			throws java.io.IOException { try { return java.net.URLConnection ( java.net.URLStreamHandler ( ) , java.net.URL ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof java.io.IOException ) { this . java.util.logging.Logger . void ( java.util.logging.Level . java.util.logging.Level , STRING , java.lang.Exception ) ; throw ( java.io.IOException ) java.lang.Exception ; } this . java.util.logging.Logger . void ( java.util.logging.Level . java.util.logging.Level , STRING , java.lang.Exception ) ; if ( java.lang.Exception instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Exception ; } throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.net.URLStreamHandler java.net.URLStreamHandler ( ) { if ( this . java.net.URLStreamHandler != null ) { return this . java.net.URLStreamHandler ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.String ) ; this . java.net.URLStreamHandler = ( java.net.URLStreamHandler ) java.lang.Class<> . newInstance ( ) ; return this . java.net.URLStreamHandler ; } catch ( java.lang.Exception java.lang.Exception ) { } } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.net.URLConnection java.net.URLConnection ( java.net.URLStreamHandler java.net.URLStreamHandler , java.net.URL java.net.URL )			throws java.lang.Exception { if ( java.lang.reflect.Method == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.reflect.Method . void ( true ) ; return ( java.net.URLConnection ) java.lang.reflect.Method . java.lang.Object ( java.net.URLStreamHandler , java.net.URL ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.net.URL java.net.URL , java.lang.String java.lang.String , int int , int int ) { if ( java.lang.String . java.lang.String ( ) . boolean ( java.lang.String ) ) { void ( java.net.URL , java.lang.String ( java.lang.String . java.lang.String ( int , int ) ) ) ; } else { void ( java.net.URL , java.lang.String ( java.net.URL , java.lang.String . java.lang.String ( int , int ) ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( STRING ) ; if ( int == - NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } try { new java.net.URL ( java.lang.String . java.lang.String ( NUMBER , int ) ) ; return java.lang.String ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING , java.net.MalformedURLException ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.net.URL java.net.URL , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { return java.lang.String ( java.lang.String ) + java.lang.String + java.lang.String . java.lang.String ( NUMBER ) ; } if ( java.lang.String . boolean ( STRING ) ) { return java.lang.String + java.lang.String ; } int int = java.lang.String . int ( '/' ) ; if ( int == - NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } return java.lang.String . java.lang.String ( NUMBER , int + NUMBER ) + java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( java.lang.String ) ; if ( int == - NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } return java.lang.String . java.lang.String ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.net.URL java.net.URL , java.lang.String java.lang.String ) { void ( java.net.URL , java.lang.String , null , - NUMBER , null , null , java.lang.String , null , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( java.net.URL java.net.URL ) { return int ( java.net.URL . java.lang.String ( ) , java.net.URL . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { int int = ( java.lang.String == null ? NUMBER : java.lang.String . int ( ) ) ; int int = java.lang.String . int ( java.lang.String ) ; if ( int == - NUMBER ) { return int + java.lang.String . int ( ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String . java.lang.String ( int + NUMBER ) ) ; try { int += new java.net.URL ( java.lang.String ) . int ( ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { int += java.lang.String . int ( ) ; } int += java.lang.String . int ( ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.net.URL java.net.URL , java.net.URL java.net.URL ) { if ( ! java.net.URL . java.lang.String ( ) . boolean ( STRING ) || ! java.net.URL . java.lang.String ( ) . boolean ( STRING ) ) { return false ; } int int = java.net.URL . java.lang.String ( ) . int ( java.lang.String ) ; int int = java.net.URL . java.lang.String ( ) . int ( java.lang.String ) ; if ( int == - NUMBER || int == - NUMBER ) { return super. boolean ( java.net.URL , java.net.URL ) ; } java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) . java.lang.String ( int + java.lang.String . int ( ) ) ; java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) . java.lang.String ( int + java.lang.String . int ( ) ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { return false ; } } java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) . java.lang.String ( NUMBER , int ) ; try { return super. boolean ( new java.net.URL ( java.lang.String ) , new java.net.URL ( java.lang.String ) ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { } return super. boolean ( java.net.URL , java.net.URL ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.JarFile org.springframework.boot.loader.jar.JarFile ( java.net.URL java.net.URL ) throws java.io.IOException { java.lang.String java.lang.String = java.net.URL . java.lang.String ( ) ; int int = java.lang.String . int ( java.lang.String ) ; if ( int == - NUMBER ) { throw new java.net.MalformedURLException ( STRING ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; return org.springframework.boot.loader.jar.JarFile ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.loader.jar.JarFile org.springframework.boot.loader.jar.JarFile ( java.lang.String java.lang.String ) throws java.io.IOException { try { if ( ! java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( ) ) ; java.io.File java.io.File = new java.io.File ( java.net.URLDecoder . java.lang.String ( java.lang.String , STRING ) ) ; java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> < java.io.File , JarFile > java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> = java.lang.ref.SoftReference<java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile>> . get ( ) ; JarFile org.springframework.boot.loader.jar.JarFile = ( java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> == null ? null : java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> . get ( java.io.File ) ) ; if ( org.springframework.boot.loader.jar.JarFile == null ) { org.springframework.boot.loader.jar.JarFile = new JarFile ( java.io.File ) ; void ( java.io.File , org.springframework.boot.loader.jar.JarFile ) ; } return org.springframework.boot.loader.jar.JarFile ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.io.IOException ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> static void void ( java.io.File java.io.File , JarFile org.springframework.boot.loader.jar.JarFile ) { java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> < java.io.File , JarFile > java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> = java.lang.ref.SoftReference<java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile>> . get ( ) ; if ( java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> == null ) { java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> = new java.util.concurrent.ConcurrentHashMap <> ( ) ; java.lang.ref.SoftReference<java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile>> = new java.lang.ref.SoftReference <> ( java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> ) ; } java.util.Map<java.io.File,org.springframework.boot.loader.jar.JarFile> . put ( java.io.File , org.springframework.boot.loader.jar.JarFile ) ; }  <METHOD_END>
<METHOD_START> public static void void ( boolean boolean ) { JarURLConnection . setUseFastExceptions ( boolean ) ; }  <METHOD_END>
