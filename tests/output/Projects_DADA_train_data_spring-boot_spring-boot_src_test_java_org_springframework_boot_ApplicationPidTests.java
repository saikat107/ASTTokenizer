<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new ApplicationPid ( STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new ApplicationPid ( null ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationPid org.springframework.boot.ApplicationPid = new ApplicationPid ( null ) ; this . org.springframework.boot.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.ApplicationPid . write ( this . org.springframework.boot.TemporaryFolder . newFile ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationPid org.springframework.boot.ApplicationPid = new ApplicationPid ( STRING ) ; java.io.File java.io.File = this . org.springframework.boot.TemporaryFolder . newFile ( ) ; org.springframework.boot.ApplicationPid . write ( java.io.File ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new ApplicationPid ( ) . toString ( ) ) . isNotEmpty ( ) ; }  <METHOD_END>
