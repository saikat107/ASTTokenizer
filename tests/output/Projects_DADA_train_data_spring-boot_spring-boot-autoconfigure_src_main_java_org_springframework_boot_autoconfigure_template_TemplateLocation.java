<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ResourcePatternResolver org.springframework.boot.autoconfigure.template.ResourcePatternResolver ) { Assert . notNull ( org.springframework.boot.autoconfigure.template.ResourcePatternResolver , STRING ) ; if ( org.springframework.boot.autoconfigure.template.ResourcePatternResolver . getResource ( this . java.lang.String ) . exists ( ) ) { return true ; } try { return boolean ( org.springframework.boot.autoconfigure.template.ResourcePatternResolver ) ; } catch ( java.io.IOException java.io.IOException ) { return false ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ResourcePatternResolver org.springframework.boot.autoconfigure.template.ResourcePatternResolver ) throws java.io.IOException { java.lang.String java.lang.String = this . java.lang.String ; if ( java.lang.String . boolean ( ResourceLoader . CLASSPATH_URL_PREFIX ) ) { java.lang.String = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + java.lang.String . java.lang.String ( ResourceLoader . CLASSPATH_URL_PREFIX . length ( ) ) ; } if ( java.lang.String . boolean ( ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX ) ) { Resource [] org.springframework.boot.autoconfigure.template.Resource[] = org.springframework.boot.autoconfigure.template.ResourcePatternResolver . getResources ( java.lang.String ) ; for ( Resource org.springframework.boot.autoconfigure.template.Resource : org.springframework.boot.autoconfigure.template.Resource[] ) { if ( org.springframework.boot.autoconfigure.template.Resource . exists ( ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
