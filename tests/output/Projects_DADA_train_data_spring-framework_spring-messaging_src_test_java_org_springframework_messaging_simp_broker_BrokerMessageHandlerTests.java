<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler = new org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . isRunning ( ) ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . start ( ) ; assertTrue ( this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . isRunning ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . start ( ) ; assertTrue ( this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . isRunning ( ) ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . stop ( ) ; assertFalse ( this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . isRunning ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . start ( ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . stop ( ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.Object> ( ) , this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . java.util.List<java.lang.Boolean> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . handleMessage ( new GenericMessage < java.lang.Object > ( STRING ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.Object> ( ) , this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . java.util.List<org.springframework.messaging.simp.broker.Message<?>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . isBrokerAvailable ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.Object> ( ) , this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . java.util.List<java.lang.Boolean> ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . publishBrokerAvailableEvent ( ) ; assertTrue ( this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . isBrokerAvailable ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.Boolean> ( true ) , this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . java.util.List<java.lang.Boolean> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . publishBrokerAvailableEvent ( ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . publishBrokerAvailableEvent ( ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.Boolean> ( true ) , this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . java.util.List<java.lang.Boolean> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . publishBrokerAvailableEvent ( ) ; assertTrue ( this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . isBrokerAvailable ( ) ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . publishBrokerUnavailableEvent ( ) ; assertFalse ( this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . isBrokerAvailable ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.Boolean> ( true , false ) , this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . java.util.List<java.lang.Boolean> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . publishBrokerAvailableEvent ( ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . publishBrokerUnavailableEvent ( ) ; this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . publishBrokerUnavailableEvent ( ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.Boolean> ( true , false ) , this . org.springframework.messaging.simp.broker.BrokerMessageHandlerTests.TestBrokerMesageHandler . java.util.List<java.lang.Boolean> ) ; }  <METHOD_END>
<METHOD_START> private void ( ) { super( mock ( SubscribableChannel .class ) , mock ( MessageChannel .class ) , mock ( SubscribableChannel .class ) ); setApplicationEventPublisher ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { this . java.util.List<org.springframework.messaging.simp.broker.Message<?>> . add ( org.springframework.messaging.simp.broker.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.messaging.simp.broker.ApplicationEvent ) { void ( ( java.lang.Object ) org.springframework.messaging.simp.broker.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof BrokerAvailabilityEvent ) { this . java.util.List<java.lang.Boolean> . boolean ( ( ( BrokerAvailabilityEvent ) java.lang.Object ) . isBrokerAvailable ( ) ) ; } }  <METHOD_END>
