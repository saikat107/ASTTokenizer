<METHOD_START> @ Test public void void ( ) { assertTrue ( FunctionService . isRegistered ( STRING ) ) ; Function org.springframework.data.gemfire.function.config.Function = FunctionService . getFunction ( STRING ) ; assertFalse ( org.springframework.data.gemfire.function.config.Function . isHA ( ) ) ; assertFalse ( org.springframework.data.gemfire.function.config.Function . optimizeForWrite ( ) ) ; assertFalse ( org.springframework.data.gemfire.function.config.Function . hasResult ( ) ) ; assertTrue ( FunctionService . isRegistered ( STRING ) ) ; org.springframework.data.gemfire.function.config.Function = FunctionService . getFunction ( STRING ) ; assertTrue ( org.springframework.data.gemfire.function.config.Function . isHA ( ) ) ; assertFalse ( org.springframework.data.gemfire.function.config.Function . optimizeForWrite ( ) ) ; assertTrue ( org.springframework.data.gemfire.function.config.Function . hasResult ( ) ) ; assertTrue ( FunctionService . isRegistered ( STRING ) ) ; org.springframework.data.gemfire.function.config.Function = FunctionService . getFunction ( STRING ) ; assertTrue ( org.springframework.data.gemfire.function.config.Function . isHA ( ) ) ; assertTrue ( org.springframework.data.gemfire.function.config.Function . optimizeForWrite ( ) ) ; assertTrue ( org.springframework.data.gemfire.function.config.Function . hasResult ( ) ) ; assertTrue ( FunctionService . isRegistered ( STRING ) ) ; org.springframework.data.gemfire.function.config.Function = FunctionService . getFunction ( STRING ) ; assertTrue ( org.springframework.data.gemfire.function.config.Function . isHA ( ) ) ; assertTrue ( org.springframework.data.gemfire.function.config.Function . optimizeForWrite ( ) ) ; assertTrue ( org.springframework.data.gemfire.function.config.Function . hasResult ( ) ) ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ GemfireFunction ( HA = true , optimizeForWrite = false ) public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction ( id = STRING , HA = true , optimizeForWrite = true ) public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Object java.lang.Object , @ RegionData java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction ( id = STRING , HA = true , optimizeForWrite = true ) public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( @ Filter java.util.Set<?> < ? > java.util.Set<?> ) { return null ; }  <METHOD_END>
