<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new org.springframework.beans.factory.wiring.BeanConfigurerSupportTests.StubBeanConfigurerSupport ( ) . setBeanFactory ( mock ( BeanFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.wiring.TestBean = new TestBean ( ) ; BeanWiringInfoResolver org.springframework.beans.factory.wiring.BeanWiringInfoResolver = mock ( BeanWiringInfoResolver .class ) ; BeanConfigurerSupport org.springframework.beans.factory.wiring.BeanConfigurerSupport = new org.springframework.beans.factory.wiring.BeanConfigurerSupportTests.StubBeanConfigurerSupport ( ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . setBeanWiringInfoResolver ( org.springframework.beans.factory.wiring.BeanWiringInfoResolver ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . configureBean ( org.springframework.beans.factory.wiring.TestBean ) ; verify ( org.springframework.beans.factory.wiring.BeanWiringInfoResolver ) . resolveWiringInfo ( org.springframework.beans.factory.wiring.TestBean ) ; assertNull ( org.springframework.beans.factory.wiring.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.wiring.TestBean = new TestBean ( ) ; BeanConfigurerSupport org.springframework.beans.factory.wiring.BeanConfigurerSupport = new org.springframework.beans.factory.wiring.BeanConfigurerSupportTests.StubBeanConfigurerSupport ( ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . configureBean ( org.springframework.beans.factory.wiring.TestBean ) ; assertNull ( org.springframework.beans.factory.wiring.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.wiring.TestBean = new TestBean ( ) ; BeanDefinitionBuilder org.springframework.beans.factory.wiring.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.wiring.BeanDefinitionBuilder . addPropertyValue ( STRING , STRING ) ; DefaultListableBeanFactory org.springframework.beans.factory.wiring.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.wiring.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.beans.factory.wiring.TestBean . getClass ( ) . getName ( ) , org.springframework.beans.factory.wiring.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; BeanConfigurerSupport org.springframework.beans.factory.wiring.BeanConfigurerSupport = new org.springframework.beans.factory.wiring.BeanConfigurerSupportTests.StubBeanConfigurerSupport ( ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . setBeanFactory ( org.springframework.beans.factory.wiring.DefaultListableBeanFactory ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . afterPropertiesSet ( ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . configureBean ( org.springframework.beans.factory.wiring.TestBean ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.wiring.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.wiring.TestBean = new TestBean ( ) ; BeanDefinitionBuilder org.springframework.beans.factory.wiring.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.wiring.BeanDefinitionBuilder . addConstructorArgValue ( STRING ) ; DefaultListableBeanFactory org.springframework.beans.factory.wiring.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.wiring.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.wiring.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; BeanWiringInfoResolver org.springframework.beans.factory.wiring.BeanWiringInfoResolver = mock ( BeanWiringInfoResolver .class ) ; given ( org.springframework.beans.factory.wiring.BeanWiringInfoResolver . resolveWiringInfo ( org.springframework.beans.factory.wiring.TestBean ) ) . willReturn ( new BeanWiringInfo ( BeanWiringInfo . AUTOWIRE_BY_NAME , false ) ) ; BeanConfigurerSupport org.springframework.beans.factory.wiring.BeanConfigurerSupport = new org.springframework.beans.factory.wiring.BeanConfigurerSupportTests.StubBeanConfigurerSupport ( ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . setBeanFactory ( org.springframework.beans.factory.wiring.DefaultListableBeanFactory ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . setBeanWiringInfoResolver ( org.springframework.beans.factory.wiring.BeanWiringInfoResolver ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . configureBean ( org.springframework.beans.factory.wiring.TestBean ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.wiring.TestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.wiring.TestBean = new TestBean ( ) ; BeanDefinitionBuilder org.springframework.beans.factory.wiring.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.wiring.BeanDefinitionBuilder . addConstructorArgValue ( STRING ) ; DefaultListableBeanFactory org.springframework.beans.factory.wiring.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.wiring.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.wiring.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; BeanWiringInfoResolver org.springframework.beans.factory.wiring.BeanWiringInfoResolver = mock ( BeanWiringInfoResolver .class ) ; given ( org.springframework.beans.factory.wiring.BeanWiringInfoResolver . resolveWiringInfo ( org.springframework.beans.factory.wiring.TestBean ) ) . willReturn ( new BeanWiringInfo ( BeanWiringInfo . AUTOWIRE_BY_TYPE , false ) ) ; BeanConfigurerSupport org.springframework.beans.factory.wiring.BeanConfigurerSupport = new org.springframework.beans.factory.wiring.BeanConfigurerSupportTests.StubBeanConfigurerSupport ( ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . setBeanFactory ( org.springframework.beans.factory.wiring.DefaultListableBeanFactory ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . setBeanWiringInfoResolver ( org.springframework.beans.factory.wiring.BeanWiringInfoResolver ) ; org.springframework.beans.factory.wiring.BeanConfigurerSupport . configureBean ( org.springframework.beans.factory.wiring.TestBean ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.wiring.TestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
