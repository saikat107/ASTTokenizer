<METHOD_START> protected static boolean boolean ( BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( org.springframework.data.gemfire.config.support.BeanDefinition instanceof AbstractBeanDefinition && ( ( AbstractBeanDefinition ) org.springframework.data.gemfire.config.support.BeanDefinition ) . hasBeanClass ( ) && java.lang.Class<> . boolean ( ( ( AbstractBeanDefinition ) org.springframework.data.gemfire.config.support.BeanDefinition ) . getBeanClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected static java.lang.String [] java.lang.String[] ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { return java.util.Collection<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.Collection<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ( final java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> < java.lang.String , BeanDefinition > java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> ) { final ConfigurableListableBeanFactory org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanDefinitionNames ( ) ) . thenReturn ( java.lang.String[] ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . keySet ( ) ) ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanNamesForType ( isA ( java.lang.Class .class ) ) ) . then ( new Answer < java.lang.String [] > ( ) { @ java.lang.Override public java.lang.String [] java.lang.String[] ( InvocationOnMock org.springframework.data.gemfire.config.support.InvocationOnMock ) throws java.lang.Throwable { java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.config.support.InvocationOnMock . getArguments ( ) ; assertThat ( java.lang.Object[] ) . isNotNull ( ) ; assertThat ( java.lang.Object[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.Object[] [ NUMBER ] ) . isInstanceOf ( java.lang.Class .class ) ; java.lang.Class java.lang.Class = ( java.lang.Class ) java.lang.Object[] [ NUMBER ] ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . size ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> < java.lang.String , BeanDefinition > java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> : java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . entrySet ( ) ) { BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition = java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . getValue ( ) ; if ( boolean ( org.springframework.data.gemfire.config.support.BeanDefinition , java.lang.Class ) ) { java.util.List<java.lang.String> . boolean ( java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . getKey ( ) ) ; } } return java.lang.String[] ( java.util.List<java.lang.String> ) ; } } ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanDefinition ( anyString ( ) ) ) . then ( new Answer < BeanDefinition > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( InvocationOnMock org.springframework.data.gemfire.config.support.InvocationOnMock ) throws java.lang.Throwable { java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.config.support.InvocationOnMock . getArguments ( ) ; assertThat ( java.lang.Object[] ) . isNotNull ( ) ; assertThat ( java.lang.Object[] . int ) . isEqualTo ( NUMBER ) ; return java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( java.lang.String . java.lang.String ( java.lang.Object[] [ NUMBER ] ) ) ; } } ) ; return org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( InvocationOnMock org.springframework.data.gemfire.config.support.InvocationOnMock ) throws java.lang.Throwable { java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.config.support.InvocationOnMock . getArguments ( ) ; assertThat ( java.lang.Object[] ) . isNotNull ( ) ; assertThat ( java.lang.Object[] . int ) . isEqualTo ( NUMBER ) ; assertThat ( java.lang.Object[] [ NUMBER ] ) . isInstanceOf ( java.lang.Class .class ) ; java.lang.Class java.lang.Class = ( java.lang.Class ) java.lang.Object[] [ NUMBER ] ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . size ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> < java.lang.String , BeanDefinition > java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> : java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . entrySet ( ) ) { BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition = java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . getValue ( ) ; if ( boolean ( org.springframework.data.gemfire.config.support.BeanDefinition , java.lang.Class ) ) { java.util.List<java.lang.String> . boolean ( java.util.Map.Entry<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . getKey ( ) ) ; } } return java.lang.String[] ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( InvocationOnMock org.springframework.data.gemfire.config.support.InvocationOnMock ) throws java.lang.Throwable { java.lang.Object [] java.lang.Object[] = org.springframework.data.gemfire.config.support.InvocationOnMock . getArguments ( ) ; assertThat ( java.lang.Object[] ) . isNotNull ( ) ; assertThat ( java.lang.Object[] . int ) . isEqualTo ( NUMBER ) ; return java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( java.lang.String . java.lang.String ( java.lang.Object[] [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.support.BeanDefinitionBuilder org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ( java.lang.Object java.lang.Object , java.lang.String ... java.lang.String[] ) { BeanDefinitionBuilder org.springframework.data.gemfire.config.support.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ) ; if ( java.lang.Object instanceof java.lang.Class ) { org.springframework.data.gemfire.config.support.BeanDefinitionBuilder . getRawBeanDefinition ( ) . setBeanClass ( ( java.lang.Class ) java.lang.Object ) ; } else { org.springframework.data.gemfire.config.support.BeanDefinitionBuilder . getRawBeanDefinition ( ) . setBeanClassName ( java.lang.String . java.lang.String ( java.lang.Object ) ) ; } return org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ( org.springframework.data.gemfire.config.support.BeanDefinitionBuilder , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.support.BeanDefinitionBuilder org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ( BeanDefinitionBuilder org.springframework.data.gemfire.config.support.BeanDefinitionBuilder , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.data.gemfire.config.support.BeanDefinitionBuilder . addDependsOn ( java.lang.String ) ; } return org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> protected static void void ( BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition , java.lang.String ... java.lang.String[] ) { assertThat ( ArrayUtils . isEmpty ( org.springframework.data.gemfire.config.support.BeanDefinition . getDependsOn ( ) ) ) . isFalse ( ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.config.support.BeanDefinition . getDependsOn ( ) ) . equals ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { return org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ( java.lang.String , java.lang.String[] ) . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( ) { return org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ( CacheFactoryBean .class ) . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( java.lang.String ... java.lang.String[] ) { return org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ( AsyncEventQueue .class , java.lang.String[] ) . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( java.lang.String ... java.lang.String[] ) { return org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ( DiskStore .class , java.lang.String[] ) . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( java.lang.Class java.lang.Class , java.lang.String ... java.lang.String[] ) { return org.springframework.data.gemfire.config.support.BeanDefinitionBuilder ( java.lang.Class , java.lang.String[] ) . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( java.lang.String ... java.lang.String[] ) { return org.springframework.data.gemfire.config.support.BeanDefinition ( PartitionedRegion .class , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ( java.lang.String ... java.lang.String[] ) { return org.springframework.data.gemfire.config.support.BeanDefinition ( Region .class , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new PdxDiskStoreAwareBeanFactoryPostProcessor ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new PdxDiskStoreAwareBeanFactoryPostProcessor ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new PdxDiskStoreAwareBeanFactoryPostProcessor ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PdxDiskStoreAwareBeanFactoryPostProcessor org.springframework.data.gemfire.config.support.PdxDiskStoreAwareBeanFactoryPostProcessor = new PdxDiskStoreAwareBeanFactoryPostProcessor ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.support.PdxDiskStoreAwareBeanFactoryPostProcessor ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.support.PdxDiskStoreAwareBeanFactoryPostProcessor . getPdxDiskStoreName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> < java.lang.String , BeanDefinition > java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> = new java.util.HashMap<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> < java.lang.String , BeanDefinition > ( NUMBER ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( ) ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . put ( STRING , org.springframework.data.gemfire.config.support.BeanDefinition ( STRING ) ) ; ConfigurableListableBeanFactory org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory = org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> ) ; PdxDiskStoreAwareBeanFactoryPostProcessor org.springframework.data.gemfire.config.support.PdxDiskStoreAwareBeanFactoryPostProcessor = new PdxDiskStoreAwareBeanFactoryPostProcessor ( STRING ) ; org.springframework.data.gemfire.config.support.PdxDiskStoreAwareBeanFactoryPostProcessor . postProcessBeanFactory ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING ) ; assertThat ( ArrayUtils . isEmpty ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) . getDependsOn ( ) ) ) . isTrue ( ) ; assertThat ( ArrayUtils . isEmpty ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) . getDependsOn ( ) ) ) . isTrue ( ) ; assertThat ( ArrayUtils . isEmpty ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) . getDependsOn ( ) ) ) . isTrue ( ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING , STRING , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING , STRING , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING ) ; void ( java.util.Map<java.lang.String,org.springframework.data.gemfire.config.support.BeanDefinition> . get ( STRING ) , STRING , STRING ) ; }  <METHOD_END>
