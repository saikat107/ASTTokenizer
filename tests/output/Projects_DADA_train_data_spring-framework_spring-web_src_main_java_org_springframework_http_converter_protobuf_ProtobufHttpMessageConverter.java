<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( ExtensionRegistryInitializer org.springframework.http.converter.protobuf.ExtensionRegistryInitializer ) { super( org.springframework.http.converter.protobuf.MediaType[] ); if ( boolean ) { this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.ProtobufFormatSupport = new org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.ProtobufJavaFormatSupport ( ) ; } else if ( boolean ) { this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.ProtobufFormatSupport = new org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.ProtobufJavaUtilSupport ( ) ; } else { this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.ProtobufFormatSupport = null ; } if ( org.springframework.http.converter.protobuf.ExtensionRegistryInitializer != null ) { org.springframework.http.converter.protobuf.ExtensionRegistryInitializer . initializeExtensionRegistry ( this . org.springframework.http.converter.protobuf.ExtensionRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return Message .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.converter.protobuf.MediaType org.springframework.http.converter.protobuf.MediaType ( Message org.springframework.http.converter.protobuf.Message ) { return org.springframework.http.converter.protobuf.MediaType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.converter.protobuf.Message org.springframework.http.converter.protobuf.Message ( java.lang.Class<? extends org.springframework.http.converter.protobuf.Message> < ? extends Message > java.lang.Class<? extends org.springframework.http.converter.protobuf.Message> , HttpInputMessage org.springframework.http.converter.protobuf.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.protobuf.HttpMessageNotReadableException { MediaType org.springframework.http.converter.protobuf.MediaType = org.springframework.http.converter.protobuf.HttpInputMessage . getHeaders ( ) . getContentType ( ) ; if ( org.springframework.http.converter.protobuf.MediaType == null ) { org.springframework.http.converter.protobuf.MediaType = org.springframework.http.converter.protobuf.MediaType ; } java.nio.charset.Charset java.nio.charset.Charset = org.springframework.http.converter.protobuf.MediaType . getCharset ( ) ; if ( java.nio.charset.Charset == null ) { java.nio.charset.Charset = java.nio.charset.Charset ; } try { Message . Message Message.Builder = Message.Builder ( java.lang.Class<> ) ; if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( org.springframework.http.converter.protobuf.MediaType ) ) { Message.Builder . mergeFrom ( org.springframework.http.converter.protobuf.HttpInputMessage . getBody ( ) , this . org.springframework.http.converter.protobuf.ExtensionRegistry ) ; } else if ( MediaType . TEXT_PLAIN . isCompatibleWith ( org.springframework.http.converter.protobuf.MediaType ) ) { java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader ( org.springframework.http.converter.protobuf.HttpInputMessage . getBody ( ) , java.nio.charset.Charset ) ; TextFormat . merge ( java.io.InputStreamReader , this . org.springframework.http.converter.protobuf.ExtensionRegistry , Message.Builder ) ; } else if ( boolean || boolean ) { this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.ProtobufFormatSupport . void ( org.springframework.http.converter.protobuf.HttpInputMessage . getBody ( ) , java.nio.charset.Charset , org.springframework.http.converter.protobuf.MediaType , this . org.springframework.http.converter.protobuf.ExtensionRegistry , Message.Builder ) ; } return Message.Builder . build ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new HttpMessageNotReadableException ( STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( MediaType org.springframework.http.converter.protobuf.MediaType ) { return ( super. canWrite ( org.springframework.http.converter.protobuf.MediaType ) || ( boolean && MediaType . TEXT_HTML . isCompatibleWith ( org.springframework.http.converter.protobuf.MediaType ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message org.springframework.http.converter.protobuf.Message , HttpOutputMessage org.springframework.http.converter.protobuf.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.protobuf.HttpMessageNotWritableException { MediaType org.springframework.http.converter.protobuf.MediaType = org.springframework.http.converter.protobuf.HttpOutputMessage . getHeaders ( ) . getContentType ( ) ; if ( org.springframework.http.converter.protobuf.MediaType == null ) { org.springframework.http.converter.protobuf.MediaType = org.springframework.http.converter.protobuf.MediaType ( org.springframework.http.converter.protobuf.Message ) ; } java.nio.charset.Charset java.nio.charset.Charset = org.springframework.http.converter.protobuf.MediaType . getCharset ( ) ; if ( java.nio.charset.Charset == null ) { java.nio.charset.Charset = java.nio.charset.Charset ; } if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( org.springframework.http.converter.protobuf.MediaType ) ) { void ( org.springframework.http.converter.protobuf.HttpOutputMessage , org.springframework.http.converter.protobuf.Message ) ; CodedOutputStream org.springframework.http.converter.protobuf.CodedOutputStream = CodedOutputStream . newInstance ( org.springframework.http.converter.protobuf.HttpOutputMessage . getBody ( ) ) ; org.springframework.http.converter.protobuf.Message . writeTo ( org.springframework.http.converter.protobuf.CodedOutputStream ) ; org.springframework.http.converter.protobuf.CodedOutputStream . flush ( ) ; } else if ( MediaType . TEXT_PLAIN . isCompatibleWith ( org.springframework.http.converter.protobuf.MediaType ) ) { final java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter ( org.springframework.http.converter.protobuf.HttpOutputMessage . getBody ( ) , java.nio.charset.Charset ) ; TextFormat . print ( org.springframework.http.converter.protobuf.Message , java.io.OutputStreamWriter ) ; java.io.OutputStreamWriter . void ( ) ; org.springframework.http.converter.protobuf.HttpOutputMessage . getBody ( ) . flush ( ) ; } else if ( boolean || boolean ) { this . org.springframework.http.converter.protobuf.ProtobufHttpMessageConverter.ProtobufFormatSupport . void ( org.springframework.http.converter.protobuf.Message , org.springframework.http.converter.protobuf.HttpOutputMessage . getBody ( ) , org.springframework.http.converter.protobuf.MediaType , java.nio.charset.Charset ) ; org.springframework.http.converter.protobuf.HttpOutputMessage . getBody ( ) . flush ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpOutputMessage org.springframework.http.converter.protobuf.HttpOutputMessage , Message org.springframework.http.converter.protobuf.Message ) { org.springframework.http.converter.protobuf.HttpOutputMessage . getHeaders ( ) . set ( java.lang.String , org.springframework.http.converter.protobuf.Message . getDescriptorForType ( ) . getFile ( ) . getName ( ) ) ; org.springframework.http.converter.protobuf.HttpOutputMessage . getHeaders ( ) . set ( java.lang.String , org.springframework.http.converter.protobuf.Message . getDescriptorForType ( ) . getFullName ( ) ) ; }  <METHOD_END>
<METHOD_START> private static Message . Message.Builder Message.Builder ( java.lang.Class<? extends org.springframework.http.converter.protobuf.Message> < ? extends Message > java.lang.Class<? extends org.springframework.http.converter.protobuf.Message> ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.util.concurrent.ConcurrentHashMap<java.lang.Class<?>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING ) ; java.util.concurrent.ConcurrentHashMap<java.lang.Class<?>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> , java.lang.reflect.Method ) ; } return ( Message . Message ) java.lang.reflect.Method . java.lang.Object ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> void void ( java.io.InputStream java.io.InputStream , java.nio.charset.Charset java.nio.charset.Charset , MediaType org.springframework.http.converter.protobuf.MediaType , ExtensionRegistry org.springframework.http.converter.protobuf.ExtensionRegistry , Message . Message Message.Builder ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> void void ( Message org.springframework.http.converter.protobuf.Message , java.io.OutputStream java.io.OutputStream , MediaType org.springframework.http.converter.protobuf.MediaType , java.nio.charset.Charset java.nio.charset.Charset ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> public void ( ) { this . com.google.protobuf.util.JsonFormat.Parser = com . com.google . com.google . com.google . JsonFormat . parser ( ) ; this . com.google.protobuf.util.JsonFormat.Printer = com . com.google . com.google . com.google . JsonFormat . printer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.nio.charset.Charset java.nio.charset.Charset , MediaType org.springframework.http.converter.protobuf.MediaType , ExtensionRegistry org.springframework.http.converter.protobuf.ExtensionRegistry , Message . Message Message.Builder ) throws java.io.IOException { if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( MediaType . APPLICATION_JSON ) ) { java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader ( java.io.InputStream , java.nio.charset.Charset ) ; this . com.google.protobuf.util.JsonFormat.Parser . merge ( java.io.InputStreamReader , Message.Builder ) ; } else { throw new java.io.IOException ( STRING + org.springframework.http.converter.protobuf.MediaType + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.http.converter.protobuf.Message , java.io.OutputStream java.io.OutputStream , MediaType org.springframework.http.converter.protobuf.MediaType , java.nio.charset.Charset java.nio.charset.Charset ) throws java.io.IOException { if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( MediaType . APPLICATION_JSON ) ) { this . com.google.protobuf.util.JsonFormat.Printer . appendTo ( org.springframework.http.converter.protobuf.Message , new java.io.OutputStreamWriter ( java.io.OutputStream , java.nio.charset.Charset ) ) ; } else { throw new java.io.IOException ( STRING + org.springframework.http.converter.protobuf.MediaType + STRING ) ; } }  <METHOD_END>
<METHOD_START> public void ( ) { org.springframework.http.converter.protobuf.FormatFactory = new FormatFactory ( ) ; org.springframework.http.converter.protobuf.ProtobufFormatter = org.springframework.http.converter.protobuf.FormatFactory . createFormatter ( FormatFactory . Formatter . JSON ) ; org.springframework.http.converter.protobuf.ProtobufFormatter = org.springframework.http.converter.protobuf.FormatFactory . createFormatter ( FormatFactory . Formatter . XML ) ; org.springframework.http.converter.protobuf.ProtobufFormatter = org.springframework.http.converter.protobuf.FormatFactory . createFormatter ( FormatFactory . Formatter . HTML ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.nio.charset.Charset java.nio.charset.Charset , MediaType org.springframework.http.converter.protobuf.MediaType , ExtensionRegistry org.springframework.http.converter.protobuf.ExtensionRegistry , Message . Message Message.Builder ) throws java.io.IOException { if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( MediaType . APPLICATION_JSON ) ) { org.springframework.http.converter.protobuf.ProtobufFormatter . merge ( java.io.InputStream , java.nio.charset.Charset , org.springframework.http.converter.protobuf.ExtensionRegistry , Message.Builder ) ; } else if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( MediaType . APPLICATION_XML ) ) { org.springframework.http.converter.protobuf.ProtobufFormatter . merge ( java.io.InputStream , java.nio.charset.Charset , org.springframework.http.converter.protobuf.ExtensionRegistry , Message.Builder ) ; } else { throw new java.io.IOException ( STRING + org.springframework.http.converter.protobuf.MediaType + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.http.converter.protobuf.Message , java.io.OutputStream java.io.OutputStream , MediaType org.springframework.http.converter.protobuf.MediaType , java.nio.charset.Charset java.nio.charset.Charset ) throws java.io.IOException { if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( MediaType . APPLICATION_JSON ) ) { org.springframework.http.converter.protobuf.ProtobufFormatter . print ( org.springframework.http.converter.protobuf.Message , java.io.OutputStream , java.nio.charset.Charset ) ; } else if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( MediaType . APPLICATION_XML ) ) { org.springframework.http.converter.protobuf.ProtobufFormatter . print ( org.springframework.http.converter.protobuf.Message , java.io.OutputStream , java.nio.charset.Charset ) ; } else if ( org.springframework.http.converter.protobuf.MediaType . isCompatibleWith ( MediaType . TEXT_HTML ) ) { org.springframework.http.converter.protobuf.ProtobufFormatter . print ( org.springframework.http.converter.protobuf.Message , java.io.OutputStream , java.nio.charset.Charset ) ; } else { throw new java.io.IOException ( STRING + org.springframework.http.converter.protobuf.MediaType + STRING ) ; } }  <METHOD_END>
