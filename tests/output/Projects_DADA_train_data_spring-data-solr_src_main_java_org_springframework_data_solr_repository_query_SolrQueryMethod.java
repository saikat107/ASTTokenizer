<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.solr.repository.query.RepositoryMetadata , ProjectionFactory org.springframework.data.solr.repository.query.ProjectionFactory , SolrEntityInformationCreator org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) { super( java.lang.reflect.Method , org.springframework.data.solr.repository.query.RepositoryMetadata , org.springframework.data.solr.repository.query.ProjectionFactory ); this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.String ( ) != null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.lang.reflect.Method . T ( Query .class ) != null ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ( org.springframework.data.solr.repository.query.Query ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.String ( ) != null ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return java.lang.String ( org.springframework.data.solr.repository.query.Query ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.Query org.springframework.data.solr.repository.query.Query ( ) { return this . java.lang.reflect.Method . T ( Query .class ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.solr.repository.query.TypeInformation<?> < ? > org.springframework.data.solr.repository.query.TypeInformation<?> ( ) { return ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( org.springframework.data.solr.repository.query.Query ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { if ( boolean ( ) ) { return java.lang.Integer ( org.springframework.data.solr.repository.query.Query ( ) , STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) || boolean ( ) || boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && ! CollectionUtils . isEmpty ( java.util.List<java.lang.String[]> ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return org.springframework.data.solr.repository.query.Facet ( ) != null ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( org.springframework.data.solr.repository.query.Facet ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( org.springframework.data.solr.repository.query.Facet ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String[]> < java.lang.String [] > java.util.List<java.lang.String[]> ( ) { java.util.List<org.springframework.data.solr.repository.query.Pivot> < Pivot > java.util.List<org.springframework.data.solr.repository.query.Pivot> = java.util.List ( org.springframework.data.solr.repository.query.Facet ( ) , STRING , Pivot .class ) ; java.util.ArrayList<java.lang.String[]> < java.lang.String [] > java.util.ArrayList<java.lang.String[]> = new java.util.ArrayList<java.lang.String[]> <> ( ) ; for ( Pivot org.springframework.data.solr.repository.query.Pivot : java.util.List<org.springframework.data.solr.repository.query.Pivot> ) { java.util.ArrayList<java.lang.String[]> . boolean ( org.springframework.data.solr.repository.query.Pivot . value ( ) ) ; } return java.util.ArrayList<java.lang.String[]> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.Facet org.springframework.data.solr.repository.query.Facet ( ) { return this . java.lang.reflect.Method . T ( Facet .class ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return ( java.lang.Integer ) AnnotationUtils . getValue ( org.springframework.data.solr.repository.query.Facet ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return ( java.lang.Integer ) AnnotationUtils . getValue ( org.springframework.data.solr.repository.query.Facet ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ( org.springframework.data.solr.repository.query.Facet ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.Stats org.springframework.data.solr.repository.query.Stats ( ) { return this . java.lang.reflect.Method . T ( Stats .class ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( ! ( org.springframework.data.solr.repository.query.Stats ( ) == null ) && ( ! java.util.List<java.lang.String> ( ) . boolean ( ) || ! java.util.List<java.lang.String> ( ) . boolean ( ) || ! java.util.Map<java.lang.String,java.lang.String[]> ( ) . boolean ( ) || ! java.util.Collection<java.lang.String> ( ) . boolean ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { Stats org.springframework.data.solr.repository.query.Stats = org.springframework.data.solr.repository.query.Stats ( ) ; return org.springframework.data.solr.repository.query.Stats != null && org.springframework.data.solr.repository.query.Stats . distinct ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( org.springframework.data.solr.repository.query.Stats ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( org.springframework.data.solr.repository.query.Stats ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ( ) { java.util.List<org.springframework.data.solr.repository.query.SelectiveStats> < SelectiveStats > java.util.List<org.springframework.data.solr.repository.query.SelectiveStats> = java.util.List ( org.springframework.data.solr.repository.query.Stats ( ) , STRING , SelectiveStats .class ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = new java.util.LinkedHashMap<java.lang.String,java.lang.String[]> <> ( ) ; for ( SelectiveStats org.springframework.data.solr.repository.query.SelectiveStats : java.util.List<org.springframework.data.solr.repository.query.SelectiveStats> ) { java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( org.springframework.data.solr.repository.query.SelectiveStats . field ( ) , org.springframework.data.solr.repository.query.SelectiveStats . facets ( ) ) ; } return java.util.Map<java.lang.String,java.lang.String[]> ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { java.util.List<org.springframework.data.solr.repository.query.SelectiveStats> < SelectiveStats > java.util.List<org.springframework.data.solr.repository.query.SelectiveStats> = java.util.List ( org.springframework.data.solr.repository.query.Stats ( ) , STRING , SelectiveStats .class ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( SelectiveStats org.springframework.data.solr.repository.query.SelectiveStats : java.util.List<org.springframework.data.solr.repository.query.SelectiveStats> ) { if ( org.springframework.data.solr.repository.query.SelectiveStats . distinct ( ) ) { java.util.Collection<java.lang.String> . boolean ( org.springframework.data.solr.repository.query.SelectiveStats . field ( ) ) ; } } return java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && ( java.lang.Boolean ) AnnotationUtils . getValue ( org.springframework.data.solr.repository.query.Query ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.annotation.Annotation java.lang.annotation.Annotation ( ) { return this . java.lang.reflect.Method . T ( Highlight .class ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . java.lang.annotation.Annotation ( ) != null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { if ( boolean ( ) ) { return this . java.util.List<java.lang.String> ( java.lang.annotation.Annotation ( ) , STRING ) ; } return java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return java.lang.String ( java.lang.annotation.Annotation ( ) , STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { if ( boolean ( ) ) { return java.lang.Integer ( java.lang.annotation.Annotation ( ) , STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { if ( boolean ( ) ) { return java.lang.Integer ( java.lang.annotation.Annotation ( ) , STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return java.lang.String ( java.lang.annotation.Annotation ( ) , STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return java.lang.String ( java.lang.annotation.Annotation ( ) , STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return java.lang.String ( java.lang.annotation.Annotation ( ) , STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! java.util.List<java.lang.String> ( ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ( org.springframework.data.solr.repository.query.Query ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core.query.Query.Operator org.springframework.data.solr.core.query.Query.Operator ( ) { if ( boolean ( ) ) { return org.springframework.data.solr.repository.query.Query ( ) . defaultOperator ( ) ; } return org . springframework . data . solr . org.springframework.data.solr.core . org.springframework.data.solr.core . org.springframework.data.solr.core . Operator . NONE ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return org.springframework.data.solr.repository.query.Query ( ) . defType ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return org.springframework.data.solr.repository.query.Query ( ) . requestHandler ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.repository.query.Spellcheck org.springframework.data.solr.repository.query.Spellcheck ( ) { return AnnotatedElementUtils . findMergedAnnotation ( this . java.lang.reflect.Method , Spellcheck .class ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.solr.repository.query.Spellcheck ( ) != null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.repository.query.SpellcheckOptions org.springframework.data.solr.repository.query.SpellcheckOptions ( ) { Spellcheck org.springframework.data.solr.repository.query.Spellcheck = org.springframework.data.solr.repository.query.Spellcheck ( ) ; if ( org.springframework.data.solr.repository.query.Spellcheck == null ) { return null ; } SpellcheckOptions org.springframework.data.solr.repository.query.SpellcheckOptions = SpellcheckOptions . spellcheck ( ) ; if ( org.springframework.data.solr.repository.query.Spellcheck . accuracy ( ) >= NUMBER ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . accuracy ( org.springframework.data.solr.repository.query.Spellcheck . accuracy ( ) ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . buildDictionary ( ) ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . buildDictionary ( ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . collate ( ) ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . collate ( ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . collateExtendedResults ( ) ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . collateExtendedResults ( ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . onlyMorePopular ( ) ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . onlyMorePopular ( ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . alternativeTermCount ( ) >= NUMBER ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . alternativeTermCount ( org.springframework.data.solr.repository.query.Spellcheck . alternativeTermCount ( ) ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . count ( ) >= NUMBER ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . count ( org.springframework.data.solr.repository.query.Spellcheck . count ( ) ) ; } if ( ! ObjectUtils . isEmpty ( org.springframework.data.solr.repository.query.Spellcheck . dictionaries ( ) ) ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . dictionaries ( org.springframework.data.solr.repository.query.Spellcheck . dictionaries ( ) ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . maxCollationEvaluations ( ) >= NUMBER ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . maxCollationEvaluations ( org.springframework.data.solr.repository.query.Spellcheck . maxCollationEvaluations ( ) ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . maxCollations ( ) >= NUMBER ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . maxCollations ( org.springframework.data.solr.repository.query.Spellcheck . maxCollations ( ) ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . maxCollationsTries ( ) >= NUMBER ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . maxCollationTries ( org.springframework.data.solr.repository.query.Spellcheck . maxCollationsTries ( ) ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . maxResultsForSuggest ( ) >= NUMBER ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . maxResultsForSuggest ( org.springframework.data.solr.repository.query.Spellcheck . maxResultsForSuggest ( ) ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . maxCollationCollectDocs ( ) >= NUMBER ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . maxCollationCollectDocs ( org.springframework.data.solr.repository.query.Spellcheck . maxCollationCollectDocs ( ) ) ; } if ( org.springframework.data.solr.repository.query.Spellcheck . extendedResults ( ) ) { org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SpellcheckOptions . extendedResults ( ) ; } return org.springframework.data.solr.repository.query.SpellcheckOptions ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.String java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) AnnotationUtils . getValue ( java.lang.annotation.Annotation , java.lang.String ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ; }  <METHOD_END>
<METHOD_START> private java.lang.Integer java.lang.Integer ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.String java.lang.String ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) AnnotationUtils . getValue ( java.lang.annotation.Annotation , java.lang.String ) ; if ( java.lang.Integer != null && java.lang.Integer > NUMBER ) { return java.lang.Integer ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = ( java.lang.String [] ) AnnotationUtils . getValue ( java.lang.annotation.Annotation , java.lang.String ) ; if ( java.lang.String[] . int > NUMBER || ( java.lang.String[] . int == NUMBER && StringUtils . hasText ( java.lang.String[] [ NUMBER ] ) ) ) { return CollectionUtils . arrayToList ( java.lang.String[] ) ; } return java.util.Collections . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.List<T> < T > java.util.List<T> ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { T [] T[] = ( T [] ) AnnotationUtils . getValue ( java.lang.annotation.Annotation , java.lang.String ) ; return CollectionUtils . arrayToList ( T[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( ! boolean ( ) ) { return super. getNamedQueryName ( ) ; } return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.solr.repository.query.SolrParameters org.springframework.data.solr.repository.query.SolrParameters ( java.lang.reflect.Method java.lang.reflect.Method ) { return new SolrParameters ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.repository.query.SolrParameters org.springframework.data.solr.repository.query.SolrParameters ( ) { return ( SolrParameters ) super. getParameters ( ) ; }  <METHOD_END>
