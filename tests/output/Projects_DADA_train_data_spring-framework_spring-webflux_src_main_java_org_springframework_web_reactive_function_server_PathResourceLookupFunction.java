<METHOD_START> public void ( java.lang.String java.lang.String , Resource org.springframework.web.reactive.function.server.Resource ) { this . java.lang.String = java.lang.String ; this . org.springframework.web.reactive.function.server.Resource = org.springframework.web.reactive.function.server.Resource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.Resource> < Resource > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.Resource> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.reactive.function.server.ServerRequest . path ( ) ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = StringUtils . uriDecode ( java.lang.String , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; } if ( ! StringUtils . hasLength ( java.lang.String ) || boolean ( java.lang.String ) ) { return Mono . empty ( ) ; } if ( ! org.springframework.web.reactive.function.server.PathMatcher . match ( this . java.lang.String , java.lang.String ) ) { return Mono . empty ( ) ; } else { java.lang.String = org.springframework.web.reactive.function.server.PathMatcher . extractPathWithinPattern ( this . java.lang.String , java.lang.String ) ; } try { Resource org.springframework.web.reactive.function.server.Resource = this . org.springframework.web.reactive.function.server.Resource . createRelative ( java.lang.String ) ; if ( org.springframework.web.reactive.function.server.Resource . exists ( ) && org.springframework.web.reactive.function.server.Resource . isReadable ( ) && boolean ( org.springframework.web.reactive.function.server.Resource ) ) { return Mono . just ( org.springframework.web.reactive.function.server.Resource ) ; } else { return Mono . empty ( ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new java.io.UncheckedIOException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { boolean boolean = false ; for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { if ( java.lang.String . char ( int ) == '/' ) { boolean = true ; } else if ( java.lang.String . char ( int ) > ' ' && java.lang.String . char ( int ) != NUMBER ) { if ( int == NUMBER || ( int == NUMBER && boolean ) ) { return java.lang.String ; } java.lang.String = boolean ? STRING + java.lang.String . java.lang.String ( int ) : java.lang.String . java.lang.String ( int ) ; return java.lang.String ; } } return ( boolean ? STRING : STRING ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { return true ; } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = ( java.lang.String . char ( NUMBER ) == '/' ? java.lang.String . java.lang.String ( NUMBER ) : java.lang.String ) ; if ( ResourceUtils . isUrl ( java.lang.String ) || java.lang.String . boolean ( STRING ) ) { return true ; } } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; if ( java.lang.String . boolean ( STRING ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Resource org.springframework.web.reactive.function.server.Resource ) throws java.io.IOException { if ( org.springframework.web.reactive.function.server.Resource . getClass ( ) != this . org.springframework.web.reactive.function.server.Resource . getClass ( ) ) { return false ; } java.lang.String java.lang.String ; java.lang.String java.lang.String ; if ( org.springframework.web.reactive.function.server.Resource instanceof UrlResource ) { java.lang.String = org.springframework.web.reactive.function.server.Resource . getURL ( ) . toExternalForm ( ) ; java.lang.String = StringUtils . cleanPath ( this . org.springframework.web.reactive.function.server.Resource . getURL ( ) . toString ( ) ) ; } else if ( org.springframework.web.reactive.function.server.Resource instanceof ClassPathResource ) { java.lang.String = ( ( ClassPathResource ) org.springframework.web.reactive.function.server.Resource ) . getPath ( ) ; java.lang.String = StringUtils . cleanPath ( ( ( ClassPathResource ) this . org.springframework.web.reactive.function.server.Resource ) . getPath ( ) ) ; } else { java.lang.String = org.springframework.web.reactive.function.server.Resource . getURL ( ) . getPath ( ) ; java.lang.String = StringUtils . cleanPath ( this . org.springframework.web.reactive.function.server.Resource . getURL ( ) . getPath ( ) ) ; } if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } java.lang.String = ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( ) ? java.lang.String : java.lang.String + STRING ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { return false ; } if ( java.lang.String . boolean ( STRING ) ) { if ( StringUtils . uriDecode ( java.lang.String , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) . contains ( STRING ) ) { return false ; } } return true ; }  <METHOD_END>
