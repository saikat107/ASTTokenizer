<METHOD_START> protected static org.springframework.data.gemfire.client.ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint ( java.lang.String java.lang.String , int int ) { return new ConnectionEndpoint ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Iterable<org.springframework.data.gemfire.client.ConnectionEndpoint> < ConnectionEndpoint > java.lang.Iterable<org.springframework.data.gemfire.client.ConnectionEndpoint> , java.lang.String ... java.lang.String[] ) { assertThat ( java.lang.Iterable<org.springframework.data.gemfire.client.ConnectionEndpoint> ) . isNotNull ( ) ; int int = NUMBER ; for ( ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint : java.lang.Iterable<org.springframework.data.gemfire.client.ConnectionEndpoint> ) { assertThat ( org.springframework.data.gemfire.client.ConnectionEndpoint . toString ( ) ) . isEqualTo ( java.lang.String[] [ int ++ ] ) ; } assertThat ( int ) . isEqualTo ( java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING } ; assertThat ( org.springframework.data.gemfire.client.ConnectionEndpointList . size ( ) ) . isEqualTo ( java.lang.String[] . int ) ; void ( org.springframework.data.gemfire.client.ConnectionEndpointList , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING } ; assertThat ( org.springframework.data.gemfire.client.ConnectionEndpointList . size ( ) ) . isEqualTo ( java.lang.String[] . int ) ; void ( CollectionUtils . sort ( org.springframework.data.gemfire.client.ConnectionEndpointList ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING , STRING } ; assertThat ( org.springframework.data.gemfire.client.ConnectionEndpointList . size ( ) ) . isEqualTo ( java.lang.String[] . int ) ; void ( CollectionUtils . sort ( org.springframework.data.gemfire.client.ConnectionEndpointList ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING } ; assertThat ( org.springframework.data.gemfire.client.ConnectionEndpointList . size ( ) ) . isEqualTo ( java.lang.String[] . int ) ; void ( CollectionUtils . sort ( org.springframework.data.gemfire.client.ConnectionEndpointList ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.data.gemfire.client.ConfigurableListableBeanFactory ) throws org.springframework.data.gemfire.client.BeansException { BeanDefinition org.springframework.data.gemfire.client.BeanDefinition = org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.data.gemfire.client.BeanDefinition . setBeanClassName ( org.springframework.data.gemfire.client.PoolsConfiguredWithLocatorsAndServersExpressionsIntegrationTests.AnotherLocatorPoolFactoryBean .class . java.lang.String ( ) ) ; BeanDefinition org.springframework.data.gemfire.client.BeanDefinition = org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.data.gemfire.client.BeanDefinition . setBeanClassName ( org.springframework.data.gemfire.client.PoolsConfiguredWithLocatorsAndServersExpressionsIntegrationTests.AnotherServerPoolFactoryBean .class . java.lang.String ( ) ) ; BeanDefinition org.springframework.data.gemfire.client.BeanDefinition = org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.data.gemfire.client.BeanDefinition . setBeanClassName ( org.springframework.data.gemfire.client.PoolsConfiguredWithLocatorsAndServersExpressionsIntegrationTests.LocatorPoolFactoryBean .class . java.lang.String ( ) ) ; BeanDefinition org.springframework.data.gemfire.client.BeanDefinition = org.springframework.data.gemfire.client.ConfigurableListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.data.gemfire.client.BeanDefinition . setBeanClassName ( org.springframework.data.gemfire.client.PoolsConfiguredWithLocatorsAndServersExpressionsIntegrationTests.ServerPoolFactoryBean .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.ConnectionEndpointList org.springframework.data.gemfire.client.ConnectionEndpointList ( ) { return org.springframework.data.gemfire.client.ConnectionEndpointList ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.ConnectionEndpointList org.springframework.data.gemfire.client.ConnectionEndpointList ( ) { return org.springframework.data.gemfire.client.ConnectionEndpointList ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.ConnectionEndpointList org.springframework.data.gemfire.client.ConnectionEndpointList ( ) { return org.springframework.data.gemfire.client.ConnectionEndpointList ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.ConnectionEndpointList org.springframework.data.gemfire.client.ConnectionEndpointList ( ) { return org.springframework.data.gemfire.client.ConnectionEndpointList ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Properties java.util.Properties ) { Assert . notNull ( java.util.Properties , STRING ) ; this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.util.Properties . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.util.Properties . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.client.ConnectionEndpointList org.springframework.data.gemfire.client.ConnectionEndpointList ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.client.ConnectionEndpointList org.springframework.data.gemfire.client.ConnectionEndpointList ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.client.PoolFactory org.springframework.data.gemfire.client.PoolFactory ( ) { final PoolFactory org.springframework.data.gemfire.client.PoolFactory = mock ( PoolFactory .class ) ; when ( org.springframework.data.gemfire.client.PoolFactory . addLocator ( anyString ( ) , anyInt ( ) ) ) . thenAnswer ( new Answer < PoolFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.client.PoolFactory org.springframework.data.gemfire.client.PoolFactory ( InvocationOnMock org.springframework.data.gemfire.client.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; int int = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; org.springframework.data.gemfire.client.ConnectionEndpointList ( ) . add ( org.springframework.data.gemfire.client.ConnectionEndpoint ( java.lang.String , int ) ) ; return org.springframework.data.gemfire.client.PoolFactory ; } } ) ; when ( org.springframework.data.gemfire.client.PoolFactory . addServer ( anyString ( ) , anyInt ( ) ) ) . thenAnswer ( new Answer < PoolFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.client.PoolFactory org.springframework.data.gemfire.client.PoolFactory ( InvocationOnMock org.springframework.data.gemfire.client.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; int int = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; org.springframework.data.gemfire.client.ConnectionEndpointList ( ) . add ( org.springframework.data.gemfire.client.ConnectionEndpoint ( java.lang.String , int ) ) ; return org.springframework.data.gemfire.client.PoolFactory ; } } ) ; return org.springframework.data.gemfire.client.PoolFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.PoolFactory org.springframework.data.gemfire.client.PoolFactory ( InvocationOnMock org.springframework.data.gemfire.client.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; int int = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; org.springframework.data.gemfire.client.ConnectionEndpointList ( ) . add ( org.springframework.data.gemfire.client.ConnectionEndpoint ( java.lang.String , int ) ) ; return org.springframework.data.gemfire.client.PoolFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.PoolFactory org.springframework.data.gemfire.client.PoolFactory ( InvocationOnMock org.springframework.data.gemfire.client.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; int int = org.springframework.data.gemfire.client.InvocationOnMock . getArgument ( NUMBER ) ; org.springframework.data.gemfire.client.ConnectionEndpointList ( ) . add ( org.springframework.data.gemfire.client.ConnectionEndpoint ( java.lang.String , int ) ) ; return org.springframework.data.gemfire.client.PoolFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( ) { return true ; }  <METHOD_END>
