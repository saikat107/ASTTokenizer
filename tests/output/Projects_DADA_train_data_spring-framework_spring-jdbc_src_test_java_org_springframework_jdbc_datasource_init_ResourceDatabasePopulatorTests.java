<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ResourceDatabasePopulator ( ( Resource ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ResourceDatabasePopulator ( ( Resource [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( org.springframework.jdbc.datasource.init.Resource ) ; assertEquals ( NUMBER , databasePopulator . scripts . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( org.springframework.jdbc.datasource.init.Resource , org.springframework.jdbc.datasource.init.Resource ) ; assertEquals ( NUMBER , databasePopulator . scripts . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( org.springframework.jdbc.datasource.init.Resource , org.springframework.jdbc.datasource.init.Resource ) ; assertEquals ( NUMBER , databasePopulator . scripts . size ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( org.springframework.jdbc.datasource.init.Resource ) ; assertEquals ( NUMBER , databasePopulator . scripts . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScripts ( ( Resource ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScripts ( ( Resource [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . setScripts ( ( Resource ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . setScripts ( ( Resource [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceDatabasePopulator org.springframework.jdbc.datasource.init.ResourceDatabasePopulator = new ResourceDatabasePopulator ( ) ; assertEquals ( NUMBER , databasePopulator . scripts . size ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . setScripts ( org.springframework.jdbc.datasource.init.Resource , org.springframework.jdbc.datasource.init.Resource ) ; assertEquals ( NUMBER , databasePopulator . scripts . size ( ) ) ; org.springframework.jdbc.datasource.init.ResourceDatabasePopulator . addScript ( org.springframework.jdbc.datasource.init.Resource ) ; assertEquals ( NUMBER , databasePopulator . scripts . size ( ) ) ; }  <METHOD_END>
