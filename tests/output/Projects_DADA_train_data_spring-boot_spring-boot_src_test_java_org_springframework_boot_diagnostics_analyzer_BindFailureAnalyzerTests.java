<METHOD_START> @ Before public void void ( ) { LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { LocaleContextHolder . resetLocaleContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.FieldValidationFailureConfiguration .class ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( java.lang.String ( STRING , STRING , STRING ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( java.lang.String ( STRING , STRING , STRING ) ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( java.lang.String ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.ObjectValidationFailureConfiguration .class ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.diagnostics.analyzer.FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( java.lang.Class<?> < ? > java.lang.Class<?> ) { BeanCreationException org.springframework.boot.diagnostics.analyzer.BeanCreationException = org.springframework.boot.diagnostics.analyzer.BeanCreationException ( java.lang.Class<> ) ; assertThat ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ) . isNotNull ( ) ; return new BindFailureAnalyzer ( ) . analyze ( org.springframework.boot.diagnostics.analyzer.BeanCreationException ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.diagnostics.analyzer.BeanCreationException org.springframework.boot.diagnostics.analyzer.BeanCreationException ( java.lang.Class<?> < ? > java.lang.Class<?> ) { try { new AnnotationConfigApplicationContext ( java.lang.Class<> ) . close ( ) ; return null ; } catch ( BeanCreationException org.springframework.boot.diagnostics.analyzer.BeanCreationException ) { return org.springframework.boot.diagnostics.analyzer.BeanCreationException ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.FieldValidationFailureProperties.Nested org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.FieldValidationFailureProperties.Nested ( ) { return this . org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.FieldValidationFailureProperties.Nested ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.FieldValidationFailureProperties.Nested org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.FieldValidationFailureProperties.Nested ) { this . org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.FieldValidationFailureProperties.Nested = org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.FieldValidationFailureProperties.Nested ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.boot.diagnostics.analyzer.Errors ) { org.springframework.boot.diagnostics.analyzer.Errors . reject ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
