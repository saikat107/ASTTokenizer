<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) { if ( java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map.Entry<java.lang.String,org.springframework.web.reactive.accept.MediaType> : java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.web.reactive.accept.MediaType> . getKey ( ) . toLowerCase ( java.util.Locale . java.util.Locale ) ; MediaType org.springframework.web.reactive.accept.MediaType = java.util.Map.Entry<java.lang.String,org.springframework.web.reactive.accept.MediaType> . getValue ( ) ; this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . put ( java.lang.String , org.springframework.web.reactive.accept.MediaType ) ; this . org.springframework.web.reactive.accept.MultiValueMap<org.springframework.web.reactive.accept.MediaType,java.lang.String> . add ( org.springframework.web.reactive.accept.MediaType , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ( ) { return this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.accept.MediaType org.springframework.web.reactive.accept.MediaType ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . get ( java.lang.String . java.lang.String ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> ( ) { return new java.util.ArrayList <> ( this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . values ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> ( ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange )			throws org.springframework.web.reactive.accept.NotAcceptableStatusException { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.reactive.accept.ServerWebExchange ) ; return java.util.List<org.springframework.web.reactive.accept.MediaType> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> ( java.lang.String java.lang.String ) throws org.springframework.web.reactive.accept.NotAcceptableStatusException { if ( StringUtils . hasText ( java.lang.String ) ) { MediaType org.springframework.web.reactive.accept.MediaType = org.springframework.web.reactive.accept.MediaType ( java.lang.String ) ; if ( org.springframework.web.reactive.accept.MediaType != null ) { void ( java.lang.String , org.springframework.web.reactive.accept.MediaType ) ; return java.util.Collections . java.util.List ( org.springframework.web.reactive.accept.MediaType ) ; } org.springframework.web.reactive.accept.MediaType = org.springframework.web.reactive.accept.MediaType ( java.lang.String ) ; if ( org.springframework.web.reactive.accept.MediaType != null ) { MediaType org.springframework.web.reactive.accept.MediaType = this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . putIfAbsent ( java.lang.String , org.springframework.web.reactive.accept.MediaType ) ; if ( org.springframework.web.reactive.accept.MediaType == null ) { this . org.springframework.web.reactive.accept.MultiValueMap<org.springframework.web.reactive.accept.MediaType,java.lang.String> . add ( org.springframework.web.reactive.accept.MediaType , java.lang.String ) ; } return java.util.Collections . java.util.List ( org.springframework.web.reactive.accept.MediaType ) ; } } return java.util.Collections . java.util.List<org.springframework.web.reactive.accept.MediaType> ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange );  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.String java.lang.String , MediaType org.springframework.web.reactive.accept.MediaType ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.web.reactive.accept.MediaType org.springframework.web.reactive.accept.MediaType ( java.lang.String java.lang.String ) throws org.springframework.web.reactive.accept.NotAcceptableStatusException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( MediaType org.springframework.web.reactive.accept.MediaType ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.web.reactive.accept.MultiValueMap<org.springframework.web.reactive.accept.MediaType,java.lang.String> . get ( org.springframework.web.reactive.accept.MediaType ) ; return ( java.util.List<java.lang.String> != null ? new java.util.HashSet<java.lang.String> <> ( java.util.List<java.lang.String> ) : java.util.Collections . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return new java.util.HashSet <> ( this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . keySet ( ) ) ; }  <METHOD_END>
