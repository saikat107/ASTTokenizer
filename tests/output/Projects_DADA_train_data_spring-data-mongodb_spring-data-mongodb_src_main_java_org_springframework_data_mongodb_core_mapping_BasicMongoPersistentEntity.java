<METHOD_START> public void ( TypeInformation < T > org.springframework.data.mongodb.core.mapping.TypeInformation<T> ) { super( org.springframework.data.mongodb.core.mapping.TypeInformation<T> , java.util.Optional . java.util.Optional<org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.MongoPersistentPropertyComparator> ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.MongoPersistentPropertyComparator . org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.MongoPersistentPropertyComparator ) ); java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.mapping.TypeInformation<T> . getType ( ) ; java.lang.String java.lang.String = MongoCollectionUtils . getPreferredCollectionName ( java.lang.Class<> ) ; java.util.Optional<org.springframework.data.mongodb.core.mapping.Document> < Document > java.util.Optional<org.springframework.data.mongodb.core.mapping.Document> = this . findAnnotation ( Document .class ) ; this . org.springframework.data.mongodb.core.mapping.Expression = java.util.Optional<org.springframework.data.mongodb.core.mapping.Document> . map ( it -> detectExpression ( it ) ) . orElse ( null ) ; this . org.springframework.data.mongodb.core.mapping.StandardEvaluationContext = new StandardEvaluationContext ( ) ; this . java.lang.String = java.util.Optional<org.springframework.data.mongodb.core.mapping.Document> . filter ( it -> StringUtils . hasText ( it . collection ( ) ) ) . map ( it -> it . collection ( ) ) . orElse ( java.lang.String ) ; this . java.lang.String = java.util.Optional<org.springframework.data.mongodb.core.mapping.Document> . filter ( it -> StringUtils . hasText ( it . language ( ) ) ) . map ( it -> it . language ( ) ) . orElse ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.data.mongodb.core.mapping.ApplicationContext ) throws org.springframework.data.mongodb.core.mapping.BeansException { org.springframework.data.mongodb.core.mapping.StandardEvaluationContext . addPropertyAccessor ( new BeanFactoryAccessor ( ) ) ; org.springframework.data.mongodb.core.mapping.StandardEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.data.mongodb.core.mapping.ApplicationContext ) ) ; org.springframework.data.mongodb.core.mapping.StandardEvaluationContext . setRootObject ( org.springframework.data.mongodb.core.mapping.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return org.springframework.data.mongodb.core.mapping.Expression == null ? java.lang.String : org.springframework.data.mongodb.core.mapping.Expression . getValue ( org.springframework.data.mongodb.core.mapping.StandardEvaluationContext , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.mapping.MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ( ) { return getPersistentProperty ( TextScore .class ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ( ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.AssertFieldNameUniquenessHandler org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.AssertFieldNameUniquenessHandler = new org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.AssertFieldNameUniquenessHandler ( ) ; doWithProperties ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.AssertFieldNameUniquenessHandler ) ; doWithAssociations ( org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.AssertFieldNameUniquenessHandler ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { doWithProperties ( new org.springframework.data.mongodb.core.mapping.BasicMongoPersistentEntity.PropertyTypeAssertionHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) { if ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getFieldOrder ( ) == java.lang.Integer . int ) { return NUMBER ; } if ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getFieldOrder ( ) == java.lang.Integer . int ) { return - NUMBER ; } return org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getFieldOrder ( ) - org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getFieldOrder ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.core.mapping.MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) { Assert . notNull ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , STRING ) ; if ( ! org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isIdProperty ( ) ) { return null ; } java.util.Optional<org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> = getIdProperty ( ) ; return java.util.Optional<org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> . map ( it -> { boolean currentIdPropertyIsExplicit = it . isExplicitIdProperty ( ) ; boolean newIdPropertyIsExplicit = property . isExplicitIdProperty ( ) ; Optional < Field > currentIdPropertyField = it . getField ( ) ; if ( newIdPropertyIsExplicit && currentIdPropertyIsExplicit ) { throw new MappingException ( String . format ( STRING + STRING , property . getField ( ) , currentIdPropertyField ) ) ; } else if ( newIdPropertyIsExplicit && ! currentIdPropertyIsExplicit ) { return property ; } else if ( ! newIdPropertyIsExplicit && currentIdPropertyIsExplicit ) { } else { throw new MappingException ( String . format ( STRING + STRING , property . getField ( ) , currentIdPropertyField ) ) ; } return null ; } ) . orElse ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.mapping.Expression org.springframework.data.mongodb.core.mapping.Expression ( Document org.springframework.data.mongodb.core.mapping.Document ) { if ( org.springframework.data.mongodb.core.mapping.Document == null ) { return null ; } java.lang.String java.lang.String = org.springframework.data.mongodb.core.mapping.Document . collection ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return null ; } Expression org.springframework.data.mongodb.core.mapping.Expression = org.springframework.data.mongodb.core.mapping.SpelExpressionParser . parseExpression ( org.springframework.data.mongodb.core.mapping.Document . collection ( ) , ParserContext . TEMPLATE_EXPRESSION ) ; return org.springframework.data.mongodb.core.mapping.Expression instanceof LiteralExpression ? null : org.springframework.data.mongodb.core.mapping.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) { void ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> public void void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.mapping.Association<org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> ) { void ( org.springframework.data.mongodb.core.mapping.Association<org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> . getInverse ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getFieldName ( ) ; MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty = java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> . get ( java.lang.String ) ; if ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty != null ) { throw new MappingException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . toString ( ) , org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . toString ( ) , java.lang.String ) ) ; } java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.MongoPersistentProperty> . put ( java.lang.String , org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) { void ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; void ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; void ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> private static void void ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) { if ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isExplicitLanguageProperty ( ) ) { void ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , java.lang.String .class ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) { if ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isTextScoreProperty ( ) ) { void ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , java.lang.Float .class , java.lang.Double .class ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty ) { if ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isDbReference ( ) && org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getDBRef ( ) . lazy ( ) ) { if ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . isArray ( ) || java.lang.reflect.Modifier . boolean ( org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getActualType ( ) . getModifiers ( ) ) ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getField ( ) , org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getActualType ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> private static void void ( MongoPersistentProperty org.springframework.data.mongodb.core.mapping.MongoPersistentProperty , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( ClassUtils . isAssignable ( java.lang.Class<> , org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getActualType ( ) ) ) { return; } } throw new MappingException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getField ( ) , org.springframework.data.mongodb.core.mapping.MongoPersistentProperty . getActualType ( ) , StringUtils . arrayToCommaDelimitedString ( java.lang.Class<?>[] ) ) ) ; }  <METHOD_END>
