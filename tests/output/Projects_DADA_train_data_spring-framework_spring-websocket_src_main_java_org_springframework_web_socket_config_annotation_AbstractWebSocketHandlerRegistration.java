<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.config.annotation.TaskScheduler ) { this . org.springframework.web.socket.config.annotation.TaskScheduler = org.springframework.web.socket.config.annotation.TaskScheduler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String ... java.lang.String[] ) { Assert . notNull ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) ; Assert . notEmpty ( java.lang.String[] , STRING ) ; this . org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.WebSocketHandler,java.lang.String> . put ( org.springframework.web.socket.config.annotation.WebSocketHandler , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration ( HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler ) { this . org.springframework.web.socket.config.annotation.HandshakeHandler = org.springframework.web.socket.config.annotation.HandshakeHandler ; return this ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.config.annotation.HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler ( ) { return this . org.springframework.web.socket.config.annotation.HandshakeHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration ( HandshakeInterceptor ... org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) { if ( ! ObjectUtils . isEmpty ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) { this . java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . addAll ( java.util.Arrays . java.util.List ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration org.springframework.web.socket.config.annotation.WebSocketHandlerRegistration ( java.lang.String ... java.lang.String[] ) { this . java.util.List<java.lang.String> . void ( ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { this . java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( ) { this . org.springframework.web.socket.config.annotation.SockJsServiceRegistration = new SockJsServiceRegistration ( this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] = org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ( ) ; if ( interceptors . length > NUMBER ) { this . org.springframework.web.socket.config.annotation.SockJsServiceRegistration . setInterceptors ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ; } if ( this . org.springframework.web.socket.config.annotation.HandshakeHandler != null ) { WebSocketTransportHandler org.springframework.web.socket.config.annotation.WebSocketTransportHandler = new WebSocketTransportHandler ( this . org.springframework.web.socket.config.annotation.HandshakeHandler ) ; this . org.springframework.web.socket.config.annotation.SockJsServiceRegistration . setTransportHandlerOverrides ( org.springframework.web.socket.config.annotation.WebSocketTransportHandler ) ; } if ( ! this . java.util.List<java.lang.String> . boolean ( ) ) { this . org.springframework.web.socket.config.annotation.SockJsServiceRegistration . setAllowedOrigins ( this . java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ this . java.util.List<java.lang.String> . int ( ) ] ) ) ; } return this . org.springframework.web.socket.config.annotation.SockJsServiceRegistration ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.config.annotation.HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ( ) { java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> = new java.util.ArrayList <> ( this . java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . size ( ) + NUMBER ) ; java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . addAll ( this . java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> ) ; java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . add ( new OriginHandshakeInterceptor ( this . java.util.List<java.lang.String> ) ) ; return java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . toArray ( new HandshakeInterceptor [ java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> protected final M M ( ) { M M = M ( ) ; if ( this . org.springframework.web.socket.config.annotation.SockJsServiceRegistration != null ) { SockJsService org.springframework.web.socket.config.annotation.SockJsService = this . org.springframework.web.socket.config.annotation.SockJsServiceRegistration . getSockJsService ( ) ; for ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler : this . org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.WebSocketHandler,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : this . org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.WebSocketHandler,java.lang.String> . get ( org.springframework.web.socket.config.annotation.WebSocketHandler ) ) { java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING : java.lang.String + STRING ) ; void ( M , org.springframework.web.socket.config.annotation.SockJsService , org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String ) ; } } } else { HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler = org.springframework.web.socket.config.annotation.HandshakeHandler ( ) ; HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] = org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ( ) ; for ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler : this . org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.WebSocketHandler,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : this . org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.WebSocketHandler,java.lang.String> . get ( org.springframework.web.socket.config.annotation.WebSocketHandler ) ) { void ( M , org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.HandshakeHandler , org.springframework.web.socket.config.annotation.HandshakeInterceptor[] , java.lang.String ) ; } } } return M ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.annotation.HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler ( ) { return ( this . org.springframework.web.socket.config.annotation.HandshakeHandler != null ? this . org.springframework.web.socket.config.annotation.HandshakeHandler : new DefaultHandshakeHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract M M ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( M M , SockJsService org.springframework.web.socket.config.annotation.SockJsService , WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> protected abstract void void ( M M , WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler , HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] , java.lang.String java.lang.String );  <METHOD_END>
