<METHOD_START> public void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageReader<?>> , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return checkParameterTypeNoReactiveWrapper ( org.springframework.web.reactive.result.method.annotation.MethodParameter , type -> HttpEntity .class . equals ( type ) || RequestEntity .class . equals ( type ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterType ( ) ; return readBody ( org.springframework.web.reactive.result.method.annotation.MethodParameter . nested ( ) , false , org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) . map ( body -> createEntity ( body , entityType , exchange . getRequest ( ) ) ) . defaultIfEmpty ( java.lang.Object ( null , java.lang.Class<> , org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequest ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , ServerHttpRequest org.springframework.web.reactive.result.method.annotation.ServerHttpRequest ) { return RequestEntity .class . boolean ( java.lang.Class<> ) ? new RequestEntity <> ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.ServerHttpRequest . getHeaders ( ) , org.springframework.web.reactive.result.method.annotation.ServerHttpRequest . getMethod ( ) , org.springframework.web.reactive.result.method.annotation.ServerHttpRequest . getURI ( ) ) : new HttpEntity <> ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.ServerHttpRequest . getHeaders ( ) ) ; }  <METHOD_END>
