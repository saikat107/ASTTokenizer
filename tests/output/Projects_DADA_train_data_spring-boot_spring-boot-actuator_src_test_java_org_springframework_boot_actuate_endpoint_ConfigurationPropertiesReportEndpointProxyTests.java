<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpointProxyTests.Config .class , org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpointProxyTests.SqlExecutor .class ) ; this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . refresh ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.actuate.endpoint.AnnotationConfigApplicationContext . getBean ( ConfigurationPropertiesReportEndpoint .class ) . invoke ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.String ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint ( ) { return new ConfigurationPropertiesReportEndpoint ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.PlatformTransactionManager org.springframework.boot.actuate.endpoint.PlatformTransactionManager ( ) { return new DataSourceTransactionManager ( javax.sql.DataSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return new EmbeddedDatabaseBuilder ( ) . setType ( EmbeddedDatabaseType . HSQL ) . build ( ) ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional ( propagation = Propagation . REQUIRES_NEW ) public void void ( ) {		}  <METHOD_END>
