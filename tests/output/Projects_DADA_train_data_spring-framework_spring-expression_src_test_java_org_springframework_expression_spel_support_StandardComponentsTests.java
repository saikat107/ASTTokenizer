<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.expression.spel.support.StandardEvaluationContext = new StandardEvaluationContext ( ) ; assertNotNull ( org.springframework.expression.spel.support.StandardEvaluationContext . getTypeComparator ( ) ) ; TypeComparator org.springframework.expression.spel.support.TypeComparator = new StandardTypeComparator ( ) ; org.springframework.expression.spel.support.StandardEvaluationContext . setTypeComparator ( org.springframework.expression.spel.support.TypeComparator ) ; assertEquals ( org.springframework.expression.spel.support.TypeComparator , org.springframework.expression.spel.support.StandardEvaluationContext . getTypeComparator ( ) ) ; TypeLocator org.springframework.expression.spel.support.TypeLocator = new StandardTypeLocator ( ) ; org.springframework.expression.spel.support.StandardEvaluationContext . setTypeLocator ( org.springframework.expression.spel.support.TypeLocator ) ; assertEquals ( org.springframework.expression.spel.support.TypeLocator , org.springframework.expression.spel.support.StandardEvaluationContext . getTypeLocator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = EvaluationException .class ) public void void ( ) org.springframework.expression.spel.support.EvaluationException { OperatorOverloader org.springframework.expression.spel.support.OperatorOverloader = new StandardOperatorOverloader ( ) ; assertFalse ( org.springframework.expression.spel.support.OperatorOverloader . overridesOperation ( Operation . ADD , null , null ) ) ; org.springframework.expression.spel.support.OperatorOverloader . operate ( Operation . ADD , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardTypeLocator org.springframework.expression.spel.support.StandardTypeLocator = new StandardTypeLocator ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.expression.spel.support.StandardTypeLocator . getImportPrefixes ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; org.springframework.expression.spel.support.StandardTypeLocator . registerImport ( STRING ) ; java.util.List<java.lang.String> = org.springframework.expression.spel.support.StandardTypeLocator . getImportPrefixes ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; org.springframework.expression.spel.support.StandardTypeLocator . removeImport ( STRING ) ; java.util.List<java.lang.String> = org.springframework.expression.spel.support.StandardTypeLocator . getImportPrefixes ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.support.EvaluationException { TypeConverter org.springframework.expression.spel.support.TypeConverter = new StandardTypeConverter ( ) ; org.springframework.expression.spel.support.TypeConverter . convertValue ( NUMBER , TypeDescriptor . forObject ( NUMBER ) , TypeDescriptor . valueOf ( java.lang.Double .class ) ) ; }  <METHOD_END>
