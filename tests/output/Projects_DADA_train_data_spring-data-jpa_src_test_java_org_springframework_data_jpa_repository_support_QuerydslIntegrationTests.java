<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.repository.support.PathBuilder<org.springframework.data.jpa.repository.support.User> = new PathBuilder < User > ( User .class , STRING ) ; org.springframework.data.jpa.repository.support.Querydsl = new Querydsl ( org.springframework.data.jpa.repository.support.EntityManager , org.springframework.data.jpa.repository.support.PathBuilder<org.springframework.data.jpa.repository.support.User> ) ; org.springframework.data.jpa.repository.support.JPQLQuery<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.Querydsl . createQuery ( ) . select ( org.springframework.data.jpa.repository.support.PathBuilder<org.springframework.data.jpa.repository.support.User> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JPQLQuery < User > org.springframework.data.jpa.repository.support.JPQLQuery<org.springframework.data.jpa.repository.support.User> = org.springframework.data.jpa.repository.support.Querydsl . applySorting ( Sort . by ( STRING ) , org.springframework.data.jpa.repository.support.JPQLQuery<org.springframework.data.jpa.repository.support.User> ) ; assertThat ( org.springframework.data.jpa.repository.support.JPQLQuery<org.springframework.data.jpa.repository.support.User> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.support.JPQLQuery<org.springframework.data.jpa.repository.support.User> . toString ( ) , is ( not ( anyOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ) ) ; }  <METHOD_END>
