<METHOD_START> @ Test public void void ( ) { PersistentEntitySpec . assertInvariants ( org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> ( Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new BasicPersistentEntity < java.lang.Object , T > ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> ( Person .class , null ) . addPersistentProperty ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntity < org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity , T > org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity,T> = org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity,T> ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; assertThat ( org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity,T> . getTypeAlias ( ) ) . isEqualTo ( Alias . NONE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntity < org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasedEntity , T > org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasedEntity,T> = org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasedEntity,T> ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasedEntity .class ) ; assertThat ( org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasedEntity,T> . getTypeAlias ( ) ) . isEqualTo ( Alias . of ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { BasicPersistentEntity < Person , T > org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> = org.springframework.data.mapping.model.BasicPersistentEntity ( Person .class , java.util.Comparator . java.util.Comparator ( PersistentProperty :: getName ) ) ; T T = ( T ) Mockito . mock ( PersistentProperty .class ) ; when ( T . getName ( ) ) . thenReturn ( STRING ) ; T T = ( T ) Mockito . mock ( PersistentProperty .class ) ; when ( T . getName ( ) ) . thenReturn ( STRING ) ; T T = ( T ) Mockito . mock ( PersistentProperty .class ) ; when ( T . getName ( ) ) . thenReturn ( STRING ) ; org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> . addPersistentProperty ( T ) ; org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> . addPersistentProperty ( T ) ; org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> . addPersistentProperty ( T ) ; org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> . verify ( ) ; java.util.List<T> < T > java.util.List<T> = ( java.util.List<T> < T > ) ReflectionTestUtils . getField ( org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> , STRING ) ; assertThat ( java.util.List<T> ) . hasSize ( NUMBER ) ; java.util.Iterator<T> < T > java.util.Iterator<T> = java.util.List<T> . java.util.Iterator<T> ( ) ; assertThat ( org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> . getPersistentProperty ( STRING ) ) . hasValue ( java.util.Iterator<T> . T ( ) ) ; assertThat ( org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> . getPersistentProperty ( STRING ) ) . hasValue ( java.util.Iterator<T> . T ( ) ) ; assertThat ( org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> . getPersistentProperty ( STRING ) ) . hasValue ( java.util.Iterator<T> . T ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePersistentEntity < Person , T > org.springframework.data.mapping.model.MutablePersistentEntity<org.springframework.data.mapping.model.Person,T> = org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> ( Person .class ) ; assertThat ( org.springframework.data.mapping.model.MutablePersistentEntity<org.springframework.data.mapping.model.Person,T> . getIdProperty ( ) ) . isNotPresent ( ) ; when ( T . isIdProperty ( ) ) . thenReturn ( true ) ; org.springframework.data.mapping.model.MutablePersistentEntity<org.springframework.data.mapping.model.Person,T> . addPersistentProperty ( T ) ; assertThat ( org.springframework.data.mapping.model.MutablePersistentEntity<org.springframework.data.mapping.model.Person,T> . getIdProperty ( ) ) . hasValue ( T ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePersistentEntity < Person , T > org.springframework.data.mapping.model.MutablePersistentEntity<org.springframework.data.mapping.model.Person,T> = org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.Person,T> ( Person .class ) ; when ( T . isIdProperty ( ) ) . thenReturn ( true ) ; when ( T . isIdProperty ( ) ) . thenReturn ( true ) ; org.springframework.data.mapping.model.MutablePersistentEntity<org.springframework.data.mapping.model.Person,T> . addPersistentProperty ( T ) ; org.springframework.data.mapping.model.ExpectedException . expect ( MappingException .class ) ; org.springframework.data.mapping.model.MutablePersistentEntity<org.springframework.data.mapping.model.Person,T> . addPersistentProperty ( T ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SampleMappingContext org.springframework.data.mapping.model.SampleMappingContext = new SampleMappingContext ( ) ; PersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> < SamplePersistentProperty > java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPersistentProperty ( LastModifiedBy .class ) ; assertThat ( java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> ) . hasValueSatisfying ( it -> assertThat ( it . getName ( ) ) . isEqualTo ( STRING ) ) ; java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPersistentProperty ( CreatedBy .class ) ; assertThat ( java.util.Optional<org.springframework.data.mapping.model.SamplePersistentProperty> ) . hasValueSatisfying ( it -> assertThat ( it . getName ( ) ) . isEqualTo ( STRING ) ) ; assertThat ( org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPersistentProperty ( CreatedDate .class ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assumeThat ( java.lang.System . java.lang.String ( STRING ) , CoreMatchers . startsWith ( STRING ) ) ; SampleMappingContext org.springframework.data.mapping.model.SampleMappingContext = new SampleMappingContext ( ) ; PersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity = new org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity ( ) ; PersistentPropertyAccessor org.springframework.data.mapping.model.PersistentPropertyAccessor = org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPropertyAccessor ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity ) ; assertThat ( org.springframework.data.mapping.model.PersistentPropertyAccessor ) . isInstanceOf ( BeanWrapper .class ) ; assertThat ( org.springframework.data.mapping.model.PersistentPropertyAccessor . getBean ( ) ) . isEqualTo ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SampleMappingContext org.springframework.data.mapping.model.SampleMappingContext = new SampleMappingContext ( ) ; PersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity = new org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity ( ) ; PersistentPropertyAccessor org.springframework.data.mapping.model.PersistentPropertyAccessor = org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPropertyAccessor ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity ) ; assertThat ( org.springframework.data.mapping.model.PersistentPropertyAccessor ) . isNotInstanceOf ( BeanWrapper .class ) ; assertThat ( org.springframework.data.mapping.model.PersistentPropertyAccessor . getClass ( ) . getName ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.mapping.model.PersistentPropertyAccessor . getBean ( ) ) . isEqualTo ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SampleMappingContext org.springframework.data.mapping.model.SampleMappingContext = new SampleMappingContext ( ) ; PersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPropertyAccessor ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SampleMappingContext org.springframework.data.mapping.model.SampleMappingContext = new SampleMappingContext ( ) ; PersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPropertyAccessor ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SampleMappingContext org.springframework.data.mapping.model.SampleMappingContext = new SampleMappingContext ( ) ; PersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; assertThat ( org.springframework.data.mapping.model.PersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPropertyAccessor ( new org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Subtype ( ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntity < org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasEntityUsingComposedAnnotation , T > org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasEntityUsingComposedAnnotation,T> = org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasEntityUsingComposedAnnotation,T> ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasEntityUsingComposedAnnotation .class ) ; assertThat ( org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.AliasEntityUsingComposedAnnotation,T> . getTypeAlias ( ) ) . isEqualTo ( Alias . of ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntity < org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity , T > org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity,T> = org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity,T> ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; org.springframework.data.mapping.model.ExpectedException . expectMessage ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class . java.lang.String ( ) ) ; org.springframework.data.mapping.model.ExpectedException . expectMessage ( java.lang.Object .class . java.lang.String ( ) ) ; org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity,T> . getPropertyAccessor ( new java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MutablePersistentEntity < org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity , T > org.springframework.data.mapping.model.MutablePersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity,T> = org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity,T> ( org.springframework.data.mapping.model.BasicPersistentEntityUnitTests.Entity .class ) ; assertThatExceptionOfType ( java.lang.IllegalArgumentException .class ) . isThrownBy ( ( ) entity . addAssociation ( null ) ) ; }  <METHOD_END>
<METHOD_START> private < S > org.springframework.data.mapping.model.BasicPersistentEntity<S,T> < S , T > org.springframework.data.mapping.model.BasicPersistentEntity<S,T> ( java.lang.Class<S> < S > java.lang.Class<S> ) { return org.springframework.data.mapping.model.BasicPersistentEntity<S,T> ( java.lang.Class<S> , null ) ; }  <METHOD_END>
<METHOD_START> private < S > org.springframework.data.mapping.model.BasicPersistentEntity<S,T> < S , T > org.springframework.data.mapping.model.BasicPersistentEntity<S,T> ( java.lang.Class<S> < S > java.lang.Class<S> , java.util.Comparator<T> < T > java.util.Comparator<T> ) { return new BasicPersistentEntity <> ( ClassTypeInformation . from ( java.lang.Class<S> ) , java.util.Optional . java.util.Optional<java.util.Comparator<T>> ( java.util.Comparator<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ CreatedBy public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
