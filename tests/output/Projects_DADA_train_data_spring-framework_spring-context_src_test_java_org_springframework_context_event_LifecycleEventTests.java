<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.context.event.StaticApplicationContext . registerSingleton ( STRING , org.springframework.context.event.LifecycleEventTests.LifecycleTestBean .class ) ; org.springframework.context.event.StaticApplicationContext . registerSingleton ( STRING , org.springframework.context.event.LifecycleEventTests.LifecycleListener .class ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; org.springframework.context.event.LifecycleEventTests.LifecycleTestBean org.springframework.context.event.LifecycleEventTests.LifecycleTestBean = ( org.springframework.context.event.LifecycleEventTests.LifecycleTestBean ) org.springframework.context.event.StaticApplicationContext . getBean ( STRING ) ; org.springframework.context.event.LifecycleEventTests.LifecycleListener org.springframework.context.event.LifecycleEventTests.LifecycleListener = ( org.springframework.context.event.LifecycleEventTests.LifecycleListener ) org.springframework.context.event.StaticApplicationContext . getBean ( STRING ) ; assertFalse ( org.springframework.context.event.LifecycleEventTests.LifecycleTestBean . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.context.event.LifecycleEventTests.LifecycleListener . int ( ) ) ; org.springframework.context.event.StaticApplicationContext . start ( ) ; assertTrue ( org.springframework.context.event.LifecycleEventTests.LifecycleTestBean . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.context.event.LifecycleEventTests.LifecycleListener . int ( ) ) ; assertSame ( org.springframework.context.event.StaticApplicationContext , org.springframework.context.event.LifecycleEventTests.LifecycleListener . org.springframework.context.event.ApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.context.event.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.context.event.StaticApplicationContext . registerSingleton ( STRING , org.springframework.context.event.LifecycleEventTests.LifecycleTestBean .class ) ; org.springframework.context.event.StaticApplicationContext . registerSingleton ( STRING , org.springframework.context.event.LifecycleEventTests.LifecycleListener .class ) ; org.springframework.context.event.StaticApplicationContext . refresh ( ) ; org.springframework.context.event.LifecycleEventTests.LifecycleTestBean org.springframework.context.event.LifecycleEventTests.LifecycleTestBean = ( org.springframework.context.event.LifecycleEventTests.LifecycleTestBean ) org.springframework.context.event.StaticApplicationContext . getBean ( STRING ) ; org.springframework.context.event.LifecycleEventTests.LifecycleListener org.springframework.context.event.LifecycleEventTests.LifecycleListener = ( org.springframework.context.event.LifecycleEventTests.LifecycleListener ) org.springframework.context.event.StaticApplicationContext . getBean ( STRING ) ; assertFalse ( org.springframework.context.event.LifecycleEventTests.LifecycleTestBean . boolean ( ) ) ; org.springframework.context.event.StaticApplicationContext . start ( ) ; assertTrue ( org.springframework.context.event.LifecycleEventTests.LifecycleTestBean . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.context.event.LifecycleEventTests.LifecycleListener . int ( ) ) ; org.springframework.context.event.StaticApplicationContext . stop ( ) ; assertFalse ( org.springframework.context.event.LifecycleEventTests.LifecycleTestBean . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.context.event.LifecycleEventTests.LifecycleListener . int ( ) ) ; assertSame ( org.springframework.context.event.StaticApplicationContext , org.springframework.context.event.LifecycleEventTests.LifecycleListener . org.springframework.context.event.ApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) { if ( org.springframework.context.event.ApplicationEvent instanceof ContextStartedEvent ) { this . org.springframework.context.event.ApplicationContext = ( ( ContextStartedEvent ) org.springframework.context.event.ApplicationEvent ) . getApplicationContext ( ) ; this . int ++ ; } else if ( org.springframework.context.event.ApplicationEvent instanceof ContextStoppedEvent ) { this . org.springframework.context.event.ApplicationContext = ( ( ContextStoppedEvent ) org.springframework.context.event.ApplicationEvent ) . getApplicationContext ( ) ; this . int ++ ; } }  <METHOD_END>
<METHOD_START> public org.springframework.context.event.ApplicationContext org.springframework.context.event.ApplicationContext ( ) { return this . org.springframework.context.event.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; }  <METHOD_END>
