<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { GraphLookupOperation . builder ( ) . from ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GraphLookupOperation org.springframework.data.mongodb.core.aggregation.GraphLookupOperation = GraphLookupOperation . builder ( ) . from ( STRING ) . startWith ( STRING ) . connectFrom ( STRING ) . connectTo ( STRING ) . depthField ( STRING ) . maxDepth ( NUMBER ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.GraphLookupOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GraphLookupOperation org.springframework.data.mongodb.core.aggregation.GraphLookupOperation = GraphLookupOperation . builder ( ) . from ( STRING ) . startWith ( STRING ) . connectFrom ( STRING ) . connectTo ( STRING ) . restrict ( Criteria . where ( STRING ) . is ( STRING ) ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.GraphLookupOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GraphLookupOperation org.springframework.data.mongodb.core.aggregation.GraphLookupOperation = GraphLookupOperation . builder ( ) . from ( STRING ) . startWith ( STRING , STRING ) . connectFrom ( STRING ) . connectTo ( STRING ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.GraphLookupOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GraphLookupOperation org.springframework.data.mongodb.core.aggregation.GraphLookupOperation = GraphLookupOperation . builder ( ) . from ( STRING ) . startWith ( STRING , LiteralOperators . Literal . asLiteral ( STRING ) ) . connectFrom ( STRING ) . connectTo ( STRING ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.GraphLookupOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { GraphLookupOperation org.springframework.data.mongodb.core.aggregation.GraphLookupOperation = GraphLookupOperation . builder ( ) . from ( STRING ) . startWith ( STRING , new Person ( ) ) . connectFrom ( STRING ) . connectTo ( STRING ) . as ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GraphLookupOperation org.springframework.data.mongodb.core.aggregation.GraphLookupOperation = GraphLookupOperation . builder ( ) . from ( STRING ) . startWith ( LiteralOperators . Literal . asLiteral ( STRING ) ) . connectFrom ( STRING ) . connectTo ( STRING ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.GraphLookupOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING ) ) ) ; }  <METHOD_END>
