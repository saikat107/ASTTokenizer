<METHOD_START> @ Before public void void ( ) { org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setCacheResolver ( defaultCacheResolver ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setExceptionCacheResolver ( defaultExceptionCacheResolver ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setKeyGenerator ( defaultKeyGenerator ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setBeanFactory ( org.springframework.cache.jcache.interceptor.DefaultListableBeanFactory ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = T ( CacheResultOperation .class , java.lang.String .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation ) ; assertNull ( STRING , org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = T ( CacheResultOperation .class , java.lang.String .class , boolean .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation ) ; assertEquals ( defaultExceptionCacheResolver , org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) ) ; assertEquals ( STRING , org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CachePutOperation org.springframework.cache.jcache.interceptor.CachePutOperation = T ( CachePutOperation .class , java.lang.String .class , java.lang.Object .class ) ; void ( org.springframework.cache.jcache.interceptor.CachePutOperation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheRemoveOperation org.springframework.cache.jcache.interceptor.CacheRemoveOperation = T ( CacheRemoveOperation .class , java.lang.String .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheRemoveOperation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheRemoveAllOperation org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation = T ( CacheRemoveAllOperation .class ) ; assertEquals ( defaultCacheResolver , org.springframework.cache.jcache.interceptor.CacheRemoveAllOperation . getCacheResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( AnnotatedJCacheableService .class , name . getMethodName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { thrown . expect ( java.lang.IllegalStateException .class ) ; org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( org.springframework.cache.jcache.interceptor.AnnotationCacheOperationSourceTests.InvalidCases .class , name . getMethodName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Object .class , STRING ) ; assertEquals ( STRING , org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . determineCacheName ( java.lang.reflect.Method , null , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Object .class , STRING ) ; CacheDefaults org.springframework.cache.jcache.interceptor.CacheDefaults = mock ( CacheDefaults .class ) ; given ( org.springframework.cache.jcache.interceptor.CacheDefaults . cacheName ( ) ) . willReturn ( STRING ) ; assertEquals ( STRING , org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . determineCacheName ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheDefaults , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Object .class , STRING ) ; assertEquals ( STRING , org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . determineCacheName ( java.lang.reflect.Method , null , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.util.Comparator .class , STRING , java.lang.Object .class , java.lang.Object .class ) ; assertEquals ( STRING , org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . determineCacheName ( java.lang.reflect.Method , null , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.JCacheOperation ( CacheResultOperation .class , org.springframework.cache.jcache.interceptor.AnnotationCacheOperationSourceTests.CustomService .class , name . getMethodName ( ) , java.lang.Long .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getCacheResolver ( ) , TestableCacheResolver .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) , null ) ; assertEquals ( KeyGeneratorAdapter .class , org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyGenerator ( ) . getClass ( ) ) ; assertEquals ( defaultKeyGenerator , ( ( KeyGeneratorAdapter ) org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyGenerator ( ) ) . getTarget ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.JCacheOperation ( CacheResultOperation .class , org.springframework.cache.jcache.interceptor.AnnotationCacheOperationSourceTests.CustomService .class , name . getMethodName ( ) , java.lang.Long .class ) ; assertEquals ( defaultCacheResolver , org.springframework.cache.jcache.interceptor.CacheResultOperation . getCacheResolver ( ) ) ; assertNull ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyGenerator ( ) , TestableCacheKeyGenerator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestableCacheKeyGenerator org.springframework.cache.jcache.interceptor.TestableCacheKeyGenerator = new TestableCacheKeyGenerator ( ) ; org.springframework.cache.jcache.interceptor.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.cache.jcache.interceptor.TestableCacheKeyGenerator ) ; CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.JCacheOperation ( CacheResultOperation .class , org.springframework.cache.jcache.interceptor.AnnotationCacheOperationSourceTests.CustomService .class , name . getMethodName ( ) , java.lang.Long .class ) ; assertEquals ( defaultCacheResolver , org.springframework.cache.jcache.interceptor.CacheResultOperation . getCacheResolver ( ) ) ; assertNull ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) ) ; KeyGeneratorAdapter org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter = ( KeyGeneratorAdapter ) org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyGenerator ( ) ; assertSame ( org.springframework.cache.jcache.interceptor.TestableCacheKeyGenerator , org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter . getTarget ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.JCacheOperation ( CacheResultOperation .class , org.springframework.cache.jcache.interceptor.AnnotationCacheOperationSourceTests.CustomServiceWithDefaults .class , name . getMethodName ( ) , java.lang.Long .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getCacheResolver ( ) , TestableCacheResolver .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) , null ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyGenerator ( ) , TestableCacheKeyGenerator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = org.springframework.cache.jcache.interceptor.JCacheOperation ( CacheResultOperation .class , org.springframework.cache.jcache.interceptor.AnnotationCacheOperationSourceTests.CustomServiceWithDefaults .class , name . getMethodName ( ) , java.lang.Long .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getCacheResolver ( ) , TestableCacheResolver .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getExceptionCacheResolver ( ) , TestableCacheResolver .class ) ; void ( org.springframework.cache.jcache.interceptor.CacheResultOperation . getKeyGenerator ( ) , TestableCacheKeyGenerator .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractJCacheKeyOperation < ? > org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation<?> ) { assertEquals ( defaultCacheResolver , org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation<> . getCacheResolver ( ) ) ; assertEquals ( KeyGeneratorAdapter .class , org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation<> . getKeyGenerator ( ) . getClass ( ) ) ; assertEquals ( defaultKeyGenerator , ( ( KeyGeneratorAdapter ) org.springframework.cache.jcache.interceptor.AbstractJCacheKeyOperation<> . getKeyGenerator ( ) ) . getTarget ( ) ) ; }  <METHOD_END>
<METHOD_START> protected < T extends org.springframework.cache.jcache.interceptor.JCacheOperation<?> < ? > > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return org.springframework.cache.jcache.interceptor.JCacheOperation ( java.lang.Class<T> , AnnotatedJCacheableService .class , name . getMethodName ( ) , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> protected < T extends org.springframework.cache.jcache.interceptor.JCacheOperation<?> < ? > > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { JCacheOperation < ? > org.springframework.cache.jcache.interceptor.JCacheOperation<?> = org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.Class<> , java.lang.String , java.lang.Class<?>[] ) ; assertNotNull ( org.springframework.cache.jcache.interceptor.JCacheOperation<> ) ; assertEquals ( java.lang.Class<T> , org.springframework.cache.jcache.interceptor.JCacheOperation<> . getClass ( ) ) ; return java.lang.Class<T> . T ( org.springframework.cache.jcache.interceptor.JCacheOperation<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.jcache.interceptor.JCacheOperation<?> < ? > org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<> , java.lang.String , java.lang.Class<?>[] ) ; Assert . notNull ( java.lang.reflect.Method , STRING + java.lang.String + STRING ) ; return org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . getCacheOperation ( java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver , java.lang.Class<? extends javax.cache.annotation.CacheResolver> < ? extends javax . javax.cache . javax.cache . javax.cache > java.lang.Class<? extends javax.cache.annotation.CacheResolver> ) { if ( java.lang.Class<> == null ) { assertNull ( org.springframework.cache.jcache.interceptor.CacheResolver ) ; } else { assertEquals ( STRING , CacheResolverAdapter .class , org.springframework.cache.jcache.interceptor.CacheResolver . getClass ( ) ) ; CacheResolverAdapter org.springframework.cache.jcache.interceptor.CacheResolverAdapter = ( CacheResolverAdapter ) org.springframework.cache.jcache.interceptor.CacheResolver ; assertEquals ( STRING , java.lang.Class<> , org.springframework.cache.jcache.interceptor.CacheResolverAdapter . getTarget ( ) . getClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator , java.lang.Class<? extends org.springframework.cache.jcache.interceptor.CacheKeyGenerator> < ? extends CacheKeyGenerator > java.lang.Class<? extends org.springframework.cache.jcache.interceptor.CacheKeyGenerator> ) { assertEquals ( STRING , KeyGeneratorAdapter .class , org.springframework.cache.jcache.interceptor.KeyGenerator . getClass ( ) ) ; KeyGeneratorAdapter org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter = ( KeyGeneratorAdapter ) org.springframework.cache.jcache.interceptor.KeyGenerator ; assertEquals ( STRING , java.lang.Class<> , org.springframework.cache.jcache.interceptor.KeyGeneratorAdapter . getTarget ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ CacheResult ( cacheKeyGenerator = TestableCacheKeyGenerator .class ) public java.lang.Object java.lang.Object ( java.lang.Long java.lang.Long ) { return null ; }  <METHOD_END>
<METHOD_START> @ CacheResult ( cacheKeyGenerator = TestableCacheKeyGenerator .class ) public java.lang.Object java.lang.Object ( java.lang.Long java.lang.Long ) { return null ; }  <METHOD_END>
<METHOD_START> @ CacheResult ( cacheResolverFactory = TestableCacheResolverFactory .class ) public java.lang.Object java.lang.Object ( java.lang.Long java.lang.Long ) { return null ; }  <METHOD_END>
<METHOD_START> @ CacheResult public java.lang.Object java.lang.Object ( java.lang.Long java.lang.Long ) { return null ; }  <METHOD_END>
<METHOD_START> @ CacheResult ( exceptionCacheName = STRING ) public java.lang.Object java.lang.Object ( java.lang.Long java.lang.Long ) { return null ; }  <METHOD_END>
<METHOD_START> @ CacheRemove @ CacheRemoveAll public void void ( ) {		}  <METHOD_END>
