<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.boot.test.context.ImportsContextCustomizer.ContextCustomizerKey = new org.springframework.boot.test.context.ImportsContextCustomizer.ContextCustomizerKey ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.test.context.ConfigurableApplicationContext , MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { BeanDefinitionRegistry org.springframework.boot.test.context.BeanDefinitionRegistry = org.springframework.boot.test.context.BeanDefinitionRegistry ( org.springframework.boot.test.context.ConfigurableApplicationContext ) ; AnnotatedBeanDefinitionReader org.springframework.boot.test.context.AnnotatedBeanDefinitionReader = new AnnotatedBeanDefinitionReader ( org.springframework.boot.test.context.BeanDefinitionRegistry ) ; void ( org.springframework.boot.test.context.BeanDefinitionRegistry , org.springframework.boot.test.context.AnnotatedBeanDefinitionReader ) ; void ( org.springframework.boot.test.context.BeanDefinitionRegistry , org.springframework.boot.test.context.AnnotatedBeanDefinitionReader ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.boot.test.context.BeanDefinitionRegistry , AnnotatedBeanDefinitionReader org.springframework.boot.test.context.AnnotatedBeanDefinitionReader ) { BeanDefinition org.springframework.boot.test.context.BeanDefinition = org.springframework.boot.test.context.BeanDefinition ( org.springframework.boot.test.context.BeanDefinitionRegistry , org.springframework.boot.test.context.AnnotatedBeanDefinitionReader , org.springframework.boot.test.context.ImportsContextCustomizer.ImportsCleanupPostProcessor . java.lang.String , org.springframework.boot.test.context.ImportsContextCustomizer.ImportsCleanupPostProcessor .class ) ; org.springframework.boot.test.context.BeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , this . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.boot.test.context.BeanDefinitionRegistry , AnnotatedBeanDefinitionReader org.springframework.boot.test.context.AnnotatedBeanDefinitionReader ) { BeanDefinition org.springframework.boot.test.context.BeanDefinition = org.springframework.boot.test.context.BeanDefinition ( org.springframework.boot.test.context.BeanDefinitionRegistry , org.springframework.boot.test.context.AnnotatedBeanDefinitionReader , org.springframework.boot.test.context.ImportsContextCustomizer.ImportsConfiguration . java.lang.String , org.springframework.boot.test.context.ImportsContextCustomizer.ImportsConfiguration .class ) ; org.springframework.boot.test.context.BeanDefinition . setAttribute ( java.lang.String , this . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.context.BeanDefinitionRegistry org.springframework.boot.test.context.BeanDefinitionRegistry ( ApplicationContext org.springframework.boot.test.context.ApplicationContext ) { if ( org.springframework.boot.test.context.ApplicationContext instanceof BeanDefinitionRegistry ) { return ( BeanDefinitionRegistry ) org.springframework.boot.test.context.ApplicationContext ; } if ( org.springframework.boot.test.context.ApplicationContext instanceof AbstractApplicationContext ) { return ( BeanDefinitionRegistry ) ( ( AbstractApplicationContext ) org.springframework.boot.test.context.ApplicationContext ) . getBeanFactory ( ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.boot.test.context.BeanDefinition org.springframework.boot.test.context.BeanDefinition ( BeanDefinitionRegistry org.springframework.boot.test.context.BeanDefinitionRegistry , AnnotatedBeanDefinitionReader org.springframework.boot.test.context.AnnotatedBeanDefinitionReader , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.boot.test.context.AnnotatedBeanDefinitionReader . registerBean ( java.lang.Class<> , java.lang.String ) ; BeanDefinition org.springframework.boot.test.context.BeanDefinition = org.springframework.boot.test.context.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; return org.springframework.boot.test.context.BeanDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.boot.test.context.ImportsContextCustomizer.ContextCustomizerKey . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( java.lang.Object == null || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) != java.lang.Class<? extends org.springframework.boot.test.context.ImportsContextCustomizer> ( ) ) { return false ; } org.springframework.boot.test.context.ImportsContextCustomizer org.springframework.boot.test.context.ImportsContextCustomizer = ( org.springframework.boot.test.context.ImportsContextCustomizer ) java.lang.Object ; return this . org.springframework.boot.test.context.ImportsContextCustomizer.ContextCustomizerKey . boolean ( org.springframework.boot.test.context.ImportsContextCustomizer . org.springframework.boot.test.context.ImportsContextCustomizer.ContextCustomizerKey ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return new ToStringCreator ( this ) . append ( STRING , this . org.springframework.boot.test.context.ImportsContextCustomizer.ContextCustomizerKey ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.test.context.BeanFactory ) throws org.springframework.boot.test.context.BeansException { this . org.springframework.boot.test.context.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.boot.test.context.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.boot.test.context.AnnotationMetadata ) { BeanDefinition org.springframework.boot.test.context.BeanDefinition = this . org.springframework.boot.test.context.ConfigurableListableBeanFactory . getBeanDefinition ( org.springframework.boot.test.context.ImportsContextCustomizer.ImportsConfiguration . java.lang.String ) ; java.lang.Object java.lang.Object = ( org.springframework.boot.test.context.BeanDefinition == null ? null : org.springframework.boot.test.context.BeanDefinition . getAttribute ( java.lang.String ) ) ; return ( java.lang.Object == null ? java.lang.String[] : new java.lang.String [] { ( ( java.lang.Class<?> < ? > ) java.lang.Object ) . java.lang.String ( ) } ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.boot.test.context.ConfigurableListableBeanFactory )				throws org.springframework.boot.test.context.BeansException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionRegistry org.springframework.boot.test.context.BeanDefinitionRegistry )				throws org.springframework.boot.test.context.BeansException { try { java.lang.String [] java.lang.String[] = org.springframework.boot.test.context.BeanDefinitionRegistry . getBeanDefinitionNames ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { BeanDefinition org.springframework.boot.test.context.BeanDefinition = org.springframework.boot.test.context.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; if ( this . java.lang.Class<> . java.lang.String ( ) . boolean ( org.springframework.boot.test.context.BeanDefinition . getBeanClassName ( ) ) ) { org.springframework.boot.test.context.BeanDefinitionRegistry . removeBeanDefinition ( java.lang.String ) ; } } org.springframework.boot.test.context.BeanDefinitionRegistry . removeBeanDefinition ( org.springframework.boot.test.context.ImportsContextCustomizer.ImportsConfiguration . java.lang.String ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.test.context.NoSuchBeanDefinitionException ) {			} }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = new java.util.HashSet<java.lang.annotation.Annotation> <> ( ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> <> ( ) ; void ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , java.util.Set<java.lang.Class<?>> ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = java.util.Set<java.lang.Object> ( java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<> ) ; this . java.util.Set<java.lang.Object> = java.util.Collections .< java.lang.Object > java.util.Set<java.lang.Object> ( java.util.Set<java.lang.Object> != null ? java.util.Set<java.lang.Object> : java.util.Set<java.lang.annotation.Annotation> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ) { if ( java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ) { void ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , java.util.Set<java.lang.Class<?>> ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { void ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , java.util.Set<java.lang.Class<?>> ) ; } if ( java.lang.Class<> . java.lang.Class<? super > ( ) != null ) { void ( java.lang.Class<> . java.lang.Class<? super > ( ) , java.util.Set<java.lang.annotation.Annotation> , java.util.Set<java.lang.Class<?>> ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) ) { if ( ! boolean ( java.lang.annotation.Annotation ) ) { java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ; void ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) , java.util.Set<java.lang.annotation.Annotation> , java.util.Set<java.lang.Class<?>> ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { for ( org.springframework.boot.test.context.ImportsContextCustomizer.AnnotationFilter org.springframework.boot.test.context.ImportsContextCustomizer.AnnotationFilter : java.util.Set<org.springframework.boot.test.context.ImportsContextCustomizer.AnnotationFilter> ) { if ( org.springframework.boot.test.context.ImportsContextCustomizer.AnnotationFilter . boolean ( java.lang.annotation.Annotation ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ( java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.LinkedHashSet<java.lang.Object> <> ( ) ; AnnotationMetadata org.springframework.boot.test.context.AnnotationMetadata = new StandardAnnotationMetadata ( java.lang.Class<> ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.util.Set<java.lang.annotation.Annotation> ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ( java.lang.annotation.Annotation ) ) { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = java.util.Set<java.lang.Object> ( java.lang.Class<> , org.springframework.boot.test.context.AnnotationMetadata ) ; if ( java.util.Set<java.lang.Object> == null ) { return null ; } java.util.Set<java.lang.Object> . boolean ( java.util.Set<java.lang.Object> ) ; } } return java.util.Set<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { if ( java.lang.annotation.Annotation instanceof Import ) { return ( ( Import ) java.lang.annotation.Annotation ) . value ( ) ; } return java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> , AnnotationMetadata org.springframework.boot.test.context.AnnotationMetadata ) { if ( DeterminableImports .class . boolean ( java.lang.Class<> ) ) { return ( ( DeterminableImports ) instantiate ( java.lang.Class<> ) ) . determineImports ( org.springframework.boot.test.context.AnnotationMetadata ) ; } if ( ImportSelector .class . boolean ( java.lang.Class<> ) || ImportBeanDefinitionRegistrar .class . boolean ( java.lang.Class<> ) ) { return null ; } return java.util.Collections .< java.lang.Object > java.util.Set<java.lang.Object> ( java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { try { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.Class<T> . java.lang.reflect.Constructor<T> ( ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Constructor<> ) ; return ( T ) java.lang.reflect.Constructor<> . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<T> . java.lang.String ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Set<java.lang.Object> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object != null && java.lang.Class<? extends org.springframework.boot.test.context.ImportsContextCustomizer.ContextCustomizerKey> ( ) . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) && this . java.util.Set<java.lang.Object> . boolean ( ( ( org.springframework.boot.test.context.ImportsContextCustomizer.ContextCustomizerKey ) java.lang.Object ) . java.util.Set<java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.util.Set<java.lang.Object> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation );  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.annotation.Annotation ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return STRING . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) || boolean ( java.lang.annotation.Annotation ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( STRING ) || java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
