<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.webmvc.KeyValueMappingContext<?,?> = new KeyValueMappingContext <> ( ) ; this . org.springframework.data.rest.webmvc.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.KeyValueMappingContext<,> . getRequiredPersistentEntity ( org.springframework.data.rest.webmvc.AssociationLinksUnitTests.Sample .class ) ; this . org.springframework.data.rest.webmvc.ResourceMappings = new PersistentEntitiesResourceMappings ( new PersistentEntities ( java.util.Arrays . java.util.List ( org.springframework.data.rest.webmvc.KeyValueMappingContext<,> ) ) ) ; this . org.springframework.data.rest.webmvc.Associations = new Associations ( org.springframework.data.rest.webmvc.ResourceMappings , org.springframework.data.rest.webmvc.RepositoryRestConfiguration ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Associations ( null , mock ( RepositoryRestConfiguration .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Associations ( org.springframework.data.rest.webmvc.ResourceMappings , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( java.lang.IllegalArgumentException .class ) . isThrownBy ( ( ) { links . isLinkableAssociation ( ( PersistentProperty < ? > ) null ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.rest.webmvc.Associations . isLinkableAssociation ( org.springframework.data.rest.webmvc.PersistentEntity<,> . getRequiredPersistentProperty ( STRING ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentProperty < ? > org.springframework.data.rest.webmvc.PersistentProperty<?> = org.springframework.data.rest.webmvc.PersistentEntity<,> . getRequiredPersistentProperty ( STRING ) ; java.util.List<org.springframework.data.rest.webmvc.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.Link> = org.springframework.data.rest.webmvc.Associations . getLinksFor ( org.springframework.data.rest.webmvc.PersistentProperty<> . getRequiredAssociation ( ) , new Path ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.rest.webmvc.Link> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.rest.webmvc.Link> ) . contains ( new Link ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentProperty < ? > org.springframework.data.rest.webmvc.PersistentProperty<?> = org.springframework.data.rest.webmvc.PersistentEntity<,> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.Associations . getLinksFor ( org.springframework.data.rest.webmvc.PersistentProperty<> . getRequiredAssociation ( ) , new Path ( STRING ) ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( true ) . when ( org.springframework.data.rest.webmvc.RepositoryRestConfiguration ) . isLookupType ( org.springframework.data.rest.webmvc.AssociationLinksUnitTests.Property .class ) ; assertThat ( org.springframework.data.rest.webmvc.Associations . isLookupType ( org.springframework.data.rest.webmvc.PersistentEntity<,> . getRequiredPersistentProperty ( STRING ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.rest.webmvc.Associations . getMetadataFor ( org.springframework.data.rest.webmvc.AssociationLinksUnitTests.Property .class ) ) . isEqualTo ( org.springframework.data.rest.webmvc.ResourceMappings . getMetadataFor ( org.springframework.data.rest.webmvc.AssociationLinksUnitTests.Property .class ) ) ; }  <METHOD_END>
