<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MimeType ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeType . valueOf ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeType . valueOf ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeType . valueOf ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeType . valueOf ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeType . valueOf ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MimeType org.springframework.util.MimeType = MimeType . valueOf ( java.lang.String ) ; assertEquals ( STRING , STRING , org.springframework.util.MimeType . getType ( ) ) ; assertEquals ( STRING , STRING , org.springframework.util.MimeType . getSubtype ( ) ) ; assertEquals ( STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset , org.springframework.util.MimeType . getCharset ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MimeType org.springframework.util.MimeType = MimeType . valueOf ( java.lang.String ) ; assertEquals ( STRING , STRING , org.springframework.util.MimeType . getType ( ) ) ; assertEquals ( STRING , STRING , org.springframework.util.MimeType . getSubtype ( ) ) ; assertEquals ( STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset , org.springframework.util.MimeType . getCharset ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MimeType org.springframework.util.MimeType = MimeType . valueOf ( java.lang.String ) ; assertEquals ( STRING , STRING , org.springframework.util.MimeType . getType ( ) ) ; assertEquals ( STRING , STRING , org.springframework.util.MimeType . getSubtype ( ) ) ; assertEquals ( STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset , org.springframework.util.MimeType . getCharset ( ) ) ; assertEquals ( STRING , org.springframework.util.MimeType . getParameter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConversionService org.springframework.util.ConversionService = new DefaultConversionService ( ) ; assertTrue ( org.springframework.util.ConversionService . canConvert ( java.lang.String .class , MimeType .class ) ) ; MimeType org.springframework.util.MimeType = MimeType . valueOf ( STRING ) ; assertEquals ( org.springframework.util.MimeType , org.springframework.util.ConversionService . convert ( STRING , MimeType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MimeType org.springframework.util.MimeType = MimeTypeUtils . TEXT_PLAIN ; assertTrue ( STRING , org.springframework.util.MimeType . includes ( org.springframework.util.MimeType ) ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING ) ; assertTrue ( STRING , org.springframework.util.MimeType . includes ( org.springframework.util.MimeType ) ) ; assertFalse ( STRING , org.springframework.util.MimeType . includes ( org.springframework.util.MimeType ) ) ; assertTrue ( STRING , MimeTypeUtils . ALL . includes ( org.springframework.util.MimeType ) ) ; assertFalse ( STRING , org.springframework.util.MimeType . includes ( MimeTypeUtils . ALL ) ) ; assertTrue ( STRING , MimeTypeUtils . ALL . includes ( org.springframework.util.MimeType ) ) ; assertFalse ( STRING , org.springframework.util.MimeType . includes ( MimeTypeUtils . ALL ) ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; assertTrue ( org.springframework.util.MimeType . includes ( org.springframework.util.MimeType ) ) ; assertTrue ( org.springframework.util.MimeType . includes ( org.springframework.util.MimeType ) ) ; assertTrue ( org.springframework.util.MimeType . includes ( org.springframework.util.MimeType ) ) ; assertFalse ( org.springframework.util.MimeType . includes ( org.springframework.util.MimeType ) ) ; assertFalse ( org.springframework.util.MimeType . includes ( MimeTypeUtils . APPLICATION_JSON ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MimeType org.springframework.util.MimeType = MimeTypeUtils . TEXT_PLAIN ; assertTrue ( STRING , org.springframework.util.MimeType . isCompatibleWith ( org.springframework.util.MimeType ) ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING ) ; assertTrue ( STRING , org.springframework.util.MimeType . isCompatibleWith ( org.springframework.util.MimeType ) ) ; assertTrue ( STRING , org.springframework.util.MimeType . isCompatibleWith ( org.springframework.util.MimeType ) ) ; assertTrue ( STRING , MimeTypeUtils . ALL . isCompatibleWith ( org.springframework.util.MimeType ) ) ; assertTrue ( STRING , org.springframework.util.MimeType . isCompatibleWith ( MimeTypeUtils . ALL ) ) ; assertTrue ( STRING , MimeTypeUtils . ALL . isCompatibleWith ( org.springframework.util.MimeType ) ) ; assertTrue ( STRING , org.springframework.util.MimeType . isCompatibleWith ( MimeTypeUtils . ALL ) ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; assertTrue ( org.springframework.util.MimeType . isCompatibleWith ( org.springframework.util.MimeType ) ) ; assertTrue ( org.springframework.util.MimeType . isCompatibleWith ( org.springframework.util.MimeType ) ) ; assertTrue ( org.springframework.util.MimeType . isCompatibleWith ( org.springframework.util.MimeType ) ) ; assertTrue ( org.springframework.util.MimeType . isCompatibleWith ( org.springframework.util.MimeType ) ) ; assertFalse ( org.springframework.util.MimeType . isCompatibleWith ( MimeTypeUtils . APPLICATION_JSON ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.util.MimeType . toString ( ) ; assertEquals ( STRING , STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MimeType org.springframework.util.MimeType = MimeTypeUtils . parseMimeType ( java.lang.String ) ; assertEquals ( STRING , STRING , org.springframework.util.MimeType . getType ( ) ) ; assertEquals ( STRING , STRING , org.springframework.util.MimeType . getSubtype ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) java.lang.Exception { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MimeType org.springframework.util.MimeType = MimeTypeUtils . parseMimeType ( STRING ) ; assertEquals ( STRING , org.springframework.util.MimeType . getParameter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MimeType org.springframework.util.MimeType = MimeTypeUtils . parseMimeType ( STRING ) ; assertEquals ( STRING , org.springframework.util.MimeType . getParameter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMimeTypeException .class ) public void void ( ) { MimeTypeUtils . parseMimeType ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.util.MimeType> < MimeType > java.util.List<org.springframework.util.MimeType> = MimeTypeUtils . parseMimeTypes ( java.lang.String ) ; assertNotNull ( STRING , java.util.List<org.springframework.util.MimeType> ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.util.MimeType> . size ( ) ) ; java.util.List<org.springframework.util.MimeType> = MimeTypeUtils . parseMimeTypes ( null ) ; assertNotNull ( STRING , java.util.List<org.springframework.util.MimeType> ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.util.MimeType> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING , java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) ) ; assertEquals ( STRING , NUMBER , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) ) ; assertEquals ( STRING , NUMBER , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) ) ; assertTrue ( STRING , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) > NUMBER ) ; java.util.List<org.springframework.util.MimeType> < MimeType > java.util.List<org.springframework.util.MimeType> = new java.util.ArrayList<org.springframework.util.MimeType> <> ( ) ; java.util.List<org.springframework.util.MimeType> . add ( org.springframework.util.MimeType ) ; java.util.List<org.springframework.util.MimeType> . add ( org.springframework.util.MimeType ) ; java.util.List<org.springframework.util.MimeType> . add ( org.springframework.util.MimeType ) ; java.util.List<org.springframework.util.MimeType> . add ( org.springframework.util.MimeType ) ; java.util.List<org.springframework.util.MimeType> < MimeType > java.util.List<org.springframework.util.MimeType> = new java.util.ArrayList <> ( java.util.List<org.springframework.util.MimeType> ) ; java.util.Random java.util.Random = new java.util.Random ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Collections . void ( java.util.List<org.springframework.util.MimeType> , java.util.Random ) ; java.util.Collections . void ( java.util.List<org.springframework.util.MimeType> ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.util.MimeType> . size ( ) ; int ++ ) { assertSame ( STRING + int + STRING + int , java.util.List<org.springframework.util.MimeType> . get ( int ) , java.util.List<org.springframework.util.MimeType> . get ( int ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) ) ; assertEquals ( STRING , NUMBER , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) ) ; org.springframework.util.MimeType = new MimeType ( STRING , STRING , java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.util.MimeType = new MimeType ( STRING , STRING , java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) ) ; assertEquals ( STRING , NUMBER , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) ) ; org.springframework.util.MimeType = new MimeType ( STRING , STRING , java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.util.MimeType = new MimeType ( STRING , STRING , java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertTrue ( STRING , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) != NUMBER ) ; assertTrue ( STRING , org.springframework.util.MimeType . compareTo ( org.springframework.util.MimeType ) != NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING , java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; MimeType org.springframework.util.MimeType = new MimeType ( STRING , STRING , java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertEquals ( org.springframework.util.MimeType , org.springframework.util.MimeType ) ; assertEquals ( org.springframework.util.MimeType , org.springframework.util.MimeType ) ; }  <METHOD_END>
