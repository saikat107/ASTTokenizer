<METHOD_START> @ Before public void void ( ) { this . org.springframework.scheduling.config.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParserTests .class ) ; this . org.springframework.scheduling.config.ScheduledTaskRegistrar = this . org.springframework.scheduling.config.ApplicationContext . getBeansOfType ( ScheduledTaskRegistrar .class ) . values ( ) . iterator ( ) . next ( ) ; this . java.lang.Object = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = this . org.springframework.scheduling.config.ApplicationContext . getBean ( STRING ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( this . org.springframework.scheduling.config.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.config.IntervalTask> = ( java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( this . org.springframework.scheduling.config.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; java.lang.Runnable java.lang.Runnable = java.util.List<org.springframework.scheduling.config.IntervalTask> . get ( NUMBER ) . getRunnable ( ) ; assertEquals ( ScheduledMethodRunnable .class , java.lang.Runnable . java.lang.Class<? extends java.lang.Runnable> ( ) ) ; java.lang.Object java.lang.Object = ( ( ScheduledMethodRunnable ) java.lang.Runnable ) . getTarget ( ) ; java.lang.reflect.Method java.lang.reflect.Method = ( ( ScheduledMethodRunnable ) java.lang.Runnable ) . getMethod ( ) ; assertEquals ( this . java.lang.Object , java.lang.Object ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.config.IntervalTask> = ( java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( this . org.springframework.scheduling.config.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . size ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . get ( NUMBER ) . getInterval ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . get ( NUMBER ) . getInterval ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . get ( NUMBER ) . getInterval ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . get ( NUMBER ) . getInitialDelay ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > java.util.List<org.springframework.scheduling.config.IntervalTask> = ( java.util.List<org.springframework.scheduling.config.IntervalTask> < IntervalTask > ) new DirectFieldAccessor ( this . org.springframework.scheduling.config.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . size ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . get ( NUMBER ) . getInterval ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . get ( NUMBER ) . getInterval ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.IntervalTask> . get ( NUMBER ) . getInitialDelay ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.scheduling.config.CronTask> < CronTask > java.util.List<org.springframework.scheduling.config.CronTask> = ( java.util.List<org.springframework.scheduling.config.CronTask> < CronTask > ) new DirectFieldAccessor ( this . org.springframework.scheduling.config.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.CronTask> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.scheduling.config.CronTask> . get ( NUMBER ) . getExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.scheduling.config.TriggerTask> < TriggerTask > java.util.List<org.springframework.scheduling.config.TriggerTask> = ( java.util.List<org.springframework.scheduling.config.TriggerTask> < TriggerTask > ) new DirectFieldAccessor ( this . org.springframework.scheduling.config.ScheduledTaskRegistrar ) . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.scheduling.config.TriggerTask> . size ( ) ) ; assertThat ( java.util.List<org.springframework.scheduling.config.TriggerTask> . get ( NUMBER ) . getTrigger ( ) , instanceOf ( org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParserTests.TestTrigger .class ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( TriggerContext org.springframework.scheduling.config.TriggerContext ) { return null ; }  <METHOD_END>
