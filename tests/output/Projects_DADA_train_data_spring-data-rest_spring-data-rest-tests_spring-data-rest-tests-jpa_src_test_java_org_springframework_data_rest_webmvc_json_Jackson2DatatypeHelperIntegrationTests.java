<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.webmvc.json.Order = org.springframework.data.rest.webmvc.json.OrderRepository . save ( new Order ( org.springframework.data.rest.webmvc.json.PersonRepository . save ( new Person ( STRING , STRING ) ) ) ) ; org.springframework.data.rest.webmvc.json.EntityManager . flush ( ) ; org.springframework.data.rest.webmvc.json.EntityManager . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.json.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.json.PersistentEntities . getRequiredPersistentEntity ( Order .class ) ; PersistentProperty < ? > org.springframework.data.rest.webmvc.json.PersistentProperty<?> = org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getRequiredPersistentProperty ( STRING ) ; PersistentPropertyAccessor org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor = org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getPropertyAccessor ( org.springframework.data.rest.webmvc.json.OrderRepository . findOne ( this . org.springframework.data.rest.webmvc.json.Order . getId ( ) ) . orElse ( null ) ) ; assertThat ( org.springframework.data.rest.webmvc.json.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.json.PersistentPropertyAccessor . getProperty ( org.springframework.data.rest.webmvc.json.PersistentProperty<> ) ) ) . isNotEqualTo ( STRING ) ; }  <METHOD_END>
