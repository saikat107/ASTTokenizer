<METHOD_START> public static boolean boolean ( ) { return java.util.Arrays . java.util.stream.Stream<org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary> ( org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary . org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary[] ( ) ) . boolean ( org.springframework.data.repository.util.ReactiveWrappers :: boolean ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary ) { Assert . notNull ( org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary , STRING ) ; switch ( org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary ) { case org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary : return boolean ; case org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary : return boolean ; case org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary : return boolean ; default: throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.repository.util.ReactiveWrappers.ReactiveLibrary ) ) ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( ClassUtils . getUserClass ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.util.Arrays . java.util.stream.Stream<java.lang.reflect.Method> ( java.lang.Class<> . java.lang.reflect.Method[] ( ) ) . java.util.stream.Stream ( ReflectionUtils :: returnTypeAndParameters ) . anyMatch ( org.springframework.data.repository.util.ReactiveWrappers :: boolean ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.util.Optional<org.springframework.data.repository.util.ReactiveTypeDescriptor> ( java.lang.Class<> ) . map ( ReactiveTypeDescriptor :: isNoValue ) . orElse ( false ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.util.Optional<org.springframework.data.repository.util.ReactiveTypeDescriptor> ( java.lang.Class<> ) . map ( it -> ! it . isMultiValue ( ) && ! it . isNoValue ( ) ) . orElse ( false ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return boolean ( java.lang.Class<> ) ? false : java.util.Optional<org.springframework.data.repository.util.ReactiveTypeDescriptor> ( java.lang.Class<> ) . map ( ReactiveTypeDescriptor :: isMultiValue ) . orElse ( false ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collection<org.springframework.data.repository.util.ReactiveTypeDescriptor> . stream ( ) . filter ( ReactiveTypeDescriptor :: isNoValue ) . map ( ReactiveTypeDescriptor :: getReactiveType ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collection<org.springframework.data.repository.util.ReactiveTypeDescriptor> . stream ( ) . filter ( entry -> ! entry . isMultiValue ( ) ) . map ( ReactiveTypeDescriptor :: getReactiveType ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collection<org.springframework.data.repository.util.ReactiveTypeDescriptor> . stream ( ) . filter ( ReactiveTypeDescriptor :: isMultiValue ) . map ( ReactiveTypeDescriptor :: getReactiveType ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return boolean ( java.lang.Class<> ) || boolean ( java.lang.Class<> ) || boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<org.springframework.data.repository.util.ReactiveTypeDescriptor> < ReactiveTypeDescriptor > java.util.Optional<org.springframework.data.repository.util.ReactiveTypeDescriptor> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.util.Collection<org.springframework.data.repository.util.ReactiveTypeDescriptor> . stream ( ) . filter ( it -> ClassUtils . isAssignable ( it . getReactiveType ( ) , type ) ) . findFirst ( ) ; }  <METHOD_END>
