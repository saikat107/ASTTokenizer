<METHOD_START> public org.springframework.boot.cli.command.options.OptionSpecBuilder org.springframework.boot.cli.command.options.OptionSpecBuilder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.boot.cli.command.options.OptionParser ( ) . accepts ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.cli.command.options.OptionSpecBuilder org.springframework.boot.cli.command.options.OptionSpecBuilder ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , java.lang.String java.lang.String ) { return org.springframework.boot.cli.command.options.OptionParser ( ) . acceptsAll ( java.util.Collection<java.lang.String> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.cli.command.options.OptionParser org.springframework.boot.cli.command.options.OptionParser ( ) { if ( this . org.springframework.boot.cli.command.options.OptionParser == null ) { this . org.springframework.boot.cli.command.options.OptionParser = new OptionParser ( ) ; void ( ) ; } return this . org.springframework.boot.cli.command.options.OptionParser ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> public final org.springframework.boot.cli.command.options.ExitStatus org.springframework.boot.cli.command.options.ExitStatus ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { java.lang.String [] java.lang.String[] = java.lang.String[] . java.lang.Object ( ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { if ( STRING . boolean ( java.lang.String[] [ int ] ) ) { java.lang.String[] [ int ] = STRING ; } } OptionSet org.springframework.boot.cli.command.options.OptionSet = org.springframework.boot.cli.command.options.OptionParser ( ) . parse ( java.lang.String[] ) ; return org.springframework.boot.cli.command.options.ExitStatus ( org.springframework.boot.cli.command.options.OptionSet ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.cli.command.options.ExitStatus org.springframework.boot.cli.command.options.ExitStatus ( OptionSet org.springframework.boot.cli.command.options.OptionSet ) throws java.lang.Exception { return ExitStatus . OK ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( this . java.lang.String == null ) { org.springframework.boot.cli.command.options.OptionParser ( ) . formatHelpWith ( new BuiltinHelpFormatter ( NUMBER , NUMBER ) ) ; java.io.OutputStream java.io.OutputStream = new java.io.ByteArrayOutputStream ( ) ; try { org.springframework.boot.cli.command.options.OptionParser ( ) . printHelpOn ( java.io.OutputStream ) ; } catch ( java.io.IOException java.io.IOException ) { return STRING ; } this . java.lang.String = java.io.OutputStream . java.lang.String ( ) . java.lang.String ( STRING , STRING ) ; } return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.cli.command.options.OptionHelp> < OptionHelp > java.util.Collection<org.springframework.boot.cli.command.options.OptionHelp> ( ) { if ( this . java.util.Collection<org.springframework.boot.cli.command.options.OptionHelp> == null ) { org.springframework.boot.cli.command.options.OptionHandler.OptionHelpFormatter org.springframework.boot.cli.command.options.OptionHandler.OptionHelpFormatter = new org.springframework.boot.cli.command.options.OptionHandler.OptionHelpFormatter ( ) ; org.springframework.boot.cli.command.options.OptionParser ( ) . formatHelpWith ( org.springframework.boot.cli.command.options.OptionHandler.OptionHelpFormatter ) ; try { org.springframework.boot.cli.command.options.OptionParser ( ) . printHelpOn ( new java.io.ByteArrayOutputStream ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } this . java.util.Collection<org.springframework.boot.cli.command.options.OptionHelp> = org.springframework.boot.cli.command.options.OptionHandler.OptionHelpFormatter . java.util.Collection<org.springframework.boot.cli.command.options.OptionHelp> ( ) ; } return this . java.util.Collection<org.springframework.boot.cli.command.options.OptionHelp> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.util.Map<java.lang.String,? extends org.springframework.boot.cli.command.options.OptionDescriptor> < java.lang.String , ? extends OptionDescriptor > java.util.Map<java.lang.String,? extends org.springframework.boot.cli.command.options.OptionDescriptor> ) { java.util.Comparator<org.springframework.boot.cli.command.options.OptionDescriptor> < OptionDescriptor > java.util.Comparator<org.springframework.boot.cli.command.options.OptionDescriptor> = new java.util.Comparator<org.springframework.boot.cli.command.options.OptionDescriptor> < OptionDescriptor > ( ) { @ java.lang.Override public int int ( OptionDescriptor org.springframework.boot.cli.command.options.OptionDescriptor , OptionDescriptor org.springframework.boot.cli.command.options.OptionDescriptor ) { return org.springframework.boot.cli.command.options.OptionDescriptor . options ( ) . iterator ( ) . next ( ) . compareTo ( org.springframework.boot.cli.command.options.OptionDescriptor . options ( ) . iterator ( ) . next ( ) ) ; } } ; java.util.Set<org.springframework.boot.cli.command.options.OptionDescriptor> < OptionDescriptor > java.util.Set<org.springframework.boot.cli.command.options.OptionDescriptor> = new java.util.TreeSet <> ( java.util.Comparator<org.springframework.boot.cli.command.options.OptionDescriptor> ) ; java.util.Set<org.springframework.boot.cli.command.options.OptionDescriptor> . addAll ( java.util.Map<java.lang.String,> . java.util.Collection<> ( ) ) ; for ( OptionDescriptor org.springframework.boot.cli.command.options.OptionDescriptor : java.util.Set<org.springframework.boot.cli.command.options.OptionDescriptor> ) { if ( ! org.springframework.boot.cli.command.options.OptionDescriptor . representsNonOptions ( ) ) { this . java.util.List<org.springframework.boot.cli.command.options.OptionHelp> . add ( new org.springframework.boot.cli.command.options.OptionHandler.OptionHelpAdapter ( org.springframework.boot.cli.command.options.OptionDescriptor ) ) ; } } return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( OptionDescriptor org.springframework.boot.cli.command.options.OptionDescriptor , OptionDescriptor org.springframework.boot.cli.command.options.OptionDescriptor ) { return org.springframework.boot.cli.command.options.OptionDescriptor . options ( ) . iterator ( ) . next ( ) . compareTo ( org.springframework.boot.cli.command.options.OptionDescriptor . options ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.boot.cli.command.options.OptionHelp> < OptionHelp > java.util.Collection<org.springframework.boot.cli.command.options.OptionHelp> ( ) { return java.util.Collections . java.util.List ( this . java.util.List<org.springframework.boot.cli.command.options.OptionHelp> ) ; }  <METHOD_END>
<METHOD_START> void ( OptionDescriptor org.springframework.boot.cli.command.options.OptionDescriptor ) { this . java.util.LinkedHashSet<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : org.springframework.boot.cli.command.options.OptionDescriptor . options ( ) ) { this . java.util.LinkedHashSet<java.lang.String> . boolean ( ( java.lang.String . int ( ) == NUMBER ? STRING : STRING ) + java.lang.String ) ; } if ( this . java.util.LinkedHashSet<java.lang.String> . boolean ( STRING ) ) { this . java.util.LinkedHashSet<java.lang.String> . boolean ( STRING ) ; this . java.util.LinkedHashSet<java.lang.String> . boolean ( STRING ) ; } this . java.lang.String = org.springframework.boot.cli.command.options.OptionDescriptor . description ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.LinkedHashSet<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
