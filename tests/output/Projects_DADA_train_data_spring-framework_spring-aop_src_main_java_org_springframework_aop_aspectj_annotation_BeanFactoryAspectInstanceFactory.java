<METHOD_START> public void ( BeanFactory org.springframework.aop.aspectj.annotation.BeanFactory , java.lang.String java.lang.String ) { this( org.springframework.aop.aspectj.annotation.BeanFactory , java.lang.String , org.springframework.aop.aspectj.annotation.BeanFactory . getType ( java.lang.String ) ); }  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.aop.aspectj.annotation.BeanFactory , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.aop.aspectj.annotation.BeanFactory , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.aop.aspectj.annotation.BeanFactory = org.springframework.aop.aspectj.annotation.BeanFactory ; this . java.lang.String = java.lang.String ; this . org.springframework.aop.aspectj.annotation.AspectMetadata = new AspectMetadata ( java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.aop.aspectj.annotation.BeanFactory . getBean ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return ( this . org.springframework.aop.aspectj.annotation.BeanFactory instanceof ConfigurableBeanFactory ? ( ( ConfigurableBeanFactory ) this . org.springframework.aop.aspectj.annotation.BeanFactory ) . getBeanClassLoader ( ) : ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.aspectj.annotation.AspectMetadata org.springframework.aop.aspectj.annotation.AspectMetadata ( ) { return this . org.springframework.aop.aspectj.annotation.AspectMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { if ( this . org.springframework.aop.aspectj.annotation.BeanFactory != null ) { if ( this . org.springframework.aop.aspectj.annotation.BeanFactory . isSingleton ( java.lang.String ) ) { return null ; } else if ( this . org.springframework.aop.aspectj.annotation.BeanFactory instanceof ConfigurableBeanFactory ) { return ( ( ConfigurableBeanFactory ) this . org.springframework.aop.aspectj.annotation.BeanFactory ) . getSingletonMutex ( ) ; } } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = this . org.springframework.aop.aspectj.annotation.BeanFactory . getType ( this . java.lang.String ) ; if ( java.lang.Class<> != null ) { if ( Ordered .class . boolean ( java.lang.Class<> ) && this . org.springframework.aop.aspectj.annotation.BeanFactory . isSingleton ( this . java.lang.String ) ) { return ( ( Ordered ) this . org.springframework.aop.aspectj.annotation.BeanFactory . getBean ( this . java.lang.String ) ) . getOrder ( ) ; } return OrderUtils . getOrder ( java.lang.Class<> , Ordered . LOWEST_PRECEDENCE ) ; } return Ordered . LOWEST_PRECEDENCE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory> ( ) . java.lang.String ( ) + STRING + this . java.lang.String + STRING ; }  <METHOD_END>
