<METHOD_START> @ Before public void void ( ) { org.springframework.integration.handler.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.handler.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.handler.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.handler.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; org.springframework.integration.handler.DelayHandler = new DelayHandler ( java.lang.String , org.springframework.integration.handler.ThreadPoolTaskScheduler ) ; org.springframework.integration.handler.DelayHandler . setOutputChannel ( org.springframework.integration.handler.DirectChannel ) ; org.springframework.integration.handler.DelayHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.DirectChannel . subscribe ( org.springframework.integration.handler.DelayHandler ) ; org.springframework.integration.handler.DirectChannel . subscribe ( org.springframework.integration.handler.DelayHandlerTests.ResultHandler ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.integration.handler.ThreadPoolTaskScheduler . destroy ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Expression org.springframework.integration.handler.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; this . org.springframework.integration.handler.DelayHandler . setDelayExpression ( org.springframework.integration.handler.Expression ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.integration.handler.DelayHandler . afterPropertiesSet ( ) ; org.springframework.integration.handler.DelayHandler . onApplicationEvent ( new ContextRefreshedEvent ( TestUtils . createTestApplicationContext ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . void ( ) ; this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . void ( ) ; this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , - NUMBER ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . void ( ) ; this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . void ( ) ; this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , new java.util.Date ( new java.util.Date ( ) . long ( ) + NUMBER ) ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . void ( ) ; this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , new java.util.Date ( new java.util.Date ( ) . long ( ) - NUMBER * NUMBER ) ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . void ( ) ; this . void ( ) ; java.util.Date java.util.Date = null ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.util.Date ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = org.springframework.integration.handler.DelayHandlerTests.TestTimedOutException .class ) public void void ( ) java.lang.Exception { this . void ( ) ; this . void ( ) ; java.util.Date java.util.Date = new java.util.Date ( new java.util.Date ( ) . long ( ) + NUMBER * NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.util.Date ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . void ( ) ; this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . void ( ) ; org.springframework.integration.handler.DelayHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.handler.ThreadPoolTaskScheduler . destroy ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; new java.lang.Thread ( ( ) { try { org.springframework.integration.handler.ThreadPoolTaskScheduler . getScheduledExecutor ( ) . awaitTermination ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } } ) . void ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; org.springframework.integration.handler.ThreadPoolTaskScheduler . setWaitForTasksToCompleteOnShutdown ( true ) ; this . void ( ) ; org.springframework.integration.handler.DelayHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.handler.ThreadPoolTaskScheduler . destroy ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; new java.lang.Thread ( ( ) { try { org.springframework.integration.handler.ThreadPoolTaskScheduler . getScheduledExecutor ( ) . awaitTermination ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } } ) . void ( ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) java.lang.Exception { this . void ( ) ; org.springframework.integration.handler.DirectChannel . unsubscribe ( org.springframework.integration.handler.DelayHandlerTests.ResultHandler ) ; org.springframework.integration.handler.DirectChannel . subscribe ( message -> { throw new UnsupportedOperationException ( STRING ) ; } ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.handler.DirectChannel = new DirectChannel ( ) ; MessagePublishingErrorHandler org.springframework.integration.handler.MessagePublishingErrorHandler = new MessagePublishingErrorHandler ( ) ; org.springframework.integration.handler.MessagePublishingErrorHandler . setDefaultErrorChannel ( org.springframework.integration.handler.DirectChannel ) ; org.springframework.integration.handler.ThreadPoolTaskScheduler . setErrorHandler ( org.springframework.integration.handler.MessagePublishingErrorHandler ) ; this . void ( ) ; this . void ( ) ; org.springframework.integration.handler.DirectChannel . unsubscribe ( org.springframework.integration.handler.DelayHandlerTests.ResultHandler ) ; org.springframework.integration.handler.DirectChannel . subscribe ( org.springframework.integration.handler.DelayHandlerTests.ResultHandler ) ; org.springframework.integration.handler.DirectChannel . subscribe ( message -> { throw new UnsupportedOperationException ( STRING ) ; } ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setErrorChannel ( org.springframework.integration.handler.DirectChannel ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> ; assertEquals ( MessageDeliveryException .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; MessageDeliveryException org.springframework.integration.handler.MessageDeliveryException = ( MessageDeliveryException ) org.springframework.integration.handler.Message<> . getPayload ( ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.MessageDeliveryException . getFailedMessage ( ) . getPayload ( ) ) ; assertEquals ( java.lang.UnsupportedOperationException .class , org.springframework.integration.handler.MessageDeliveryException . getCause ( ) . getClass ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; StaticApplicationContext org.springframework.integration.handler.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.integration.handler.StaticApplicationContext . registerSingleton ( java.lang.String , DirectChannel .class ) ; org.springframework.integration.handler.StaticApplicationContext . registerSingleton ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME , DirectChannel .class ) ; org.springframework.integration.handler.StaticApplicationContext . refresh ( ) ; DirectChannel org.springframework.integration.handler.DirectChannel = ( DirectChannel ) org.springframework.integration.handler.StaticApplicationContext . getBean ( java.lang.String ) ; MessagePublishingErrorHandler org.springframework.integration.handler.MessagePublishingErrorHandler = new MessagePublishingErrorHandler ( ) ; org.springframework.integration.handler.MessagePublishingErrorHandler . setBeanFactory ( org.springframework.integration.handler.StaticApplicationContext ) ; org.springframework.integration.handler.ThreadPoolTaskScheduler . setErrorHandler ( org.springframework.integration.handler.MessagePublishingErrorHandler ) ; this . void ( ) ; this . void ( ) ; org.springframework.integration.handler.DirectChannel . unsubscribe ( org.springframework.integration.handler.DelayHandlerTests.ResultHandler ) ; org.springframework.integration.handler.DirectChannel . subscribe ( org.springframework.integration.handler.DelayHandlerTests.ResultHandler ) ; org.springframework.integration.handler.DirectChannel . subscribe ( message -> { throw new UnsupportedOperationException ( STRING ) ; } ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setErrorChannelName ( java.lang.String ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> ; assertEquals ( MessageDeliveryException .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; MessageDeliveryException org.springframework.integration.handler.MessageDeliveryException = ( MessageDeliveryException ) org.springframework.integration.handler.Message<> . getPayload ( ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.MessageDeliveryException . getFailedMessage ( ) . getPayload ( ) ) ; assertEquals ( java.lang.UnsupportedOperationException .class , org.springframework.integration.handler.MessageDeliveryException . getCause ( ) . getClass ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.integration.handler.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.integration.handler.StaticApplicationContext . registerSingleton ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME , DirectChannel .class ) ; org.springframework.integration.handler.StaticApplicationContext . refresh ( ) ; DirectChannel org.springframework.integration.handler.DirectChannel = ( DirectChannel ) org.springframework.integration.handler.StaticApplicationContext . getBean ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME ) ; MessagePublishingErrorHandler org.springframework.integration.handler.MessagePublishingErrorHandler = new MessagePublishingErrorHandler ( ) ; org.springframework.integration.handler.MessagePublishingErrorHandler . setBeanFactory ( org.springframework.integration.handler.StaticApplicationContext ) ; org.springframework.integration.handler.ThreadPoolTaskScheduler . setErrorHandler ( org.springframework.integration.handler.MessagePublishingErrorHandler ) ; this . void ( ) ; this . void ( ) ; org.springframework.integration.handler.DirectChannel . unsubscribe ( org.springframework.integration.handler.DelayHandlerTests.ResultHandler ) ; org.springframework.integration.handler.DirectChannel . subscribe ( org.springframework.integration.handler.DelayHandlerTests.ResultHandler ) ; org.springframework.integration.handler.DirectChannel . subscribe ( message -> { throw new UnsupportedOperationException ( STRING ) ; } ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; void ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> ; assertEquals ( MessageDeliveryException .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; MessageDeliveryException org.springframework.integration.handler.MessageDeliveryException = ( MessageDeliveryException ) org.springframework.integration.handler.Message<> . getPayload ( ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , org.springframework.integration.handler.MessageDeliveryException . getFailedMessage ( ) . getPayload ( ) ) ; assertEquals ( java.lang.UnsupportedOperationException .class , org.springframework.integration.handler.MessageDeliveryException . getCause ( ) . getClass ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageGroupStore org.springframework.integration.handler.MessageGroupStore = new SimpleMessageStore ( ) ; this . org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . org.springframework.integration.handler.DelayHandler . setMessageStore ( org.springframework.integration.handler.MessageGroupStore ) ; this . void ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.handler.DirectChannel . send ( org.springframework.integration.handler.Message<> ) ; java.lang.Thread . void ( NUMBER ) ; this . org.springframework.integration.handler.ThreadPoolTaskScheduler . destroy ( ) ; assertEquals ( NUMBER , org.springframework.integration.handler.MessageGroupStore . getMessageGroupCount ( ) ) ; assertEquals ( java.lang.String , org.springframework.integration.handler.MessageGroupStore . iterator ( ) . next ( ) . getGroupId ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.handler.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.integration.handler.MessageGroupStore . getMessageCountForAllMessageGroups ( ) ) ; MessageGroup org.springframework.integration.handler.MessageGroup = org.springframework.integration.handler.MessageGroupStore . getMessageGroup ( java.lang.String ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.MessageGroup . getMessages ( ) . iterator ( ) . next ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.Message<> . getPayload ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; assertEquals ( org.springframework.integration.handler.Message<> . getPayload ( ) , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; this . org.springframework.integration.handler.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; this . org.springframework.integration.handler.DelayHandler = new DelayHandler ( java.lang.String , this . org.springframework.integration.handler.ThreadPoolTaskScheduler ) ; this . org.springframework.integration.handler.DelayHandler . setOutputChannel ( org.springframework.integration.handler.DirectChannel ) ; this . org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; this . org.springframework.integration.handler.DelayHandler . setMessageStore ( org.springframework.integration.handler.MessageGroupStore ) ; this . org.springframework.integration.handler.DelayHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; this . void ( ) ; void ( NUMBER ) ; assertSame ( org.springframework.integration.handler.Message<> . getPayload ( ) , this . org.springframework.integration.handler.DelayHandlerTests.ResultHandler . org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertNotSame ( java.lang.Thread . java.lang.Thread ( ) , this . org.springframework.integration.handler.DelayHandlerTests.ResultHandler . java.lang.Thread ) ; assertEquals ( NUMBER , org.springframework.integration.handler.MessageGroupStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.handler.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.handler.DelayHandler = Mockito . spy ( this . org.springframework.integration.handler.DelayHandler ) ; Mockito . doAnswer ( invocation -> null ) . when ( this . org.springframework.integration.handler.DelayHandler ) . reschedulePersistedMessages ( ) ; ContextRefreshedEvent org.springframework.integration.handler.ContextRefreshedEvent = new ContextRefreshedEvent ( TestUtils . createTestApplicationContext ( ) ) ; this . org.springframework.integration.handler.DelayHandler . onApplicationEvent ( org.springframework.integration.handler.ContextRefreshedEvent ) ; this . org.springframework.integration.handler.DelayHandler . onApplicationEvent ( org.springframework.integration.handler.ContextRefreshedEvent ) ; Mockito . verify ( this . org.springframework.integration.handler.DelayHandler , Mockito . times ( NUMBER ) ) . reschedulePersistedMessages ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { this . void ( ) ; this . org.springframework.integration.handler.DelayHandler . setIgnoreExpressionFailures ( false ) ; this . void ( ) ; this . org.springframework.integration.handler.DelayHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.handler.DelayHandler . setOutputChannel ( org.springframework.integration.handler.QueueChannel ) ; this . org.springframework.integration.handler.DelayHandler . setDefaultDelay ( NUMBER ) ; void ( ) ; this . org.springframework.integration.handler.DirectChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.handler.DelayHandler . reschedulePersistedMessages ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.handler.DelayHandler . setDelayExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; this . org.springframework.integration.handler.DelayHandler . setOutputChannel ( new DirectChannel ( ) ) ; this . org.springframework.integration.handler.DelayHandler . setIgnoreExpressionFailures ( false ) ; void ( ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; this . org.springframework.integration.handler.DelayHandler . handleMessage ( new GenericMessage <> ( java.util.Calendar . java.util.Date ( ) ) ) ; this . org.springframework.integration.handler.ThreadPoolTaskScheduler . destroy ( ) ; MessageGroupStore org.springframework.integration.handler.MessageGroupStore = TestUtils . getPropertyValue ( this . org.springframework.integration.handler.DelayHandler , STRING , MessageGroupStore .class ) ; MessageGroup org.springframework.integration.handler.MessageGroup = org.springframework.integration.handler.MessageGroupStore . getMessageGroup ( java.lang.String ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.MessageGroup . getMessages ( ) . iterator ( ) . next ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.handler.Message<> . getPayload ( ) ; DirectFieldAccessor org.springframework.integration.handler.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; long long = ( long ) org.springframework.integration.handler.DirectFieldAccessor . getPropertyValue ( STRING ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( long ) ; java.util.Calendar . void ( java.util.Calendar . int , - NUMBER ) ; org.springframework.integration.handler.DirectFieldAccessor . setPropertyValue ( STRING , java.util.Calendar . long ( ) ) ; this . org.springframework.integration.handler.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; this . org.springframework.integration.handler.DelayHandler . reschedulePersistedMessages ( ) ; java.lang.Thread . void ( NUMBER ) ; java.util.Queue<?> < ? > java.util.Queue<?> = TestUtils . getPropertyValue ( this . org.springframework.integration.handler.ThreadPoolTaskScheduler , STRING , java.util.Queue .class ) ; assertEquals ( NUMBER , java.util.Queue<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( long long ) { try { this . java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( java.util.concurrent.CountDownLatch . long ( ) != NUMBER ) { throw new org.springframework.integration.handler.DelayHandlerTests.TestTimedOutException ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.RuntimeException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.handler.Message<?> ) { this . org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.Message<> ; this . java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING ); }  <METHOD_END>
