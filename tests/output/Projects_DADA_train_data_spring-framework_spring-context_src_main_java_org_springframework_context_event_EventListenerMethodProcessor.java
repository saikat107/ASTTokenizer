<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.context.event.ApplicationContext ) throws org.springframework.context.event.BeansException { Assert . isTrue ( org.springframework.context.event.ApplicationContext instanceof ConfigurableApplicationContext , STRING ) ; this . org.springframework.context.event.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.context.event.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<org.springframework.context.event.EventListenerFactory> < EventListenerFactory > java.util.List<org.springframework.context.event.EventListenerFactory> = java.util.List<org.springframework.context.event.EventListenerFactory> ( ) ; java.lang.String [] java.lang.String[] = this . org.springframework.context.event.ConfigurableApplicationContext . getBeanNamesForType ( java.lang.Object .class ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! ScopedProxyUtils . isScopedTarget ( java.lang.String ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = null ; try { java.lang.Class<?> = AutoProxyUtils . determineTargetClass ( this . org.springframework.context.event.ConfigurableApplicationContext . getBeanFactory ( ) , java.lang.String ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.context.event.Log . isDebugEnabled ( ) ) { org.springframework.context.event.Log . debug ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } if ( java.lang.Class<> != null ) { if ( ScopedObject .class . boolean ( java.lang.Class<> ) ) { try { java.lang.Class<?> = AutoProxyUtils . determineTargetClass ( this . org.springframework.context.event.ConfigurableApplicationContext . getBeanFactory ( ) , ScopedProxyUtils . getTargetBeanName ( java.lang.String ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.context.event.Log . isDebugEnabled ( ) ) { org.springframework.context.event.Log . debug ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } } try { void ( java.util.List<org.springframework.context.event.EventListenerFactory> , java.lang.String , java.lang.Class<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanInitializationException ( STRING + STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } } } }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.context.event.EventListenerFactory> < EventListenerFactory > java.util.List<org.springframework.context.event.EventListenerFactory> ( ) { java.util.Map<java.lang.String,org.springframework.context.event.EventListenerFactory> < java.lang.String , EventListenerFactory > java.util.Map<java.lang.String,org.springframework.context.event.EventListenerFactory> = this . org.springframework.context.event.ConfigurableApplicationContext . getBeansOfType ( EventListenerFactory .class ) ; java.util.List<org.springframework.context.event.EventListenerFactory> < EventListenerFactory > java.util.List<org.springframework.context.event.EventListenerFactory> = new java.util.ArrayList <> ( java.util.Map<java.lang.String,org.springframework.context.event.EventListenerFactory> . values ( ) ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.context.event.EventListenerFactory> ) ; return java.util.List<org.springframework.context.event.EventListenerFactory> ; }  <METHOD_END>
<METHOD_START> protected void void ( final java.util.List<org.springframework.context.event.EventListenerFactory> < EventListenerFactory > java.util.List<org.springframework.context.event.EventListenerFactory> , final java.lang.String java.lang.String , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ! this . java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ) { java.util.Map<java.lang.reflect.Method,org.springframework.context.event.EventListener> < java.lang.reflect.Method , EventListener > java.util.Map<java.lang.reflect.Method,org.springframework.context.event.EventListener> = null ; try { java.util.Map<java.lang.reflect.Method,org.springframework.context.event.EventListener> = MethodIntrospector . selectMethods ( java.lang.Class<> , new MethodIntrospector . MethodIntrospector < EventListener > ( ) { @ Override public EventListener inspect ( Method method ) { return AnnotatedElementUtils . findMergedAnnotation ( method , EventListener .class ) ; } } ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.context.event.Log . isDebugEnabled ( ) ) { org.springframework.context.event.Log . debug ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } if ( CollectionUtils . isEmpty ( java.util.Map<java.lang.reflect.Method,org.springframework.context.event.EventListener> ) ) { this . java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; if ( org.springframework.context.event.Log . isTraceEnabled ( ) ) { org.springframework.context.event.Log . trace ( STRING + java.lang.Class<> . java.lang.String ( ) ) ; } } else { for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.Map<java.lang.reflect.Method,org.springframework.context.event.EventListener> . keySet ( ) ) { for ( EventListenerFactory org.springframework.context.event.EventListenerFactory : java.util.List<org.springframework.context.event.EventListenerFactory> ) { if ( org.springframework.context.event.EventListenerFactory . supportsMethod ( java.lang.reflect.Method ) ) { java.lang.reflect.Method java.lang.reflect.Method = AopUtils . selectInvocableMethod ( java.lang.reflect.Method , this . org.springframework.context.event.ConfigurableApplicationContext . getType ( java.lang.String ) ) ; ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> = org.springframework.context.event.EventListenerFactory . createApplicationListener ( java.lang.String , java.lang.Class<> , java.lang.reflect.Method ) ; if ( org.springframework.context.event.ApplicationListener<> instanceof ApplicationListenerMethodAdapter ) { ( ( ApplicationListenerMethodAdapter ) org.springframework.context.event.ApplicationListener<> ) . init ( this . org.springframework.context.event.ConfigurableApplicationContext , this . org.springframework.context.event.EventExpressionEvaluator ) ; } this . org.springframework.context.event.ConfigurableApplicationContext . addApplicationListener ( org.springframework.context.event.ApplicationListener<> ) ; break; } } } if ( org.springframework.context.event.Log . isDebugEnabled ( ) ) { org.springframework.context.event.Log . debug ( java.util.Map<java.lang.reflect.Method,org.springframework.context.event.EventListener> . size ( ) + STRING + java.lang.String + STRING + java.util.Map<java.lang.reflect.Method,org.springframework.context.event.EventListener> ) ; } } } }  <METHOD_END>
<METHOD_START> @ Override public EventListener inspect ( Method method ) { return AnnotatedElementUtils . findMergedAnnotation ( method , EventListener .class ) ; }  <METHOD_END>
