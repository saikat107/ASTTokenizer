<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer = ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer ) org.springframework.data.web.XmlBeamHttpMessageConverter . read ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer .class , org.springframework.data.web.HttpInputMessage ) ; assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer = ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer ) org.springframework.data.web.XmlBeamHttpMessageConverter . read ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer .class , org.springframework.data.web.HttpInputMessage ) ; assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverter . canRead ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer .class , MediaType . APPLICATION_XML ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverter . canRead ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer .class , MediaType . APPLICATION_ATOM_XML ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverter . canRead ( UnannotatedInterface .class , MediaType . APPLICATION_XML ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverter . canRead ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer .class , MediaType . APPLICATION_JSON ) ) . isFalse ( ) ; assertThat ( org.springframework.data.web.XmlBeamHttpMessageConverter . canRead ( org.springframework.data.web.XmlBeamHttpMessageConverterUnitTests.Customer .class , MediaType . APPLICATION_XML ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.io.IOException { when ( org.springframework.data.web.HttpInputMessage . getBody ( ) ) . thenReturn ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ XBRead ( STRING ) java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ XBRead ( STRING ) java.lang.String java.lang.String ( )  <METHOD_END>
