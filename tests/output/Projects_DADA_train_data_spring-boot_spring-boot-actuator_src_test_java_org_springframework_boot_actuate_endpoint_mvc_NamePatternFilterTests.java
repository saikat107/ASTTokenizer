<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter = new org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . getResults ( STRING ) ) . containsEntry ( STRING , STRING ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter = new org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . getResults ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter = new org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . getResults ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter = new org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . getResults ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter = new org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . getResults ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter = new org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . getResults ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.NamePatternFilterTests.MockNamePatternFilter . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( null ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , NameCallback org.springframework.boot.actuate.endpoint.mvc.NameCallback ) { this . boolean = true ; org.springframework.boot.actuate.endpoint.mvc.NameCallback . addName ( STRING ) ; org.springframework.boot.actuate.endpoint.mvc.NameCallback . addName ( STRING ) ; org.springframework.boot.actuate.endpoint.mvc.NameCallback . addName ( STRING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
