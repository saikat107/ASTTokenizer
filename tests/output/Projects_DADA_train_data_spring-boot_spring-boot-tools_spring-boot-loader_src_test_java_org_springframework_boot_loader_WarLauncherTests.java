<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = explode ( createJarArchive ( STRING , STRING ) ) ; WarLauncher org.springframework.boot.loader.WarLauncher = new WarLauncher ( new ExplodedArchive ( java.io.File , true ) ) ; java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> = org.springframework.boot.loader.WarLauncher . getClassPathArchives ( ) ; assertThat ( java.util.List<org.springframework.boot.loader.Archive> ) . hasSize ( NUMBER ) ; assertThat ( getUrls ( java.util.List<org.springframework.boot.loader.Archive> ) ) . containsOnly ( new java.io.File ( java.io.File , STRING ) . java.net.URI ( ) . java.net.URL ( ) , new java.net.URL ( STRING + new java.io.File ( java.io.File , STRING ) . java.net.URI ( ) . java.net.URL ( ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = createJarArchive ( STRING , STRING ) ; WarLauncher org.springframework.boot.loader.WarLauncher = new WarLauncher ( new JarFileArchive ( java.io.File ) ) ; java.util.List<org.springframework.boot.loader.Archive> < Archive > java.util.List<org.springframework.boot.loader.Archive> = org.springframework.boot.loader.WarLauncher . getClassPathArchives ( ) ; assertThat ( java.util.List<org.springframework.boot.loader.Archive> ) . hasSize ( NUMBER ) ; assertThat ( getUrls ( java.util.List<org.springframework.boot.loader.Archive> ) ) . containsOnly ( new java.net.URL ( STRING + java.io.File . java.net.URI ( ) . java.net.URL ( ) + STRING ) , new java.net.URL ( STRING + java.io.File . java.net.URI ( ) . java.net.URL ( ) + STRING ) ) ; }  <METHOD_END>
