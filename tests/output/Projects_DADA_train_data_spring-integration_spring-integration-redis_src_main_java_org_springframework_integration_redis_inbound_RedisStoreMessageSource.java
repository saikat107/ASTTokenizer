<METHOD_START> public void ( RedisTemplate < java.lang.String , ? > org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,?> , Expression org.springframework.integration.redis.inbound.Expression ) { Assert . notNull ( org.springframework.integration.redis.inbound.Expression , STRING ) ; Assert . notNull ( org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,> , STRING ) ; this . org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,?> = org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,> ; this . org.springframework.integration.redis.inbound.Expression = org.springframework.integration.redis.inbound.Expression ; }  <METHOD_END>
<METHOD_START> public void ( RedisConnectionFactory org.springframework.integration.redis.inbound.RedisConnectionFactory , Expression org.springframework.integration.redis.inbound.Expression ) { Assert . notNull ( org.springframework.integration.redis.inbound.Expression , STRING ) ; Assert . notNull ( org.springframework.integration.redis.inbound.RedisConnectionFactory , STRING ) ; StringRedisTemplate org.springframework.integration.redis.inbound.StringRedisTemplate = new StringRedisTemplate ( ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . setConnectionFactory ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . afterPropertiesSet ( ) ; this . org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,?> = org.springframework.integration.redis.inbound.StringRedisTemplate ; this . org.springframework.integration.redis.inbound.Expression = org.springframework.integration.redis.inbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( CollectionType org.springframework.integration.redis.inbound.CollectionType ) { this . org.springframework.integration.redis.inbound.CollectionType = org.springframework.integration.redis.inbound.CollectionType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisStore> < RedisStore > org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisStore> ( ) { java.lang.String java.lang.String = this . org.springframework.integration.redis.inbound.Expression . getValue ( this . org.springframework.integration.redis.inbound.StandardEvaluationContext , java.lang.String .class ) ; Assert . hasText ( java.lang.String , STRING ) ; RedisStore org.springframework.integration.redis.inbound.RedisStore = this . org.springframework.integration.redis.inbound.RedisStore ( java.lang.String ) ; java.lang.Object java.lang.Object = TransactionSynchronizationManager . getResource ( this ) ; if ( java.lang.Object != null ) { Assert . isInstanceOf ( IntegrationResourceHolder .class , java.lang.Object ) ; ( ( IntegrationResourceHolder ) java.lang.Object ) . addAttribute ( STRING , org.springframework.integration.redis.inbound.RedisStore ) ; } if ( org.springframework.integration.redis.inbound.RedisStore instanceof java.util.Collection<?> < ? > && ( ( java.util.Collection<java.lang.Object> < java.lang.Object > ) org.springframework.integration.redis.inbound.RedisStore ) . int ( ) < NUMBER ) { return null ; } else { return this . getMessageBuilderFactory ( ) . withPayload ( org.springframework.integration.redis.inbound.RedisStore ) . build ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.redis.inbound.RedisStore org.springframework.integration.redis.inbound.RedisStore ( java.lang.String java.lang.String ) { RedisCollectionFactoryBean org.springframework.integration.redis.inbound.RedisCollectionFactoryBean = new RedisCollectionFactoryBean ( ) ; org.springframework.integration.redis.inbound.RedisCollectionFactoryBean . setKey ( java.lang.String ) ; org.springframework.integration.redis.inbound.RedisCollectionFactoryBean . setTemplate ( this . org.springframework.integration.redis.inbound.RedisTemplate<java.lang.String,> ) ; org.springframework.integration.redis.inbound.RedisCollectionFactoryBean . setType ( this . org.springframework.integration.redis.inbound.CollectionType ) ; org.springframework.integration.redis.inbound.RedisCollectionFactoryBean . afterPropertiesSet ( ) ; return org.springframework.integration.redis.inbound.RedisCollectionFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.integration.redis.inbound.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.redis.inbound.RedisStore org.springframework.integration.redis.inbound.RedisStore ( ) { return this . java.lang.ThreadLocal<org.springframework.integration.redis.inbound.RedisStore> . get ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.ThreadLocal<org.springframework.integration.redis.inbound.RedisStore> . remove ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.ThreadLocal<org.springframework.integration.redis.inbound.RedisStore> . remove ( ) ; }  <METHOD_END>
