<METHOD_START> @ Before public void void ( ) { final java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> = new java.util.ArrayList<org.springframework.web.reactive.function.HttpMessageReader<?>> <> ( ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> . add ( new DecoderHttpMessageReader <> ( new ByteBufferDecoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> . add ( new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> . add ( new DecoderHttpMessageReader <> ( new Jaxb2XmlDecoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> . add ( new DecoderHttpMessageReader <> ( new Jackson2JsonDecoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> . add ( new FormHttpMessageReader ( ) ) ; this . BodyExtractor.Context = new BodyExtractor . BodyExtractor ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>>> ( ) { return java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> :: stream ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> < ServerHttpResponse > java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> ( ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; } } ; this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>>> ( ) { return java.util.List<org.springframework.web.reactive.function.HttpMessageReader<?>> :: stream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> < ServerHttpResponse > java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BodyExtractor < Mono < java.lang.String > , ReactiveHttpInputMessage > org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Mono<java.lang.String>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> = BodyExtractors . toMono ( java.lang.String .class ) ; DefaultDataBufferFactory org.springframework.web.reactive.function.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.DefaultDataBuffer = org.springframework.web.reactive.function.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.DefaultDataBuffer ) ; MockServerHttpRequest org.springframework.web.reactive.function.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . body ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) ; Mono < java.lang.String > org.springframework.web.reactive.function.Mono<java.lang.String> = org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Mono<java.lang.String>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> . extract ( org.springframework.web.reactive.function.MockServerHttpRequest , this . BodyExtractor.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<java.lang.String> ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BodyExtractor < Mono < org.springframework.web.reactive.function.BodyExtractorsTests.User > , ReactiveHttpInputMessage > org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Mono<org.springframework.web.reactive.function.BodyExtractorsTests.User>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> = BodyExtractors . toMono ( org.springframework.web.reactive.function.BodyExtractorsTests.User .class ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( JSON_VIEW_HINT , org.springframework.web.reactive.function.BodyExtractorsTests.SafeToDeserialize .class ) ; DefaultDataBufferFactory org.springframework.web.reactive.function.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.DefaultDataBuffer = org.springframework.web.reactive.function.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.DefaultDataBuffer ) ; MockServerHttpRequest org.springframework.web.reactive.function.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . body ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) ; Mono < org.springframework.web.reactive.function.BodyExtractorsTests.User > org.springframework.web.reactive.function.Mono<org.springframework.web.reactive.function.BodyExtractorsTests.User> = org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Mono<org.springframework.web.reactive.function.BodyExtractorsTests.User>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> . extract ( org.springframework.web.reactive.function.MockServerHttpRequest , this . BodyExtractor.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<org.springframework.web.reactive.function.BodyExtractorsTests.User> ) . consumeNextWith ( user -> { assertEquals ( STRING , user . getUsername ( ) ) ; assertNull ( user . getPassword ( ) ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BodyExtractor < Flux < java.lang.String > , ReactiveHttpInputMessage > org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Flux<java.lang.String>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> = BodyExtractors . toFlux ( java.lang.String .class ) ; DefaultDataBufferFactory org.springframework.web.reactive.function.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.DefaultDataBuffer = org.springframework.web.reactive.function.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.DefaultDataBuffer ) ; MockServerHttpRequest org.springframework.web.reactive.function.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . body ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) ; Flux < java.lang.String > org.springframework.web.reactive.function.Flux<java.lang.String> = org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Flux<java.lang.String>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> . extract ( org.springframework.web.reactive.function.MockServerHttpRequest , this . BodyExtractor.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Flux<java.lang.String> ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BodyExtractor < Flux < org.springframework.web.reactive.function.BodyExtractorsTests.User > , ReactiveHttpInputMessage > org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.BodyExtractorsTests.User>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> = BodyExtractors . toFlux ( org.springframework.web.reactive.function.BodyExtractorsTests.User .class ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( JSON_VIEW_HINT , org.springframework.web.reactive.function.BodyExtractorsTests.SafeToDeserialize .class ) ; DefaultDataBufferFactory org.springframework.web.reactive.function.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.DefaultDataBuffer = org.springframework.web.reactive.function.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.DefaultDataBuffer ) ; MockServerHttpRequest org.springframework.web.reactive.function.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . body ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) ; Flux < org.springframework.web.reactive.function.BodyExtractorsTests.User > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.BodyExtractorsTests.User> = org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.BodyExtractorsTests.User>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> . extract ( org.springframework.web.reactive.function.MockServerHttpRequest , this . BodyExtractor.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.BodyExtractorsTests.User> ) . consumeNextWith ( user -> { assertEquals ( STRING , user . getUsername ( ) ) ; assertNull ( user . getPassword ( ) ) ; } ) . consumeNextWith ( user -> { assertEquals ( STRING , user . getUsername ( ) ) ; assertNull ( user . getPassword ( ) ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BodyExtractor < Flux < java.lang.String > , ReactiveHttpInputMessage > org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Flux<java.lang.String>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> = BodyExtractors . toFlux ( java.lang.String .class ) ; DefaultDataBufferFactory org.springframework.web.reactive.function.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.DefaultDataBuffer = org.springframework.web.reactive.function.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.DefaultDataBuffer ) ; MockServerHttpRequest org.springframework.web.reactive.function.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . body ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) ; BodyExtractor . BodyExtractor BodyExtractor.Context = new BodyExtractor . BodyExtractor ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>>> ( ) { return java.util.stream.Stream :: java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>> ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> < ServerHttpResponse > java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> ( ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } } ; Flux < java.lang.String > org.springframework.web.reactive.function.Flux<java.lang.String> = org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Flux<java.lang.String>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> . extract ( org.springframework.web.reactive.function.MockServerHttpRequest , BodyExtractor.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Flux<java.lang.String> ) . expectError ( UnsupportedMediaTypeException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>>> ( ) { return java.util.stream.Stream :: java.util.stream.Stream<org.springframework.web.reactive.function.HttpMessageReader<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> < ServerHttpResponse > java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.ServerHttpResponse> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BodyExtractor < Mono < MultiValueMap < java.lang.String , java.lang.String > > , ServerHttpRequest > org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Mono<org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String>>,org.springframework.web.reactive.function.ServerHttpRequest> = BodyExtractors . toFormData ( ) ; DefaultDataBufferFactory org.springframework.web.reactive.function.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.DefaultDataBuffer = org.springframework.web.reactive.function.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.DefaultDataBuffer ) ; MockServerHttpRequest org.springframework.web.reactive.function.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . APPLICATION_FORM_URLENCODED ) . body ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) ; Mono < MultiValueMap < java.lang.String , java.lang.String > > org.springframework.web.reactive.function.Mono<org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String>> = org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Mono<org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String>>,org.springframework.web.reactive.function.ServerHttpRequest> . extract ( org.springframework.web.reactive.function.MockServerHttpRequest , this . BodyExtractor.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Mono<org.springframework.web.reactive.function.MultiValueMap<java.lang.String,java.lang.String>> ) . consumeNextWith ( form -> { assertEquals ( STRING , NUMBER , form . size ( ) ) ; assertEquals ( STRING , STRING , form . getFirst ( STRING ) ) ; List < String > values = form . get ( STRING ) ; assertEquals ( STRING , NUMBER , values . size ( ) ) ; assertEquals ( STRING , STRING , values . get ( NUMBER ) ) ; assertEquals ( STRING , STRING , values . get ( NUMBER ) ) ; assertNull ( STRING , form . getFirst ( STRING ) ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BodyExtractor < Flux < DataBuffer > , ReactiveHttpInputMessage > org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> = BodyExtractors . toDataBuffers ( ) ; DefaultDataBufferFactory org.springframework.web.reactive.function.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.DefaultDataBuffer = org.springframework.web.reactive.function.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.DefaultDataBuffer ) ; MockServerHttpRequest org.springframework.web.reactive.function.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . body ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) ; Flux < DataBuffer > org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> = org.springframework.web.reactive.function.BodyExtractor<org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer>,org.springframework.web.reactive.function.ReactiveHttpInputMessage> . extract ( org.springframework.web.reactive.function.MockServerHttpRequest , this . BodyExtractor.Context ) ; StepVerifier . create ( org.springframework.web.reactive.function.Flux<org.springframework.web.reactive.function.DataBuffer> ) . expectNext ( org.springframework.web.reactive.function.DefaultDataBuffer ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
