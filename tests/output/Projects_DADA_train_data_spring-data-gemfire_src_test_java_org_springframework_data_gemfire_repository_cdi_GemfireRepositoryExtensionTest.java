<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension = new GemfireRepositoryExtension ( ) ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.Set<T> < T > java.util.Set<T> ( T ... T[] ) { return new java.util.HashSet<T> < T > ( java.util.Arrays . java.util.List<T> ( T[] ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.annotation.Annotation java.lang.annotation.Annotation ( java.lang.Class java.lang.Class ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = mock ( java.lang.annotation.Annotation .class ) ; when ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) . thenReturn ( java.lang.Class ) ; return java.lang.annotation.Annotation ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProcessBean < Region > org.springframework.data.gemfire.repository.cdi.ProcessBean<org.springframework.data.gemfire.repository.cdi.Region> = mock ( ProcessBean .class ) ; Bean < Region > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> = mock ( Bean .class ) ; when ( org.springframework.data.gemfire.repository.cdi.ProcessBean<org.springframework.data.gemfire.repository.cdi.Region> . getBean ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> . getTypes ( ) ) . thenReturn ( java.util.Collections . java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) Region .class ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . regionBeans . isEmpty ( ) , is ( true ) ) ; org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . processBean ( org.springframework.data.gemfire.repository.cdi.ProcessBean<org.springframework.data.gemfire.repository.cdi.Region> ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . regionBeans . contains ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.ProcessBean<org.springframework.data.gemfire.repository.cdi.Region> , times ( NUMBER ) ) . getBean ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> , times ( NUMBER ) ) . getTypes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProcessBean < GemfireMappingContext > org.springframework.data.gemfire.repository.cdi.ProcessBean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> = mock ( ProcessBean .class ) ; Bean < GemfireMappingContext > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> = mock ( Bean .class ) ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = java.util.Set<java.lang.annotation.Annotation> ( java.lang.annotation.Annotation ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.SpringDataRepo .class ) , java.lang.annotation.Annotation ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.GemfireRepo .class ) ) ; when ( org.springframework.data.gemfire.repository.cdi.ProcessBean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> . getBean ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> . getTypes ( ) ) . thenReturn ( java.util.Collections . java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) GemfireMappingContext .class ) ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> . getQualifiers ( ) ) . thenReturn ( java.util.Set<java.lang.annotation.Annotation> ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . mappingContexts . isEmpty ( ) , is ( true ) ) ; org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . processBean ( org.springframework.data.gemfire.repository.cdi.ProcessBean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . mappingContexts . containsKey ( java.util.Set<java.lang.annotation.Annotation> ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . mappingContexts . get ( java.util.Set<java.lang.annotation.Annotation> ) , is ( equalTo ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.ProcessBean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> , times ( NUMBER ) ) . getBean ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> , times ( NUMBER ) ) . getTypes ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> , times ( NUMBER ) ) . getQualifiers ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProcessBean < java.lang.Object > org.springframework.data.gemfire.repository.cdi.ProcessBean<java.lang.Object> = mock ( ProcessBean .class ) ; Bean < java.lang.Object > org.springframework.data.gemfire.repository.cdi.Bean<java.lang.Object> = mock ( Bean .class ) ; when ( org.springframework.data.gemfire.repository.cdi.ProcessBean<java.lang.Object> . getBean ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.Bean<java.lang.Object> ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean<java.lang.Object> . getTypes ( ) ) . thenReturn ( java.util.Collections . java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) java.lang.Object .class ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . mappingContexts . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . regionBeans . isEmpty ( ) , is ( true ) ) ; org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . processBean ( org.springframework.data.gemfire.repository.cdi.ProcessBean<java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . mappingContexts . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . regionBeans . isEmpty ( ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.ProcessBean<java.lang.Object> , times ( NUMBER ) ) . getBean ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean<java.lang.Object> , times ( NUMBER ) ) . getTypes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AfterBeanDiscovery org.springframework.data.gemfire.repository.cdi.AfterBeanDiscovery = mock ( AfterBeanDiscovery .class ) ; final java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = java.util.Set<java.lang.annotation.Annotation> ( java.lang.annotation.Annotation ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.SpringDataRepo .class ) , java.lang.annotation.Annotation ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.GemfireRepo .class ) ) ; doAnswer ( new Answer < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.repository.cdi.InvocationOnMock ) throws java.lang.Throwable { GemfireRepositoryBean < ? > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<?> = org.springframework.data.gemfire.repository.cdi.InvocationOnMock . getArgument ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<> , is ( notNullValue ( ) ) ) ; assertThat ( ( java.lang.Class<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.TestRepository> < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.TestRepository > ) org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<> . getBeanClass ( ) , is ( equalTo ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.TestRepository .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<> . getQualifiers ( ) , is ( equalTo ( java.util.Set<java.lang.annotation.Annotation> ) ) ) ; return null ; } } ) . when ( org.springframework.data.gemfire.repository.cdi.AfterBeanDiscovery ) . addBean ( isA ( GemfireRepositoryBean .class ) ) ; GemfireRepositoryExtension org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension = new GemfireRepositoryExtension ( ) { @ java.lang.Override protected java.lang.Iterable<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> < java.util.Map . java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > > java.lang.Iterable<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> ( ) { return java.util.Collections .< java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.TestRepository .class , java.util.Set<java.lang.annotation.Annotation> ) . java.util.Set<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> ( ) ; } } ; org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtension . afterBeanDiscovery ( org.springframework.data.gemfire.repository.cdi.AfterBeanDiscovery , mock ( BeanManager .class ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.AfterBeanDiscovery , times ( NUMBER ) ) . addBean ( isA ( GemfireRepositoryBean .class ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.repository.cdi.InvocationOnMock ) throws java.lang.Throwable { GemfireRepositoryBean < ? > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<?> = org.springframework.data.gemfire.repository.cdi.InvocationOnMock . getArgument ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<> , is ( notNullValue ( ) ) ) ; assertThat ( ( java.lang.Class<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.TestRepository> < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.TestRepository > ) org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<> . getBeanClass ( ) , is ( equalTo ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.TestRepository .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<> . getQualifiers ( ) , is ( equalTo ( java.util.Set<java.lang.annotation.Annotation> ) ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Iterable<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> < java.util.Map . java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > > java.lang.Iterable<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> ( ) { return java.util.Collections .< java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryExtensionTest.TestRepository .class , java.util.Set<java.lang.annotation.Annotation> ) . java.util.Set<java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>>> ( ) ; }  <METHOD_END>
