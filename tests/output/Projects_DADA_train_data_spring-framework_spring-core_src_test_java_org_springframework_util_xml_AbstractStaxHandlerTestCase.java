<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.xml.sax.XMLReader = org . xml . sax . helpers . org.xml.sax.helpers.XMLReaderFactory . org.xml.sax.XMLReader ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . assumeTrue ( boolean ( ) ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; AbstractStaxHandler org.springframework.util.xml.AbstractStaxHandler = org.springframework.util.xml.AbstractStaxHandler ( new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ) ; org.xml.sax.XMLReader . void ( org.springframework.util.xml.AbstractStaxHandler ) ; org.xml.sax.XMLReader . void ( STRING , org.springframework.util.xml.AbstractStaxHandler ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( STRING , false ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; assertThat ( java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) . withNodeFilter ( org.springframework.util.xml.Predicate<org.w3c.dom.Node> ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( ) { try { new java.net.Socket ( STRING , NUMBER ) . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . assumeTrue ( boolean ( ) ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; AbstractStaxHandler org.springframework.util.xml.AbstractStaxHandler = org.springframework.util.xml.AbstractStaxHandler ( new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ) ; org.xml.sax.XMLReader . void ( org.springframework.util.xml.AbstractStaxHandler ) ; org.xml.sax.XMLReader . void ( STRING , org.springframework.util.xml.AbstractStaxHandler ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; assertThat ( java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) . withNodeFilter ( org.springframework.util.xml.Predicate<org.w3c.dom.Node> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilderFactory . void ( true ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; AbstractStaxHandler org.springframework.util.xml.AbstractStaxHandler = org.springframework.util.xml.AbstractStaxHandler ( new javax.xml.transform.dom.DOMResult ( org.w3c.dom.Document ) ) ; org.xml.sax.XMLReader . void ( org.springframework.util.xml.AbstractStaxHandler ) ; org.xml.sax.XMLReader . void ( STRING , org.springframework.util.xml.AbstractStaxHandler ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( STRING , false ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; assertThat ( org.w3c.dom.Document , isSimilarTo ( org.w3c.dom.Document ) . withNodeFilter ( org.springframework.util.xml.Predicate<org.w3c.dom.Node> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilderFactory . void ( true ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; AbstractStaxHandler org.springframework.util.xml.AbstractStaxHandler = org.springframework.util.xml.AbstractStaxHandler ( new javax.xml.transform.dom.DOMResult ( org.w3c.dom.Document ) ) ; org.xml.sax.XMLReader . void ( org.springframework.util.xml.AbstractStaxHandler ) ; org.xml.sax.XMLReader . void ( STRING , org.springframework.util.xml.AbstractStaxHandler ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( STRING , true ) ; org.xml.sax.XMLReader . void ( new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; assertThat ( org.w3c.dom.Document , isSimilarTo ( org.w3c.dom.Document ) . withNodeFilter ( org.springframework.util.xml.Predicate<org.w3c.dom.Node> ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.util.xml.AbstractStaxHandler org.springframework.util.xml.AbstractStaxHandler ( javax.xml.transform.Result javax.xml.transform.Result ) throws javax.xml.stream.XMLStreamException ;  <METHOD_END>
