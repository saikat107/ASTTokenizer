<METHOD_START> @ Before public void void ( ) java.lang.Exception { void ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new FileSystemWatcher ( true , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new FileSystemWatcher ( true , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; new FileSystemWatcher ( true , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addListener ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . start ( ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addListener ( mock ( FileChangeListener .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertThat ( java.io.File . boolean ( ) ) . isFalse ( ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING + java.io.File + STRING ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertThat ( java.io.File . boolean ( ) ) . isTrue ( ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( new java.io.File ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.filewatch.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.filewatch.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . start ( ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = java.io.File ( ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = org.springframework.boot.devtools.filewatch.ChangedFiles ( ) ; ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) ) . contains ( org.springframework.boot.devtools.filewatch.ChangedFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = java.io.File ( ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( new java.io.File ( java.io.File , STRING ) , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = org.springframework.boot.devtools.filewatch.ChangedFiles ( ) ; ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) ) . contains ( org.springframework.boot.devtools.filewatch.ChangedFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( NUMBER , NUMBER ) ; java.io.File java.io.File = java.io.File ( ) ; java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; while ( this . java.util.List<java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles>> . size ( ) != NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; assertThat ( this . java.util.List<java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles>> . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( NUMBER , NUMBER ) ; java.io.File java.io.File = java.io.File ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.io.File ( new java.io.File ( java.io.File , int + STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; } this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = org.springframework.boot.devtools.filewatch.ChangedFiles ( ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . start ( ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = org.springframework.boot.devtools.filewatch.ChangedFiles ( ) ; ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) ) . contains ( org.springframework.boot.devtools.filewatch.ChangedFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . start ( ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> = java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ( ) ; assertThat ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> . size ( ) ) . isEqualTo ( NUMBER ) ; for ( ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles : java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) { if ( org.springframework.boot.devtools.filewatch.ChangedFiles . getSourceFolder ( ) . equals ( java.io.File ) ) { ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) ) . containsOnly ( org.springframework.boot.devtools.filewatch.ChangedFile ) ; } else { ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) ) . containsOnly ( org.springframework.boot.devtools.filewatch.ChangedFile ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; final java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> = new java.util.LinkedHashSet<org.springframework.boot.devtools.filewatch.ChangedFiles> <> ( ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addListener ( new FileChangeListener ( ) { @ java.lang.Override public void void ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) { java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> . addAll ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) ; } } ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . start ( ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = org.springframework.boot.devtools.filewatch.ChangedFiles ( ) ; ChangedFile org.springframework.boot.devtools.filewatch.ChangedFile = new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ; assertThat ( org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) ) . contains ( org.springframework.boot.devtools.filewatch.ChangedFile ) ; assertThat ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) . isEqualTo ( this . java.util.List<java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles>> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) { java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> . addAll ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . start ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; java.io.File . boolean ( ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = org.springframework.boot.devtools.filewatch.ChangedFiles ( ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> < ChangedFile > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> = org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> < ChangedFile > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> = new java.util.HashSet<org.springframework.boot.devtools.filewatch.ChangedFile> <> ( ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> . add ( new ChangedFile ( java.io.File , java.io.File , Type . MODIFY ) ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> . add ( new ChangedFile ( java.io.File , java.io.File , Type . DELETE ) ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> . add ( new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ) ; assertThat ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> ) . isEqualTo ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; java.io.File java.io.File = java.io.File ( new java.io.File ( java.io.File , STRING ) ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . setTriggerFilter ( new java.io.FileFilter ( ) { @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { return java.io.File . java.lang.String ( ) . boolean ( STRING ) ; } } ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . start ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; java.lang.Thread . void ( NUMBER ) ; assertThat ( this . java.util.List<java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles>> . size ( ) ) . isEqualTo ( NUMBER ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . stopAfter ( NUMBER ) ; ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles = org.springframework.boot.devtools.filewatch.ChangedFiles ( ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> < ChangedFile > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> = org.springframework.boot.devtools.filewatch.ChangedFiles . getFiles ( ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> < ChangedFile > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> = new java.util.HashSet<org.springframework.boot.devtools.filewatch.ChangedFile> <> ( ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> . add ( new ChangedFile ( java.io.File , java.io.File , Type . MODIFY ) ) ; assertThat ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> ) . isEqualTo ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { return java.io.File . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( long long , long long ) { this . org.springframework.boot.devtools.filewatch.FileSystemWatcher = new FileSystemWatcher ( false , long , long ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addListener ( new FileChangeListener ( ) { @ java.lang.Override public void void ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) { org.springframework.boot.devtools.filewatch.FileSystemWatcherTests .this . java.util.List<java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles>> . add ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) { org.springframework.boot.devtools.filewatch.FileSystemWatcherTests .this . java.util.List<java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles>> . add ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) java.io.IOException { java.io.File java.io.File = this . org.springframework.boot.devtools.filewatch.TemporaryFolder . newFolder ( ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . addSourceFolder ( java.io.File ) ; this . org.springframework.boot.devtools.filewatch.FileSystemWatcher . start ( ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.filewatch.ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles ( ) { java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> = java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ( ) ; assertThat ( java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> . size ( ) ) . isEqualTo ( NUMBER ) ; return java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> . iterator ( ) . next ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles> ( ) { assertThat ( this . java.util.List<java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles>> . size ( ) ) . isEqualTo ( NUMBER ) ; return this . java.util.List<java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFiles>> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.io.File java.io.File ) throws java.io.FileNotFoundException , java.io.IOException { java.io.File . java.io.File ( ) . boolean ( ) ; java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( java.io.File ) ; java.io.FileOutputStream . void ( ) ; return java.io.File ; }  <METHOD_END>
