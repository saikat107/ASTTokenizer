<METHOD_START> @ java.lang.Override public void void ( Shell org.springsource.sts.internal.splash.Shell ) { super. init ( org.springsource.sts.internal.splash.Shell ) ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; IProduct org.springsource.sts.internal.splash.IProduct = Platform . getProduct ( ) ; if ( org.springsource.sts.internal.splash.IProduct != null ) { java.lang.String = org.springsource.sts.internal.splash.IProduct . getProperty ( IProductConstants . STARTUP_PROGRESS_RECT ) ; java.lang.String = org.springsource.sts.internal.splash.IProduct . getProperty ( IProductConstants . STARTUP_MESSAGE_RECT ) ; java.lang.String = org.springsource.sts.internal.splash.IProduct . getProperty ( IProductConstants . STARTUP_FOREGROUND_COLOR ) ; java.lang.String = org.springsource.sts.internal.splash.IProduct . getProperty ( STRING ) ; java.lang.String = org.springsource.sts.internal.splash.IProduct . getProperty ( STRING ) ; } Rectangle org.springsource.sts.internal.splash.Rectangle = StringConverter . asRectangle ( java.lang.String , new Rectangle ( NUMBER , NUMBER , NUMBER , NUMBER ) ) ; setProgressRect ( org.springsource.sts.internal.splash.Rectangle ) ; Rectangle org.springsource.sts.internal.splash.Rectangle = StringConverter . asRectangle ( java.lang.String , new Rectangle ( NUMBER , NUMBER , NUMBER , NUMBER ) ) ; setMessageRect ( org.springsource.sts.internal.splash.Rectangle ) ; int int ; int int ; try { int = java.lang.Integer . int ( java.lang.String , NUMBER ) ; int = java.lang.Integer . int ( java.lang.String , NUMBER ) ; } catch ( java.lang.Exception java.lang.Exception ) { int = NUMBER ; int = NUMBER ; } setForeground ( new RGB ( ( int & NUMBER ) >> NUMBER , ( int & NUMBER ) >> NUMBER , int & NUMBER ) ) ; final Color org.springsource.sts.internal.splash.Color = new Color ( getSplash ( ) . getShell ( ) . getDisplay ( ) , new RGB ( ( int & NUMBER ) >> NUMBER , ( int & NUMBER ) >> NUMBER , int & NUMBER ) ) ; final java.lang.String java.lang.String = java.lang.String ( ) ; final Point org.springsource.sts.internal.splash.Point = StringConverter . asPoint ( java.lang.String , new Point ( NUMBER , NUMBER ) ) ; getContent ( ) . addPaintListener ( new PaintListener ( ) { public void void ( PaintEvent org.springsource.sts.internal.splash.PaintEvent ) { e . gc . setForeground ( org.springsource.sts.internal.splash.Color ) ; Point org.springsource.sts.internal.splash.Point = e . gc . textExtent ( java.lang.String ) ; e . gc . drawText ( java.lang.String , versionPoint . x - p . x , versionPoint . y , true ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public void void ( PaintEvent org.springsource.sts.internal.splash.PaintEvent ) { e . gc . setForeground ( org.springsource.sts.internal.splash.Color ) ; Point org.springsource.sts.internal.splash.Point = e . gc . textExtent ( java.lang.String ) ; e . gc . drawText ( java.lang.String , versionPoint . x - p . x , versionPoint . y , true ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { try { java.io.File java.io.File = new java.io.File ( Platform . getInstallLocation ( ) . getURL ( ) . getFile ( ) ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; if ( java.io.File . boolean ( ) && java.io.File . boolean ( ) ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . void ( new java.io.FileInputStream ( java.io.File ) ) ; java.lang.String java.lang.String = java.util.Properties . java.lang.String ( STRING ) ; if ( java.lang.String != null && java.lang.String . int ( ) > NUMBER ) { return java.lang.String ; } } } catch ( java.lang.Exception java.lang.Exception ) { } Bundle org.springsource.sts.internal.splash.Bundle = Platform . getBundle ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springsource.sts.internal.splash.Bundle . getHeaders ( ) . get ( STRING ) ; if ( java.lang.String != null ) { Version org.springsource.sts.internal.splash.Version = new Version ( java.lang.String ) ; java.lang.String java.lang.String = org.springsource.sts.internal.splash.Version . getQualifier ( ) ; int int = java.lang.String . int ( '-' ) ; if ( int > NUMBER ) { java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; } return new java.lang.StringBuilder ( ) . java.lang.StringBuilder ( org.springsource.sts.internal.splash.Version . getMajor ( ) ) . append ( STRING ) . append ( org.springsource.sts.internal.splash.Version . getMinor ( ) ) . append ( STRING ) . append ( org.springsource.sts.internal.splash.Version . getMicro ( ) ) . append ( STRING ) . append ( java.lang.String . java.lang.String ( ) ) . toString ( ) ; } return STRING ; }  <METHOD_END>
