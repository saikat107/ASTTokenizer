<METHOD_START> @ BeforeClass public static void void ( ) { DefaultListableBeanFactory org.springframework.data.couchbase.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; BeanDefinitionReader org.springframework.data.couchbase.config.BeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.data.couchbase.config.DefaultListableBeanFactory ) ; org.springframework.data.couchbase.config.BeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; org.springframework.data.couchbase.config.GenericApplicationContext = new GenericApplicationContext ( org.springframework.data.couchbase.config.DefaultListableBeanFactory ) ; org.springframework.data.couchbase.config.GenericApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CouchbaseEnvironment org.springframework.data.couchbase.config.CouchbaseEnvironment = org.springframework.data.couchbase.config.GenericApplicationContext . getBean ( STRING , CouchbaseEnvironment .class ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . retryStrategy ( ) , is ( instanceOf ( FailFastRetryStrategy .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CouchbaseEnvironment org.springframework.data.couchbase.config.CouchbaseEnvironment = org.springframework.data.couchbase.config.GenericApplicationContext . getBean ( STRING , CouchbaseEnvironment .class ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . retryStrategy ( ) , is ( instanceOf ( BestEffortRetryStrategy .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CouchbaseEnvironment org.springframework.data.couchbase.config.CouchbaseEnvironment = org.springframework.data.couchbase.config.GenericApplicationContext . getBean ( STRING , CouchbaseEnvironment .class ) ; CouchbaseEnvironment org.springframework.data.couchbase.config.CouchbaseEnvironment = DefaultCouchbaseEnvironment . create ( ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment , is ( instanceOf ( DefaultCouchbaseEnvironment .class ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . managementTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . queryTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . viewTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . kvTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . connectTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . disconnectTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . dnsSrvEnabled ( ) , allOf ( equalTo ( true ) , not ( org.springframework.data.couchbase.config.CouchbaseEnvironment . dnsSrvEnabled ( ) ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . dcpEnabled ( ) , allOf ( equalTo ( true ) , not ( org.springframework.data.couchbase.config.CouchbaseEnvironment . dcpEnabled ( ) ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . sslEnabled ( ) , allOf ( equalTo ( true ) , not ( org.springframework.data.couchbase.config.CouchbaseEnvironment . sslEnabled ( ) ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . sslKeystoreFile ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . sslKeystorePassword ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bootstrapHttpEnabled ( ) , allOf ( equalTo ( false ) , not ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bootstrapHttpEnabled ( ) ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bootstrapCarrierEnabled ( ) , allOf ( equalTo ( false ) , not ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bootstrapCarrierEnabled ( ) ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bootstrapHttpDirectPort ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bootstrapHttpSslPort ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bootstrapCarrierDirectPort ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bootstrapCarrierSslPort ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . ioPoolSize ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . computationPoolSize ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . responseBufferSize ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . requestBufferSize ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . kvEndpoints ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . viewEndpoints ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . queryEndpoints ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . retryStrategy ( ) , is ( instanceOf ( FailFastRetryStrategy .class ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . maxRequestLifetime ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . keepAliveInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . autoreleaseAfter ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bufferPoolingEnabled ( ) , allOf ( equalTo ( false ) , not ( org.springframework.data.couchbase.config.CouchbaseEnvironment . bufferPoolingEnabled ( ) ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . tcpNodelayEnabled ( ) , allOf ( equalTo ( false ) , not ( org.springframework.data.couchbase.config.CouchbaseEnvironment . tcpNodelayEnabled ( ) ) ) ) ; assertThat ( org.springframework.data.couchbase.config.CouchbaseEnvironment . mutationTokensEnabled ( ) , allOf ( equalTo ( true ) , not ( org.springframework.data.couchbase.config.CouchbaseEnvironment . mutationTokensEnabled ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.data.couchbase.config.GenericApplicationContext . close ( ) ; }  <METHOD_END>
