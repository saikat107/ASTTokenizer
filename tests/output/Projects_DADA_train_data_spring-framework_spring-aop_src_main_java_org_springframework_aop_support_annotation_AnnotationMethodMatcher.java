<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.reflect.Method . boolean ( this . java.lang.Class<> ) ) { return true ; } java.lang.reflect.Method java.lang.reflect.Method = AopUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; return ( java.lang.reflect.Method != java.lang.reflect.Method && java.lang.reflect.Method . boolean ( this . java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.aop.support.annotation.AnnotationMethodMatcher ) ) { return false ; } org.springframework.aop.support.annotation.AnnotationMethodMatcher org.springframework.aop.support.annotation.AnnotationMethodMatcher = ( org.springframework.aop.support.annotation.AnnotationMethodMatcher ) java.lang.Object ; return this . java.lang.Class<> . boolean ( org.springframework.aop.support.annotation.AnnotationMethodMatcher . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.Class<> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.aop.support.annotation.AnnotationMethodMatcher> ( ) . java.lang.String ( ) + STRING + this . java.lang.Class<> ; }  <METHOD_END>
