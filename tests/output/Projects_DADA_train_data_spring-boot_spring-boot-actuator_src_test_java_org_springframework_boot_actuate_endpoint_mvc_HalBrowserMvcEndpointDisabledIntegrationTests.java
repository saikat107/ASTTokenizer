<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( header ( ) . doesNotExist ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . LOCATION , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( MvcEndpoint org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint : this . org.springframework.boot.actuate.endpoint.mvc.MvcEndpoints . getEndpoints ( ) ) { java.lang.String java.lang.String = org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint . getPath ( ) ; if ( STRING . boolean ( java.lang.String ) || org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint instanceof HeapdumpMvcEndpoint ) { continue; } java.lang.String = java.lang.String . int ( ) > NUMBER ? java.lang.String : STRING ; MockHttpServletRequestBuilder org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequestBuilder = get ( java.lang.String ) ; if ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint instanceof AuditEventsMvcEndpoint ) { org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequestBuilder . param ( STRING , STRING ) ; } this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequestBuilder . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { SpringApplication . run ( org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpointDisabledIntegrationTests.SpringBootHypermediaApplication .class , STRING ) ; }  <METHOD_END>
