<METHOD_START> @ Before public void void ( ) { Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . getType ( ) ) . thenReturn ( ProductBean .class ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . getSolrCoreName ( ) ) . thenReturn ( java.lang.String ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId> . getType ( ) ) . thenReturn ( org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId .class ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId> . getSolrCoreName ( ) ) . thenReturn ( java.lang.String ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType> . getType ( ) ) . thenReturn ( org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType .class ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType> . getSolrCoreName ( ) ) . thenReturn ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrEntityInformation < ProductBean , java.lang.String > org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> = new MappingSolrEntityInformation <> ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> ) ; Assert . assertEquals ( java.lang.String , org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> . getSolrCoreName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; SolrEntityInformation < ProductBean , java.lang.String > org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> = new MappingSolrEntityInformation <> ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> , java.lang.String ) ; Assert . assertEquals ( java.lang.String , org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> . getSolrCoreName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchFieldException , java.lang.SecurityException { Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . getTypeInformation ( ) ) . thenReturn ( ClassTypeInformation . from ( ProductBean .class ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . findAnnotation ( Mockito . eq ( AccessType .class ) ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; SimpleSolrPersistentProperty org.springframework.data.solr.repository.support.SimpleSolrPersistentProperty = new SimpleSolrPersistentProperty ( Property . of ( ProductBean .class . java.lang.reflect.Field ( STRING ) ) , org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> , new SimpleTypeHolder ( ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . getIdProperty ( ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.solr.repository.support.SimpleSolrPersistentProperty ) ) ; SolrEntityInformation < ProductBean , java.lang.String > org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> = new MappingSolrEntityInformation <> ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> ) ; Assert . assertEquals ( java.lang.String .class , org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> . getIdType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchFieldException , java.lang.SecurityException { Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType> . getTypeInformation ( ) ) . thenReturn ( ClassTypeInformation . from ( org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType .class ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType> . findAnnotation ( Mockito . eq ( AccessType .class ) ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; SimpleSolrPersistentProperty org.springframework.data.solr.repository.support.SimpleSolrPersistentProperty = new SimpleSolrPersistentProperty ( Property . of ( org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType .class . java.lang.reflect.Field ( STRING ) ) , org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType> , new SimpleTypeHolder ( ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType> . getIdProperty ( ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.solr.repository.support.SimpleSolrPersistentProperty ) ) ; SolrEntityInformation < org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType , java.lang.Long > org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType,java.lang.Long> = new MappingSolrEntityInformation <> ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType> ) ; Assert . assertEquals ( java.lang.Long .class , org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithLongIdFieldType,java.lang.Long> . getIdType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchFieldException , java.lang.SecurityException { Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . getTypeInformation ( ) ) . thenReturn ( ClassTypeInformation . from ( ProductBean .class ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . findAnnotation ( Mockito . eq ( AccessType .class ) ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; SimpleSolrPersistentProperty org.springframework.data.solr.repository.support.SimpleSolrPersistentProperty = new SimpleSolrPersistentProperty ( Property . of ( ProductBean .class . java.lang.reflect.Field ( STRING ) ) , org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> , new SimpleTypeHolder ( ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> . getIdProperty ( ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.solr.repository.support.SimpleSolrPersistentProperty ) ) ; SolrEntityInformation < ProductBean , java.lang.String > org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> = new MappingSolrEntityInformation <> ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.ProductBean> ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.ProductBean,java.lang.String> . getIdAttribute ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchFieldException , java.lang.SecurityException { Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId> . getTypeInformation ( ) ) . thenReturn ( ClassTypeInformation . from ( org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId .class ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId> . findAnnotation ( Mockito . eq ( AccessType .class ) ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; SimpleSolrPersistentProperty org.springframework.data.solr.repository.support.SimpleSolrPersistentProperty = new SimpleSolrPersistentProperty ( Property . of ( org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId .class . java.lang.reflect.Field ( STRING ) ) , org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId> , new SimpleTypeHolder ( ) ) ; Mockito . when ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId> . getIdProperty ( ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.data.solr.repository.support.SimpleSolrPersistentProperty ) ) ; SolrEntityInformation < org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId , java.lang.String > org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId,java.lang.String> = new MappingSolrEntityInformation <> ( org.springframework.data.solr.repository.support.SolrPersistentEntity<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId> ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.repository.support.SolrEntityInformation<org.springframework.data.solr.repository.support.MappingSolrEntityInformationTests.ProductBeanWithAlternateFieldNameForId,java.lang.String> . getIdAttribute ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
