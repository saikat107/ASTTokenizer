<METHOD_START> @ Before public void void ( ) { MonitorFactory . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { MonitorFactory . reset ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { given ( org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) ) . willReturn ( java.lang.String .class . java.lang.reflect.Method ( STRING ) ) ; org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor . invokeUnderTrace ( org.springframework.aop.interceptor.MethodInvocation , org.springframework.aop.interceptor.Log ) ; assertTrue ( STRING , MonitorFactory . getNumRows ( ) > NUMBER ) ; assertTrue ( STRING , MonitorFactory . getReport ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { given ( org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) ) . willReturn ( java.lang.String .class . java.lang.reflect.Method ( STRING ) ) ; given ( org.springframework.aop.interceptor.MethodInvocation . proceed ( ) ) . willThrow ( new java.lang.IllegalArgumentException ( ) ) ; try { org.springframework.aop.interceptor.JamonPerformanceMonitorInterceptor . invokeUnderTrace ( org.springframework.aop.interceptor.MethodInvocation , org.springframework.aop.interceptor.Log ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} assertEquals ( STRING , NUMBER , MonitorFactory . getNumRows ( ) ) ; assertTrue ( STRING , MonitorFactory . getReport ( ) . contains ( STRING ) ) ; assertTrue ( STRING + MonitorFactory . EXCEPTIONS_LABEL , MonitorFactory . getReport ( ) . contains ( MonitorFactory . EXCEPTIONS_LABEL ) ) ; assertTrue ( STRING , MonitorFactory . getReport ( ) . contains ( STRING ) ) ; }  <METHOD_END>
