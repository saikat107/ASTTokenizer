<METHOD_START> public void ( MetaData org.springframework.data.neo4j.conversion.MetaData ) { org.springframework.data.neo4j.conversion.MetaData . registerConversionCallback ( this ) ; for ( ClassInfo org.springframework.data.neo4j.conversion.ClassInfo : org.springframework.data.neo4j.conversion.MetaData . persistentEntities ( ) ) { for ( FieldInfo org.springframework.data.neo4j.conversion.FieldInfo : org.springframework.data.neo4j.conversion.ClassInfo . propertyFields ( ) ) { if ( org.springframework.data.neo4j.conversion.FieldInfo . hasPropertyConverter ( ) ) { void ( org.springframework.data.neo4j.conversion.FieldInfo . getPropertyConverter ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private void void ( final AttributeConverter org.springframework.data.neo4j.conversion.AttributeConverter ) { if ( org.springframework.data.neo4j.conversion.AttributeConverter instanceof ProxyAttributeConverter ) { return; } Converter org.springframework.data.neo4j.conversion.Converter = new Converter ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.neo4j.conversion.AttributeConverter . toGraphProperty ( java.lang.Object ) ; } } ; Converter org.springframework.data.neo4j.conversion.Converter = new Converter ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.neo4j.conversion.AttributeConverter . toEntityAttribute ( java.lang.Object ) ; } } ; java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) org.springframework.data.neo4j.conversion.AttributeConverter . getClass ( ) . getGenericInterfaces ( ) [ NUMBER ] ; java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> ; if ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] instanceof java.lang.Class ) { java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ; } else { java.lang.Class<?> = ( java.lang.Class<?> < ? > ) ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ) . java.lang.reflect.Type[] ( ) [ NUMBER ] ; } if ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] instanceof java.lang.Class ) { java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ; } else { java.lang.Class<?> = ( java.lang.Class<?> < ? > ) ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ) . java.lang.reflect.Type[] ( ) [ NUMBER ] ; } if ( canConvert ( java.lang.Class<> , java.lang.Class<> ) && canConvert ( java.lang.Class<> , java.lang.Class<> ) ) { org.springframework.data.neo4j.conversion.Logger . info ( STRING + org.springframework.data.neo4j.conversion.AttributeConverter . getClass ( ) + STRING ) ; } else { addConverter ( java.lang.Class<> , java.lang.Class<> , org.springframework.data.neo4j.conversion.Converter ) ; addConverter ( java.lang.Class<> , java.lang.Class<> , org.springframework.data.neo4j.conversion.Converter ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.neo4j.conversion.AttributeConverter . toGraphProperty ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.neo4j.conversion.AttributeConverter . toEntityAttribute ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } return T ( java.lang.Object , java.lang.Class<T> ) ; }  <METHOD_END>
