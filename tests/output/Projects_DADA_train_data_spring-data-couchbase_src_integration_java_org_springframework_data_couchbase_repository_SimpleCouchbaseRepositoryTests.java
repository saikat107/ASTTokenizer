<METHOD_START> @ Before public void void ( ) java.lang.Exception { RepositoryFactorySupport org.springframework.data.couchbase.repository.RepositoryFactorySupport = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) ; org.springframework.data.couchbase.repository.UserRepository = org.springframework.data.couchbase.repository.RepositoryFactorySupport . getRepository ( UserRepository .class ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository = org.springframework.data.couchbase.repository.RepositoryFactorySupport . getRepository ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { try { org.springframework.data.couchbase.repository.Bucket . remove ( java.lang.String ) ; } catch ( DocumentDoesNotExistException org.springframework.data.couchbase.repository.DocumentDoesNotExistException ) {    } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; User org.springframework.data.couchbase.repository.User = new User ( java.lang.String , STRING , NUMBER ) ; org.springframework.data.couchbase.repository.UserRepository . save ( org.springframework.data.couchbase.repository.User ) ; java.util.Optional<org.springframework.data.couchbase.repository.User> < User > java.util.Optional<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.UserRepository . findOne ( java.lang.String ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.repository.User> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.couchbase.repository.User> . ifPresent ( actual -> { assertEquals ( instance . getKey ( ) , actual . getKey ( ) ) ; assertEquals ( instance . getUsername ( ) , actual . getUsername ( ) ) ; assertTrue ( repository . exists ( key ) ) ; repository . delete ( actual ) ; } ) ; assertFalse ( org.springframework.data.couchbase.repository.UserRepository . findOne ( java.lang.String ) . isPresent ( ) ) ; assertFalse ( org.springframework.data.couchbase.repository.UserRepository . exists ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.repository.Bucket . query ( ViewQuery . from ( STRING , STRING ) . stale ( Stale . FALSE ) ) ; java.lang.Iterable<org.springframework.data.couchbase.repository.User> < User > java.lang.Iterable<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.UserRepository . findAll ( ) ; int int = NUMBER ; for ( User org.springframework.data.couchbase.repository.User : java.lang.Iterable<org.springframework.data.couchbase.repository.User> ) { int ++ ; assertNotNull ( org.springframework.data.couchbase.repository.User . getKey ( ) ) ; assertNotNull ( org.springframework.data.couchbase.repository.User . getUsername ( ) ) ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.repository.Bucket . query ( ViewQuery . from ( STRING , STRING ) . stale ( Stale . FALSE ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.UserRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { java.lang.Iterable<org.springframework.data.couchbase.repository.User> < User > java.lang.Iterable<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.UserRepository . customViewQuery ( ViewQuery . from ( STRING , STRING ) . limit ( NUMBER ) . stale ( Stale . FALSE ) ) ; int int = NUMBER ; for ( User org.springframework.data.couchbase.repository.User : java.lang.Iterable<org.springframework.data.couchbase.repository.User> ) { int ++ ; assertNotNull ( org.springframework.data.couchbase.repository.User . getKey ( ) ) ; assertNotNull ( org.springframework.data.couchbase.repository.User . getUsername ( ) ) ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.couchbase.repository.User = org.springframework.data.couchbase.repository.UserRepository . findByUsername ( STRING ) ; assertNotNull ( org.springframework.data.couchbase.repository.User ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.User . getKey ( ) ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.User . getUsername ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { User org.springframework.data.couchbase.repository.User = org.springframework.data.couchbase.repository.UserRepository . findByUsernameBadSelect ( STRING ) ; fail ( STRING ) ; } catch ( CouchbaseQueryExecutionException org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException ) { assertTrue ( STRING + org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException , org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( STRING + org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException , org.springframework.data.couchbase.repository.CouchbaseQueryExecutionException . getMessage ( ) . contains ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.couchbase.repository.User = org.springframework.data.couchbase.repository.UserRepository . findByUsernameWithSpelAndPlaceholder ( ) ; assertNotNull ( org.springframework.data.couchbase.repository.User ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.User . getKey ( ) ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.User . getUsername ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.couchbase.repository.User = org.springframework.data.couchbase.repository.UserRepository . findByUsernameRegexAndUsernameIn ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; assertNotNull ( org.springframework.data.couchbase.repository.User ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.User . getKey ( ) ) ; assertEquals ( STRING , org.springframework.data.couchbase.repository.User . getUsername ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.couchbase.repository.User> < User > java.util.List<org.springframework.data.couchbase.repository.User> = org.springframework.data.couchbase.repository.UserRepository . findByUsernameContains ( STRING ) ; assertNotNull ( java.util.List<org.springframework.data.couchbase.repository.User> ) ; assertFalse ( java.util.List<org.springframework.data.couchbase.repository.User> . isEmpty ( ) ) ; for ( User org.springframework.data.couchbase.repository.User : java.util.List<org.springframework.data.couchbase.repository.User> ) { assertTrue ( org.springframework.data.couchbase.repository.User . getUsername ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { User org.springframework.data.couchbase.repository.User = org.springframework.data.couchbase.repository.UserRepository . findByUsernameNear ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { if ( ! java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) { fail ( java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.String java.lang.String = STRING ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData = new org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ( java.lang.String , STRING ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . save ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) ; assertNotEquals ( NUMBER , org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . long ) ; java.util.Optional<org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData> < org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData > java.util.Optional<org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData> = org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . findOne ( java.lang.String ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData> . boolean ( ) ) ; java.util.Optional<org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData> . void ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData -> { assertNotSame ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData , org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) ; assertEquals ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . long , org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . long ) ; } ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData = java.util.Optional<org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData> . org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ( ) ; JsonDocument org.springframework.data.couchbase.repository.JsonDocument = org.springframework.data.couchbase.repository.Bucket . get ( java.lang.String ) ; org.springframework.data.couchbase.repository.JsonDocument . content ( ) . put ( STRING , STRING ) ; JsonDocument org.springframework.data.couchbase.repository.JsonDocument = org.springframework.data.couchbase.repository.Bucket . upsert ( org.springframework.data.couchbase.repository.JsonDocument ) ; assertNotEquals ( org.springframework.data.couchbase.repository.JsonDocument . cas ( ) , org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . long ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.data.couchbase.repository.JsonDocument . cas ( ) ) ; try { org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . void ( STRING ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . save ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) ; fail ( STRING ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.repository.OptimisticLockingFailureException ) { assertTrue ( STRING + org.springframework.data.couchbase.repository.OptimisticLockingFailureException . getCause ( ) , org.springframework.data.couchbase.repository.OptimisticLockingFailureException . getCause ( ) instanceof CASMismatchException ) ; } finally { org.springframework.data.couchbase.repository.Bucket . remove ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = org.springframework.data.couchbase.repository.TestName . getMethodName ( ) ; void ( java.lang.String ) ; final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( ) ; final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData = new org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ( java.lang.String , STRING ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . save ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) ; assertNotEquals ( NUMBER , org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . long ) ; java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > java.util.concurrent.Callable<java.lang.Void> = new java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { boolean boolean = false ; while( ! boolean ) { long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData = org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . findOne ( java.lang.String ) . get ( ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . java.lang.String = STRING + long ; try { org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . save ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) ; boolean = true ; java.util.concurrent.atomic.AtomicLong . long ( ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.repository.OptimisticLockingFailureException ) {          } } return null ; } } ; AsyncUtils . executeConcurrently ( NUMBER , java.util.concurrent.Callable<java.lang.Void> ) ; assertNotEquals ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . java.lang.String , org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . findOne ( java.lang.String ) . get ( ) . data ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicLong . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { boolean boolean = false ; while( ! boolean ) { long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData = org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . findOne ( java.lang.String ) . get ( ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . java.lang.String = STRING + long ; try { org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . save ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) ; boolean = true ; java.util.concurrent.atomic.AtomicLong . long ( ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.repository.OptimisticLockingFailureException ) {          } } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = org.springframework.data.couchbase.repository.TestName . getMethodName ( ) ; void ( java.lang.String ) ; final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( ) ; final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( ) ; java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > java.util.concurrent.Callable<java.lang.Void> = new java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData = new org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ( java.lang.String , STRING + long ) ; try { org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . save ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.repository.OptimisticLockingFailureException ) { java.util.concurrent.atomic.AtomicLong . long ( ) ; } return null ; } } ; AsyncUtils . executeConcurrently ( NUMBER , java.util.concurrent.Callable<java.lang.Void> ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicLong . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData = new org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ( java.lang.String , STRING + long ) ; try { org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedDataRepository . save ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) ; } catch ( OptimisticLockingFailureException org.springframework.data.couchbase.repository.OptimisticLockingFailureException ) { java.util.concurrent.atomic.AtomicLong . long ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String + STRING + this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) return true ; if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) return false ; org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData = ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData ) java.lang.Object ; return java.lang.String . boolean ( org.springframework.data.couchbase.repository.SimpleCouchbaseRepositoryTests.VersionedData . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String . int ( ) ; }  <METHOD_END>
