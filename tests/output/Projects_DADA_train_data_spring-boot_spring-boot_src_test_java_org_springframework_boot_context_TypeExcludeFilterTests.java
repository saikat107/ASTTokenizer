<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.context.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.context.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.context.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.context.AnnotationConfigApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new org.springframework.boot.context.TypeExcludeFilterTests.WithoutMatchOverrideFilter ( ) ) ; this . org.springframework.boot.context.AnnotationConfigApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new SampleTypeExcludeFilter ( ) ) ; this . org.springframework.boot.context.AnnotationConfigApplicationContext . register ( org.springframework.boot.context.TypeExcludeFilterTests.Config .class ) ; this . org.springframework.boot.context.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.context.AnnotationConfigApplicationContext . getBean ( ExampleComponent .class ) ) . isNotNull ( ) ; this . org.springframework.boot.context.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.context.AnnotationConfigApplicationContext . getBean ( ExampleFilteredComponent .class ) ; }  <METHOD_END>
