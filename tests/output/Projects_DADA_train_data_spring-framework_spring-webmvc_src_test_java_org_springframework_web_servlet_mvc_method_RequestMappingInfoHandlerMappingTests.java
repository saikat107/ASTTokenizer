<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController = new org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController ( ) ; this . org.springframework.web.servlet.mvc.method.HandlerMethod = new HandlerMethod ( org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController , STRING ) ; this . org.springframework.web.servlet.mvc.method.HandlerMethod = new HandlerMethod ( org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController , STRING ) ; this . org.springframework.web.servlet.mvc.method.HandlerMethod = new HandlerMethod ( org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController , STRING ) ; this . org.springframework.web.servlet.mvc.method.HandlerMethod = new HandlerMethod ( org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping = new org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping ( ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . void ( org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . setRemoveSemicolonContent ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING } ; RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = RequestMappingInfo . paths ( java.lang.String[] ) . build ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getMappingPathPatterns ( org.springframework.web.servlet.mvc.method.RequestMappingInfo ) ; assertEquals ( new java.util.HashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) , java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.HandlerMethod = org.springframework.web.servlet.mvc.method.HandlerMethod ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertEquals ( this . org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) , org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.HandlerMethod = org.springframework.web.servlet.mvc.method.HandlerMethod ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertEquals ( this . org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) , org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.HandlerMethod = org.springframework.web.servlet.mvc.method.HandlerMethod ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertEquals ( this . org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) , org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.HandlerMethod = org.springframework.web.servlet.mvc.method.HandlerMethod ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertEquals ( this . org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) , org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . setParameter ( STRING , STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.HandlerMethod = org.springframework.web.servlet.mvc.method.HandlerMethod ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertEquals ( this . org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) , org.springframework.web.servlet.mvc.method.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; fail ( STRING ) ; } catch ( HttpRequestMethodNotSupportedException org.springframework.web.servlet.mvc.method.HttpRequestMethodNotSupportedException ) { assertArrayEquals ( STRING , new java.lang.String [] { STRING , STRING } , org.springframework.web.servlet.mvc.method.HttpRequestMethodNotSupportedException . getSupportedMethods ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMediaTypeNotAcceptableException .class ) public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.UserController ( ) ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . setContentType ( STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; fail ( STRING ) ; } catch ( HttpMediaTypeNotSupportedException org.springframework.web.servlet.mvc.method.HttpMediaTypeNotSupportedException ) { assertEquals ( STRING , org.springframework.web.servlet.mvc.method.HttpMediaTypeNotSupportedException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; fail ( STRING ) ; } catch ( UnsatisfiedServletRequestParameterException org.springframework.web.servlet.mvc.method.UnsatisfiedServletRequestParameterException ) { java.util.List<java.lang.String[]> < java.lang.String [] > java.util.List<java.lang.String[]> = org.springframework.web.servlet.mvc.method.UnsatisfiedServletRequestParameterException . getParamConditionGroups ( ) ; assertEquals ( NUMBER , java.util.List<java.lang.String[]> . int ( ) ) ; assertThat ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , containsInAnyOrder ( java.util.List<java.lang.String[]> . java.lang.String[] ( NUMBER ) [ NUMBER ] , java.util.List<java.lang.String[]> . java.lang.String[] ( NUMBER ) [ NUMBER ] ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; java.lang.String java.lang.String = HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE ; assertEquals ( java.util.Collections . java.util.Set ( MediaType . APPLICATION_XML ) , org.springframework.web.servlet.mvc.method.MockHttpServletRequest . getAttribute ( java.lang.String ) ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNull ( STRING , org.springframework.web.servlet.mvc.method.MockHttpServletRequest . getAttribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; HandlerInterceptor org.springframework.web.servlet.mvc.method.HandlerInterceptor = new HandlerInterceptorAdapter ( ) {} ; MappedInterceptor org.springframework.web.servlet.mvc.method.MappedInterceptor = new MappedInterceptor ( new java.lang.String [] { java.lang.String } , org.springframework.web.servlet.mvc.method.HandlerInterceptor ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping = new org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping ( ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestController ( ) ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . setInterceptors ( new java.lang.Object [] { org.springframework.web.servlet.mvc.method.MappedInterceptor } ) ; org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . setApplicationContext ( new StaticWebApplicationContext ( ) ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.HandlerExecutionChain = org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , java.lang.String ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.HandlerExecutionChain . getInterceptors ( ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.HandlerInterceptor , org.springframework.web.servlet.mvc.method.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] ) ; org.springframework.web.servlet.mvc.method.HandlerExecutionChain = org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.HandlerExecutionChain ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = RequestMappingInfo . paths ( STRING ) . build ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = new UrlPathHelper ( ) . getLookupPathForRequest ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.lang.String , org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.servlet.mvc.method.MockHttpServletRequest . getAttribute ( java.lang.String ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = RequestMappingInfo . paths ( STRING ) . build ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; UrlPathHelper org.springframework.web.servlet.mvc.method.UrlPathHelper = new UrlPathHelper ( ) ; org.springframework.web.servlet.mvc.method.UrlPathHelper . setUrlDecode ( false ) ; java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.UrlPathHelper . getLookupPathForRequest ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . setUrlPathHelper ( org.springframework.web.servlet.mvc.method.UrlPathHelper ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.lang.String , org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.servlet.mvc.method.MockHttpServletRequest . getAttribute ( java.lang.String ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = RequestMappingInfo . paths ( STRING , STRING ) . build ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , STRING , org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.MockHttpServletRequest . getAttribute ( HandlerMapping . BEST_MATCHING_PATTERN_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = RequestMappingInfo . paths ( ) . build ( ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , STRING , org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.MockHttpServletRequest . getAttribute ( HandlerMapping . BEST_MATCHING_PATTERN_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( ) ; void ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest , STRING ) ; java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( ) ; void ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest , STRING ) ; java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( ) ; void ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest , STRING ) ; java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest ; UrlPathHelper org.springframework.web.servlet.mvc.method.UrlPathHelper = new UrlPathHelper ( ) ; org.springframework.web.servlet.mvc.method.UrlPathHelper . setUrlDecode ( false ) ; org.springframework.web.servlet.mvc.method.UrlPathHelper . setRemoveSemicolonContent ( false ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . setUrlPathHelper ( org.springframework.web.servlet.mvc.method.UrlPathHelper ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( ) ; void ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest , STRING , STRING ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.HandlerMethod org.springframework.web.servlet.mvc.method.HandlerMethod ( MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) throws java.lang.Exception { HandlerExecutionChain org.springframework.web.servlet.mvc.method.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.HandlerExecutionChain ) ; return ( HandlerMethod ) org.springframework.web.servlet.mvc.method.HandlerExecutionChain . getHandler ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { try { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . setContentType ( STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; fail ( STRING ) ; } catch ( HttpMediaTypeNotSupportedException org.springframework.web.servlet.mvc.method.HttpMediaTypeNotSupportedException ) { assertEquals ( STRING , java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , org.springframework.web.servlet.mvc.method.HttpMediaTypeNotSupportedException . getSupportedMediaTypes ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , java.lang.String ) ; HandlerMethod org.springframework.web.servlet.mvc.method.HandlerMethod = org.springframework.web.servlet.mvc.method.HandlerMethod ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; ServletWebRequest org.springframework.web.servlet.mvc.method.ServletWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; ModelAndViewContainer org.springframework.web.servlet.mvc.method.ModelAndViewContainer = new ModelAndViewContainer ( ) ; java.lang.Object java.lang.Object = new InvocableHandlerMethod ( org.springframework.web.servlet.mvc.method.HandlerMethod ) . invokeForRequest ( org.springframework.web.servlet.mvc.method.ServletWebRequest , org.springframework.web.servlet.mvc.method.ModelAndViewContainer ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( HttpHeaders .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( java.lang.String , ( ( HttpHeaders ) java.lang.Object ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { try { MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest = new MockHttpServletRequest ( STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.MockHttpServletRequest . addHeader ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; fail ( STRING ) ; } catch ( HttpMediaTypeNotAcceptableException org.springframework.web.servlet.mvc.method.HttpMediaTypeNotAcceptableException ) { assertEquals ( STRING , java.util.Collections . java.util.List ( new MediaType ( STRING , STRING ) ) , org.springframework.web.servlet.mvc.method.HttpMediaTypeNotAcceptableException . getSupportedMediaTypes ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( MockHttpServletRequest org.springframework.web.servlet.mvc.method.MockHttpServletRequest , java.lang.String java.lang.String , java.lang.String java.lang.String ) { RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo = RequestMappingInfo . paths ( java.lang.String ) . build ( ) ; this . org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMappingTests.TestRequestMappingInfoHandlerMapping . handleMatch ( org.springframework.web.servlet.mvc.method.RequestMappingInfo , java.lang.String , org.springframework.web.servlet.mvc.method.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ( HttpServletRequest org.springframework.web.servlet.mvc.method.HttpServletRequest , java.lang.String java.lang.String ) { java.lang.String java.lang.String = HandlerMapping . MATRIX_VARIABLES_ATTRIBUTE ; return ( ( java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > ) org.springframework.web.servlet.mvc.method.HttpServletRequest . getAttribute ( java.lang.String ) ) . org.springframework.web.servlet.mvc.method.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( HttpServletRequest org.springframework.web.servlet.mvc.method.HttpServletRequest ) { java.lang.String java.lang.String = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; return ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.servlet.mvc.method.HttpServletRequest . getAttribute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET , params = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = { RequestMethod . GET , RequestMethod . HEAD } ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . PUT , consumes = STRING ) public void void ( @ RequestBody java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , params = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , params = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . OPTIONS ) public org.springframework.web.servlet.mvc.method.HttpHeaders org.springframework.web.servlet.mvc.method.HttpHeaders ( ) { HttpHeaders org.springframework.web.servlet.mvc.method.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.servlet.mvc.method.HttpHeaders . add ( STRING , STRING ) ; return org.springframework.web.servlet.mvc.method.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET , produces = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . PUT ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { super. detectHandlerMethods ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return AnnotationUtils . findAnnotation ( java.lang.Class<> , RequestMapping .class ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.RequestMappingInfo org.springframework.web.servlet.mvc.method.RequestMappingInfo ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { RequestMapping org.springframework.web.servlet.mvc.method.RequestMapping = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , RequestMapping .class ) ; if ( org.springframework.web.servlet.mvc.method.RequestMapping != null ) { return new RequestMappingInfo ( new PatternsRequestCondition ( org.springframework.web.servlet.mvc.method.RequestMapping . value ( ) , getUrlPathHelper ( ) , getPathMatcher ( ) , true , true ) , new RequestMethodsRequestCondition ( org.springframework.web.servlet.mvc.method.RequestMapping . method ( ) ) , new ParamsRequestCondition ( org.springframework.web.servlet.mvc.method.RequestMapping . params ( ) ) , new HeadersRequestCondition ( org.springframework.web.servlet.mvc.method.RequestMapping . headers ( ) ) , new ConsumesRequestCondition ( org.springframework.web.servlet.mvc.method.RequestMapping . consumes ( ) , org.springframework.web.servlet.mvc.method.RequestMapping . headers ( ) ) , new ProducesRequestCondition ( org.springframework.web.servlet.mvc.method.RequestMapping . produces ( ) , org.springframework.web.servlet.mvc.method.RequestMapping . headers ( ) ) , null ) ; } else { return null ; } }  <METHOD_END>
