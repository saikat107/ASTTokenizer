<METHOD_START> @ Before public void void ( ) { org.springframework.integration.ftp.outbound.FTPClient = mock ( FTPClient .class ) ; org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory = new org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory ( ) ; org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory . setUsername ( STRING ) ; org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory . setPassword ( STRING ) ; org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory . setHost ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } assertFalse ( java.io.File . boolean ( ) ) ; FileTransferringMessageHandler < FTPFile > org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> = new FileTransferringMessageHandler < FTPFile > ( org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setFileNameGenerator ( message -> STRING ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . afterPropertiesSet ( ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.io.File . boolean ( ) ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( java.io.File ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; if ( java.io.File . boolean ( ) ) { java.io.File . boolean ( ) ; } assertFalse ( java.io.File . boolean ( ) ) ; FileTransferringMessageHandler < FTPFile > org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> = new FileTransferringMessageHandler < FTPFile > ( org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setFileNameGenerator ( message -> STRING ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . afterPropertiesSet ( ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . handleMessage ( new GenericMessage < byte [] > ( STRING . byte[] ( ) ) ) ; assertTrue ( java.io.File . boolean ( ) ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( java.io.File ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertTrue ( STRING + java.io.File . java.lang.String ( ) , java.io.File . boolean ( ) ) ; FileTransferringMessageHandler < FTPFile > org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> = new FileTransferringMessageHandler < FTPFile > ( org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setRemoteDirectoryExpression ( new LiteralExpression ( java.io.File . java.lang.String ( ) ) ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setFileNameGenerator ( message -> ( ( File ) message . getPayload ( ) ) . getName ( ) + STRING ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . afterPropertiesSet ( ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; java.io.File . void ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.io.File . java.lang.String ( ) + STRING ) ; java.io.File . void ( ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . handleMessage ( new GenericMessage < java.io.File > ( java.io.File ) ) ; assertTrue ( STRING , java.io.File . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertTrue ( STRING + java.io.File . java.lang.String ( ) , java.io.File . boolean ( ) ) ; FileTransferringMessageHandler < FTPFile > org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> = new FileTransferringMessageHandler < FTPFile > ( org.springframework.integration.ftp.outbound.FtpOutboundTests.TestFtpSessionFactory ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setRemoteDirectoryExpression ( new LiteralExpression ( java.io.File . java.lang.String ( ) ) ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setFileNameGenerator ( message -> ( ( File ) message . getPayload ( ) ) . getName ( ) + STRING ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . afterPropertiesSet ( ) ; java.io.File java.io.File = new java.io.File ( java.util.UUID . java.util.UUID ( ) + STRING ) ; Log org.springframework.integration.ftp.outbound.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> , STRING , Log .class ) ) ; when ( org.springframework.integration.ftp.outbound.Log . isWarnEnabled ( ) ) . thenReturn ( true ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> <> ( ) ; doAnswer ( invocation -> { logged . set ( invocation . getArgument ( NUMBER ) ) ; invocation . callRealMethod ( ) ; return null ; } ) . when ( org.springframework.integration.ftp.outbound.Log ) . warn ( Mockito . anyString ( ) ) ; RemoteFileTemplate < ? > org.springframework.integration.ftp.outbound.RemoteFileTemplate<?> = TestUtils . getPropertyValue ( org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> , STRING , RemoteFileTemplate .class ) ; new DirectFieldAccessor ( org.springframework.integration.ftp.outbound.RemoteFileTemplate<> ) . setPropertyValue ( STRING , org.springframework.integration.ftp.outbound.Log ) ; org.springframework.integration.ftp.outbound.FileTransferringMessageHandler<org.springframework.integration.ftp.outbound.FTPFile> . handleMessage ( new GenericMessage < java.io.File > ( java.io.File ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( STRING + java.io.File . java.lang.String ( ) + STRING , java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; assertTrue ( STRING + java.io.File . java.lang.String ( ) , java.io.File . boolean ( ) ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; java.io.File . void ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.io.File . java.lang.String ( ) ) ; java.io.File . void ( ) ; ConfigurableApplicationContext org.springframework.integration.ftp.outbound.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.ftp.outbound.FtpOutboundTests> ( ) ) ; MessageChannel org.springframework.integration.ftp.outbound.MessageChannel = org.springframework.integration.ftp.outbound.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.ftp.outbound.MessageChannel . send ( new GenericMessage < java.io.File > ( java.io.File ) ) ; assertTrue ( STRING , java.io.File . boolean ( ) ) ; org.springframework.integration.ftp.outbound.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.ftp.outbound.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.ftp.outbound.FtpOutboundTests> ( ) ) ; MessageChannel org.springframework.integration.ftp.outbound.MessageChannel = org.springframework.integration.ftp.outbound.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.ftp.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; PollableChannel org.springframework.integration.ftp.outbound.PollableChannel = org.springframework.integration.ftp.outbound.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.ftp.outbound.Message<?> = org.springframework.integration.ftp.outbound.PollableChannel . receive ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.ftp.outbound.Message<> . getPayload ( ) ; assertTrue ( java.lang.Object instanceof java.util.List<?> < ? > ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<? extends org.springframework.integration.ftp.outbound.FileInfo<?>> < ? extends FileInfo < ? > > java.util.List<? extends org.springframework.integration.ftp.outbound.FileInfo<?>> = ( java.util.List<? extends org.springframework.integration.ftp.outbound.FileInfo<?>> < ? extends FileInfo < ? > > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( new java.io.File ( STRING ) . java.lang.String[] ( ) ) ; for ( FileInfo < ? > org.springframework.integration.ftp.outbound.FileInfo<?> : java.util.List<> ) { assertTrue ( java.util.List<java.lang.String> . boolean ( org.springframework.integration.ftp.outbound.FileInfo<> . getFilename ( ) ) ) ; } org.springframework.integration.ftp.outbound.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.ftp.outbound.FTPClient org.springframework.integration.ftp.outbound.FTPClient ( ) { try { when ( org.springframework.integration.ftp.outbound.FTPClient . getReplyCode ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.integration.ftp.outbound.FTPClient . login ( STRING , STRING ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ftp.outbound.FTPClient . changeWorkingDirectory ( Mockito . anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ftp.outbound.FTPClient . printWorkingDirectory ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ftp.outbound.FTPClient . storeFile ( Mockito . anyString ( ) , any ( java.io.InputStream .class ) ) ) . thenAnswer ( invocation -> { String fileName = invocation . getArgument ( NUMBER ) ; InputStream fis = invocation . getArgument ( NUMBER ) ; FileCopyUtils . copy ( fis , new FileOutputStream ( fileName ) ) ; return true ; } ) ; when ( org.springframework.integration.ftp.outbound.FTPClient . rename ( Mockito . anyString ( ) , Mockito . anyString ( ) ) ) . thenAnswer ( invocation -> { File file = new File ( ( String ) invocation . getArgument ( NUMBER ) ) ; File renameToFile = new File ( ( String ) invocation . getArgument ( NUMBER ) ) ; file . renameTo ( renameToFile ) ; return true ; } ) ; java.lang.String [] java.lang.String[] = new java.io.File ( STRING ) . java.lang.String[] ( ) ; java.util.Collection<org.springframework.integration.ftp.outbound.FTPFile> < FTPFile > java.util.Collection<org.springframework.integration.ftp.outbound.FTPFile> = new java.util.ArrayList<org.springframework.integration.ftp.outbound.FTPFile> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { FTPFile org.springframework.integration.ftp.outbound.FTPFile = new FTPFile ( ) ; org.springframework.integration.ftp.outbound.FTPFile . setName ( java.lang.String ) ; org.springframework.integration.ftp.outbound.FTPFile . setType ( FTPFile . FILE_TYPE ) ; org.springframework.integration.ftp.outbound.FTPFile . setTimestamp ( java.util.Calendar . java.util.Calendar ( ) ) ; java.util.Collection<org.springframework.integration.ftp.outbound.FTPFile> . add ( org.springframework.integration.ftp.outbound.FTPFile ) ; when ( org.springframework.integration.ftp.outbound.FTPClient . retrieveFile ( Mockito . eq ( STRING + java.lang.String ) , any ( java.io.OutputStream .class ) ) ) . thenReturn ( true ) ; } when ( org.springframework.integration.ftp.outbound.FTPClient . listFiles ( STRING ) ) . thenReturn ( java.util.Collection<org.springframework.integration.ftp.outbound.FTPFile> . toArray ( new FTPFile [ java.util.Collection<org.springframework.integration.ftp.outbound.FTPFile> . size ( ) ] ) ) ; return org.springframework.integration.ftp.outbound.FTPClient ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
