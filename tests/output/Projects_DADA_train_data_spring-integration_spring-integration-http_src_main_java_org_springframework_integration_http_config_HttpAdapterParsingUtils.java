<METHOD_START> static void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.http.config.ParserContext ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( org.w3c.dom.Element . boolean ( java.lang.String ) ) { org.springframework.integration.http.config.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING , org.springframework.integration.http.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; } } }  <METHOD_END>
<METHOD_START> static void void ( BeanDefinitionBuilder org.springframework.integration.http.config.BeanDefinitionBuilder , ParserContext org.springframework.integration.http.config.ParserContext , org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; boolean boolean = ! CollectionUtils . isEmpty ( java.util.List<org.w3c.dom.Element> ) ; if ( StringUtils . hasText ( java.lang.String ) ) { if ( boolean ) { org.springframework.integration.http.config.ParserContext . getReaderContext ( ) . error ( STRING + STRING , org.w3c.dom.Element ) ; } BeanDefinitionBuilder org.springframework.integration.http.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ExpressionFactoryBean .class ) . addConstructorArgValue ( java.lang.String ) ; org.springframework.integration.http.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.http.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } if ( boolean ) { ManagedMap < java.lang.String , java.lang.Object > org.springframework.integration.http.config.ManagedMap<java.lang.String,java.lang.Object> = new ManagedMap < java.lang.String , java.lang.Object > ( ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; BeanDefinitionBuilder org.springframework.integration.http.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ExpressionFactoryBean .class ) ; org.springframework.integration.http.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; org.springframework.integration.http.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , org.springframework.integration.http.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } org.springframework.integration.http.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.http.config.ManagedMap<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> static void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.http.config.ParserContext , BeanDefinitionBuilder org.springframework.integration.http.config.BeanDefinitionBuilder ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; if ( boolean == boolean ) { org.springframework.integration.http.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } RootBeanDefinition org.springframework.integration.http.config.RootBeanDefinition ; if ( boolean ) { org.springframework.integration.http.config.RootBeanDefinition = new RootBeanDefinition ( LiteralExpression .class ) ; org.springframework.integration.http.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.String ) ; } else { org.springframework.integration.http.config.RootBeanDefinition = new RootBeanDefinition ( ExpressionFactoryBean .class ) ; org.springframework.integration.http.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.String ) ; } org.springframework.integration.http.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.http.config.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> static void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.http.config.ParserContext , BeanDefinitionBuilder org.springframework.integration.http.config.BeanDefinitionBuilder ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; if ( boolean && boolean ) { org.springframework.integration.http.config.ParserContext . getReaderContext ( ) . error ( STRING + STRING , org.w3c.dom.Element ) ; } RootBeanDefinition org.springframework.integration.http.config.RootBeanDefinition = null ; if ( boolean ) { org.springframework.integration.http.config.RootBeanDefinition = new RootBeanDefinition ( LiteralExpression .class ) ; org.springframework.integration.http.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.String ) ; } else if ( boolean ) { org.springframework.integration.http.config.RootBeanDefinition = new RootBeanDefinition ( ExpressionFactoryBean .class ) ; org.springframework.integration.http.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.String ) ; } if ( org.springframework.integration.http.config.RootBeanDefinition != null ) { org.springframework.integration.http.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.http.config.RootBeanDefinition ) ; } }  <METHOD_END>
<METHOD_START> static void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.http.config.ParserContext , BeanDefinitionBuilder org.springframework.integration.http.config.BeanDefinitionBuilder ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; if ( boolean && boolean ) { org.springframework.integration.http.config.ParserContext . getReaderContext ( ) . error ( STRING + STRING , org.w3c.dom.Element ) ; } RootBeanDefinition org.springframework.integration.http.config.RootBeanDefinition = null ; if ( boolean ) { org.springframework.integration.http.config.RootBeanDefinition = new RootBeanDefinition ( LiteralExpression .class ) ; org.springframework.integration.http.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.String ) ; } else if ( boolean ) { org.springframework.integration.http.config.RootBeanDefinition = new RootBeanDefinition ( ExpressionFactoryBean .class ) ; org.springframework.integration.http.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.String ) ; } if ( org.springframework.integration.http.config.RootBeanDefinition != null ) { org.springframework.integration.http.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.http.config.RootBeanDefinition ) ; } }  <METHOD_END>
