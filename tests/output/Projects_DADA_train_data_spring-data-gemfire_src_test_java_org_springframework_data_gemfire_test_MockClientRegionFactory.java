<METHOD_START> public void ( StubCache org.springframework.data.gemfire.test.StubCache ) { super( org.springframework.data.gemfire.test.StubCache ); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public org.springframework.data.gemfire.test.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( ) { return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( ClientRegionShortcut . PROXY ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public org.springframework.data.gemfire.test.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( ClientRegionShortcut org.springframework.data.gemfire.test.ClientRegionShortcut ) { attributesFactory = new org . org.apache . org.apache . org.apache . org.apache < K , V > ( ) ; attributesFactory . setDataPolicy ( org.springframework.data.gemfire.test.DataPolicy ( org.springframework.data.gemfire.test.ClientRegionShortcut ) ) ; final ClientRegionFactory < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> = mock ( ClientRegionFactory .class , STRING ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . create ( anyString ( ) ) ) . thenAnswer ( new Answer < Region > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; Region org.springframework.data.gemfire.test.Region = mockRegion ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Region . getAttributesMutator ( ) ) . thenReturn ( mockAttributesMutator ) ; cache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . createSubregion ( any ( Region .class ) , anyString ( ) ) ) . thenAnswer ( new Answer < Region > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Region org.springframework.data.gemfire.test.Region = ( Region ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = org.springframework.data.gemfire.test.Region . getFullPath ( ) ; assert java.lang.String != null : STRING ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING + java.lang.String : STRING + java.lang.String + STRING + java.lang.String ) ; Region org.springframework.data.gemfire.test.Region = mockRegion ( java.lang.String ) ; cache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; cache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setCloningEnabled ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { attributesFactory . setCloningEnabled ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ) ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setCompressor ( any ( Compressor .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Compressor org.springframework.data.gemfire.test.Compressor = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setCompressor ( org.springframework.data.gemfire.test.Compressor ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; doAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { attributesFactory . setConcurrencyChecksEnabled ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ) ) ; return null ; } } ) . when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ) . setConcurrencyChecksEnabled ( anyBoolean ( ) ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setConcurrencyLevel ( anyInt ( ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { int int = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setConcurrencyLevel ( int ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setCustomEntryIdleTimeout ( any ( CustomExpiry .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry < K , V > org.springframework.data.gemfire.test.CustomExpiry<K,V> = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setCustomEntryIdleTimeout ( org.springframework.data.gemfire.test.CustomExpiry<K,V> ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setCustomEntryTimeToLive ( any ( CustomExpiry .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry < K , V > org.springframework.data.gemfire.test.CustomExpiry<K,V> = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setCustomEntryTimeToLive ( org.springframework.data.gemfire.test.CustomExpiry<K,V> ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setDiskStoreName ( anyString ( ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setDiskStoreName ( java.lang.String ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setDiskSynchronous ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { attributesFactory . setDiskSynchronous ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ) ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setEntryIdleTimeout ( any ( ExpirationAttributes .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setEntryIdleTimeout ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setEntryTimeToLive ( any ( ExpirationAttributes .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setEntryTimeToLive ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setEvictionAttributes ( any ( EvictionAttributes .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { EvictionAttributes org.springframework.data.gemfire.test.EvictionAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setEvictionAttributes ( org.springframework.data.gemfire.test.EvictionAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setInitialCapacity ( anyInt ( ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { int int = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setInitialCapacity ( int ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setKeyConstraint ( any ( java.lang.Class .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class java.lang.Class = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setKeyConstraint ( java.lang.Class ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setLoadFactor ( anyFloat ( ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { float float = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setLoadFactor ( float ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setPoolName ( anyString ( ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ) ; attributesFactory . setPoolName ( java.lang.String ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setRegionIdleTimeout ( any ( ExpirationAttributes .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setRegionIdleTimeout ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setRegionTimeToLive ( any ( ExpirationAttributes .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setRegionTimeToLive ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setStatisticsEnabled ( anyBoolean ( ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { attributesFactory . setStatisticsEnabled ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ) ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . setValueConstraint ( any ( java.lang.Class .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class java.lang.Class = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setValueConstraint ( java.lang.Class ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; when ( org.springframework.data.gemfire.test.ClientRegionFactory<K,V> . addCacheListener ( any ( CacheListener .class ) ) ) . thenAnswer ( new Answer < ClientRegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CacheListener org.springframework.data.gemfire.test.CacheListener = ( CacheListener ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . addCacheListener ( org.springframework.data.gemfire.test.CacheListener ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; } } ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; Region org.springframework.data.gemfire.test.Region = mockRegion ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.Region . getAttributesMutator ( ) ) . thenReturn ( mockAttributesMutator ) ; cache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.Region org.springframework.data.gemfire.test.Region ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Region org.springframework.data.gemfire.test.Region = ( Region ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.String java.lang.String = org.springframework.data.gemfire.test.Region . getFullPath ( ) ; assert java.lang.String != null : STRING ; java.lang.String java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String + STRING + java.lang.String : STRING + java.lang.String + STRING + java.lang.String ) ; Region org.springframework.data.gemfire.test.Region = mockRegion ( java.lang.String ) ; cache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; cache . allRegions ( ) . put ( java.lang.String , org.springframework.data.gemfire.test.Region ) ; return org.springframework.data.gemfire.test.Region ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { attributesFactory . setCloningEnabled ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ) ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { Compressor org.springframework.data.gemfire.test.Compressor = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setCompressor ( org.springframework.data.gemfire.test.Compressor ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { attributesFactory . setConcurrencyChecksEnabled ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { int int = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setConcurrencyLevel ( int ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry < K , V > org.springframework.data.gemfire.test.CustomExpiry<K,V> = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setCustomEntryIdleTimeout ( org.springframework.data.gemfire.test.CustomExpiry<K,V> ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry < K , V > org.springframework.data.gemfire.test.CustomExpiry<K,V> = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setCustomEntryTimeToLive ( org.springframework.data.gemfire.test.CustomExpiry<K,V> ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setDiskStoreName ( java.lang.String ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { attributesFactory . setDiskSynchronous ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ) ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setEntryIdleTimeout ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setEntryTimeToLive ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { EvictionAttributes org.springframework.data.gemfire.test.EvictionAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setEvictionAttributes ( org.springframework.data.gemfire.test.EvictionAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { int int = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setInitialCapacity ( int ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class java.lang.Class = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setKeyConstraint ( java.lang.Class ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { float float = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setLoadFactor ( float ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ) ; attributesFactory . setPoolName ( java.lang.String ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setRegionIdleTimeout ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { ExpirationAttributes org.springframework.data.gemfire.test.ExpirationAttributes = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setRegionTimeToLive ( org.springframework.data.gemfire.test.ExpirationAttributes ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { attributesFactory . setStatisticsEnabled ( java.lang.Boolean . java.lang.Boolean . boolean ( org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ) ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( final InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { java.lang.Class java.lang.Class = org.springframework.data.gemfire.test.InvocationOnMock . getArgument ( NUMBER ) ; attributesFactory . setValueConstraint ( java.lang.Class ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.ClientRegionFactory org.springframework.data.gemfire.test.ClientRegionFactory ( InvocationOnMock org.springframework.data.gemfire.test.InvocationOnMock ) throws java.lang.Throwable { CacheListener org.springframework.data.gemfire.test.CacheListener = ( CacheListener ) org.springframework.data.gemfire.test.InvocationOnMock . getArguments ( ) [ NUMBER ] ; attributesFactory . addCacheListener ( org.springframework.data.gemfire.test.CacheListener ) ; return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.test.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( ) { return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.test.ClientRegionFactory<K,V> < K , V > org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( ClientRegionShortcut org.springframework.data.gemfire.test.ClientRegionShortcut ) { return org.springframework.data.gemfire.test.ClientRegionFactory<K,V> ( org.springframework.data.gemfire.test.ClientRegionShortcut ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.test.DataPolicy org.springframework.data.gemfire.test.DataPolicy ( ClientRegionShortcut org.springframework.data.gemfire.test.ClientRegionShortcut ) { org.springframework.data.gemfire.test.ClientRegionShortcut = ( org.springframework.data.gemfire.test.ClientRegionShortcut != null ? org.springframework.data.gemfire.test.ClientRegionShortcut : ClientRegionShortcut . LOCAL ) ; switch ( org.springframework.data.gemfire.test.ClientRegionShortcut ) { case CACHING_PROXY : case CACHING_PROXY_HEAP_LRU : case CACHING_PROXY_OVERFLOW : case LOCAL : case LOCAL_HEAP_LRU : case LOCAL_OVERFLOW : return DataPolicy . NORMAL ; case LOCAL_PERSISTENT : case LOCAL_PERSISTENT_OVERFLOW : return DataPolicy . PERSISTENT_REPLICATE ; case PROXY : return DataPolicy . EMPTY ; default: return DataPolicy . NORMAL ; } }  <METHOD_END>
