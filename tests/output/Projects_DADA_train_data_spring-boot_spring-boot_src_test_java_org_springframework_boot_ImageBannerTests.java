<METHOD_START> @ Before public void void ( ) { AnsiOutput . setEnabled ( AnsiOutput . Enabled . ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { AnsiOutput . setEnabled ( Enabled . DETECT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.lang.String java.lang.String = AnsiOutput . encode ( AnsiColor . DEFAULT ) + AnsiOutput . encode ( AnsiBackground . DEFAULT ) ; assertThat ( java.lang.String ) . startsWith ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.String ) ; java.lang.String java.lang.String = AnsiOutput . encode ( AnsiColor . DEFAULT ) + AnsiOutput . encode ( AnsiBackground . BLACK ) ; assertThat ( java.lang.String ) . startsWith ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.lang.String java.lang.String = AnsiOutput . encode ( AnsiColor . BRIGHT_WHITE ) + char ; assertThat ( java.lang.String ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.String ) ; java.lang.String java.lang.String = AnsiOutput . encode ( AnsiColor . BRIGHT_WHITE ) + char ; assertThat ( java.lang.String ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.lang.String java.lang.String = AnsiOutput . encode ( AnsiColor . BLACK ) + char ; assertThat ( java.lang.String ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.String ) ; java.lang.String java.lang.String = AnsiOutput . encode ( AnsiColor . BLACK ) + char ; assertThat ( java.lang.String ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = java.lang.String ( STRING ) ; for ( AnsiColor org.springframework.boot.AnsiColor : AnsiColor . values ( ) ) { if ( org.springframework.boot.AnsiColor != AnsiColor . DEFAULT ) { assertThat ( java.lang.String ) . contains ( AnsiOutput . encode ( org.springframework.boot.AnsiColor ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnsiOutput . setEnabled ( AnsiOutput . Enabled . NEVER ) ; java.lang.String java.lang.String = java.lang.String ( STRING , STRING , STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING , STRING ) ; assertThat ( int ( java.lang.String ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( STRING , STRING , STRING ) ; assertThat ( int ( java.lang.String ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnsiOutput . setEnabled ( AnsiOutput . Enabled . NEVER ) ; java.lang.String java.lang.String = java.lang.String ( STRING , STRING ) ; assertThat ( int ( java.lang.String ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( java.lang.String ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnsiOutput . setEnabled ( AnsiOutput . Enabled . NEVER ) ; java.lang.String java.lang.String = java.lang.String ( STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( java.lang.String ) ; for ( int int = NUMBER ; int < java.lang.String[] . int - NUMBER ; int ++ ) { assertThat ( java.lang.String[] [ int ] ) . startsWith ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnsiOutput . setEnabled ( AnsiOutput . Enabled . NEVER ) ; java.lang.String java.lang.String = java.lang.String ( STRING , STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( java.lang.String ) ; for ( int int = NUMBER ; int < java.lang.String[] . int - NUMBER ; int ++ ) { assertThat ( java.lang.String[] [ int ] ) . startsWith ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String[] ( java.lang.String ) . int - NUMBER ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String ) { int int = NUMBER ; for ( java.lang.String java.lang.String : java.lang.String . java.lang.String[] ( java.lang.String ) ) { int = java.lang.Math . int ( int , java.lang.String . int ( ) ) ; } return int ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { ImageBanner org.springframework.boot.ImageBanner = new ImageBanner ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.boot.ImageBannerTests> ( ) ) ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new MockEnvironment ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.ConfigurableEnvironment , java.lang.String[] ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.boot.ImageBanner . printBanner ( org.springframework.boot.ConfigurableEnvironment , java.lang.Class<? extends org.springframework.boot.ImageBannerTests> ( ) , new java.io.PrintStream ( java.io.ByteArrayOutputStream ) ) ; return java.io.ByteArrayOutputStream . java.lang.String ( ) ; }  <METHOD_END>
