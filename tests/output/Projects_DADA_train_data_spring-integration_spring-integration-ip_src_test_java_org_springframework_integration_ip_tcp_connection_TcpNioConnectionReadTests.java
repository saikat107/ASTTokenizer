<METHOD_START> private org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( AbstractByteArraySerializer org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer , TcpListener org.springframework.integration.ip.tcp.connection.TcpListener ) throws java.lang.Exception { return org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer , org.springframework.integration.ip.tcp.connection.TcpListener , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( AbstractByteArraySerializer org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer , TcpListener org.springframework.integration.ip.tcp.connection.TcpListener , TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ) throws java.lang.Exception { TcpNioServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setUsingDirectBuffers ( true ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setApplicationEventPublisher ( e -> { } ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer ) ; org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . registerListener ( org.springframework.integration.ip.tcp.connection.TcpListener ) ; if ( org.springframework.integration.ip.tcp.connection.TcpSender != null ) { org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . registerSender ( org.springframework.integration.ip.tcp.connection.TcpSender ) ; } org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory , null ) ; return org.springframework.integration.ip.tcp.connection.TcpNioServerConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer , message -> { responses . add ( message ) ; semaphore . release ( ) ; return false ; } ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendLength ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) , java.util.concurrent.CountDownLatch ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . size ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( ( byte [] ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( ( byte [] ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer , message -> { responses . add ( message ) ; try { Thread . sleep ( NUMBER ) ; } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; } semaphore . release ( ) ; return false ; } ) ; int int = NUMBER ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setBacklog ( int + NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendFragmented ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) , int , false ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( int , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , int , java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . size ( ) ) ; for ( int int = NUMBER ; int < int ; int ++ ) { assertEquals ( STRING , STRING , new java.lang.String ( ( ( Message < byte [] > ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) ) . getPayload ( ) ) ) ; } org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ByteArrayStxEtxSerializer org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer = new ByteArrayStxEtxSerializer ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer , message -> { responses . add ( message ) ; semaphore . release ( ) ; return false ; } ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendStxEtx ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) , java.util.concurrent.CountDownLatch ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . size ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( ( ( Message < byte [] > ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) ) . getPayload ( ) ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( ( ( Message < byte [] > ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) ) . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer , message -> { responses . add ( message ) ; semaphore . release ( ) ; return false ; } ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendCrLf ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) , java.util.concurrent.CountDownLatch ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . size ( ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( ( ( Message < byte [] > ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) ) . getPayload ( ) ) ) ; assertEquals ( STRING , SocketTestUtils . TEST_STRING + SocketTestUtils . TEST_STRING , new java.lang.String ( ( ( Message < byte [] > ) java.util.List<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( NUMBER ) ) . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer , message -> { if ( message instanceof ErrorMessage ) { errorMessageRef . set ( ( ( ErrorMessage ) message ) . getPayload ( ) ) ; errorMessageLetch . countDown ( ) ; } return false ; } , new TcpSender ( ) { @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } } ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendLengthOverflow ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; void ( java.util.concurrent.Semaphore , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) . java.lang.String ( ) , anyOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) > NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayStxEtxSerializer org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer = new ByteArrayStxEtxSerializer ( ) ; org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer . setMaxMessageSize ( NUMBER ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer , message -> { if ( message instanceof ErrorMessage ) { errorMessageRef . set ( ( ( ErrorMessage ) message ) . getPayload ( ) ) ; errorMessageLetch . countDown ( ) ; } return false ; } , new TcpSender ( ) { @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } } ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendStxEtxOverflow ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; void ( java.util.concurrent.Semaphore , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) . java.lang.String ( ) , anyOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) > NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer . setMaxMessageSize ( NUMBER ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer , message -> { if ( message instanceof ErrorMessage ) { errorMessageRef . set ( ( ( ErrorMessage ) message ) . getPayload ( ) ) ; errorMessageLetch . countDown ( ) ; } return false ; } , new TcpSender ( ) { @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } } ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = SocketTestUtils . testSendCrLfOverflow ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; void ( java.util.concurrent.Semaphore , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) . java.lang.String ( ) , anyOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) > NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer . setMaxMessageSize ( NUMBER ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer , message -> { if ( message instanceof ErrorMessage ) { errorMessageRef . set ( ( ( ErrorMessage ) message ) . getPayload ( ) ) ; errorMessageLetch . countDown ( ) ; } return false ; } , new TcpSender ( ) { @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } } ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; java.net.Socket . void ( ) ; void ( java.util.concurrent.Semaphore , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) . java.lang.String ( ) , anyOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) > NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer . setMaxMessageSize ( NUMBER ) ; final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer , message -> { if ( message instanceof ErrorMessage ) { errorMessageRef . set ( ( ( ErrorMessage ) message ) . getPayload ( ) ) ; errorMessageLetch . countDown ( ) ; } return false ; } , new TcpSender ( ) { @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } } ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; java.net.Socket . java.io.OutputStream ( ) . void ( STRING . byte[] ( ) ) ; java.net.Socket . void ( ) ; void ( java.util.concurrent.Semaphore , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) . java.lang.String ( ) , anyOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) > NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; void ( org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; void ( org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer , ByteArrayStxEtxSerializer . STX + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( ) ; void ( org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractByteArraySerializer org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer , java.lang.String java.lang.String )			throws java.lang.Exception { final java.util.concurrent.Semaphore java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( NUMBER ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > ( ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer , message -> { if ( message instanceof ErrorMessage ) { errorMessageRef . set ( ( ( ErrorMessage ) message ) . getPayload ( ) ) ; errorMessageLetch . countDown ( ) ; } return false ; } , new TcpSender ( ) { @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; } } ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; java.net.Socket . java.io.OutputStream ( ) . void ( java.lang.String . byte[] ( ) ) ; java.net.Socket . void ( ) ; void ( java.util.concurrent.Semaphore , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) . java.lang.String ( ) , anyOf ( containsString ( STRING ) , containsString ( STRING ) , containsString ( STRING ) ) ) ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . size ( ) > NUMBER ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . add ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.concurrent.Semaphore java.util.concurrent.Semaphore , final java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> < TcpConnection > java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> )			throws java.lang.InterruptedException { int int = NUMBER ; assertTrue ( java.util.concurrent.Semaphore . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; while ( java.util.List<org.springframework.integration.ip.tcp.connection.TcpConnection> . get ( NUMBER ) . isOpen ( ) ) { java.lang.Thread . void ( NUMBER ) ; if ( int ++ > NUMBER ) { fail ( STRING ) ; } } }  <METHOD_END>
