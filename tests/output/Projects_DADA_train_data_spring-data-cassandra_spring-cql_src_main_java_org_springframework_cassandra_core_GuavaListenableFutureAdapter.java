<METHOD_START> public GuavaListenableFutureAdapter ( com . com.google . com.google . com.google . com.google . com.google < T > adaptee , PersistenceExceptionTranslator org.springframework.cassandra.core.PersistenceExceptionTranslator ) { Assert . notNull ( adaptee , STRING ) ; Assert . notNull ( org.springframework.cassandra.core.PersistenceExceptionTranslator , STRING ) ; this . adaptee = adaptee ; this . org.springframework.cassandra.core.ListenableFuture<T> = adaptListenableFuture ( adaptee , org.springframework.cassandra.core.PersistenceExceptionTranslator ) ; }  <METHOD_END>
<METHOD_START> private static < T > ListenableFuture < T > adaptListenableFuture ( com . com.google . com.google . com.google . com.google . com.google < T > guavaFuture , PersistenceExceptionTranslator org.springframework.cassandra.core.PersistenceExceptionTranslator ) { SettableListenableFuture < T > settableFuture = new SettableListenableFuture <> ( ) ; Futures . addCallback ( guavaFuture , new FutureCallback < T > ( ) { @ Override public void onSuccess ( T result ) { settableFuture . set ( result ) ; } @ Override public void onFailure ( Throwable t ) { if ( t instanceof RuntimeException ) { DataAccessException dataAccessException = exceptionTranslator . translateExceptionIfPossible ( ( RuntimeException ) t ) ; if ( dataAccessException != null ) { settableFuture . setException ( dataAccessException ) ; return; } } settableFuture . setException ( t ) ; } } ) ; return settableFuture ; }  <METHOD_END>
<METHOD_START> @ Override public void onSuccess ( T result ) { settableFuture . set ( result ) ; }  <METHOD_END>
<METHOD_START> @ Override public void onFailure ( Throwable t ) { if ( t instanceof RuntimeException ) { DataAccessException dataAccessException = exceptionTranslator . translateExceptionIfPossible ( ( RuntimeException ) t ) ; if ( dataAccessException != null ) { settableFuture . setException ( dataAccessException ) ; return; } } settableFuture . setException ( t ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ListenableFutureCallback < ? super T > org.springframework.cassandra.core.ListenableFutureCallback<? super T> ) { org.springframework.cassandra.core.ListenableFuture<T> . addCallback ( org.springframework.cassandra.core.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SuccessCallback < ? super T > org.springframework.cassandra.core.SuccessCallback<? super T> , FailureCallback org.springframework.cassandra.core.FailureCallback ) { org.springframework.cassandra.core.ListenableFuture<T> . addCallback ( org.springframework.cassandra.core.SuccessCallback<> , org.springframework.cassandra.core.FailureCallback ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( boolean boolean ) { return adaptee . cancel ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return adaptee . isCancelled ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.cassandra.core.ListenableFuture<T> . isDone ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { return org.springframework.cassandra.core.ListenableFuture<T> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException , java.util.concurrent.TimeoutException { return org.springframework.cassandra.core.ListenableFuture<T> . get ( long , java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
