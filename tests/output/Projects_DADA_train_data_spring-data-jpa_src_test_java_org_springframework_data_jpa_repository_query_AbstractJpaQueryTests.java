<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.jpa.repository.query.Query = mock ( Query .class ) ; org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> = mock ( TypedQuery .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.String .class ) ; AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery = new org.springframework.data.jpa.repository.query.AbstractJpaQueryTests.DummyJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( new java.lang.Object [] { STRING } ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setHint ( STRING , STRING ) ; org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createCountQuery ( new java.lang.Object [] { STRING } ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setHint ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.String .class ) ; AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery = new org.springframework.data.jpa.repository.query.AbstractJpaQueryTests.DummyJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( new java.lang.Object [] { STRING } ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setHint ( STRING , STRING ) ; org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createCountQuery ( new java.lang.Object [] { STRING } ) ; verify ( org.springframework.data.jpa.repository.query.Query , never ( ) ) . setHint ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.jpa.repository.query.Query . setLockMode ( any ( LockModeType .class ) ) ) . thenReturn ( org.springframework.data.jpa.repository.query.Query ) ; JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.Integer .class ) ; AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery = new org.springframework.data.jpa.repository.query.AbstractJpaQueryTests.DummyJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( new java.lang.Object [] { java.lang.Integer . java.lang.Integer ( NUMBER ) } ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setLockMode ( LockModeType . PESSIMISTIC_WRITE ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Assume . assumeTrue ( currentEntityManagerIsAJpa21EntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ) ; JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING ) ; javax . javax.persistence . javax.persistence < ? > entityGraph = org.springframework.data.jpa.repository.query.EntityManager . getEntityGraph ( STRING ) ; AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery = new org.springframework.data.jpa.repository.query.AbstractJpaQueryTests.DummyJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( new java.lang.Object [ NUMBER ] ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setHint ( STRING , entityGraph ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Assume . assumeTrue ( currentEntityManagerIsAJpa21EntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ) ; JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod = org.springframework.data.jpa.repository.query.JpaQueryMethod ( STRING , java.lang.Integer .class ) ; javax . javax.persistence . javax.persistence < ? > entityGraph = org.springframework.data.jpa.repository.query.EntityManager . getEntityGraph ( STRING ) ; AbstractJpaQuery org.springframework.data.jpa.repository.query.AbstractJpaQuery = new org.springframework.data.jpa.repository.query.AbstractJpaQueryTests.DummyJpaQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.AbstractJpaQuery . createQuery ( new java.lang.Object [] { NUMBER } ) ; verify ( org.springframework.data.jpa.repository.query.Query ) . setHint ( STRING , entityGraph ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.query.AbstractJpaQueryTests.SampleRepository .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; PersistenceProvider org.springframework.data.jpa.repository.query.PersistenceProvider = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.query.EntityManager ) ; return new JpaQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.jpa.repository.query.AbstractJpaQueryTests.SampleRepository .class ) , new SpelAwareProxyProjectionFactory ( ) , org.springframework.data.jpa.repository.query.PersistenceProvider ) ; }  <METHOD_END>
<METHOD_START> @ QueryHints ( { @ QueryHint ( name = STRING , value = STRING ) } ) java.util.List<org.springframework.data.jpa.repository.query.User> < User > java.util.List<org.springframework.data.jpa.repository.query.User> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ QueryHints ( value = { @ QueryHint ( name = STRING , value = STRING ) } , forCounting = false ) java.util.List<org.springframework.data.jpa.repository.query.User> < User > java.util.List<org.springframework.data.jpa.repository.query.User> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Lock ( LockModeType . PESSIMISTIC_WRITE ) @ org . springframework . data . jpa . repository . org.springframework.data.jpa.repository.Query ( STRING ) java.util.List<org.springframework.data.jpa.repository.query.User> < User > java.util.List<org.springframework.data.jpa.repository.query.User> ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ EntityGraph ( value = STRING , type = EntityGraphType . LOAD ) org.springframework.data.jpa.repository.query.User org.springframework.data.jpa.repository.query.User ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ EntityGraph ( STRING ) java.util.List<org.springframework.data.jpa.repository.query.User> < User > java.util.List<org.springframework.data.jpa.repository.query.User> ( )  <METHOD_END>
<METHOD_START> public void ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager ) { super( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.Object [] java.lang.Object[] ) { return org.springframework.data.jpa.repository.query.Query ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> < java.lang.Long > org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ( java.lang.Object [] java.lang.Object[] ) { return ( TypedQuery < java.lang.Long > ) org.springframework.data.jpa.repository.query.TypedQuery<java.lang.Long> ; }  <METHOD_END>
