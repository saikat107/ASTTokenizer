<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { java.io.File = org.springframework.integration.scripting.dsl.TemporaryFolder . newFile ( STRING ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { ( ( QueueChannelOperations ) this . org.springframework.integration.scripting.dsl.PollableChannel ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage <> ( STRING + int ) ) ; } assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.scripting.dsl.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; Message < ? > org.springframework.integration.scripting.dsl.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.scripting.dsl.MessageChannel . send ( org.springframework.integration.scripting.dsl.Message<> ) ; this . org.springframework.integration.scripting.dsl.MessageChannel . send ( org.springframework.integration.scripting.dsl.Message<> ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; java.io.File . boolean ( java.lang.System . long ( ) + NUMBER ) ; this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; this . org.springframework.integration.scripting.dsl.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.lang.InterruptedException { Message < ? > org.springframework.integration.scripting.dsl.Message<?> = this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.scripting.dsl.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.scripting.dsl.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( java.util.Date .class ) ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( ( ( java.util.Date ) java.lang.Object ) . boolean ( new java.util.Date ( ) ) ) ; assertNotNull ( this . org.springframework.integration.scripting.dsl.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.PollableChannel org.springframework.integration.scripting.dsl.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.IntegrationFlow org.springframework.integration.scripting.dsl.IntegrationFlow ( ) { return f -> f . split ( Scripts . processor ( this . splitterScript ) ) . channel ( results ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.IntegrationFlow org.springframework.integration.scripting.dsl.IntegrationFlow ( ) { return f -> f . transform ( Scripts . processor ( STRING ) . lang ( STRING ) . variable ( STRING , STRING ) ) . channel ( results ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.PollableChannel org.springframework.integration.scripting.dsl.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.IntegrationFlow org.springframework.integration.scripting.dsl.IntegrationFlow ( ) { return f -> f . filter ( Scripts . processor ( this . filterScript ) , e -> e . discardChannel ( STRING ) ) . channel ( results ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.IntegrationFlow org.springframework.integration.scripting.dsl.IntegrationFlow ( ) { return f -> f . handle ( Scripts . processor ( STRING + SCRIPT_FILE . getAbsolutePath ( ) ) . refreshCheckDelay ( NUMBER ) ) . channel ( results ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.IntegrationFlow org.springframework.integration.scripting.dsl.IntegrationFlow ( ) { return f -> f . route ( Scripts . processor ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.PollableChannel org.springframework.integration.scripting.dsl.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.PollableChannel org.springframework.integration.scripting.dsl.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.scripting.dsl.IntegrationFlow org.springframework.integration.scripting.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Scripts . messageSource ( STRING ) , e -> e . poller ( p -> p . fixedDelay ( NUMBER ) ) ) . channel ( c -> c . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
