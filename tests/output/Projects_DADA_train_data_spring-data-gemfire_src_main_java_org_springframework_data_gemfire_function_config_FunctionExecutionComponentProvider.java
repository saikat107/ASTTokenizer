<METHOD_START> public void ( java.lang.Iterable<? extends org.springframework.data.gemfire.function.config.TypeFilter> < ? extends TypeFilter > java.lang.Iterable<? extends org.springframework.data.gemfire.function.config.TypeFilter> , java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { super( false ); this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> = java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ; Assert . notNull ( java.lang.Iterable<> ) ; if ( java.lang.Iterable<> . java.util.Iterator<> ( ) . boolean ( ) ) { for ( TypeFilter org.springframework.data.gemfire.function.config.TypeFilter : java.lang.Iterable<> ) { void ( org.springframework.data.gemfire.function.config.TypeFilter ) ; } } else { for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { super. addIncludeFilter ( new org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider.AnnotationTypeFilter ( java.lang.Class<> , true , true ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TypeFilter org.springframework.data.gemfire.function.config.TypeFilter ) { java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> = new java.util.ArrayList<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > ( ) ; java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> . add ( org.springframework.data.gemfire.function.config.TypeFilter ) ; super. addIncludeFilter ( new org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider.AllTypeFilter ( java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> ) ) ; java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> = new java.util.ArrayList<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > ( ) ; java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> . add ( org.springframework.data.gemfire.function.config.TypeFilter ) ; for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> . add ( new org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider.AnnotationTypeFilter ( java.lang.Class<> , true , true ) ) ; } super. addIncludeFilter ( new org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider.AllTypeFilter ( java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( AnnotatedBeanDefinition org.springframework.data.gemfire.function.config.AnnotatedBeanDefinition ) { boolean boolean = ! org.springframework.data.gemfire.function.config.AnnotatedBeanDefinition . getMetadata ( ) . hasEnclosingClass ( ) ; return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { this( java.lang.Class<> , true ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , boolean boolean ) { this( java.lang.Class<> , boolean , false ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , boolean boolean , boolean boolean ) { super( java.lang.Class<> . boolean ( java.lang.annotation.Inherited .class ) , boolean ); this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( MetadataReader org.springframework.data.gemfire.function.config.MetadataReader ) { AnnotationMetadata org.springframework.data.gemfire.function.config.AnnotationMetadata = org.springframework.data.gemfire.function.config.MetadataReader . getAnnotationMetadata ( ) ; return org.springframework.data.gemfire.function.config.AnnotationMetadata . hasAnnotation ( this . java.lang.Class<> . java.lang.String ( ) ) || ( this . boolean && org.springframework.data.gemfire.function.config.AnnotationMetadata . hasMetaAnnotation ( this . java.lang.Class<> . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Boolean java.lang.Boolean ( java.lang.String java.lang.String ) { if ( java.lang.Object .class . java.lang.String ( ) . boolean ( java.lang.String ) ) { return java.lang.Boolean . java.lang.Boolean ; } else if ( java.lang.String . boolean ( STRING ) ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.data.gemfire.function.config.FunctionExecutionComponentProvider.AnnotationTypeFilter> ( ) . java.lang.ClassLoader ( ) . java.lang.Class<?> ( java.lang.String ) ; return ( java.lang.Class<> . getAnnotation ( this . java.lang.Class<> ) != null ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } } return null ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> ) { Assert . notNull ( java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> ) ; this . java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> = java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( MetadataReader org.springframework.data.gemfire.function.config.MetadataReader , MetadataReaderFactory org.springframework.data.gemfire.function.config.MetadataReaderFactory ) throws java.io.IOException { for ( TypeFilter org.springframework.data.gemfire.function.config.TypeFilter : java.util.List<org.springframework.data.gemfire.function.config.TypeFilter> ) { if ( ! org.springframework.data.gemfire.function.config.TypeFilter . match ( org.springframework.data.gemfire.function.config.MetadataReader , org.springframework.data.gemfire.function.config.MetadataReaderFactory ) ) { return false ; } } return true ; }  <METHOD_END>
