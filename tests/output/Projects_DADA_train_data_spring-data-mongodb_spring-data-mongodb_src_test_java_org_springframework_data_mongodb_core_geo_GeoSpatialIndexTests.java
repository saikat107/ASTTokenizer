<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.geo.MongoTemplate . setWriteConcern ( WriteConcern . FSYNC_SAFE ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.mongodb.core.geo.MongoTemplate . save ( new org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2D ( NUMBER , NUMBER ) ) ; assertThat ( boolean ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2D .class , STRING ) , is ( true ) ) ; } finally { org.springframework.data.mongodb.core.geo.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2D .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.mongodb.core.geo.MongoTemplate . save ( new org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2DSphere ( NUMBER , NUMBER ) ) ; assertThat ( boolean ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2DSphere .class , STRING ) , is ( true ) ) ; } finally { org.springframework.data.mongodb.core.geo.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2DSphere .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.mongodb.core.geo.MongoTemplate . save ( new org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntityHaystack ( NUMBER , NUMBER , STRING ) ) ; assertThat ( boolean ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntityHaystack .class , STRING ) , is ( true ) ) ; } finally { org.springframework.data.mongodb.core.geo.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntityHaystack .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2dWithGeneratedIndex org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2dWithGeneratedIndex = new org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2dWithGeneratedIndex ( NUMBER , NUMBER ) ; org.springframework.data.mongodb.core.geo.MongoTemplate . save ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2dWithGeneratedIndex ) ; IndexOperations org.springframework.data.mongodb.core.geo.IndexOperations = org.springframework.data.mongodb.core.geo.MongoTemplate . indexOps ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2dWithGeneratedIndex .class ) ; java.util.List<org.springframework.data.mongodb.core.geo.IndexInfo> < IndexInfo > java.util.List<org.springframework.data.mongodb.core.geo.IndexInfo> = org.springframework.data.mongodb.core.geo.IndexOperations . getIndexInfo ( ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.IndexInfo> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.IndexInfo> . get ( NUMBER ) , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.geo.IndexInfo> . get ( NUMBER ) . getName ( ) , is ( STRING ) ) ; } finally { org.springframework.data.mongodb.core.geo.MongoTemplate . dropCollection ( org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoSpatialEntity2D .class ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.String java.lang.String ) { return org.springframework.data.mongodb.core.geo.MongoTemplate . execute ( java.lang.Class<> , new CollectionCallback < java.lang.Boolean > ( ) { @ java.lang.SuppressWarnings ( STRING ) public java.lang.Boolean java.lang.Boolean ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> )					throws org.springframework.data.mongodb.core.geo.MongoException , org.springframework.data.mongodb.core.geo.DataAccessException { java.util.List<org.bson.Document> < org . org.bson . org.bson > java.util.List<org.bson.Document> = new java.util.ArrayList<org.bson.Document> < org . org.bson . org.bson > ( ) ; org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> . listIndexes ( org . org.bson . org.bson .class ) . into ( java.util.List<org.bson.Document> ) ; for ( org . org.bson . org.bson org.bson.Document : java.util.List<org.bson.Document> ) { org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.bson.Document ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { java.lang.Object java.lang.Object = org.bson.Document . get ( java.lang.String ) ; if ( java.lang.String . boolean ( java.lang.Object ) ) { return true ; } } } return false ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Boolean java.lang.Boolean ( MongoCollection < org . org.bson . org.bson > org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> )					throws org.springframework.data.mongodb.core.geo.MongoException , org.springframework.data.mongodb.core.geo.DataAccessException { java.util.List<org.bson.Document> < org . org.bson . org.bson > java.util.List<org.bson.Document> = new java.util.ArrayList<org.bson.Document> < org . org.bson . org.bson > ( ) ; org.springframework.data.mongodb.core.geo.MongoCollection<org.bson.Document> . listIndexes ( org . org.bson . org.bson .class ) . into ( java.util.List<org.bson.Document> ) ; for ( org . org.bson . org.bson org.bson.Document : java.util.List<org.bson.Document> ) { org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.bson.Document ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { java.lang.Object java.lang.Object = org.bson.Document . get ( java.lang.String ) ; if ( java.lang.String . boolean ( java.lang.Object ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> public void ( double double , double double ) { this . org.springframework.data.geo.Point = new org . springframework . data . org.springframework.data.geo . org.springframework.data.geo ( double , double ) ; }  <METHOD_END>
<METHOD_START> public void ( double double , double double , java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.core.geo.Point = new Point ( double , double ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( double double , double double ) { this . org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoJsonPoint = new org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoJsonPoint ( ) ; this . org.springframework.data.mongodb.core.geo.GeoSpatialIndexTests.GeoJsonPoint . double[] = new double [] { double , double } ; }  <METHOD_END>
<METHOD_START> public void ( double double , double double ) { this . org.springframework.data.mongodb.core.geo.Point = new Point ( double , double ) ; }  <METHOD_END>
