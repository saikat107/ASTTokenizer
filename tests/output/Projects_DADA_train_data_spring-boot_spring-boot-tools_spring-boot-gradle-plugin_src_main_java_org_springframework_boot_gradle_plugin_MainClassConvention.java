<METHOD_START> void ( Project org.springframework.boot.gradle.plugin.Project , java.util.function.Supplier<org.springframework.boot.gradle.plugin.FileCollection> < FileCollection > java.util.function.Supplier<org.springframework.boot.gradle.plugin.FileCollection> ) { this . org.springframework.boot.gradle.plugin.Project = org.springframework.boot.gradle.plugin.Project ; this . java.util.function.Supplier<org.springframework.boot.gradle.plugin.FileCollection> = java.util.function.Supplier<org.springframework.boot.gradle.plugin.FileCollection> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { if ( this . org.springframework.boot.gradle.plugin.Project . hasProperty ( STRING ) ) { return this . org.springframework.boot.gradle.plugin.Project . property ( STRING ) ; } return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . java.util.function.Supplier<org.springframework.boot.gradle.plugin.FileCollection> . get ( ) . filter ( java.io.File :: boolean ) . getFiles ( ) . stream ( ) . map ( this :: java.lang.String ) . filter ( java.util.Objects :: boolean ) . findFirst ( ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.io.File java.io.File ) { try { return MainClassFinder . findSingleMainClass ( java.io.File , java.lang.String ) ; } catch ( java.io.IOException java.io.IOException ) { return null ; } }  <METHOD_END>
