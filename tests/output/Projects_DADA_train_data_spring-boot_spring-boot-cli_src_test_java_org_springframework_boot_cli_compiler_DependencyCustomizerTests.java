<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; given ( this . org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver . getGroupId ( STRING ) ) . willReturn ( STRING ) ; given ( this . org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver . getArtifactId ( STRING ) ) . willReturn ( STRING ) ; this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( this . org.springframework.boot.cli.compiler.ClassNode ) ; this . org.springframework.boot.cli.compiler.DependencyCustomizer = new DependencyCustomizer ( new GroovyClassLoader ( java.lang.Class<? extends org.springframework.boot.cli.compiler.DependencyCustomizerTests> ( ) . java.lang.ClassLoader ( ) ) , this . org.springframework.boot.cli.compiler.ModuleNode , new DependencyResolutionContext ( ) { @ java.lang.Override public org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver ( ) { return org.springframework.boot.cli.compiler.DependencyCustomizerTests .this . org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver ( ) { return org.springframework.boot.cli.compiler.DependencyCustomizerTests .this . org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . add ( STRING ) ; java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> = this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ; assertThat ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) . hasSize ( NUMBER ) ; AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode = java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . get ( NUMBER ) ; void ( org.springframework.boot.cli.compiler.AnnotationNode , STRING , STRING , STRING , null , null , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . add ( STRING , false ) ; java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> = this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ; assertThat ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) . hasSize ( NUMBER ) ; AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode = java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . get ( NUMBER ) ; void ( org.springframework.boot.cli.compiler.AnnotationNode , STRING , STRING , STRING , null , null , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . add ( STRING , STRING , STRING , false ) ; java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> = this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ; assertThat ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) . hasSize ( NUMBER ) ; AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode = java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . get ( NUMBER ) ; void ( org.springframework.boot.cli.compiler.AnnotationNode , STRING , STRING , STRING , STRING , STRING , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . ifAnyMissingClasses ( STRING ) . add ( STRING ) ; assertThat ( this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . ifAnyMissingClasses ( java.lang.Class<? extends org.springframework.boot.cli.compiler.DependencyCustomizerTests> ( ) . java.lang.String ( ) , STRING ) . add ( STRING ) ; assertThat ( this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . ifAnyMissingClasses ( java.lang.Class<? extends org.springframework.boot.cli.compiler.DependencyCustomizerTests> ( ) . java.lang.String ( ) ) . add ( STRING ) ; assertThat ( this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . ifAllMissingClasses ( java.lang.Class<? extends org.springframework.boot.cli.compiler.DependencyCustomizerTests> ( ) . java.lang.String ( ) ) . add ( STRING ) ; assertThat ( this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . ifAllMissingClasses ( java.lang.Class<? extends org.springframework.boot.cli.compiler.DependencyCustomizerTests> ( ) . java.lang.String ( ) , STRING ) . add ( STRING ) ; assertThat ( this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.DependencyCustomizer . ifAllMissingClasses ( STRING , STRING ) . add ( STRING ) ; assertThat ( this . org.springframework.boot.cli.compiler.ClassNode . getAnnotations ( new ClassNode ( Grab .class ) ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean ) { assertThat ( java.lang.Object ( org.springframework.boot.cli.compiler.AnnotationNode , STRING ) ) . isEqualTo ( java.lang.String ) ; assertThat ( java.lang.Object ( org.springframework.boot.cli.compiler.AnnotationNode , STRING ) ) . isEqualTo ( java.lang.String ) ; if ( java.lang.String == null ) { assertThat ( org.springframework.boot.cli.compiler.AnnotationNode . getMember ( STRING ) ) . isNull ( ) ; } else { assertThat ( java.lang.Object ( org.springframework.boot.cli.compiler.AnnotationNode , STRING ) ) . isEqualTo ( java.lang.String ) ; } if ( java.lang.String == null ) { assertThat ( org.springframework.boot.cli.compiler.AnnotationNode . getMember ( STRING ) ) . isNull ( ) ; } else { assertThat ( java.lang.Object ( org.springframework.boot.cli.compiler.AnnotationNode , STRING ) ) . isEqualTo ( java.lang.String ) ; } assertThat ( java.lang.Object ( org.springframework.boot.cli.compiler.AnnotationNode , STRING ) ) . isEqualTo ( boolean ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode , java.lang.String java.lang.String ) { return ( ( ConstantExpression ) org.springframework.boot.cli.compiler.AnnotationNode . getMember ( java.lang.String ) ) . getValue ( ) ; }  <METHOD_END>
