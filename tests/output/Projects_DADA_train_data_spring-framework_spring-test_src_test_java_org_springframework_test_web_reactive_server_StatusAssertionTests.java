<METHOD_START> @ Test public void void ( ) java.lang.Exception { StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions = org.springframework.test.web.reactive.server.StatusAssertions ( HttpStatus . CONFLICT ) ; org.springframework.test.web.reactive.server.StatusAssertions . isEqualTo ( HttpStatus . CONFLICT ) ; org.springframework.test.web.reactive.server.StatusAssertions . isEqualTo ( NUMBER ) ; try { org.springframework.test.web.reactive.server.StatusAssertions . isEqualTo ( HttpStatus . REQUEST_TIMEOUT ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } try { org.springframework.test.web.reactive.server.StatusAssertions . isEqualTo ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions = org.springframework.test.web.reactive.server.StatusAssertions ( HttpStatus . CONFLICT ) ; org.springframework.test.web.reactive.server.StatusAssertions . reasonEquals ( STRING ) ; try { org.springframework.test.web.reactive.server.StatusAssertions . reasonEquals ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions = org.springframework.test.web.reactive.server.StatusAssertions ( HttpStatus . CONTINUE ) ; org.springframework.test.web.reactive.server.StatusAssertions . is1xxInformational ( ) ; try { org.springframework.test.web.reactive.server.StatusAssertions . is2xxSuccessful ( ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions = org.springframework.test.web.reactive.server.StatusAssertions ( HttpStatus . OK ) ; org.springframework.test.web.reactive.server.StatusAssertions . is2xxSuccessful ( ) ; try { org.springframework.test.web.reactive.server.StatusAssertions . is5xxServerError ( ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions = org.springframework.test.web.reactive.server.StatusAssertions ( HttpStatus . PERMANENT_REDIRECT ) ; org.springframework.test.web.reactive.server.StatusAssertions . is3xxRedirection ( ) ; try { org.springframework.test.web.reactive.server.StatusAssertions . is2xxSuccessful ( ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions = org.springframework.test.web.reactive.server.StatusAssertions ( HttpStatus . BAD_REQUEST ) ; org.springframework.test.web.reactive.server.StatusAssertions . is4xxClientError ( ) ; try { org.springframework.test.web.reactive.server.StatusAssertions . is2xxSuccessful ( ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions = org.springframework.test.web.reactive.server.StatusAssertions ( HttpStatus . INTERNAL_SERVER_ERROR ) ; org.springframework.test.web.reactive.server.StatusAssertions . is5xxServerError ( ) ; try { org.springframework.test.web.reactive.server.StatusAssertions . is2xxSuccessful ( ) ; fail ( STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { } }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.reactive.server.StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions ( HttpStatus org.springframework.test.web.reactive.server.HttpStatus ) { MockClientHttpRequest org.springframework.test.web.reactive.server.MockClientHttpRequest = new MockClientHttpRequest ( HttpMethod . GET , java.net.URI . java.net.URI ( STRING ) ) ; MockClientHttpResponse org.springframework.test.web.reactive.server.MockClientHttpResponse = new MockClientHttpResponse ( org.springframework.test.web.reactive.server.HttpStatus ) ; WiretapClientHttpRequest org.springframework.test.web.reactive.server.WiretapClientHttpRequest = new WiretapClientHttpRequest ( org.springframework.test.web.reactive.server.MockClientHttpRequest ) ; WiretapClientHttpResponse org.springframework.test.web.reactive.server.WiretapClientHttpResponse = new WiretapClientHttpResponse ( org.springframework.test.web.reactive.server.MockClientHttpResponse ) ; ExchangeResult org.springframework.test.web.reactive.server.ExchangeResult = new ExchangeResult ( org.springframework.test.web.reactive.server.WiretapClientHttpRequest , org.springframework.test.web.reactive.server.WiretapClientHttpResponse ) ; return new StatusAssertions ( org.springframework.test.web.reactive.server.ExchangeResult , mock ( WebTestClient . WebTestClient .class ) ) ; }  <METHOD_END>
