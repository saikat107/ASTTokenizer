<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , STRING ) ; } } ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , STRING ) ; } } ; java.util.Properties java.util.Properties = new java.util.Properties ( ) { { java.lang.Object ( STRING , STRING ) ; } } ; java.util.Properties java.util.Properties = new java.util.Properties ( ) { { java.lang.Object ( STRING , STRING ) ; } } ; MapPropertySource org.springframework.core.env.MapPropertySource = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; assertThat ( org.springframework.core.env.MapPropertySource , equalTo ( org.springframework.core.env.MapPropertySource ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) , is ( true ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) , is ( true ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) , is ( true ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) , is ( true ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new java.lang.Object ( ) ) , is ( false ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( STRING ) , is ( false ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) , is ( false ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) , is ( false ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) , is ( false ) ) ; assertThat ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) . equals ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , STRING ) ; } } ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) { { java.lang.Object ( STRING , STRING ) ; } } ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.core.env.PropertySource<> . getSource ( ) ; java.util.List<org.springframework.core.env.PropertySource<?>> < PropertySource < ? > > java.util.List<org.springframework.core.env.PropertySource<?>> = new java.util.ArrayList<org.springframework.core.env.PropertySource<?>> <> ( ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . add ( org.springframework.core.env.PropertySource<> ) , equalTo ( true ) ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . contains ( org.springframework.core.env.PropertySource<> ) , is ( true ) ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . contains ( PropertySource . named ( STRING ) ) , is ( true ) ) ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . add ( org.springframework.core.env.PropertySource<> ) , is ( true ) ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . remove ( PropertySource . named ( STRING ) ) , is ( true ) ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . remove ( PropertySource . named ( STRING ) ) , is ( true ) ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . size ( ) , is ( NUMBER ) ) ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<org.springframework.core.env.PropertySource<?>> . add ( org.springframework.core.env.PropertySource<> ) ; java.util.List<org.springframework.core.env.PropertySource<?>> . add ( org.springframework.core.env.PropertySource<> ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . indexOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.core.env.PropertySource<?>> . indexOf ( PropertySource . named ( STRING ) ) , is ( NUMBER ) ) ; java.util.List<org.springframework.core.env.PropertySource<?>> . clear ( ) ; }  <METHOD_END>
