<METHOD_START> @ java.lang.Override public void void ( ExecuteContext org.springframework.boot.autoconfigure.jooq.ExecuteContext ) { SQLExceptionTranslator org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator = org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator ( org.springframework.boot.autoconfigure.jooq.ExecuteContext ) ; java.sql.SQLException java.sql.SQLException = org.springframework.boot.autoconfigure.jooq.ExecuteContext . sqlException ( ) ; while ( java.sql.SQLException != null ) { void ( org.springframework.boot.autoconfigure.jooq.ExecuteContext , org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator , java.sql.SQLException ) ; java.sql.SQLException = java.sql.SQLException . java.sql.SQLException ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator ( ExecuteContext org.springframework.boot.autoconfigure.jooq.ExecuteContext ) { SQLDialect org.springframework.boot.autoconfigure.jooq.SQLDialect = org.springframework.boot.autoconfigure.jooq.ExecuteContext . configuration ( ) . dialect ( ) ; if ( org.springframework.boot.autoconfigure.jooq.SQLDialect != null && org.springframework.boot.autoconfigure.jooq.SQLDialect . thirdParty ( ) != null ) { java.lang.String java.lang.String = org.springframework.boot.autoconfigure.jooq.SQLDialect . thirdParty ( ) . springDbName ( ) ; if ( java.lang.String != null ) { return new SQLErrorCodeSQLExceptionTranslator ( java.lang.String ) ; } } return new SQLStateSQLExceptionTranslator ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ExecuteContext org.springframework.boot.autoconfigure.jooq.ExecuteContext , SQLExceptionTranslator org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator , java.sql.SQLException java.sql.SQLException ) { DataAccessException org.springframework.boot.autoconfigure.jooq.DataAccessException = org.springframework.boot.autoconfigure.jooq.DataAccessException ( org.springframework.boot.autoconfigure.jooq.ExecuteContext , org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator , java.sql.SQLException ) ; if ( java.sql.SQLException . java.sql.SQLException ( ) == null ) { org.springframework.boot.autoconfigure.jooq.ExecuteContext . exception ( org.springframework.boot.autoconfigure.jooq.DataAccessException ) ; } else { org.springframework.boot.autoconfigure.jooq.Log . error ( STRING , org.springframework.boot.autoconfigure.jooq.DataAccessException ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jooq.DataAccessException org.springframework.boot.autoconfigure.jooq.DataAccessException ( ExecuteContext org.springframework.boot.autoconfigure.jooq.ExecuteContext , SQLExceptionTranslator org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator , java.sql.SQLException java.sql.SQLException ) { return org.springframework.boot.autoconfigure.jooq.SQLExceptionTranslator . translate ( STRING , org.springframework.boot.autoconfigure.jooq.ExecuteContext . sql ( ) , java.sql.SQLException ) ; }  <METHOD_END>
