<METHOD_START> public void ( ) { this . org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator = new org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , E extends org.springframework.data.convert.PersistentEntity<? extends T,P> < ? extends T , P > , P extends org.springframework.data.convert.PersistentProperty<P> < P > > T T ( E E , ParameterValueProvider < P > org.springframework.data.convert.ParameterValueProvider<P> ) { EntityInstantiator org.springframework.data.convert.EntityInstantiator = this . java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> . get ( E . getTypeInformation ( ) ) ; if ( org.springframework.data.convert.EntityInstantiator == null ) { org.springframework.data.convert.EntityInstantiator = org.springframework.data.convert.EntityInstantiator ( E ) ; } return org.springframework.data.convert.EntityInstantiator . createInstance ( E , org.springframework.data.convert.ParameterValueProvider<P> ) ; }  <METHOD_END>
<METHOD_START> private synchronized org.springframework.data.convert.EntityInstantiator org.springframework.data.convert.EntityInstantiator ( PersistentEntity < ? , ? > org.springframework.data.convert.PersistentEntity<?,?> ) { java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> < TypeInformation < ? > , EntityInstantiator > java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> = this . java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> ; EntityInstantiator org.springframework.data.convert.EntityInstantiator = java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> . get ( org.springframework.data.convert.PersistentEntity<,> . getTypeInformation ( ) ) ; if ( org.springframework.data.convert.EntityInstantiator != null ) { return org.springframework.data.convert.EntityInstantiator ; } org.springframework.data.convert.EntityInstantiator = org.springframework.data.convert.EntityInstantiator ( org.springframework.data.convert.PersistentEntity<,> ) ; java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> = new java.util.HashMap <> ( java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> ) ; java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> . put ( org.springframework.data.convert.PersistentEntity<,> . getTypeInformation ( ) , org.springframework.data.convert.EntityInstantiator ) ; this . java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> = java.util.Map<org.springframework.data.convert.TypeInformation<?>,org.springframework.data.convert.EntityInstantiator> ; return org.springframework.data.convert.EntityInstantiator ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.convert.EntityInstantiator org.springframework.data.convert.EntityInstantiator ( PersistentEntity < ? , ? > org.springframework.data.convert.PersistentEntity<?,?> ) { if ( boolean ( org.springframework.data.convert.PersistentEntity<,> ) ) { return ReflectionEntityInstantiator . INSTANCE ; } try { return new org.springframework.data.convert.ClassGeneratingEntityInstantiator.EntityInstantiatorAdapter ( org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator ( org.springframework.data.convert.PersistentEntity<,> ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return ReflectionEntityInstantiator . INSTANCE ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( PersistentEntity < ? , ? > org.springframework.data.convert.PersistentEntity<?,?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.convert.PersistentEntity<,> . getType ( ) ; if ( java.lang.Class<> . boolean ( ) || java.lang.Class<> . boolean ( ) || ! java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) || ( java.lang.Class<> . boolean ( ) && ! java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) ) || ClassUtils . isCglibProxyClass ( java.lang.Class<> ) ) { return true ; } return org.springframework.data.convert.PersistentEntity<,> . getPersistenceConstructor ( ) . map ( PreferredConstructor :: getConstructor ) . map ( java.lang.reflect.Constructor :: getModifiers ) . map ( modifier -> ! Modifier . isPublic ( modifier ) ) . orElse ( false ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator ( PersistentEntity < ? , ? > org.springframework.data.convert.PersistentEntity<?,?> ) { try { return ( org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator ) this . org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator . java.lang.Class<?> ( org.springframework.data.convert.PersistentEntity<,> ) . newInstance ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator ) { this . org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator = org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T , E extends org.springframework.data.convert.PersistentEntity<? extends T,P> < ? extends T , P > , P extends org.springframework.data.convert.PersistentProperty<P> < P > > T T ( E E , ParameterValueProvider < P > org.springframework.data.convert.ParameterValueProvider<P> ) { java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( E . getPersistenceConstructor ( ) , org.springframework.data.convert.ParameterValueProvider<P> ) ; try { return ( T ) org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiator . java.lang.Object ( java.lang.Object[] ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MappingInstantiationException ( java.util.Optional . java.util.Optional<E> ( E ) , java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private < P extends org.springframework.data.convert.PersistentProperty<P> < P > , T > java.lang.Object [] java.lang.Object[] ( java.util.Optional<? extends org.springframework.data.convert.PreferredConstructor<? extends T,P>> < ? extends PreferredConstructor < ? extends T , P > > java.util.Optional<? extends org.springframework.data.convert.PreferredConstructor<? extends T,P>> , ParameterValueProvider < P > org.springframework.data.convert.ParameterValueProvider<P> ) { return java.util.Optional<> . java.util.Optional<java.lang.Object> ( it -> { if ( org.springframework.data.convert.ParameterValueProvider<P> == null || ! it . hasParameters ( ) ) { return java.lang.Object[] ; } return it . getParameters ( ) . stream ( ) . map ( org.springframework.data.convert.ParameterValueProvider<P> :: getParameterValue ) . toArray ( ) ; } ) . orElse ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( java.lang.Object ... java.lang.Object[] );  <METHOD_END>
<METHOD_START> private void ( ) { this . org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator.ByteArrayClassLoader = java.security.AccessController . org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator.ByteArrayClassLoader ( ( java.security.PrivilegedAction<org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator.ByteArrayClassLoader> < org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator.ByteArrayClassLoader > ) ( ) new org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator.ByteArrayClassLoader ( ClassUtils . getDefaultClassLoader ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( PersistentEntity < ? , ? > org.springframework.data.convert.PersistentEntity<?,?> ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.data.convert.PersistentEntity<,> ) ; byte [] byte[] = byte[] ( java.lang.String , org.springframework.data.convert.PersistentEntity<,> ) ; return org.springframework.data.convert.ClassGeneratingEntityInstantiator.ObjectInstantiatorClassGenerator.ByteArrayClassLoader . java.lang.Class<?> ( java.lang.String , byte[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( PersistentEntity < ? , ? > org.springframework.data.convert.PersistentEntity<?,?> ) { return org.springframework.data.convert.PersistentEntity<,> . getType ( ) . getName ( ) + java.lang.String + java.lang.Integer . java.lang.String ( org.springframework.data.convert.PersistentEntity<,> . hashCode ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( java.lang.String java.lang.String , PersistentEntity < ? , ? > org.springframework.data.convert.PersistentEntity<?,?> ) { ClassWriter org.springframework.data.convert.ClassWriter = new ClassWriter ( ClassWriter . COMPUTE_MAXS ) ; org.springframework.data.convert.ClassWriter . visit ( Opcodes . V1_6 , ACC_PUBLIC + ACC_SUPER , java.lang.String . java.lang.String ( '.' , '/' ) , null , java.lang.String , java.lang.String[] ) ; void ( org.springframework.data.convert.ClassWriter ) ; void ( org.springframework.data.convert.ClassWriter , org.springframework.data.convert.PersistentEntity<,> ) ; org.springframework.data.convert.ClassWriter . visitEnd ( ) ; return org.springframework.data.convert.ClassWriter . toByteArray ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassWriter org.springframework.data.convert.ClassWriter ) { MethodVisitor org.springframework.data.convert.MethodVisitor = org.springframework.data.convert.ClassWriter . visitMethod ( ACC_PUBLIC , java.lang.String , STRING , null , null ) ; org.springframework.data.convert.MethodVisitor . visitCode ( ) ; org.springframework.data.convert.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKESPECIAL , java.lang.String , java.lang.String , STRING , false ) ; org.springframework.data.convert.MethodVisitor . visitInsn ( RETURN ) ; org.springframework.data.convert.MethodVisitor . visitMaxs ( NUMBER , NUMBER ) ; org.springframework.data.convert.MethodVisitor . visitEnd ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassWriter org.springframework.data.convert.ClassWriter , PersistentEntity < ? , ? > org.springframework.data.convert.PersistentEntity<?,?> ) { java.lang.String java.lang.String = Type . getInternalName ( org.springframework.data.convert.PersistentEntity<,> . getType ( ) ) ; MethodVisitor org.springframework.data.convert.MethodVisitor = org.springframework.data.convert.ClassWriter . visitMethod ( ACC_PUBLIC + ACC_VARARGS , java.lang.String , STRING , null , null ) ; org.springframework.data.convert.MethodVisitor . visitCode ( ) ; org.springframework.data.convert.MethodVisitor . visitTypeInsn ( NEW , java.lang.String ) ; org.springframework.data.convert.MethodVisitor . visitInsn ( DUP ) ; org.springframework.data.convert.PersistentEntity<,> . getPersistenceConstructor ( ) . ifPresent ( constructor -> { Constructor < ? > ctor = constructor . getConstructor ( ) ; Class < ? > [] parameterTypes = ctor . getParameterTypes ( ) ; for ( int i = NUMBER ; i < parameterTypes . length ; i ++ ) { mv . visitVarInsn ( ALOAD , NUMBER ) ; visitArrayIndex ( mv , i ) ; mv . visitInsn ( AALOAD ) ; if ( parameterTypes [ i ] . isPrimitive ( ) ) { insertUnboxInsns ( mv , Type . getType ( parameterTypes [ i ] ) . toString ( ) . charAt ( NUMBER ) , STRING ) ; } else { mv . visitTypeInsn ( CHECKCAST , Type . getInternalName ( parameterTypes [ i ] ) ) ; } } mv . visitMethodInsn ( INVOKESPECIAL , entityTypeResourcePath , INIT , Type . getConstructorDescriptor ( ctor ) , false ) ; mv . visitInsn ( ARETURN ) ; mv . visitMaxs ( NUMBER , NUMBER ) ; mv . visitEnd ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> private static void void ( MethodVisitor org.springframework.data.convert.MethodVisitor , int int ) { if ( int >= NUMBER && int < NUMBER ) { org.springframework.data.convert.MethodVisitor . visitInsn ( ICONST_0 + int ) ; return; } org.springframework.data.convert.MethodVisitor . visitLdcInsn ( int ) ; }  <METHOD_END>
<METHOD_START> private static void void ( MethodVisitor org.springframework.data.convert.MethodVisitor , char char , java.lang.String java.lang.String ) { switch ( char ) { case 'Z' : if ( ! java.lang.String . boolean ( STRING ) ) { org.springframework.data.convert.MethodVisitor . visitTypeInsn ( CHECKCAST , STRING ) ; } org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; break; case 'B' : if ( ! java.lang.String . boolean ( STRING ) ) { org.springframework.data.convert.MethodVisitor . visitTypeInsn ( CHECKCAST , STRING ) ; } org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; break; case 'C' : if ( ! java.lang.String . boolean ( STRING ) ) { org.springframework.data.convert.MethodVisitor . visitTypeInsn ( CHECKCAST , STRING ) ; } org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; break; case 'D' : if ( ! java.lang.String . boolean ( STRING ) ) { org.springframework.data.convert.MethodVisitor . visitTypeInsn ( CHECKCAST , STRING ) ; } org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; break; case 'F' : if ( ! java.lang.String . boolean ( STRING ) ) { org.springframework.data.convert.MethodVisitor . visitTypeInsn ( CHECKCAST , STRING ) ; } org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; break; case 'I' : if ( ! java.lang.String . boolean ( STRING ) ) { org.springframework.data.convert.MethodVisitor . visitTypeInsn ( CHECKCAST , STRING ) ; } org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; break; case 'J' : if ( ! java.lang.String . boolean ( STRING ) ) { org.springframework.data.convert.MethodVisitor . visitTypeInsn ( CHECKCAST , STRING ) ; } org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; break; case 'S' : if ( ! java.lang.String . boolean ( STRING ) ) { org.springframework.data.convert.MethodVisitor . visitTypeInsn ( CHECKCAST , STRING ) ; } org.springframework.data.convert.MethodVisitor . visitMethodInsn ( INVOKEVIRTUAL , STRING , STRING , STRING , false ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + char + STRING ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , byte [] byte[] ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( byte[] , STRING ) ; try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String ) ; if ( java.lang.Class<> != null ) { return java.lang.Class<> ; } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) {} return java.lang.Class<?> ( java.lang.String , byte[] , NUMBER , byte[] . int ) ; }  <METHOD_END>
