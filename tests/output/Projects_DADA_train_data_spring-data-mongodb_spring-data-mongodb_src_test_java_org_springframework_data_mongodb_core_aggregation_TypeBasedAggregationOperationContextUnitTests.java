<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.mongodb.core.aggregation.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.core.aggregation.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.core.aggregation.DbRefResolver , org.springframework.data.mongodb.core.aggregation.MongoMappingContext ) ; this . org.springframework.data.mongodb.core.aggregation.QueryMapper = new QueryMapper ( org.springframework.data.mongodb.core.aggregation.MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Foo .class ) . getReference ( STRING ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MappingException .class ) public void void ( ) { org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Foo .class ) . getReference ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Foo .class ) ; Field org.springframework.data.mongodb.core.aggregation.Field = field ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( org.springframework.data.mongodb.core.aggregation.Field ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( org.springframework.data.mongodb.core.aggregation.Field ) , is ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Foo .class ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.AggregationOperationContext . getReference ( STRING ) , is ( ( FieldReference ) new DirectFieldReference ( new ExposedField ( field ( STRING , STRING ) , true ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.mongodb.core.aggregation.CustomConversions = org.springframework.data.mongodb.core.aggregation.CustomConversions ( ) ; org.springframework.data.mongodb.core.aggregation.MappingMongoConverter . setCustomConversions ( org.springframework.data.mongodb.core.aggregation.CustomConversions ) ; org.springframework.data.mongodb.core.aggregation.CustomConversions . registerConvertersIn ( ( GenericConversionService ) org.springframework.data.mongodb.core.aggregation.MappingMongoConverter . getConversionService ( ) ) ; AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class ) ; MatchOperation org.springframework.data.mongodb.core.aggregation.MatchOperation = match ( Criteria . where ( STRING ) . is ( new org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ( NUMBER ) ) ) ; ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = project ( STRING , STRING ) ; org . org.bson . org.bson org.bson.Document = newAggregation ( org.springframework.data.mongodb.core.aggregation.MatchOperation , org.springframework.data.mongodb.core.aggregation.ProjectionOperation ) . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; org . org.bson . org.bson org.bson.Document = T ( ( org . org.bson . org.bson ) java.lang.Object ( org.bson.Document ( org.bson.Document , NUMBER ) , STRING ) , STRING ) ; assertThat ( org.bson.Document , is ( new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.mongodb.core.aggregation.CustomConversions = org.springframework.data.mongodb.core.aggregation.CustomConversions ( ) ; org.springframework.data.mongodb.core.aggregation.MappingMongoConverter . setCustomConversions ( org.springframework.data.mongodb.core.aggregation.CustomConversions ) ; org.springframework.data.mongodb.core.aggregation.CustomConversions . registerConvertersIn ( ( GenericConversionService ) org.springframework.data.mongodb.core.aggregation.MappingMongoConverter . getConversionService ( ) ) ; AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class ) ; MatchOperation org.springframework.data.mongodb.core.aggregation.MatchOperation = match ( Criteria . where ( STRING ) . is ( new org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ( NUMBER ) ) ) ; ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = project ( STRING , STRING ) ; org . org.bson . org.bson org.bson.Document = newAggregation ( org.springframework.data.mongodb.core.aggregation.ProjectionOperation , org.springframework.data.mongodb.core.aggregation.MatchOperation ) . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; org . org.bson . org.bson org.bson.Document = T ( ( org . org.bson . org.bson ) java.lang.Object ( org.bson.Document ( org.bson.Document , NUMBER ) , STRING ) , STRING ) ; assertThat ( org.bson.Document , is ( new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class ) ; TypedAggregation < org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson> = newAggregation ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class , project ( STRING , STRING ) ) . withOptions ( newAggregationOptions ( ) . allowDiskUse ( true ) . explain ( true ) . cursor ( new org . org.bson . org.bson ( STRING , NUMBER ) ) . build ( ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; org . org.bson . org.bson org.bson.Document = org.bson.Document ( org.bson.Document , NUMBER ) ; assertThat ( org.bson.Document . containsKey ( STRING ) , is ( true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) new org . org.bson . org.bson ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) true ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeBasedAggregationOperationContext org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( MeterData .class ) ; TypedAggregation < MeterData > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> = newAggregation ( MeterData .class , project ( ) . and ( STRING ) . as ( STRING ) , sort ( Direction . ASC , STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.bson.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = ( Document ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( equalTo ( ( java.lang.Object ) NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class ) ; TypedAggregation < org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson> = newAggregation ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class , project ( ) . and ( STRING ) . as ( STRING ) . and ( STRING ) . as ( STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.bson.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER ) ; assertThat ( getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeBasedAggregationOperationContext org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( MeterData .class ) ; TypedAggregation < MeterData > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> = newAggregation ( MeterData .class , group ( STRING ) . sum ( STRING ) . as ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ) ; org . org.bson . org.bson org.bson.Document = org.bson.Document ( org.bson.Document , NUMBER ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( equalTo ( ( java.lang.Object ) STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeBasedAggregationOperationContext org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( MeterData .class ) ; TypedAggregation < MeterData > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> = newAggregation ( MeterData .class , lookup ( STRING , STRING , STRING , STRING ) , sort ( Direction . ASC , STRING , STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ) ; org . org.bson . org.bson org.bson.Document = org.bson.Document ( org.bson.Document , NUMBER ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( equalTo ( ( java.lang.Object ) NUMBER ) ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( equalTo ( ( java.lang.Object ) NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeBasedAggregationOperationContext org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( MeterData .class ) ; TypedAggregation < MeterData > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> = newAggregation ( MeterData .class , group ( ) . min ( STRING ) . as ( STRING ) , lookup ( STRING , STRING , STRING , STRING ) , sort ( Direction . ASC , STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ) ; org . org.bson . org.bson org.bson.Document = org.bson.Document ( org.bson.Document , NUMBER ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( equalTo ( ( java.lang.Object ) NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeBasedAggregationOperationContext org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( MeterData .class ) ; TypedAggregation < MeterData > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> = newAggregation ( MeterData .class , lookup ( STRING , STRING , STRING , STRING ) , group ( ) . min ( STRING ) . as ( STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ) ; org . org.bson . org.bson org.bson.Document = org.bson.Document ( org.bson.Document , NUMBER ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( equalTo ( ( java.lang.Object ) STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeBasedAggregationOperationContext org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( MeterData .class ) ; TypedAggregation < MeterData > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> = newAggregation ( MeterData .class , lookup ( STRING , STRING , STRING , STRING ) , group ( ) . min ( STRING ) . as ( STRING ) , sort ( Direction . ASC , STRING ) ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ) ; org . org.bson . org.bson org.bson.Document = org.bson.Document ( org.bson.Document , NUMBER ) ; org . org.bson . org.bson org.bson.Document = ( org . org.bson . org.bson ) org.bson.Document . get ( STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( equalTo ( ( java.lang.Object ) NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { TypeBasedAggregationOperationContext org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( MeterData .class ) ; TypedAggregation < MeterData > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> = newAggregation ( MeterData .class , lookup ( STRING , STRING , STRING , STRING ) , group ( ) . min ( STRING ) . as ( STRING ) , sort ( Direction . ASC , STRING ) ) ; org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.MeterData> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class ) ; TypedAggregation < org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson> = newAggregation ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class , project ( STRING ) . and ( STRING ) . applyCondition ( ConditionalOperators . when ( Criteria . where ( STRING ) . lt ( NUMBER ) ) . then ( new org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ( NUMBER ) ) . otherwiseValueOf ( STRING ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.bson.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . containsKey ( STRING ) , is ( true ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = java.lang.Object ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = java.lang.Object ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( java.lang.Object ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; assertThat ( java.lang.Object ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age .class . java.lang.String ( ) ) ) ; assertThat ( java.lang.Object ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationOperationContext org.springframework.data.mongodb.core.aggregation.AggregationOperationContext = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class ) ; TypedAggregation < org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson > org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson> = newAggregation ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson .class , project ( STRING ) . and ( STRING ) . applyCondition ( ConditionalOperators . ifNull ( STRING ) . then ( new org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ( NUMBER ) ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.TypedAggregation<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.FooPerson> . toDocument ( STRING , org.springframework.data.mongodb.core.aggregation.AggregationOperationContext ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.bson.Document ( org.springframework.data.mongodb.core.aggregation.Document , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . containsKey ( STRING ) , is ( true ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = java.lang.Object ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = java.lang.Object ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ PersistenceConstructor void ( ObjectId org.springframework.data.mongodb.core.aggregation.ObjectId , java.lang.String java.lang.String , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ) { this . org.springframework.data.mongodb.core.aggregation.ObjectId = org.springframework.data.mongodb.core.aggregation.ObjectId ; this . java.lang.String = java.lang.String ; this . org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age = org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.aggregation.CustomConversions org.springframework.data.mongodb.core.aggregation.CustomConversions ( ) { return new CustomConversions ( java.util.Arrays .< Converter < ? , ? > > java.util.List<org.springframework.data.mongodb.core.aggregation.Converter<?,?>> ( org.springframework.data.mongodb.core.aggregation.Converter<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age,org.bson.Document> ( ) , org.springframework.data.mongodb.core.aggregation.Converter<org.bson.Document,org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.Converter<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age,org.bson.Document> < org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age , org . org.bson . org.bson > org.springframework.data.mongodb.core.aggregation.Converter<org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age,org.bson.Document> ( ) { return new Converter < org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age , org . org.bson . org.bson > ( ) { @ java.lang.Override public org . org.bson . org.bson.Document org.bson.Document ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ) { return new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age . int ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org . org.bson . org.bson.Document org.bson.Document ( org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ) { return new org . org.bson . org.bson ( STRING , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age . int ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.aggregation.Converter<org.bson.Document,org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age> < org . org.bson . org.bson , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age > org.springframework.data.mongodb.core.aggregation.Converter<org.bson.Document,org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age> ( ) { return new Converter < org . org.bson . org.bson , org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age > ( ) { @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ( org . org.bson . org.bson org.bson.Document ) { return new org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ( ( ( java.lang.Integer ) org.bson.Document . get ( STRING ) ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ( org . org.bson . org.bson org.bson.Document ) { return new org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContextUnitTests.Age ( ( ( java.lang.Integer ) org.bson.Document . get ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static org . org.bson . org.bson.Document org.bson.Document ( org . org.bson . org.bson org.bson.Document , int int ) { return ( ( java.util.List<org.bson.Document> < org . org.bson . org.bson > ) org.bson.Document . get ( STRING ) ) . org.bson.Document ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static < T > T T ( org . org.bson . org.bson org.bson.Document , java.lang.String java.lang.String ) { return ( T ) org.bson.Document . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext org.springframework.data.mongodb.core.aggregation.TypeBasedAggregationOperationContext ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return new TypeBasedAggregationOperationContext ( java.lang.Class<> , org.springframework.data.mongodb.core.aggregation.MongoMappingContext , org.springframework.data.mongodb.core.aggregation.QueryMapper ) ; }  <METHOD_END>
