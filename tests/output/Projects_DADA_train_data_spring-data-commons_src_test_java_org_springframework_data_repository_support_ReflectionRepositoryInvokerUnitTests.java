<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.repository.support.ConversionService = new DefaultFormattingConversionService ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository .class . java.lang.reflect.Method ( STRING , org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeSave ( new org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository .class . java.lang.reflect.Method ( STRING , java.lang.Long .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindOne ( STRING ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindOne ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithDomainDeleteAndFindOne org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithDomainDeleteAndFindOne = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithDomainDeleteAndFindOne .class ) ; when ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithDomainDeleteAndFindOne . org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain ( NUMBER ) ) . thenReturn ( new org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithDomainDeleteAndFindOne .class . java.lang.reflect.Method ( STRING , java.lang.Long .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithDomainDeleteAndFindOne .class . java.lang.reflect.Method ( STRING , org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithDomainDeleteAndFindOne , expectInvocationOf ( java.lang.reflect.Method , java.lang.reflect.Method ) ) . invokeDelete ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository .class . java.lang.reflect.Method ( STRING ) ; org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( Pageable . unpaged ( ) ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( PageRequest . of ( NUMBER , NUMBER ) ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( Sort . unsorted ( ) ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( Sort . by ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithSort .class . java.lang.reflect.Method ( STRING , Sort .class ) ; org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithSort org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithSort = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithSort .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithSort , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( Pageable . unpaged ( ) ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithSort , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( PageRequest . of ( NUMBER , NUMBER ) ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithSort , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( Sort . unsorted ( ) ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithSort , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( Sort . by ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithPageable .class . java.lang.reflect.Method ( STRING , Pageable .class ) ; org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithPageable org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithPageable = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithPageable .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithPageable , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( Pageable . unpaged ( ) ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.RepoWithFindAllWithPageable , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeFindAll ( PageRequest . of ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ; PersonRepository org.springframework.data.repository.support.PersonRepository = mock ( PersonRepository .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.PersonRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeQueryMethod ( java.lang.reflect.Method , org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> , Pageable . unpaged ( ) , Sort . unsorted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = PersonRepository .class . java.lang.reflect.Method ( STRING , java.util.Date .class , Pageable .class ) ; PersonRepository org.springframework.data.repository.support.PersonRepository = mock ( PersonRepository .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.PersonRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeQueryMethod ( java.lang.reflect.Method , org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> , Pageable . unpaged ( ) , Sort . unsorted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.MyRepo org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.MyRepo = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.MyRepo .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.CustomRepo .class . java.lang.reflect.Method ( STRING , java.lang.Long .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.MyRepo , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeDelete ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker = org.springframework.data.repository.support.RepositoryInvoker ( mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.EmptyRepository .class ) ) ; assertThat ( org.springframework.data.repository.support.RepositoryInvoker . hasDeleteMethod ( ) ) . isFalse ( ) ; org.springframework.data.repository.support.RepositoryInvoker . invokeDelete ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker = org.springframework.data.repository.support.RepositoryInvoker ( mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.EmptyRepository .class ) ) ; assertThat ( org.springframework.data.repository.support.RepositoryInvoker . hasFindOneMethod ( ) ) . isFalse ( ) ; org.springframework.data.repository.support.RepositoryInvoker . invokeFindOne ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker = org.springframework.data.repository.support.RepositoryInvoker ( mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.EmptyRepository .class ) ) ; assertThat ( org.springframework.data.repository.support.RepositoryInvoker . hasFindAllMethod ( ) ) . isFalse ( ) ; org.springframework.data.repository.support.RepositoryInvoker . invokeFindAll ( Sort . unsorted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker = org.springframework.data.repository.support.RepositoryInvoker ( mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.EmptyRepository .class ) ) ; assertThat ( org.springframework.data.repository.support.RepositoryInvoker . hasSaveMethod ( ) ) . isFalse ( ) ; org.springframework.data.repository.support.RepositoryInvoker . invokeSave ( new java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( java.lang.String [] java.lang.String[] : java.util.Arrays . java.util.List<java.lang.String[]> ( new java.lang.String [] { STRING } , new java.lang.String [] { STRING , STRING } ) ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> . put ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; java.lang.reflect.Method java.lang.reflect.Method = PersonRepository .class . java.lang.reflect.Method ( STRING , java.util.Collection .class ) ; PersonRepository org.springframework.data.repository.support.PersonRepository = mock ( PersonRepository .class ) ; org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.PersonRepository , expectInvocationOf ( java.lang.reflect.Method ) ) . invokeQueryMethod ( java.lang.reflect.Method , org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.String> , Pageable . unpaged ( ) , Sort . unsorted ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker = org.springframework.data.repository.support.RepositoryInvoker ( mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.SimpleRepository .class ) ) ; MultiValueMap < java.lang.String , java.lang.Object > org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap <> ( ) ; org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.Object> . add ( STRING , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.SimpleRepository .class . java.lang.reflect.Method ( STRING , int .class ) ; try { org.springframework.data.repository.support.RepositoryInvoker . invokeQueryMethod ( java.lang.reflect.Method , org.springframework.data.repository.support.MultiValueMap<java.lang.String,java.lang.Object> , Pageable . unpaged ( ) , Sort . unsorted ( ) ) ; } catch ( QueryMethodParameterConversionException org.springframework.data.repository.support.QueryMethodParameterConversionException ) { assertThat ( org.springframework.data.repository.support.QueryMethodParameterConversionException . getParameter ( ) ) . isEqualTo ( new MethodParameters ( java.lang.reflect.Method ) . getParameters ( ) . get ( NUMBER ) ) ; assertThat ( org.springframework.data.repository.support.QueryMethodParameterConversionException . getSource ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.repository.support.QueryMethodParameterConversionException . getCause ( ) ) . isInstanceOf ( ConversionFailedException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.GuavaRepository org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.GuavaRepository = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.GuavaRepository .class ) ; when ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.GuavaRepository . findOne ( any ( ) ) ) . thenReturn ( com . google . common . base . Optional . of ( new org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain ( ) ) ) ; RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker = org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.GuavaRepository ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.repository.support.RepositoryInvoker . invokeFindOne ( NUMBER ) ; assertThat ( java.util.Optional<java.lang.Object> ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository = mock ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository .class ) ; when ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository . java.lang.Iterable<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> ( ) ) . thenReturn ( java.util.Arrays . java.util.List<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> ( new org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain ( ) ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository .class . java.lang.reflect.Method ( STRING ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.repository.support.RepositoryInvoker ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.ManualCrudRepository ) . invokeQueryMethod ( java.lang.reflect.Method , new LinkedMultiValueMap <> ( ) , Pageable . unpaged ( ) , Sort . unsorted ( ) ) ; assertThat ( java.util.Optional<java.lang.Object> ) . hasValueSatisfying ( it -> { assertThat ( it ) . isInstanceOf ( Collection .class ) ; } ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.repository.support.RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker ( java.lang.Object java.lang.Object ) { RepositoryMetadata org.springframework.data.repository.support.RepositoryMetadata = new DefaultRepositoryMetadata ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?>[] ( ) [ NUMBER ] ) ; GenericConversionService org.springframework.data.repository.support.GenericConversionService = new DefaultFormattingConversionService ( ) ; return new ReflectionRepositoryInvoker ( java.lang.Object , org.springframework.data.repository.support.RepositoryMetadata , org.springframework.data.repository.support.GenericConversionService ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.repository.support.RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker ( java.lang.Object java.lang.Object , VerifyingMethodInterceptor org.springframework.data.repository.support.VerifyingMethodInterceptor ) { return org.springframework.data.repository.support.RepositoryInvoker ( getVerifyingRepositoryProxy ( java.lang.Object , org.springframework.data.repository.support.VerifyingMethodInterceptor ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Long java.lang.Long );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain ( java.lang.Long java.lang.Long );  <METHOD_END>
<METHOD_START> java.lang.Iterable<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> < org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain > java.lang.Iterable<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> ( )  <METHOD_END>
<METHOD_START> < T extends org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain > T T ( T T );  <METHOD_END>
<METHOD_START> void void ( java.lang.Long java.lang.Long );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> < org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain > java.util.List<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.repository.support.Page<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> < org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain > org.springframework.data.repository.support.Page<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> ( Pageable org.springframework.data.repository.support.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.support.Page<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> < org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain > org.springframework.data.repository.support.Page<org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain> ( Sort org.springframework.data.repository.support.Sort );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain ( java.lang.Long java.lang.Long );  <METHOD_END>
<METHOD_START> void void ( org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain );  <METHOD_END>
<METHOD_START> org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain ( @ Param ( STRING ) int int );  <METHOD_END>
<METHOD_START> com . com.google . com.google . com.google . com.google < org.springframework.data.repository.support.ReflectionRepositoryInvokerUnitTests.Domain > findOne ( java.lang.Long java.lang.Long );  <METHOD_END>
