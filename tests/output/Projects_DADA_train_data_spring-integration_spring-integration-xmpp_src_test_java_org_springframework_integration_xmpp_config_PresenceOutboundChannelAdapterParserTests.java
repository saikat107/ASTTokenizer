<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof PollingConsumer ) ; AbstractXmppConnectionAwareMessageHandler org.springframework.integration.xmpp.config.AbstractXmppConnectionAwareMessageHandler = ( AbstractXmppConnectionAwareMessageHandler ) TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xmpp.config.AbstractXmppConnectionAwareMessageHandler , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof EventDrivenConsumer ) ; AbstractXmppConnectionAwareMessageHandler org.springframework.integration.xmpp.config.AbstractXmppConnectionAwareMessageHandler = ( AbstractXmppConnectionAwareMessageHandler ) TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.xmpp.config.AbstractXmppConnectionAwareMessageHandler , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof EventDrivenConsumer ) ; MessageHandler org.springframework.integration.xmpp.config.MessageHandler = TestUtils . getPropertyValue ( java.lang.Object , STRING , MessageHandler .class ) ; org.springframework.integration.xmpp.config.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.xmpp.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof SubscribableChannel ) ; UnicastingDispatcher org.springframework.integration.xmpp.config.UnicastingDispatcher = ( UnicastingDispatcher ) TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Set<org.springframework.integration.xmpp.config.MessageHandler> < MessageHandler > java.util.Set<org.springframework.integration.xmpp.config.MessageHandler> = ( java.util.Set<org.springframework.integration.xmpp.config.MessageHandler> < MessageHandler > ) TestUtils . getPropertyValue ( org.springframework.integration.xmpp.config.UnicastingDispatcher , STRING ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.util.Set<org.springframework.integration.xmpp.config.MessageHandler> . toArray ( ) [ NUMBER ] , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.xmpp.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.xmpp.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
