<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { try { return javax.xml.stream.events.XMLEvent ( ) ; } catch ( javax.xml.stream.XMLStreamException javax.xml.stream.XMLStreamException ) { throw new java.util.NoSuchElementException ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( STRING + ClassUtils . getShortName ( java.lang.Class<? extends org.springframework.util.xml.AbstractXMLEventReader> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) javax.xml.stream.XMLStreamException { void ( ) ; if ( ! javax.xml.stream.events.XMLEvent ( ) . boolean ( ) ) { throw new javax.xml.stream.XMLStreamException ( STRING ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; while ( true ) { javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent = javax.xml.stream.events.XMLEvent ( ) ; if ( javax.xml.stream.events.XMLEvent . boolean ( ) ) { break; } else if ( ! javax.xml.stream.events.XMLEvent . boolean ( ) ) { throw new javax.xml.stream.XMLStreamException ( STRING + javax.xml.stream.events.XMLEvent + STRING ) ; } javax.xml.stream.events.Characters javax.xml.stream.events.Characters = javax.xml.stream.events.XMLEvent . javax.xml.stream.events.Characters ( ) ; if ( ! javax.xml.stream.events.Characters . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( javax.xml.stream.events.XMLEvent . javax.xml.stream.events.Characters ( ) . java.lang.String ( ) ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent ( ) javax.xml.stream.XMLStreamException { void ( ) ; while ( true ) { javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent = javax.xml.stream.events.XMLEvent ( ) ; switch ( javax.xml.stream.events.XMLEvent . int ( ) ) { case javax.xml.stream.XMLStreamConstants . int : case javax.xml.stream.XMLStreamConstants . int : return javax.xml.stream.events.XMLEvent ; case javax.xml.stream.XMLStreamConstants . int : return null ; case javax.xml.stream.XMLStreamConstants . int : case javax.xml.stream.XMLStreamConstants . int : case javax.xml.stream.XMLStreamConstants . int : continue; case javax.xml.stream.XMLStreamConstants . int : case javax.xml.stream.XMLStreamConstants . int : if ( ! javax.xml.stream.events.XMLEvent . javax.xml.stream.events.Characters ( ) . boolean ( ) ) { throw new javax.xml.stream.XMLStreamException ( STRING ) ; } break; default: throw new javax.xml.stream.XMLStreamException ( STRING + javax.xml.stream.events.XMLEvent + STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected void void ( ) javax.xml.stream.XMLStreamException { if ( boolean ( ) ) { throw new javax.xml.stream.XMLStreamException ( STRING ) ; } }  <METHOD_END>
