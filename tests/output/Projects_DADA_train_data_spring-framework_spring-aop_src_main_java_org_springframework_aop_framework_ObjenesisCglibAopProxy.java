<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { super( org.springframework.aop.framework.AdvisedSupport ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( Enhancer org.springframework.aop.framework.Enhancer , Callback [] org.springframework.aop.framework.Callback[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.aop.framework.Enhancer . createClass ( ) ; java.lang.Object java.lang.Object = null ; if ( org.springframework.aop.framework.SpringObjenesis . isWorthTrying ( ) ) { try { java.lang.Object = org.springframework.aop.framework.SpringObjenesis . newInstance ( java.lang.Class<> , org.springframework.aop.framework.Enhancer . getUseCache ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.aop.framework.Log . debug ( STRING + STRING , java.lang.Throwable ) ; } } if ( java.lang.Object == null ) { try { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = ( this . constructorArgs != null ? java.lang.Class<> . java.lang.reflect.Constructor<> ( this . constructorArgTypes ) : java.lang.Class<> . java.lang.reflect.Constructor<> ( ) ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Constructor<> ) ; java.lang.Object = ( this . constructorArgs != null ? java.lang.reflect.Constructor<> . newInstance ( this . constructorArgs ) : java.lang.reflect.Constructor<> . newInstance ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new AopConfigException ( STRING + STRING , java.lang.Throwable ) ; } } ( ( Factory ) java.lang.Object ) . setCallbacks ( org.springframework.aop.framework.Callback[] ) ; return java.lang.Object ; }  <METHOD_END>
