<METHOD_START> public void ( final int int ) { super( Opcodes . ASM5 ); int = NUMBER ; org.springframework.asm.ByteVector = new ByteVector ( ) ; org.springframework.asm.Item[] = new Item [ NUMBER ] ; int = ( int ) ( NUMBER * org.springframework.asm.Item[] . length ) ; org.springframework.asm.Item = new Item ( ) ; org.springframework.asm.Item = new Item ( ) ; org.springframework.asm.Item = new Item ( ) ; org.springframework.asm.Item = new Item ( ) ; this . int = ( int & int ) != NUMBER ? MethodWriter . FRAMES : ( ( int & int ) != NUMBER ? MethodWriter . MAXS : MethodWriter . NOTHING ) ; }  <METHOD_END>
<METHOD_START> public void ( final ClassReader org.springframework.asm.ClassReader , final int int ) { this( int ); org.springframework.asm.ClassReader . copyPool ( this ) ; this . org.springframework.asm.ClassReader = org.springframework.asm.ClassReader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( final int int , final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String [] java.lang.String[] ) { this . int = int ; this . int = int ; this . int = int ( java.lang.String ) ; java.lang.String = java.lang.String ; if ( ClassReader . SIGNATURES && java.lang.String != null ) { this . int = int ( java.lang.String ) ; } this . int = java.lang.String == null ? NUMBER : int ( java.lang.String ) ; if ( java.lang.String[] != null && java.lang.String[] . int > NUMBER ) { int = java.lang.String[] . int ; this . int[] = new int [ int ] ; for ( int int = NUMBER ; int < int ; ++ int ) { this . int[] [ int ] = int ( java.lang.String[] [ int ] ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { if ( java.lang.String != null ) { int = int ( java.lang.String ) ; } if ( java.lang.String != null ) { org.springframework.asm.ByteVector = new ByteVector ( ) . encodeUTF8 ( java.lang.String , NUMBER , java.lang.Integer . int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { int = int ( java.lang.String ) ; if ( java.lang.String != null && java.lang.String != null ) { int = int ( java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( final java.lang.String java.lang.String , final boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; org.springframework.asm.ByteVector . putShort ( int ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( this , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( int int , TypePath org.springframework.asm.TypePath , final java.lang.String java.lang.String , final boolean boolean ) { if ( ! ClassReader . ANNOTATIONS ) { return null ; } ByteVector org.springframework.asm.ByteVector = new ByteVector ( ) ; AnnotationWriter . putTarget ( int , org.springframework.asm.TypePath , org.springframework.asm.ByteVector ) ; org.springframework.asm.ByteVector . putShort ( int ( java.lang.String ) ) . putShort ( NUMBER ) ; AnnotationWriter org.springframework.asm.AnnotationWriter = new AnnotationWriter ( this , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , bv . length - NUMBER ) ; if ( boolean ) { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } else { aw . next = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; } return org.springframework.asm.AnnotationWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( final Attribute org.springframework.asm.Attribute ) { attr . next = org.springframework.asm.Attribute ; org.springframework.asm.Attribute = org.springframework.asm.Attribute ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final int int ) { if ( org.springframework.asm.ByteVector == null ) { org.springframework.asm.ByteVector = new ByteVector ( ) ; } Item org.springframework.asm.Item = org.springframework.asm.Item ( java.lang.String ) ; if ( nameItem . intVal == NUMBER ) { ++ int ; org.springframework.asm.ByteVector . putShort ( nameItem . index ) ; org.springframework.asm.ByteVector . putShort ( java.lang.String == null ? NUMBER : int ( java.lang.String ) ) ; org.springframework.asm.ByteVector . putShort ( java.lang.String == null ? NUMBER : int ( java.lang.String ) ) ; org.springframework.asm.ByteVector . putShort ( int ) ; nameItem . intVal = int ; } else { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.asm.FieldVisitor org.springframework.asm.FieldVisitor ( final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) { return new FieldWriter ( this , int , java.lang.String , java.lang.String , java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.asm.MethodVisitor org.springframework.asm.MethodVisitor ( final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String [] java.lang.String[] ) { return new MethodWriter ( this , int , java.lang.String , java.lang.String , java.lang.String , java.lang.String[] , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) {    }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { if ( int > NUMBER ) { throw new java.lang.RuntimeException ( STRING ) ; } int int = NUMBER + NUMBER * int ; int int = NUMBER ; FieldWriter org.springframework.asm.FieldWriter = org.springframework.asm.FieldWriter ; while ( org.springframework.asm.FieldWriter != null ) { ++ int ; int += org.springframework.asm.FieldWriter . getSize ( ) ; org.springframework.asm.FieldWriter = ( FieldWriter ) fb . fv ; } int int = NUMBER ; MethodWriter org.springframework.asm.MethodWriter = org.springframework.asm.MethodWriter ; while ( org.springframework.asm.MethodWriter != null ) { ++ int ; int += org.springframework.asm.MethodWriter . getSize ( ) ; org.springframework.asm.MethodWriter = ( MethodWriter ) mb . mv ; } int int = NUMBER ; if ( org.springframework.asm.ByteVector != null ) { ++ int ; int += NUMBER + org.springframework.asm.ByteVector . length ; int ( STRING ) ; } if ( ClassReader . SIGNATURES && int != NUMBER ) { ++ int ; int += NUMBER ; int ( STRING ) ; } if ( int != NUMBER ) { ++ int ; int += NUMBER ; int ( STRING ) ; } if ( org.springframework.asm.ByteVector != null ) { ++ int ; int += org.springframework.asm.ByteVector . length + NUMBER ; int ( STRING ) ; } if ( int != NUMBER ) { ++ int ; int += NUMBER ; int ( STRING ) ; } if ( ( int & Opcodes . ACC_DEPRECATED ) != NUMBER ) { ++ int ; int += NUMBER ; int ( STRING ) ; } if ( ( int & Opcodes . ACC_SYNTHETIC ) != NUMBER ) { if ( ( int & NUMBER ) < Opcodes . V1_5 || ( int & int ) != NUMBER ) { ++ int ; int += NUMBER ; int ( STRING ) ; } } if ( org.springframework.asm.ByteVector != null ) { ++ int ; int += NUMBER + org.springframework.asm.ByteVector . length ; int ( STRING ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; int ( STRING ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; int ( STRING ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; int ( STRING ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { ++ int ; int += NUMBER + org.springframework.asm.AnnotationWriter . getSize ( ) ; int ( STRING ) ; } if ( org.springframework.asm.Attribute != null ) { int += org.springframework.asm.Attribute . getCount ( ) ; int += org.springframework.asm.Attribute . getSize ( this , null , NUMBER , - NUMBER , - NUMBER ) ; } int += org.springframework.asm.ByteVector . length ; ByteVector org.springframework.asm.ByteVector = new ByteVector ( int ) ; org.springframework.asm.ByteVector . putInt ( NUMBER ) . putInt ( int ) ; org.springframework.asm.ByteVector . putShort ( int ) . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; int int = Opcodes . ACC_DEPRECATED | int | ( ( int & int ) / int ) ; org.springframework.asm.ByteVector . putShort ( int & ~ int ) . putShort ( int ) . putShort ( int ) ; org.springframework.asm.ByteVector . putShort ( int ) ; for ( int int = NUMBER ; int < int ; ++ int ) { org.springframework.asm.ByteVector . putShort ( int[] [ int ] ) ; } org.springframework.asm.ByteVector . putShort ( int ) ; org.springframework.asm.FieldWriter = org.springframework.asm.FieldWriter ; while ( org.springframework.asm.FieldWriter != null ) { org.springframework.asm.FieldWriter . put ( org.springframework.asm.ByteVector ) ; org.springframework.asm.FieldWriter = ( FieldWriter ) fb . fv ; } org.springframework.asm.ByteVector . putShort ( int ) ; org.springframework.asm.MethodWriter = org.springframework.asm.MethodWriter ; while ( org.springframework.asm.MethodWriter != null ) { org.springframework.asm.MethodWriter . put ( org.springframework.asm.ByteVector ) ; org.springframework.asm.MethodWriter = ( MethodWriter ) mb . mv ; } org.springframework.asm.ByteVector . putShort ( int ) ; if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length + NUMBER ) . putShort ( int ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; } if ( ClassReader . SIGNATURES && int != NUMBER ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) . putInt ( NUMBER ) . putShort ( int ) ; } if ( int != NUMBER ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) . putInt ( NUMBER ) . putShort ( int ) ; } if ( org.springframework.asm.ByteVector != null ) { int int = org.springframework.asm.ByteVector . length ; org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) . putInt ( int ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , int ) ; } if ( int != NUMBER ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) . putInt ( NUMBER ) ; org.springframework.asm.ByteVector . putShort ( int ) . putShort ( int ) ; } if ( ( int & Opcodes . ACC_DEPRECATED ) != NUMBER ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) . putInt ( NUMBER ) ; } if ( ( int & Opcodes . ACC_SYNTHETIC ) != NUMBER ) { if ( ( int & NUMBER ) < Opcodes . V1_5 || ( int & int ) != NUMBER ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) . putInt ( NUMBER ) ; } } if ( org.springframework.asm.ByteVector != null ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) ; org.springframework.asm.ByteVector . putInt ( org.springframework.asm.ByteVector . length + NUMBER ) . putShort ( int ) ; org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.ByteVector . length ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( ClassReader . ANNOTATIONS && org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putShort ( int ( STRING ) ) ; org.springframework.asm.AnnotationWriter . put ( org.springframework.asm.ByteVector ) ; } if ( org.springframework.asm.Attribute != null ) { org.springframework.asm.Attribute . put ( this , null , NUMBER , - NUMBER , - NUMBER , org.springframework.asm.ByteVector ) ; } if ( boolean ) { org.springframework.asm.AnnotationWriter = null ; org.springframework.asm.AnnotationWriter = null ; org.springframework.asm.Attribute = null ; int = NUMBER ; org.springframework.asm.ByteVector = null ; org.springframework.asm.FieldWriter = null ; org.springframework.asm.FieldWriter = null ; org.springframework.asm.MethodWriter = null ; org.springframework.asm.MethodWriter = null ; int = MethodWriter . INSERTED_FRAMES ; boolean = false ; new ClassReader ( out . data ) . accept ( this , ClassReader . EXPAND_FRAMES | ClassReader . EXPAND_ASM_INSNS ) ; return byte[] ( ) ; } return out . data ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Integer ) { int int = ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ; return org.springframework.asm.Item ( int ) ; } else if ( java.lang.Object instanceof java.lang.Byte ) { int int = ( ( java.lang.Byte ) java.lang.Object ) . int ( ) ; return org.springframework.asm.Item ( int ) ; } else if ( java.lang.Object instanceof java.lang.Character ) { int int = ( ( java.lang.Character ) java.lang.Object ) . char ( ) ; return org.springframework.asm.Item ( int ) ; } else if ( java.lang.Object instanceof java.lang.Short ) { int int = ( ( java.lang.Short ) java.lang.Object ) . int ( ) ; return org.springframework.asm.Item ( int ) ; } else if ( java.lang.Object instanceof java.lang.Boolean ) { int int = ( ( java.lang.Boolean ) java.lang.Object ) . boolean ( ) ? NUMBER : NUMBER ; return org.springframework.asm.Item ( int ) ; } else if ( java.lang.Object instanceof java.lang.Float ) { float float = ( ( java.lang.Float ) java.lang.Object ) . float ( ) ; return org.springframework.asm.Item ( float ) ; } else if ( java.lang.Object instanceof java.lang.Long ) { long long = ( ( java.lang.Long ) java.lang.Object ) . long ( ) ; return org.springframework.asm.Item ( long ) ; } else if ( java.lang.Object instanceof java.lang.Double ) { double double = ( ( java.lang.Double ) java.lang.Object ) . double ( ) ; return org.springframework.asm.Item ( double ) ; } else if ( java.lang.Object instanceof java.lang.String ) { return org.springframework.asm.Item ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Type ) { Type org.springframework.asm.Type = ( Type ) java.lang.Object ; int int = org.springframework.asm.Type . getSort ( ) ; if ( int == Type . OBJECT ) { return org.springframework.asm.Item ( org.springframework.asm.Type . getInternalName ( ) ) ; } else if ( int == Type . METHOD ) { return org.springframework.asm.Item ( org.springframework.asm.Type . getDescriptor ( ) ) ; } else { return org.springframework.asm.Item ( org.springframework.asm.Type . getDescriptor ( ) ) ; } } else if ( java.lang.Object instanceof Handle ) { Handle org.springframework.asm.Handle = ( Handle ) java.lang.Object ; return org.springframework.asm.Item ( h . tag , h . owner , h . name , h . desc , h . itf ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public int int ( final java.lang.Object java.lang.Object ) { return org.springframework.asm.Item ( java.lang.Object ) . index ; }  <METHOD_END>
<METHOD_START> public int int ( final java.lang.String java.lang.String ) { org.springframework.asm.Item . set ( int , java.lang.String , null , null ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.ByteVector . putByte ( int ) . putUTF8 ( java.lang.String ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return result . index ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final java.lang.String java.lang.String ) { org.springframework.asm.Item . set ( int , java.lang.String , null , null ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.ByteVector . put12 ( int , int ( java.lang.String ) ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> public int int ( final java.lang.String java.lang.String ) { return org.springframework.asm.Item ( java.lang.String ) . index ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final java.lang.String java.lang.String ) { org.springframework.asm.Item . set ( int , java.lang.String , null , null ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.ByteVector . put12 ( int , int ( java.lang.String ) ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> public int int ( final java.lang.String java.lang.String ) { return org.springframework.asm.Item ( java.lang.String ) . index ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final boolean boolean ) { org.springframework.asm.Item . set ( int + int , java.lang.String , java.lang.String , java.lang.String ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { if ( int <= Opcodes . H_PUTSTATIC ) { void ( int , int , int ( java.lang.String , java.lang.String , java.lang.String ) ) ; } else { void ( int , int , int ( java.lang.String , java.lang.String , java.lang.String , boolean ) ) ; } org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public int int ( final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { return int ( int , java.lang.String , java.lang.String , java.lang.String , int == Opcodes . H_INVOKEINTERFACE ) ; }  <METHOD_END>
<METHOD_START> public int int ( final int int , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final boolean boolean ) { return org.springframework.asm.Item ( int , java.lang.String , java.lang.String , java.lang.String , boolean ) . index ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final Handle org.springframework.asm.Handle , final java.lang.Object ... java.lang.Object[] ) { ByteVector org.springframework.asm.ByteVector = this . org.springframework.asm.ByteVector ; if ( org.springframework.asm.ByteVector == null ) { org.springframework.asm.ByteVector = this . org.springframework.asm.ByteVector = new ByteVector ( ) ; } int int = bootstrapMethods . length ; int int = org.springframework.asm.Handle . hashCode ( ) ; org.springframework.asm.ByteVector . putShort ( int ( bsm . tag , bsm . owner , bsm . name , bsm . desc , org.springframework.asm.Handle . isInterface ( ) ) ) ; int int = java.lang.Object[] . int ; org.springframework.asm.ByteVector . putShort ( int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; int ^= java.lang.Object . int ( ) ; org.springframework.asm.ByteVector . putShort ( int ( java.lang.Object ) ) ; } byte [] byte[] = bootstrapMethods . data ; int int = ( NUMBER + NUMBER + int ) << NUMBER ; int &= NUMBER ; Item org.springframework.asm.Item = org.springframework.asm.Item[] [ int % org.springframework.asm.Item[] . length ] ; loop : while ( org.springframework.asm.Item != null ) { if ( result . type != int || result . hashCode != int ) { org.springframework.asm.Item = result . next ; continue; } int int = result . intVal ; for ( int int = NUMBER ; int < int ; int ++ ) { if ( byte[] [ int + int ] != byte[] [ int + int ] ) { org.springframework.asm.Item = result . next ; continue loop ; } } break; } int int ; if ( org.springframework.asm.Item != null ) { int = result . index ; bootstrapMethods . length = int ; } else { int = int ++ ; org.springframework.asm.Item = new Item ( int ) ; org.springframework.asm.Item . set ( int , int ) ; void ( org.springframework.asm.Item ) ; } org.springframework.asm.Item . set ( java.lang.String , java.lang.String , int ) ; org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { void ( int , int , int ( java.lang.String , java.lang.String ) ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> public int int ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final Handle org.springframework.asm.Handle , final java.lang.Object ... java.lang.Object[] ) { return org.springframework.asm.Item ( java.lang.String , java.lang.String , org.springframework.asm.Handle , java.lang.Object[] ) . index ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { org.springframework.asm.Item . set ( int , java.lang.String , java.lang.String , java.lang.String ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { void ( int , int ( java.lang.String ) , int ( java.lang.String , java.lang.String ) ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> public int int ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { return org.springframework.asm.Item ( java.lang.String , java.lang.String , java.lang.String ) . index ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final boolean boolean ) { int int = boolean ? int : int ; org.springframework.asm.Item . set ( int , java.lang.String , java.lang.String , java.lang.String ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { void ( int , int ( java.lang.String ) , int ( java.lang.String , java.lang.String ) ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> public int int ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final boolean boolean ) { return org.springframework.asm.Item ( java.lang.String , java.lang.String , java.lang.String , boolean ) . index ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final int int ) { org.springframework.asm.Item . set ( int ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.ByteVector . putByte ( int ) . putInt ( int ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final float float ) { org.springframework.asm.Item . set ( float ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.ByteVector . putByte ( int ) . putInt ( org.springframework.asm.Item . intVal ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final long long ) { org.springframework.asm.Item . set ( long ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.ByteVector . putByte ( int ) . putLong ( long ) ; org.springframework.asm.Item = new Item ( int , org.springframework.asm.Item ) ; int += NUMBER ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final double double ) { org.springframework.asm.Item . set ( double ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.ByteVector . putByte ( int ) . putLong ( org.springframework.asm.Item . longVal ) ; org.springframework.asm.Item = new Item ( int , org.springframework.asm.Item ) ; int += NUMBER ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> private org.springframework.asm.Item org.springframework.asm.Item ( final java.lang.String java.lang.String ) { org.springframework.asm.Item . set ( int , java.lang.String , null , null ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.ByteVector . put12 ( int , int ( java.lang.String ) ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> public int int ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { return org.springframework.asm.Item ( java.lang.String , java.lang.String ) . index ; }  <METHOD_END>
<METHOD_START> org.springframework.asm.Item org.springframework.asm.Item ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { org.springframework.asm.Item . set ( int , java.lang.String , java.lang.String , null ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { void ( int , int ( java.lang.String ) , int ( java.lang.String ) ) ; org.springframework.asm.Item = new Item ( int ++ , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> int int ( final java.lang.String java.lang.String ) { org.springframework.asm.Item . set ( int , java.lang.String , null , null ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.Item = int ( org.springframework.asm.Item ) ; } return result . index ; }  <METHOD_END>
<METHOD_START> int int ( final java.lang.String java.lang.String , final int int ) { org.springframework.asm.Item . type = int ; org.springframework.asm.Item . intVal = int ; org.springframework.asm.Item . strVal1 = java.lang.String ; org.springframework.asm.Item . hashCode = NUMBER & ( int + java.lang.String . int ( ) + int ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { org.springframework.asm.Item = int ( org.springframework.asm.Item ) ; } return result . index ; }  <METHOD_END>
<METHOD_START> private org.springframework.asm.Item org.springframework.asm.Item ( final Item org.springframework.asm.Item ) { ++ short ; Item org.springframework.asm.Item = new Item ( short , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item[] == null ) { org.springframework.asm.Item[] = new Item [ NUMBER ] ; } if ( short == org.springframework.asm.Item[] . length ) { Item [] org.springframework.asm.Item[] = new Item [ NUMBER * org.springframework.asm.Item[] . length ] ; java.lang.System . void ( org.springframework.asm.Item[] , NUMBER , org.springframework.asm.Item[] , NUMBER , org.springframework.asm.Item[] . length ) ; org.springframework.asm.Item[] = org.springframework.asm.Item[] ; } org.springframework.asm.Item[] [ short ] = org.springframework.asm.Item ; return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> int int ( final int int , final int int ) { org.springframework.asm.Item . type = int ; org.springframework.asm.Item . longVal = int | ( ( ( long ) int ) << NUMBER ) ; org.springframework.asm.Item . hashCode = NUMBER & ( int + int + int ) ; Item org.springframework.asm.Item = org.springframework.asm.Item ( org.springframework.asm.Item ) ; if ( org.springframework.asm.Item == null ) { java.lang.String java.lang.String = org.springframework.asm.Item[] [ int ] . strVal1 ; java.lang.String java.lang.String = org.springframework.asm.Item[] [ int ] . strVal1 ; org.springframework.asm.Item . intVal = int ( java.lang.String ( java.lang.String , java.lang.String ) ) ; org.springframework.asm.Item = new Item ( ( short ) NUMBER , org.springframework.asm.Item ) ; void ( org.springframework.asm.Item ) ; } return result . intVal ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.ClassLoader ( ) ; try { java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.String . java.lang.String ( '/' , '.' ) , false , java.lang.ClassLoader ) ; java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.String . java.lang.String ( '/' , '.' ) , false , java.lang.ClassLoader ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception . java.lang.String ( ) ) ; } if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return java.lang.String ; } if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return java.lang.String ; } if ( java.lang.Class<> . boolean ( ) || java.lang.Class<> . boolean ( ) ) { return STRING ; } else { do { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; } while ( ! java.lang.Class<> . boolean ( java.lang.Class<> ) ); return java.lang.Class<> . java.lang.String ( ) . java.lang.String ( '.' , '/' ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) { java.lang.ClassLoader java.lang.ClassLoader = null ; try { java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } return ( java.lang.ClassLoader != null ? java.lang.ClassLoader : java.lang.Class<? extends org.springframework.asm.ClassWriter> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.asm.Item org.springframework.asm.Item ( final Item org.springframework.asm.Item ) { Item org.springframework.asm.Item = org.springframework.asm.Item[] [ key . hashCode % org.springframework.asm.Item[] . length ] ; while ( org.springframework.asm.Item != null && ( i . type != key . type || ! org.springframework.asm.Item . isEqualTo ( org.springframework.asm.Item ) ) ) { org.springframework.asm.Item = i . next ; } return org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> private void void ( final Item org.springframework.asm.Item ) { if ( int + short > int ) { int int = org.springframework.asm.Item[] . length ; int int = int * NUMBER + NUMBER ; Item [] org.springframework.asm.Item[] = new Item [ int ] ; for ( int int = int - NUMBER ; int >= NUMBER ; -- int ) { Item org.springframework.asm.Item = org.springframework.asm.Item[] [ int ] ; while ( org.springframework.asm.Item != null ) { int int = j . hashCode % newItems . length ; Item org.springframework.asm.Item = j . next ; j . next = org.springframework.asm.Item[] [ int ] ; org.springframework.asm.Item[] [ int ] = org.springframework.asm.Item ; org.springframework.asm.Item = org.springframework.asm.Item ; } } org.springframework.asm.Item[] = org.springframework.asm.Item[] ; int = ( int ) ( int * NUMBER ) ; } int int = i . hashCode % org.springframework.asm.Item[] . length ; i . next = org.springframework.asm.Item[] [ int ] ; org.springframework.asm.Item[] [ int ] = org.springframework.asm.Item ; }  <METHOD_END>
<METHOD_START> private void void ( final int int , final int int , final int int ) { org.springframework.asm.ByteVector . put12 ( int , int ) . putShort ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( final int int , final int int , final int int ) { org.springframework.asm.ByteVector . put11 ( int , int ) . putShort ( int ) ; }  <METHOD_END>
