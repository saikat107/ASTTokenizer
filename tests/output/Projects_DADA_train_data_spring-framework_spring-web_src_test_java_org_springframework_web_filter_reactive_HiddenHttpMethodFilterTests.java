<METHOD_START> @ Test public void void ( ) { org.springframework.web.filter.reactive.Mono<java.lang.Void> ( STRING ) . block ( java.time.Duration . java.time.Duration ) ; assertEquals ( HttpMethod . DELETE , this . org.springframework.web.filter.reactive.HiddenHttpMethodFilterTests.TestWebFilterChain . org.springframework.web.filter.reactive.HttpMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.filter.reactive.Mono<java.lang.Void> ( STRING ) . block ( java.time.Duration . java.time.Duration ) ; assertEquals ( HttpMethod . POST , this . org.springframework.web.filter.reactive.HiddenHttpMethodFilterTests.TestWebFilterChain . org.springframework.web.filter.reactive.HttpMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.filter.reactive.Mono<java.lang.Void> ( STRING ) . block ( java.time.Duration . java.time.Duration ) ; assertEquals ( HttpMethod . POST , this . org.springframework.web.filter.reactive.HiddenHttpMethodFilterTests.TestWebFilterChain . org.springframework.web.filter.reactive.HttpMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.filter.reactive.HiddenHttpMethodFilter . setMethodParamName ( STRING ) ; org.springframework.web.filter.reactive.Mono<java.lang.Void> ( STRING ) . block ( java.time.Duration . java.time.Duration ) ; assertEquals ( HttpMethod . DELETE , this . org.springframework.web.filter.reactive.HiddenHttpMethodFilterTests.TestWebFilterChain . org.springframework.web.filter.reactive.HttpMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.web.filter.reactive.Mono<java.lang.Void> ( STRING ) ) . consumeErrorWith ( error -> { assertThat ( error , Matchers . instanceOf ( IllegalArgumentException .class ) ) ; assertEquals ( error . getMessage ( ) , STRING ) ; } ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerWebExchange org.springframework.web.filter.reactive.ServerWebExchange = MockServerHttpRequest . put ( STRING ) . header ( HttpHeaders . CONTENT_TYPE , MediaType . APPLICATION_FORM_URLENCODED_VALUE ) . body ( STRING ) . toExchange ( ) ; this . org.springframework.web.filter.reactive.HiddenHttpMethodFilter . filter ( org.springframework.web.filter.reactive.ServerWebExchange , this . org.springframework.web.filter.reactive.HiddenHttpMethodFilterTests.TestWebFilterChain ) . block ( java.time.Duration . java.time.Duration ) ; assertEquals ( HttpMethod . PUT , this . org.springframework.web.filter.reactive.HiddenHttpMethodFilterTests.TestWebFilterChain . org.springframework.web.filter.reactive.HttpMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.filter.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.filter.reactive.Mono<java.lang.Void> ( java.lang.String java.lang.String ) { MockServerWebExchange org.springframework.web.filter.reactive.MockServerWebExchange = MockServerHttpRequest . post ( STRING ) . header ( HttpHeaders . CONTENT_TYPE , MediaType . APPLICATION_FORM_URLENCODED_VALUE ) . body ( java.lang.String ) . toExchange ( ) ; return this . org.springframework.web.filter.reactive.HiddenHttpMethodFilter . filter ( org.springframework.web.filter.reactive.MockServerWebExchange , this . org.springframework.web.filter.reactive.HiddenHttpMethodFilterTests.TestWebFilterChain ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.filter.reactive.HttpMethod org.springframework.web.filter.reactive.HttpMethod ( ) { return this . org.springframework.web.filter.reactive.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.filter.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.filter.reactive.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.filter.reactive.ServerWebExchange ) { this . org.springframework.web.filter.reactive.HttpMethod = org.springframework.web.filter.reactive.ServerWebExchange . getRequest ( ) . getMethod ( ) ; return Mono . empty ( ) ; }  <METHOD_END>
