<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.examples.movies.PlatformTransactionManager ) ; getGraphDatabaseService ( ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = java.util.Calendar ( NUMBER , java.util.Calendar . int , NUMBER , STRING ) ; java.util.Calendar java.util.Calendar = java.util.Calendar ( NUMBER , java.util.Calendar . int , NUMBER , STRING ) ; ReleasedMovie org.springframework.data.neo4j.examples.movies.ReleasedMovie = new ReleasedMovie ( STRING , java.util.Calendar . java.util.Date ( ) , java.util.Calendar . java.util.Date ( ) ) ; org.springframework.data.neo4j.examples.movies.AbstractAnnotatedEntityRepository . save ( org.springframework.data.neo4j.examples.movies.ReleasedMovie ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = java.util.Calendar ( NUMBER , java.util.Calendar . int , NUMBER , STRING ) ; ReleasedMovie org.springframework.data.neo4j.examples.movies.ReleasedMovie = new ReleasedMovie ( STRING , null , java.util.Calendar . java.util.Date ( ) ) ; org.springframework.data.neo4j.examples.movies.AbstractAnnotatedEntityRepository . save ( org.springframework.data.neo4j.examples.movies.ReleasedMovie ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Movie org.springframework.data.neo4j.examples.movies.Movie = new Movie ( STRING ) ; org.springframework.data.neo4j.examples.movies.Movie . setTags ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.data.neo4j.examples.movies.Movie . setImage ( new byte [] { NUMBER , NUMBER , NUMBER } ) ; org.springframework.data.neo4j.examples.movies.AbstractEntityRepository . save ( org.springframework.data.neo4j.examples.movies.Movie ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { java.util.Set<org.springframework.data.neo4j.examples.movies.User> < User > java.util.Set<org.springframework.data.neo4j.examples.movies.User> = new java.util.HashSet<org.springframework.data.neo4j.examples.movies.User> <> ( ) ; java.util.Set<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; java.util.Set<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; java.util.Set<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( java.util.Set<org.springframework.data.neo4j.examples.movies.User> ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.UserRepository . count ( ) ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { java.util.Set<org.springframework.data.neo4j.examples.movies.User> < User > java.util.Set<org.springframework.data.neo4j.examples.movies.User> = new java.util.HashSet<org.springframework.data.neo4j.examples.movies.User> <> ( ) ; java.util.Set<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; java.util.Set<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; java.util.Set<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( java.util.Set<org.springframework.data.neo4j.examples.movies.User> ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.UserRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.examples.movies.User> < User > java.util.List<org.springframework.data.neo4j.examples.movies.User> = new java.util.LinkedList<org.springframework.data.neo4j.examples.movies.User> <> ( ) ; java.util.List<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; java.util.List<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; java.util.List<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( java.util.List<org.springframework.data.neo4j.examples.movies.User> ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.UserRepository . count ( ) ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { java.util.List<org.springframework.data.neo4j.examples.movies.User> < User > java.util.List<org.springframework.data.neo4j.examples.movies.User> = new java.util.LinkedList<org.springframework.data.neo4j.examples.movies.User> <> ( ) ; java.util.List<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; java.util.List<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; java.util.List<org.springframework.data.neo4j.examples.movies.User> . add ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( java.util.List<org.springframework.data.neo4j.examples.movies.User> ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.UserRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = org.springframework.data.neo4j.examples.movies.UserRepository . save ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.User . setName ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = org.springframework.data.neo4j.examples.movies.UserRepository . save ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.User . setName ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.UserService . updateUser ( org.springframework.data.neo4j.examples.movies.User , STRING ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> < User > java.util.Optional<org.springframework.data.neo4j.examples.movies.User> = org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . ifPresent ( loadedUser -> { assertEquals ( STRING , loadedUser . getName ( ) ) ; assertTrue ( loadedUser . equals ( user ) ) ; assertTrue ( loadedUser == user ) ; } ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> < User > java.util.Optional<org.springframework.data.neo4j.examples.movies.User> = org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . ifPresent ( loadedUser -> { assertEquals ( STRING , loadedUser . getName ( ) ) ; assertTrue ( loadedUser . equals ( user ) ) ; assertTrue ( loadedUser == user ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Actor org.springframework.data.neo4j.examples.movies.Actor = new Actor ( STRING , STRING ) ; org.springframework.data.neo4j.examples.movies.ActorRepository . save ( org.springframework.data.neo4j.examples.movies.Actor ) ; assertNotNull ( java.lang.Iterable<?> ( Actor .class , STRING , STRING ) . java.util.Iterator<> ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> < User > java.util.Optional<org.springframework.data.neo4j.examples.movies.User> = org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . ifPresent ( loadedUser -> { assertNull ( loadedUser . getName ( ) ) ; assertTrue ( loadedUser . equals ( user ) ) ; assertTrue ( loadedUser == user ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.UserRepository . delete ( org.springframework.data.neo4j.examples.movies.User ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findAll ( ) . iterator ( ) . hasNext ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findAll ( NUMBER ) . iterator ( ) . hasNext ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . exists ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.UserRepository . count ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) . isPresent ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) , NUMBER ) . isPresent ( ) ) ; } } ) ; try ( Transaction org.springframework.data.neo4j.examples.movies.Transaction = getGraphDatabaseService ( ) . beginTx ( ) ) { assertFalse ( getGraphDatabaseService ( ) . getAllNodes ( ) . iterator ( ) . hasNext ( ) ) ; org.springframework.data.neo4j.examples.movies.Transaction . success ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.UserRepository . delete ( org.springframework.data.neo4j.examples.movies.User ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findAll ( ) . iterator ( ) . hasNext ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findAll ( NUMBER ) . iterator ( ) . hasNext ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . exists ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.UserRepository . count ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) . isPresent ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) , NUMBER ) . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException , org.springframework.data.neo4j.examples.movies.MoviesIntegrationTests.Neo4jFailedToStartException { java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.concurrent.ExecutorService . java.util.concurrent.Future<?> ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.data.neo4j.examples.movies.UserRepository . save ( new User ( ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; } java.util.concurrent.CountDownLatch . void ( ) ; java.util.concurrent.ExecutorService . void ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.UserRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.data.neo4j.examples.movies.UserRepository . save ( new User ( ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DataAccessException .class ) public void void ( ) { org.springframework.data.neo4j.examples.movies.RatingRepository . findAll ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( new Genre ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( new Genre ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( new Genre ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( new Genre ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( new Genre ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User , NUMBER ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; Genre org.springframework.data.neo4j.examples.movies.Genre = new Genre ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING + STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; Genre org.springframework.data.neo4j.examples.movies.Genre = new Genre ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( new Genre ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User , NUMBER ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; Genre org.springframework.data.neo4j.examples.movies.Genre = new Genre ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.Genre . setName ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; Genre org.springframework.data.neo4j.examples.movies.Genre = new Genre ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.Genre . setName ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; Genre org.springframework.data.neo4j.examples.movies.Genre = new Genre ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.User . notInterestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; Genre org.springframework.data.neo4j.examples.movies.Genre = new Genre ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.User . notInterestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; Genre org.springframework.data.neo4j.examples.movies.Genre = new Genre ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.UserService . notInterestedIn ( org.springframework.data.neo4j.examples.movies.User . getId ( ) , org.springframework.data.neo4j.examples.movies.Genre . getId ( ) ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; Genre org.springframework.data.neo4j.examples.movies.Genre = new Genre ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . interestedIn ( org.springframework.data.neo4j.examples.movies.Genre ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.UserService . notInterestedIn ( org.springframework.data.neo4j.examples.movies.User . getId ( ) , org.springframework.data.neo4j.examples.movies.Genre . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cinema org.springframework.data.neo4j.examples.movies.Cinema = new Cinema ( STRING ) ; org.springframework.data.neo4j.examples.movies.Cinema . addVisitor ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.CinemaRepository . save ( org.springframework.data.neo4j.examples.movies.Cinema ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; Cinema org.springframework.data.neo4j.examples.movies.Cinema = new Cinema ( STRING ) ; org.springframework.data.neo4j.examples.movies.Cinema . addVisitor ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.CinemaRepository . save ( org.springframework.data.neo4j.examples.movies.Cinema ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; Cinema org.springframework.data.neo4j.examples.movies.Cinema = new Cinema ( STRING ) ; org.springframework.data.neo4j.examples.movies.Cinema . addVisitor ( org.springframework.data.neo4j.examples.movies.User ) ; org.springframework.data.neo4j.examples.movies.CinemaRepository . save ( org.springframework.data.neo4j.examples.movies.Cinema ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . befriend ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; } } ) ; try { assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . befriend ( new User ( STRING ) ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { getGraphDatabaseService ( ) . execute ( STRING ) ; User org.springframework.data.neo4j.examples.movies.User = ( ( java.lang.Iterable<org.springframework.data.neo4j.examples.movies.User> < User > ) java.lang.Iterable<?> ( User .class , STRING , STRING ) ) . java.util.Iterator<org.springframework.data.neo4j.examples.movies.User> ( ) . next ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . size ( ) ) ; User org.springframework.data.neo4j.examples.movies.User = org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . iterator ( ) . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.examples.movies.User . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . size ( ) ) ; assertTrue ( org.springframework.data.neo4j.examples.movies.User == org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . iterator ( ) . next ( ) ) ; assertTrue ( org.springframework.data.neo4j.examples.movies.User . equals ( org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . iterator ( ) . next ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { getGraphDatabaseService ( ) . execute ( STRING ) ; User org.springframework.data.neo4j.examples.movies.User = ( ( java.lang.Iterable<org.springframework.data.neo4j.examples.movies.User> < User > ) java.lang.Iterable<?> ( User .class , STRING , STRING ) ) . java.util.Iterator<org.springframework.data.neo4j.examples.movies.User> ( ) . next ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . size ( ) ) ; User org.springframework.data.neo4j.examples.movies.User = org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . iterator ( ) . next ( ) ; assertEquals ( STRING , org.springframework.data.neo4j.examples.movies.User . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . size ( ) ) ; assertTrue ( org.springframework.data.neo4j.examples.movies.User == org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . iterator ( ) . next ( ) ) ; assertTrue ( org.springframework.data.neo4j.examples.movies.User . equals ( org.springframework.data.neo4j.examples.movies.User . getFriends ( ) . iterator ( ) . next ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; TempMovie org.springframework.data.neo4j.examples.movies.TempMovie = new TempMovie ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . rate ( org.springframework.data.neo4j.examples.movies.TempMovie , NUMBER , STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; User org.springframework.data.neo4j.examples.movies.User = ( ( java.lang.Iterable<org.springframework.data.neo4j.examples.movies.User> < User > ) java.lang.Iterable<?> ( User .class , STRING , STRING ) ) . java.util.Iterator<org.springframework.data.neo4j.examples.movies.User> ( ) . next ( ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { TempMovie org.springframework.data.neo4j.examples.movies.TempMovie = new TempMovie ( STRING ) ; org.springframework.data.neo4j.examples.movies.TempMovie = org.springframework.data.neo4j.examples.movies.TempMovieRepository . save ( org.springframework.data.neo4j.examples.movies.TempMovie ) ; User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . rate ( org.springframework.data.neo4j.examples.movies.TempMovie , NUMBER , STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; TempMovie org.springframework.data.neo4j.examples.movies.TempMovie = ( ( java.lang.Iterable<org.springframework.data.neo4j.examples.movies.TempMovie> < TempMovie > ) java.lang.Iterable<?> ( TempMovie .class , STRING , STRING ) ) . java.util.Iterator<org.springframework.data.neo4j.examples.movies.TempMovie> ( ) . next ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.TempMovie . getRatings ( ) . size ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { TempMovie org.springframework.data.neo4j.examples.movies.TempMovie = new TempMovie ( STRING ) ; org.springframework.data.neo4j.examples.movies.TempMovie = org.springframework.data.neo4j.examples.movies.TempMovieRepository . save ( org.springframework.data.neo4j.examples.movies.TempMovie ) ; User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . rate ( org.springframework.data.neo4j.examples.movies.TempMovie , NUMBER , STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; TempMovie org.springframework.data.neo4j.examples.movies.TempMovie = ( ( java.lang.Iterable<org.springframework.data.neo4j.examples.movies.TempMovie> < TempMovie > ) java.lang.Iterable<?> ( TempMovie .class , STRING , STRING ) ) . java.util.Iterator<org.springframework.data.neo4j.examples.movies.TempMovie> ( ) . next ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.examples.movies.TempMovie . getRatings ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.examples.movies.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { TempMovie org.springframework.data.neo4j.examples.movies.TempMovie = org.springframework.data.neo4j.examples.movies.TempMovieRepository . save ( new TempMovie ( STRING ) ) ; User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . rate ( org.springframework.data.neo4j.examples.movies.TempMovie , NUMBER , STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.TempMovie> < TempMovie > java.util.Optional<org.springframework.data.neo4j.examples.movies.TempMovie> = org.springframework.data.neo4j.examples.movies.TempMovieRepository . findOne ( org.springframework.data.neo4j.examples.movies.TempMovie . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.TempMovie> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.TempMovie> . ifPresent ( actual -> { assertEquals ( movie . getName ( ) , actual . getName ( ) ) ; } ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> < User > java.util.Optional<org.springframework.data.neo4j.examples.movies.User> = org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . ifPresent ( actual -> { assertEquals ( user . getName ( ) , actual . getName ( ) ) ; } ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.Rating> < Rating > java.util.Optional<org.springframework.data.neo4j.examples.movies.Rating> = org.springframework.data.neo4j.examples.movies.RatingRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getRatings ( ) . iterator ( ) . next ( ) . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.Rating> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.Rating> . ifPresent ( actual -> { assertEquals ( NUMBER , actual . getStars ( ) ) ; } ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.TempMovieRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) . isPresent ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.TempMovie . getId ( ) , NUMBER ) . isPresent ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.RatingRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) . isPresent ( ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.examples.movies.TransactionStatus ) { TempMovie org.springframework.data.neo4j.examples.movies.TempMovie = org.springframework.data.neo4j.examples.movies.TempMovieRepository . save ( new TempMovie ( STRING ) ) ; User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; org.springframework.data.neo4j.examples.movies.User . rate ( org.springframework.data.neo4j.examples.movies.TempMovie , NUMBER , STRING ) ; org.springframework.data.neo4j.examples.movies.UserRepository . save ( org.springframework.data.neo4j.examples.movies.User ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.TempMovie> < TempMovie > java.util.Optional<org.springframework.data.neo4j.examples.movies.TempMovie> = org.springframework.data.neo4j.examples.movies.TempMovieRepository . findOne ( org.springframework.data.neo4j.examples.movies.TempMovie . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.TempMovie> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.TempMovie> . ifPresent ( actual -> { assertEquals ( movie . getName ( ) , actual . getName ( ) ) ; } ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> < User > java.util.Optional<org.springframework.data.neo4j.examples.movies.User> = org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.User> . ifPresent ( actual -> { assertEquals ( user . getName ( ) , actual . getName ( ) ) ; } ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.Rating> < Rating > java.util.Optional<org.springframework.data.neo4j.examples.movies.Rating> = org.springframework.data.neo4j.examples.movies.RatingRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getRatings ( ) . iterator ( ) . next ( ) . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.examples.movies.Rating> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.examples.movies.Rating> . ifPresent ( actual -> { assertEquals ( NUMBER , actual . getStars ( ) ) ; } ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.TempMovieRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) . isPresent ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.UserRepository . findOne ( org.springframework.data.neo4j.examples.movies.TempMovie . getId ( ) , NUMBER ) . isPresent ( ) ) ; assertFalse ( org.springframework.data.neo4j.examples.movies.RatingRepository . findOne ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; User org.springframework.data.neo4j.examples.movies.User = new User ( STRING ) ; java.util.List<org.springframework.data.neo4j.examples.movies.User> < User > java.util.List<org.springframework.data.neo4j.examples.movies.User> = java.util.Arrays . java.util.List ( org.springframework.data.neo4j.examples.movies.User , org.springframework.data.neo4j.examples.movies.User , org.springframework.data.neo4j.examples.movies.User ) ; java.lang.Iterable<org.springframework.data.neo4j.examples.movies.User> < User > java.lang.Iterable<org.springframework.data.neo4j.examples.movies.User> = org.springframework.data.neo4j.examples.movies.UserRepository . save ( java.util.List<org.springframework.data.neo4j.examples.movies.User> ) ; for ( User org.springframework.data.neo4j.examples.movies.User : java.lang.Iterable<org.springframework.data.neo4j.examples.movies.User> ) { assertNotNull ( org.springframework.data.neo4j.examples.movies.User . getId ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Calendar java.util.Calendar ( int int , int int , int int , java.lang.String java.lang.String ) { java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( int , int , int ) ; java.util.Calendar . void ( java.util.TimeZone . java.util.TimeZone ( java.lang.String ) ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; return java.util.Calendar ; }  <METHOD_END>
<METHOD_START> protected java.lang.Iterable<?> < ? > java.lang.Iterable<?> ( java.lang.Class java.lang.Class , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return org.springframework.data.neo4j.examples.movies.Session . loadAll ( java.lang.Class , new Filter ( java.lang.String , ComparisonOperator . EQUALS , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private void ( long long ) { super( java.lang.String . java.lang.String ( STRING , long ) ); }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.examples.movies.PlatformTransactionManager org.springframework.data.neo4j.examples.movies.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.examples.movies.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.examples.movies.SessionFactory org.springframework.data.neo4j.examples.movies.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
