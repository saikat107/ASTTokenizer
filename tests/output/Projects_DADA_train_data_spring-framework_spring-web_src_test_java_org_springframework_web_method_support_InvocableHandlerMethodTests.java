<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.method.support.InvocableHandlerMethodTests.Handler .class . java.lang.reflect.Method ( STRING , java.lang.Integer .class , java.lang.String .class ) ; this . org.springframework.web.method.support.InvocableHandlerMethod = new InvocableHandlerMethod ( new org.springframework.web.method.support.InvocableHandlerMethodTests.Handler ( ) , java.lang.reflect.Method ) ; this . org.springframework.web.method.support.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) , new MockHttpServletResponse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StubArgumentResolver org.springframework.web.method.support.StubArgumentResolver = new StubArgumentResolver ( java.lang.Integer .class , NUMBER ) ; StubArgumentResolver org.springframework.web.method.support.StubArgumentResolver = new StubArgumentResolver ( java.lang.String .class , STRING ) ; HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( org.springframework.web.method.support.StubArgumentResolver ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( org.springframework.web.method.support.StubArgumentResolver ) ; org.springframework.web.method.support.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ) ; java.lang.Object java.lang.Object = org.springframework.web.method.support.InvocableHandlerMethod . invokeForRequest ( org.springframework.web.method.support.NativeWebRequest , null ) ; assertEquals ( NUMBER , org.springframework.web.method.support.StubArgumentResolver . getResolvedParameters ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.web.method.support.StubArgumentResolver . getResolvedParameters ( ) . size ( ) ) ; assertEquals ( STRING , java.lang.Object ) ; assertEquals ( STRING , org.springframework.web.method.support.StubArgumentResolver . getResolvedParameters ( ) . get ( NUMBER ) . getParameterName ( ) ) ; assertEquals ( STRING , org.springframework.web.method.support.StubArgumentResolver . getResolvedParameters ( ) . get ( NUMBER ) . getParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StubArgumentResolver org.springframework.web.method.support.StubArgumentResolver = new StubArgumentResolver ( java.lang.Integer .class , null ) ; StubArgumentResolver org.springframework.web.method.support.StubArgumentResolver = new StubArgumentResolver ( java.lang.String .class , null ) ; HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( org.springframework.web.method.support.StubArgumentResolver ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( org.springframework.web.method.support.StubArgumentResolver ) ; org.springframework.web.method.support.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ) ; java.lang.Object java.lang.Object = org.springframework.web.method.support.InvocableHandlerMethod . invokeForRequest ( org.springframework.web.method.support.NativeWebRequest , null ) ; assertEquals ( NUMBER , org.springframework.web.method.support.StubArgumentResolver . getResolvedParameters ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.web.method.support.StubArgumentResolver . getResolvedParameters ( ) . size ( ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.web.method.support.InvocableHandlerMethod . invokeForRequest ( org.springframework.web.method.support.NativeWebRequest , null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.method.support.InvocableHandlerMethod . invokeForRequest ( org.springframework.web.method.support.NativeWebRequest , null , NUMBER , STRING ) ; assertEquals ( java.lang.String .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StubArgumentResolver org.springframework.web.method.support.StubArgumentResolver = new StubArgumentResolver ( java.lang.Integer .class , NUMBER ) ; StubArgumentResolver org.springframework.web.method.support.StubArgumentResolver = new StubArgumentResolver ( java.lang.String .class , STRING ) ; HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( org.springframework.web.method.support.StubArgumentResolver ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( org.springframework.web.method.support.StubArgumentResolver ) ; org.springframework.web.method.support.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ) ; java.lang.Object java.lang.Object = org.springframework.web.method.support.InvocableHandlerMethod . invokeForRequest ( org.springframework.web.method.support.NativeWebRequest , null , NUMBER , STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( new org.springframework.web.method.support.InvocableHandlerMethodTests.ExceptionRaisingArgumentResolver ( ) ) ; org.springframework.web.method.support.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ) ; try { org.springframework.web.method.support.InvocableHandlerMethod . invokeForRequest ( org.springframework.web.method.support.NativeWebRequest , null ) ; fail ( STRING ) ; } catch ( HttpMessageNotReadableException org.springframework.web.method.support.HttpMessageNotReadableException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StubArgumentResolver org.springframework.web.method.support.StubArgumentResolver = new StubArgumentResolver ( java.lang.Integer .class , STRING ) ; StubArgumentResolver org.springframework.web.method.support.StubArgumentResolver = new StubArgumentResolver ( java.lang.String .class , STRING ) ; HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( org.springframework.web.method.support.StubArgumentResolver ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( org.springframework.web.method.support.StubArgumentResolver ) ; org.springframework.web.method.support.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ) ; try { org.springframework.web.method.support.InvocableHandlerMethod . invokeForRequest ( org.springframework.web.method.support.NativeWebRequest , null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertNotNull ( STRING , java.lang.IllegalStateException . java.lang.Throwable ( ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.Throwable ( ) instanceof java.lang.IllegalArgumentException ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Throwable java.lang.Throwable = new java.lang.RuntimeException ( STRING ) ; try { void ( java.lang.Throwable ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertSame ( java.lang.Throwable , java.lang.RuntimeException ) ; } java.lang.Throwable = new java.lang.Error ( STRING ) ; try { void ( java.lang.Throwable ) ; } catch ( java.lang.Error java.lang.Error ) { assertSame ( java.lang.Throwable , java.lang.Error ) ; } java.lang.Throwable = new java.lang.Exception ( STRING ) ; try { void ( java.lang.Throwable ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertSame ( java.lang.Throwable , java.lang.Exception ) ; } java.lang.Throwable = new java.lang.Throwable ( STRING ) ; try { void ( java.lang.Throwable ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertNotNull ( java.lang.IllegalStateException . java.lang.Throwable ( ) ) ; assertSame ( java.lang.Throwable , java.lang.IllegalStateException . java.lang.Throwable ( ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; org.springframework.web.method.support.HandlerMethodArgumentResolverComposite . addResolver ( new StubArgumentResolver ( double .class , null ) ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.method.support.InvocableHandlerMethodTests.Handler .class . java.lang.reflect.Method ( STRING , double .class ) ; java.lang.Object java.lang.Object = new org.springframework.web.method.support.InvocableHandlerMethodTests.Handler ( ) ; InvocableHandlerMethod org.springframework.web.method.support.InvocableHandlerMethod = new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.web.method.support.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ) ; try { org.springframework.web.method.support.InvocableHandlerMethod . invokeForRequest ( this . org.springframework.web.method.support.NativeWebRequest , new ModelAndViewContainer ( ) ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.method.support.InvocableHandlerMethodTests.ExceptionRaisingHandler .class . java.lang.reflect.Method ( STRING ) ; java.lang.Object java.lang.Object = new org.springframework.web.method.support.InvocableHandlerMethodTests.ExceptionRaisingHandler ( java.lang.Throwable ) ; new InvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) . invokeForRequest ( org.springframework.web.method.support.NativeWebRequest , null ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer , java.lang.String java.lang.String ) { return java.lang.Integer + STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( double double ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Throwable { throw java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.method.support.MethodParameter ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.method.support.MethodParameter , ModelAndViewContainer org.springframework.web.method.support.ModelAndViewContainer , NativeWebRequest org.springframework.web.method.support.NativeWebRequest , WebDataBinderFactory org.springframework.web.method.support.WebDataBinderFactory ) throws java.lang.Exception { throw new HttpMessageNotReadableException ( STRING ) ; }  <METHOD_END>
