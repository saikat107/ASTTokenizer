<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.context.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.test.web.servlet.samples.context.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcResult org.springframework.test.web.servlet.samples.context.MvcResult = this . org.springframework.test.web.servlet.samples.context.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( request ( ) . asyncStarted ( ) ) . andExpect ( request ( ) . asyncResult ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ) . andReturn ( ) ; Mockito . verify ( this . org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor ) . beforeConcurrentHandling ( any ( ) , any ( ) ) ; Mockito . verify ( this . org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor ) . preProcess ( any ( ) , any ( ) ) ; Mockito . verify ( this . org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor ) . postProcess ( any ( ) , any ( ) , any ( ) ) ; Mockito . verifyNoMoreInteractions ( this . org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor ) ; this . org.springframework.test.web.servlet.samples.context.MockMvc . perform ( asyncDispatch ( org.springframework.test.web.servlet.samples.context.MvcResult ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( STRING ) ) ; Mockito . verify ( this . org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor ) . afterCompletion ( any ( ) , any ( ) ) ; Mockito . verifyNoMoreInteractions ( this . org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncSupportConfigurer org.springframework.test.web.servlet.samples.context.AsyncSupportConfigurer ) { org.springframework.test.web.servlet.samples.context.AsyncSupportConfigurer . registerCallableInterceptors ( org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor org.springframework.test.web.servlet.samples.context.CallableProcessingInterceptor ( ) { return Mockito . mock ( CallableProcessingInterceptor .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.context.AsyncControllerJavaConfigTests.AsyncController org.springframework.test.web.servlet.samples.context.AsyncControllerJavaConfigTests.AsyncController ( ) { return new org.springframework.test.web.servlet.samples.context.AsyncControllerJavaConfigTests.AsyncController ( ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.util.concurrent.Callable<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.concurrent.Callable<java.util.Map<java.lang.String,java.lang.String>> ( ) { return ( ) java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; }  <METHOD_END>
