<METHOD_START> @ Test public void void ( ) java.lang.Exception { FtpPersistentAcceptOnceFileListFilter org.springframework.integration.ftp.filters.FtpPersistentAcceptOnceFileListFilter = new FtpPersistentAcceptOnceFileListFilter ( new SimpleMetadataStore ( ) , STRING ) ; FTPFile org.springframework.integration.ftp.filters.FTPFile = new FTPFile ( ) ; org.springframework.integration.ftp.filters.FTPFile . setName ( STRING ) ; org.springframework.integration.ftp.filters.FTPFile . setTimestamp ( java.util.Calendar . java.util.Calendar ( ) ) ; FTPFile org.springframework.integration.ftp.filters.FTPFile = new FTPFile ( ) ; org.springframework.integration.ftp.filters.FTPFile . setName ( STRING ) ; org.springframework.integration.ftp.filters.FTPFile . setTimestamp ( java.util.Calendar . java.util.Calendar ( ) ) ; FTPFile org.springframework.integration.ftp.filters.FTPFile = new FTPFile ( ) ; org.springframework.integration.ftp.filters.FTPFile . setName ( STRING ) ; org.springframework.integration.ftp.filters.FTPFile . setTimestamp ( java.util.Calendar . java.util.Calendar ( ) ) ; FTPFile [] org.springframework.integration.ftp.filters.FTPFile[] = new FTPFile [] { org.springframework.integration.ftp.filters.FTPFile , org.springframework.integration.ftp.filters.FTPFile , org.springframework.integration.ftp.filters.FTPFile } ; java.util.List<org.springframework.integration.ftp.filters.FTPFile> < FTPFile > java.util.List<org.springframework.integration.ftp.filters.FTPFile> = org.springframework.integration.ftp.filters.FtpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.ftp.filters.FTPFile[] ) ; assertTrue ( java.util.Arrays . boolean ( org.springframework.integration.ftp.filters.FTPFile[] , java.util.List<org.springframework.integration.ftp.filters.FTPFile> . toArray ( ) ) ) ; java.util.List<org.springframework.integration.ftp.filters.FTPFile> < FTPFile > java.util.List<org.springframework.integration.ftp.filters.FTPFile> = org.springframework.integration.ftp.filters.FtpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.ftp.filters.FTPFile[] ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ftp.filters.FTPFile> . size ( ) ) ; org.springframework.integration.ftp.filters.FtpPersistentAcceptOnceFileListFilter . rollback ( java.util.List<org.springframework.integration.ftp.filters.FTPFile> . get ( NUMBER ) , java.util.List<org.springframework.integration.ftp.filters.FTPFile> ) ; java.util.List<org.springframework.integration.ftp.filters.FTPFile> = org.springframework.integration.ftp.filters.FtpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.ftp.filters.FTPFile[] ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ftp.filters.FTPFile> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.ftp.filters.FTPFile> . get ( NUMBER ) . getName ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.ftp.filters.FTPFile> . get ( NUMBER ) . getName ( ) ) ; java.util.List<org.springframework.integration.ftp.filters.FTPFile> = org.springframework.integration.ftp.filters.FtpPersistentAcceptOnceFileListFilter . filterFiles ( org.springframework.integration.ftp.filters.FTPFile[] ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.ftp.filters.FTPFile> . size ( ) ) ; org.springframework.integration.ftp.filters.FtpPersistentAcceptOnceFileListFilter . close ( ) ; }  <METHOD_END>
