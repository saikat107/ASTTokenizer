<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.UnicastReceivingChannelAdapter ) ; assertTrue ( org.springframework.integration.ip.config.UnicastReceivingChannelAdapter . getPort ( ) >= NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.UnicastReceivingChannelAdapter . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.UnicastReceivingChannelAdapter . getComponentType ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskExecutor , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( org.springframework.integration.ip.config.MessageChannel , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; DatagramPacketMessageMapper org.springframework.integration.ip.config.DatagramPacketMessageMapper = ( DatagramPacketMessageMapper ) org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.DatagramPacketMessageMapper ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.ip.config.UnicastReceivingChannelAdapter , STRING , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.MulticastReceivingChannelAdapter ) ; assertTrue ( org.springframework.integration.ip.config.MulticastReceivingChannelAdapter . getPort ( ) >= NUMBER ) ; assertEquals ( STRING , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNotSame ( org.springframework.integration.ip.config.TaskExecutor , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; DatagramPacketMessageMapper org.springframework.integration.ip.config.DatagramPacketMessageMapper = ( DatagramPacketMessageMapper ) org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.DatagramPacketMessageMapper ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpReceivingChannelAdapter ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpReceivingChannelAdapter . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpReceivingChannelAdapter . getComponentType ( ) ) ; assertEquals ( org.springframework.integration.ip.config.MessageChannel , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertFalse ( org.springframework.integration.ip.config.AbstractConnectionFactory . isLookupHost ( ) ) ; assertFalse ( org.springframework.integration.ip.config.TcpReceivingChannelAdapter . isAutoStartup ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.TcpReceivingChannelAdapter . getPhase ( ) ) ; TcpMessageMapper org.springframework.integration.ip.config.TcpMessageMapper = TestUtils . getPropertyValue ( org.springframework.integration.ip.config.AbstractConnectionFactory , STRING , TcpMessageMapper .class ) ; assertSame ( org.springframework.integration.ip.config.TcpMessageMapper , org.springframework.integration.ip.config.TcpMessageMapper ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.ip.config.TcpMessageMapper , STRING , java.lang.Boolean .class ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.ip.config.AbstractConnectionFactory , STRING ) ; assertTrue ( java.lang.Object instanceof DefaultTcpNetSSLSocketFactorySupport ) ; assertNotNull ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; TcpSSLContextSupport org.springframework.integration.ip.config.TcpSSLContextSupport = new DefaultTcpSSLContextSupport ( STRING , STRING , STRING , STRING ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.ip.config.TcpSSLContextSupport , STRING ) instanceof UrlResource ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.ip.config.TcpSSLContextSupport , STRING ) instanceof UrlResource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.integration.ip.config.AbstractConnectionFactory . isLookupHost ( ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.ip.config.AbstractConnectionFactory , STRING , java.lang.Boolean .class ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.ip.config.AbstractConnectionFactory , STRING ) ; assertTrue ( java.lang.Object instanceof DefaultTcpNioSSLConnectionSupport ) ; assertNotNull ( TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.ip.config.AbstractConnectionFactory , STRING ) ) ; assertSame ( this . org.springframework.integration.ip.config.ApplicationContext . getBean ( DefaultTcpNioSSLConnectionSupport .class ) , TestUtils . getPropertyValue ( this . org.springframework.integration.ip.config.AbstractConnectionFactory , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.UnicastSendingMessageHandler ) ; assertTrue ( org.springframework.integration.ip.config.UnicastSendingMessageHandler . getPort ( ) >= NUMBER ) ; assertEquals ( STRING , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; int int = ( java.lang.Integer ) org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertTrue ( STRING + int , int >= NUMBER ) ; DatagramPacketMessageMapper org.springframework.integration.ip.config.DatagramPacketMessageMapper = ( DatagramPacketMessageMapper ) org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) new DirectFieldAccessor ( org.springframework.integration.ip.config.DatagramPacketMessageMapper ) . getPropertyValue ( STRING ) ; assertEquals ( STRING + int , java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskExecutor , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.UnicastSendingMessageHandler . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.UnicastSendingMessageHandler . getComponentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.MulticastSendingMessageHandler ) ; assertTrue ( org.springframework.integration.ip.config.MulticastSendingMessageHandler . getPort ( ) >= NUMBER ) ; assertEquals ( STRING , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; int int = ( java.lang.Integer ) org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertTrue ( STRING + int , int >= NUMBER ) ; DatagramPacketMessageMapper org.springframework.integration.ip.config.DatagramPacketMessageMapper = ( DatagramPacketMessageMapper ) org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) new DirectFieldAccessor ( org.springframework.integration.ip.config.DatagramPacketMessageMapper ) . getPropertyValue ( STRING ) ; assertEquals ( STRING + int , java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { @ java.lang.SuppressWarnings ( STRING ) java.util.Set<org.springframework.integration.ip.config.MessageHandler> < MessageHandler > java.util.Set<org.springframework.integration.ip.config.MessageHandler> = ( java.util.Set<org.springframework.integration.ip.config.MessageHandler> < MessageHandler > ) TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( this . org.springframework.integration.ip.config.MessageChannel , STRING ) , STRING ) ; java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> < MessageHandler > java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> = java.util.Set<org.springframework.integration.ip.config.MessageHandler> . iterator ( ) ; assertSame ( this . org.springframework.integration.ip.config.MulticastSendingMessageHandler , java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> . next ( ) ) ; assertSame ( this . org.springframework.integration.ip.config.UnicastSendingMessageHandler , java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.ip.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.ip.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.ip.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpSendingMessageHandler ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpSendingMessageHandler . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpSendingMessageHandler . getComponentType ( ) ) ; assertFalse ( org.springframework.integration.ip.config.AbstractConnectionFactory . isLookupHost ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertFalse ( org.springframework.integration.ip.config.AbstractEndpoint . isAutoStartup ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractEndpoint . getPhase ( ) ) ; assertFalse ( ( java.lang.Boolean ) TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.ip.config.AbstractConnectionFactory , STRING ) , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ip.config.AbstractConnectionFactory , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpInboundGateway ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpInboundGateway . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpInboundGateway . getComponentType ( ) ) ; assertEquals ( org.springframework.integration.ip.config.MessageChannel , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertTrue ( org.springframework.integration.ip.config.AbstractConnectionFactory . isLookupHost ( ) ) ; assertFalse ( org.springframework.integration.ip.config.TcpInboundGateway . isAutoStartup ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.TcpInboundGateway . getPhase ( ) ) ; assertFalse ( ( java.lang.Boolean ) TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.ip.config.AbstractConnectionFactory , STRING ) , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.ip.config.AbstractConnectionFactory , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpInboundGateway ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpInboundGateway . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpInboundGateway . getComponentType ( ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpOutboundGateway ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; MessagingTemplate org.springframework.integration.ip.config.MessagingTemplate = TestUtils . getPropertyValue ( org.springframework.integration.ip.config.TcpOutboundGateway , STRING , MessagingTemplate .class ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , TestUtils . getPropertyValue ( org.springframework.integration.ip.config.MessagingTemplate , STRING , java.lang.Long .class ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.ip.config.TcpOutboundGateway , STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpOutboundGateway . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.config.TcpOutboundGateway . getComponentType ( ) ) ; assertTrue ( org.springframework.integration.ip.config.AbstractConnectionFactory . isLookupHost ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.ip.config.TcpOutboundGateway , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.integration.ip.config.AbstractConnectionFactory instanceof TcpNioClientConnectionFactory ) ; assertEquals ( STRING , org.springframework.integration.ip.config.AbstractConnectionFactory . getHost ( ) ) ; assertTrue ( org.springframework.integration.ip.config.AbstractConnectionFactory . getPort ( ) >= NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoLinger ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoReceiveBufferSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoSendBufferSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoTrafficClass ( ) ) ; DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.AbstractConnectionFactory ) ; assertSame ( org.springframework.integration.ip.config.Serializer<> , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.Deserializer<> , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskExecutor , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNotNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.integration.ip.config.AbstractConnectionFactory instanceof TcpNioServerConnectionFactory ) ; assertEquals ( org.springframework.integration.ip.config.AbstractConnectionFactory . getPort ( ) , org.springframework.integration.ip.config.AbstractConnectionFactory . getPort ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoLinger ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoReceiveBufferSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoSendBufferSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoTrafficClass ( ) ) ; DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.AbstractConnectionFactory ) ; assertSame ( org.springframework.integration.ip.config.Serializer<> , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.Deserializer<> , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskExecutor , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNotNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.integration.ip.config.AbstractConnectionFactory instanceof TcpNetClientConnectionFactory ) ; assertEquals ( STRING , org.springframework.integration.ip.config.AbstractConnectionFactory . getHost ( ) ) ; assertTrue ( org.springframework.integration.ip.config.AbstractConnectionFactory . getPort ( ) >= NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoLinger ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoReceiveBufferSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoSendBufferSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoTrafficClass ( ) ) ; DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.AbstractConnectionFactory ) ; assertSame ( org.springframework.integration.ip.config.Serializer<> , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.Deserializer<> , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskExecutor , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNotNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.integration.ip.config.AbstractConnectionFactory instanceof TcpNetServerConnectionFactory ) ; assertEquals ( org.springframework.integration.ip.config.AbstractConnectionFactory . getPort ( ) , org.springframework.integration.ip.config.AbstractConnectionFactory . getPort ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoLinger ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoReceiveBufferSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoSendBufferSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoTimeout ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.AbstractConnectionFactory . getSoTrafficClass ( ) ) ; DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.AbstractConnectionFactory ) ; assertSame ( org.springframework.integration.ip.config.Serializer<> , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.Deserializer<> , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskExecutor , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNotNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpSendingMessageHandler ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpSendingMessageHandler ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpReceivingChannelAdapter ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpReceivingChannelAdapter ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.ip.config.EventDrivenConsumer . start ( ) ; this . org.springframework.integration.ip.config.EventDrivenConsumer . start ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Set<org.springframework.integration.ip.config.MessageHandler> < MessageHandler > java.util.Set<org.springframework.integration.ip.config.MessageHandler> = ( java.util.Set<org.springframework.integration.ip.config.MessageHandler> < MessageHandler > ) TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( this . org.springframework.integration.ip.config.MessageChannel , STRING ) , STRING ) ; java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> < MessageHandler > java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> = java.util.Set<org.springframework.integration.ip.config.MessageHandler> . iterator ( ) ; assertSame ( this . org.springframework.integration.ip.config.TcpSendingMessageHandler , java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> . next ( ) ) ; assertSame ( this . org.springframework.integration.ip.config.TcpOutboundGateway , java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> . next ( ) ) ; assertSame ( this . org.springframework.integration.ip.config.TcpSendingMessageHandler , java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> . next ( ) ) ; assertSame ( this . org.springframework.integration.ip.config.TcpSendingMessageHandler , java.util.Iterator<org.springframework.integration.ip.config.MessageHandler> . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpReceivingChannelAdapter ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskScheduler , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpSendingMessageHandler ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskScheduler , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpInboundGateway ) ; assertSame ( org.springframework.integration.ip.config.AbstractConnectionFactory , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TaskScheduler , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( org.springframework.integration.ip.config.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.ip.config.TcpReceivingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( org.springframework.integration.ip.config.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.ip.config.UnicastReceivingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectFieldAccessor org.springframework.integration.ip.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.ip.config.TcpNetServerConnectionFactory ) ; assertSame ( org.springframework.integration.ip.config.TcpSocketFactorySupport , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertSame ( org.springframework.integration.ip.config.TcpSocketSupport , org.springframework.integration.ip.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.ip.config.TcpNioServerConnectionFactory , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.ip.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.ip.config.Message<?> ) throws java.lang.Exception { java.util.concurrent.CountDownLatch . void ( ) ; return null ; }  <METHOD_END>
<METHOD_START> public void ( TcpConnectionSupport org.springframework.integration.ip.config.TcpConnectionSupport , java.lang.String java.lang.String ) { super( org.springframework.integration.ip.config.TcpConnectionSupport , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( TcpConnectionSupport org.springframework.integration.ip.config.TcpConnectionSupport , java.lang.String java.lang.String ) { super( org.springframework.integration.ip.config.TcpConnectionSupport , java.lang.String ); }  <METHOD_END>
