<METHOD_START> void ( Environment org.springframework.boot.test.autoconfigure.jdbc.Environment ) { this . org.springframework.boot.test.autoconfigure.jdbc.Environment = org.springframework.boot.test.autoconfigure.jdbc.Environment ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnProperty ( prefix = STRING , name = STRING , havingValue = STRING ) @ ConditionalOnMissingBean public javax.sql.DataSource javax.sql.DataSource ( ) { return new org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceFactory ( this . org.springframework.boot.test.autoconfigure.jdbc.Environment ) . org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabase ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnProperty ( prefix = STRING , name = STRING , havingValue = STRING , matchIfMissing = true ) public static org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceBeanFactoryPostProcessor org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceBeanFactoryPostProcessor ( ) { return new org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceBeanFactoryPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionRegistry org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionRegistry )				throws org.springframework.boot.test.autoconfigure.jdbc.BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory .class , org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionRegistry , STRING + STRING ) ; void ( org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionRegistry , ( ConfigurableListableBeanFactory ) org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.boot.test.autoconfigure.jdbc.ConfigurableListableBeanFactory )				throws org.springframework.boot.test.autoconfigure.jdbc.BeansException {		}  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionRegistry , ConfigurableListableBeanFactory org.springframework.boot.test.autoconfigure.jdbc.ConfigurableListableBeanFactory ) { BeanDefinitionHolder org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionHolder = org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionHolder ( org.springframework.boot.test.autoconfigure.jdbc.ConfigurableListableBeanFactory ) ; if ( org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionHolder != null ) { java.lang.String java.lang.String = org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionHolder . getBeanName ( ) ; boolean boolean = org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionHolder . getBeanDefinition ( ) . isPrimary ( ) ; org.springframework.boot.test.autoconfigure.jdbc.Log . info ( STRING + java.lang.String + STRING + ( boolean ? STRING : STRING ) + STRING ) ; org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition ( boolean ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition ( boolean boolean ) { BeanDefinition org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition = new RootBeanDefinition ( org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceFactoryBean .class ) ; org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition . setPrimary ( boolean ) ; return org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionHolder org.springframework.boot.test.autoconfigure.jdbc.BeanDefinitionHolder ( ConfigurableListableBeanFactory org.springframework.boot.test.autoconfigure.jdbc.ConfigurableListableBeanFactory ) { java.lang.String [] java.lang.String[] = org.springframework.boot.test.autoconfigure.jdbc.ConfigurableListableBeanFactory . getBeanNamesForType ( javax.sql.DataSource .class ) ; if ( ObjectUtils . isEmpty ( java.lang.String[] ) ) { org.springframework.boot.test.autoconfigure.jdbc.Log . warn ( STRING + STRING ) ; return null ; } if ( java.lang.String[] . int == NUMBER ) { java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; BeanDefinition org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition = org.springframework.boot.test.autoconfigure.jdbc.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; return new BeanDefinitionHolder ( org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition , java.lang.String ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { BeanDefinition org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition = org.springframework.boot.test.autoconfigure.jdbc.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; if ( org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition . isPrimary ( ) ) { return new BeanDefinitionHolder ( org.springframework.boot.test.autoconfigure.jdbc.BeanDefinition , java.lang.String ) ; } } org.springframework.boot.test.autoconfigure.jdbc.Log . warn ( STRING + STRING ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.test.autoconfigure.jdbc.Environment ) { this . org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceFactory = new org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceFactory ( org.springframework.boot.test.autoconfigure.jdbc.Environment ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabase = this . org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceFactory . org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabase ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.sql.DataSource javax.sql.DataSource ( ) java.lang.Exception { return this . org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabase ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return EmbeddedDatabase .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> void ( Environment org.springframework.boot.test.autoconfigure.jdbc.Environment ) { this . org.springframework.boot.test.autoconfigure.jdbc.Environment = org.springframework.boot.test.autoconfigure.jdbc.Environment ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabase org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabase ( ) { EmbeddedDatabaseConnection org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabaseConnection = this . org.springframework.boot.test.autoconfigure.jdbc.Environment . getProperty ( STRING , EmbeddedDatabaseConnection .class , EmbeddedDatabaseConnection . NONE ) ; if ( EmbeddedDatabaseConnection . NONE . equals ( org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabaseConnection ) ) { org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabaseConnection = EmbeddedDatabaseConnection . get ( java.lang.Class<? extends org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration.EmbeddedDataSourceFactory> ( ) . java.lang.ClassLoader ( ) ) ; } Assert . state ( org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabaseConnection != EmbeddedDatabaseConnection . NONE , STRING + STRING + STRING + STRING ) ; return new EmbeddedDatabaseBuilder ( ) . generateUniqueName ( true ) . setType ( org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabaseConnection . getType ( ) ) . build ( ) ; }  <METHOD_END>
