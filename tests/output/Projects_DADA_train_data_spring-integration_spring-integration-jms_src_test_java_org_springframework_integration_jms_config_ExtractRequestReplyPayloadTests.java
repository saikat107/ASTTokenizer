<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( true ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( true ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = org.springframework.integration.jms.config.MessageHandler ( ) ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertTrue ( org.springframework.integration.jms.config.Message<> . getPayload ( ) instanceof java.lang.String ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( true ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( true ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = message -> { assertTrue ( message . getPayload ( ) instanceof String ) ; if ( failOnce . compareAndSet ( false , true ) ) { throw new RuntimeException ( STRING ) ; } MessagingTemplate template = new MessagingTemplate ( ) ; template . setDefaultDestination ( ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ) ; template . send ( message ) ; } ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertTrue ( org.springframework.integration.jms.config.Message<> . getPayload ( ) instanceof java.lang.String ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( false ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( false ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( true ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = org.springframework.integration.jms.config.MessageHandler ( ) ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.jms.config.Message<> . getPayload ( ) , instanceOf ( javax . javax.jms . javax.jms .class ) ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( true ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( false ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( false ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = org.springframework.integration.jms.config.MessageHandler ( ) ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.jms.config.Message<> . getPayload ( ) , instanceOf ( java.lang.String .class ) ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( true ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( false ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = org.springframework.integration.jms.config.MessageHandler ( ) ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.jms.config.Message<> . getPayload ( ) , instanceOf ( java.lang.String .class ) ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( true ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( false ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( true ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = org.springframework.integration.jms.config.MessageHandler ( ) ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertTrue ( org.springframework.integration.jms.config.Message<> . getPayload ( ) instanceof java.lang.String ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( true ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( false ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( true ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = org.springframework.integration.jms.config.MessageHandler ( ) ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertTrue ( org.springframework.integration.jms.config.Message<> . getPayload ( ) instanceof javax . javax.jms . javax.jms ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( false ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( true ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( true ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = org.springframework.integration.jms.config.MessageHandler ( ) ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.jms.config.Message<> . getPayload ( ) , instanceOf ( java.lang.String .class ) ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractRequestPayload ( false ) ; this . org.springframework.integration.jms.config.JmsOutboundGateway . setExtractReplyPayload ( false ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractReplyPayload ( false ) ; this . org.springframework.integration.jms.config.ChannelPublishingJmsMessageListener . setExtractRequestPayload ( false ) ; MessageHandler org.springframework.integration.jms.config.MessageHandler = org.springframework.integration.jms.config.MessageHandler ( ) ; this . org.springframework.integration.jms.config.SubscribableChannel . subscribe ( org.springframework.integration.jms.config.MessageHandler ) ; this . org.springframework.integration.jms.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING + this . org.springframework.integration.jms.config.TestName . getMethodName ( ) ) ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = this . org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.jms.config.Message<> . getPayload ( ) , instanceOf ( javax . javax.jms . javax.jms .class ) ) ; this . org.springframework.integration.jms.config.SubscribableChannel . unsubscribe ( org.springframework.integration.jms.config.MessageHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.config.MessageHandler org.springframework.integration.jms.config.MessageHandler ( ) { return message -> { assertTrue ( message . getPayload ( ) instanceof String ) ; MessagingTemplate template = new MessagingTemplate ( ) ; template . setDefaultDestination ( ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ) ; template . send ( message ) ; } ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.config.MessageHandler org.springframework.integration.jms.config.MessageHandler ( ) { return message -> { assertThat ( message . getPayload ( ) , instanceOf ( javax . jms . ObjectMessage .class ) ) ; MessagingTemplate template = new MessagingTemplate ( ) ; template . setDefaultDestination ( ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ) ; Message < ? > origMessage = null ; try { origMessage = ( Message < ? > ) ( ( javax . jms . ObjectMessage ) message . getPayload ( ) ) . getObject ( ) ; } catch ( JMSException e ) { fail ( STRING ) ; } template . send ( origMessage ) ; } ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jms.config.MessageHandler org.springframework.integration.jms.config.MessageHandler ( ) { return message -> { assertThat ( message . getPayload ( ) , instanceOf ( javax . jms . TextMessage .class ) ) ; MessagingTemplate template = new MessagingTemplate ( ) ; template . setDefaultDestination ( ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ) ; String payload = null ; try { payload = ( ( javax . jms . TextMessage ) message . getPayload ( ) ) . getText ( ) ; } catch ( JMSException e ) { fail ( STRING ) ; } template . send ( new GenericMessage < String > ( payload ) ) ; } ; }  <METHOD_END>
