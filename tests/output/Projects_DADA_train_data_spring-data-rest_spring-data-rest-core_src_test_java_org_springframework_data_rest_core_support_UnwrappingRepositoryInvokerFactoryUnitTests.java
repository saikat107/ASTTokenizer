<METHOD_START> @ Before public void void ( ) java.lang.Exception { when ( org.springframework.data.rest.core.support.RepositoryInvokerFactory . getInvokerFor ( java.lang.Object .class ) ) . thenReturn ( org.springframework.data.rest.core.support.RepositoryInvoker ) ; this . org.springframework.data.rest.core.support.RepositoryInvokerFactory = new UnwrappingRepositoryInvokerFactory ( org.springframework.data.rest.core.support.RepositoryInvokerFactory , java.util.Collections .< EntityLookup < ? > > java.util.List<org.springframework.data.rest.core.support.EntityLookup<?>> ( ) ) ; this . java.lang.reflect.Method = java.lang.Object .class . java.lang.reflect.Method ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Parameters public static java.util.Collection<java.lang.Object[]> < java.lang.Object [] > java.util.Collection<java.lang.Object[]> ( ) { return java.util.Arrays . java.util.List<java.lang.Object[]> ( new java.lang.Object [] [] { { null , java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> ( org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object> -> org.springframework.data.rest.core.support.AbstractOptionalAssert<,java.lang.Object> . isEmpty ( ) ) } , { java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> ( org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object> -> org.springframework.data.rest.core.support.AbstractOptionalAssert<,java.lang.Object> . isEmpty ( ) ) } , { java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) , java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> ( org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object> -> org.springframework.data.rest.core.support.AbstractOptionalAssert<,java.lang.Object> . hasValue ( java.lang.Object ) ) } , { com . google . common . base . Optional . absent ( ) , java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> ( org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object> -> org.springframework.data.rest.core.support.AbstractOptionalAssert<,java.lang.Object> . isEmpty ( ) ) } , { com . google . common . base . Optional . of ( java.lang.Object ) , java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> ( org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object> -> org.springframework.data.rest.core.support.AbstractOptionalAssert<,java.lang.Object> . hasValue ( java.lang.Object ) ) } } ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EntityLookup < java.lang.Object > org.springframework.data.rest.core.support.EntityLookup<java.lang.Object> = mock ( EntityLookup .class ) ; when ( org.springframework.data.rest.core.support.EntityLookup<java.lang.Object> . supports ( Profile .class ) ) . thenReturn ( true ) ; when ( org.springframework.data.rest.core.support.RepositoryInvokerFactory . getInvokerFor ( Profile .class ) ) . thenReturn ( org.springframework.data.rest.core.support.RepositoryInvoker ) ; org.springframework.data.rest.core.support.RepositoryInvokerFactory = new UnwrappingRepositoryInvokerFactory ( org.springframework.data.rest.core.support.RepositoryInvokerFactory , java.util.Arrays . java.util.List ( org.springframework.data.rest.core.support.EntityLookup<java.lang.Object> ) ) ; org.springframework.data.rest.core.support.RepositoryInvokerFactory . getInvokerFor ( Profile .class ) . invokeFindOne ( NUMBER ) ; verify ( org.springframework.data.rest.core.support.EntityLookup<java.lang.Object> , times ( NUMBER ) ) . lookupEntity ( eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> < AbstractOptionalAssert < ? , java.lang.Object > > java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> ( java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> < AbstractOptionalAssert < ? , java.lang.Object > > java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> ) { return java.util.function.Consumer<org.springframework.data.rest.core.support.AbstractOptionalAssert<?,java.lang.Object>> ; }  <METHOD_END>
