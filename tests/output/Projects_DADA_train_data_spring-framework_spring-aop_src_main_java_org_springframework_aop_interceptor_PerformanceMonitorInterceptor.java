<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { setUseDynamicLogger ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation , Log org.springframework.aop.interceptor.Log ) throws java.lang.Throwable { java.lang.String java.lang.String = createInvocationTraceName ( org.springframework.aop.interceptor.MethodInvocation ) ; StopWatch org.springframework.aop.interceptor.StopWatch = new StopWatch ( java.lang.String ) ; org.springframework.aop.interceptor.StopWatch . start ( java.lang.String ) ; try { return org.springframework.aop.interceptor.MethodInvocation . proceed ( ) ; } finally { org.springframework.aop.interceptor.StopWatch . stop ( ) ; org.springframework.aop.interceptor.Log . trace ( org.springframework.aop.interceptor.StopWatch . shortSummary ( ) ) ; } }  <METHOD_END>
