<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , DataSourceTransactionManagerAutoConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( DataSourceTransactionManager .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceTransactionManagerAutoConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBeanNamesForType ( javax.sql.DataSource .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBeanNamesForType ( DataSourceTransactionManager .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , DataSourceTransactionManagerAutoConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( DataSourceTransactionManager .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfigurationTests.TransactionManagerConfiguration .class , EmbeddedDataSourceConfiguration .class , DataSourceTransactionManagerAutoConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBeansOfType ( PlatformTransactionManager .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( PlatformTransactionManager .class ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( MultiDataSourceConfiguration .class , DataSourceTransactionManagerAutoConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBeansOfType ( PlatformTransactionManager .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( MultiDataSourceUsingPrimaryConfiguration .class , DataSourceTransactionManagerAutoConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( DataSourceTransactionManager .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( AbstractTransactionManagementConfiguration .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , DataSourceTransactionManagerAutoConfiguration .class , TransactionAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; DataSourceTransactionManager org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManager = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( DataSourceTransactionManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManager . getDefaultTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManager . isRollbackOnCommitFailure ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.jdbc.PlatformTransactionManager org.springframework.boot.autoconfigure.jdbc.PlatformTransactionManager ( ) { return mock ( PlatformTransactionManager .class ) ; }  <METHOD_END>
