<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.cassandra.repository.query.MappingCassandraConverter = new MappingCassandraConverter ( new BasicCassandraMappingContext ( ) ) ; this . org.springframework.data.cassandra.repository.query.MappingCassandraConverter . afterPropertiesSet ( ) ; this . org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.MappingCassandraConverter , org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConvertingParameterAccessor org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.MappingCassandraConverter , org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; assertThat ( org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor . getBindableValue ( NUMBER ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { when ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getBindableValue ( NUMBER ) ) . thenReturn ( STRING ) ; ConvertingParameterAccessor org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor = new ConvertingParameterAccessor ( org.springframework.data.cassandra.repository.query.MappingCassandraConverter , org.springframework.data.cassandra.repository.query.CassandraParameterAccessor ) ; assertThat ( org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor . getBindableValue ( NUMBER ) ) . isEqualTo ( ( java.lang.Object ) STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.time.LocalDate java.time.LocalDate = java.time.LocalDate . java.time.LocalDate ( NUMBER , NUMBER , NUMBER ) ; when ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getBindableValue ( NUMBER ) ) . thenReturn ( java.time.LocalDate ) ; assertThat ( org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor . getBindableValue ( NUMBER ) ) . isEqualTo ( com . datastax . driver . core . LocalDate . fromYearMonthDay ( NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDataType ( NUMBER ) ) . thenReturn ( DataType . varchar ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . varchar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { java.time.LocalDate java.time.LocalDate = java.time.LocalDate . java.time.LocalDate ( NUMBER , NUMBER , NUMBER ) ; when ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . iterator ( ) ) . thenReturn ( ( java.util.Iterator ) java.util.Collections . java.util.List<java.util.List<java.time.LocalDate>> ( java.util.Collections . java.util.List<java.time.LocalDate> ( java.time.LocalDate ) ) . java.util.Iterator<java.util.List<java.time.LocalDate>> ( ) ) ; when ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty . getTypeInformation ( ) ) . thenReturn ( ( TypeInformation ) ClassTypeInformation . LIST ) ; PotentiallyConvertingIterator org.springframework.data.cassandra.repository.query.PotentiallyConvertingIterator = ( PotentiallyConvertingIterator ) org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor . iterator ( ) ; java.lang.Object java.lang.Object = org.springframework.data.cassandra.repository.query.PotentiallyConvertingIterator . nextConverted ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.List .class ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertThat ( java.util.List<> . get ( NUMBER ) ) . isInstanceOf ( com . com.datastax . com.datastax . com.datastax . com.datastax .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { when ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getDataType ( NUMBER ) ) . thenReturn ( null ) ; when ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getParameterType ( NUMBER ) ) . thenReturn ( ( java.lang.Class ) java.time.LocalDate .class ) ; assertThat ( org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor . getDataType ( NUMBER ) ) . isEqualTo ( DataType . date ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { when ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty . getDataType ( ) ) . thenReturn ( DataType . varchar ( ) ) ; when ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty . findAnnotation ( CassandraType .class ) ) . thenReturn ( java.util.Optional . java.util.Optional ( mock ( CassandraType .class ) ) ) ; when ( org.springframework.data.cassandra.repository.query.CassandraParameterAccessor . getParameterType ( NUMBER ) ) . thenReturn ( ( java.lang.Class ) java.lang.String .class ) ; assertThat ( org.springframework.data.cassandra.repository.query.ConvertingParameterAccessor . getDataType ( NUMBER , java.util.Optional . java.util.Optional ( org.springframework.data.cassandra.repository.query.CassandraPersistentProperty ) ) ) . isEqualTo ( DataType . varchar ( ) ) ; }  <METHOD_END>
