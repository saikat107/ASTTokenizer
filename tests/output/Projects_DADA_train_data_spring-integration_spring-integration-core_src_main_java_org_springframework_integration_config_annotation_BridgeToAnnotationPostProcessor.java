<METHOD_START> public void ( ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) { super( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { boolean boolean = AnnotatedElementUtils . isAnnotated ( java.lang.reflect.Method , Bean .class . java.lang.String ( ) ) ; Assert . isTrue ( boolean , STRING ) ; boolean boolean = MessageChannel .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; Assert . isTrue ( boolean , STRING ) ; boolean boolean = AnnotatedElementUtils . isAnnotated ( java.lang.reflect.Method , BridgeFrom .class . java.lang.String ( ) ) ; Assert . isTrue ( ! boolean , STRING + STRING ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.annotation.MessageHandler org.springframework.integration.config.annotation.MessageHandler ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { BridgeHandler org.springframework.integration.config.annotation.BridgeHandler = new BridgeHandler ( ) ; java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.BridgeHandler . setOutputChannelName ( java.lang.String ) ; } return org.springframework.integration.config.annotation.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.annotation.AbstractEndpoint org.springframework.integration.config.annotation.AbstractEndpoint ( MessageHandler org.springframework.integration.config.annotation.MessageHandler , java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { java.lang.Object java.lang.Object = this . resolveTargetBeanFromMethodWithBeanAnnotation ( java.lang.reflect.Method ) ; Assert . isInstanceOf ( MessageChannel .class , java.lang.Object ) ; return doCreateEndpoint ( org.springframework.integration.config.annotation.MessageHandler , ( MessageChannel ) java.lang.Object , java.util.List<java.lang.annotation.Annotation> ) ; }  <METHOD_END>
