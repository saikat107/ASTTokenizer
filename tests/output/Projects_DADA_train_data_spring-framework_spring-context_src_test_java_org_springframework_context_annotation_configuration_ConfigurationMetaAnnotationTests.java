<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationMetaAnnotationTests.Config .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean , sameInstance ( org.springframework.context.annotation.configuration.TestBean . getSpouse ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { TestBean org.springframework.context.annotation.configuration.TestBean = new TestBean ( ) ; org.springframework.context.annotation.configuration.TestBean . setSpouse ( org.springframework.context.annotation.configuration.TestBean ( ) ) ; return org.springframework.context.annotation.configuration.TestBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
