<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( null ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBeansOfType ( CityRepository .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfigurationTests.DefaultConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBeansOfType ( CityRepository .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfigurationTests.DefaultConfiguration .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBeansOfType ( CityRepository .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfigurationTests.NoRepositoryConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . getBeansOfType ( CityRepository .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext , java.lang.String[] ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; } org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . register ( PropertyPlaceholderAutoConfiguration .class , CouchbaseAutoConfiguration .class , CouchbaseDataAutoConfiguration .class , CouchbaseRepositoriesAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.data.couchbase.AnnotationConfigApplicationContext ; }  <METHOD_END>
