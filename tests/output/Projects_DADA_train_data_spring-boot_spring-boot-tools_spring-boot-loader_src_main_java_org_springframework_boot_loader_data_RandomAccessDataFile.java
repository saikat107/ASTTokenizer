<METHOD_START> public void ( java.io.File java.io.File ) { this( java.io.File , int ); }  <METHOD_END>
<METHOD_START> public void ( java.io.File java.io.File , int int ) { if ( java.io.File == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( ! java.io.File . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.io.File = java.io.File ; this . org.springframework.boot.loader.data.RandomAccessDataFile.FilePool = new org.springframework.boot.loader.data.RandomAccessDataFile.FilePool ( int ) ; this . long = NUMBER ; this . long = java.io.File . long ( ) ; }  <METHOD_END>
<METHOD_START> private void ( java.io.File java.io.File , org.springframework.boot.loader.data.RandomAccessDataFile.FilePool org.springframework.boot.loader.data.RandomAccessDataFile.FilePool , long long , long long ) { this . java.io.File = java.io.File ; this . org.springframework.boot.loader.data.RandomAccessDataFile.FilePool = org.springframework.boot.loader.data.RandomAccessDataFile.FilePool ; this . long = long ; this . long = long ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ResourceAccess org.springframework.boot.loader.data.ResourceAccess ) throws java.io.IOException { return new org.springframework.boot.loader.data.RandomAccessDataFile.DataInputStream ( org.springframework.boot.loader.data.ResourceAccess ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.loader.data.RandomAccessData org.springframework.boot.loader.data.RandomAccessData ( long long , long long ) { if ( long < NUMBER || long < NUMBER || long + long > this . long ) { throw new java.lang.IndexOutOfBoundsException ( ) ; } return new org.springframework.boot.loader.data.RandomAccessDataFile ( this . java.io.File , this . org.springframework.boot.loader.data.RandomAccessDataFile.FilePool , this . long + long , long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { this . org.springframework.boot.loader.data.RandomAccessDataFile.FilePool . void ( ) ; }  <METHOD_END>
<METHOD_START> void ( ResourceAccess org.springframework.boot.loader.data.ResourceAccess ) throws java.io.IOException { if ( org.springframework.boot.loader.data.ResourceAccess == ResourceAccess . ONCE ) { this . java.io.RandomAccessFile = new java.io.RandomAccessFile ( org.springframework.boot.loader.data.RandomAccessDataFile .this . java.io.File , STRING ) ; this . java.io.RandomAccessFile . void ( org.springframework.boot.loader.data.RandomAccessDataFile .this . long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.io.IOException { return int ( null , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( byte [] byte[] ) throws java.io.IOException { return int ( byte[] , NUMBER , byte[] == null ? NUMBER : byte[] . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( byte [] byte[] , int int , int int ) throws java.io.IOException { if ( byte[] == null ) { throw new java.lang.NullPointerException ( STRING ) ; } return int ( byte[] , int , int ) ; }  <METHOD_END>
<METHOD_START> public int int ( byte [] byte[] , int int , int int ) throws java.io.IOException { if ( int == NUMBER ) { return NUMBER ; } int int = int ( int ) ; if ( int <= NUMBER ) { return - NUMBER ; } java.io.RandomAccessFile java.io.RandomAccessFile = this . java.io.RandomAccessFile ; if ( java.io.RandomAccessFile == null ) { java.io.RandomAccessFile = org.springframework.boot.loader.data.RandomAccessDataFile .this . org.springframework.boot.loader.data.RandomAccessDataFile.FilePool . java.io.RandomAccessFile ( ) ; java.io.RandomAccessFile . void ( org.springframework.boot.loader.data.RandomAccessDataFile .this . long + this . int ) ; } try { if ( byte[] == null ) { int int = java.io.RandomAccessFile . int ( ) ; long ( int == - NUMBER ? NUMBER : NUMBER ) ; return int ; } else { return ( int ) long ( java.io.RandomAccessFile . int ( byte[] , int , int ) ) ; } } finally { if ( this . java.io.RandomAccessFile == null ) { org.springframework.boot.loader.data.RandomAccessDataFile .this . org.springframework.boot.loader.data.RandomAccessDataFile.FilePool . void ( java.io.RandomAccessFile ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( long long ) throws java.io.IOException { return ( long <= NUMBER ? NUMBER : long ( int ( long ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { if ( this . java.io.RandomAccessFile != null ) { this . java.io.RandomAccessFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> private int int ( long long ) { return ( int ) java.lang.Math . long ( org.springframework.boot.loader.data.RandomAccessDataFile .this . long - this . int , long ) ; }  <METHOD_END>
<METHOD_START> private long long ( int int ) { this . int += int ; return int ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; this . java.util.concurrent.Semaphore = new java.util.concurrent.Semaphore ( int ) ; this . java.util.Queue<java.io.RandomAccessFile> = new java.util.concurrent.ConcurrentLinkedQueue<java.io.RandomAccessFile> <> ( ) ; }  <METHOD_END>
<METHOD_START> public java.io.RandomAccessFile java.io.RandomAccessFile ( ) java.io.IOException { this . java.util.concurrent.Semaphore . void ( ) ; java.io.RandomAccessFile java.io.RandomAccessFile = this . java.util.Queue<java.io.RandomAccessFile> . java.io.RandomAccessFile ( ) ; if ( java.io.RandomAccessFile != null ) { return java.io.RandomAccessFile ; } return new java.io.RandomAccessFile ( org.springframework.boot.loader.data.RandomAccessDataFile .this . java.io.File , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.RandomAccessFile java.io.RandomAccessFile ) { this . java.util.Queue<java.io.RandomAccessFile> . boolean ( java.io.RandomAccessFile ) ; this . java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { this . java.util.concurrent.Semaphore . void ( this . int ) ; try { java.io.RandomAccessFile java.io.RandomAccessFile = this . java.util.Queue<java.io.RandomAccessFile> . java.io.RandomAccessFile ( ) ; while ( java.io.RandomAccessFile != null ) { java.io.RandomAccessFile . void ( ) ; java.io.RandomAccessFile = this . java.util.Queue<java.io.RandomAccessFile> . java.io.RandomAccessFile ( ) ; } } finally { this . java.util.concurrent.Semaphore . void ( this . int ) ; } }  <METHOD_END>
