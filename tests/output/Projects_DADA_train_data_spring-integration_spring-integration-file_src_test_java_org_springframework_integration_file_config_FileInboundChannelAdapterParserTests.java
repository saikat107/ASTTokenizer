<METHOD_START> @ Before public void void ( ) { org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.FileReadingMessageSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractMessageChannel org.springframework.integration.file.config.AbstractMessageChannel = org.springframework.integration.file.config.ApplicationContext . getBean ( STRING , AbstractMessageChannel .class ) ; assertEquals ( STRING , STRING , org.springframework.integration.file.config.AbstractMessageChannel . getComponentName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Iterator<?> < ? > java.util.Iterator<?> = TestUtils . getPropertyValue ( this . org.springframework.integration.file.config.FileReadingMessageSource , STRING , java.util.Set .class ) . iterator ( ) ; assertThat ( java.util.Iterator<> . next ( ) , instanceOf ( IgnoreHiddenFileListFilter .class ) ) ; assertSame ( this . org.springframework.integration.file.config.FileListFilter<java.io.File> , java.util.Iterator<> . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.io.File java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.io.File , java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultDirectoryScanner org.springframework.integration.file.config.DefaultDirectoryScanner = ( DefaultDirectoryScanner ) org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.file.config.DefaultDirectoryScanner ) ; java.lang.Object java.lang.Object = org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertTrue ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , java.lang.Object instanceof AcceptOnceFileListFilter ) ; assertThat ( org.springframework.integration.file.config.DefaultDirectoryScanner . getClass ( ) . getName ( ) , containsString ( STRING ) ) ; FileReadingMessageSource . FileReadingMessageSource [] FileReadingMessageSource.WatchEventType[] = ( FileReadingMessageSource . FileReadingMessageSource [] ) this . org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , watchEvents . length ) ; for ( FileReadingMessageSource . FileReadingMessageSource FileReadingMessageSource.WatchEventType : FileReadingMessageSource.WatchEventType[] ) { assertNotEquals ( FileReadingMessageSource . WatchEventType . CREATE , FileReadingMessageSource.WatchEventType ) ; assertThat ( FileReadingMessageSource.WatchEventType , isOneOf ( FileReadingMessageSource . WatchEventType . MODIFY , FileReadingMessageSource . WatchEventType . DELETE ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( java.util.concurrent.PriorityBlockingQueue .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.file.config.ApplicationContext . getBean ( STRING ) ; DirectFieldAccessor org.springframework.integration.file.config.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; java.lang.Object java.lang.Object ; if ( java.lang.Object != null ) { java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; } else { java.lang.Object = org.springframework.integration.file.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; } assertSame ( STRING , java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.io.File java.io.File , java.io.File java.io.File ) { return NUMBER ; }  <METHOD_END>
