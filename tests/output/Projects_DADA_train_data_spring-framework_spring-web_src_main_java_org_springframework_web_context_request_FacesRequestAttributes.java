<METHOD_START> public void ( FacesContext org.springframework.web.context.request.FacesContext ) { Assert . notNull ( org.springframework.web.context.request.FacesContext , STRING ) ; this . org.springframework.web.context.request.FacesContext = org.springframework.web.context.request.FacesContext ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.context.request.FacesContext org.springframework.web.context.request.FacesContext ( ) { return this . org.springframework.web.context.request.FacesContext ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.context.request.ExternalContext org.springframework.web.context.request.ExternalContext ( ) { return org.springframework.web.context.request.FacesContext ( ) . getExternalContext ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( int int ) { if ( int == SCOPE_REQUEST ) { return org.springframework.web.context.request.ExternalContext ( ) . getRequestMap ( ) ; } else { return org.springframework.web.context.request.ExternalContext ( ) . getSessionMap ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , int int ) { return java.util.Map<java.lang.String,java.lang.Object> ( int ) . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , int int ) { java.util.Map<java.lang.String,java.lang.Object> ( int ) . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int ) { java.util.Map<java.lang.String,java.lang.Object> ( int ) . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( int int ) { return StringUtils . toStringArray ( java.util.Map<java.lang.String,java.lang.Object> ( int ) . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Runnable java.lang.Runnable , int int ) { if ( org.springframework.web.context.request.Log . isWarnEnabled ( ) ) { org.springframework.web.context.request.Log . warn ( STRING + java.lang.Runnable + STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( REFERENCE_REQUEST . equals ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getRequest ( ) ; } else if ( REFERENCE_SESSION . equals ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getSession ( true ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getContext ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getRequestMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getSessionMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getApplicationMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.FacesContext ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getRequestCookieMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getRequestHeaderMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getRequestHeaderValuesMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getRequestParameterMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getRequestParameterValuesMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getInitParameterMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.FacesContext ( ) . getViewRoot ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.FacesContext ( ) . getViewRoot ( ) . getViewMap ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.ExternalContext ( ) . getFlash ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return org.springframework.web.context.request.FacesContext ( ) . getApplication ( ) . getResourceHandler ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.Object java.lang.Object = org.springframework.web.context.request.ExternalContext ( ) . getSession ( true ) ; try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( STRING ) ; return ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object ) . toString ( ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Object + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { ExternalContext org.springframework.web.context.request.ExternalContext = org.springframework.web.context.request.ExternalContext ( ) ; java.lang.Object java.lang.Object = org.springframework.web.context.request.ExternalContext . getSession ( true ) ; java.lang.Object java.lang.Object = org.springframework.web.context.request.ExternalContext . getSessionMap ( ) . get ( WebUtils . SESSION_MUTEX_ATTRIBUTE ) ; if ( java.lang.Object == null ) { java.lang.Object = ( java.lang.Object != null ? java.lang.Object : org.springframework.web.context.request.ExternalContext ) ; } return java.lang.Object ; }  <METHOD_END>
