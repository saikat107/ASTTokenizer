<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( MetricRepositoryAutoConfiguration .class ) ; GaugeService org.springframework.boot.actuate.autoconfigure.GaugeService = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( BufferGaugeService .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.GaugeService ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( BufferCounterService .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( PrefixMetricReader .class ) ) . isNotNull ( ) ; org.springframework.boot.actuate.autoconfigure.GaugeService . submit ( STRING , NUMBER ) ; MetricReader org.springframework.boot.actuate.autoconfigure.MetricReader = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricReader .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.MetricReader . findOne ( STRING ) . getValue ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( MetricsDropwizardAutoConfiguration .class , MetricRepositoryAutoConfiguration .class , AopAutoConfiguration .class ) ; GaugeService org.springframework.boot.actuate.autoconfigure.GaugeService = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( GaugeService .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.GaugeService ) . isNotNull ( ) ; org.springframework.boot.actuate.autoconfigure.GaugeService . submit ( STRING , NUMBER ) ; DropwizardMetricServices org.springframework.boot.actuate.autoconfigure.DropwizardMetricServices = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( DropwizardMetricServices .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.DropwizardMetricServices ) . isEqualTo ( org.springframework.boot.actuate.autoconfigure.GaugeService ) ; MetricRegistry org.springframework.boot.actuate.autoconfigure.MetricRegistry = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricRegistry .class ) ; @ java.lang.SuppressWarnings ( STRING ) Gauge < java.lang.Double > org.springframework.boot.actuate.autoconfigure.Gauge<java.lang.Double> = ( Gauge < java.lang.Double > ) org.springframework.boot.actuate.autoconfigure.MetricRegistry . getMetrics ( ) . get ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.Gauge<java.lang.Double> . getValue ( ) ) . isEqualTo ( new java.lang.Double ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.actuate.autoconfigure.MetricRepositoryAutoConfigurationTests.Config .class , MetricRepositoryAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( BufferGaugeService .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( BufferCounterService .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.GaugeService org.springframework.boot.actuate.autoconfigure.GaugeService ( ) { return mock ( GaugeService .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.CounterService org.springframework.boot.actuate.autoconfigure.CounterService ( ) { return mock ( CounterService .class ) ; }  <METHOD_END>
