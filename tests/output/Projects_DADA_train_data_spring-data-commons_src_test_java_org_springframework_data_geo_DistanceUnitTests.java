<METHOD_START> @ Test public void void ( ) { assertThat ( new Distance ( NUMBER ) . getMetric ( ) ) . isEqualTo ( ( Metric ) Metrics . NEUTRAL ) ; assertThat ( new Distance ( NUMBER , null ) . getMetric ( ) ) . isEqualTo ( ( Metric ) Metrics . NEUTRAL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; assertThat ( org.springframework.data.geo.Distance . add ( org.springframework.data.geo.Distance ) ) . isEqualTo ( new Distance ( NUMBER , KILOMETERS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; assertThat ( org.springframework.data.geo.Distance . add ( org.springframework.data.geo.Distance , MILES ) ) . isEqualTo ( new Distance ( NUMBER , MILES ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Distance ( NUMBER ) . in ( NEUTRAL ) ) . isEqualTo ( new Distance ( NUMBER ) ) ; assertThat ( new Distance ( double ) . in ( KILOMETERS ) ) . isEqualTo ( new Distance ( NUMBER , KILOMETERS ) ) ; assertThat ( new Distance ( double ) . in ( MILES ) ) . isEqualTo ( new Distance ( NUMBER , MILES ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Distance ( NUMBER , MILES ) ) . isEqualTo ( new Distance ( double ) . in ( MILES ) ) ; assertThat ( new Distance ( NUMBER , KILOMETERS ) ) . isEqualTo ( new Distance ( double ) . in ( KILOMETERS ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Distance ( double , NEUTRAL ) . in ( KILOMETERS ) . getNormalizedValue ( ) ) . isCloseTo ( new Distance ( NUMBER , KILOMETERS ) . getNormalizedValue ( ) , org.springframework.data.geo.Offset<java.lang.Double> ) ; assertThat ( new Distance ( double ) . in ( KILOMETERS ) . getNormalizedValue ( ) ) . isCloseTo ( new Distance ( NUMBER , KILOMETERS ) . getNormalizedValue ( ) , org.springframework.data.geo.Offset<java.lang.Double> ) ; assertThat ( new Distance ( double ) . in ( MILES ) . getNormalizedValue ( ) ) . isCloseTo ( new Distance ( NUMBER , MILES ) . getNormalizedValue ( ) , org.springframework.data.geo.Offset<java.lang.Double> ) ; assertThat ( new Distance ( double ) . in ( MILES ) . getNormalizedValue ( ) ) . isCloseTo ( new Distance ( NUMBER , KILOMETERS ) . getNormalizedValue ( ) , org.springframework.data.geo.Offset<java.lang.Double> ) ; assertThat ( new Distance ( double ) . in ( KILOMETERS ) . getNormalizedValue ( ) ) . isCloseTo ( new Distance ( NUMBER , MILES ) . getNormalizedValue ( ) , org.springframework.data.geo.Offset<java.lang.Double> ) ; assertThat ( new Distance ( NUMBER , KILOMETERS ) . in ( MILES ) . getNormalizedValue ( ) ) . isCloseTo ( new Distance ( NUMBER , MILES ) . getNormalizedValue ( ) , org.springframework.data.geo.Offset<java.lang.Double> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Distance ( NUMBER , KILOMETERS ) . in ( MILES ) . toString ( ) ) . isEqualTo ( new Distance ( NUMBER , MILES ) . java.lang.String ( ) ) ; assertThat ( new Distance ( NUMBER , MILES ) . in ( KILOMETERS ) . toString ( ) ) . isEqualTo ( new Distance ( NUMBER , KILOMETERS ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Distance org.springframework.data.geo.Distance = ( Distance ) SerializationUtils . deserialize ( SerializationUtils . serialize ( org.springframework.data.geo.Distance ) ) ; assertThat ( org.springframework.data.geo.Distance ) . isEqualTo ( org.springframework.data.geo.Distance ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Distance ( NUMBER , KILOMETERS ) . getUnit ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Range < Distance > org.springframework.data.geo.Range<org.springframework.data.geo.Distance> = Distance . between ( org.springframework.data.geo.Distance , org.springframework.data.geo.Distance ) ; assertThat ( org.springframework.data.geo.Range<org.springframework.data.geo.Distance> ) . isNotNull ( ) ; assertThat ( org.springframework.data.geo.Range<org.springframework.data.geo.Distance> . getLowerBound ( ) ) . isEqualTo ( org.springframework.data.geo.Distance ) ; assertThat ( org.springframework.data.geo.Range<org.springframework.data.geo.Distance> . getUpperBound ( ) ) . isEqualTo ( org.springframework.data.geo.Distance ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Range < Distance > org.springframework.data.geo.Range<org.springframework.data.geo.Distance> = Distance . between ( NUMBER , KILOMETERS , NUMBER , KILOMETERS ) ; assertThat ( org.springframework.data.geo.Range<org.springframework.data.geo.Distance> ) . isNotNull ( ) ; assertThat ( org.springframework.data.geo.Range<org.springframework.data.geo.Distance> . getLowerBound ( ) ) . isEqualTo ( org.springframework.data.geo.Distance ) ; assertThat ( org.springframework.data.geo.Range<org.springframework.data.geo.Distance> . getUpperBound ( ) ) . isEqualTo ( org.springframework.data.geo.Distance ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , KILOMETERS ) ; Distance org.springframework.data.geo.Distance = new Distance ( NUMBER , MILES ) ; assertThat ( org.springframework.data.geo.Distance . compareTo ( org.springframework.data.geo.Distance ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.geo.Distance . compareTo ( org.springframework.data.geo.Distance ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.geo.Distance . compareTo ( org.springframework.data.geo.Distance ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.geo.Distance . compareTo ( org.springframework.data.geo.Distance ) ) . isLessThan ( NUMBER ) ; assertThat ( org.springframework.data.geo.Distance . compareTo ( org.springframework.data.geo.Distance ) ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
