<METHOD_START> @ Before public void void ( ) { XmlWebApplicationContext org.springframework.aop.config.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.aop.config.XmlWebApplicationContext . setConfigLocations ( java.lang.String ) ; org.springframework.aop.config.XmlWebApplicationContext . refresh ( ) ; this . org.springframework.aop.config.ApplicationContext = org.springframework.aop.config.XmlWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.aop.config.ITestBean = ( ITestBean ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.config.ITestBean ) ) ; assertTrue ( STRING , org.springframework.aop.config.ITestBean instanceof TestBean ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; org.springframework.aop.config.ITestBean . setName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; ITestBean org.springframework.aop.config.ITestBean = ( ITestBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.config.ITestBean ) ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.aop.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletRequest org.springframework.aop.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( org.springframework.aop.config.MockHttpServletRequest ) ) ; ITestBean org.springframework.aop.config.ITestBean = ( ITestBean ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.config.ITestBean ) ) ; assertTrue ( STRING , org.springframework.aop.config.ITestBean instanceof TestBean ) ; ITestBean org.springframework.aop.config.ITestBean = ( ITestBean ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.config.ITestBean ) ) ; assertFalse ( STRING , org.springframework.aop.config.ITestBean instanceof TestBean ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; org.springframework.aop.config.ITestBean . setName ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( org.springframework.aop.config.MockHttpServletRequest ) ) ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( org.springframework.aop.config.MockHttpServletRequest ) ) ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; assertTrue ( STRING , ( ( Advised ) org.springframework.aop.config.ITestBean ) . getAdvisors ( ) . length > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.aop.config.MockHttpSession = new MockHttpSession ( ) ; MockHttpSession org.springframework.aop.config.MockHttpSession = new MockHttpSession ( ) ; MockHttpServletRequest org.springframework.aop.config.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.aop.config.MockHttpServletRequest . setSession ( org.springframework.aop.config.MockHttpSession ) ; RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( org.springframework.aop.config.MockHttpServletRequest ) ) ; ITestBean org.springframework.aop.config.ITestBean = ( ITestBean ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.config.ITestBean ) ) ; assertFalse ( STRING , org.springframework.aop.config.ITestBean instanceof TestBean ) ; ITestBean org.springframework.aop.config.ITestBean = ( ITestBean ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.aop.config.ITestBean , org.springframework.aop.config.ITestBean ) ; ITestBean org.springframework.aop.config.ITestBean = ( ITestBean ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.config.ITestBean ) ) ; assertFalse ( STRING , org.springframework.aop.config.ITestBean instanceof TestBean ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; org.springframework.aop.config.ITestBean . setName ( java.lang.String ) ; org.springframework.aop.config.MockHttpServletRequest . setSession ( org.springframework.aop.config.MockHttpSession ) ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; org.springframework.aop.config.MockHttpServletRequest . setSession ( org.springframework.aop.config.MockHttpSession ) ; assertEquals ( java.lang.String , org.springframework.aop.config.ITestBean . getName ( ) ) ; assertTrue ( STRING , ( ( Advised ) org.springframework.aop.config.ITestBean ) . getAdvisors ( ) . length > NUMBER ) ; }  <METHOD_END>
