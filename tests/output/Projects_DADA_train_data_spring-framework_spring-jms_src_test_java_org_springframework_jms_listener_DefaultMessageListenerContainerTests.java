<METHOD_START> @ Test public void void ( ) { BackOff org.springframework.jms.listener.BackOff = mock ( BackOff .class ) ; BackOffExecution org.springframework.jms.listener.BackOffExecution = mock ( BackOffExecution .class ) ; given ( org.springframework.jms.listener.BackOffExecution . nextBackOff ( ) ) . willReturn ( BackOffExecution . STOP ) ; given ( org.springframework.jms.listener.BackOff . start ( ) ) . willReturn ( org.springframework.jms.listener.BackOffExecution ) ; DefaultMessageListenerContainer org.springframework.jms.listener.DefaultMessageListenerContainer = org.springframework.jms.listener.DefaultMessageListenerContainer ( org.springframework.jms.listener.ConnectionFactory ( ) ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . setBackOff ( org.springframework.jms.listener.BackOff ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . start ( ) ; assertEquals ( true , org.springframework.jms.listener.DefaultMessageListenerContainer . isRunning ( ) ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . refreshConnectionUntilSuccessful ( ) ; assertEquals ( false , org.springframework.jms.listener.DefaultMessageListenerContainer . isRunning ( ) ) ; verify ( org.springframework.jms.listener.BackOff ) . start ( ) ; verify ( org.springframework.jms.listener.BackOffExecution ) . nextBackOff ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BackOff org.springframework.jms.listener.BackOff = mock ( BackOff .class ) ; BackOffExecution org.springframework.jms.listener.BackOffExecution = mock ( BackOffExecution .class ) ; given ( org.springframework.jms.listener.BackOffExecution . nextBackOff ( ) ) . willReturn ( NUMBER , BackOffExecution . STOP ) ; given ( org.springframework.jms.listener.BackOff . start ( ) ) . willReturn ( org.springframework.jms.listener.BackOffExecution ) ; DefaultMessageListenerContainer org.springframework.jms.listener.DefaultMessageListenerContainer = org.springframework.jms.listener.DefaultMessageListenerContainer ( org.springframework.jms.listener.ConnectionFactory ( ) ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . setBackOff ( org.springframework.jms.listener.BackOff ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . start ( ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . refreshConnectionUntilSuccessful ( ) ; assertEquals ( false , org.springframework.jms.listener.DefaultMessageListenerContainer . isRunning ( ) ) ; verify ( org.springframework.jms.listener.BackOff ) . start ( ) ; verify ( org.springframework.jms.listener.BackOffExecution , times ( NUMBER ) ) . nextBackOff ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BackOff org.springframework.jms.listener.BackOff = mock ( BackOff .class ) ; BackOffExecution org.springframework.jms.listener.BackOffExecution = mock ( BackOffExecution .class ) ; given ( org.springframework.jms.listener.BackOffExecution . nextBackOff ( ) ) . willReturn ( NUMBER , NUMBER , NUMBER ) ; given ( org.springframework.jms.listener.BackOff . start ( ) ) . willReturn ( org.springframework.jms.listener.BackOffExecution ) ; DefaultMessageListenerContainer org.springframework.jms.listener.DefaultMessageListenerContainer = org.springframework.jms.listener.DefaultMessageListenerContainer ( org.springframework.jms.listener.ConnectionFactory ( NUMBER ) ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . setBackOff ( org.springframework.jms.listener.BackOff ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . start ( ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . refreshConnectionUntilSuccessful ( ) ; assertEquals ( true , org.springframework.jms.listener.DefaultMessageListenerContainer . isRunning ( ) ) ; verify ( org.springframework.jms.listener.BackOff ) . start ( ) ; verify ( org.springframework.jms.listener.BackOffExecution , times ( NUMBER ) ) . nextBackOff ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { DefaultMessageListenerContainer org.springframework.jms.listener.DefaultMessageListenerContainer = org.springframework.jms.listener.DefaultMessageListenerContainer ( ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . stop ( ) ; org.springframework.jms.listener.DefaultMessageListenerContainerTests.TestRunnable org.springframework.jms.listener.DefaultMessageListenerContainerTests.TestRunnable = new org.springframework.jms.listener.DefaultMessageListenerContainerTests.TestRunnable ( ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . stop ( org.springframework.jms.listener.DefaultMessageListenerContainerTests.TestRunnable ) ; org.springframework.jms.listener.DefaultMessageListenerContainerTests.TestRunnable . void ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.listener.DefaultMessageListenerContainer org.springframework.jms.listener.DefaultMessageListenerContainer ( ) { DefaultMessageListenerContainer org.springframework.jms.listener.DefaultMessageListenerContainer = org.springframework.jms.listener.DefaultMessageListenerContainer ( org.springframework.jms.listener.ConnectionFactory ( ) ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . afterPropertiesSet ( ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . start ( ) ; return org.springframework.jms.listener.DefaultMessageListenerContainer ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.listener.DefaultMessageListenerContainer org.springframework.jms.listener.DefaultMessageListenerContainer ( ConnectionFactory org.springframework.jms.listener.ConnectionFactory ) { Destination org.springframework.jms.listener.Destination = new Destination ( ) {} ; DefaultMessageListenerContainer org.springframework.jms.listener.DefaultMessageListenerContainer = new DefaultMessageListenerContainer ( ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . setConnectionFactory ( org.springframework.jms.listener.ConnectionFactory ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . setCacheLevel ( DefaultMessageListenerContainer . CACHE_NONE ) ; org.springframework.jms.listener.DefaultMessageListenerContainer . setDestination ( org.springframework.jms.listener.Destination ) ; return org.springframework.jms.listener.DefaultMessageListenerContainer ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.listener.ConnectionFactory org.springframework.jms.listener.ConnectionFactory ( ) { try { ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . will ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.jms.listener.InvocationOnMock ) throws java.lang.Throwable { throw new JMSException ( STRING ) ; } } ) ; return org.springframework.jms.listener.ConnectionFactory ; } catch ( JMSException org.springframework.jms.listener.JMSException ) { throw new java.lang.IllegalStateException ( org.springframework.jms.listener.JMSException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.jms.listener.InvocationOnMock ) throws java.lang.Throwable { throw new JMSException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.listener.ConnectionFactory org.springframework.jms.listener.ConnectionFactory ( final int int ) { try { ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . will ( new Answer < java.lang.Object > ( ) { int int = NUMBER ; @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.jms.listener.InvocationOnMock ) throws java.lang.Throwable { int ++ ; if ( int <= int ) { throw new JMSException ( STRING + int + STRING ) ; } else { return mock ( Connection .class ) ; } } } ) ; return org.springframework.jms.listener.ConnectionFactory ; } catch ( JMSException org.springframework.jms.listener.JMSException ) { throw new java.lang.IllegalStateException ( org.springframework.jms.listener.JMSException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.jms.listener.InvocationOnMock ) throws java.lang.Throwable { int ++ ; if ( int <= int ) { throw new JMSException ( STRING + int + STRING ) ; } else { return mock ( Connection .class ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.jms.listener.ConnectionFactory org.springframework.jms.listener.ConnectionFactory ( ) { try { ConnectionFactory org.springframework.jms.listener.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.jms.listener.ConnectionFactory . createConnection ( ) ) . willReturn ( mock ( Connection .class ) ) ; return org.springframework.jms.listener.ConnectionFactory ; } catch ( JMSException org.springframework.jms.listener.JMSException ) { throw new java.lang.IllegalStateException ( org.springframework.jms.listener.JMSException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.InterruptedException { this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( STRING , NUMBER , this . java.util.concurrent.CountDownLatch . long ( ) ) ; }  <METHOD_END>
