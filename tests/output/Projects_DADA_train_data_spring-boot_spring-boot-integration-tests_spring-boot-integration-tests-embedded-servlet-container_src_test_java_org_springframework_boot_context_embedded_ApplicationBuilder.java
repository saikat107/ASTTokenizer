<METHOD_START> void ( TemporaryFolder org.springframework.boot.context.embedded.TemporaryFolder , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.boot.context.embedded.TemporaryFolder = org.springframework.boot.context.embedded.TemporaryFolder ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> java.io.File java.io.File ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.context.embedded.TemporaryFolder . getRoot ( ) , this . java.lang.String ) ; if ( java.io.File . boolean ( ) ) { return new java.io.File ( java.io.File , STRING + this . java.lang.String ) ; } return java.io.File ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.io.File java.io.File )			throws java.io.IOException , java.io.FileNotFoundException , org.springframework.boot.context.embedded.MavenInvocationException { java.io.File java.io.File = java.io.File ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; void ( java.io.File , java.io.File ) ; void ( java.io.File ) ; void ( java.io.File ) ; return new java.io.File ( java.io.File , STRING + this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) java.io.IOException , java.io.FileNotFoundException { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.context.embedded.TemporaryFolder . getRoot ( ) , STRING ) ; if ( java.io.File . boolean ( ) ) { return java.io.File ; } java.util.jar.JarOutputStream java.util.jar.JarOutputStream = new java.util.jar.JarOutputStream ( new java.io.FileOutputStream ( java.io.File ) ) ; java.util.jar.JarOutputStream . void ( new java.util.zip.ZipEntry ( STRING ) ) ; java.util.jar.JarOutputStream . void ( ) ; java.util.jar.JarOutputStream . void ( new java.util.zip.ZipEntry ( STRING ) ) ; java.util.jar.JarOutputStream . void ( STRING . byte[] ( ) ) ; java.util.jar.JarOutputStream . void ( ) ; java.util.jar.JarOutputStream . void ( ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.io.File java.io.File )			throws java.io.FileNotFoundException , java.io.IOException { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , this . java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , this . java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , Versions . getBootVersion ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.io.File . java.lang.String ( ) ) ; java.io.FileWriter java.io.FileWriter = new java.io.FileWriter ( new java.io.File ( java.io.File , STRING ) ) ; Mustache . compiler ( ) . escapeHTML ( false ) . compile ( new java.io.FileReader ( STRING ) ) . execute ( java.util.Map<java.lang.String,java.lang.Object> , java.io.FileWriter ) ; java.io.FileWriter . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File ) throws java.io.IOException { java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; FileCopyUtils . copy ( new java.io.File ( STRING ) , new java.io.File ( java.io.File , STRING ) ) ; if ( STRING . boolean ( this . java.lang.String ) ) { java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . boolean ( ) ; FileCopyUtils . copy ( STRING , new java.io.FileWriter ( new java.io.File ( java.io.File , STRING ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File ) throws org.springframework.boot.context.embedded.MavenInvocationException { InvocationRequest org.springframework.boot.context.embedded.InvocationRequest = new DefaultInvocationRequest ( ) ; org.springframework.boot.context.embedded.InvocationRequest . setBaseDirectory ( java.io.File ) ; org.springframework.boot.context.embedded.InvocationRequest . setGoals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; InvocationResult org.springframework.boot.context.embedded.InvocationResult = new DefaultInvoker ( ) . execute ( org.springframework.boot.context.embedded.InvocationRequest ) ; assertThat ( org.springframework.boot.context.embedded.InvocationResult . getExitCode ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
