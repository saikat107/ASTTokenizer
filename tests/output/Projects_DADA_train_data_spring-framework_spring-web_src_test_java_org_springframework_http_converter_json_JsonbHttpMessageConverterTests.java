<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.json.JsonbHttpMessageConverter . canRead ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( this . org.springframework.http.converter.json.JsonbHttpMessageConverter . canRead ( java.util.Map .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.json.JsonbHttpMessageConverter . canWrite ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( this . org.springframework.http.converter.json.JsonbHttpMessageConverter . canWrite ( java.util.Map .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.converter.json.JsonbHttpMessageConverter . canRead ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( this . org.springframework.http.converter.json.JsonbHttpMessageConverter . canWrite ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean = ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean ) this . org.springframework.http.converter.json.JsonbHttpMessageConverter . read ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . int ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . float ( ) , NUMBER ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . java.lang.String[] ( ) ) ; assertTrue ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . boolean ( ) ) ; assertArrayEquals ( new byte [] { NUMBER , NUMBER } , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = ( java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) this . org.springframework.http.converter.json.JsonbHttpMessageConverter . read ( java.util.HashMap .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; assertEquals ( STRING , java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; java.lang.Number java.lang.Number = ( java.lang.Number ) java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( NUMBER , java.lang.Number . long ( ) ) ; java.lang.Number = ( java.lang.Number ) java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( NUMBER , java.lang.Number . double ( ) , NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; assertEquals ( java.util.List<java.lang.String> , java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; byte [] byte[] = new byte [ NUMBER ] ; java.util.List<java.lang.Number> < java.lang.Number > java.util.List<java.lang.Number> = ( java.util.ArrayList<java.lang.Number> < java.lang.Number > ) java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { byte[] [ int ] = java.util.List<java.lang.Number> . java.lang.Number ( int ) . byte ( ) ; } assertArrayEquals ( new byte [] { NUMBER , NUMBER } , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean = new org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . void ( STRING ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . void ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . void ( true ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . void ( new byte [] { NUMBER , NUMBER } ) ; this . org.springframework.http.converter.json.JsonbHttpMessageConverter . write ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean , null , org.springframework.http.converter.json.MockHttpOutputMessage ) ; java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.StandardCharsets . java.nio.charset.Charset ; java.lang.String java.lang.String = org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.Charset ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.Charset ) , org.springframework.http.converter.json.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MediaType org.springframework.http.converter.json.MediaType = new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; MockHttpOutputMessage org.springframework.http.converter.json.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.http.converter.json.JsonbHttpMessageConverter . write ( java.lang.String , org.springframework.http.converter.json.MediaType , org.springframework.http.converter.json.MockHttpOutputMessage ) ; assertEquals ( STRING , STRING + java.lang.String + STRING , org.springframework.http.converter.json.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; assertEquals ( STRING , org.springframework.http.converter.json.MediaType , org.springframework.http.converter.json.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMessageNotReadableException .class ) public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; this . org.springframework.http.converter.json.JsonbHttpMessageConverter . read ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean .class , org.springframework.http.converter.json.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { ParameterizedTypeReference < java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean > > org.springframework.http.converter.json.ParameterizedTypeReference<java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean>> = new ParameterizedTypeReference < java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean > > ( ) {		} ; java.lang.String java.lang.String = STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.json.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.http.converter.json.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean > java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean> = ( java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean> < org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean > ) org.springframework.http.converter.json.JsonbHttpMessageConverter . read ( org.springframework.http.converter.json.ParameterizedTypeReference<java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean>> . getType ( ) , null , org.springframework.http.converter.json.MockHttpInputMessage ) ; assertEquals ( NUMBER , java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean> . int ( ) ) ; org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean = java.util.List<org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean> . org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean ( NUMBER ) ; assertEquals ( STRING , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . int ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . float ( ) , NUMBER ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . java.lang.String[] ( ) ) ; assertTrue ( org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . boolean ( ) ) ; assertArrayEquals ( new byte [] { NUMBER , NUMBER } , org.springframework.http.converter.json.JsonbHttpMessageConverterTests.MyBean . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public float float ( ) { return float ; }  <METHOD_END>
<METHOD_START> public void void ( float float ) { this . float = float ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
