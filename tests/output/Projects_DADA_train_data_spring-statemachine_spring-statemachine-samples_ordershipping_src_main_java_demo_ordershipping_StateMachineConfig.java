<METHOD_START> @ Bean public demo.ordershipping.StateMachineLogListener demo.ordershipping.StateMachineLogListener ( ) { return new StateMachineLogListener ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > demo.ordershipping.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { demo.ordershipping.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) . listener ( demo.ordershipping.StateMachineLogListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineModelConfigurer < java.lang.String , java.lang.String > demo.ordershipping.StateMachineModelConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { demo.ordershipping.StateMachineModelConfigurer<java.lang.String,java.lang.String> . withModel ( ) . factory ( demo.ordershipping.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.ordershipping.StateMachineModelFactory<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > demo.ordershipping.StateMachineModelFactory<java.lang.String,java.lang.String> ( ) { return new UmlStateMachineModelFactory ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.ordershipping.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > demo.ordershipping.Action<java.lang.String,java.lang.String> ( ) { return ( context ) -> { String customer = context . getMessageHeaders ( ) . get ( STRING , String .class ) ; if ( StringUtils . hasText ( customer ) ) { context . getExtendedState ( ) . getVariables ( ) . put ( STRING , customer ) ; } String order = context . getMessageHeaders ( ) . get ( STRING , String .class ) ; if ( StringUtils . hasText ( order ) ) { context . getExtendedState ( ) . getVariables ( ) . put ( STRING , order ) ; } } ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.ordershipping.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > demo.ordershipping.Action<java.lang.String,java.lang.String> ( ) { return ( context ) -> { System . out . println ( STRING ) ; } ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.ordershipping.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > demo.ordershipping.Action<java.lang.String,java.lang.String> ( ) { return ( context ) -> { if ( context . getMessageHeaders ( ) . containsKey ( STRING ) ) { context . getExtendedState ( ) . getVariables ( ) . put ( STRING , true ) ; } if ( context . getMessageHeaders ( ) . containsKey ( STRING ) ) { context . getExtendedState ( ) . getVariables ( ) . put ( STRING , true ) ; } } ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.ordershipping.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > demo.ordershipping.Guard<java.lang.String,java.lang.String> ( ) { return ( context ) -> { Map < Object , Object > variables = context . getExtendedState ( ) . getVariables ( ) ; return variables . containsKey ( STRING ) && variables . containsKey ( STRING ) ; } ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.ordershipping.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > demo.ordershipping.Guard<java.lang.String,java.lang.String> ( ) { return ( context ) -> { return context . getMessageHeaders ( ) . containsKey ( STRING ) ; } ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.ordershipping.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > demo.ordershipping.Guard<java.lang.String,java.lang.String> ( ) { return ( context ) -> { return context . getExtendedState ( ) . getVariables ( ) . containsKey ( STRING ) ; } ; }  <METHOD_END>
<METHOD_START> @ Bean public demo.ordershipping.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > demo.ordershipping.Guard<java.lang.String,java.lang.String> ( ) { return ( context ) -> { return context . getExtendedState ( ) . getVariables ( ) . containsKey ( STRING ) ; } ; }  <METHOD_END>
