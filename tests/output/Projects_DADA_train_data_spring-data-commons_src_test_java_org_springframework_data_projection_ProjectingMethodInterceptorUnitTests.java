<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( new ProxyProjectionFactory ( ) , org.springframework.data.projection.MethodInterceptor ) ; when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class . java.lang.reflect.Method ( STRING ) ) ; when ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . isInstanceOf ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( org.springframework.data.projection.ProjectionFactory , org.springframework.data.projection.MethodInterceptor ) ; when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class . java.lang.reflect.Method ( STRING ) ) ; when ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( org.springframework.data.projection.ProjectionFactory , org.springframework.data.projection.MethodInterceptor ) ; when ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . thenReturn ( null ) ; assertThat ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( org.springframework.data.projection.ProjectionFactory , org.springframework.data.projection.MethodInterceptor ) ; when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class . java.lang.reflect.Method ( STRING ) ) ; when ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . thenReturn ( NUMBER ) ; assertThat ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.projection.ProjectionFactory , times ( NUMBER ) ) . createProjection ( ( java.lang.Class<?> < ? > ) anyObject ( ) , anyObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( new ProxyProjectionFactory ( ) , org.springframework.data.projection.MethodInterceptor ) ; java.lang.Object java.lang.Object = org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ( STRING , java.util.Collections . java.util.Set ( mock ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class ) ) ) ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.Set .class ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = ( java.util.Set<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.Set<java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.Object> ) . hasOnlyElementsOfType ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( new ProxyProjectionFactory ( ) , org.springframework.data.projection.MethodInterceptor ) ; java.lang.Object java.lang.Object = org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ( STRING , java.util.Collections . java.util.List ( mock ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class ) ) ) ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.List .class ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.List<java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<java.lang.Object> ) . hasOnlyElementsOfType ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( new ProxyProjectionFactory ( ) , org.springframework.data.projection.MethodInterceptor ) ; java.lang.Object java.lang.Object = org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ( STRING , new org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper [] { mock ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class ) } ) ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.Collection .class ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; assertThat ( java.util.Collection<java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<java.lang.Object> ) . hasOnlyElementsOfType ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( new ProxyProjectionFactory ( ) , org.springframework.data.projection.MethodInterceptor ) ; java.lang.Object java.lang.Object = org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ( STRING , java.util.Collections . java.util.Map ( STRING , mock ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class ) ) ) ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.Map .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . matches ( map -> map . get ( STRING ) instanceof HelperProjection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInterceptor org.springframework.data.projection.MethodInterceptor = new ProjectingMethodInterceptor ( new ProxyProjectionFactory ( ) , org.springframework.data.projection.MethodInterceptor ) ; org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper = mock ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class ) ; java.lang.Object java.lang.Object = org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ( STRING , org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper ) ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.Collection .class ) ; java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; assertThat ( java.util.Collection<> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<> ) . hasOnlyElementsOfType ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.projection.MethodInvocation org.springframework.data.projection.MethodInvocation ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws java.lang.Throwable { when ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) . thenReturn ( org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper .class . java.lang.reflect.Method ( java.lang.String ) ) ; when ( org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ) . thenReturn ( java.lang.Object ) ; return org.springframework.data.projection.MethodInvocation ; }  <METHOD_END>
<METHOD_START> org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> long long ( )  <METHOD_END>
<METHOD_START> java.util.Collection<org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> < org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection > java.util.Collection<org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> < org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection > java.util.List<org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> ( )  <METHOD_END>
<METHOD_START> java.util.Set<org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> < org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection > java.util.Set<org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> ( )  <METHOD_END>
<METHOD_START> java.util.Map<java.lang.String,org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> < java.lang.String , org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection > java.util.Map<java.lang.String,org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> ( )  <METHOD_END>
<METHOD_START> java.util.Collection<org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> < org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection > java.util.Collection<org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.HelperProjection> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper org.springframework.data.projection.ProjectingMethodInterceptorUnitTests.Helper ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
