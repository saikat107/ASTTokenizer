<METHOD_START> public void ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , XhrTransport org.springframework.web.socket.sockjs.client.XhrTransport , SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) { super( org.springframework.web.socket.sockjs.client.TransportRequest , org.springframework.web.socket.sockjs.client.WebSocketHandler , org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ); Assert . notNull ( org.springframework.web.socket.sockjs.client.XhrTransport , STRING ) ; this . org.springframework.web.socket.sockjs.client.XhrTransport = org.springframework.web.socket.sockjs.client.XhrTransport ; this . org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.TransportRequest . getHttpRequestHeaders ( ) ; this . org.springframework.web.socket.sockjs.client.HttpHeaders = new HttpHeaders ( ) ; if ( this . org.springframework.web.socket.sockjs.client.HttpHeaders != null ) { this . org.springframework.web.socket.sockjs.client.HttpHeaders . putAll ( this . org.springframework.web.socket.sockjs.client.HttpHeaders ) ; } this . org.springframework.web.socket.sockjs.client.HttpHeaders . setContentType ( MediaType . APPLICATION_JSON ) ; this . java.net.URI = org.springframework.web.socket.sockjs.client.TransportRequest . getSockJsUrlInfo ( ) . getTransportUrl ( TransportType . XHR_SEND ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ( ) { return this . org.springframework.web.socket.sockjs.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return new java.net.InetSocketAddress ( getUri ( ) . getHost ( ) , getUri ( ) . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.sockjs.client.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.sockjs.client.WebSocketExtension> ( ) { return java.util.Collections . java.util.List<org.springframework.web.socket.sockjs.client.WebSocketExtension> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) { this . org.springframework.web.socket.sockjs.client.XhrTransport . executeSendRequest ( this . java.net.URI , this . org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus ) { }  <METHOD_END>
