<METHOD_START> @ Before public void void ( ) { org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . void ( NUMBER ) ; for ( MessageGroup org.springframework.integration.jdbc.MessageGroup : org.springframework.integration.jdbc.JdbcMessageStore ) { org.springframework.integration.jdbc.JdbcMessageStore . removeMessageGroup ( org.springframework.integration.jdbc.MessageGroup . getGroupId ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . java.util.List<java.lang.String> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . boolean = true ; org.springframework.integration.jdbc.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . void ( NUMBER ) ; assertThat ( org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . java.util.List<java.lang.String> . int ( ) , Matchers . greaterThanOrEqualTo ( NUMBER ) ) ; new TransactionTemplate ( org.springframework.integration.jdbc.PlatformTransactionManager ) . execute ( status -> { synchronized ( storeLock ) { assertEquals ( NUMBER , input . getQueueSize ( ) ) ; assertNotNull ( input . receive ( NUMBER ) ) ; } return null ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Repeat ( NUMBER ) public void void ( ) java.lang.Exception { boolean boolean = new TransactionTemplate ( org.springframework.integration.jdbc.PlatformTransactionManager ) . execute ( status -> { synchronized ( storeLock ) { boolean result1 = input . send ( new GenericMessage < String > ( STRING ) , NUMBER ) ; try { Service . await ( NUMBER ) ; fail ( STRING ) ; } catch ( Exception e ) { } return result1 ; } } ) ; assertTrue ( STRING , boolean ) ; void ( ) ; StopWatch org.springframework.integration.jdbc.StopWatch = new StopWatch ( ) ; try { org.springframework.integration.jdbc.StopWatch . start ( ) ; org.springframework.integration.jdbc.QueueChannel . receive ( NUMBER ) ; } finally { org.springframework.integration.jdbc.StopWatch . stop ( ) ; } assertTrue ( STRING , org.springframework.integration.jdbc.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) java.lang.InterruptedException { int int = NUMBER ; while ( org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . java.util.List<java.lang.String> . int ( ) == NUMBER ) { if ( int ++ > NUMBER ) { fail ( STRING ) ; } java.lang.Thread . void ( NUMBER ) ; } assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . java.util.List<java.lang.String> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final StopWatch org.springframework.integration.jdbc.StopWatch = new StopWatch ( ) ; DefaultTransactionDefinition org.springframework.integration.jdbc.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.integration.jdbc.DefaultTransactionDefinition . setTimeout ( NUMBER ) ; boolean boolean = new TransactionTemplate ( org.springframework.integration.jdbc.PlatformTransactionManager , org.springframework.integration.jdbc.DefaultTransactionDefinition ) . execute ( status -> { synchronized ( storeLock ) { boolean result1 = input . send ( new GenericMessage < String > ( STRING ) , NUMBER ) ; try { Service . await ( NUMBER ) ; fail ( STRING ) ; } catch ( Exception e ) { } try { stopWatch . start ( ) ; assertNotNull ( input . receive ( NUMBER ) ) ; } finally { stopWatch . stop ( ) ; } return result1 ; } } ) ; assertTrue ( STRING , boolean ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStoreChannelIntegrationTests.Service . java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( STRING , org.springframework.integration.jdbc.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { this . org.springframework.integration.jdbc.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( MessageDeliveryException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( SerializationFailedException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) , instanceOf ( java.io.NotSerializableException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( int int ) { boolean = false ; java.util.List<java.lang.String> . void ( ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> public static void void ( long long ) throws java.lang.InterruptedException { if ( ! java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; java.util.concurrent.CountDownLatch . void ( ) ; if ( boolean ) { throw new java.lang.RuntimeException ( STRING ) ; } return java.lang.String ; }  <METHOD_END>
