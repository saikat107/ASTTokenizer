<METHOD_START> protected final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.support.ServletContext ) throws org.springframework.boot.web.servlet.support.ServletException { this . org.springframework.boot.web.servlet.support.Log = LogFactory . getLog ( java.lang.Class<? extends org.springframework.boot.web.servlet.support.SpringBootServletInitializer> ( ) ) ; WebApplicationContext org.springframework.boot.web.servlet.support.WebApplicationContext = org.springframework.boot.web.servlet.support.WebApplicationContext ( org.springframework.boot.web.servlet.support.ServletContext ) ; if ( org.springframework.boot.web.servlet.support.WebApplicationContext != null ) { org.springframework.boot.web.servlet.support.ServletContext . addListener ( new ContextLoaderListener ( org.springframework.boot.web.servlet.support.WebApplicationContext ) { @ java.lang.Override public void void ( ServletContextEvent org.springframework.boot.web.servlet.support.ServletContextEvent ) { } } ) ; } else { this . org.springframework.boot.web.servlet.support.Log . debug ( STRING + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContextEvent org.springframework.boot.web.servlet.support.ServletContextEvent ) { }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.support.WebApplicationContext org.springframework.boot.web.servlet.support.WebApplicationContext ( ServletContext org.springframework.boot.web.servlet.support.ServletContext ) { SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder = org.springframework.boot.web.servlet.support.SpringApplicationBuilder ( ) ; org.springframework.boot.web.servlet.support.SpringApplicationBuilder . main ( java.lang.Class<? extends org.springframework.boot.web.servlet.support.SpringBootServletInitializer> ( ) ) ; ApplicationContext org.springframework.boot.web.servlet.support.ApplicationContext = org.springframework.boot.web.servlet.support.ApplicationContext ( org.springframework.boot.web.servlet.support.ServletContext ) ; if ( org.springframework.boot.web.servlet.support.ApplicationContext != null ) { this . org.springframework.boot.web.servlet.support.Log . info ( STRING ) ; org.springframework.boot.web.servlet.support.ServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , null ) ; org.springframework.boot.web.servlet.support.SpringApplicationBuilder . initializers ( new ParentContextApplicationContextInitializer ( org.springframework.boot.web.servlet.support.ApplicationContext ) ) ; } org.springframework.boot.web.servlet.support.SpringApplicationBuilder . initializers ( new ServletContextApplicationContextInitializer ( org.springframework.boot.web.servlet.support.ServletContext ) ) ; org.springframework.boot.web.servlet.support.SpringApplicationBuilder . listeners ( new ServletContextApplicationListener ( org.springframework.boot.web.servlet.support.ServletContext ) ) ; org.springframework.boot.web.servlet.support.SpringApplicationBuilder . contextClass ( AnnotationConfigServletWebServerApplicationContext .class ) ; org.springframework.boot.web.servlet.support.SpringApplicationBuilder = org.springframework.boot.web.servlet.support.SpringApplicationBuilder ( org.springframework.boot.web.servlet.support.SpringApplicationBuilder ) ; SpringApplication org.springframework.boot.web.servlet.support.SpringApplication = org.springframework.boot.web.servlet.support.SpringApplicationBuilder . build ( ) ; if ( org.springframework.boot.web.servlet.support.SpringApplication . getSources ( ) . isEmpty ( ) && AnnotationUtils . findAnnotation ( java.lang.Class<? extends org.springframework.boot.web.servlet.support.SpringBootServletInitializer> ( ) , Configuration .class ) != null ) { org.springframework.boot.web.servlet.support.SpringApplication . getSources ( ) . add ( java.lang.Class<? extends org.springframework.boot.web.servlet.support.SpringBootServletInitializer> ( ) ) ; } Assert . state ( ! org.springframework.boot.web.servlet.support.SpringApplication . getSources ( ) . isEmpty ( ) , STRING + STRING ) ; if ( this . boolean ) { org.springframework.boot.web.servlet.support.SpringApplication . getSources ( ) . add ( ErrorPageFilterConfiguration .class ) ; } return org.springframework.boot.web.servlet.support.WebApplicationContext ( org.springframework.boot.web.servlet.support.SpringApplication ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.support.SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder ( ) { return new SpringApplicationBuilder ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.support.WebApplicationContext org.springframework.boot.web.servlet.support.WebApplicationContext ( SpringApplication org.springframework.boot.web.servlet.support.SpringApplication ) { return ( WebApplicationContext ) org.springframework.boot.web.servlet.support.SpringApplication . run ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.servlet.support.ApplicationContext org.springframework.boot.web.servlet.support.ApplicationContext ( ServletContext org.springframework.boot.web.servlet.support.ServletContext ) { java.lang.Object java.lang.Object = org.springframework.boot.web.servlet.support.ServletContext . getAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; if ( java.lang.Object instanceof ApplicationContext ) { return ( ApplicationContext ) java.lang.Object ; } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.support.SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder ( SpringApplicationBuilder org.springframework.boot.web.servlet.support.SpringApplicationBuilder ) { return org.springframework.boot.web.servlet.support.SpringApplicationBuilder ; }  <METHOD_END>
