<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { int int = NUMBER ; int int = NUMBER ; final TransactionTemplate org.springframework.integration.jdbc.store.channel.TransactionTemplate = new TransactionTemplate ( org.springframework.integration.jdbc.store.channel.PlatformTransactionManager ) ; org.springframework.integration.jdbc.store.channel.TransactionTemplate . setIsolationLevel ( Isolation . READ_COMMITTED . value ( ) ) ; org.springframework.integration.jdbc.store.channel.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRED ) ; for ( int int = NUMBER ; int <= int ; ++ int ) { final java.lang.String java.lang.String = STRING + int ; org.springframework.integration.jdbc.store.channel.Log . info ( STRING + java.lang.String ) ; org.springframework.integration.jdbc.store.channel.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jdbc.store.channel.TransactionStatus ) { org.springframework.integration.jdbc.store.channel.MessageChannel . send ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; } } ) ; org.springframework.integration.jdbc.store.channel.Log . info ( java.lang.String . java.lang.String ( STRING , int , int , java.lang.String ) ) ; } org.springframework.integration.jdbc.store.channel.Log . info ( STRING + int + STRING ) ; Assert . assertTrue ( java.lang.String . java.lang.String ( STRING + STRING , int , int ) , org.springframework.integration.jdbc.store.channel.TestService . await ( int ) ) ; for ( int int = NUMBER ; int < int ; int ++ ) { Message < ? > org.springframework.integration.jdbc.store.channel.Message<?> = this . org.springframework.integration.jdbc.store.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; } Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer . java.lang.Integer ( org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . getSizeOfIdCache ( ) ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( int ) , java.lang.Integer . java.lang.Integer ( org.springframework.integration.jdbc.store.channel.TestService . getSeenMessages ( ) . size ( ) ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer . java.lang.Integer ( org.springframework.integration.jdbc.store.channel.TestService . getDuplicateMessagesCount ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.integration.jdbc.store.channel.TransactionStatus ) { org.springframework.integration.jdbc.store.channel.MessageChannel . send ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { final java.lang.String java.lang.String = STRING ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . addMessageToGroup ( java.lang.String , new GenericMessage < java.lang.String > ( STRING ) ) ; } java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; java.util.concurrent.CompletionService<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.CompletionService<java.lang.Boolean> = new java.util.concurrent.ExecutorCompletionService<java.lang.Boolean> < java.lang.Boolean > ( java.util.concurrent.ExecutorService ) ; final int int = NUMBER ; final TransactionTemplate org.springframework.integration.jdbc.store.channel.TransactionTemplate = new TransactionTemplate ( org.springframework.integration.jdbc.store.channel.PlatformTransactionManager ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.concurrent.CompletionService<java.lang.Boolean> . java.util.concurrent.Future<java.lang.Boolean> ( ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { boolean boolean = org.springframework.integration.jdbc.store.channel.TransactionTemplate . execute ( status -> { Message < ? > message = null ; try { message = jdbcChannelMessageStore . pollMessageFromGroup ( groupId ) ; } catch ( Exception e1 ) { log . error ( STRING , e1 ) ; return false ; } try { Thread . sleep ( NUMBER ) ; } catch ( InterruptedException e2 ) { log . error ( e2 ) ; } if ( message != null ) { jdbcChannelMessageStore . removeFromIdCache ( message . getHeaders ( ) . getId ( ) . toString ( ) ) ; } return true ; } ) ; if ( ! boolean ) { return false ; } } return true ; } ) ; } for ( int int = NUMBER ; int < int ; int ++ ) { assertTrue ( java.util.concurrent.CompletionService<java.lang.Boolean> . java.util.concurrent.Future<java.lang.Boolean> ( ) . java.lang.Boolean ( ) ) ; } java.util.concurrent.ExecutorService . void ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.jdbc.store.channel.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; } assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { JdbcTemplate org.springframework.integration.jdbc.store.channel.JdbcTemplate = new JdbcTemplate ( this . javax.sql.DataSource ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . addMessageToGroup ( java.lang.String , new GenericMessage < java.lang.Object > ( STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; this . org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . addMessageToGroup ( java.lang.String , new GenericMessage < java.lang.Object > ( STRING ) ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.integration.jdbc.store.channel.JdbcTemplate . queryForList ( STRING + STRING , UUIDConverter . getUUID ( java.lang.String ) . toString ( ) ) ; assertEquals ( NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; java.lang.Object java.lang.Object = java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ; java.lang.Object java.lang.Object = java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( java.lang.Number .class ) ) ; assertNotNull ( java.lang.Object ) ; assertThat ( java.lang.Object , Matchers . instanceOf ( java.lang.Number .class ) ) ; assertThat ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) , Matchers . lessThan ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ) ; this . org.springframework.integration.jdbc.store.channel.JdbcChannelMessageStore . removeMessageGroup ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.store.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.jdbc.store.channel.PollableChannel . send ( org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; org.springframework.integration.jdbc.store.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , - NUMBER ) . build ( ) ; org.springframework.integration.jdbc.store.channel.PollableChannel . send ( org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; org.springframework.integration.jdbc.store.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.jdbc.store.channel.PollableChannel . send ( org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; org.springframework.integration.jdbc.store.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.jdbc.store.channel.PollableChannel . send ( org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; org.springframework.integration.jdbc.store.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.jdbc.store.channel.PollableChannel . send ( org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; org.springframework.integration.jdbc.store.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.store.channel.PollableChannel . send ( org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; org.springframework.integration.jdbc.store.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( IntegrationMessageHeaderAccessor . PRIORITY , NUMBER ) . build ( ) ; org.springframework.integration.jdbc.store.channel.PollableChannel . send ( org.springframework.integration.jdbc.store.channel.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.store.channel.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.store.channel.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.store.channel.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.store.channel.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.store.channel.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.store.channel.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.store.channel.Message<?> = org.springframework.integration.jdbc.store.channel.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.store.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.store.channel.Message<> . getPayload ( ) ) ; }  <METHOD_END>
