<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException { TypeComparator org.springframework.expression.spel.TypeComparator = new StandardTypeComparator ( ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , NUMBER ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException { TypeComparator org.springframework.expression.spel.TypeComparator = new StandardTypeComparator ( ) ; java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal ( STRING ) ; java.math.BigDecimal java.math.BigDecimal = new java.math.BigDecimal ( STRING ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( java.math.BigDecimal , java.math.BigDecimal ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( java.math.BigDecimal , new java.math.BigDecimal ( STRING ) ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( java.math.BigDecimal , java.math.BigDecimal ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) > NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( NUMBER , java.math.BigDecimal ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException { TypeComparator org.springframework.expression.spel.TypeComparator = new StandardTypeComparator ( ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( null , STRING ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( null , null ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( STRING , null ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException { TypeComparator org.springframework.expression.spel.TypeComparator = new StandardTypeComparator ( ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( STRING , STRING ) == NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( STRING , STRING ) < NUMBER ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . compare ( STRING , STRING ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException { TypeComparator org.springframework.expression.spel.TypeComparator = new StandardTypeComparator ( ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . canCompare ( null , NUMBER ) ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . canCompare ( NUMBER , null ) ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . canCompare ( NUMBER , NUMBER ) ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . canCompare ( STRING , STRING ) ) ; assertTrue ( org.springframework.expression.spel.TypeComparator . canCompare ( STRING , NUMBER ) ) ; assertFalse ( org.springframework.expression.spel.TypeComparator . canCompare ( java.lang.String .class , NUMBER ) ) ; }  <METHOD_END>
