<METHOD_START> public static void void ( java.lang.Class<?> < ? > java.lang.Class<?> , int int , int int , int int , int int , int int ) throws java.lang.Exception { void ( null , java.lang.Class<> , int , int , int , int , int ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Class<? extends org.springframework.test.context.junit4.Runner> < ? extends Runner > java.lang.Class<? extends org.springframework.test.context.junit4.Runner> , java.lang.Class<?> < ? > java.lang.Class<?> , int int , int int , int int , int int , int int ) throws java.lang.Exception { TrackingRunListener org.springframework.test.context.junit4.TrackingRunListener = new TrackingRunListener ( ) ; if ( java.lang.Class<> != null ) { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.Class .class ) ; Runner org.springframework.test.context.junit4.Runner = ( Runner ) BeanUtils . instantiateClass ( java.lang.reflect.Constructor<> , java.lang.Class<> ) ; RunNotifier org.springframework.test.context.junit4.RunNotifier = new RunNotifier ( ) ; org.springframework.test.context.junit4.RunNotifier . addListener ( org.springframework.test.context.junit4.TrackingRunListener ) ; org.springframework.test.context.junit4.Runner . run ( org.springframework.test.context.junit4.RunNotifier ) ; } else { JUnitCore org.springframework.test.context.junit4.JUnitCore = new JUnitCore ( ) ; org.springframework.test.context.junit4.JUnitCore . addListener ( org.springframework.test.context.junit4.TrackingRunListener ) ; org.springframework.test.context.junit4.JUnitCore . run ( java.lang.Class<> ) ; } assertAll ( ( ) assertEquals ( expectedStartedCount , listener . getTestStartedCount ( ) , STRING + testClass + STRING ) , ( ) assertEquals ( expectedFailedCount , listener . getTestFailureCount ( ) , STRING + testClass + STRING ) , ( ) assertEquals ( expectedFinishedCount , listener . getTestFinishedCount ( ) , STRING + testClass + STRING ) , ( ) assertEquals ( expectedIgnoredCount , listener . getTestIgnoredCount ( ) , STRING + testClass + STRING ) , ( ) assertEquals ( expectedAssumptionFailedCount , listener . getTestAssumptionFailureCount ( ) , STRING + testClass + STRING ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( Computer org.springframework.test.context.junit4.Computer , int int , int int , int int , int int , int int , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { JUnitCore org.springframework.test.context.junit4.JUnitCore = new JUnitCore ( ) ; TrackingRunListener org.springframework.test.context.junit4.TrackingRunListener = new TrackingRunListener ( ) ; org.springframework.test.context.junit4.JUnitCore . addListener ( org.springframework.test.context.junit4.TrackingRunListener ) ; org.springframework.test.context.junit4.JUnitCore . run ( org.springframework.test.context.junit4.Computer , java.lang.Class<?>[] ) ; assertAll ( ( ) assertEquals ( expectedStartedCount , listener . getTestStartedCount ( ) , STRING ) , ( ) assertEquals ( expectedFailedCount , listener . getTestFailureCount ( ) , STRING ) , ( ) assertEquals ( expectedFinishedCount , listener . getTestFinishedCount ( ) , STRING ) , ( ) assertEquals ( expectedIgnoredCount , listener . getTestIgnoredCount ( ) , STRING ) , ( ) assertEquals ( expectedAssumptionFailedCount , listener . getTestAssumptionFailureCount ( ) , STRING ) ) ; }  <METHOD_END>
