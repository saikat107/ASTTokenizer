<METHOD_START> @ Test public void void ( ) javax.naming.NamingException { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; try { org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , java.lang.Object ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setResourceRef ( true ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , java.lang.Object ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setResourceRef ( false ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , java.lang.Object ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setResourceRef ( true ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , java.lang.Object ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setResourceRef ( false ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , java.lang.Object ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setResourceRef ( true ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , java.lang.Object ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setResourceRef ( false ) ; try { org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , java.lang.Object ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setResourceRef ( false ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , java.lang.String ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( java.lang.String .class ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) == java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , new java.lang.Object ( ) ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( java.lang.String .class ) ; try { org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { assertTrue ( javax.naming.NamingException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , STRING ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( java.lang.String .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setDefaultObject ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertEquals ( STRING , org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , STRING ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( java.lang.String .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setDefaultObject ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertEquals ( STRING , org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , STRING ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( java.lang.Integer .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setDefaultObject ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , STRING ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( java.lang.Integer .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setDefaultObject ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , STRING ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( java.lang.Boolean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setDefaultObject ( STRING ) ; try { org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; TestBean org.springframework.jndi.TestBean = new TestBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , org.springframework.jndi.TestBean ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setProxyInterface ( ITestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.jndi.ITestBean = ( ITestBean ) org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; TestBean org.springframework.jndi.TestBean = new TestBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , org.springframework.jndi.TestBean ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setProxyInterface ( ITestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setDefaultObject ( java.lang.Boolean . java.lang.Boolean ) ; try { org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; final TestBean org.springframework.jndi.TestBean = new TestBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new JndiTemplate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jndi.TestBean . setName ( STRING ) ; return org.springframework.jndi.TestBean ; } return null ; } } ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setProxyInterface ( ITestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setLookupOnStartup ( false ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.jndi.ITestBean = ( ITestBean ) org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ; assertNull ( org.springframework.jndi.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . setAge ( NUMBER ) ; assertEquals ( STRING , org.springframework.jndi.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jndi.TestBean . setName ( STRING ) ; return org.springframework.jndi.TestBean ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; final TestBean org.springframework.jndi.TestBean = new TestBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new JndiTemplate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jndi.TestBean . setName ( STRING ) ; org.springframework.jndi.TestBean . setAge ( org.springframework.jndi.TestBean . getAge ( ) + NUMBER ) ; return org.springframework.jndi.TestBean ; } return null ; } } ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setProxyInterface ( ITestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setCache ( false ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.jndi.ITestBean = ( ITestBean ) org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ; assertEquals ( STRING , org.springframework.jndi.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . returnsThis ( ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . haveBirthday ( ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jndi.TestBean . setName ( STRING ) ; org.springframework.jndi.TestBean . setAge ( org.springframework.jndi.TestBean . getAge ( ) + NUMBER ) ; return org.springframework.jndi.TestBean ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; final TestBean org.springframework.jndi.TestBean = new TestBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new JndiTemplate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jndi.TestBean . setName ( STRING ) ; org.springframework.jndi.TestBean . setAge ( org.springframework.jndi.TestBean . getAge ( ) + NUMBER ) ; return org.springframework.jndi.TestBean ; } return null ; } } ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setProxyInterface ( ITestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setLookupOnStartup ( false ) ; org.springframework.jndi.JndiObjectFactoryBean . setCache ( false ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.jndi.ITestBean = ( ITestBean ) org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ; assertNull ( org.springframework.jndi.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . returnsThis ( ) ; assertEquals ( STRING , org.springframework.jndi.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . returnsThis ( ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . haveBirthday ( ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jndi.TestBean . setName ( STRING ) ; org.springframework.jndi.TestBean . setAge ( org.springframework.jndi.TestBean . getAge ( ) + NUMBER ) ; return org.springframework.jndi.TestBean ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.naming.NamingException { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setLookupOnStartup ( false ) ; try { org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.naming.NamingException { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setCache ( false ) ; org.springframework.jndi.JndiObjectFactoryBean . setLookupOnStartup ( false ) ; try { org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; TestBean org.springframework.jndi.TestBean = new TestBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , org.springframework.jndi.TestBean ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( TestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setProxyInterface ( ITestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.jndi.ITestBean = ( ITestBean ) org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; TestBean org.springframework.jndi.TestBean = new TestBean ( ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , org.springframework.jndi.TestBean ) ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setExpectedType ( DerivedTestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setProxyInterface ( ITestBean .class ) ; try { org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { assertTrue ( javax.naming.NamingException . java.lang.String ( ) . int ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean = new JndiObjectFactoryBean ( ) ; TestBean org.springframework.jndi.TestBean = new TestBean ( ) ; final javax.naming.Context javax.naming.Context = mock ( javax.naming.Context .class ) ; given ( javax.naming.Context . java.lang.Object ( STRING ) ) . willReturn ( org.springframework.jndi.TestBean ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiTemplate ( new JndiTemplate ( ) { @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) { return javax.naming.Context ; } } ) ; org.springframework.jndi.JndiObjectFactoryBean . setJndiName ( STRING ) ; org.springframework.jndi.JndiObjectFactoryBean . setProxyInterface ( ITestBean .class ) ; org.springframework.jndi.JndiObjectFactoryBean . setExposeAccessContext ( true ) ; org.springframework.jndi.JndiObjectFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) instanceof ITestBean ) ; ITestBean org.springframework.jndi.ITestBean = ( ITestBean ) org.springframework.jndi.JndiObjectFactoryBean . getObject ( ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.jndi.TestBean . getAge ( ) ) ; org.springframework.jndi.ITestBean . equals ( org.springframework.jndi.ITestBean ) ; org.springframework.jndi.ITestBean . hashCode ( ) ; org.springframework.jndi.ITestBean . toString ( ) ; verify ( javax.naming.Context , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) { return javax.naming.Context ; }  <METHOD_END>
