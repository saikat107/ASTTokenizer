<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> ) { this( ClassTypeInformation . from ( java.lang.Class<T> ) , null ); }  <METHOD_END>
<METHOD_START> public void ( PersistentEntity < T , P > org.springframework.data.mapping.model.PersistentEntity<T,P> ) { this( org.springframework.data.mapping.model.PersistentEntity<T,P> . getTypeInformation ( ) , java.util.Optional . java.util.Optional ( org.springframework.data.mapping.model.PersistentEntity<T,P> ) ); }  <METHOD_END>
<METHOD_START> protected void ( TypeInformation < T > org.springframework.data.mapping.model.TypeInformation<T> , java.util.Optional<org.springframework.data.mapping.model.PersistentEntity<T,P>> < PersistentEntity < T , P > > java.util.Optional<org.springframework.data.mapping.model.PersistentEntity<T,P>> ) { boolean boolean = false ; int int = NUMBER ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mapping.model.TypeInformation<T> . getType ( ) ; for ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> : java.lang.Class<> . java.lang.reflect.Constructor<?>[] ( ) ) { PreferredConstructor < T , P > org.springframework.data.mapping.model.PreferredConstructor<T,P> = org.springframework.data.mapping.model.PreferredConstructor<T,P> ( java.lang.reflect.Constructor<> , org.springframework.data.mapping.model.TypeInformation<T> , java.util.Optional<org.springframework.data.mapping.model.PersistentEntity<T,P>> ) ; if ( org.springframework.data.mapping.model.PreferredConstructor<T,P> . isExplicitlyAnnotated ( ) ) { this . java.util.Optional<org.springframework.data.mapping.model.PreferredConstructor<T,P>> = java.util.Optional . java.util.Optional ( org.springframework.data.mapping.model.PreferredConstructor<T,P> ) ; return; } if ( this . java.util.Optional<org.springframework.data.mapping.model.PreferredConstructor<T,P>> == null || org.springframework.data.mapping.model.PreferredConstructor<T,P> . isNoArgConstructor ( ) ) { this . java.util.Optional<org.springframework.data.mapping.model.PreferredConstructor<T,P>> = java.util.Optional . java.util.Optional ( org.springframework.data.mapping.model.PreferredConstructor<T,P> ) ; } if ( org.springframework.data.mapping.model.PreferredConstructor<T,P> . isNoArgConstructor ( ) ) { boolean = true ; } else { int ++ ; } } if ( ! boolean && int > NUMBER ) { this . java.util.Optional<org.springframework.data.mapping.model.PreferredConstructor<T,P>> = java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private org.springframework.data.mapping.model.PreferredConstructor<T,P> < T , P > org.springframework.data.mapping.model.PreferredConstructor<T,P> ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> , TypeInformation < T > org.springframework.data.mapping.model.TypeInformation<T> , java.util.Optional<org.springframework.data.mapping.model.PersistentEntity<T,P>> < PersistentEntity < T , P > > java.util.Optional<org.springframework.data.mapping.model.PersistentEntity<T,P>> ) { java.util.List<org.springframework.data.mapping.model.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.mapping.model.TypeInformation<?>> = org.springframework.data.mapping.model.TypeInformation<T> . getParameterTypes ( java.lang.reflect.Constructor<> ) ; if ( java.util.List<org.springframework.data.mapping.model.TypeInformation<?>> . isEmpty ( ) ) { return new PreferredConstructor <> ( ( java.lang.reflect.Constructor<T> < T > ) java.lang.reflect.Constructor<> ) ; } java.lang.String [] java.lang.String[] = org.springframework.data.mapping.model.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Constructor<> ) ; org.springframework.data.mapping.model.Parameter<java.lang.Object,P> < java.lang.Object , P > [] org.springframework.data.mapping.model.Parameter<java.lang.Object,P>[] = new Parameter [ java.util.List<org.springframework.data.mapping.model.TypeInformation<?>> . size ( ) ] ; java.lang.annotation.Annotation [] [] java.lang.annotation.Annotation[][] = java.lang.reflect.Constructor<> . java.lang.annotation.Annotation[][] ( ) ; for ( int int = NUMBER ; int < java.util.List<org.springframework.data.mapping.model.TypeInformation<?>> . size ( ) ; int ++ ) { java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String[] == null ? null : java.lang.String[] [ int ] ) ; TypeInformation < ? > org.springframework.data.mapping.model.TypeInformation<?> = java.util.List<org.springframework.data.mapping.model.TypeInformation<?>> . get ( int ) ; java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.annotation.Annotation[][] [ int ] ; org.springframework.data.mapping.model.Parameter<java.lang.Object,P>[] [ int ] = new Parameter ( java.util.Optional<java.lang.String> , org.springframework.data.mapping.model.TypeInformation<> , java.lang.annotation.Annotation[] , java.util.Optional<org.springframework.data.mapping.model.PersistentEntity<T,P>> ) ; } return new PreferredConstructor <> ( ( java.lang.reflect.Constructor<T> < T > ) java.lang.reflect.Constructor<> , org.springframework.data.mapping.model.Parameter<java.lang.Object,P>[] ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.data.mapping.model.PreferredConstructor<T,P>> < PreferredConstructor < T , P > > java.util.Optional<org.springframework.data.mapping.model.PreferredConstructor<T,P>> ( ) { return java.util.Optional<org.springframework.data.mapping.model.PreferredConstructor<T,P>> ; }  <METHOD_END>
