<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> ServerResponse . ok ( ) . build ( ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = mock ( RequestPredicate .class ) ; when ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) . thenReturn ( true ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . route ( org.springframework.web.reactive.function.server.RequestPredicate , org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; Mono < HandlerFunction < ServerResponse > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> . route ( org.springframework.web.reactive.function.server.MockServerRequest ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> ) . expectNext ( org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> ServerResponse . ok ( ) . build ( ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = mock ( RequestPredicate .class ) ; when ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) . thenReturn ( false ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . route ( org.springframework.web.reactive.function.server.RequestPredicate , org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; Mono < HandlerFunction < ServerResponse > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> . route ( org.springframework.web.reactive.function.server.MockServerRequest ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> ServerResponse . ok ( ) . build ( ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono . just ( handlerFunction ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = mock ( RequestPredicate .class ) ; when ( org.springframework.web.reactive.function.server.RequestPredicate . nest ( org.springframework.web.reactive.function.server.MockServerRequest ) ) . thenReturn ( java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . nest ( org.springframework.web.reactive.function.server.RequestPredicate , org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; Mono < HandlerFunction < ServerResponse > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> . route ( org.springframework.web.reactive.function.server.MockServerRequest ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> ) . expectNext ( org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> ServerResponse . ok ( ) . build ( ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono . just ( handlerFunction ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = mock ( RequestPredicate .class ) ; when ( org.springframework.web.reactive.function.server.RequestPredicate . nest ( org.springframework.web.reactive.function.server.MockServerRequest ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . nest ( org.springframework.web.reactive.function.server.RequestPredicate , org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; Mono < HandlerFunction < ServerResponse > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> = org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> . route ( org.springframework.web.reactive.function.server.MockServerRequest ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse>> ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> ServerResponse . accepted ( ) . build ( ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . route ( RequestPredicates . all ( ) , org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; HttpHandler org.springframework.web.reactive.function.server.HttpHandler = RouterFunctions . toHttpHandler ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.HttpHandler ) ; MockServerHttpRequest org.springframework.web.reactive.function.server.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.reactive.function.server.HttpHandler . handle ( org.springframework.web.reactive.function.server.MockServerHttpRequest , org.springframework.web.reactive.function.server.MockServerHttpResponse ) . block ( ) ; assertEquals ( HttpStatus . ACCEPTED , org.springframework.web.reactive.function.server.MockServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> { throw new IllegalStateException ( ) ; } ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . route ( RequestPredicates . all ( ) , org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; HttpHandler org.springframework.web.reactive.function.server.HttpHandler = RouterFunctions . toHttpHandler ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.HttpHandler ) ; MockServerHttpRequest org.springframework.web.reactive.function.server.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.reactive.function.server.HttpHandler . handle ( org.springframework.web.reactive.function.server.MockServerHttpRequest , org.springframework.web.reactive.function.server.MockServerHttpResponse ) . block ( ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.web.reactive.function.server.MockServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono . error ( new IllegalStateException ( ) ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . route ( RequestPredicates . all ( ) , org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; HttpHandler org.springframework.web.reactive.function.server.HttpHandler = RouterFunctions . toHttpHandler ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.HttpHandler ) ; MockServerHttpRequest org.springframework.web.reactive.function.server.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.reactive.function.server.HttpHandler . handle ( org.springframework.web.reactive.function.server.MockServerHttpRequest , org.springframework.web.reactive.function.server.MockServerHttpResponse ) . block ( ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.web.reactive.function.server.MockServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono . error ( new ResponseStatusException ( HttpStatus . NOT_FOUND , STRING ) ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . route ( RequestPredicates . all ( ) , org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; HttpHandler org.springframework.web.reactive.function.server.HttpHandler = RouterFunctions . toHttpHandler ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.HttpHandler ) ; MockServerHttpRequest org.springframework.web.reactive.function.server.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.reactive.function.server.HttpHandler . handle ( org.springframework.web.reactive.function.server.MockServerHttpRequest , org.springframework.web.reactive.function.server.MockServerHttpResponse ) . block ( ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.function.server.MockServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono .< ServerResponse > just ( new ServerResponse ( ) { @ Override public HttpStatus statusCode ( ) { return HttpStatus . OK ; } @ Override public HttpHeaders headers ( ) { return new HttpHeaders ( ) ; } @ Override public Mono < Void > writeTo ( ServerWebExchange exchange , HandlerStrategies strategies ) { return Mono . error ( new ResponseStatusException ( HttpStatus . NOT_FOUND , STRING ) ) ; } } ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . route ( RequestPredicates . all ( ) , org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; HttpHandler org.springframework.web.reactive.function.server.HttpHandler = RouterFunctions . toHttpHandler ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.HttpHandler ) ; MockServerHttpRequest org.springframework.web.reactive.function.server.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.reactive.function.server.HttpHandler . handle ( org.springframework.web.reactive.function.server.MockServerHttpRequest , org.springframework.web.reactive.function.server.MockServerHttpResponse ) . block ( ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.function.server.MockServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Override public HttpStatus statusCode ( ) { return HttpStatus . OK ; }  <METHOD_END>
<METHOD_START> @ Override public HttpHeaders headers ( ) { return new HttpHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ Override public Mono < Void > writeTo ( ServerWebExchange exchange , HandlerStrategies strategies ) { return Mono . error ( new ResponseStatusException ( HttpStatus . NOT_FOUND , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerFunction < ServerResponse > org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> = request -> Mono .< ServerResponse > just ( new ServerResponse ( ) { @ Override public HttpStatus statusCode ( ) { return HttpStatus . OK ; } @ Override public HttpHeaders headers ( ) { return new HttpHeaders ( ) ; } @ Override public Mono < Void > writeTo ( ServerWebExchange exchange , HandlerStrategies strategies ) { throw new ResponseStatusException ( HttpStatus . NOT_FOUND , STRING ) ; } } ) ; RouterFunction < ServerResponse > org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> = RouterFunctions . route ( RequestPredicates . all ( ) , org.springframework.web.reactive.function.server.HandlerFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; HttpHandler org.springframework.web.reactive.function.server.HttpHandler = RouterFunctions . toHttpHandler ( org.springframework.web.reactive.function.server.RouterFunction<org.springframework.web.reactive.function.server.ServerResponse> ) ; assertNotNull ( org.springframework.web.reactive.function.server.HttpHandler ) ; MockServerHttpRequest org.springframework.web.reactive.function.server.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . build ( ) ; MockServerHttpResponse org.springframework.web.reactive.function.server.MockServerHttpResponse = new MockServerHttpResponse ( ) ; org.springframework.web.reactive.function.server.HttpHandler . handle ( org.springframework.web.reactive.function.server.MockServerHttpRequest , org.springframework.web.reactive.function.server.MockServerHttpResponse ) . block ( ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.function.server.MockServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Override public HttpStatus statusCode ( ) { return HttpStatus . OK ; }  <METHOD_END>
<METHOD_START> @ Override public HttpHeaders headers ( ) { return new HttpHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ Override public Mono < Void > writeTo ( ServerWebExchange exchange , HandlerStrategies strategies ) { throw new ResponseStatusException ( HttpStatus . NOT_FOUND , STRING ) ; }  <METHOD_END>
