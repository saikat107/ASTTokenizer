<METHOD_START> public void ( java.lang.Throwable java.lang.Throwable ) { Assert . notNull ( java.lang.Throwable , STRING ) ; this . java.lang.Class<? extends java.lang.Throwable> = java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<? extends java.lang.Throwable> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> , java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ) { int int = int ( java.lang.Class<> , this . java.lang.Class<> , NUMBER ) ; int int = int ( java.lang.Class<> , this . java.lang.Class<> , NUMBER ) ; return ( int - int ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , int int ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return int ; } if ( java.lang.Class<> == java.lang.Throwable .class ) { return java.lang.Integer . int ; } return int ( java.lang.Class<> , java.lang.Class<> . java.lang.Class<? super > ( ) , int + NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ( java.util.Collection<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.Collection<java.lang.Class<? extends java.lang.Throwable>> , java.lang.Throwable java.lang.Throwable ) { Assert . notEmpty ( java.util.Collection<java.lang.Class<? extends java.lang.Throwable>> , STRING ) ; if ( java.util.Collection<java.lang.Class<? extends java.lang.Throwable>> . int ( ) == NUMBER ) { return java.util.Collection<java.lang.Class<? extends java.lang.Throwable>> . java.util.Iterator<java.lang.Class<? extends java.lang.Throwable>> ( ) . java.lang.Class<? extends java.lang.Throwable> ( ) ; } java.util.List<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> = new java.util.ArrayList<java.lang.Class<? extends java.lang.Throwable>> <> ( java.util.Collection<java.lang.Class<? extends java.lang.Throwable>> ) ; java.util.Collections . void ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> , new org.springframework.core.ExceptionDepthComparator ( java.lang.Throwable ) ) ; return java.util.List<java.lang.Class<? extends java.lang.Throwable>> . java.lang.Class<? extends java.lang.Throwable> ( NUMBER ) ; }  <METHOD_END>
