<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.beans.factory.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.beans.factory.annotation.AnnotationConfigApplicationContext . register ( org.springframework.beans.factory.annotation.BridgeMethodAutowiringTests.UserServiceImpl .class , org.springframework.beans.factory.annotation.BridgeMethodAutowiringTests.Foo .class ) ; org.springframework.beans.factory.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertNotNull ( org.springframework.beans.factory.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.beans.factory.annotation.BridgeMethodAutowiringTests.UserServiceImpl .class ) . object ) ; }  <METHOD_END>
<METHOD_START> public abstract void void ( D D );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Inject @ Named ( STRING ) public void void ( org.springframework.beans.factory.annotation.BridgeMethodAutowiringTests.Foo org.springframework.beans.factory.annotation.BridgeMethodAutowiringTests.Foo ) { if ( this . org.springframework.beans.factory.annotation.BridgeMethodAutowiringTests.Foo != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.beans.factory.annotation.BridgeMethodAutowiringTests.Foo = org.springframework.beans.factory.annotation.BridgeMethodAutowiringTests.Foo ; }  <METHOD_END>
