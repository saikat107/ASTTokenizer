<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.beans.factory.xml.ParserContext , BeanDefinitionBuilder org.springframework.beans.factory.xml.BeanDefinitionBuilder ) { org.w3c.dom.NamedNodeMap org.w3c.dom.NamedNodeMap = org.w3c.dom.Element . org.w3c.dom.NamedNodeMap ( ) ; for ( int int = NUMBER ; int < org.w3c.dom.NamedNodeMap . int ( ) ; int ++ ) { org.w3c.dom.Attr org.w3c.dom.Attr = ( org.w3c.dom.Attr ) org.w3c.dom.NamedNodeMap . org.w3c.dom.Node ( int ) ; if ( boolean ( org.w3c.dom.Attr , org.springframework.beans.factory.xml.ParserContext ) ) { java.lang.String java.lang.String = java.lang.String ( org.w3c.dom.Attr . java.lang.String ( ) ) ; Assert . state ( StringUtils . hasText ( java.lang.String ) , STRING ) ; org.springframework.beans.factory.xml.BeanDefinitionBuilder . addPropertyValue ( java.lang.String , org.w3c.dom.Attr . java.lang.String ( ) ) ; } } void ( org.springframework.beans.factory.xml.BeanDefinitionBuilder , org.w3c.dom.Element ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( org.w3c.dom.Attr org.w3c.dom.Attr , ParserContext org.springframework.beans.factory.xml.ParserContext ) { java.lang.String java.lang.String = org.w3c.dom.Attr . java.lang.String ( ) ; return ( ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( STRING ) && boolean ( org.springframework.beans.factory.xml.ParserContext . getDelegate ( ) . getLocalName ( org.w3c.dom.Attr ) ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { return ! ID_ATTRIBUTE . equals ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return Conventions . attributeNameToPropertyName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinitionBuilder org.springframework.beans.factory.xml.BeanDefinitionBuilder , org.w3c.dom.Element org.w3c.dom.Element ) {	}  <METHOD_END>
