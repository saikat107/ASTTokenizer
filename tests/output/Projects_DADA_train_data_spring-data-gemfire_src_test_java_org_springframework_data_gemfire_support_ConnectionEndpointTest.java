<METHOD_START> @ Test public void void ( ) { java.net.InetSocketAddress java.net.InetSocketAddress = new java.net.InetSocketAddress ( STRING , NUMBER ) ; ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . from ( java.net.InetSocketAddress ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( java.net.InetSocketAddress . java.lang.String ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( java.net.InetSocketAddress . int ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( ConnectionEndpoint . DEFAULT_HOST ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( ConnectionEndpoint . DEFAULT_PORT ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( ConnectionEndpoint . DEFAULT_HOST ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( ConnectionEndpoint . DEFAULT_PORT ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = ConnectionEndpoint . parse ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( ConnectionEndpoint . DEFAULT_HOST ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; ConnectionEndpoint . parse ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; ConnectionEndpoint . parse ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; ConnectionEndpoint . parse ( null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; ConnectionEndpoint . parse ( STRING , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ConnectionEndpoint . parseDigits ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ConnectionEndpoint . parseDigits ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ConnectionEndpoint . parseDigits ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ConnectionEndpoint . parseDigits ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ConnectionEndpoint . parseDigits ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ConnectionEndpoint . parseDigits ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ConnectionEndpoint . parseDigits ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( ConnectionEndpoint . parseDigits ( null ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ConnectionEndpoint . parsePort ( STRING , NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( ConnectionEndpoint . parsePort ( STRING , NUMBER ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = new ConnectionEndpoint ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . toString ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = new ConnectionEndpoint ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( ConnectionEndpoint . DEFAULT_HOST ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.support.ExpectedException . expectMessage ( STRING ) ; new ConnectionEndpoint ( STRING , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.CloneNotSupportedException { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = new ConnectionEndpoint ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = ( ConnectionEndpoint ) org.springframework.data.gemfire.support.ConnectionEndpoint . clone ( ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = new ConnectionEndpoint ( STRING , NUMBER ) ; ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = new ConnectionEndpoint ( STRING , NUMBER ) ; ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = new ConnectionEndpoint ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( lessThan ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( lessThan ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( greaterThan ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( lessThan ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( greaterThan ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( greaterThan ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . compareTo ( org.springframework.data.gemfire.support.ConnectionEndpoint ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConnectionEndpoint org.springframework.data.gemfire.support.ConnectionEndpoint = new ConnectionEndpoint ( STRING , NUMBER ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) , is ( equalTo ( NUMBER ) ) ) ; java.net.InetSocketAddress java.net.InetSocketAddress = org.springframework.data.gemfire.support.ConnectionEndpoint . toInetSocketAddress ( ) ; assertThat ( java.net.InetSocketAddress , is ( notNullValue ( ) ) ) ; assertThat ( java.net.InetSocketAddress . java.lang.String ( ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint . getHost ( ) ) ) ) ; assertThat ( java.net.InetSocketAddress . int ( ) , is ( equalTo ( org.springframework.data.gemfire.support.ConnectionEndpoint . getPort ( ) ) ) ) ; }  <METHOD_END>
