<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.jdbc.object.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.jdbc.object.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; java.sql.CallableStatement java.sql.CallableStatement = mock ( java.sql.CallableStatement .class ) ; TestDataSourceWrapper org.springframework.jdbc.object.TestDataSourceWrapper = ( TestDataSourceWrapper ) org.springframework.jdbc.object.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.jdbc.object.TestDataSourceWrapper . setTarget ( javax.sql.DataSource ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + STRING + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; StoredProcedure org.springframework.jdbc.object.StoredProcedure = ( StoredProcedure ) org.springframework.jdbc.object.DefaultListableBeanFactory . getBean ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.object.StoredProcedure . execute ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( NUMBER , java.lang.Integer . int ( ) ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . close ( ) ; }  <METHOD_END>
