<METHOD_START> @ Before public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( ) ; assertNotNull ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator .class ) . getBeanDefinition ( ) ) ; try { org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.config.NoSuchBeanDefinitionException ) { } try { org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( null ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.config.NoSuchBeanDefinitionException ) { } try { org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 ( ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.config.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException1 .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException2 .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException3 .class ) . getBeanDefinition ( ) ) ; try { org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( ) ; fail ( STRING ) ; } catch ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException1 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException1 ) { assertTrue ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException1 . getCause ( ) instanceof NoSuchBeanDefinitionException ) ; } try { org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( null ) ; fail ( STRING ) ; } catch ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException2 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException2 ) { assertTrue ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException2 . getCause ( ) instanceof NoSuchBeanDefinitionException ) ; } try { org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2Locator . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 ( ) ; fail ( STRING ) ; } catch ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException3 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException3 ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( null ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( STRING ) ; try { org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator2 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( STRING ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.config.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( NUMBER ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertTrue ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . java.lang.String ( ) . int ( STRING ) != - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ExtendedTestService .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( ServiceLocatorFactoryBean .class ) . addPropertyValue ( STRING , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( STRING ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( NUMBER ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService = org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestServiceLocator3 . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( NUMBER ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertNotSame ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService , org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ) ; assertFalse ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService instanceof org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ExtendedTestService ) ; assertFalse ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService instanceof org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ExtendedTestService ) ; assertFalse ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService instanceof org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ExtendedTestService ) ; assertTrue ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService instanceof org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ExtendedTestService ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ServiceLocatorFactoryBean ( ) . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { ServiceLocatorFactoryBean org.springframework.beans.factory.config.ServiceLocatorFactoryBean = new ServiceLocatorFactoryBean ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBean . setServiceLocatorInterface ( java.lang.Class<? extends org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests> ( ) ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { ServiceLocatorFactoryBean org.springframework.beans.factory.config.ServiceLocatorFactoryBean = new ServiceLocatorFactoryBean ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBean . setServiceLocatorExceptionClass ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ExceptionClassWithOnlyZeroArgCtor .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ServiceLocatorFactoryBean org.springframework.beans.factory.config.ServiceLocatorFactoryBean = new ServiceLocatorFactoryBean ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBean . setServiceLocatorExceptionClass ( ( java.lang.Class ) java.lang.Class<? extends org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) java.lang.Exception { ServiceLocatorFactoryBean org.springframework.beans.factory.config.ServiceLocatorFactoryBean = new ServiceLocatorFactoryBean ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBean . setServiceLocatorInterface ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ServiceLocatorInterfaceWithExtraNonCompliantMethod .class ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBean . afterPropertiesSet ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ServiceLocatorInterfaceWithExtraNonCompliantMethod org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ServiceLocatorInterfaceWithExtraNonCompliantMethod = ( org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ServiceLocatorInterfaceWithExtraNonCompliantMethod ) org.springframework.beans.factory.config.ServiceLocatorFactoryBean . getObject ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.ServiceLocatorInterfaceWithExtraNonCompliantMethod . org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.beans.factory.config.BeanFactory = mock ( BeanFactory .class ) ; try { ServiceLocatorFactoryBean org.springframework.beans.factory.config.ServiceLocatorFactoryBean = new ServiceLocatorFactoryBean ( ) ; org.springframework.beans.factory.config.ServiceLocatorFactoryBean . setBeanFactory ( org.springframework.beans.factory.config.BeanFactory ) ; } catch ( FatalBeanException org.springframework.beans.factory.config.FatalBeanException ) { } }  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( )  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException2 ;  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( )  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( int int );  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService ( )  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 ( ) org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.CustomServiceLocatorException3 ;  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 ( )  <METHOD_END>
<METHOD_START> org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 org.springframework.beans.factory.config.ServiceLocatorFactoryBeanTests.TestService2 ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { super( java.lang.String , java.lang.Throwable ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Throwable java.lang.Throwable ) { super( STRING , java.lang.Throwable ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
