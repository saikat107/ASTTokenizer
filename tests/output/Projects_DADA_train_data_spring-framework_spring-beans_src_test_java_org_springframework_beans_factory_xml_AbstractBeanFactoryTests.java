<METHOD_START> protected abstract org.springframework.beans.factory.xml.BeanFactory org.springframework.beans.factory.xml.BeanFactory ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.beans.factory.xml.BeanFactory ( ) . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.BeanFactory ( ) . containsBean ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean != org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getAge ( ) == org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MustBeInitialized org.springframework.beans.factory.xml.MustBeInitialized = ( MustBeInitialized ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; org.springframework.beans.factory.xml.MustBeInitialized . businessMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LifecycleBean org.springframework.beans.factory.xml.LifecycleBean = ( LifecycleBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.LifecycleBean . getBeanName ( ) ) ; org.springframework.beans.factory.xml.LifecycleBean . businessMethod ( ) ; assertTrue ( STRING , ! org.springframework.beans.factory.xml.LifecycleBean . isDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , java.lang.Object instanceof TestBean ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) java.lang.Object ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING , TestBean .class ) ; assertTrue ( STRING , java.lang.Object instanceof TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING , BeanFactory .class ) ; fail ( STRING ) ; } catch ( BeanNotOfRequiredTypeException org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException ) { assertTrue ( STRING , org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException . getBeanName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException . getRequiredType ( ) . equals ( BeanFactory .class ) ) ; assertTrue ( STRING , TestBean .class . boolean ( org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException . getActualType ( ) ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException . getActualType ( ) == org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) . getClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING , TestBean .class ) ; assertTrue ( STRING , java.lang.Object instanceof TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING , TestBean .class ) ; assertTrue ( STRING , java.lang.Object instanceof TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING , BeanFactory .class ) ; fail ( STRING ) ; } catch ( BeanNotOfRequiredTypeException org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException ) { assertTrue ( STRING , org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException . getBeanName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException . getRequiredType ( ) . equals ( BeanFactory .class ) ) ; assertTrue ( STRING , TestBean .class . boolean ( org.springframework.beans.factory.xml.BeanNotOfRequiredTypeException . getActualType ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , java.lang.Object instanceof TestBean ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , java.lang.Object instanceof TestBean ) ; assertTrue ( STRING , java.lang.Object == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean != org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . equals ( org.springframework.beans.factory.xml.TestBean ) ) ; org.springframework.beans.factory.xml.TestBean . setAge ( NUMBER ) ; org.springframework.beans.factory.xml.TestBean . setAge ( NUMBER ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( STRING , ! org.springframework.beans.factory.xml.TestBean . equals ( org.springframework.beans.factory.xml.TestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeansException .class ) public void void ( ) { assertFalse ( org.springframework.beans.factory.xml.BeanFactory ( ) . containsBean ( STRING ) ) ; org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , java.lang.Object instanceof TestBean ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) java.lang.Object ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) == null && org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER && org.springframework.beans.factory.xml.TestBean . getSpouse ( ) == null ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { try { org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertEquals ( STRING , org.springframework.beans.factory.xml.BeanCreationException . getBeanName ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getCause ( ) instanceof PropertyBatchUpdateException ) ; PropertyBatchUpdateException org.springframework.beans.factory.xml.PropertyBatchUpdateException = ( PropertyBatchUpdateException ) org.springframework.beans.factory.xml.BeanCreationException . getCause ( ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.PropertyBatchUpdateException . getExceptionCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.PropertyBatchUpdateException . getPropertyAccessException ( STRING ) != null ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.PropertyBatchUpdateException . getPropertyAccessException ( STRING ) . getPropertyChangeEvent ( ) . getNewValue ( ) . equals ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.beans.factory.xml.BeanFactory ( ) . isSingleton ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.BeanFactory ( ) . isSingleton ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING + org.springframework.beans.factory.xml.TestBean . getName ( ) , org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( DummyFactory . SINGLETON_NAME ) ) ; DummyFactory org.springframework.beans.factory.xml.DummyFactory = ( DummyFactory ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DummyFactory . getBeanFactory ( ) != null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.beans.factory.xml.BeanFactory ( ) . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.beans.factory.xml.BeanFactory ( ) . isSingleton ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( ! org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( DummyFactory . SINGLETON_NAME ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean != org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNotNull ( org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean ) ; DummyFactory org.springframework.beans.factory.xml.DummyFactory = ( DummyFactory ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DummyFactory . wasInitialized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanIsNotAFactoryException .class ) public void void ( ) { org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.beans.factory.xml.BeanFactory = org.springframework.beans.factory.xml.BeanFactory ( ) ; if ( ! ( org.springframework.beans.factory.xml.BeanFactory instanceof ConfigurableBeanFactory ) ) { return; } ConfigurableBeanFactory org.springframework.beans.factory.xml.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.beans.factory.xml.BeanFactory ; java.lang.String java.lang.String = STRING ; try { org.springframework.beans.factory.xml.ConfigurableBeanFactory . getBean ( java.lang.String ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.xml.NoSuchBeanDefinitionException ) { assertTrue ( java.lang.String . boolean ( org.springframework.beans.factory.xml.NoSuchBeanDefinitionException . getBeanName ( ) ) ) ; } org.springframework.beans.factory.xml.ConfigurableBeanFactory . registerAlias ( STRING , java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( java.lang.String ) ; assertTrue ( java.lang.Object == java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { TestBean org.springframework.beans.factory.xml.TestBean = new TestBean ( ) ; java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String , STRING ) ; org.springframework.beans.factory.xml.TestBean . setName ( java.util.StringTokenizer . java.lang.String ( ) ) ; org.springframework.beans.factory.xml.TestBean . setAge ( java.lang.Integer . int ( java.util.StringTokenizer . java.lang.String ( ) ) ) ; void ( org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
