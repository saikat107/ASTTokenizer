<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.http.codec.ServerSentEventHttpMessageReader . canRead ( ResolvableType . forClass ( java.lang.Object .class ) , new MediaType ( STRING , STRING ) ) ) ; assertFalse ( org.springframework.http.codec.ServerSentEventHttpMessageReader . canRead ( ResolvableType . forClass ( java.lang.Object .class ) , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.codec.ServerSentEventHttpMessageReader . canRead ( ResolvableType . forClass ( java.lang.Object .class ) , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.codec.ServerSentEventHttpMessageReader . canRead ( ResolvableType . forClass ( ServerSentEvent .class ) , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . body ( STRING + STRING ) ; Flux < ServerSentEvent > org.springframework.http.codec.Flux<org.springframework.http.codec.ServerSentEvent> = this . org.springframework.http.codec.ServerSentEventHttpMessageReader . read ( ResolvableType . forClassWithGenerics ( ServerSentEvent .class , java.lang.String .class ) , org.springframework.http.codec.MockServerHttpRequest , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . cast ( ServerSentEvent .class ) ; StepVerifier . create ( org.springframework.http.codec.Flux<org.springframework.http.codec.ServerSentEvent> ) . consumeNextWith ( event -> { assertEquals ( STRING , event . id ( ) . get ( ) ) ; assertEquals ( STRING , event . event ( ) . get ( ) ) ; assertEquals ( Duration . ofMillis ( NUMBER ) , event . retry ( ) . get ( ) ) ; assertEquals ( STRING , event . comment ( ) . get ( ) ) ; assertEquals ( STRING , event . data ( ) . get ( ) ) ; } ) . consumeNextWith ( event -> { assertEquals ( STRING , event . id ( ) . get ( ) ) ; assertEquals ( STRING , event . event ( ) . get ( ) ) ; assertEquals ( Duration . ofMillis ( NUMBER ) , event . retry ( ) . get ( ) ) ; assertFalse ( event . comment ( ) . isPresent ( ) ) ; assertEquals ( STRING , event . data ( ) . get ( ) ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . body ( Flux . just ( stringBuffer ( STRING ) , stringBuffer ( STRING ) , stringBuffer ( STRING ) ) ) ; Flux < ServerSentEvent > org.springframework.http.codec.Flux<org.springframework.http.codec.ServerSentEvent> = org.springframework.http.codec.ServerSentEventHttpMessageReader . read ( ResolvableType . forClassWithGenerics ( ServerSentEvent .class , java.lang.String .class ) , org.springframework.http.codec.MockServerHttpRequest , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . cast ( ServerSentEvent .class ) ; StepVerifier . create ( org.springframework.http.codec.Flux<org.springframework.http.codec.ServerSentEvent> ) . consumeNextWith ( event -> { assertEquals ( STRING , event . id ( ) . get ( ) ) ; assertEquals ( STRING , event . event ( ) . get ( ) ) ; assertEquals ( Duration . ofMillis ( NUMBER ) , event . retry ( ) . get ( ) ) ; assertEquals ( STRING , event . comment ( ) . get ( ) ) ; assertEquals ( STRING , event . data ( ) . get ( ) ) ; } ) . consumeNextWith ( event -> { assertEquals ( STRING , event . id ( ) . get ( ) ) ; assertEquals ( STRING , event . event ( ) . get ( ) ) ; assertEquals ( Duration . ofMillis ( NUMBER ) , event . retry ( ) . get ( ) ) ; assertFalse ( event . comment ( ) . isPresent ( ) ) ; assertEquals ( STRING , event . data ( ) . get ( ) ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . body ( java.lang.String ) ; Flux < java.lang.String > org.springframework.http.codec.Flux<java.lang.String> = org.springframework.http.codec.ServerSentEventHttpMessageReader . read ( ResolvableType . forClass ( java.lang.String .class ) , org.springframework.http.codec.MockServerHttpRequest , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . cast ( java.lang.String .class ) ; StepVerifier . create ( org.springframework.http.codec.Flux<java.lang.String> ) . expectNextMatches ( elem -> elem . equals ( STRING ) ) . expectNextMatches ( elem -> elem . equals ( STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . body ( STRING + STRING ) ; Flux < Pojo > org.springframework.http.codec.Flux<org.springframework.http.codec.Pojo> = org.springframework.http.codec.ServerSentEventHttpMessageReader . read ( ResolvableType . forClass ( Pojo .class ) , org.springframework.http.codec.MockServerHttpRequest , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . cast ( Pojo .class ) ; StepVerifier . create ( org.springframework.http.codec.Flux<org.springframework.http.codec.Pojo> ) . consumeNextWith ( pojo -> { assertEquals ( STRING , pojo . getFoo ( ) ) ; assertEquals ( STRING , pojo . getBar ( ) ) ; } ) . consumeNextWith ( pojo -> { assertEquals ( STRING , pojo . getFoo ( ) ) ; assertEquals ( STRING , pojo . getBar ( ) ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerHttpRequest org.springframework.http.codec.MockServerHttpRequest = MockServerHttpRequest . post ( STRING ) . body ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.http.codec.ServerSentEventHttpMessageReader . readMono ( ResolvableType . forClass ( java.lang.String .class ) , org.springframework.http.codec.MockServerHttpRequest , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) . cast ( java.lang.String .class ) . block ( java.time.Duration . java.time.Duration ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
