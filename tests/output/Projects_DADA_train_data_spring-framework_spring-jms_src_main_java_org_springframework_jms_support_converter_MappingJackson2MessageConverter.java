<METHOD_START> public void ( ) { this . org.springframework.jms.support.converter.ObjectMapper = new ObjectMapper ( ) ; this . org.springframework.jms.support.converter.ObjectMapper . configure ( MapperFeature . DEFAULT_VIEW_INCLUSION , false ) ; this . org.springframework.jms.support.converter.ObjectMapper . configure ( DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES , false ) ; }  <METHOD_END>
<METHOD_START> public void void ( ObjectMapper org.springframework.jms.support.converter.ObjectMapper ) { Assert . notNull ( org.springframework.jms.support.converter.ObjectMapper , STRING ) ; this . org.springframework.jms.support.converter.ObjectMapper = org.springframework.jms.support.converter.ObjectMapper ; }  <METHOD_END>
<METHOD_START> public void void ( MessageType org.springframework.jms.support.converter.MessageType ) { Assert . notNull ( org.springframework.jms.support.converter.MessageType , STRING ) ; this . org.springframework.jms.support.converter.MessageType = org.springframework.jms.support.converter.MessageType ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> ) { this . java.util.Map<java.lang.String,java.lang.Class<?>> = new java.util.HashMap<java.lang.String,java.lang.Class<?>> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map.Entry<java.lang.String,java.lang.Class<?>> : java.util.Map<java.lang.String,java.lang.Class<?>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Class<?>>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Class<?>> . java.lang.String ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map.Entry<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( ) ; this . java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.String , java.lang.Class<> ) ; this . java.util.Map<java.lang.Class<?>,java.lang.String> . java.lang.String ( java.lang.Class<> , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.support.converter.Message org.springframework.jms.support.converter.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session ) throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { Message org.springframework.jms.support.converter.Message ; try { switch ( this . org.springframework.jms.support.converter.MessageType ) { case TEXT : org.springframework.jms.support.converter.Message = org.springframework.jms.support.converter.TextMessage ( java.lang.Object , org.springframework.jms.support.converter.Session , this . org.springframework.jms.support.converter.ObjectMapper . writer ( ) ) ; break; case BYTES : org.springframework.jms.support.converter.Message = org.springframework.jms.support.converter.BytesMessage ( java.lang.Object , org.springframework.jms.support.converter.Session , this . org.springframework.jms.support.converter.ObjectMapper . writer ( ) ) ; break; default: org.springframework.jms.support.converter.Message = org.springframework.jms.support.converter.Message ( java.lang.Object , org.springframework.jms.support.converter.Session , this . org.springframework.jms.support.converter.ObjectMapper . writer ( ) , this . org.springframework.jms.support.converter.MessageType ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new MessageConversionException ( STRING + java.lang.Object + STRING , java.io.IOException ) ; } void ( java.lang.Object , org.springframework.jms.support.converter.Message ) ; return org.springframework.jms.support.converter.Message ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.support.converter.Message org.springframework.jms.support.converter.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , java.lang.Object java.lang.Object )			throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { return org.springframework.jms.support.converter.Message ( java.lang.Object , org.springframework.jms.support.converter.Session , java.lang.Class<?> ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.support.converter.Message org.springframework.jms.support.converter.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , java.lang.Class<?> < ? > java.lang.Class<?> )			throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { if ( java.lang.Class<> != null ) { return org.springframework.jms.support.converter.Message ( java.lang.Object , org.springframework.jms.support.converter.Session , this . org.springframework.jms.support.converter.ObjectMapper . writerWithView ( java.lang.Class<> ) ) ; } else { return org.springframework.jms.support.converter.Message ( java.lang.Object , org.springframework.jms.support.converter.Session , this . org.springframework.jms.support.converter.ObjectMapper . writer ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message org.springframework.jms.support.converter.Message ) throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { try { JavaType org.springframework.jms.support.converter.JavaType = org.springframework.jms.support.converter.JavaType ( org.springframework.jms.support.converter.Message ) ; return java.lang.Object ( org.springframework.jms.support.converter.Message , org.springframework.jms.support.converter.JavaType ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessageConversionException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.converter.Message org.springframework.jms.support.converter.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , ObjectWriter org.springframework.jms.support.converter.ObjectWriter )			throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { Message org.springframework.jms.support.converter.Message ; try { switch ( this . org.springframework.jms.support.converter.MessageType ) { case TEXT : org.springframework.jms.support.converter.Message = org.springframework.jms.support.converter.TextMessage ( java.lang.Object , org.springframework.jms.support.converter.Session , org.springframework.jms.support.converter.ObjectWriter ) ; break; case BYTES : org.springframework.jms.support.converter.Message = org.springframework.jms.support.converter.BytesMessage ( java.lang.Object , org.springframework.jms.support.converter.Session , org.springframework.jms.support.converter.ObjectWriter ) ; break; default: org.springframework.jms.support.converter.Message = org.springframework.jms.support.converter.Message ( java.lang.Object , org.springframework.jms.support.converter.Session , org.springframework.jms.support.converter.ObjectWriter , this . org.springframework.jms.support.converter.MessageType ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new MessageConversionException ( STRING + java.lang.Object + STRING , java.io.IOException ) ; } void ( java.lang.Object , org.springframework.jms.support.converter.Message ) ; return org.springframework.jms.support.converter.Message ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.converter.TextMessage org.springframework.jms.support.converter.TextMessage ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , ObjectWriter org.springframework.jms.support.converter.ObjectWriter )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; org.springframework.jms.support.converter.ObjectWriter . writeValue ( java.io.StringWriter , java.lang.Object ) ; return org.springframework.jms.support.converter.Session . createTextMessage ( java.io.StringWriter . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.converter.BytesMessage org.springframework.jms.support.converter.BytesMessage ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , ObjectWriter org.springframework.jms.support.converter.ObjectWriter )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( NUMBER ) ; java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter ( java.io.ByteArrayOutputStream , this . java.lang.String ) ; org.springframework.jms.support.converter.ObjectWriter . writeValue ( java.io.OutputStreamWriter , java.lang.Object ) ; BytesMessage org.springframework.jms.support.converter.BytesMessage = org.springframework.jms.support.converter.Session . createBytesMessage ( ) ; org.springframework.jms.support.converter.BytesMessage . writeBytes ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; if ( this . java.lang.String != null ) { org.springframework.jms.support.converter.BytesMessage . setStringProperty ( this . java.lang.String , this . java.lang.String ) ; } return org.springframework.jms.support.converter.BytesMessage ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.converter.Message org.springframework.jms.support.converter.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , ObjectWriter org.springframework.jms.support.converter.ObjectWriter , MessageType org.springframework.jms.support.converter.MessageType )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.jms.support.converter.MessageType + STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , Message org.springframework.jms.support.converter.Message ) throws org.springframework.jms.support.converter.JMSException { if ( this . java.lang.String != null ) { java.lang.String java.lang.String = this . java.util.Map<java.lang.Class<?>,java.lang.String> . java.lang.String ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( java.lang.String == null ) { java.lang.String = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; } org.springframework.jms.support.converter.Message . setStringProperty ( this . java.lang.String , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message org.springframework.jms.support.converter.Message , JavaType org.springframework.jms.support.converter.JavaType ) throws org.springframework.jms.support.converter.JMSException , java.io.IOException { if ( org.springframework.jms.support.converter.Message instanceof TextMessage ) { return java.lang.Object ( ( TextMessage ) org.springframework.jms.support.converter.Message , org.springframework.jms.support.converter.JavaType ) ; } else if ( org.springframework.jms.support.converter.Message instanceof BytesMessage ) { return java.lang.Object ( ( BytesMessage ) org.springframework.jms.support.converter.Message , org.springframework.jms.support.converter.JavaType ) ; } else { return java.lang.Object ( org.springframework.jms.support.converter.Message , org.springframework.jms.support.converter.JavaType ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( TextMessage org.springframework.jms.support.converter.TextMessage , JavaType org.springframework.jms.support.converter.JavaType )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException { java.lang.String java.lang.String = org.springframework.jms.support.converter.TextMessage . getText ( ) ; return this . org.springframework.jms.support.converter.ObjectMapper . readValue ( java.lang.String , org.springframework.jms.support.converter.JavaType ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( BytesMessage org.springframework.jms.support.converter.BytesMessage , JavaType org.springframework.jms.support.converter.JavaType )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException { java.lang.String java.lang.String = this . java.lang.String ; if ( this . java.lang.String != null && org.springframework.jms.support.converter.BytesMessage . propertyExists ( this . java.lang.String ) ) { java.lang.String = org.springframework.jms.support.converter.BytesMessage . getStringProperty ( this . java.lang.String ) ; } byte [] byte[] = new byte [ ( int ) org.springframework.jms.support.converter.BytesMessage . getBodyLength ( ) ] ; org.springframework.jms.support.converter.BytesMessage . readBytes ( byte[] ) ; try { java.lang.String java.lang.String = new java.lang.String ( byte[] , java.lang.String ) ; return this . org.springframework.jms.support.converter.ObjectMapper . readValue ( java.lang.String , org.springframework.jms.support.converter.JavaType ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new MessageConversionException ( STRING , java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( Message org.springframework.jms.support.converter.Message , JavaType org.springframework.jms.support.converter.JavaType )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.jms.support.converter.Message . getClass ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.converter.JavaType org.springframework.jms.support.converter.JavaType ( Message org.springframework.jms.support.converter.Message ) throws org.springframework.jms.support.converter.JMSException { java.lang.String java.lang.String = org.springframework.jms.support.converter.Message . getStringProperty ( this . java.lang.String ) ; if ( java.lang.String == null ) { throw new MessageConversionException ( STRING + this . java.lang.String + STRING + org.springframework.jms.support.converter.Message . getJMSMessageID ( ) + STRING + org.springframework.jms.support.converter.Message . getJMSDestination ( ) + STRING ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = this . java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.String ) ; if ( java.lang.Class<> != null ) { return this . org.springframework.jms.support.converter.ObjectMapper . getTypeFactory ( ) . constructType ( java.lang.Class<> ) ; } try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; return this . org.springframework.jms.support.converter.ObjectMapper . getTypeFactory ( ) . constructType ( java.lang.Class<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new MessageConversionException ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof MethodParameter ) { MethodParameter org.springframework.jms.support.converter.MethodParameter = ( MethodParameter ) java.lang.Object ; JsonView org.springframework.jms.support.converter.JsonView = org.springframework.jms.support.converter.MethodParameter . getParameterAnnotation ( JsonView .class ) ; if ( org.springframework.jms.support.converter.JsonView == null ) { org.springframework.jms.support.converter.JsonView = org.springframework.jms.support.converter.MethodParameter . getMethodAnnotation ( JsonView .class ) ; if ( org.springframework.jms.support.converter.JsonView == null ) { return null ; } } return java.lang.Class<?> ( org.springframework.jms.support.converter.JsonView , java.lang.Object ) ; } else if ( java.lang.Object instanceof JsonView ) { return java.lang.Class<?> ( ( JsonView ) java.lang.Object , java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) java.lang.Object ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( JsonView org.springframework.jms.support.converter.JsonView , java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.jms.support.converter.JsonView . value ( ) ; if ( java.lang.Class<?>[] . int != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object ) ; } return java.lang.Class<?>[] [ NUMBER ] ; }  <METHOD_END>
