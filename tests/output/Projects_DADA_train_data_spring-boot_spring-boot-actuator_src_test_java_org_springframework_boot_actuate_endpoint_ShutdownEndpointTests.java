<METHOD_START> public void ( ) { super( org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config .class , ShutdownEndpoint .class , STRING , true , STRING ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { assertThat ( getEndpointBean ( ) . isEnabled ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config = this . context . getBean ( org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config .class ) ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ; java.lang.Thread . java.lang.Thread ( ) . void ( new java.net.URLClassLoader ( new java.net.URL [ NUMBER ] , java.lang.Class<? extends org.springframework.boot.actuate.endpoint.ShutdownEndpointTests> ( ) . java.lang.ClassLoader ( ) ) ) ; try { java.util.Map<java.lang.String,java.lang.Object> = getEndpointBean ( ) . invoke ( ) ; } finally { java.lang.Thread . java.lang.Thread ( ) . void ( java.lang.ClassLoader ) ; } assertThat ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . startsWith ( STRING ) ; assertThat ( this . context . isActive ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config . java.lang.ClassLoader ) . isEqualTo ( java.lang.Class<? extends org.springframework.boot.actuate.endpoint.ShutdownEndpointTests> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.ShutdownEndpoint org.springframework.boot.actuate.endpoint.ShutdownEndpoint ( ) { ShutdownEndpoint org.springframework.boot.actuate.endpoint.ShutdownEndpoint = new ShutdownEndpoint ( ) ; return org.springframework.boot.actuate.endpoint.ShutdownEndpoint ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.ApplicationListener<org.springframework.boot.actuate.endpoint.ContextClosedEvent> < ContextClosedEvent > org.springframework.boot.actuate.endpoint.ApplicationListener<org.springframework.boot.actuate.endpoint.ContextClosedEvent> ( ) { return new ApplicationListener < ContextClosedEvent > ( ) { @ java.lang.Override public void void ( ContextClosedEvent org.springframework.boot.actuate.endpoint.ContextClosedEvent ) { org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config .this . java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config .this . java.util.concurrent.CountDownLatch . void ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextClosedEvent org.springframework.boot.actuate.endpoint.ContextClosedEvent ) { org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config .this . java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; org.springframework.boot.actuate.endpoint.ShutdownEndpointTests.Config .this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
