<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; this . org.springframework.boot.autoconfigure.mobile.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( LiteDeviceDelegatingViewResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBeansOfType ( LiteDeviceDelegatingViewResolver .class ) ) . hasSize ( NUMBER ) ; InternalResourceViewResolver org.springframework.boot.autoconfigure.mobile.InternalResourceViewResolver = this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( InternalResourceViewResolver .class ) ; void ( org.springframework.boot.autoconfigure.mobile.InternalResourceViewResolver , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Collections .< java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> ( FreeMarkerAutoConfiguration .class ) , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBeansOfType ( LiteDeviceDelegatingViewResolver .class ) ) . hasSize ( NUMBER ) ; void ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( FreeMarkerViewResolver .class ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Collections .< java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> ( GroovyTemplateAutoConfiguration .class ) , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBeansOfType ( LiteDeviceDelegatingViewResolver .class ) ) . hasSize ( NUMBER ) ; void ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( GroovyMarkupViewResolver .class ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Collections .< java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> ( MustacheAutoConfiguration .class ) , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBeansOfType ( LiteDeviceDelegatingViewResolver .class ) ) . hasSize ( NUMBER ) ; void ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( MustacheViewResolver .class ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Collections .< java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> ( ThymeleafAutoConfiguration .class ) , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBeansOfType ( LiteDeviceDelegatingViewResolver .class ) ) . hasSize ( NUMBER ) ; void ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( ThymeleafViewResolver .class ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ViewResolver org.springframework.boot.autoconfigure.mobile.ViewResolver , java.lang.String java.lang.String ) { LiteDeviceDelegatingViewResolver org.springframework.boot.autoconfigure.mobile.LiteDeviceDelegatingViewResolver = this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( java.lang.String , LiteDeviceDelegatingViewResolver .class ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.LiteDeviceDelegatingViewResolver . getViewResolver ( ) ) . isSameAs ( org.springframework.boot.autoconfigure.mobile.ViewResolver ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.LiteDeviceDelegatingViewResolver . getOrder ( ) ) . isEqualTo ( ( ( Ordered ) org.springframework.boot.autoconfigure.mobile.ViewResolver ) . getOrder ( ) - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( FreeMarkerAutoConfiguration .class , GroovyTemplateAutoConfiguration .class , MustacheAutoConfiguration .class , ThymeleafAutoConfiguration .class ) , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBeansOfType ( LiteDeviceDelegatingViewResolver .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; LiteDeviceDelegatingViewResolver org.springframework.boot.autoconfigure.mobile.LiteDeviceDelegatingViewResolver = this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( STRING , LiteDeviceDelegatingViewResolver .class ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.mobile.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.mobile.LiteDeviceDelegatingViewResolver ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( java.lang.Boolean . java.lang.Boolean ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyAccessor org.springframework.boot.autoconfigure.mobile.PropertyAccessor = org.springframework.boot.autoconfigure.mobile.PropertyAccessor ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.PropertyAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( java.lang.Boolean . java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyAccessor org.springframework.boot.autoconfigure.mobile.PropertyAccessor = org.springframework.boot.autoconfigure.mobile.PropertyAccessor ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.PropertyAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyAccessor org.springframework.boot.autoconfigure.mobile.PropertyAccessor = org.springframework.boot.autoconfigure.mobile.PropertyAccessor ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.PropertyAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyAccessor org.springframework.boot.autoconfigure.mobile.PropertyAccessor = org.springframework.boot.autoconfigure.mobile.PropertyAccessor ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.PropertyAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyAccessor org.springframework.boot.autoconfigure.mobile.PropertyAccessor = org.springframework.boot.autoconfigure.mobile.PropertyAccessor ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.PropertyAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyAccessor org.springframework.boot.autoconfigure.mobile.PropertyAccessor = org.springframework.boot.autoconfigure.mobile.PropertyAccessor ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.PropertyAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyAccessor org.springframework.boot.autoconfigure.mobile.PropertyAccessor = org.springframework.boot.autoconfigure.mobile.PropertyAccessor ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mobile.PropertyAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mobile.PropertyAccessor org.springframework.boot.autoconfigure.mobile.PropertyAccessor ( java.lang.String ... java.lang.String[] ) { void ( java.lang.String[] ) ; LiteDeviceDelegatingViewResolver org.springframework.boot.autoconfigure.mobile.LiteDeviceDelegatingViewResolver = this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . getBean ( STRING , LiteDeviceDelegatingViewResolver .class ) ; return new DirectFieldAccessor ( org.springframework.boot.autoconfigure.mobile.LiteDeviceDelegatingViewResolver ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { void ( null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; if ( java.util.List<java.lang.Class<?>> != null ) { this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( java.util.List<java.lang.Class<?>> . java.lang.Class[] ( new java.lang.Class [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ) ; } this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . register ( WebMvcAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , DeviceDelegatingViewResolverAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.mobile.AnnotationConfigWebApplicationContext . refresh ( ) ; }  <METHOD_END>
