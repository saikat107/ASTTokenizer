<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . int == int ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( this . int > NUMBER ) { boolean boolean = org.springframework.util.Log . isDebugEnabled ( ) ; synchronized ( this . java.lang.Object ) { boolean boolean = false ; while ( this . int >= this . int ) { if ( boolean ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } if ( boolean ) { org.springframework.util.Log . debug ( STRING + this . int + STRING + this . int + STRING ) ; } try { this . java.lang.Object . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; boolean = true ; } } if ( boolean ) { org.springframework.util.Log . debug ( STRING + this . int ) ; } this . int ++ ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . int >= NUMBER ) { synchronized ( this . java.lang.Object ) { this . int -- ; if ( org.springframework.util.Log . isDebugEnabled ( ) ) { org.springframework.util.Log . debug ( STRING + this . int ) ; } this . java.lang.Object . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; this . org.springframework.util.Log = LogFactory . getLog ( java.lang.Class<? extends org.springframework.util.ConcurrencyThrottleSupport> ( ) ) ; this . java.lang.Object = new java.lang.Object ( ) ; }  <METHOD_END>
