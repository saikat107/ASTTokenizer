<METHOD_START> public void ( ) { this( new RestTemplate ( ) ); }  <METHOD_END>
<METHOD_START> public void ( RestOperations org.springframework.web.socket.sockjs.client.RestOperations ) { Assert . notNull ( org.springframework.web.socket.sockjs.client.RestOperations , STRING ) ; this . org.springframework.web.socket.sockjs.client.RestOperations = org.springframework.web.socket.sockjs.client.RestOperations ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.RestOperations org.springframework.web.socket.sockjs.client.RestOperations ( ) { return this . org.springframework.web.socket.sockjs.client.RestOperations ; }  <METHOD_END>
<METHOD_START> public void void ( TaskExecutor org.springframework.web.socket.sockjs.client.TaskExecutor ) { Assert . notNull ( org.springframework.web.socket.sockjs.client.TaskExecutor , STRING ) ; this . org.springframework.web.socket.sockjs.client.TaskExecutor = org.springframework.web.socket.sockjs.client.TaskExecutor ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.TaskExecutor org.springframework.web.socket.sockjs.client.TaskExecutor ( ) { return this . org.springframework.web.socket.sockjs.client.TaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , final WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , final java.net.URI java.net.URI , final HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , final XhrClientSockJsSession org.springframework.web.socket.sockjs.client.XhrClientSockJsSession , final SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) { org.springframework.web.socket.sockjs.client.TaskExecutor ( ) . execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.TransportRequest . getHttpRequestHeaders ( ) ; org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback = new org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback ( org.springframework.web.socket.sockjs.client.HttpHeaders ) ; org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback = new org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback ( org.springframework.web.socket.sockjs.client.HttpHeaders ) ; org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrReceiveExtractor org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrReceiveExtractor = new org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrReceiveExtractor ( org.springframework.web.socket.sockjs.client.XhrClientSockJsSession ) ; while ( true ) { if ( org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . isDisconnected ( ) ) { org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . afterTransportClosed ( null ) ; break; } try { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.net.URI ) ; } org.springframework.web.socket.sockjs.client.RestOperations ( ) . execute ( java.net.URI , HttpMethod . POST , org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback , org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrReceiveExtractor ) ; org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback = org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( ! org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . isDone ( ) ) { org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . setException ( java.lang.Throwable ) ; } else { org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . handleTransportError ( java.lang.Throwable ) ; org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . afterTransportClosed ( new CloseStatus ( NUMBER , java.lang.Throwable . java.lang.String ( ) ) ) ; } break; } } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.TransportRequest . getHttpRequestHeaders ( ) ; org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback = new org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback ( org.springframework.web.socket.sockjs.client.HttpHeaders ) ; org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback = new org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback ( org.springframework.web.socket.sockjs.client.HttpHeaders ) ; org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrReceiveExtractor org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrReceiveExtractor = new org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrReceiveExtractor ( org.springframework.web.socket.sockjs.client.XhrClientSockJsSession ) ; while ( true ) { if ( org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . isDisconnected ( ) ) { org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . afterTransportClosed ( null ) ; break; } try { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.net.URI ) ; } org.springframework.web.socket.sockjs.client.RestOperations ( ) . execute ( java.net.URI , HttpMethod . POST , org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback , org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrReceiveExtractor ) ; org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback = org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( ! org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . isDone ( ) ) { org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . setException ( java.lang.Throwable ) ; } else { org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . handleTransportError ( java.lang.Throwable ) ; org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . afterTransportClosed ( new CloseStatus ( NUMBER , java.lang.Throwable . java.lang.String ( ) ) ) ; } break; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { RequestCallback org.springframework.web.socket.sockjs.client.RequestCallback = new org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback ( org.springframework.web.socket.sockjs.client.HttpHeaders ) ; return this . org.springframework.web.socket.sockjs.client.RestOperations . execute ( java.net.URI , HttpMethod . GET , org.springframework.web.socket.sockjs.client.RequestCallback , org.springframework.web.socket.sockjs.client.ResponseExtractor<org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) { RequestCallback org.springframework.web.socket.sockjs.client.RequestCallback = new org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport.XhrRequestCallback ( org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.TextMessage . getPayload ( ) ) ; return this . org.springframework.web.socket.sockjs.client.RestOperations . execute ( java.net.URI , HttpMethod . POST , org.springframework.web.socket.sockjs.client.RequestCallback , org.springframework.web.socket.sockjs.client.ResponseExtractor<org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( ClientHttpResponse org.springframework.web.socket.sockjs.client.ClientHttpResponse ) throws java.io.IOException { if ( org.springframework.web.socket.sockjs.client.ClientHttpResponse . getBody ( ) == null ) { return new ResponseEntity <> ( org.springframework.web.socket.sockjs.client.ClientHttpResponse . getHeaders ( ) , org.springframework.web.socket.sockjs.client.ClientHttpResponse . getStatusCode ( ) ) ; } else { java.lang.String java.lang.String = StreamUtils . copyToString ( org.springframework.web.socket.sockjs.client.ClientHttpResponse . getBody ( ) , SockJsFrame . CHARSET ) ; return new ResponseEntity <> ( java.lang.String , org.springframework.web.socket.sockjs.client.ClientHttpResponse . getHeaders ( ) , org.springframework.web.socket.sockjs.client.ClientHttpResponse . getStatusCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { this( org.springframework.web.socket.sockjs.client.HttpHeaders , null ); }  <METHOD_END>
<METHOD_START> public void ( HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , java.lang.String java.lang.String ) { this . org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.HttpHeaders ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ClientHttpRequest org.springframework.web.socket.sockjs.client.ClientHttpRequest ) throws java.io.IOException { if ( this . org.springframework.web.socket.sockjs.client.HttpHeaders != null ) { org.springframework.web.socket.sockjs.client.ClientHttpRequest . getHeaders ( ) . putAll ( this . org.springframework.web.socket.sockjs.client.HttpHeaders ) ; } if ( this . java.lang.String != null ) { StreamUtils . copy ( this . java.lang.String , SockJsFrame . CHARSET , org.springframework.web.socket.sockjs.client.ClientHttpRequest . getBody ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( XhrClientSockJsSession org.springframework.web.socket.sockjs.client.XhrClientSockJsSession ) { this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession = org.springframework.web.socket.sockjs.client.XhrClientSockJsSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ClientHttpResponse org.springframework.web.socket.sockjs.client.ClientHttpResponse ) throws java.io.IOException { if ( ! HttpStatus . OK . equals ( org.springframework.web.socket.sockjs.client.ClientHttpResponse . getStatusCode ( ) ) ) { throw new HttpServerErrorException ( org.springframework.web.socket.sockjs.client.ClientHttpResponse . getStatusCode ( ) ) ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.socket.sockjs.client.ClientHttpResponse . getHeaders ( ) ) ; } java.io.InputStream java.io.InputStream = org.springframework.web.socket.sockjs.client.ClientHttpResponse . getBody ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; while ( true ) { if ( this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . isDisconnected ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } org.springframework.web.socket.sockjs.client.ClientHttpResponse . close ( ) ; break; } int int = java.io.InputStream . int ( ) ; if ( int == - NUMBER ) { if ( java.io.ByteArrayOutputStream . int ( ) > NUMBER ) { void ( java.io.ByteArrayOutputStream ) ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING ) ; } break; } if ( int == '\n' ) { void ( java.io.ByteArrayOutputStream ) ; } else { java.io.ByteArrayOutputStream . void ( int ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) { byte [] byte[] = java.io.ByteArrayOutputStream . byte[] ( ) ; java.io.ByteArrayOutputStream . void ( ) ; java.lang.String java.lang.String = new java.lang.String ( byte[] , SockJsFrame . CHARSET ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String ) ; } if ( ! PRELUDE . equals ( java.lang.String ) ) { this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . handleFrame ( new java.lang.String ( byte[] , SockJsFrame . CHARSET ) ) ; } }  <METHOD_END>
