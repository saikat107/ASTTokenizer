<METHOD_START> public void void ( LoadTimeWeaver org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver ) { Assert . notNull ( org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver , STRING ) ; this . org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver = org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver ; this . java.lang.ClassLoader = org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver . getInstrumentableClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ClassTransformer org.springframework.orm.jpa.persistenceunit.ClassTransformer ) { if ( this . org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver . addTransformer ( new ClassFileTransformerAdapter ( org.springframework.orm.jpa.persistenceunit.ClassTransformer ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { java.lang.ClassLoader java.lang.ClassLoader = ( this . org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver != null ? this . org.springframework.orm.jpa.persistenceunit.LoadTimeWeaver . getThrowawayClassLoader ( ) : new SimpleThrowawayClassLoader ( this . java.lang.ClassLoader ) ) ; java.lang.String java.lang.String = getPersistenceProviderPackageName ( ) ; if ( java.lang.String != null && java.lang.ClassLoader instanceof DecoratingClassLoader ) { ( ( DecoratingClassLoader ) java.lang.ClassLoader ) . excludePackage ( java.lang.String ) ; } return java.lang.ClassLoader ; }  <METHOD_END>
