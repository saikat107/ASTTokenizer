<METHOD_START> public void ( Model org.springframework.statemachine.uml.support.Model , StateMachineComponentResolver < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) { Assert . notNull ( org.springframework.statemachine.uml.support.Model , STRING ) ; Assert . notNull ( org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> , STRING ) ; this . org.springframework.statemachine.uml.support.Model = org.springframework.statemachine.uml.support.Model ; this . org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.uml.support.UmlModelParser.DataHolder org.springframework.statemachine.uml.support.UmlModelParser.DataHolder ( ) { EList < PackageableElement > org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.PackageableElement> = org.springframework.statemachine.uml.support.Model . getPackagedElements ( ) ; StateMachine org.springframework.statemachine.uml.support.StateMachine = null ; java.util.Collection<org.springframework.statemachine.uml.support.StateMachine> < StateMachine > java.util.Collection<org.springframework.statemachine.uml.support.StateMachine> = EcoreUtil . getObjectsByType ( org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.PackageableElement> , UMLPackage . Literals . STATE_MACHINE ) ; for ( StateMachine org.springframework.statemachine.uml.support.StateMachine : java.util.Collection<org.springframework.statemachine.uml.support.StateMachine> ) { EList < State > org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.State> = org.springframework.statemachine.uml.support.StateMachine . getSubmachineStates ( ) ; if ( org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.State> . size ( ) == NUMBER ) { org.springframework.statemachine.uml.support.StateMachine = org.springframework.statemachine.uml.support.StateMachine ; } void ( org.springframework.statemachine.uml.support.StateMachine ) ; } if ( org.springframework.statemachine.uml.support.StateMachine == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.List<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > > java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>>> = new java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.List<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > > ( ) ; java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>>> . putAll ( java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>>> ) ; java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.List<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > > java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>>> = new java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>>> < java.lang.String , java.util.List<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > > ( ) ; java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>>> . putAll ( java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>>> ) ; return new org.springframework.statemachine.uml.support.UmlModelParser.DataHolder ( new StatesData <> ( java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> ) , new TransitionsData < java.lang.String , java.lang.String > ( java.util.Collection<org.springframework.statemachine.uml.support.TransitionData<java.lang.String,java.lang.String>> , java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>>> , java.util.HashMap<java.lang.String,java.util.List<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>>> , java.util.Map<java.lang.String,java.util.List<java.lang.String>> , java.util.Map<java.lang.String,java.util.List<java.lang.String>> , java.util.Collection<org.springframework.statemachine.uml.support.EntryData<java.lang.String,java.lang.String>> , java.util.Collection<org.springframework.statemachine.uml.support.ExitData<java.lang.String,java.lang.String>> , java.util.Collection<org.springframework.statemachine.uml.support.HistoryData<java.lang.String,java.lang.String>> ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( StateMachine org.springframework.statemachine.uml.support.StateMachine ) { for ( Region org.springframework.statemachine.uml.support.Region : org.springframework.statemachine.uml.support.StateMachine . getRegions ( ) ) { void ( org.springframework.statemachine.uml.support.Region ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Region org.springframework.statemachine.uml.support.Region ) { for ( Vertex org.springframework.statemachine.uml.support.Vertex : org.springframework.statemachine.uml.support.Region . getSubvertices ( ) ) { if ( org.springframework.statemachine.uml.support.Vertex instanceof State ) { State org.springframework.statemachine.uml.support.State = ( State ) org.springframework.statemachine.uml.support.Vertex ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; if ( org.springframework.statemachine.uml.support.State . getContainer ( ) . getOwner ( ) instanceof State ) { java.lang.String = ( ( State ) org.springframework.statemachine.uml.support.State . getContainer ( ) . getOwner ( ) ) . getName ( ) ; } if ( java.lang.String == null && org.springframework.statemachine.uml.support.Region . getOwner ( ) instanceof StateMachine ) { EList < State > org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.State> = ( ( StateMachine ) org.springframework.statemachine.uml.support.Region . getOwner ( ) ) . getSubmachineStates ( ) ; if ( org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.State> . size ( ) == NUMBER ) { java.lang.String = org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.State> . get ( NUMBER ) . getName ( ) ; } } if ( org.springframework.statemachine.uml.support.State . getOwner ( ) instanceof Region ) { java.lang.String = ( ( Region ) org.springframework.statemachine.uml.support.State . getOwner ( ) ) . getName ( ) ; } boolean boolean = UmlUtils . isInitialState ( org.springframework.statemachine.uml.support.State ) ; StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ( new StateData < java.lang.String , java.lang.String > ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.State . getName ( ) , boolean ) , org.springframework.statemachine.uml.support.State ) ; if ( boolean ) { org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setInitialAction ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ( org.springframework.statemachine.uml.support.State ) ) ; } org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setDeferred ( UmlUtils . resolveDererredEvents ( org.springframework.statemachine.uml.support.State ) ) ; if ( UmlUtils . isFinalState ( org.springframework.statemachine.uml.support.State ) ) { org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setEnd ( true ) ; } java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; for ( ConnectionPointReference org.springframework.statemachine.uml.support.ConnectionPointReference : org.springframework.statemachine.uml.support.State . getConnections ( ) ) { if ( org.springframework.statemachine.uml.support.ConnectionPointReference . getEntries ( ) != null ) { for ( Pseudostate org.springframework.statemachine.uml.support.Pseudostate : org.springframework.statemachine.uml.support.ConnectionPointReference . getEntries ( ) ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( PseudoStateKind . ENTRY ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } } if ( org.springframework.statemachine.uml.support.ConnectionPointReference . getExits ( ) != null ) { for ( Pseudostate org.springframework.statemachine.uml.support.Pseudostate : org.springframework.statemachine.uml.support.ConnectionPointReference . getExits ( ) ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( PseudoStateKind . EXIT ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } } } for ( Pseudostate org.springframework.statemachine.uml.support.Pseudostate : org.springframework.statemachine.uml.support.State . getConnectionPoints ( ) ) { PseudoStateKind org.springframework.statemachine.uml.support.PseudoStateKind = null ; if ( org.springframework.statemachine.uml.support.Pseudostate . getKind ( ) == PseudostateKind . ENTRY_POINT_LITERAL ) { org.springframework.statemachine.uml.support.PseudoStateKind = PseudoStateKind . ENTRY ; } else if ( org.springframework.statemachine.uml.support.Pseudostate . getKind ( ) == PseudostateKind . EXIT_POINT_LITERAL ) { org.springframework.statemachine.uml.support.PseudoStateKind = PseudoStateKind . EXIT ; } if ( org.springframework.statemachine.uml.support.PseudoStateKind != null ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( org.springframework.statemachine.uml.support.PseudoStateKind ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } } for ( Region org.springframework.statemachine.uml.support.Region : org.springframework.statemachine.uml.support.State . getRegions ( ) ) { void ( org.springframework.statemachine.uml.support.Region ) ; } } if ( org.springframework.statemachine.uml.support.Vertex instanceof Pseudostate ) { Pseudostate org.springframework.statemachine.uml.support.Pseudostate = ( Pseudostate ) org.springframework.statemachine.uml.support.Vertex ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; if ( org.springframework.statemachine.uml.support.Pseudostate . getContainer ( ) . getOwner ( ) instanceof State ) { java.lang.String = ( ( State ) org.springframework.statemachine.uml.support.Pseudostate . getContainer ( ) . getOwner ( ) ) . getName ( ) ; } if ( org.springframework.statemachine.uml.support.Pseudostate . getOwner ( ) instanceof Region ) { java.lang.String = ( ( Region ) org.springframework.statemachine.uml.support.Pseudostate . getOwner ( ) ) . getName ( ) ; } if ( org.springframework.statemachine.uml.support.Pseudostate . getKind ( ) == PseudostateKind . CHOICE_LITERAL ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( PseudoStateKind . CHOICE ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } else if ( org.springframework.statemachine.uml.support.Pseudostate . getKind ( ) == PseudostateKind . JUNCTION_LITERAL ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( PseudoStateKind . JUNCTION ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } else if ( org.springframework.statemachine.uml.support.Pseudostate . getKind ( ) == PseudostateKind . FORK_LITERAL ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( PseudoStateKind . FORK ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } else if ( org.springframework.statemachine.uml.support.Pseudostate . getKind ( ) == PseudostateKind . JOIN_LITERAL ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( PseudoStateKind . JOIN ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } else if ( org.springframework.statemachine.uml.support.Pseudostate . getKind ( ) == PseudostateKind . SHALLOW_HISTORY_LITERAL ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( PseudoStateKind . HISTORY_SHALLOW ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } else if ( org.springframework.statemachine.uml.support.Pseudostate . getKind ( ) == PseudostateKind . DEEP_HISTORY_LITERAL ) { StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> = new StateData <> ( java.lang.String , java.lang.String , org.springframework.statemachine.uml.support.Pseudostate . getName ( ) , false ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setPseudoStateKind ( PseudoStateKind . HISTORY_DEEP ) ; java.util.Collection<org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ) ; } } } for ( Transition org.springframework.statemachine.uml.support.Transition : org.springframework.statemachine.uml.support.Region . getTransitions ( ) ) { if ( org.springframework.statemachine.uml.support.Transition . getSource ( ) instanceof ConnectionPointReference ) { EList < Pseudostate > org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> = ( ( ConnectionPointReference ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getEntries ( ) ; if ( org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> != null && org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> . size ( ) == NUMBER && org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> . get ( NUMBER ) . getKind ( ) == PseudostateKind . ENTRY_POINT_LITERAL ) { java.util.Collection<org.springframework.statemachine.uml.support.EntryData<java.lang.String,java.lang.String>> . add ( new EntryData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> . get ( NUMBER ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ) ; } EList < Pseudostate > org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> = ( ( ConnectionPointReference ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getExits ( ) ; if ( org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> != null && org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> . size ( ) == NUMBER && org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> . get ( NUMBER ) . getKind ( ) == PseudostateKind . EXIT_POINT_LITERAL ) { java.util.Collection<org.springframework.statemachine.uml.support.ExitData<java.lang.String,java.lang.String>> . add ( new ExitData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> . get ( NUMBER ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ) ; } } if ( org.springframework.statemachine.uml.support.Transition . getSource ( ) instanceof Pseudostate ) { if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . ENTRY_POINT_LITERAL ) { java.util.Collection<org.springframework.statemachine.uml.support.EntryData<java.lang.String,java.lang.String>> . add ( new EntryData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ) ; } else if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . EXIT_POINT_LITERAL ) { java.util.Collection<org.springframework.statemachine.uml.support.ExitData<java.lang.String,java.lang.String>> . add ( new ExitData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ) ; } else if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . CHOICE_LITERAL ) { java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>>> . get ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) ) ; if ( java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> == null ) { java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> = new java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> < ChoiceData < java.lang.String , java.lang.String > > ( ) ; java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>>> . put ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> ) ; } Guard < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ( org.springframework.statemachine.uml.support.Transition ) ; if ( org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> == null ) { java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> . addLast ( new ChoiceData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) , org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ) ) ; } else { java.util.LinkedList<org.springframework.statemachine.uml.support.ChoiceData<java.lang.String,java.lang.String>> . addFirst ( new ChoiceData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) , org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ) ) ; } } else if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . JUNCTION_LITERAL ) { java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>>> . get ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) ) ; if ( java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> == null ) { java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> = new java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> < JunctionData < java.lang.String , java.lang.String > > ( ) ; java.util.Map<java.lang.String,java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>>> . put ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> ) ; } Guard < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ( org.springframework.statemachine.uml.support.Transition ) ; if ( org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> == null ) { java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> . addLast ( new JunctionData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) , org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ) ) ; } else { java.util.LinkedList<org.springframework.statemachine.uml.support.JunctionData<java.lang.String,java.lang.String>> . addFirst ( new JunctionData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) , org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ) ) ; } } else if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . FORK_LITERAL ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) ) ; if ( java.util.List<java.lang.String> == null ) { java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , java.util.List<java.lang.String> ) ; } java.util.List<java.lang.String> . boolean ( org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ; } else if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . SHALLOW_HISTORY_LITERAL ) { java.util.Collection<org.springframework.statemachine.uml.support.HistoryData<java.lang.String,java.lang.String>> . add ( new HistoryData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ) ; } else if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . DEEP_HISTORY_LITERAL ) { java.util.Collection<org.springframework.statemachine.uml.support.HistoryData<java.lang.String,java.lang.String>> . add ( new HistoryData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ) ; } } if ( org.springframework.statemachine.uml.support.Transition . getTarget ( ) instanceof Pseudostate ) { if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getTarget ( ) ) . getKind ( ) == PseudostateKind . JOIN_LITERAL ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ; if ( java.util.List<java.lang.String> == null ) { java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) , java.util.List<java.lang.String> ) ; } java.util.List<java.lang.String> . boolean ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) ) ; } } for ( Trigger org.springframework.statemachine.uml.support.Trigger : org.springframework.statemachine.uml.support.Transition . getTriggers ( ) ) { Guard < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ( org.springframework.statemachine.uml.support.Transition ) ; Event org.springframework.statemachine.uml.support.Event = org.springframework.statemachine.uml.support.Trigger . getEvent ( ) ; if ( org.springframework.statemachine.uml.support.Event instanceof SignalEvent ) { Signal org.springframework.statemachine.uml.support.Signal = ( ( SignalEvent ) org.springframework.statemachine.uml.support.Event ) . getSignal ( ) ; if ( org.springframework.statemachine.uml.support.Signal != null ) { if ( org.springframework.statemachine.uml.support.Transition . getTarget ( ) instanceof ConnectionPointReference ) { EList < Pseudostate > org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> = ( ( ConnectionPointReference ) org.springframework.statemachine.uml.support.Transition . getTarget ( ) ) . getEntries ( ) ; if ( org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> != null && org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> . size ( ) == NUMBER ) { java.util.Collection<org.springframework.statemachine.uml.support.TransitionData<java.lang.String,java.lang.String>> . add ( new TransitionData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.EList<org.springframework.statemachine.uml.support.Pseudostate> . get ( NUMBER ) . getName ( ) , org.springframework.statemachine.uml.support.Signal . getName ( ) , UmlUtils . resolveTransitionActions ( org.springframework.statemachine.uml.support.Transition , org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) , org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> , UmlUtils . mapUmlTransitionType ( org.springframework.statemachine.uml.support.Transition ) ) ) ; } } else { java.util.Collection<org.springframework.statemachine.uml.support.TransitionData<java.lang.String,java.lang.String>> . add ( new TransitionData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) , org.springframework.statemachine.uml.support.Signal . getName ( ) , UmlUtils . resolveTransitionActions ( org.springframework.statemachine.uml.support.Transition , org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) , org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> , UmlUtils . mapUmlTransitionType ( org.springframework.statemachine.uml.support.Transition ) ) ) ; } } } else if ( org.springframework.statemachine.uml.support.Event instanceof TimeEvent ) { TimeEvent org.springframework.statemachine.uml.support.TimeEvent = ( TimeEvent ) org.springframework.statemachine.uml.support.Event ; java.lang.Long java.lang.Long = java.lang.Long ( org.springframework.statemachine.uml.support.TimeEvent ) ; if ( java.lang.Long != null ) { java.lang.Integer java.lang.Integer = null ; if ( org.springframework.statemachine.uml.support.TimeEvent . isRelative ( ) ) { java.lang.Integer = NUMBER ; } java.util.Collection<org.springframework.statemachine.uml.support.TransitionData<java.lang.String,java.lang.String>> . add ( new TransitionData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) , java.lang.Long , java.lang.Integer , UmlUtils . resolveTransitionActions ( org.springframework.statemachine.uml.support.Transition , org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) , org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> , UmlUtils . mapUmlTransitionType ( org.springframework.statemachine.uml.support.Transition ) ) ) ; } } } if ( boolean ( org.springframework.statemachine.uml.support.Transition ) ) { java.util.Collection<org.springframework.statemachine.uml.support.TransitionData<java.lang.String,java.lang.String>> . add ( new TransitionData < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) , org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) , null , UmlUtils . resolveTransitionActions ( org.springframework.statemachine.uml.support.Transition , org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) , org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ( org.springframework.statemachine.uml.support.Transition ) , UmlUtils . mapUmlTransitionType ( org.springframework.statemachine.uml.support.Transition ) ) ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ( Transition org.springframework.statemachine.uml.support.Transition ) { Guard < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> = null ; for ( Constraint org.springframework.statemachine.uml.support.Constraint : org.springframework.statemachine.uml.support.Transition . getOwnedRules ( ) ) { if ( org.springframework.statemachine.uml.support.Constraint . getSpecification ( ) instanceof OpaqueExpression ) { java.lang.String java.lang.String = UmlUtils . resolveBodyByLanguage ( java.lang.String , ( OpaqueExpression ) org.springframework.statemachine.uml.support.Constraint . getSpecification ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> . resolveGuard ( java.lang.String ) ; } else { java.lang.String java.lang.String = UmlUtils . resolveBodyByLanguage ( java.lang.String , ( OpaqueExpression ) org.springframework.statemachine.uml.support.Constraint . getSpecification ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { SpelExpressionParser org.springframework.statemachine.uml.support.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> = new SpelExpressionGuard < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.SpelExpressionParser . parseExpression ( java.lang.String ) ) ; } } } } return org.springframework.statemachine.uml.support.Guard<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.lang.Long java.lang.Long ( TimeEvent org.springframework.statemachine.uml.support.TimeEvent ) { try { return java.lang.Long . java.lang.Long ( org.springframework.statemachine.uml.support.TimeEvent . getWhen ( ) . getExpr ( ) . integerValue ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ( State org.springframework.statemachine.uml.support.State ) { Transition org.springframework.statemachine.uml.support.Transition = UmlUtils . resolveInitialTransition ( org.springframework.statemachine.uml.support.State ) ; if ( org.springframework.statemachine.uml.support.Transition != null ) { return UmlUtils . resolveTransitionAction ( org.springframework.statemachine.uml.support.Transition , org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Transition org.springframework.statemachine.uml.support.Transition ) { if ( org.springframework.statemachine.uml.support.Transition . getSource ( ) == null || org.springframework.statemachine.uml.support.Transition . getTarget ( ) == null ) { return false ; } if ( ! org.springframework.statemachine.uml.support.Transition . getTriggers ( ) . isEmpty ( ) ) { return false ; } if ( ! StringUtils . hasText ( org.springframework.statemachine.uml.support.Transition . getSource ( ) . getName ( ) ) ) { return false ; } if ( ! StringUtils . hasText ( org.springframework.statemachine.uml.support.Transition . getTarget ( ) . getName ( ) ) ) { return false ; } if ( org.springframework.statemachine.uml.support.Transition . getSource ( ) instanceof Pseudostate ) { if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . FORK_LITERAL ) { return false ; } } if ( org.springframework.statemachine.uml.support.Transition . getTarget ( ) instanceof Pseudostate ) { if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getTarget ( ) ) . getKind ( ) == PseudostateKind . JOIN_LITERAL ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ( StateData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> , State org.springframework.statemachine.uml.support.State ) { if ( org.springframework.statemachine.uml.support.State . getEntry ( ) instanceof OpaqueBehavior ) { java.lang.String java.lang.String = UmlUtils . resolveBodyByLanguage ( java.lang.String , ( OpaqueBehavior ) org.springframework.statemachine.uml.support.State . getEntry ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> . resolveAction ( java.lang.String ) ; if ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> != null ) { java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setEntryActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } else { java.lang.String java.lang.String = UmlUtils . resolveBodyByLanguage ( java.lang.String , ( OpaqueBehavior ) org.springframework.statemachine.uml.support.State . getEntry ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { SpelExpressionParser org.springframework.statemachine.uml.support.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( new SpelExpressionAction < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.SpelExpressionParser . parseExpression ( java.lang.String ) ) ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setEntryActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } } if ( org.springframework.statemachine.uml.support.State . getExit ( ) instanceof OpaqueBehavior ) { java.lang.String java.lang.String = UmlUtils . resolveBodyByLanguage ( java.lang.String , ( OpaqueBehavior ) org.springframework.statemachine.uml.support.State . getExit ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> . resolveAction ( java.lang.String ) ; if ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> != null ) { java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setExitActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } else { java.lang.String java.lang.String = UmlUtils . resolveBodyByLanguage ( java.lang.String , ( OpaqueBehavior ) org.springframework.statemachine.uml.support.State . getExit ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { SpelExpressionParser org.springframework.statemachine.uml.support.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( new SpelExpressionAction < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.SpelExpressionParser . parseExpression ( java.lang.String ) ) ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setExitActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } } if ( org.springframework.statemachine.uml.support.State . getDoActivity ( ) instanceof OpaqueBehavior ) { java.lang.String java.lang.String = UmlUtils . resolveBodyByLanguage ( java.lang.String , ( OpaqueBehavior ) org.springframework.statemachine.uml.support.State . getDoActivity ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> . resolveAction ( java.lang.String ) ; if ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> != null ) { java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setStateActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } else { java.lang.String java.lang.String = UmlUtils . resolveBodyByLanguage ( java.lang.String , ( OpaqueBehavior ) org.springframework.statemachine.uml.support.State . getDoActivity ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { SpelExpressionParser org.springframework.statemachine.uml.support.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( SpelCompilerMode . MIXED , null ) ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( new SpelExpressionAction < java.lang.String , java.lang.String > ( org.springframework.statemachine.uml.support.SpelExpressionParser . parseExpression ( java.lang.String ) ) ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setExitActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } } if ( org.springframework.statemachine.uml.support.State . getEntry ( ) instanceof Activity ) { java.lang.String java.lang.String = ( ( Activity ) org.springframework.statemachine.uml.support.State . getEntry ( ) ) . getName ( ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> . resolveAction ( java.lang.String ) ; if ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> != null ) { java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setEntryActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } if ( org.springframework.statemachine.uml.support.State . getExit ( ) instanceof Activity ) { java.lang.String java.lang.String = ( ( Activity ) org.springframework.statemachine.uml.support.State . getExit ( ) ) . getName ( ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> . resolveAction ( java.lang.String ) ; if ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> != null ) { java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setExitActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } if ( org.springframework.statemachine.uml.support.State . getDoActivity ( ) instanceof Activity ) { java.lang.String java.lang.String = ( ( Activity ) org.springframework.statemachine.uml.support.State . getDoActivity ( ) ) . getName ( ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> . resolveAction ( java.lang.String ) ; if ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> != null ) { java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ) ; org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> . setStateActions ( java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ) ; } } return org.springframework.statemachine.uml.support.StateData<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( StatesData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StatesData<java.lang.String,java.lang.String> , TransitionsData < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.TransitionsData<java.lang.String,java.lang.String> ) { this . org.springframework.statemachine.uml.support.StatesData<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StatesData<java.lang.String,java.lang.String> ; this . org.springframework.statemachine.uml.support.TransitionsData<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.TransitionsData<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.uml.support.StatesData<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StatesData<java.lang.String,java.lang.String> ( ) { return org.springframework.statemachine.uml.support.StatesData<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.uml.support.TransitionsData<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.TransitionsData<java.lang.String,java.lang.String> ( ) { return org.springframework.statemachine.uml.support.TransitionsData<java.lang.String,java.lang.String> ; }  <METHOD_END>
