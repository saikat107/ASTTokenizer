<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.channel.PriorityChannelSpec org.springframework.integration.dsl.channel.PriorityChannelSpec ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.channel.PriorityChannelSpec org.springframework.integration.dsl.channel.PriorityChannelSpec ( java.util.Comparator<org.springframework.integration.dsl.channel.Message<?>> < Message < ? > > java.util.Comparator<org.springframework.integration.dsl.channel.Message<?>> ) { this . java.util.Comparator<org.springframework.integration.dsl.channel.Message<?>> = java.util.Comparator<org.springframework.integration.dsl.channel.Message<?>> ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.channel.PriorityChannelSpec org.springframework.integration.dsl.channel.PriorityChannelSpec ( PriorityCapableChannelMessageStore org.springframework.integration.dsl.channel.PriorityCapableChannelMessageStore , java.lang.Object java.lang.Object ) { this . org.springframework.integration.dsl.channel.MessageGroupQueue = new MessageGroupQueue ( org.springframework.integration.dsl.channel.PriorityCapableChannelMessageStore , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.dsl.channel.PriorityChannel org.springframework.integration.dsl.channel.PriorityChannel ( ) { Assert . state ( this . java.util.Comparator<org.springframework.integration.dsl.channel.Message<?>> != null && this . org.springframework.integration.dsl.channel.MessageGroupQueue != null , STRING ) ; if ( this . org.springframework.integration.dsl.channel.MessageGroupQueue != null ) { this . channel = new PriorityChannel ( this . org.springframework.integration.dsl.channel.MessageGroupQueue ) ; } else { this . channel = new PriorityChannel ( this . int , this . java.util.Comparator<org.springframework.integration.dsl.channel.Message<?>> ) ; } return super. doGet ( ) ; }  <METHOD_END>
