<METHOD_START> public void ( HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod ) { super( org.springframework.messaging.handler.invocation.HandlerMethod ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { super( java.lang.Object , java.lang.reflect.Method ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws java.lang.NoSuchMethodException { super( java.lang.Object , java.lang.String , java.lang.Class<?>[] ); }  <METHOD_END>
<METHOD_START> public void void ( HandlerMethodArgumentResolverComposite org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite ) { this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite = org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite ; }  <METHOD_END>
<METHOD_START> public void void ( ParameterNameDiscoverer org.springframework.messaging.handler.invocation.ParameterNameDiscoverer ) { this . org.springframework.messaging.handler.invocation.ParameterNameDiscoverer = org.springframework.messaging.handler.invocation.ParameterNameDiscoverer ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( Message < ? > org.springframework.messaging.handler.invocation.Message<?> , java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( org.springframework.messaging.handler.invocation.Message<> , java.lang.Object[] ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + ClassUtils . getQualifiedMethodName ( getMethod ( ) , getBeanType ( ) ) + STRING + java.util.Arrays . java.lang.String ( java.lang.Object[] ) ) ; } java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object[] ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + ClassUtils . getQualifiedMethodName ( getMethod ( ) , getBeanType ( ) ) + STRING + java.lang.Object + STRING ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( Message < ? > org.springframework.messaging.handler.invocation.Message<?> , java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { MethodParameter [] org.springframework.messaging.handler.invocation.MethodParameter[] = getMethodParameters ( ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ parameters . length ] ; for ( int int = NUMBER ; int < parameters . length ; int ++ ) { MethodParameter org.springframework.messaging.handler.invocation.MethodParameter = org.springframework.messaging.handler.invocation.MethodParameter[] [ int ] ; org.springframework.messaging.handler.invocation.MethodParameter . initParameterNameDiscovery ( this . org.springframework.messaging.handler.invocation.ParameterNameDiscoverer ) ; java.lang.Object[] [ int ] = java.lang.Object ( org.springframework.messaging.handler.invocation.MethodParameter , java.lang.Object[] ) ; if ( java.lang.Object[] [ int ] != null ) { continue; } if ( this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite . supportsParameter ( org.springframework.messaging.handler.invocation.MethodParameter ) ) { try { java.lang.Object[] [ int ] = this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite . resolveArgument ( org.springframework.messaging.handler.invocation.MethodParameter , org.springframework.messaging.handler.invocation.Message<> ) ; continue; } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( java.lang.String ( STRING , int ) , java.lang.Exception ) ; } throw java.lang.Exception ; } } if ( java.lang.Object[] [ int ] == null ) { throw new MethodArgumentResolutionException ( org.springframework.messaging.handler.invocation.Message<> , org.springframework.messaging.handler.invocation.MethodParameter , java.lang.String ( STRING , int ) ) ; } } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , int int ) { java.lang.Class<?> < ? > java.lang.Class<?> = getMethodParameters ( ) [ int ] . getParameterType ( ) ; return java.lang.String + STRING + int + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodParameter org.springframework.messaging.handler.invocation.MethodParameter , java.lang.Object ... java.lang.Object[] ) { if ( java.lang.Object[] == null ) { return null ; } for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( org.springframework.messaging.handler.invocation.MethodParameter . getParameterType ( ) . isInstance ( java.lang.Object ) ) { return java.lang.Object ; } } return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { ReflectionUtils . makeAccessible ( getBridgedMethod ( ) ) ; try { return getBridgedMethod ( ) . invoke ( getBean ( ) , java.lang.Object[] ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { void ( getBridgedMethod ( ) , getBean ( ) , java.lang.Object[] ) ; java.lang.String java.lang.String = ( java.lang.IllegalArgumentException . java.lang.String ( ) != null ? java.lang.IllegalArgumentException . java.lang.String ( ) : STRING ) ; throw new java.lang.IllegalStateException ( java.lang.String ( java.lang.String , java.lang.Object[] ) , java.lang.IllegalArgumentException ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Throwable ; } else if ( java.lang.Throwable instanceof java.lang.Error ) { throw ( java.lang.Error ) java.lang.Throwable ; } else if ( java.lang.Throwable instanceof java.lang.Exception ) { throw ( java.lang.Exception ) java.lang.Throwable ; } else { java.lang.String java.lang.String = java.lang.String ( STRING , java.lang.Object[] ) ; throw new java.lang.IllegalStateException ( java.lang.String , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object , java.lang.Object [] java.lang.Object[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( ! java.lang.Class<> . boolean ( java.lang.Class<> ) ) { java.lang.String java.lang.String = STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING + STRING ; throw new java.lang.IllegalStateException ( java.lang.String ( java.lang.String , java.lang.Object[] ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ( java.lang.String ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( int ) . java.lang.StringBuilder ( STRING ) ; if ( java.lang.Object[] [ int ] == null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.Object[] [ int ] . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.Object[] [ int ] ) . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( getBeanType ( ) . getName ( ) ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( getBridgedMethod ( ) . toGenericString ( ) ) . append ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.messaging.handler.invocation.MethodParameter org.springframework.messaging.handler.invocation.MethodParameter ( java.lang.Object java.lang.Object ) { return new org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( - NUMBER ); this . java.lang.Object = java.lang.Object ; this . org.springframework.messaging.handler.invocation.ResolvableType = ResolvableType . forType ( super. getGenericParameterType ( ) ) . getGeneric ( ) ; }  <METHOD_END>
<METHOD_START> protected void ( org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter ) { super( org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter ); this . java.lang.Object = org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter . java.lang.Object ; this . org.springframework.messaging.handler.invocation.ResolvableType = org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter . org.springframework.messaging.handler.invocation.ResolvableType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.Object != null ) { return this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } if ( ! ResolvableType . NONE . equals ( this . org.springframework.messaging.handler.invocation.ResolvableType ) ) { return this . org.springframework.messaging.handler.invocation.ResolvableType . resolve ( ) ; } return super. getParameterType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( ) { return this . org.springframework.messaging.handler.invocation.ResolvableType . getType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter ( ) { return new org.springframework.messaging.handler.invocation.InvocableHandlerMethod.AsyncResultMethodParameter ( this ) ; }  <METHOD_END>
