<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.web.servlet.server.WebServer != null ) { try { this . org.springframework.boot.web.servlet.server.WebServer . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; int int = this . org.springframework.boot.web.servlet.server.WebServer . getPort ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( this . org.springframework.boot.web.servlet.server.WebServer . getPort ( ) ) . isEqualTo ( int ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.server.InternalOutputCapture . toString ( ) ) . containsOnlyOnce ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . stop ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setPort ( - NUMBER ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( this . org.springframework.boot.web.servlet.server.WebServer . getPort ( ) ) . isLessThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; int int = this . org.springframework.boot.web.servlet.server.WebServer . getPort ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . stop ( ) ; this . org.springframework.boot.web.servlet.server.ExpectedException . expect ( java.io.IOException .class ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ( int , STRING ) ) ; throw new java.lang.RuntimeException ( STRING + int + STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; HttpComponentsAsyncClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsAsyncClientHttpRequestFactory = new HttpComponentsAsyncClientHttpRequestFactory ( ) ; ListenableFuture < ClientHttpResponse > org.springframework.boot.web.servlet.server.ListenableFuture<org.springframework.boot.web.servlet.server.ClientHttpResponse> = org.springframework.boot.web.servlet.server.HttpComponentsAsyncClientHttpRequestFactory . createAsyncRequest ( new java.net.URI ( java.lang.String ( STRING ) ) , HttpMethod . GET ) . executeAsync ( ) ; assertThat ( org.springframework.boot.web.servlet.server.ListenableFuture<org.springframework.boot.web.servlet.server.ClientHttpResponse> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . getRawStatusCode ( ) ) . isEqualTo ( NUMBER ) ; this . org.springframework.boot.web.servlet.server.WebServer . stop ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; ListenableFuture < ClientHttpResponse > org.springframework.boot.web.servlet.server.ListenableFuture<org.springframework.boot.web.servlet.server.ClientHttpResponse> = org.springframework.boot.web.servlet.server.HttpComponentsAsyncClientHttpRequestFactory . createAsyncRequest ( new java.net.URI ( java.lang.String ( STRING ) ) , HttpMethod . GET ) . executeAsync ( ) ; assertThat ( org.springframework.boot.web.servlet.server.ListenableFuture<org.springframework.boot.web.servlet.server.ClientHttpResponse> . get ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . getRawStatusCode ( ) ) . isEqualTo ( NUMBER ) ; org.springframework.boot.web.servlet.server.HttpComponentsAsyncClientHttpRequestFactory . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) , new FilterRegistrationBean <> ( new ExampleFilter ( ) ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; final java.util.Date [] java.util.Date[] = new java.util.Date [ NUMBER ] ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletContextInitializer ( ) { @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.server.ServletContext ) throws org.springframework.boot.web.servlet.server.ServletException { try { java.lang.Thread . void ( NUMBER ) ; java.util.Date[] [ NUMBER ] = new java.util.Date ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new ServletException ( java.lang.InterruptedException ) ; } } } ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.util.Date[] [ NUMBER ] ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.server.ServletContext ) throws org.springframework.boot.web.servlet.server.ServletException { try { java.lang.Thread . void ( NUMBER ) ; java.util.Date[] [ NUMBER ] = new java.util.Date ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new ServletException ( java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; final org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.InitCountingServlet org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.InitCountingServlet = new org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.InitCountingServlet ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletContextInitializer ( ) { @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.server.ServletContext ) throws org.springframework.boot.web.servlet.server.ServletException { org.springframework.boot.web.servlet.server.ServletContext . addServlet ( STRING , org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.InitCountingServlet ) . setLoadOnStartup ( NUMBER ) ; } } ) ; assertThat ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.InitCountingServlet . int ( ) ) . isEqualTo ( NUMBER ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.InitCountingServlet . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.server.ServletContext ) throws org.springframework.boot.web.servlet.server.ServletException { org.springframework.boot.web.servlet.server.ServletContext . addServlet ( STRING , org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.InitCountingServlet ) . setLoadOnStartup ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; int int = SocketUtils . findAvailableTcpPort ( NUMBER ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setPort ( int ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.lang.String ( STRING + int + STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.servlet.server.WebServer . getPort ( ) ) . isEqualTo ( int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setContextPath ( STRING ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.web.servlet.server.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) . setContextPath ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.web.servlet.server.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) . setContextPath ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.web.servlet.server.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) . setContextPath ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; ServletContextInitializer [] org.springframework.boot.web.servlet.server.ServletContextInitializer[] = new ServletContextInitializer [ NUMBER ] ; for ( int int = NUMBER ; int < initializers . length ; int ++ ) { org.springframework.boot.web.servlet.server.ServletContextInitializer[] [ int ] = mock ( ServletContextInitializer .class ) ; } org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setInitializers ( java.util.Arrays . java.util.List ( org.springframework.boot.web.servlet.server.ServletContextInitializer[] [ NUMBER ] , org.springframework.boot.web.servlet.server.ServletContextInitializer[] [ NUMBER ] ) ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . addInitializers ( org.springframework.boot.web.servlet.server.ServletContextInitializer[] [ NUMBER ] , org.springframework.boot.web.servlet.server.ServletContextInitializer[] [ NUMBER ] ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer[] [ NUMBER ] , org.springframework.boot.web.servlet.server.ServletContextInitializer[] [ NUMBER ] ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; InOrder org.springframework.boot.web.servlet.server.InOrder = inOrder ( ( java.lang.Object [] ) org.springframework.boot.web.servlet.server.ServletContextInitializer[] ) ; for ( ServletContextInitializer org.springframework.boot.web.servlet.server.ServletContextInitializer : org.springframework.boot.web.servlet.server.ServletContextInitializer[] ) { org.springframework.boot.web.servlet.server.InOrder . verify ( org.springframework.boot.web.servlet.server.ServletContextInitializer ) . onStartup ( ( ServletContext ) any ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FileCopyUtils . copy ( STRING , new java.io.FileWriter ( this . org.springframework.boot.web.servlet.server.TemporaryFolder . newFile ( STRING ) ) ) ; AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setDocumentRoot ( this . org.springframework.boot.web.servlet.server.TemporaryFolder . getRoot ( ) ) ; MimeMappings org.springframework.boot.web.servlet.server.MimeMappings = new MimeMappings ( ) ; org.springframework.boot.web.servlet.server.MimeMappings . add ( STRING , STRING ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setMimeMappings ( org.springframework.boot.web.servlet.server.MimeMappings ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.web.servlet.server.ClientHttpResponse . getHeaders ( ) . getContentType ( ) . toString ( ) ) . isEqualTo ( STRING ) ; org.springframework.boot.web.servlet.server.ClientHttpResponse . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . addErrorPages ( new ErrorPage ( HttpStatus . INTERNAL_SERVER_ERROR , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) , org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . addErrorPages ( new ErrorPage ( HttpStatus . INTERNAL_SERVER_ERROR , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) , org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) , HttpMethod . PUT ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) , HttpMethod . PUT ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; Ssl org.springframework.boot.web.servlet.server.Ssl = org.springframework.boot.web.servlet.server.Ssl ( null , STRING , STRING ) ; org.springframework.boot.web.servlet.server.Ssl . setEnabled ( false ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( true , false ) , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; this . org.springframework.boot.web.servlet.server.ExpectedException . expect ( javax.net.ssl.SSLException .class ) ; java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( null , STRING , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( true , false ) , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; assertThat ( java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; Ssl org.springframework.boot.web.servlet.server.Ssl = org.springframework.boot.web.servlet.server.Ssl ( null , STRING , STRING , STRING ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ) ; ServletRegistrationBean < ExampleServlet > org.springframework.boot.web.servlet.server.ServletRegistrationBean<org.springframework.boot.web.servlet.server.ExampleServlet> = new ServletRegistrationBean <> ( new ExampleServlet ( true , false ) , STRING ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletRegistrationBean<org.springframework.boot.web.servlet.server.ExampleServlet> ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; TrustStrategy org.springframework.boot.web.servlet.server.TrustStrategy = new org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.SerialNumberValidatingTrustSelfSignedStrategy ( STRING ) ; javax.net.ssl.SSLContext javax.net.ssl.SSLContext = new SSLContextBuilder ( ) . loadTrustMaterial ( null , org.springframework.boot.web.servlet.server.TrustStrategy ) . build ( ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( new SSLConnectionSocketFactory ( javax.net.ssl.SSLContext ) ) . build ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ( STRING , STRING ) , new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( null , STRING , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( true , false ) , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String ( STRING , STRING ) , HttpMethod . GET , new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ) ; assertThat ( org.springframework.boot.web.servlet.server.ClientHttpResponse . getHeaders ( ) . get ( STRING ) ) . isNullOrEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setServerHeader ( STRING ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( null , STRING , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( true , false ) , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String ( STRING , STRING ) , HttpMethod . GET , new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ) ; assertThat ( org.springframework.boot.web.servlet.server.ClientHttpResponse . getHeaders ( ) . get ( STRING ) ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.String java.lang.String ) throws java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( null , STRING , java.lang.String ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; assertThat ( java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( ClientAuth . NEED , null , STRING , STRING , null , null ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; java.security.KeyStore java.security.KeyStore = java.security.KeyStore . java.security.KeyStore ( STRING ) ; java.security.KeyStore . void ( new java.io.FileInputStream ( new java.io.File ( STRING ) ) , STRING . char[] ( ) ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . loadKeyMaterial ( java.security.KeyStore , STRING . char[] ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; assertThat ( java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( ClientAuth . NEED , STRING , STRING , STRING , null , null ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; java.security.KeyStore java.security.KeyStore = java.security.KeyStore . java.security.KeyStore ( java.security.KeyStore . java.lang.String ( ) ) ; java.security.KeyStore . void ( new java.io.FileInputStream ( new java.io.File ( STRING ) ) , STRING . char[] ( ) ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . loadKeyMaterial ( java.security.KeyStore , STRING . char[] ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; assertThat ( java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.io.IOException .class ) public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( ClientAuth . NEED , STRING , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( ClientAuth . WANT , STRING , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; java.security.KeyStore java.security.KeyStore = java.security.KeyStore . java.security.KeyStore ( java.security.KeyStore . java.lang.String ( ) ) ; java.security.KeyStore . void ( new java.io.FileInputStream ( new java.io.File ( STRING ) ) , STRING . char[] ( ) ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . loadKeyMaterial ( java.security.KeyStore , STRING . char[] ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; assertThat ( java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( ClientAuth . WANT , STRING , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; assertThat ( java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; Ssl org.springframework.boot.web.servlet.server.Ssl = new Ssl ( ) ; org.springframework.boot.web.servlet.server.Ssl . setClientAuth ( ClientAuth . NEED ) ; org.springframework.boot.web.servlet.server.Ssl . setKeyPassword ( STRING ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ) ; SslStoreProvider org.springframework.boot.web.servlet.server.SslStoreProvider = mock ( SslStoreProvider .class ) ; given ( org.springframework.boot.web.servlet.server.SslStoreProvider . getKeyStore ( ) ) . willReturn ( java.security.KeyStore ( ) ) ; given ( org.springframework.boot.web.servlet.server.SslStoreProvider . getTrustStore ( ) ) . willReturn ( java.security.KeyStore ( ) ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSslStoreProvider ( org.springframework.boot.web.servlet.server.SslStoreProvider ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; java.security.KeyStore java.security.KeyStore = java.security.KeyStore . java.security.KeyStore ( java.security.KeyStore . java.lang.String ( ) ) ; java.security.KeyStore . void ( new java.io.FileInputStream ( new java.io.File ( STRING ) ) , STRING . char[] ( ) ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . loadKeyMaterial ( java.security.KeyStore , STRING . char[] ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; assertThat ( java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.boot.web.servlet.server.SslStoreProvider ) . getKeyStore ( ) ; verify ( org.springframework.boot.web.servlet.server.SslStoreProvider ) . getTrustStore ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getJsp ( ) . setRegistered ( false ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; assertThat ( org.apache.jasper.servlet.JspServlet ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.web.servlet.server.ClientHttpResponse . getStatusCode ( ) ) . isEqualTo ( HttpStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.server.Ssl org.springframework.boot.web.servlet.server.Ssl ( ClientAuth org.springframework.boot.web.servlet.server.ClientAuth , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.boot.web.servlet.server.Ssl ( org.springframework.boot.web.servlet.server.ClientAuth , java.lang.String , java.lang.String , null , null , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.servlet.server.Ssl org.springframework.boot.web.servlet.server.Ssl ( ClientAuth org.springframework.boot.web.servlet.server.ClientAuth , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.boot.web.servlet.server.Ssl ( org.springframework.boot.web.servlet.server.ClientAuth , java.lang.String , java.lang.String , java.lang.String , null , null , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.servlet.server.Ssl org.springframework.boot.web.servlet.server.Ssl ( ClientAuth org.springframework.boot.web.servlet.server.ClientAuth , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { return org.springframework.boot.web.servlet.server.Ssl ( org.springframework.boot.web.servlet.server.ClientAuth , java.lang.String , null , java.lang.String , java.lang.String , java.lang.String[] , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.web.servlet.server.Ssl org.springframework.boot.web.servlet.server.Ssl ( ClientAuth org.springframework.boot.web.servlet.server.ClientAuth , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { Ssl org.springframework.boot.web.servlet.server.Ssl = new Ssl ( ) ; org.springframework.boot.web.servlet.server.Ssl . setClientAuth ( org.springframework.boot.web.servlet.server.ClientAuth ) ; if ( java.lang.String != null ) { org.springframework.boot.web.servlet.server.Ssl . setKeyPassword ( java.lang.String ) ; } if ( java.lang.String != null ) { org.springframework.boot.web.servlet.server.Ssl . setKeyAlias ( java.lang.String ) ; } if ( java.lang.String != null ) { org.springframework.boot.web.servlet.server.Ssl . setKeyStore ( java.lang.String ) ; org.springframework.boot.web.servlet.server.Ssl . setKeyStorePassword ( STRING ) ; org.springframework.boot.web.servlet.server.Ssl . setKeyStoreType ( java.lang.String ( java.lang.String ) ) ; } if ( java.lang.String != null ) { org.springframework.boot.web.servlet.server.Ssl . setTrustStore ( java.lang.String ) ; org.springframework.boot.web.servlet.server.Ssl . setTrustStorePassword ( STRING ) ; org.springframework.boot.web.servlet.server.Ssl . setTrustStoreType ( java.lang.String ( java.lang.String ) ) ; } if ( java.lang.String[] != null ) { org.springframework.boot.web.servlet.server.Ssl . setCiphers ( java.lang.String[] ) ; } if ( java.lang.String[] != null ) { org.springframework.boot.web.servlet.server.Ssl . setEnabledProtocols ( java.lang.String[] ) ; } return org.springframework.boot.web.servlet.server.Ssl ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) throws java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSsl ( org.springframework.boot.web.servlet.server.Ssl ( null , STRING , STRING , null , java.lang.String[] , java.lang.String[] ) ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( true , false ) , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; SSLConnectionSocketFactory org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.web.servlet.server.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.web.servlet.server.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.web.servlet.server.HttpClient ) ; assertThat ( java.lang.String ( java.lang.String ( STRING , STRING ) , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return ( java.lang.String . boolean ( STRING ) ? STRING : null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) . getSessionTimeout ( ) ) . isEqualTo ( NUMBER * NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setPersistSession ( true ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ( STRING ) ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ( STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . stop ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ( STRING ) ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String ; assertThat ( java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] ) . as ( java.lang.String ) . isEqualTo ( java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] ) ; assertThat ( java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] ) . as ( java.lang.String ) . isEqualTo ( java.lang.String . java.lang.String[] ( STRING ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; java.io.File java.io.File = this . org.springframework.boot.web.servlet.server.TemporaryFolder . newFolder ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setPersistSession ( true ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSessionStoreDir ( java.io.File ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; java.lang.String ( java.lang.String ( STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . stop ( ) ; java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( new java.io.FilenameFilter ( ) { @ java.lang.Override public boolean boolean ( java.io.File java.io.File , java.lang.String java.lang.String ) { return ! ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) ; } } ) ; assertThat ( java.io.File[] . int ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File , java.lang.String java.lang.String ) { return ! ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; java.io.File java.io.File = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getValidSessionStoreDir ( false ) ; assertThat ( java.io.File . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.io.File . java.io.File ( ) ) . isEqualTo ( new ApplicationTemp ( ) . getDir ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSessionStoreDir ( new java.io.File ( STRING ) ) ; java.io.File java.io.File = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getValidSessionStoreDir ( false ) ; assertThat ( java.io.File . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.io.File . java.io.File ( ) ) . isEqualTo ( new ApplicationHome ( ) . getDir ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setSessionStoreDir ( this . org.springframework.boot.web.servlet.server.TemporaryFolder . newFile ( ) ) ; this . org.springframework.boot.web.servlet.server.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.web.servlet.server.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getValidSessionStoreDir ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( boolean ( NUMBER , null , null ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( boolean ( NUMBER , null , null ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; assertThat ( boolean ( NUMBER , java.lang.String[] , null ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( boolean ( NUMBER , null , new java.lang.String [] { STRING } ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; Compression org.springframework.boot.web.servlet.server.Compression = new Compression ( ) ; org.springframework.boot.web.servlet.server.Compression . setEnabled ( true ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setCompression ( org.springframework.boot.web.servlet.server.Compression ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( false , true ) , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory = new org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory ( ) ; java.util.Map<java.lang.String,org.springframework.boot.web.servlet.server.InputStreamFactory> < java.lang.String , InputStreamFactory > java.util.Map<java.lang.String,org.springframework.boot.web.servlet.server.InputStreamFactory> = java.util.Collections . java.util.Map<K,V> ( STRING , ( InputStreamFactory ) org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory ) ; java.lang.String ( java.lang.String ( STRING ) , new HttpComponentsClientHttpRequestFactory ( HttpClientBuilder . create ( ) . setContentDecoderRegistry ( java.util.Map<java.lang.String,org.springframework.boot.web.servlet.server.InputStreamFactory> ) . build ( ) ) ) ; assertThat ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( ) ; java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> < java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> = java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ; java.util.Collection<MimeMappings.Mapping> < MimeMappings . MimeMappings > java.util.Collection<MimeMappings.Mapping> = java.util.Collection<MimeMappings.Mapping> ( ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ) { assertThat ( java.util.Collection<MimeMappings.Mapping> ) . contains ( new MimeMappings . MimeMappings ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ) ; } for ( MimeMappings . MimeMappings MimeMappings.Mapping : java.util.Collection<MimeMappings.Mapping> ) { assertThat ( java.util.Map<java.lang.String,java.lang.String> ) . containsEntry ( MimeMappings.Mapping . getExtension ( ) , MimeMappings.Mapping . getMimeType ( ) ) ; } assertThat ( java.util.Map<java.lang.String,java.lang.String> . int ( ) ) . isEqualTo ( java.util.Collection<MimeMappings.Mapping> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; final java.util.concurrent.atomic.AtomicReference<java.net.URL> < java.net.URL > java.util.concurrent.atomic.AtomicReference<java.net.URL> = new java.util.concurrent.atomic.AtomicReference<java.net.URL> <> ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( new ServletContextInitializer ( ) { @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.server.ServletContext ) throws org.springframework.boot.web.servlet.server.ServletException { try { java.util.concurrent.atomic.AtomicReference<java.net.URL> . void ( org.springframework.boot.web.servlet.server.ServletContext . getResource ( STRING ) ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new ServletException ( java.net.MalformedURLException ) ; } } } ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.util.concurrent.atomic.AtomicReference<java.net.URL> . java.net.URL ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.web.servlet.server.ServletContext ) throws org.springframework.boot.web.servlet.server.ServletException { try { java.util.concurrent.atomic.AtomicReference<java.net.URL> . void ( org.springframework.boot.web.servlet.server.ServletContext . getResource ( STRING ) ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new ServletException ( java.net.MalformedURLException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setServerHeader ( STRING ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.web.servlet.server.ClientHttpResponse . getHeaders ( ) . getFirst ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.web.servlet.server.ClientHttpResponse . getHeaders ( ) . getFirst ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.BlockedPortAction ( ) { @ java.lang.Override public void void ( int int ) { try { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setPort ( int ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; fail ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( java.lang.RuntimeException , int ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { try { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setPort ( int ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; fail ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( java.lang.RuntimeException , int ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { void ( new org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.BlockedPortAction ( ) { @ java.lang.Override public void void ( int int ) { try { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setPort ( SocketUtils . findAvailableTcpPort ( NUMBER ) ) ; void ( int , org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; fail ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( java.lang.RuntimeException , int ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { try { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setPort ( SocketUtils . findAvailableTcpPort ( NUMBER ) ) ; void ( int , org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; fail ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( java.lang.RuntimeException , int ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; java.util.Map<java.util.Locale,java.nio.charset.Charset> < java.util.Locale , java.nio.charset.Charset > java.util.Map<java.util.Locale,java.nio.charset.Charset> = new java.util.HashMap<java.util.Locale,java.nio.charset.Charset> <> ( ) ; java.util.Map<java.util.Locale,java.nio.charset.Charset> . java.nio.charset.Charset ( java.util.Locale . java.util.Locale , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setLocaleCharsetMappings ( java.util.Map<java.util.Locale,java.nio.charset.Charset> ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; assertThat ( java.nio.charset.Charset ( java.util.Locale . java.util.Locale ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.nio.charset.Charset ( java.util.Locale . java.util.Locale ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getJsp ( ) . setInitParameters ( java.util.Map<java.lang.String,java.lang.String> ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; Assume . assumeThat ( org.apache.jasper.servlet.JspServlet ( ) , notNullValue ( ) ) ; JspServlet org.springframework.boot.web.servlet.server.JspServlet = org.apache.jasper.servlet.JspServlet ( ) ; assertThat ( org.springframework.boot.web.servlet.server.JspServlet . getInitParameter ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; Assume . assumeThat ( org.apache.jasper.servlet.JspServlet ( ) , notNullValue ( ) ) ; JspServlet org.springframework.boot.web.servlet.server.JspServlet = org.apache.jasper.servlet.JspServlet ( ) ; EmbeddedServletOptions org.springframework.boot.web.servlet.server.EmbeddedServletOptions = ( EmbeddedServletOptions ) ReflectionTestUtils . getField ( org.springframework.boot.web.servlet.server.JspServlet , STRING ) ; assertThat ( org.springframework.boot.web.servlet.server.EmbeddedServletOptions . getDevelopment ( ) ) . isEqualTo ( false ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( int int , AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory );  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.RuntimeException java.lang.RuntimeException , int int );  <METHOD_END>
<METHOD_START> private boolean boolean ( int int , java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) throws java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( int , java.lang.String[] , java.lang.String[] ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory = new org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory ( ) ; java.util.Map<java.lang.String,org.springframework.boot.web.servlet.server.InputStreamFactory> < java.lang.String , InputStreamFactory > java.util.Map<java.lang.String,org.springframework.boot.web.servlet.server.InputStreamFactory> = java.util.Collections . java.util.Map<K,V> ( STRING , ( InputStreamFactory ) org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ( STRING ) , new HttpComponentsClientHttpRequestFactory ( HttpClientBuilder . create ( ) . setUserAgent ( STRING ) . setContentDecoderRegistry ( java.util.Map<java.lang.String,org.springframework.boot.web.servlet.server.InputStreamFactory> ) . build ( ) ) ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ) ; return org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.TestGzipInputStreamFactory . boolean ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( int int , java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) throws java.lang.Exception { char [] char[] = new char [ int ] ; java.util.Arrays . void ( char[] , 'F' ) ; java.lang.String java.lang.String = new java.lang.String ( char[] ) ; AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( ) ; FileCopyUtils . copy ( java.lang.String , new java.io.FileWriter ( this . org.springframework.boot.web.servlet.server.TemporaryFolder . newFile ( STRING ) ) ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setDocumentRoot ( this . org.springframework.boot.web.servlet.server.TemporaryFolder . getRoot ( ) ) ; Compression org.springframework.boot.web.servlet.server.Compression = new Compression ( ) ; org.springframework.boot.web.servlet.server.Compression . setEnabled ( true ) ; if ( java.lang.String[] != null ) { org.springframework.boot.web.servlet.server.Compression . setMimeTypes ( java.lang.String[] ) ; } if ( java.lang.String[] != null ) { org.springframework.boot.web.servlet.server.Compression . setExcludedUserAgents ( java.lang.String[] ) ; } org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setCompression ( org.springframework.boot.web.servlet.server.Compression ) ; this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . getWebServer ( ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected abstract java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( )  <METHOD_END>
<METHOD_START> protected java.util.Collection<MimeMappings.Mapping> < MimeMappings . MimeMappings > java.util.Collection<MimeMappings.Mapping> ( ) { return MimeMappings . DEFAULT . getAll ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.nio.charset.Charset java.nio.charset.Charset ( java.util.Locale java.util.Locale );  <METHOD_END>
<METHOD_START> private void void ( AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory )			throws java.io.IOException { FileCopyUtils . copy ( STRING , new java.io.FileWriter ( this . org.springframework.boot.web.servlet.server.TemporaryFolder . newFile ( STRING ) ) ) ; org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory . setDocumentRoot ( this . org.springframework.boot.web.servlet.server.TemporaryFolder . getRoot ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String + STRING + this . org.springframework.boot.web.servlet.server.WebServer . getPort ( ) + java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( int int , java.lang.String java.lang.String ) { return STRING + int + java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] )			throws java.io.IOException , java.net.URISyntaxException { return java.lang.String ( java.lang.String , HttpMethod . GET , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , HttpMethod org.springframework.boot.web.servlet.server.HttpMethod , java.lang.String ... java.lang.String[] )			throws java.io.IOException , java.net.URISyntaxException { ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String , org.springframework.boot.web.servlet.server.HttpMethod , java.lang.String[] ) ; try { return StreamUtils . copyToString ( org.springframework.boot.web.servlet.server.ClientHttpResponse . getBody ( ) , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; } finally { org.springframework.boot.web.servlet.server.ClientHttpResponse . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory , java.lang.String ... java.lang.String[] )					throws java.io.IOException , java.net.URISyntaxException { return java.lang.String ( java.lang.String , HttpMethod . GET , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , HttpMethod org.springframework.boot.web.servlet.server.HttpMethod , HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory , java.lang.String ... java.lang.String[] )					throws java.io.IOException , java.net.URISyntaxException { ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String , org.springframework.boot.web.servlet.server.HttpMethod , org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory , java.lang.String[] ) ; try { return StreamUtils . copyToString ( org.springframework.boot.web.servlet.server.ClientHttpResponse . getBody ( ) , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; } finally { org.springframework.boot.web.servlet.server.ClientHttpResponse . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.server.ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] )			throws java.io.IOException , java.net.URISyntaxException { return org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String , HttpMethod . GET , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.server.ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String java.lang.String , HttpMethod org.springframework.boot.web.servlet.server.HttpMethod , java.lang.String ... java.lang.String[] ) throws java.io.IOException , java.net.URISyntaxException { return org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String , org.springframework.boot.web.servlet.server.HttpMethod , new HttpComponentsClientHttpRequestFactory ( ) { @ java.lang.Override protected org.springframework.boot.web.servlet.server.HttpContext org.springframework.boot.web.servlet.server.HttpContext ( HttpMethod org.springframework.boot.web.servlet.server.HttpMethod , java.net.URI java.net.URI ) { return org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.HttpClientContext ; } } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.web.servlet.server.HttpContext org.springframework.boot.web.servlet.server.HttpContext ( HttpMethod org.springframework.boot.web.servlet.server.HttpMethod , java.net.URI java.net.URI ) { return org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests .this . org.springframework.boot.web.servlet.server.HttpClientContext ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.server.ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse ( java.lang.String java.lang.String , HttpMethod org.springframework.boot.web.servlet.server.HttpMethod , HttpComponentsClientHttpRequestFactory org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory , java.lang.String ... java.lang.String[] )					throws java.io.IOException , java.net.URISyntaxException { ClientHttpRequest org.springframework.boot.web.servlet.server.ClientHttpRequest = org.springframework.boot.web.servlet.server.HttpComponentsClientHttpRequestFactory . createRequest ( new java.net.URI ( java.lang.String ) , org.springframework.boot.web.servlet.server.HttpMethod ) ; org.springframework.boot.web.servlet.server.ClientHttpRequest . getHeaders ( ) . add ( STRING , STRING + STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; org.springframework.boot.web.servlet.server.ClientHttpRequest . getHeaders ( ) . add ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; } ClientHttpResponse org.springframework.boot.web.servlet.server.ClientHttpResponse = org.springframework.boot.web.servlet.server.ClientHttpRequest . execute ( ) ; return org.springframework.boot.web.servlet.server.ClientHttpResponse ; }  <METHOD_END>
<METHOD_START> protected void void ( ServletWebServerFactory org.springframework.boot.web.servlet.server.ServletWebServerFactory )			throws java.io.IOException , java.net.URISyntaxException { this . org.springframework.boot.web.servlet.server.WebServer = org.springframework.boot.web.servlet.server.ServletWebServerFactory . getWebServer ( new ServletRegistrationBean <> ( new ExampleServlet ( true , false ) , STRING ) ) ; this . org.springframework.boot.web.servlet.server.WebServer . start ( ) ; assertThat ( java.lang.String ( java.lang.String ( STRING ) , STRING ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory org.springframework.boot.web.servlet.server.AbstractServletWebServerFactory ( )  <METHOD_END>
<METHOD_START> protected abstract org . org.apache . org.apache . org.apache . org.apache.jasper.servlet.JspServlet org.apache.jasper.servlet.JspServlet ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.servlet.server.ServletContextInitializer org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) { return new ServletRegistrationBean <> ( new ExampleServlet ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.boot.web.servlet.server.ServletContextInitializer org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) { ServletRegistrationBean < ExampleServlet > org.springframework.boot.web.servlet.server.ServletRegistrationBean<org.springframework.boot.web.servlet.server.ExampleServlet> = new ServletRegistrationBean <> ( new ExampleServlet ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.server.ServletRequest , ServletResponse org.springframework.boot.web.servlet.server.ServletResponse )							throws org.springframework.boot.web.servlet.server.ServletException , java.io.IOException { throw new java.lang.RuntimeException ( STRING ) ; } } , STRING ) ; org.springframework.boot.web.servlet.server.ServletRegistrationBean<org.springframework.boot.web.servlet.server.ExampleServlet> . setName ( STRING ) ; return org.springframework.boot.web.servlet.server.ServletRegistrationBean<org.springframework.boot.web.servlet.server.ExampleServlet> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.server.ServletRequest , ServletResponse org.springframework.boot.web.servlet.server.ServletResponse )							throws org.springframework.boot.web.servlet.server.ServletException , java.io.IOException { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.web.servlet.server.ServletContextInitializer org.springframework.boot.web.servlet.server.ServletContextInitializer ( ) { ServletRegistrationBean < ExampleServlet > org.springframework.boot.web.servlet.server.ServletRegistrationBean<org.springframework.boot.web.servlet.server.ExampleServlet> = new ServletRegistrationBean <> ( new ExampleServlet ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.server.ServletRequest , ServletResponse org.springframework.boot.web.servlet.server.ServletResponse )							throws org.springframework.boot.web.servlet.server.ServletException , java.io.IOException { HttpSession org.springframework.boot.web.servlet.server.HttpSession = ( ( HttpServletRequest ) org.springframework.boot.web.servlet.server.ServletRequest ) . getSession ( true ) ; long long = java.lang.System . long ( ) ; java.lang.Object java.lang.Object = org.springframework.boot.web.servlet.server.HttpSession . getAttribute ( STRING ) ; org.springframework.boot.web.servlet.server.HttpSession . setAttribute ( STRING , long ) ; java.io.PrintWriter java.io.PrintWriter = org.springframework.boot.web.servlet.server.ServletResponse . getWriter ( ) ; java.io.PrintWriter . java.io.PrintWriter ( java.lang.String . java.lang.String ( java.lang.Object ) + STRING + long ) ; } } , STRING ) ; org.springframework.boot.web.servlet.server.ServletRegistrationBean<org.springframework.boot.web.servlet.server.ExampleServlet> . setName ( STRING ) ; return org.springframework.boot.web.servlet.server.ServletRegistrationBean<org.springframework.boot.web.servlet.server.ExampleServlet> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.server.ServletRequest , ServletResponse org.springframework.boot.web.servlet.server.ServletResponse )							throws org.springframework.boot.web.servlet.server.ServletException , java.io.IOException { HttpSession org.springframework.boot.web.servlet.server.HttpSession = ( ( HttpServletRequest ) org.springframework.boot.web.servlet.server.ServletRequest ) . getSession ( true ) ; long long = java.lang.System . long ( ) ; java.lang.Object java.lang.Object = org.springframework.boot.web.servlet.server.HttpSession . getAttribute ( STRING ) ; org.springframework.boot.web.servlet.server.HttpSession . setAttribute ( STRING , long ) ; java.io.PrintWriter java.io.PrintWriter = org.springframework.boot.web.servlet.server.ServletResponse . getWriter ( ) ; java.io.PrintWriter . java.io.PrintWriter ( java.lang.String . java.lang.String ( java.lang.Object ) + STRING + long ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.BlockedPortAction org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.BlockedPortAction ) throws java.io.IOException { int int = SocketUtils . findAvailableTcpPort ( NUMBER ) ; java.net.ServerSocket java.net.ServerSocket = new java.net.ServerSocket ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { try { java.net.ServerSocket . void ( new java.net.InetSocketAddress ( int ) ) ; break; } catch ( java.lang.Exception java.lang.Exception ) {			} } try { org.springframework.boot.web.servlet.server.AbstractServletWebServerFactoryTests.BlockedPortAction . void ( int ) ; } finally { java.net.ServerSocket . void ( ) ; } }  <METHOD_END>
<METHOD_START> private java.security.KeyStore java.security.KeyStore ( ) java.security.KeyStoreException , java.io.IOException , java.security.NoSuchAlgorithmException , java.security.cert.CertificateException { java.security.KeyStore java.security.KeyStore = java.security.KeyStore . java.security.KeyStore ( STRING ) ; Resource org.springframework.boot.web.servlet.server.Resource = new ClassPathResource ( STRING ) ; java.io.InputStream java.io.InputStream = org.springframework.boot.web.servlet.server.Resource . getInputStream ( ) ; try { java.security.KeyStore . void ( java.io.InputStream , STRING . char[] ( ) ) ; return java.security.KeyStore ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { if ( this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return new java.util.zip.GZIPInputStream ( java.io.InputStream ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.servlet.server.ServletException { this . int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.boot.web.servlet.server.ServletRequest , ServletResponse org.springframework.boot.web.servlet.server.ServletResponse )				throws org.springframework.boot.web.servlet.server.ServletException , java.io.IOException {		}  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> void void ( int int );  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] , java.lang.String java.lang.String )				throws java.security.cert.CertificateException { java.lang.String java.lang.String = java.security.cert.X509Certificate[] [ NUMBER ] . java.math.BigInteger ( ) . java.lang.String ( NUMBER ) ; boolean boolean = java.lang.String . boolean ( this . java.lang.String ) ; return super. isTrusted ( java.security.cert.X509Certificate[] , java.lang.String ) && boolean ; }  <METHOD_END>
