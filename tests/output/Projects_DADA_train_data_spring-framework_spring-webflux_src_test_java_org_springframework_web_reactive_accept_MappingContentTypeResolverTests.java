<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . APPLICATION_JSON ) ; org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver = new org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver ( STRING , java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver . getKeysFor ( MediaType . APPLICATION_JSON ) ; assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.Set<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . APPLICATION_JSON ) ; org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver = new org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver ( STRING , java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver . getKeysFor ( MediaType . TEXT_HTML ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . APPLICATION_JSON ) ; org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver = new org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver ( STRING , java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ; MediaType org.springframework.web.reactive.accept.MediaType = org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver . getMediaType ( STRING ) ; assertEquals ( org.springframework.web.reactive.accept.MediaType , MediaType . APPLICATION_JSON ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . APPLICATION_JSON ) ; org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver = new org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver ( STRING , java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver . resolveMediaTypes ( ( ServerWebExchange ) null ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.accept.MediaType> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.reactive.accept.MediaType> . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver = new org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver ( STRING , null ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver . resolveMediaTypes ( ( ServerWebExchange ) null ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.accept.MediaType> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . APPLICATION_JSON ) ; org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver = new org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver ( null , java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver . resolveMediaTypes ( ( ServerWebExchange ) null ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.accept.MediaType> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver = new org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver ( STRING , null ) ; java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.MappingContentTypeResolverTests.TestMappingContentTypeResolver . resolveMediaTypes ( ( ServerWebExchange ) null ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.accept.MediaType> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.reactive.accept.MediaType> . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) { super( java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.accept.MediaType org.springframework.web.reactive.accept.MediaType ( java.lang.String java.lang.String ) { return STRING . boolean ( java.lang.String ) ? MediaType . APPLICATION_XML : null ; }  <METHOD_END>
