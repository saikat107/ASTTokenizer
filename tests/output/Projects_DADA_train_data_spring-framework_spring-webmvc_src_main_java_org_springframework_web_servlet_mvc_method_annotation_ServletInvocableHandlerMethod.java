<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { super( java.lang.Object , java.lang.reflect.Method ); }  <METHOD_END>
<METHOD_START> public void ( HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) { super( org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ); }  <METHOD_END>
<METHOD_START> public void void ( HandlerMethodReturnValueHandlerComposite org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite ) { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite = org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite ; }  <METHOD_END>
<METHOD_START> public void void ( ServletWebRequest org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { java.lang.Object java.lang.Object = invokeForRequest ( org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , java.lang.Object[] ) ; void ( org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; if ( java.lang.Object == null ) { if ( boolean ( org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) || getResponseStatus ( ) != null || org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; return; } } else if ( StringUtils . hasText ( getResponseStatusReason ( ) ) ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; return; } org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( false ) ; try { this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite . handleReturnValue ( java.lang.Object , getReturnValueType ( java.lang.Object ) , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( java.lang.String ( STRING , java.lang.Object ) , java.lang.Exception ) ; } throw java.lang.Exception ; } }  <METHOD_END>
<METHOD_START> private void void ( ServletWebRequest org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) throws java.io.IOException { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = getResponseStatus ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.HttpStatus == null ) { return; } java.lang.String java.lang.String = getResponseStatusReason ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getResponse ( ) . sendError ( org.springframework.web.servlet.mvc.method.annotation.HttpStatus . value ( ) , java.lang.String ) ; } else { org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getResponse ( ) . setStatus ( org.springframework.web.servlet.mvc.method.annotation.HttpStatus . value ( ) ) ; } org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getRequest ( ) . setAttribute ( View . RESPONSE_STATUS_ATTRIBUTE , org.springframework.web.servlet.mvc.method.annotation.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ServletWebRequest org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . isNotModified ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; if ( java.lang.Object != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.Object ) . java.lang.StringBuilder ( STRING ) ; return getDetailedErrorMessage ( java.lang.StringBuilder . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod ( java.lang.Object java.lang.Object ) { return new org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultHandlerMethod ( java.lang.Object , new org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public void ( final java.lang.Object java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter ) { super( new java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { if ( java.lang.Object instanceof java.lang.Exception ) { throw ( java.lang.Exception ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.Throwable ) { throw new NestedServletException ( STRING , ( java.lang.Throwable ) java.lang.Object ) ; } return java.lang.Object ; } } , java.lang.reflect.Method ); void ( org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod .this . org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandlerComposite ) ; this . org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { if ( java.lang.Object instanceof java.lang.Exception ) { throw ( java.lang.Exception ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.Throwable ) { throw new NestedServletException ( STRING , ( java.lang.Throwable ) java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod .this . getBeanType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( java.lang.Object java.lang.Object ) { return this . org.springframework.web.servlet.mvc.method.annotation.MethodParameter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < A extends java.lang.annotation.Annotation > A A ( java.lang.Class<A> < A > java.lang.Class<A> ) { return org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod .this . getMethodAnnotation ( java.lang.Class<A> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < A extends java.lang.annotation.Annotation > boolean boolean ( java.lang.Class<A> < A > java.lang.Class<A> ) { return org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod .this . hasMethodAnnotation ( java.lang.Class<A> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( - NUMBER ); this . java.lang.Object = java.lang.Object ; ResolvableType org.springframework.web.servlet.mvc.method.annotation.ResolvableType = ResolvableType . forType ( super. getGenericParameterType ( ) ) . getGeneric ( NUMBER ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResolvableType = java.lang.Object instanceof ReactiveTypeHandler . ReactiveTypeHandler ? ResolvableType . forClassWithGenerics ( java.util.List .class , org.springframework.web.servlet.mvc.method.annotation.ResolvableType ) : org.springframework.web.servlet.mvc.method.annotation.ResolvableType ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter ) { super( org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter ); this . java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter . java.lang.Object ; this . org.springframework.web.servlet.mvc.method.annotation.ResolvableType = org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter . org.springframework.web.servlet.mvc.method.annotation.ResolvableType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.Object != null ) { return this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } if ( ! ResolvableType . NONE . equals ( this . org.springframework.web.servlet.mvc.method.annotation.ResolvableType ) ) { return this . org.springframework.web.servlet.mvc.method.annotation.ResolvableType . resolve ( ) ; } return super. getParameterType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Type java.lang.reflect.Type ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.ResolvableType . getType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter ( ) { return new org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.ConcurrentResultMethodParameter ( this ) ; }  <METHOD_END>
