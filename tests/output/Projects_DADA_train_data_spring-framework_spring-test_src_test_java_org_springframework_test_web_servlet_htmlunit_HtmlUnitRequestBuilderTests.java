<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest = new WebRequest ( new java.net.URL ( STRING ) ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . setHttpMethod ( HttpMethod . GET ) ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder = new HtmlUnitRequestBuilder ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , org.springframework.test.web.servlet.htmlunit.WebClient , org.springframework.test.web.servlet.htmlunit.WebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new HtmlUnitRequestBuilder ( null , org.springframework.test.web.servlet.htmlunit.WebClient , org.springframework.test.web.servlet.htmlunit.WebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new HtmlUnitRequestBuilder ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , null , org.springframework.test.web.servlet.htmlunit.WebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new HtmlUnitRequestBuilder ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , org.springframework.test.web.servlet.htmlunit.WebClient , null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING + java.lang.String ; UsernamePasswordCredentials org.springframework.test.web.servlet.htmlunit.UsernamePasswordCredentials = new UsernamePasswordCredentials ( java.lang.String ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . setCredentials ( org.springframework.test.web.servlet.htmlunit.UsernamePasswordCredentials ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getAuthType ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getHeader ( STRING ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setCharset ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getCharacterEncoding ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getCharacterEncoding ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setHttpMethod ( HttpMethod . POST ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . setRequestBody ( java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getContentLength ( ) , equalTo ( java.lang.String . int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getContentType ( ) , equalTo ( java.lang.String ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getHeader ( STRING ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setEncodingType ( FormEncodingType . URL_ENCODED ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getContentType ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getHeader ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getContextPath ( ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.MalformedURLException { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getContextPath ( ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( STRING ) ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getContextPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getContextPath ( ) ; assertThat ( java.lang.String , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getContextPath ( ) ; assertThat ( java.lang.String , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getContextPath ( ) ; assertThat ( java.lang.String , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getCookies ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; Cookie [] org.springframework.test.web.servlet.htmlunit.Cookie[] = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getCookies ( ) ; assertThat ( cookies . length , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie[] [ NUMBER ] . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie[] [ NUMBER ] . getValue ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; Cookie [] org.springframework.test.web.servlet.htmlunit.Cookie[] = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getCookies ( ) ; assertThat ( cookies . length , equalTo ( NUMBER ) ) ; Cookie org.springframework.test.web.servlet.htmlunit.Cookie = org.springframework.test.web.servlet.htmlunit.Cookie[] [ NUMBER ] ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie . getValue ( ) , equalTo ( STRING ) ) ; org.springframework.test.web.servlet.htmlunit.Cookie = org.springframework.test.web.servlet.htmlunit.Cookie[] [ NUMBER ] ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie . getValue ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setHttpMethod ( HttpMethod . POST ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . setRequestBody ( java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( IOUtils . toString ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getInputStream ( ) ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocalAddr ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocale ( ) , equalTo ( java.util.Locale . java.util.Locale ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocale ( ) , equalTo ( new java.util.Locale ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocale ( ) , equalTo ( new java.util.Locale ( STRING , STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocale ( ) , equalTo ( new java.util.Locale ( STRING , STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocale ( ) , equalTo ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocale ( ) , equalTo ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; java.util.List<java.util.Locale> < java.util.Locale > java.util.List<java.util.Locale> = java.util.List<java.util.Locale> ( new java.util.Locale ( STRING ) , new java.util.Locale ( STRING , STRING , STRING ) , new java.util.Locale ( STRING , STRING , STRING ) , java.util.Locale . java.util.Locale ) ; assertThat ( java.util.Collections . java.util.ArrayList ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocales ( ) ) , equalTo ( java.util.List<java.util.Locale> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocalName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocalPort ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getLocalPort ( ) , equalTo ( - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( HttpMethod org.springframework.test.web.servlet.htmlunit.HttpMethod : HttpMethod . values ( ) ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setHttpMethod ( org.springframework.test.web.servlet.htmlunit.HttpMethod ) ; java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getMethod ( ) ; assertThat ( java.lang.String , equalTo ( org.springframework.test.web.servlet.htmlunit.HttpMethod . name ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setRequestParameters ( java.util.List ( new NameValuePair ( STRING , STRING ) ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setRequestParameters ( java.util.List ( new NameValuePair ( STRING , null ) ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setRequestParameters ( java.util.List ( new NameValuePair ( STRING , STRING ) ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setRequestParameters ( java.util.List ( new NameValuePair ( STRING , STRING ) ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.WebRequest . setRequestParameters ( java.util.List ( new NameValuePair ( STRING , STRING ) , new NameValuePair ( STRING , STRING ) ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterMap ( ) . size ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameter ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getPathInfo ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getPathInfo ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getPathInfo ( ) , nullValue ( ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServletPath ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getProtocol ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING + java.lang.String ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getQueryString ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING + java.lang.String ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getQueryString ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING + java.lang.String ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getQueryString ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING + java.lang.String ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getQueryString ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING + java.lang.String ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getQueryString ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setHttpMethod ( HttpMethod . POST ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . setRequestBody ( java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( IOUtils . toString ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getReader ( ) ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getRemoteAddr ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getRemoteAddr ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getRemotePort ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getRemotePort ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getRemotePort ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING + java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getRequestedSessionId ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getRequestedSessionId ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getRequestURI ( ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) . getRequestURL ( ) . toString ( ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getScheme ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getScheme ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServerName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServerPort ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.htmlunit.WebRequest . setUrl ( new java.net.URL ( STRING ) ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServerPort ( ) , equalTo ( - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServletContext ( ) , equalTo ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getServletPath ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.HttpSession , notNullValue ( ) ) ; void ( STRING + org.springframework.test.web.servlet.htmlunit.HttpSession . getId ( ) + STRING ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING + org.springframework.test.web.servlet.htmlunit.HttpSession . getId ( ) ) ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder = new HtmlUnitRequestBuilder ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , org.springframework.test.web.servlet.htmlunit.WebClient , org.springframework.test.web.servlet.htmlunit.WebRequest ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) , sameInstance ( org.springframework.test.web.servlet.htmlunit.HttpSession ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING + java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.HttpSession . getId ( ) , equalTo ( java.lang.String ) ) ; void ( STRING + org.springframework.test.web.servlet.htmlunit.HttpSession . getId ( ) + STRING ) ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder = new HtmlUnitRequestBuilder ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , org.springframework.test.web.servlet.htmlunit.WebClient , org.springframework.test.web.servlet.htmlunit.WebRequest ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) , equalTo ( org.springframework.test.web.servlet.htmlunit.HttpSession ) ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING + java.lang.String + STRING ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) , not ( equalTo ( org.springframework.test.web.servlet.htmlunit.HttpSession ) ) ) ; void ( STRING + org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) . getId ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( true ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.HttpSession , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( false ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.HttpSession , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING + java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( false ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.HttpSession , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) . isNew ( ) , equalTo ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING + java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) . isNew ( ) , equalTo ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.WebRequest . setAdditionalHeader ( STRING , STRING + java.lang.String ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; HttpSession org.springframework.test.web.servlet.htmlunit.HttpSession = org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) ; org.springframework.test.web.servlet.htmlunit.HttpSession . invalidate ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> . containsKey ( org.springframework.test.web.servlet.htmlunit.HttpSession . getId ( ) ) , equalTo ( false ) ) ; void ( STRING + org.springframework.test.web.servlet.htmlunit.HttpSession . getId ( ) + STRING ) ; org.springframework.test.web.servlet.htmlunit.WebRequest . removeAdditionalHeader ( STRING ) ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder = new HtmlUnitRequestBuilder ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> , org.springframework.test.web.servlet.htmlunit.WebClient , org.springframework.test.web.servlet.htmlunit.WebRequest ) ; org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . buildRequest ( org.springframework.test.web.servlet.htmlunit.ServletContext ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getSession ( ) . isNew ( ) , equalTo ( true ) ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.test.web.servlet.htmlunit.MockHttpSession> . containsKey ( org.springframework.test.web.servlet.htmlunit.HttpSession . getId ( ) ) , equalTo ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( null ) ; assertThat ( java.lang.String ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( STRING ) ; assertThat ( java.lang.String ( ) , isEmptyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder . setContextPath ( java.lang.String ) ; assertThat ( java.lang.String ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . standaloneSetup ( new HelloController ( ) ) . defaultRequest ( get ( STRING ) . header ( java.lang.String , java.lang.String ) ) . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) . andReturn ( ) . getRequest ( ) . getHeader ( java.lang.String ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . standaloneSetup ( new HelloController ( ) ) . defaultRequest ( get ( STRING ) . sessionAttr ( java.lang.String , java.lang.String ) ) . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) . andReturn ( ) . getRequest ( ) . getSession ( ) . getAttribute ( java.lang.String ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . standaloneSetup ( new HelloController ( ) ) . defaultRequest ( get ( STRING ) ) . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) . andReturn ( ) . getRequest ( ) . getSession ( false ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . standaloneSetup ( new HelloController ( ) ) . defaultRequest ( get ( STRING ) . param ( java.lang.String , java.lang.String , java.lang.String ) ) . build ( ) ; MockHttpServletRequest org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest = org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) . andReturn ( ) . getRequest ( ) ; assertThat ( java.util.List ( org.springframework.test.web.servlet.htmlunit.MockHttpServletRequest . getParameterValues ( java.lang.String ) ) , contains ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . standaloneSetup ( new HelloController ( ) ) . defaultRequest ( get ( STRING ) . cookie ( new Cookie ( java.lang.String , java.lang.String ) ) ) . build ( ) ; Cookie [] org.springframework.test.web.servlet.htmlunit.Cookie[] = org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) . andReturn ( ) . getRequest ( ) . getCookies ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie[] , notNullValue ( ) ) ; assertThat ( cookies . length , equalTo ( NUMBER ) ) ; Cookie org.springframework.test.web.servlet.htmlunit.Cookie = org.springframework.test.web.servlet.htmlunit.Cookie[] [ NUMBER ] ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie . getName ( ) , equalTo ( java.lang.String ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.Cookie . getValue ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . standaloneSetup ( new HelloController ( ) ) . defaultRequest ( get ( STRING ) . requestAttr ( java.lang.String , java.lang.String ) ) . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) . andReturn ( ) . getRequest ( ) . getAttribute ( java.lang.String ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockMvc org.springframework.test.web.servlet.htmlunit.MockMvc = MockMvcBuilders . standaloneSetup ( new HelloController ( ) ) . defaultRequest ( get ( STRING ) ) . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( get ( java.lang.String ) ) . andReturn ( ) . getRequest ( ) . getPathInfo ( ) , equalTo ( java.lang.String ) ) ; org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.MockMvc . perform ( get ( java.lang.String ) ) . andReturn ( ) . getRequest ( ) . getPathInfo ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { com . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware . com.gargoylesoftware com.gargoylesoftware.htmlunit.util.Cookie = org.springframework.test.web.servlet.htmlunit.WebClient . getCookieManager ( ) . getCookie ( STRING ) ; if ( java.lang.String == null || java.lang.String . boolean ( STRING ) ) { assertThat ( com.gargoylesoftware.htmlunit.util.Cookie , nullValue ( ) ) ; return; } java.lang.String java.lang.String = com.gargoylesoftware.htmlunit.util.Cookie . getValue ( ) ; assertThat ( STRING + java.lang.String + STRING , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return ( java.lang.String ) ReflectionTestUtils . getField ( org.springframework.test.web.servlet.htmlunit.HtmlUnitRequestBuilder , STRING ) ; }  <METHOD_END>
