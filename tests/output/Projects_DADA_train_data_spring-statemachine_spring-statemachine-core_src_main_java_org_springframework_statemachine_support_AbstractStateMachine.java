<METHOD_START> public void ( java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> , State < S , E > org.springframework.statemachine.support.State<S,E> ) { this( java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> , org.springframework.statemachine.support.State<S,E> , new DefaultExtendedState ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> , State < S , E > org.springframework.statemachine.support.State<S,E> , ExtendedState org.springframework.statemachine.support.ExtendedState ) { this( java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> , org.springframework.statemachine.support.State<S,E> , null , null , org.springframework.statemachine.support.ExtendedState , null ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> , State < S , E > org.springframework.statemachine.support.State<S,E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , ExtendedState org.springframework.statemachine.support.ExtendedState , java.util.UUID java.util.UUID ) { super(); this . java.util.UUID = java.util.UUID == null ? java.util.UUID . java.util.UUID ( ) : java.util.UUID ; this . java.util.Collection<org.springframework.statemachine.support.State<S,E>> = java.util.Collection<org.springframework.statemachine.support.State<S,E>> ; this . java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> = java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ; this . org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; this . org.springframework.statemachine.support.Message<E> = org.springframework.statemachine.support.Message<E> ; this . org.springframework.statemachine.support.ExtendedState = org.springframework.statemachine.support.ExtendedState != null ? org.springframework.statemachine.support.ExtendedState : new DefaultExtendedState ( ) ; if ( org.springframework.statemachine.support.Transition<S,E> == null ) { this . org.springframework.statemachine.support.Transition<S,E> = new InitialTransition < S , E > ( org.springframework.statemachine.support.State<S,E> ) ; } else { this . org.springframework.statemachine.support.Transition<S,E> = org.springframework.statemachine.support.Transition<S,E> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.support.State<S,E> < S , E > org.springframework.statemachine.support.State<S,E> ( ) { synchronized ( java.lang.Object ) { if ( org.springframework.statemachine.support.State<S,E> != null && boolean ( ) ) { return org.springframework.statemachine.support.State<S,E> ; } else { return org.springframework.statemachine.support.State<S,E> ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.support.State<S,E> < S , E > org.springframework.statemachine.support.State<S,E> ( ) { return org.springframework.statemachine.support.State<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.support.ExtendedState org.springframework.statemachine.support.ExtendedState ( ) { return org.springframework.statemachine.support.ExtendedState ; }  <METHOD_END>
<METHOD_START> public void void ( PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> ) { this . org.springframework.statemachine.support.PseudoState<S,E> = org.springframework.statemachine.support.PseudoState<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.support.PseudoState<S,E> < S , E > org.springframework.statemachine.support.PseudoState<S,E> ( ) { return org.springframework.statemachine.support.PseudoState<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < E > org.springframework.statemachine.support.Message<E> ) { if ( boolean ( ) ) { void ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . EVENT_NOT_ACCEPTED , org.springframework.statemachine.support.Message<E> , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.State<S,E> ( ) , null ) ) ; return false ; } try { org.springframework.statemachine.support.Message<E> = getStateMachineInterceptors ( ) . preEvent ( org.springframework.statemachine.support.Message<E> , this ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . info ( STRING + org.springframework.statemachine.support.Message<E> + STRING ) ; void ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . EVENT_NOT_ACCEPTED , org.springframework.statemachine.support.Message<E> , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.State<S,E> ( ) , null ) ) ; return false ; } if ( boolean ( ) || ! isRunning ( ) ) { void ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . EVENT_NOT_ACCEPTED , org.springframework.statemachine.support.Message<E> , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.State<S,E> ( ) , null ) ) ; return false ; } boolean boolean = boolean ( org.springframework.statemachine.support.Message<E> ) ; org.springframework.statemachine.support.StateMachineExecutor<S,E> . execute ( ) ; if ( ! boolean ) { void ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . EVENT_NOT_ACCEPTED , org.springframework.statemachine.support.Message<E> , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.State<S,E> ( ) , null ) ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { if ( org.springframework.statemachine.support.StateMachine<S,E> == null ) { super. notifyEventNotAccepted ( org.springframework.statemachine.support.StateContext<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( E E ) { return boolean ( MessageBuilder . withPayload ( E ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; Assert . notNull ( org.springframework.statemachine.support.State<S,E> , STRING ) ; Assert . state ( org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) != null && org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . getKind ( ) == PseudoStateKind . INITIAL , STRING ) ; org.springframework.statemachine.support.State<S,E> = null ; org.springframework.statemachine.support.ExtendedState . setExtendedStateChangeListener ( new ExtendedStateChangeListener ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { notifyExtendedStateChanged ( java.lang.Object , java.lang.Object , org.springframework.statemachine.support.StateContext<S,E> ( Stage . EXTENDED_STATE_CHANGED , null , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; } } ) ; for ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> : java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ) { Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> = org.springframework.statemachine.support.Transition<S,E> . getTrigger ( ) ; if ( org.springframework.statemachine.support.Trigger<S,E> != null ) { java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> . put ( org.springframework.statemachine.support.Trigger<S,E> , org.springframework.statemachine.support.Transition<S,E> ) ; } else { java.util.List<org.springframework.statemachine.support.Transition<S,E>> . add ( org.springframework.statemachine.support.Transition<S,E> ) ; } } for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; org.springframework.statemachine.support.StateMachine<S,E> . addStateListener ( new StateMachineListenerRelay ( ) ) ; } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { org.springframework.statemachine.support.Region<S,E> . addStateListener ( new StateMachineListenerRelay ( ) ) ; } } if ( org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) != null && ( org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . getKind ( ) == PseudoStateKind . HISTORY_DEEP || org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . getKind ( ) == PseudoStateKind . HISTORY_DEEP ) ) { org.springframework.statemachine.support.PseudoState<S,E> = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) ; } } DefaultStateMachineExecutor < S , E > org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E> = new DefaultStateMachineExecutor < S , E > ( this , org.springframework.statemachine.support.StateMachine<S,E> ( ) , java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> , java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> , java.util.List<org.springframework.statemachine.support.Transition<S,E>> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.Message<E> ) ; if ( getBeanFactory ( ) != null ) { org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E> . setBeanFactory ( getBeanFactory ( ) ) ; } if ( getTaskExecutor ( ) != null ) { org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E> . setTaskExecutor ( getTaskExecutor ( ) ) ; } org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E> . afterPropertiesSet ( ) ; org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E> . setStateMachineExecutorTransit ( new StateMachineExecutorTransit < S , E > ( ) { @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> , Message < E > org.springframework.statemachine.support.Message<E> ) { long long = java.lang.System . long ( ) ; notifyTransitionStart ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . TRANSITION_START , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; try { org.springframework.statemachine.support.Transition<S,E> . executeTransitionActions ( org.springframework.statemachine.support.StateContext<S,E> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . warn ( STRING + org.springframework.statemachine.support.Transition<S,E> + STRING + java.lang.Exception ) ; return; } notifyTransition ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . TRANSITION , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; if ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) . getPseudoState ( ) != null && org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) . getPseudoState ( ) . getKind ( ) == PseudoStateKind . JOIN ) { void ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; } else { if ( org.springframework.statemachine.support.Transition<S,E> . getKind ( ) == TransitionKind . INITIAL ) { void ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; notifyStateMachineStarted ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATEMACHINE_START , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; } else if ( org.springframework.statemachine.support.Transition<S,E> . getKind ( ) != TransitionKind . INTERNAL ) { void ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; } } notifyTransitionEnd ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . TRANSITION_END , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; notifyTransitionMonitor ( org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.Transition<S,E> , java.lang.System . long ( ) - long ) ; } } ) ; org.springframework.statemachine.support.StateMachineExecutor<S,E> = org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E> ; for ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> : java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ( ) ) { org.springframework.statemachine.support.Transition<S,E> . addActionListener ( new ActionListener < S , E > ( ) { @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , Action < S , E > org.springframework.statemachine.support.Action<S,E> , long long ) { notifyActionMonitor ( org.springframework.statemachine.support.StateMachine<S,E> , org.springframework.statemachine.support.Action<S,E> , long ) ; } } ) ; } for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ( ) ) { org.springframework.statemachine.support.State<S,E> . addActionListener ( new ActionListener < S , E > ( ) { @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , Action < S , E > org.springframework.statemachine.support.Action<S,E> , long long ) { notifyActionMonitor ( org.springframework.statemachine.support.StateMachine<S,E> , org.springframework.statemachine.support.Action<S,E> , long ) ; } } ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { notifyExtendedStateChanged ( java.lang.Object , java.lang.Object , org.springframework.statemachine.support.StateContext<S,E> ( Stage . EXTENDED_STATE_CHANGED , null , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> , Message < E > org.springframework.statemachine.support.Message<E> ) { long long = java.lang.System . long ( ) ; notifyTransitionStart ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . TRANSITION_START , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; try { org.springframework.statemachine.support.Transition<S,E> . executeTransitionActions ( org.springframework.statemachine.support.StateContext<S,E> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . warn ( STRING + org.springframework.statemachine.support.Transition<S,E> + STRING + java.lang.Exception ) ; return; } notifyTransition ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . TRANSITION , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; if ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) . getPseudoState ( ) != null && org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) . getPseudoState ( ) . getKind ( ) == PseudoStateKind . JOIN ) { void ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; } else { if ( org.springframework.statemachine.support.Transition<S,E> . getKind ( ) == TransitionKind . INITIAL ) { void ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; notifyStateMachineStarted ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATEMACHINE_START , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; } else if ( org.springframework.statemachine.support.Transition<S,E> . getKind ( ) != TransitionKind . INTERNAL ) { void ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; } } notifyTransitionEnd ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . TRANSITION_END , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ) ; notifyTransitionMonitor ( org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.Transition<S,E> , java.lang.System . long ( ) - long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , Action < S , E > org.springframework.statemachine.support.Action<S,E> , long long ) { notifyActionMonitor ( org.springframework.statemachine.support.StateMachine<S,E> , org.springframework.statemachine.support.Action<S,E> , long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , Action < S , E > org.springframework.statemachine.support.Action<S,E> , long long ) { notifyActionMonitor ( org.springframework.statemachine.support.StateMachine<S,E> , org.springframework.statemachine.support.Action<S,E> , long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.statemachine.support.BeanFactory ) throws org.springframework.statemachine.support.BeansException { if ( getBeanFactory ( ) == null ) { super. setBeanFactory ( org.springframework.statemachine.support.BeanFactory ) ; if ( org.springframework.statemachine.support.StateMachineExecutor<S,E> instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) org.springframework.statemachine.support.StateMachineExecutor<S,E> ) . setBeanFactory ( org.springframework.statemachine.support.BeanFactory ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStart ( ) ; if ( org.springframework.statemachine.support.State<S,E> != null ) { if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING ) ; } void ( ) ; org.springframework.statemachine.support.StateMachineExecutor<S,E> . setInitialEnabled ( false ) ; org.springframework.statemachine.support.StateMachineExecutor<S,E> . start ( ) ; StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATEMACHINE_START , null , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; notifyStateMachineStarted ( org.springframework.statemachine.support.StateContext<S,E> ) ; return; } void ( ) ; if ( java.lang.Boolean != null && ! java.lang.Boolean ) { if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING ) ; } org.springframework.statemachine.support.StateMachineExecutor<S,E> . setInitialEnabled ( false ) ; } else { org.springframework.statemachine.support.StateMachineExecutor<S,E> . setForwardedInitialEvent ( org.springframework.statemachine.support.Message<E> ) ; } org.springframework.statemachine.support.StateMachineExecutor<S,E> . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { synchronized ( java.lang.Object ) { org.springframework.statemachine.support.StateMachineExecutor<S,E> . stop ( ) ; notifyStateMachineStopped ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATEMACHINE_STOP , null , null , this ) ) ; org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; org.springframework.statemachine.support.State<S,E> = null ; java.lang.Boolean = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception == null ) { java.lang.Exception = null ; } else { java.lang.Exception = getStateMachineInterceptors ( ) . stateMachineError ( this , java.lang.Exception ) ; java.lang.Exception = java.lang.Exception ; } if ( java.lang.Exception != null ) { notifyStateMachineError ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATEMACHINE_ERROR , null , null , this , java.lang.Exception ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.lang.Exception != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineListener < S , E > org.springframework.statemachine.support.StateMachineListener<S,E> ) { getStateListener ( ) . register ( org.springframework.statemachine.support.StateMachineListener<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineListener < S , E > org.springframework.statemachine.support.StateMachineListener<S,E> ) { getStateListener ( ) . unregister ( org.springframework.statemachine.support.StateMachineListener<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; if ( org.springframework.statemachine.support.State<S,E> == null ) { return ! isRunning ( ) ; } else { return org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) != null && org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . getKind ( ) == PseudoStateKind . END ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> ( ) { return java.util.Collections . java.util.Collection<org.springframework.statemachine.support.State<S,E>> ( java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ( ) { return java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.statemachine.support.StateMachineAccessor<S,E> < S , E > org.springframework.statemachine.support.StateMachineAccessor<S,E> ( ) { return new StateMachineAccessor < S , E > ( ) { @ java.lang.Override public void void ( StateMachineFunction < StateMachineAccess < S , E > > org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> ) { org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> . apply ( org.springframework.statemachine.support.AbstractStateMachine .this ) ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; org.springframework.statemachine.support.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithAllRegions ( org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> ) ; } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { ( ( StateMachine < S , E > ) org.springframework.statemachine.support.Region<S,E> ) . getStateMachineAccessor ( ) . doWithAllRegions ( org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> ) ; } } } } @ java.lang.Override public java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> < StateMachineAccess < S , E > > java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> ( ) { java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> < StateMachineAccess < S , E > > java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> = new java.util.ArrayList<org.springframework.statemachine.support.StateMachineAccess<S,E>> < StateMachineAccess < S , E > > ( ) ; java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> . add ( org.springframework.statemachine.support.AbstractStateMachine .this ) ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; if ( org.springframework.statemachine.support.StateMachine<S,E> instanceof StateMachineAccess ) { java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> . add ( ( StateMachineAccess < S , E > ) org.springframework.statemachine.support.StateMachine<S,E> ) ; } } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> . add ( ( StateMachineAccess < S , E > ) org.springframework.statemachine.support.Region<S,E> ) ; } } } return java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> ; } @ java.lang.Override public void void ( StateMachineFunction < StateMachineAccess < S , E > > org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> ) { org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> . apply ( org.springframework.statemachine.support.AbstractStateMachine .this ) ; } @ java.lang.Override public org.springframework.statemachine.support.StateMachineAccess<S,E> < S , E > org.springframework.statemachine.support.StateMachineAccess<S,E> ( ) { return org.springframework.statemachine.support.AbstractStateMachine .this ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineFunction < StateMachineAccess < S , E > > org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> ) { org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> . apply ( org.springframework.statemachine.support.AbstractStateMachine .this ) ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; org.springframework.statemachine.support.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithAllRegions ( org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> ) ; } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { ( ( StateMachine < S , E > ) org.springframework.statemachine.support.Region<S,E> ) . getStateMachineAccessor ( ) . doWithAllRegions ( org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> < StateMachineAccess < S , E > > java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> ( ) { java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> < StateMachineAccess < S , E > > java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> = new java.util.ArrayList<org.springframework.statemachine.support.StateMachineAccess<S,E>> < StateMachineAccess < S , E > > ( ) ; java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> . add ( org.springframework.statemachine.support.AbstractStateMachine .this ) ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; if ( org.springframework.statemachine.support.StateMachine<S,E> instanceof StateMachineAccess ) { java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> . add ( ( StateMachineAccess < S , E > ) org.springframework.statemachine.support.StateMachine<S,E> ) ; } } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> . add ( ( StateMachineAccess < S , E > ) org.springframework.statemachine.support.Region<S,E> ) ; } } } return java.util.List<org.springframework.statemachine.support.StateMachineAccess<S,E>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineFunction < StateMachineAccess < S , E > > org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> ) { org.springframework.statemachine.support.StateMachineFunction<org.springframework.statemachine.support.StateMachineAccess<S,E>> . apply ( org.springframework.statemachine.support.AbstractStateMachine .this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.support.StateMachineAccess<S,E> < S , E > org.springframework.statemachine.support.StateMachineAccess<S,E> ( ) { return org.springframework.statemachine.support.AbstractStateMachine .this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { this . org.springframework.statemachine.support.StateMachine<S,E> = org.springframework.statemachine.support.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { this . org.springframework.statemachine.support.StateMachine<S,E> = org.springframework.statemachine.support.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { org.springframework.statemachine.support.StateMachineExecutor<S,E> . execute ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < E > org.springframework.statemachine.support.Message<E> ) { org.springframework.statemachine.support.Message<E> = org.springframework.statemachine.support.Message<E> ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.StateMachine<S,E> < S , E > org.springframework.statemachine.support.StateMachine<S,E> ( ) { return org.springframework.statemachine.support.StateMachine<S,E> != null ? org.springframework.statemachine.support.StateMachine<S,E> : this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.util.ArrayList<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.ArrayList<org.springframework.statemachine.support.State<S,E>> = new java.util.ArrayList<org.springframework.statemachine.support.State<S,E>> < State < S , E > > ( ) ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { java.util.ArrayList<org.springframework.statemachine.support.State<S,E>> . addAll ( org.springframework.statemachine.support.State<S,E> . getStates ( ) ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.ArrayList<org.springframework.statemachine.support.State<S,E>> ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.statemachine.support.State<S,E> . getId ( ) + STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( org.springframework.statemachine.support.State<S,E> != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . collectionToCommaDelimitedString ( org.springframework.statemachine.support.State<S,E> . getIds ( ) ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.UUID ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineContext < S , E > org.springframework.statemachine.support.StateMachineContext<S,E> ) { if ( org.springframework.statemachine.support.StateMachineContext<S,E> == null ) { org.springframework.statemachine.support.Log . info ( STRING ) ; org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; org.springframework.statemachine.support.ExtendedState . getVariables ( ) . clear ( ) ; return; } if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + this + STRING + org.springframework.statemachine.support.StateMachineContext<S,E> + STRING ) ; } void ( org.springframework.statemachine.support.StateMachineContext<S,E> . getId ( ) ) ; S S = org.springframework.statemachine.support.StateMachineContext<S,E> . getState ( ) ; boolean boolean = false ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ( ) ) { for ( State < S , E > org.springframework.statemachine.support.State<S,E> : org.springframework.statemachine.support.State<S,E> . getStates ( ) ) { if ( S != null && org.springframework.statemachine.support.State<S,E> . getIds ( ) . contains ( S ) ) { org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; for ( final StateMachineContext < S , E > org.springframework.statemachine.support.StateMachineContext<S,E> : org.springframework.statemachine.support.StateMachineContext<S,E> . getChilds ( ) ) { org.springframework.statemachine.support.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.support.StateMachineAccess<S,E> ) { org.springframework.statemachine.support.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.support.StateMachineContext<S,E> ) ; } } ) ; } org.springframework.statemachine.support.StateMachine<S,E> . start ( ) ; } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) && org.springframework.statemachine.support.StateMachineContext<S,E> . getChilds ( ) != null ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { for ( final StateMachineContext < S , E > org.springframework.statemachine.support.StateMachineContext<S,E> : org.springframework.statemachine.support.StateMachineContext<S,E> . getChilds ( ) ) { ( ( StateMachine < S , E > ) org.springframework.statemachine.support.Region<S,E> ) . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.support.StateMachineAccess<S,E> ) { org.springframework.statemachine.support.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.support.StateMachineContext<S,E> ) ; } } ) ; } } for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { org.springframework.statemachine.support.Region<S,E> . start ( ) ; } } if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + this + STRING + org.springframework.statemachine.support.StateMachineContext<S,E> + STRING ) ; } boolean = true ; break; } else if ( ! org.springframework.statemachine.support.StateMachineContext<S,E> . getChilds ( ) . isEmpty ( ) ) { if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { for ( final StateMachineContext < S , E > org.springframework.statemachine.support.StateMachineContext<S,E> : org.springframework.statemachine.support.StateMachineContext<S,E> . getChilds ( ) ) { ( ( StateMachine < S , E > ) org.springframework.statemachine.support.Region<S,E> ) . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.support.StateMachineAccess<S,E> ) { org.springframework.statemachine.support.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.support.StateMachineContext<S,E> ) ; } } ) ; } } for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { org.springframework.statemachine.support.Region<S,E> . start ( ) ; } } } } if ( boolean ) { break; } } if ( org.springframework.statemachine.support.PseudoState<S,E> != null && org.springframework.statemachine.support.StateMachineContext<S,E> . getHistoryStates ( ) != null ) { State < S , E > org.springframework.statemachine.support.State<S,E> = null ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ( ) ) { if ( org.springframework.statemachine.support.State<S,E> . getId ( ) . equals ( org.springframework.statemachine.support.StateMachineContext<S,E> . getHistoryStates ( ) . get ( null ) ) ) { org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; break; } } if ( org.springframework.statemachine.support.State<S,E> != null ) { ( ( HistoryPseudoState < S , E > ) org.springframework.statemachine.support.PseudoState<S,E> ) . setState ( org.springframework.statemachine.support.State<S,E> ) ; } } for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ( ) ) { if ( StateMachineUtils . isPseudoState ( org.springframework.statemachine.support.State<S,E> , PseudoStateKind . JOIN ) ) { JoinPseudoState < S , E > org.springframework.statemachine.support.JoinPseudoState<S,E> = ( JoinPseudoState < S , E > ) org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) ; java.util.Collection<S> < S > java.util.Collection<S> = org.springframework.statemachine.support.State<S,E> . getIds ( ) ; org.springframework.statemachine.support.JoinPseudoState<S,E> . reset ( java.util.Collection<S> ) ; } if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> = ( ( org.springframework.statemachine.support.AbstractStateMachine<S,E> < S , E > ) org.springframework.statemachine.support.StateMachine<S,E> ) . org.springframework.statemachine.support.PseudoState<S,E> ( ) ; if ( org.springframework.statemachine.support.PseudoState<S,E> != null ) { State < S , E > org.springframework.statemachine.support.State<S,E> = null ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : org.springframework.statemachine.support.StateMachine<S,E> . getStates ( ) ) { if ( org.springframework.statemachine.support.State<S,E> . getId ( ) . equals ( org.springframework.statemachine.support.StateMachineContext<S,E> . getHistoryStates ( ) . get ( org.springframework.statemachine.support.State<S,E> . getId ( ) ) ) ) { org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; break; } } if ( org.springframework.statemachine.support.State<S,E> != null ) { ( ( HistoryPseudoState < S , E > ) org.springframework.statemachine.support.PseudoState<S,E> ) . setState ( org.springframework.statemachine.support.State<S,E> ) ; } } } } if ( boolean && org.springframework.statemachine.support.StateMachineContext<S,E> . getExtendedState ( ) != null ) { this . org.springframework.statemachine.support.ExtendedState = org.springframework.statemachine.support.StateMachineContext<S,E> . getExtendedState ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.support.StateMachineAccess<S,E> ) { org.springframework.statemachine.support.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.support.StateMachineContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.support.StateMachineAccess<S,E> ) { org.springframework.statemachine.support.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.support.StateMachineContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.support.StateMachineAccess<S,E> ) { org.springframework.statemachine.support.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.support.StateMachineContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) { getStateMachineInterceptors ( ) . add ( org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) ; org.springframework.statemachine.support.StateMachineExecutor<S,E> . addStateMachineInterceptor ( org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineMonitor < S , E > org.springframework.statemachine.support.StateMachineMonitor<S,E> ) { getStateMachineMonitor ( ) . register ( org.springframework.statemachine.support.StateMachineMonitor<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.UUID java.util.UUID ( ) { return java.util.UUID ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected synchronized boolean boolean ( Message < E > org.springframework.statemachine.support.Message<E> ) { if ( ( org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> . shouldDefer ( org.springframework.statemachine.support.Message<E> ) ) ) { org.springframework.statemachine.support.Log . info ( STRING + org.springframework.statemachine.support.State<S,E> + STRING + org.springframework.statemachine.support.Message<E> ) ; org.springframework.statemachine.support.StateMachineExecutor<S,E> . queueDeferredEvent ( org.springframework.statemachine.support.Message<E> ) ; return true ; } if ( ( org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> . sendEvent ( org.springframework.statemachine.support.Message<E> ) ) ) { return true ; } if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + org.springframework.statemachine.support.Message<E> + STRING + this ) ; } for ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> : java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ) { State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ; Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> = org.springframework.statemachine.support.Transition<S,E> . getTrigger ( ) ; if ( StateMachineUtils . containsAtleastOne ( org.springframework.statemachine.support.State<S,E> . getIds ( ) , org.springframework.statemachine.support.State<S,E> . getIds ( ) ) ) { if ( org.springframework.statemachine.support.Trigger<S,E> != null && org.springframework.statemachine.support.Trigger<S,E> . evaluate ( new DefaultTriggerContext < S , E > ( org.springframework.statemachine.support.Message<E> . getPayload ( ) ) ) ) { org.springframework.statemachine.support.StateMachineExecutor<S,E> . queueEvent ( org.springframework.statemachine.support.Message<E> ) ; return true ; } } } if ( ( org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> . shouldDefer ( org.springframework.statemachine.support.Message<E> ) ) ) { org.springframework.statemachine.support.Log . info ( STRING + org.springframework.statemachine.support.State<S,E> + STRING + org.springframework.statemachine.support.Message<E> ) ; org.springframework.statemachine.support.StateMachineExecutor<S,E> . queueDeferredEvent ( org.springframework.statemachine.support.Message<E> ) ; return true ; } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { try { getStateMachineInterceptors ( ) . preStateChange ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . info ( STRING , java.lang.Exception ) ; return false ; } return true ; }  <METHOD_END>
<METHOD_START> private void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { try { getStateMachineInterceptors ( ) . postStateChange ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} }  <METHOD_END>
<METHOD_START> private boolean boolean ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> ) { return org.springframework.statemachine.support.Transition<S,E> != null && org.springframework.statemachine.support.Transition<S,E> . getKind ( ) == TransitionKind . INITIAL ; }  <METHOD_END>
<METHOD_START> private void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { if ( ! boolean ( org.springframework.statemachine.support.Transition<S,E> ) && ! StateMachineUtils . isTransientPseudoState ( org.springframework.statemachine.support.State<S,E> ) && ! boolean ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ) { return; } StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_CHANGED , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.StateContext<S,E> ) ; PseudoStateKind org.springframework.statemachine.support.PseudoStateKind = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) != null ? org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . getKind ( ) : null ; if ( org.springframework.statemachine.support.PseudoStateKind != null && ( org.springframework.statemachine.support.PseudoStateKind != PseudoStateKind . INITIAL && org.springframework.statemachine.support.PseudoStateKind != PseudoStateKind . JOIN && org.springframework.statemachine.support.PseudoStateKind != PseudoStateKind . FORK ) ) { boolean ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; } org.springframework.statemachine.support.PseudoStateKind = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) != null ? org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . getKind ( ) : null ; if ( org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . FORK ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; ForkPseudoState < S , E > org.springframework.statemachine.support.ForkPseudoState<S,E> = ( ForkPseudoState < S , E > ) org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) ; for ( State < S , E > org.springframework.statemachine.support.State<S,E> : org.springframework.statemachine.support.ForkPseudoState<S,E> . getForks ( ) ) { boolean ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , false , org.springframework.statemachine.support.StateMachine<S,E> , null , org.springframework.statemachine.support.ForkPseudoState<S,E> . getForks ( ) ) ; } } else { java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> = new java.util.ArrayList<org.springframework.statemachine.support.State<S,E>> <> ( ) ; java.util.Collection<org.springframework.statemachine.support.State<S,E>> . add ( org.springframework.statemachine.support.State<S,E> ) ; void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , true , org.springframework.statemachine.support.StateMachine<S,E> , null , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; org.springframework.statemachine.support.StateMachineExecutor<S,E> . execute ( ) ; if ( boolean ( ) ) { stop ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.State<S,E> < S , E > org.springframework.statemachine.support.State<S,E> ( State < S , E > org.springframework.statemachine.support.State<S,E> , StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> ) { PseudoStateKind org.springframework.statemachine.support.PseudoStateKind = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) != null ? org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . getKind ( ) : null ; if ( org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . INITIAL || org.springframework.statemachine.support.PseudoStateKind == PseudoStateKind . FORK ) { return org.springframework.statemachine.support.State<S,E> ; } else if ( org.springframework.statemachine.support.PseudoStateKind != null ) { State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . entry ( org.springframework.statemachine.support.StateContext<S,E> ) ; if ( org.springframework.statemachine.support.State<S,E> == null ) { return org.springframework.statemachine.support.State<S,E> ; } else { return org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.StateContext<S,E> ) ; } } else { return org.springframework.statemachine.support.State<S,E> ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> = org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) ; if ( org.springframework.statemachine.support.PseudoState<S,E> != null ) { java.util.List<org.springframework.statemachine.support.PseudoStateListener<S,E>> < PseudoStateListener < S , E > > java.util.List<org.springframework.statemachine.support.PseudoStateListener<S,E>> = new java.util.ArrayList<org.springframework.statemachine.support.PseudoStateListener<S,E>> < PseudoStateListener < S , E > > ( ) ; java.util.List<org.springframework.statemachine.support.PseudoStateListener<S,E>> . add ( new PseudoStateListener < S , E > ( ) { @ java.lang.Override public void void ( PseudoStateContext < S , E > org.springframework.statemachine.support.PseudoStateContext<S,E> ) { PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> = org.springframework.statemachine.support.PseudoStateContext<S,E> . getPseudoState ( ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.PseudoState<S,E> ) ; StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_EXIT , null , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.StateContext<S,E> ) ; Transition < S , E > org.springframework.statemachine.support.Transition<S,E> = org.springframework.statemachine.support.Transition<S,E> ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.State<S,E> ) ; void ( org.springframework.statemachine.support.State<S,E> , null , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; org.springframework.statemachine.support.PseudoState<S,E> . exit ( org.springframework.statemachine.support.StateContext<S,E> ) ; } } ) ; org.springframework.statemachine.support.PseudoState<S,E> . setPseudoStateListeners ( java.util.List<org.springframework.statemachine.support.PseudoStateListener<S,E>> ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PseudoStateContext < S , E > org.springframework.statemachine.support.PseudoStateContext<S,E> ) { PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> = org.springframework.statemachine.support.PseudoStateContext<S,E> . getPseudoState ( ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.PseudoState<S,E> ) ; StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_EXIT , null , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.StateContext<S,E> ) ; Transition < S , E > org.springframework.statemachine.support.Transition<S,E> = org.springframework.statemachine.support.Transition<S,E> ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.State<S,E> ) ; void ( org.springframework.statemachine.support.State<S,E> , null , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) ) ; org.springframework.statemachine.support.PseudoState<S,E> . exit ( org.springframework.statemachine.support.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.Transition<S,E> < S , E > org.springframework.statemachine.support.Transition<S,E> ( State < S , E > org.springframework.statemachine.support.State<S,E> , State < S , E > org.springframework.statemachine.support.State<S,E> ) { for ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> : java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ) { if ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) == org.springframework.statemachine.support.State<S,E> && org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) == org.springframework.statemachine.support.State<S,E> ) { return org.springframework.statemachine.support.Transition<S,E> ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.State<S,E> < S , E > org.springframework.statemachine.support.State<S,E> ( PseudoState < S , E > org.springframework.statemachine.support.PseudoState<S,E> ) { for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) == org.springframework.statemachine.support.PseudoState<S,E> ) { return org.springframework.statemachine.support.State<S,E> ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.StateContext<S,E> < S , E > org.springframework.statemachine.support.StateContext<S,E> ( Stage org.springframework.statemachine.support.Stage , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { MessageHeaders org.springframework.statemachine.support.MessageHeaders = org.springframework.statemachine.support.Message<E> != null ? org.springframework.statemachine.support.Message<E> . getHeaders ( ) : new MessageHeaders ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; return new DefaultStateContext < S , E > ( org.springframework.statemachine.support.Stage , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.MessageHeaders , org.springframework.statemachine.support.ExtendedState , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , null , null , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.StateContext<S,E> < S , E > org.springframework.statemachine.support.StateContext<S,E> ( Stage org.springframework.statemachine.support.Stage , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.lang.Exception java.lang.Exception ) { MessageHeaders org.springframework.statemachine.support.MessageHeaders = org.springframework.statemachine.support.Message<E> != null ? org.springframework.statemachine.support.Message<E> . getHeaders ( ) : new MessageHeaders ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; return new DefaultStateContext < S , E > ( org.springframework.statemachine.support.Stage , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.MessageHeaders , org.springframework.statemachine.support.ExtendedState , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , null , null , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.StateContext<S,E> < S , E > org.springframework.statemachine.support.StateContext<S,E> ( Stage org.springframework.statemachine.support.Stage , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , State < S , E > org.springframework.statemachine.support.State<S,E> , State < S , E > org.springframework.statemachine.support.State<S,E> ) { MessageHeaders org.springframework.statemachine.support.MessageHeaders = org.springframework.statemachine.support.Message<E> != null ? org.springframework.statemachine.support.Message<E> . getHeaders ( ) : new MessageHeaders ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; return new DefaultStateContext < S , E > ( org.springframework.statemachine.support.Stage , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.MessageHeaders , org.springframework.statemachine.support.ExtendedState , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.State<S,E> , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.StateContext<S,E> < S , E > org.springframework.statemachine.support.StateContext<S,E> ( Stage org.springframework.statemachine.support.Stage , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { MessageHeaders org.springframework.statemachine.support.MessageHeaders = org.springframework.statemachine.support.Message<E> != null ? org.springframework.statemachine.support.Message<E> . getHeaders ( ) : new MessageHeaders ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; return new DefaultStateContext < S , E > ( org.springframework.statemachine.support.Stage , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.MessageHeaders , org.springframework.statemachine.support.ExtendedState , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , null , null , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.State<S,E> < S , E > org.springframework.statemachine.support.State<S,E> ( State < S , E > org.springframework.statemachine.support.State<S,E> ) { for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> . getStates ( ) . contains ( org.springframework.statemachine.support.State<S,E> ) ) { return org.springframework.statemachine.support.State<S,E> ; } } return null ; }  <METHOD_END>
<METHOD_START> synchronized void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , boolean boolean , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , boolean , org.springframework.statemachine.support.StateMachine<S,E> , null , null ) ; }  <METHOD_END>
<METHOD_START> synchronized void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , boolean boolean , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.State<S,E> ) ; boolean boolean = false ; if ( org.springframework.statemachine.support.Transition<S,E> != null ) { boolean = StateMachineUtils . isSubstate ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ) ; if ( boolean && org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) { org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ; } } boolean boolean = false ; if ( java.util.Collection<org.springframework.statemachine.support.State<S,E>> . contains ( org.springframework.statemachine.support.State<S,E> ) ) { if ( boolean ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; if ( ! isRunning ( ) ) { start ( ) ; } void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; notifyStateChanged ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_CHANGED , org.springframework.statemachine.support.Message<E> , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.State<S,E> ) ) ; boolean = true ; } else if ( org.springframework.statemachine.support.State<S,E> == null && StateMachineUtils . isSubstate ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.State<S,E> ) ) { if ( boolean ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; if ( ! isRunning ( ) ) { start ( ) ; } void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; notifyStateChanged ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_CHANGED , org.springframework.statemachine.support.Message<E> , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.State<S,E> ) ) ; } if ( org.springframework.statemachine.support.State<S,E> != null && ! boolean ) { if ( org.springframework.statemachine.support.State<S,E> != null ) { if ( boolean ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } if ( org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.State<S,E> ) { if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; if ( ! org.springframework.statemachine.support.StateMachine<S,E> . isComplete ( ) && org.springframework.statemachine.support.StateMachine<S,E> . getState ( ) == org.springframework.statemachine.support.State<S,E> ) { if ( org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.State<S,E> ) { if ( boolean ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; } org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; ( ( org.springframework.statemachine.support.AbstractStateMachine<S,E> < S , E > ) org.springframework.statemachine.support.StateMachine<S,E> ) . void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , false , org.springframework.statemachine.support.StateMachine<S,E> ) ; return; } } } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { if ( org.springframework.statemachine.support.Region<S,E> . getState ( ) == org.springframework.statemachine.support.State<S,E> ) { if ( org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.State<S,E> ) { if ( boolean ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; } org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; ( ( org.springframework.statemachine.support.AbstractStateMachine<S,E> < S , E > ) org.springframework.statemachine.support.Region<S,E> ) . void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , false , org.springframework.statemachine.support.StateMachine<S,E> ) ; return; } } } } } boolean boolean = org.springframework.statemachine.support.State<S,E> != org.springframework.statemachine.support.State<S,E> ; if ( ! boolean && ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) == org.springframework.statemachine.support.State<S,E> && StateMachineUtils . isSubstate ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) ) ) { boolean = true ; } org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ; if ( boolean ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; ( ( org.springframework.statemachine.support.AbstractStateMachine<S,E> < S , E > ) org.springframework.statemachine.support.StateMachine<S,E> ) . void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , false , org.springframework.statemachine.support.StateMachine<S,E> ) ; } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { ( ( org.springframework.statemachine.support.AbstractStateMachine<S,E> < S , E > ) org.springframework.statemachine.support.Region<S,E> ) . void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , false , org.springframework.statemachine.support.StateMachine<S,E> ) ; } } } } if ( org.springframework.statemachine.support.PseudoState<S,E> != null && org.springframework.statemachine.support.Transition<S,E> . getKind ( ) != TransitionKind . INITIAL ) { if ( org.springframework.statemachine.support.PseudoState<S,E> . getKind ( ) == PseudoStateKind . HISTORY_SHALLOW ) { ( ( HistoryPseudoState < S , E > ) org.springframework.statemachine.support.PseudoState<S,E> ) . setState ( org.springframework.statemachine.support.State<S,E> ) ; } else if ( org.springframework.statemachine.support.PseudoState<S,E> . getKind ( ) == PseudoStateKind . HISTORY_DEEP ) { ( ( HistoryPseudoState < S , E > ) org.springframework.statemachine.support.PseudoState<S,E> ) . setState ( org.springframework.statemachine.support.State<S,E> ) ; } } if ( org.springframework.statemachine.support.StateMachine<S,E> != this && boolean ( ) ) { stop ( ) ; } }  <METHOD_END>
<METHOD_START> void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , null , null ) ; }  <METHOD_END>
<METHOD_START> void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> == null ) { return; } if ( org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; ( ( org.springframework.statemachine.support.AbstractStateMachine<S,E> < S , E > ) org.springframework.statemachine.support.StateMachine<S,E> ) . void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } else if ( org.springframework.statemachine.support.State<S,E> . isOrthogonal ( ) ) { java.util.Collection<org.springframework.statemachine.support.Region<S,E>> < Region < S , E > > java.util.Collection<org.springframework.statemachine.support.Region<S,E>> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getRegions ( ) ; for ( Region < S , E > org.springframework.statemachine.support.Region<S,E> : java.util.Collection<org.springframework.statemachine.support.Region<S,E>> ) { if ( org.springframework.statemachine.support.Region<S,E> . getStates ( ) . contains ( org.springframework.statemachine.support.State<S,E> ) ) { void ( org.springframework.statemachine.support.Region<S,E> . getState ( ) , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } } void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } else { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , null , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> == null ) { return; } org.springframework.statemachine.support.Log . trace ( STRING + org.springframework.statemachine.support.State<S,E> + STRING ) ; StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_EXIT , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; if ( org.springframework.statemachine.support.Transition<S,E> != null ) { State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) ; boolean boolean = org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> != org.springframework.statemachine.support.State<S,E> ; boolean boolean = StateMachineUtils . isSubstate ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) , org.springframework.statemachine.support.State<S,E> ) ; boolean boolean = StateMachineUtils . isSubstate ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , org.springframework.statemachine.support.State<S,E> ) ; if ( org.springframework.statemachine.support.Transition<S,E> . getKind ( ) == TransitionKind . LOCAL && StateMachineUtils . isSubstate ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) , org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) && org.springframework.statemachine.support.Transition<S,E> . getSource ( ) == org.springframework.statemachine.support.State<S,E> ) { return; } else if ( org.springframework.statemachine.support.Transition<S,E> . getKind ( ) == TransitionKind . LOCAL && StateMachineUtils . isSubstate ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ) && org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) == org.springframework.statemachine.support.State<S,E> ) { return; } if ( org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getSource ( ) && org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) {			} else if ( ! boolean && ! boolean && org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ) {			} else if ( ! boolean && ! boolean && org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) {			} else if ( boolean ) {			} else if ( ! boolean && ! boolean && org.springframework.statemachine.support.State<S,E> == null ) {			} else if ( ! boolean && ! boolean && ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) == org.springframework.statemachine.support.State<S,E> && StateMachineUtils . isSubstate ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) ) ) {			} else if ( StateMachineUtils . isNormalPseudoState ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) ) { if ( boolean ( org.springframework.statemachine.support.State<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ) { return; } } else if ( org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> != org.springframework.statemachine.support.State<S,E> && org.springframework.statemachine.support.State<S,E> . getStates ( ) . contains ( org.springframework.statemachine.support.State<S,E> ) ) {			} else if ( ! boolean && ! boolean ) { return; } } org.springframework.statemachine.support.Log . debug ( STRING + org.springframework.statemachine.support.State<S,E> + STRING ) ; org.springframework.statemachine.support.State<S,E> . exit ( org.springframework.statemachine.support.StateContext<S,E> ) ; notifyStateExited ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_EXIT , org.springframework.statemachine.support.Message<E> , null , org.springframework.statemachine.support.StateMachine<S,E> ( ) , org.springframework.statemachine.support.State<S,E> , null ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( State < S , E > org.springframework.statemachine.support.State<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( java.util.Collection<org.springframework.statemachine.support.State<S,E>> == null || org.springframework.statemachine.support.State<S,E> == null ) { return false ; } for ( State < S , E > org.springframework.statemachine.support.State<S,E> : java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( StateMachineUtils . isSubstate ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.State<S,E> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { void ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , null , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( State < S , E > org.springframework.statemachine.support.State<S,E> , Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) { if ( org.springframework.statemachine.support.State<S,E> == null ) { return; } org.springframework.statemachine.support.Log . trace ( STRING + org.springframework.statemachine.support.State<S,E> + STRING ) ; StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_ENTRY , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> , java.util.Collection<org.springframework.statemachine.support.State<S,E>> ) ; if ( org.springframework.statemachine.support.Transition<S,E> != null ) { State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.State<S,E> ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ) ; boolean boolean = org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> != org.springframework.statemachine.support.State<S,E> ; boolean boolean = StateMachineUtils . isSubstate ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) , org.springframework.statemachine.support.State<S,E> ) ; boolean boolean = StateMachineUtils . isSubstate ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , org.springframework.statemachine.support.State<S,E> ) ; if ( org.springframework.statemachine.support.Transition<S,E> . getKind ( ) == TransitionKind . LOCAL && StateMachineUtils . isSubstate ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) , org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) && org.springframework.statemachine.support.Transition<S,E> . getSource ( ) == org.springframework.statemachine.support.State<S,E> ) { return; } else if ( org.springframework.statemachine.support.Transition<S,E> . getKind ( ) == TransitionKind . LOCAL && StateMachineUtils . isSubstate ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ) && org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) == org.springframework.statemachine.support.State<S,E> ) { return; } if ( org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getSource ( ) && org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) {			} else if ( ! boolean && ! boolean && org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) {			} else if ( boolean ) {			} else if ( ! boolean && ! boolean && org.springframework.statemachine.support.State<S,E> == null ) {			} else if ( boolean && ! boolean && org.springframework.statemachine.support.State<S,E> == org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) { if ( boolean ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) , org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) && org.springframework.statemachine.support.Transition<S,E> . getKind ( ) != TransitionKind . LOCAL && boolean ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) ) { return; } } else if ( ! boolean && ! boolean && ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) == org.springframework.statemachine.support.State<S,E> && StateMachineUtils . isSubstate ( org.springframework.statemachine.support.State<S,E> , org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) ) ) {			} else if ( ! boolean && ! boolean ) { if ( ! StateMachineUtils . isTransientPseudoState ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) ) ) { return; } } } if ( ! StateMachineUtils . isPseudoState ( org.springframework.statemachine.support.State<S,E> , PseudoStateKind . JOIN ) ) { notifyStateEntered ( org.springframework.statemachine.support.StateContext<S,E> ( Stage . STATE_ENTRY , org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ( ) , null , org.springframework.statemachine.support.State<S,E> ) ) ; } org.springframework.statemachine.support.Log . debug ( STRING + org.springframework.statemachine.support.State<S,E> + STRING ) ; org.springframework.statemachine.support.State<S,E> . entry ( org.springframework.statemachine.support.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> private static < S , E > boolean boolean ( State < S , E > org.springframework.statemachine.support.State<S,E> ) { return org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) != null && org.springframework.statemachine.support.State<S,E> . getPseudoState ( ) . getKind ( ) == PseudoStateKind . INITIAL ; }  <METHOD_END>
<METHOD_START> private static < S , E > boolean boolean ( State < S , E > org.springframework.statemachine.support.State<S,E> , State < S , E > org.springframework.statemachine.support.State<S,E> ) { if ( org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> . isSubmachineState ( ) ) { StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> = ( ( AbstractState < S , E > ) org.springframework.statemachine.support.State<S,E> ) . getSubmachine ( ) ; return org.springframework.statemachine.support.StateMachine<S,E> . getStates ( ) . contains ( org.springframework.statemachine.support.State<S,E> ) ; } else { return false ; } }  <METHOD_END>
