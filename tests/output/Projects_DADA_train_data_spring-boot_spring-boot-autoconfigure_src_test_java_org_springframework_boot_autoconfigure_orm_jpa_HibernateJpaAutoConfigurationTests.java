<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return HibernateJpaAutoConfiguration .class ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . context , STRING , STRING ) ; setupTestConfiguration ( ) ; this . org.springframework.boot.autoconfigure.orm.jpa.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.orm.jpa.ExpectedException . expectMessage ( STRING ) ; this . context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . context , STRING ) ; setupTestConfiguration ( ) ; this . context . refresh ( ) ; assertThat ( new JdbcTemplate ( this . context . getBean ( javax.sql.DataSource .class ) ) . queryForObject ( STRING , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . context , STRING , STRING , STRING ) ; setupTestConfiguration ( ) ; this . context . register ( FlywayAutoConfiguration .class ) ; this . context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . context , STRING , STRING , STRING ) ; setupTestConfiguration ( ) ; this . context . register ( LiquibaseAutoConfiguration .class ) ; this . context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . context . register ( JtaAutoConfiguration .class ) ; setupTestConfiguration ( ) ; this . context . refresh ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . context . getBean ( LocalContainerEntityManagerFactoryBean .class ) . getJpaPropertyMap ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isInstanceOf ( SpringJtaPlatform .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . context , STRING + org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfigurationTests.TestJtaPlatform .class . java.lang.String ( ) ) ; this . context . register ( JtaAutoConfiguration .class ) ; setupTestConfiguration ( ) ; this . context . refresh ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . context . getBean ( LocalContainerEntityManagerFactoryBean .class ) . getJpaPropertyMap ( ) ; assertThat ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfigurationTests.TestJtaPlatform .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . context , STRING , STRING ) ; setupTestConfiguration ( ) ; this . context . refresh ( ) ; JpaTransactionManager org.springframework.boot.autoconfigure.orm.jpa.JpaTransactionManager = this . context . getBean ( JpaTransactionManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.orm.jpa.JpaTransactionManager . getDefaultTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.orm.jpa.JpaTransactionManager . isRollbackOnCommitFailure ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.orm.jpa.TransactionManager org.springframework.boot.autoconfigure.orm.jpa.TransactionManager ( ) { return mock ( TransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.orm.jpa.UserTransaction org.springframework.boot.autoconfigure.orm.jpa.UserTransaction ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Transaction org.springframework.boot.autoconfigure.orm.jpa.Transaction ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Synchronization org.springframework.boot.autoconfigure.orm.jpa.Synchronization ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) org.springframework.boot.autoconfigure.orm.jpa.SystemException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
