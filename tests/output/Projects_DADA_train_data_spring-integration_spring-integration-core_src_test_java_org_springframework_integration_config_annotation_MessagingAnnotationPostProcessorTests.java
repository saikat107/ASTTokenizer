<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean = new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean , STRING ) ; assertTrue ( org.springframework.integration.config.annotation.TestApplicationContext . containsBean ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.annotation.TestApplicationContext . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof AbstractEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractApplicationContext org.springframework.integration.config.annotation.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests> ( ) ) ; MessageChannel org.springframework.integration.config.annotation.MessageChannel = ( MessageChannel ) org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.config.annotation.PollableChannel = ( PollableChannel ) org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { AbstractApplicationContext org.springframework.integration.config.annotation.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests> ( ) ) ; org.springframework.integration.config.annotation.AbstractApplicationContext . start ( ) ; MessageChannel org.springframework.integration.config.annotation.MessageChannel = ( MessageChannel ) org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.config.annotation.PollableChannel = ( PollableChannel ) org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING ) ; GenericMessage < java.lang.String > org.springframework.integration.config.annotation.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.config.annotation.MessageChannel . send ( org.springframework.integration.config.annotation.GenericMessage<java.lang.String> ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.MessageChannel = org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.config.annotation.PollableChannel = org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING , PollableChannel .class ) ; org.springframework.integration.config.annotation.MessageChannel . send ( org.springframework.integration.config.annotation.GenericMessage<java.lang.String> ) ; org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { AbstractApplicationContext org.springframework.integration.config.annotation.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests> ( ) ) ; org.springframework.integration.config.annotation.AbstractApplicationContext . start ( ) ; MessageChannel org.springframework.integration.config.annotation.MessageChannel = ( MessageChannel ) org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.config.annotation.PollableChannel = ( PollableChannel ) org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { AbstractApplicationContext org.springframework.integration.config.annotation.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests> ( ) ) ; org.springframework.integration.config.annotation.AbstractApplicationContext . start ( ) ; MessageChannel org.springframework.integration.config.annotation.MessageChannel = ( MessageChannel ) org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.config.annotation.PollableChannel = ( PollableChannel ) org.springframework.integration.config.annotation.AbstractApplicationContext . getBean ( STRING ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.PollableChannel . receive ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , new DirectChannel ( ) ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.OutboundOnlyTestBean org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.OutboundOnlyTestBean = new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.OutboundOnlyTestBean ( java.util.concurrent.CountDownLatch ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.OutboundOnlyTestBean , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; DestinationResolver < MessageChannel > org.springframework.integration.config.annotation.DestinationResolver<org.springframework.integration.config.annotation.MessageChannel> = new BeanFactoryChannelResolver ( org.springframework.integration.config.annotation.TestApplicationContext ) ; MessageChannel org.springframework.integration.config.annotation.MessageChannel = org.springframework.integration.config.annotation.DestinationResolver<org.springframework.integration.config.annotation.MessageChannel> . resolveDestination ( STRING ) ; org.springframework.integration.config.annotation.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertEquals ( NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.OutboundOnlyTestBean . java.lang.String ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.config.annotation.QueueChannel = new QueueChannel ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean = new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . build ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( org.springframework.integration.config.annotation.Message<> ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.annotation.Message<> ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.ServiceActivatorAnnotatedBean . java.lang.Boolean ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.config.annotation.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; ProxyFactory org.springframework.integration.config.annotation.ProxyFactory = new ProxyFactory ( new AnnotatedTestService ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.annotation.ProxyFactory . getProxy ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( java.lang.Object , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.config.annotation.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.SimpleAnnotatedEndpointSubclass ( ) , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.config.annotation.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; ProxyFactory org.springframework.integration.config.annotation.ProxyFactory = new ProxyFactory ( new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.SimpleAnnotatedEndpointSubclass ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.annotation.ProxyFactory . getProxy ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( java.lang.Object , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.config.annotation.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.SimpleAnnotatedEndpointImplementation ( ) , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.config.annotation.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.SimpleAnnotatedEndpointImplementation ( ) , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; QueueChannel org.springframework.integration.config.annotation.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; ProxyFactory org.springframework.integration.config.annotation.ProxyFactory = new ProxyFactory ( new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.SimpleAnnotatedEndpointImplementation ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.annotation.ProxyFactory . getProxy ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( java.lang.Object , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.config.annotation.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; DirectChannel org.springframework.integration.config.annotation.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; QueueChannel org.springframework.integration.config.annotation.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.TransformerAnnotationTestBean org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.TransformerAnnotationTestBean = new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.TransformerAnnotationTestBean ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.TransformerAnnotationTestBean , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.config.annotation.Message<> . getPayload ( ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorTests.EventHandler public void void ( java.lang.Object java.lang.Object ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Transformer ( inputChannel = STRING , outputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.config.annotation.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.config.annotation.Message<?> ) throws java.lang.Exception { return org.springframework.integration.config.annotation.ExecutionCallback . execute ( ) + STRING ; }  <METHOD_END>
