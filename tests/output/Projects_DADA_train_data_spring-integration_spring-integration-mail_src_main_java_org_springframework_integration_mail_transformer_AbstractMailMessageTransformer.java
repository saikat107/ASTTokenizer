<METHOD_START> @ java.lang.Override public final void void ( BeanFactory org.springframework.integration.mail.transformer.BeanFactory ) { this . org.springframework.integration.mail.transformer.BeanFactory = org.springframework.integration.mail.transformer.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.mail.transformer.MessageBuilderFactory org.springframework.integration.mail.transformer.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.mail.transformer.BeanFactory != null ) { this . org.springframework.integration.mail.transformer.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.mail.transformer.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.mail.transformer.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mail.transformer.Message<?> < ? > org.springframework.integration.mail.transformer.Message<?> ( Message < ? > org.springframework.integration.mail.transformer.Message<?> ) { java.lang.Object java.lang.Object = org.springframework.integration.mail.transformer.Message<> . getPayload ( ) ; if ( ! ( java.lang.Object instanceof javax . javax.mail . javax.mail ) ) { throw new MessageTransformationException ( org.springframework.integration.mail.transformer.Message<> , this . java.lang.Class<? extends org.springframework.integration.mail.transformer.AbstractMailMessageTransformer> ( ) . java.lang.String ( ) + STRING ) ; } javax . javax.mail . javax.mail javax.mail.Message = ( javax . javax.mail . javax.mail ) java.lang.Object ; AbstractIntegrationMessageBuilder < T > org.springframework.integration.mail.transformer.AbstractIntegrationMessageBuilder<T> = null ; try { org.springframework.integration.mail.transformer.AbstractIntegrationMessageBuilder<T> = this . org.springframework.integration.mail.transformer.AbstractIntegrationMessageBuilder<T> ( javax.mail.Message ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageTransformationException ( org.springframework.integration.mail.transformer.Message<> , STRING , java.lang.Exception ) ; } if ( org.springframework.integration.mail.transformer.AbstractIntegrationMessageBuilder<T> == null ) { throw new MessageTransformationException ( org.springframework.integration.mail.transformer.Message<> , STRING ) ; } org.springframework.integration.mail.transformer.AbstractIntegrationMessageBuilder<T> . copyHeaders ( this . java.util.Map<java.lang.String,java.lang.Object> ( javax.mail.Message ) ) ; return org.springframework.integration.mail.transformer.AbstractIntegrationMessageBuilder<T> . build ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.mail.transformer.AbstractIntegrationMessageBuilder<T> < T > org.springframework.integration.mail.transformer.AbstractIntegrationMessageBuilder<T> ( javax . javax.mail . javax.mail javax.mail.Message ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( javax . javax.mail . javax.mail javax.mail.Message ) { return MailUtils . extractStandardHeaders ( javax.mail.Message ) ; }  <METHOD_END>
