<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = java.util.Map<java.lang.String,org.springframework.integration.channel.config.MessageChannel> . get ( STRING ) ; assertEquals ( ExecutorChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ; assertEquals ( ErrorHandlingTaskExecutor .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertSame ( org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) , new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ) ; assertTrue ( ( java.lang.Boolean ) java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ) ; assertEquals ( RoundRobinLoadBalancingStrategy .class , java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = java.util.Map<java.lang.String,org.springframework.integration.channel.config.MessageChannel> . get ( STRING ) ; assertEquals ( DirectChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; assertFalse ( ( java.lang.Boolean ) java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ) ; assertEquals ( RoundRobinLoadBalancingStrategy .class , java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = java.util.Map<java.lang.String,org.springframework.integration.channel.config.MessageChannel> . get ( STRING ) ; assertEquals ( DirectChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; assertTrue ( ( java.lang.Boolean ) java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ) ; assertEquals ( RoundRobinLoadBalancingStrategy .class , java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = java.util.Map<java.lang.String,org.springframework.integration.channel.config.MessageChannel> . get ( STRING ) ; assertEquals ( DirectChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; assertTrue ( ( java.lang.Boolean ) java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ) ; assertNull ( java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = java.util.Map<java.lang.String,org.springframework.integration.channel.config.MessageChannel> . get ( STRING ) ; assertEquals ( ExecutorChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; assertTrue ( ( java.lang.Boolean ) java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ) ; assertNull ( java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ; assertEquals ( ErrorHandlingTaskExecutor .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertSame ( org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) , new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = java.util.Map<java.lang.String,org.springframework.integration.channel.config.MessageChannel> . get ( STRING ) ; assertEquals ( ExecutorChannel .class , org.springframework.integration.channel.config.MessageChannel . getClass ( ) ) ; assertTrue ( ( java.lang.Boolean ) java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ) ; assertEquals ( RoundRobinLoadBalancingStrategy .class , java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) . getClass ( ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( STRING , org.springframework.integration.channel.config.MessageChannel ) ; assertEquals ( ErrorHandlingTaskExecutor .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertSame ( org.springframework.integration.channel.config.ApplicationContext . getBean ( STRING ) , new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.channel.config.MessageChannel = java.util.Map<java.lang.String,org.springframework.integration.channel.config.MessageChannel> . get ( STRING ) ; LoadBalancingStrategy org.springframework.integration.channel.config.LoadBalancingStrategy = TestUtils . getPropertyValue ( org.springframework.integration.channel.config.MessageChannel , STRING , LoadBalancingStrategy .class ) ; assertTrue ( org.springframework.integration.channel.config.LoadBalancingStrategy instanceof org.springframework.integration.channel.config.DispatchingChannelParserTests.SampleLoadBalancingStrategy ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.channel.config.DispatchingChannelParserTests> ( ) ) . close ( ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.channel.config.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.channel.config.BeanDefinitionParsingException . getMessage ( ) , Matchers . containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( java.lang.String java.lang.String , MessageChannel org.springframework.integration.channel.config.MessageChannel ) { return new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.channel.config.MessageChannel ) . getPropertyValue ( STRING ) ) . getPropertyValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.integration.channel.config.MessageHandler> < MessageHandler > java.util.Iterator<org.springframework.integration.channel.config.MessageHandler> ( Message < ? > org.springframework.integration.channel.config.Message<?> , java.util.Collection<org.springframework.integration.channel.config.MessageHandler> < MessageHandler > java.util.Collection<org.springframework.integration.channel.config.MessageHandler> ) { return java.util.Collection<org.springframework.integration.channel.config.MessageHandler> . iterator ( ) ; }  <METHOD_END>
