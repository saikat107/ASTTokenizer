<METHOD_START> public void ( ) { super( MimeTypeUtils . APPLICATION_XML , MimeTypeUtils . TEXT_XML ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.http.codec.xml.ResolvableType , MimeType org.springframework.http.codec.xml.MimeType ) { if ( super. canDecode ( org.springframework.http.codec.xml.ResolvableType , org.springframework.http.codec.xml.MimeType ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.http.codec.xml.ResolvableType . getRawClass ( ) ; return java.lang.Class<> . boolean ( javax.xml.bind.annotation.XmlRootElement .class ) || java.lang.Class<> . boolean ( javax.xml.bind.annotation.XmlType .class ) ; } else { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.codec.xml.Flux<java.lang.Object> < java.lang.Object > org.springframework.http.codec.xml.Flux<java.lang.Object> ( Publisher < DataBuffer > org.springframework.http.codec.xml.Publisher<org.springframework.http.codec.xml.DataBuffer> , ResolvableType org.springframework.http.codec.xml.ResolvableType , MimeType org.springframework.http.codec.xml.MimeType , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.http.codec.xml.ResolvableType . getRawClass ( ) ; Flux < javax.xml.stream.events.XMLEvent > org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> = this . org.springframework.http.codec.xml.XmlEventDecoder . decode ( org.springframework.http.codec.xml.Publisher<org.springframework.http.codec.xml.DataBuffer> , null , org.springframework.http.codec.xml.MimeType , java.util.Map<java.lang.String,java.lang.Object> ) ; javax.xml.namespace.QName javax.xml.namespace.QName = javax.xml.namespace.QName ( java.lang.Class<> ) ; Flux < java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > > org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> = org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> ( org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> , javax.xml.namespace.QName ) ; return org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> . map ( events -> unmarshal ( events , outputClass ) ) ; }  <METHOD_END>
<METHOD_START> javax.xml.namespace.QName javax.xml.namespace.QName ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String ; java.lang.String java.lang.String ; if ( java.lang.Class<> . boolean ( javax.xml.bind.annotation.XmlRootElement .class ) ) { javax.xml.bind.annotation.XmlRootElement javax.xml.bind.annotation.XmlRootElement = java.lang.Class<> . javax.xml.bind.annotation.XmlRootElement ( javax.xml.bind.annotation.XmlRootElement .class ) ; java.lang.String = javax.xml.bind.annotation.XmlRootElement . java.lang.String ( ) ; java.lang.String = javax.xml.bind.annotation.XmlRootElement . java.lang.String ( ) ; } else if ( java.lang.Class<> . boolean ( javax.xml.bind.annotation.XmlType .class ) ) { javax.xml.bind.annotation.XmlType javax.xml.bind.annotation.XmlType = java.lang.Class<> . javax.xml.bind.annotation.XmlType ( javax.xml.bind.annotation.XmlType .class ) ; java.lang.String = javax.xml.bind.annotation.XmlType . java.lang.String ( ) ; java.lang.String = javax.xml.bind.annotation.XmlType . java.lang.String ( ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> + STRING + STRING ) ; } if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = ClassUtils . getShortNameAsProperty ( java.lang.Class<> ) ; } if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.Package java.lang.Package = java.lang.Class<> . java.lang.Package ( ) ; if ( java.lang.Package != null && java.lang.Package . boolean ( javax.xml.bind.annotation.XmlSchema .class ) ) { javax.xml.bind.annotation.XmlSchema javax.xml.bind.annotation.XmlSchema = java.lang.Package . javax.xml.bind.annotation.XmlSchema ( javax.xml.bind.annotation.XmlSchema .class ) ; java.lang.String = javax.xml.bind.annotation.XmlSchema . java.lang.String ( ) ; } else { java.lang.String = javax.xml.XMLConstants . java.lang.String ; } } return new javax.xml.namespace.QName ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> < java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > > org.springframework.http.codec.xml.Flux<java.util.List<javax.xml.stream.events.XMLEvent>> ( Flux < javax.xml.stream.events.XMLEvent > org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> , javax.xml.namespace.QName javax.xml.namespace.QName ) { return org.springframework.http.codec.xml.Flux<javax.xml.stream.events.XMLEvent> . flatMap ( new java.util.function.Function<javax.xml.stream.events.XMLEvent,org.springframework.http.codec.xml.Publisher<? extends java.util.List<javax.xml.stream.events.XMLEvent>>> < javax.xml.stream.events.XMLEvent , Publisher < ? extends java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > > > ( ) { private java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > java.util.List<javax.xml.stream.events.XMLEvent> = null ; private int int = NUMBER ; private int int = java.lang.Integer . int ; @ java.lang.Override public org.springframework.http.codec.xml.Publisher<? extends java.util.List<javax.xml.stream.events.XMLEvent>> < ? extends java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > > org.springframework.http.codec.xml.Publisher<? extends java.util.List<javax.xml.stream.events.XMLEvent>> ( javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent ) { if ( javax.xml.stream.events.XMLEvent . boolean ( ) ) { if ( this . int == java.lang.Integer . int ) { javax.xml.namespace.QName javax.xml.namespace.QName = javax.xml.stream.events.XMLEvent . javax.xml.stream.events.StartElement ( ) . javax.xml.namespace.QName ( ) ; if ( javax.xml.namespace.QName . boolean ( javax.xml.namespace.QName ) ) { this . java.util.List<javax.xml.stream.events.XMLEvent> = new java.util.ArrayList<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > ( ) ; this . int = this . int ; } } this . int ++ ; } if ( this . int > this . int ) { this . java.util.List<javax.xml.stream.events.XMLEvent> . boolean ( javax.xml.stream.events.XMLEvent ) ; } if ( javax.xml.stream.events.XMLEvent . boolean ( ) ) { this . int -- ; if ( this . int == this . int ) { this . int = java.lang.Integer . int ; return Mono . just ( this . java.util.List<javax.xml.stream.events.XMLEvent> ) ; } } return Mono . empty ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.codec.xml.Publisher<? extends java.util.List<javax.xml.stream.events.XMLEvent>> < ? extends java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > > org.springframework.http.codec.xml.Publisher<? extends java.util.List<javax.xml.stream.events.XMLEvent>> ( javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent ) { if ( javax.xml.stream.events.XMLEvent . boolean ( ) ) { if ( this . int == java.lang.Integer . int ) { javax.xml.namespace.QName javax.xml.namespace.QName = javax.xml.stream.events.XMLEvent . javax.xml.stream.events.StartElement ( ) . javax.xml.namespace.QName ( ) ; if ( javax.xml.namespace.QName . boolean ( javax.xml.namespace.QName ) ) { this . java.util.List<javax.xml.stream.events.XMLEvent> = new java.util.ArrayList<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > ( ) ; this . int = this . int ; } } this . int ++ ; } if ( this . int > this . int ) { this . java.util.List<javax.xml.stream.events.XMLEvent> . boolean ( javax.xml.stream.events.XMLEvent ) ; } if ( javax.xml.stream.events.XMLEvent . boolean ( ) ) { this . int -- ; if ( this . int == this . int ) { this . int = java.lang.Integer . int ; return Mono . just ( this . java.util.List<javax.xml.stream.events.XMLEvent> ) ; } } return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.List<javax.xml.stream.events.XMLEvent> < javax.xml.stream.events.XMLEvent > java.util.List<javax.xml.stream.events.XMLEvent> , java.lang.Class<?> < ? > java.lang.Class<?> ) { try { javax.xml.bind.Unmarshaller javax.xml.bind.Unmarshaller = this . org.springframework.http.codec.xml.JaxbContextContainer . createUnmarshaller ( java.lang.Class<> ) ; javax.xml.stream.XMLEventReader javax.xml.stream.XMLEventReader = StaxUtils . createXMLEventReader ( java.util.List<javax.xml.stream.events.XMLEvent> ) ; if ( java.lang.Class<> . boolean ( javax.xml.bind.annotation.XmlRootElement .class ) ) { return javax.xml.bind.Unmarshaller . java.lang.Object ( javax.xml.stream.XMLEventReader ) ; } else { javax.xml.bind.JAXBElement<?> < ? > javax.xml.bind.JAXBElement<?> = javax.xml.bind.Unmarshaller . javax.xml.bind.JAXBElement<> ( javax.xml.stream.XMLEventReader , java.lang.Class<> ) ; return javax.xml.bind.JAXBElement<> . getValue ( ) ; } } catch ( javax.xml.bind.JAXBException javax.xml.bind.JAXBException ) { throw new CodecException ( javax.xml.bind.JAXBException . java.lang.String ( ) , javax.xml.bind.JAXBException ) ; } }  <METHOD_END>
