<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext . setServletContext ( new MockServletContext ( new FileSystemResourceLoader ( ) ) ) ; this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestController .class ) ; this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport = new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport ( ) ; this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext ) ; this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . setServletContext ( this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext . getServletContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestMappingHandlerMapping org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping = this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . requestMappingHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext ) ; org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . afterPropertiesSet ( ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestPathHelper .class , org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getUrlPathHelper ( ) . getClass ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestPathMatcher .class , org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getPathMatcher ( ) . getClass ( ) ) ; HandlerExecutionChain org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertEquals ( LocaleChangeInterceptor .class , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] . getClass ( ) ) ; assertEquals ( ConversionServiceExposingInterceptor .class , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] . getClass ( ) ) ; assertEquals ( ResourceUrlProviderExposingInterceptor .class , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] . getClass ( ) ) ; AbstractHandlerMapping org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = ( AbstractHandlerMapping ) this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . viewControllerHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getOrder ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestPathHelper .class , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getUrlPathHelper ( ) . getClass ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestPathMatcher .class , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getPathMatcher ( ) . getClass ( ) ) ; org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getHandler ( ) ) ; org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getHandler ( ) ) ; org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getHandler ( ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = ( AbstractHandlerMapping ) this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . resourceHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ) ; assertEquals ( java.lang.Integer . int - NUMBER , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getOrder ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestPathHelper .class , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getUrlPathHelper ( ) . getClass ( ) ) ; assertEquals ( org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestPathMatcher .class , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getPathMatcher ( ) . getClass ( ) ) ; org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getHandler ( ) ) ; assertEquals ( java.util.Arrays . java.lang.String ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) ) , NUMBER , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) . length ) ; assertEquals ( ResourceUrlProviderExposingInterceptor .class , org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getInterceptors ( ) [ NUMBER ] . getClass ( ) ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping = ( AbstractHandlerMapping ) this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . defaultServletHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.AbstractHandlerMapping ) ; assertEquals ( java.lang.Integer . int , org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getOrder ( ) ) ; org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.AbstractHandlerMapping . getHandler ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter = this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . requestMappingHandlerAdapter ( ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . mvcConversionService ( ) . convert ( new TestBean ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> = org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getMessageConverters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . size ( ) ) ; assertEquals ( StringHttpMessageConverter .class , java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( MappingJackson2HttpMessageConverter .class , java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . get ( NUMBER ) . getClass ( ) ) ; ObjectMapper org.springframework.web.servlet.config.annotation.ObjectMapper = ( ( MappingJackson2HttpMessageConverter ) java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . get ( NUMBER ) ) . getObjectMapper ( ) ; assertFalse ( org.springframework.web.servlet.config.annotation.ObjectMapper . getDeserializationConfig ( ) . isEnabled ( DEFAULT_VIEW_INCLUSION ) ) ; assertFalse ( org.springframework.web.servlet.config.annotation.ObjectMapper . getSerializationConfig ( ) . isEnabled ( DEFAULT_VIEW_INCLUSION ) ) ; assertFalse ( org.springframework.web.servlet.config.annotation.ObjectMapper . getDeserializationConfig ( ) . isEnabled ( FAIL_ON_UNKNOWN_PROPERTIES ) ) ; DirectFieldAccessor org.springframework.web.servlet.config.annotation.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> = ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> . size ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> = ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> . size ( ) ) ; assertEquals ( ConcurrentTaskExecutor .class , org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) . getClass ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; CallableProcessingInterceptor [] org.springframework.web.servlet.config.annotation.CallableProcessingInterceptor[] = ( CallableProcessingInterceptor [] ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , callableInterceptors . length ) ; DeferredResultProcessingInterceptor [] org.springframework.web.servlet.config.annotation.DeferredResultProcessingInterceptor[] = ( DeferredResultProcessingInterceptor [] ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( NUMBER , deferredResultInterceptors . length ) ; assertEquals ( false , org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestMappingHandlerAdapter org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter = this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . requestMappingHandlerAdapter ( ) ; ConfigurableWebBindingInitializer org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer = ( ConfigurableWebBindingInitializer ) org.springframework.web.servlet.config.annotation.RequestMappingHandlerAdapter . getWebBindingInitializer ( ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer ) ; BeanPropertyBindingResult org.springframework.web.servlet.config.annotation.BeanPropertyBindingResult = new BeanPropertyBindingResult ( null , STRING ) ; org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . getValidator ( ) . validate ( null , org.springframework.web.servlet.config.annotation.BeanPropertyBindingResult ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.BeanPropertyBindingResult . getAllErrors ( ) . get ( NUMBER ) . getCode ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.web.servlet.config.annotation.ConfigurableWebBindingInitializer . getMessageCodesResolver ( ) . resolveMessageCodes ( STRING , null ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.config.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; NativeWebRequest org.springframework.web.servlet.config.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.config.annotation.MockHttpServletRequest ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping = this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . requestMappingHandlerMapping ( ) ; ContentNegotiationManager org.springframework.web.servlet.config.annotation.ContentNegotiationManager = org.springframework.web.servlet.config.annotation.RequestMappingHandlerMapping . getContentNegotiationManager ( ) ; assertEquals ( java.util.Collections . java.util.List ( APPLICATION_JSON ) , org.springframework.web.servlet.config.annotation.ContentNegotiationManager . resolveMediaTypes ( org.springframework.web.servlet.config.annotation.NativeWebRequest ) ) ; org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( java.util.Collections . java.util.List ( APPLICATION_XML ) , org.springframework.web.servlet.config.annotation.ContentNegotiationManager . resolveMediaTypes ( org.springframework.web.servlet.config.annotation.NativeWebRequest ) ) ; org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( java.util.Collections . java.util.List ( MediaType . valueOf ( STRING ) ) , org.springframework.web.servlet.config.annotation.ContentNegotiationManager . resolveMediaTypes ( org.springframework.web.servlet.config.annotation.NativeWebRequest ) ) ; org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; assertEquals ( java.util.Collections . java.util.List ( APPLICATION_ATOM_XML ) , org.springframework.web.servlet.config.annotation.ContentNegotiationManager . resolveMediaTypes ( org.springframework.web.servlet.config.annotation.NativeWebRequest ) ) ; org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setParameter ( STRING , STRING ) ; assertEquals ( java.util.Collections . java.util.List ( APPLICATION_JSON ) , org.springframework.web.servlet.config.annotation.ContentNegotiationManager . resolveMediaTypes ( org.springframework.web.servlet.config.annotation.NativeWebRequest ) ) ; org.springframework.web.servlet.config.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; SimpleUrlHandlerMapping org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . resourceHandlerMapping ( ) ; org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping . setApplicationContext ( this . org.springframework.web.servlet.config.annotation.StaticWebApplicationContext ) ; HandlerExecutionChain org.springframework.web.servlet.config.annotation.HandlerExecutionChain = org.springframework.web.servlet.config.annotation.SimpleUrlHandlerMapping . getHandler ( org.springframework.web.servlet.config.annotation.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.HandlerExecutionChain ) ; ResourceHttpRequestHandler org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler = ( ResourceHttpRequestHandler ) org.springframework.web.servlet.config.annotation.HandlerExecutionChain . getHandler ( ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler ) ; assertSame ( org.springframework.web.servlet.config.annotation.ContentNegotiationManager , org.springframework.web.servlet.config.annotation.ResourceHttpRequestHandler . getContentNegotiationManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> = ( ( HandlerExceptionResolverComposite ) this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . handlerExceptionResolver ( ) ) . getExceptionResolvers ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . size ( ) ) ; assertEquals ( ResponseStatusExceptionResolver .class , java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( SimpleMappingExceptionResolver .class , java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ViewResolverComposite org.springframework.web.servlet.config.annotation.ViewResolverComposite = ( ViewResolverComposite ) this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . mvcViewResolver ( ) ; assertEquals ( Ordered . HIGHEST_PRECEDENCE , org.springframework.web.servlet.config.annotation.ViewResolverComposite . getOrder ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> = org.springframework.web.servlet.config.annotation.ViewResolverComposite . getViewResolvers ( ) ; DirectFieldAccessor org.springframework.web.servlet.config.annotation.DirectFieldAccessor = new DirectFieldAccessor ( java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . size ( ) ) ; assertEquals ( ContentNegotiatingViewResolver .class , java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . get ( NUMBER ) . getClass ( ) ) ; assertFalse ( ( java.lang.Boolean ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNotNull ( org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.View> < View > java.util.List<org.springframework.web.servlet.config.annotation.View> = ( java.util.List<org.springframework.web.servlet.config.annotation.View> < View > ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( java.util.List<org.springframework.web.servlet.config.annotation.View> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.View> . size ( ) ) ; assertEquals ( MappingJackson2JsonView .class , java.util.List<org.springframework.web.servlet.config.annotation.View> . get ( NUMBER ) . getClass ( ) ) ; java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> = ( java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> < ViewResolver > ) org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . size ( ) ) ; assertEquals ( InternalResourceViewResolver .class , java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . get ( NUMBER ) . getClass ( ) ) ; org.springframework.web.servlet.config.annotation.DirectFieldAccessor = new DirectFieldAccessor ( java.util.List<org.springframework.web.servlet.config.annotation.ViewResolver> . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> < java.lang.String , CorsConfiguration > java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> = this . org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestWebMvcConfigurationSupport . getCorsConfigurations ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> . size ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,org.springframework.web.servlet.config.annotation.CorsConfiguration> . get ( STRING ) . getAllowedOrigins ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FormatterRegistry org.springframework.web.servlet.config.annotation.FormatterRegistry ) { org.springframework.web.servlet.config.annotation.FormatterRegistry . addConverter ( new Converter < TestBean , java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TestBean org.springframework.web.servlet.config.annotation.TestBean ) { return STRING ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TestBean org.springframework.web.servlet.config.annotation.TestBean ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> ) { java.util.List<org.springframework.web.servlet.config.annotation.HttpMessageConverter<?>> . add ( NUMBER , new StringHttpMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.annotation.Validator org.springframework.web.servlet.config.annotation.Validator ( ) { return new Validator ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.web.servlet.config.annotation.Errors ) { org.springframework.web.servlet.config.annotation.Errors . reject ( STRING ) ; } @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.web.servlet.config.annotation.Errors ) { org.springframework.web.servlet.config.annotation.Errors . reject ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContentNegotiationConfigurer org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer ) { org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer . favorParameter ( true ) . parameterName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncSupportConfigurer org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer ) { org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer . setDefaultTimeout ( NUMBER ) . setTaskExecutor ( new ConcurrentTaskExecutor ( ) ) . registerCallableInterceptors ( new CallableProcessingInterceptorAdapter ( ) { } ) . registerDeferredResultInterceptors ( new DeferredResultProcessingInterceptorAdapter ( ) {} ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodArgumentResolver> . add ( new ModelAttributeMethodProcessor ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerMethodReturnValueHandler> . add ( new ModelAttributeMethodProcessor ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . add ( new SimpleMappingExceptionResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> ) { java.util.List<org.springframework.web.servlet.config.annotation.HandlerExceptionResolver> . add ( NUMBER , new ResponseStatusExceptionResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PathMatchConfigurer org.springframework.web.servlet.config.annotation.PathMatchConfigurer ) { org.springframework.web.servlet.config.annotation.PathMatchConfigurer . setPathMatcher ( new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestPathMatcher ( ) ) ; org.springframework.web.servlet.config.annotation.PathMatchConfigurer . setUrlPathHelper ( new org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupportExtensionTests.TestPathHelper ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( InterceptorRegistry org.springframework.web.servlet.config.annotation.InterceptorRegistry ) { org.springframework.web.servlet.config.annotation.InterceptorRegistry . addInterceptor ( new LocaleChangeInterceptor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.web.servlet.config.annotation.MessageCodesResolver org.springframework.web.servlet.config.annotation.MessageCodesResolver ( ) { return new DefaultMessageCodesResolver ( ) { @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new java.lang.String [] { STRING + java.lang.String } ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new java.lang.String [] { STRING + java.lang.String } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewControllerRegistry org.springframework.web.servlet.config.annotation.ViewControllerRegistry ) { org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addViewController ( STRING ) . setViewName ( STRING ) ; org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addRedirectViewController ( STRING , STRING ) . setStatusCode ( HttpStatus . PERMANENT_REDIRECT ) ; org.springframework.web.servlet.config.annotation.ViewControllerRegistry . addStatusController ( STRING , HttpStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . enableContentNegotiation ( new MappingJackson2JsonView ( ) ) ; org.springframework.web.servlet.config.annotation.ViewResolverRegistry . jsp ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistry org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry ) { org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry . addResourceHandler ( STRING ) . addResourceLocations ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( DefaultServletHandlerConfigurer org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer ) { org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer . enable ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CorsRegistry org.springframework.web.servlet.config.annotation.CorsRegistry ) { org.springframework.web.servlet.config.annotation.CorsRegistry . addMapping ( STRING ) ; }  <METHOD_END>
