<METHOD_START> @ Test public void void ( ) java.lang.Exception { mockSuccessfulMetadataGet ( false ) ; InitializrServiceMetadata org.springframework.boot.cli.command.init.InitializrServiceMetadata = this . org.springframework.boot.cli.command.init.InitializrService . loadMetadata ( STRING ) ; assertThat ( org.springframework.boot.cli.command.init.InitializrServiceMetadata ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , STRING ) ; ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse = org.springframework.boot.cli.command.init.ProjectGenerationResponse ( org.springframework.boot.cli.command.init.ProjectGenerationRequest , org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; void ( org.springframework.boot.cli.command.init.ProjectGenerationResponse , mockHttpRequest . contentType , mockHttpRequest . fileName ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; org.springframework.boot.cli.command.init.ProjectGenerationRequest . setOutput ( STRING ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , null ) ; ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse = org.springframework.boot.cli.command.init.ProjectGenerationResponse ( org.springframework.boot.cli.command.init.ProjectGenerationRequest , org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; void ( org.springframework.boot.cli.command.init.ProjectGenerationResponse , mockHttpRequest . contentType , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest = new MockHttpProjectGenerationRequest ( STRING , null ) ; ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse = org.springframework.boot.cli.command.init.ProjectGenerationResponse ( org.springframework.boot.cli.command.init.ProjectGenerationRequest , org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; void ( org.springframework.boot.cli.command.init.ProjectGenerationResponse , mockHttpRequest . contentType , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; mockProjectGenerationError ( NUMBER , java.lang.String ) ; ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; org.springframework.boot.cli.command.init.ProjectGenerationRequest . getDependencies ( ) . add ( STRING ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expect ( ReportableException .class ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expectMessage ( java.lang.String ) ; this . org.springframework.boot.cli.command.init.InitializrService . generate ( org.springframework.boot.cli.command.init.ProjectGenerationRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mockProjectGenerationError ( NUMBER , null ) ; ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expect ( ReportableException .class ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.cli.command.init.InitializrService . generate ( org.springframework.boot.cli.command.init.ProjectGenerationRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mockSuccessfulMetadataGet ( false ) ; CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse = mock ( CloseableHttpResponse .class ) ; mockStatus ( org.springframework.boot.cli.command.init.CloseableHttpResponse , NUMBER ) ; given ( this . http . execute ( isA ( HttpGet .class ) ) ) . willReturn ( org.springframework.boot.cli.command.init.CloseableHttpResponse ) ; ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expect ( ReportableException .class ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.cli.command.init.InitializrService . generate ( org.springframework.boot.cli.command.init.ProjectGenerationRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; mockMetadataGetError ( NUMBER , java.lang.String ) ; ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expect ( ReportableException .class ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expectMessage ( java.lang.String ) ; this . org.springframework.boot.cli.command.init.InitializrService . generate ( org.springframework.boot.cli.command.init.ProjectGenerationRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse = mock ( CloseableHttpResponse .class ) ; mockHttpEntity ( org.springframework.boot.cli.command.init.CloseableHttpResponse , STRING . byte[] ( ) , STRING ) ; mockStatus ( org.springframework.boot.cli.command.init.CloseableHttpResponse , NUMBER ) ; given ( this . http . execute ( isA ( HttpGet .class ) ) ) . willReturn ( org.springframework.boot.cli.command.init.CloseableHttpResponse ) ; ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expect ( ReportableException .class ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.cli.command.init.InitializrService . generate ( org.springframework.boot.cli.command.init.ProjectGenerationRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse = mock ( CloseableHttpResponse .class ) ; mockStatus ( org.springframework.boot.cli.command.init.CloseableHttpResponse , NUMBER ) ; given ( this . http . execute ( isA ( HttpGet .class ) ) ) . willReturn ( org.springframework.boot.cli.command.init.CloseableHttpResponse ) ; ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest = new ProjectGenerationRequest ( ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expect ( ReportableException .class ) ; this . org.springframework.boot.cli.command.init.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.cli.command.init.InitializrService . generate ( org.springframework.boot.cli.command.init.ProjectGenerationRequest ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.command.init.ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse ( ProjectGenerationRequest org.springframework.boot.cli.command.init.ProjectGenerationRequest , MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) throws java.lang.Exception { mockSuccessfulProjectGeneration ( org.springframework.boot.cli.command.init.MockHttpProjectGenerationRequest ) ; ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse = this . org.springframework.boot.cli.command.init.InitializrService . generate ( org.springframework.boot.cli.command.init.ProjectGenerationRequest ) ; assertThat ( org.springframework.boot.cli.command.init.ProjectGenerationResponse . getContent ( ) ) . as ( STRING ) . isEqualTo ( mockRequest . content ) ; return org.springframework.boot.cli.command.init.ProjectGenerationResponse ; }  <METHOD_END>
<METHOD_START> private static void void ( ProjectGenerationResponse org.springframework.boot.cli.command.init.ProjectGenerationResponse , java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( java.lang.String == null ) { assertThat ( org.springframework.boot.cli.command.init.ProjectGenerationResponse . getContentType ( ) ) . isNull ( ) ; } else { assertThat ( org.springframework.boot.cli.command.init.ProjectGenerationResponse . getContentType ( ) . getMimeType ( ) ) . isEqualTo ( java.lang.String ) ; } assertThat ( org.springframework.boot.cli.command.init.ProjectGenerationResponse . getFileName ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
