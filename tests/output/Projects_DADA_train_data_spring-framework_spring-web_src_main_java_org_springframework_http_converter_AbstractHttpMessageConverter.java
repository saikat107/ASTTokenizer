<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> protected void ( MediaType org.springframework.http.converter.MediaType ) { void ( java.util.Collections . java.util.List ( org.springframework.http.converter.MediaType ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( MediaType ... org.springframework.http.converter.MediaType[] ) { void ( java.util.Arrays . java.util.List ( org.springframework.http.converter.MediaType[] ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.nio.charset.Charset java.nio.charset.Charset , MediaType ... org.springframework.http.converter.MediaType[] ) { this . java.nio.charset.Charset = java.nio.charset.Charset ; void ( java.util.Arrays . java.util.List ( org.springframework.http.converter.MediaType[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.http.converter.MediaType> < MediaType > java.util.List<org.springframework.http.converter.MediaType> ) { Assert . notEmpty ( java.util.List<org.springframework.http.converter.MediaType> , STRING ) ; this . java.util.List<org.springframework.http.converter.MediaType> = new java.util.ArrayList <> ( java.util.List<org.springframework.http.converter.MediaType> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.http.converter.MediaType> < MediaType > java.util.List<org.springframework.http.converter.MediaType> ( ) { return java.util.Collections . java.util.List<org.springframework.http.converter.MediaType> ( this . java.util.List<org.springframework.http.converter.MediaType> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.nio.charset.Charset java.nio.charset.Charset ) { this . java.nio.charset.Charset = java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> public java.nio.charset.Charset java.nio.charset.Charset ( ) { return this . java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return boolean ( java.lang.Class<> ) && boolean ( org.springframework.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MediaType org.springframework.http.converter.MediaType ) { if ( org.springframework.http.converter.MediaType == null ) { return true ; } for ( MediaType org.springframework.http.converter.MediaType : java.util.List<org.springframework.http.converter.MediaType> ( ) ) { if ( org.springframework.http.converter.MediaType . includes ( org.springframework.http.converter.MediaType ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return boolean ( java.lang.Class<> ) && boolean ( org.springframework.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MediaType org.springframework.http.converter.MediaType ) { if ( org.springframework.http.converter.MediaType == null || MediaType . ALL . equals ( org.springframework.http.converter.MediaType ) ) { return true ; } for ( MediaType org.springframework.http.converter.MediaType : java.util.List<org.springframework.http.converter.MediaType> ( ) ) { if ( org.springframework.http.converter.MediaType . isCompatibleWith ( org.springframework.http.converter.MediaType ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final T T ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> , HttpInputMessage org.springframework.http.converter.HttpInputMessage ) throws java.io.IOException { return T ( java.lang.Class<> , org.springframework.http.converter.HttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( final T T , MediaType org.springframework.http.converter.MediaType , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { final HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) ; void ( org.springframework.http.converter.HttpHeaders , T , org.springframework.http.converter.MediaType ) ; if ( org.springframework.http.converter.HttpOutputMessage instanceof StreamingHttpOutputMessage ) { StreamingHttpOutputMessage org.springframework.http.converter.StreamingHttpOutputMessage = ( StreamingHttpOutputMessage ) org.springframework.http.converter.HttpOutputMessage ; org.springframework.http.converter.StreamingHttpOutputMessage . setBody ( new StreamingHttpOutputMessage . StreamingHttpOutputMessage ( ) { @ java.lang.Override public void void ( final java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { void ( T , new HttpOutputMessage ( ) { @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return java.io.OutputStream ; } @ java.lang.Override public org.springframework.http.converter.HttpHeaders org.springframework.http.converter.HttpHeaders ( ) { return org.springframework.http.converter.HttpHeaders ; } } ) ; } } ) ; } else { void ( T , org.springframework.http.converter.HttpOutputMessage ) ; org.springframework.http.converter.HttpOutputMessage . getBody ( ) . flush ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { void ( T , new HttpOutputMessage ( ) { @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return java.io.OutputStream ; } @ java.lang.Override public org.springframework.http.converter.HttpHeaders org.springframework.http.converter.HttpHeaders ( ) { return org.springframework.http.converter.HttpHeaders ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return java.io.OutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.converter.HttpHeaders org.springframework.http.converter.HttpHeaders ( ) { return org.springframework.http.converter.HttpHeaders ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpHeaders org.springframework.http.converter.HttpHeaders , T T , MediaType org.springframework.http.converter.MediaType ) throws java.io.IOException { if ( org.springframework.http.converter.HttpHeaders . getContentType ( ) == null ) { MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.MediaType ; if ( org.springframework.http.converter.MediaType == null || org.springframework.http.converter.MediaType . isWildcardType ( ) || org.springframework.http.converter.MediaType . isWildcardSubtype ( ) ) { org.springframework.http.converter.MediaType = org.springframework.http.converter.MediaType ( T ) ; } else if ( MediaType . APPLICATION_OCTET_STREAM . equals ( org.springframework.http.converter.MediaType ) ) { MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.MediaType ( T ) ; org.springframework.http.converter.MediaType = ( org.springframework.http.converter.MediaType != null ? org.springframework.http.converter.MediaType : org.springframework.http.converter.MediaType ) ; } if ( org.springframework.http.converter.MediaType != null ) { if ( org.springframework.http.converter.MediaType . getCharset ( ) == null ) { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset ( ) ; if ( java.nio.charset.Charset != null ) { org.springframework.http.converter.MediaType = new MediaType ( org.springframework.http.converter.MediaType , java.nio.charset.Charset ) ; } } org.springframework.http.converter.HttpHeaders . setContentType ( org.springframework.http.converter.MediaType ) ; } } if ( org.springframework.http.converter.HttpHeaders . getContentLength ( ) < NUMBER && ! org.springframework.http.converter.HttpHeaders . containsKey ( HttpHeaders . TRANSFER_ENCODING ) ) { java.lang.Long java.lang.Long = java.lang.Long ( T , org.springframework.http.converter.HttpHeaders . getContentType ( ) ) ; if ( java.lang.Long != null ) { org.springframework.http.converter.HttpHeaders . setContentLength ( java.lang.Long ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.http.converter.MediaType org.springframework.http.converter.MediaType ( T T ) throws java.io.IOException { java.util.List<org.springframework.http.converter.MediaType> < MediaType > java.util.List<org.springframework.http.converter.MediaType> = java.util.List<org.springframework.http.converter.MediaType> ( ) ; return ( ! java.util.List<org.springframework.http.converter.MediaType> . isEmpty ( ) ? java.util.List<org.springframework.http.converter.MediaType> . get ( NUMBER ) : null ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Long java.lang.Long ( T T , MediaType org.springframework.http.converter.MediaType ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> protected abstract T T ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> , HttpInputMessage org.springframework.http.converter.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotReadableException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( T T , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException ;  <METHOD_END>
