<METHOD_START> @ java.lang.Override protected void void ( java.net.HttpURLConnection java.net.HttpURLConnection , java.lang.String java.lang.String )			throws java.io.IOException { if ( java.net.HttpURLConnection instanceof javax.net.ssl.HttpsURLConnection ) { void ( ( javax.net.ssl.HttpsURLConnection ) java.net.HttpURLConnection ) ; } super. prepareConnection ( java.net.HttpURLConnection , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( javax.net.ssl.HttpsURLConnection javax.net.ssl.HttpsURLConnection ) { javax.net.ssl.HttpsURLConnection . void ( new org.springframework.boot.actuate.cloudfoundry.SkipSslVerificationHttpRequestFactory.SkipHostnameVerifier ( ) ) ; try { javax.net.ssl.HttpsURLConnection . void ( javax.net.ssl.SSLSocketFactory ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> private javax.net.ssl.SSLSocketFactory javax.net.ssl.SSLSocketFactory ( ) java.lang.Exception { javax.net.ssl.SSLContext javax.net.ssl.SSLContext = javax.net.ssl.SSLContext . javax.net.ssl.SSLContext ( STRING ) ; javax.net.ssl.SSLContext . void ( null , new javax.net.ssl.TrustManager [] { new org.springframework.boot.actuate.cloudfoundry.SkipSslVerificationHttpRequestFactory.SkipX509TrustManager ( ) } , new java.security.SecureRandom ( ) ) ; return javax.net.ssl.SSLContext . javax.net.ssl.SSLSocketFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , javax.net.ssl.SSLSession javax.net.ssl.SSLSession ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] ( ) { return new java.security.cert.X509Certificate [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] , java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.security.cert.X509Certificate [] java.security.cert.X509Certificate[] , java.lang.String java.lang.String ) {		}  <METHOD_END>
