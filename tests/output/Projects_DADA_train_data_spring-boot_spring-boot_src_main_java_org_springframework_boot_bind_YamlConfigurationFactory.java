<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageSource org.springframework.boot.bind.MessageSource ) { this . org.springframework.boot.bind.MessageSource = org.springframework.boot.bind.MessageSource ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> < java.lang.Class<?> < ? > , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> ) { this . java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> = new java.util.HashMap<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> <> ( java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.boot.bind.Resource ) { this . org.springframework.boot.bind.Resource = org.springframework.boot.bind.Resource ; }  <METHOD_END>
<METHOD_START> public void void ( Validator org.springframework.boot.bind.Validator ) { this . org.springframework.boot.bind.Validator = org.springframework.boot.bind.Validator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { if ( this . java.lang.String == null ) { Assert . state ( this . org.springframework.boot.bind.Resource != null , STRING ) ; this . java.lang.String = StreamUtils . copyToString ( this . org.springframework.boot.bind.Resource . getInputStream ( ) , java.nio.charset.Charset . java.nio.charset.Charset ( ) ) ; } Assert . state ( this . java.lang.String != null , STRING + STRING ) ; if ( org.springframework.boot.bind.Log . isTraceEnabled ( ) ) { org.springframework.boot.bind.Log . trace ( java.lang.String . java.lang.String ( STRING , this . java.lang.String ) ) ; } Constructor org.springframework.boot.bind.Constructor = new YamlJavaBeanPropertyConstructor ( this . java.lang.Class<> , this . java.util.Map<java.lang.Class<?>,java.util.Map<java.lang.String,java.lang.String>> ) ; this . T = ( T ) ( new Yaml ( org.springframework.boot.bind.Constructor ) ) . load ( this . java.lang.String ) ; if ( this . org.springframework.boot.bind.Validator != null ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.boot.bind.BindException { BindingResult org.springframework.boot.bind.BindingResult = new BeanPropertyBindingResult ( this . T , STRING ) ; this . org.springframework.boot.bind.Validator . validate ( this . T , org.springframework.boot.bind.BindingResult ) ; if ( org.springframework.boot.bind.BindingResult . hasErrors ( ) ) { org.springframework.boot.bind.Log . error ( STRING ) ; for ( ObjectError org.springframework.boot.bind.ObjectError : org.springframework.boot.bind.BindingResult . getAllErrors ( ) ) { org.springframework.boot.bind.Log . error ( java.lang.Object ( org.springframework.boot.bind.ObjectError ) ) ; } throw new BindException ( org.springframework.boot.bind.BindingResult ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ObjectError org.springframework.boot.bind.ObjectError ) { if ( this . org.springframework.boot.bind.MessageSource != null ) { java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ( ) ; return this . org.springframework.boot.bind.MessageSource . getMessage ( org.springframework.boot.bind.ObjectError , java.util.Locale ) + STRING + org.springframework.boot.bind.ObjectError + STRING ; } return org.springframework.boot.bind.ObjectError ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . T == null ) { return java.lang.Object .class ; } return this . T . java.lang.Class<? extends java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.Exception { if ( this . T == null ) { void ( ) ; } return this . T ; }  <METHOD_END>
