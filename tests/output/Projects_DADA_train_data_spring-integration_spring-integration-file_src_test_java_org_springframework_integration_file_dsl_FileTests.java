<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.file.dsl.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( FileHeaders . FILENAME , STRING ) . build ( ) ; try { this . org.springframework.integration.file.dsl.MessageChannel . send ( org.springframework.integration.file.dsl.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( MessageHandlingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( java.lang.NullPointerException .class ) ) ; } DefaultFileNameGenerator org.springframework.integration.file.dsl.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.file.dsl.DefaultFileNameGenerator . setBeanFactory ( this . org.springframework.integration.file.dsl.ListableBeanFactory ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.file.dsl.MessageHandler ; if ( this . org.springframework.integration.file.dsl.MessageHandler instanceof Advised ) { TargetSource org.springframework.integration.file.dsl.TargetSource = ( ( Advised ) this . org.springframework.integration.file.dsl.MessageHandler ) . getTargetSource ( ) ; if ( org.springframework.integration.file.dsl.TargetSource != null ) { java.lang.Object = org.springframework.integration.file.dsl.TargetSource . getTarget ( ) ; } } DirectFieldAccessor org.springframework.integration.file.dsl.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.file.dsl.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.dsl.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; org.springframework.integration.file.dsl.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.file.dsl.DefaultFileNameGenerator ) ; this . org.springframework.integration.file.dsl.MessageChannel . send ( org.springframework.integration.file.dsl.Message<> ) ; assertTrue ( new java.io.File ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) , STRING ) . boolean ( ) ) ; this . org.springframework.integration.file.dsl.MessageChannel . send ( new GenericMessage <> ( STRING ) ) ; assertTrue ( this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( new java.io.File ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) , STRING ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.io.FileOutputStream . void ( ( int + STRING ) . byte[] ( ) ) ; } this . org.springframework.integration.file.dsl.ApacheCommonsFileTailingMessageProducer . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; assertEquals ( STRING + int , org.springframework.integration.file.dsl.Message<> . getPayload ( ) ) ; } assertNull ( this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.file.dsl.FileTests.ControlBusGateway . void ( STRING ) ; java.io.FileOutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { boolean boolean = int % NUMBER == NUMBER ; java.lang.String java.lang.String = boolean ? STRING : STRING ; if ( boolean ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( new java.io.File ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) , int + java.lang.String ) ) ; java.io.FileOutputStream . void ( ( STRING + int ) . byte[] ( ) ) ; java.io.FileOutputStream . void ( ) ; java.io.FileOutputStream . void ( ) ; } Message < ? > org.springframework.integration.file.dsl.Message<?> = org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.file.dsl.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.util.List .class ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; java.util.List<java.lang.String> . void ( java.lang.String -> assertTrue ( java.util.List<java.lang.Integer> . boolean ( java.lang.Integer . int ( java.lang.String ) ) ) ) ; new java.io.File ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) , STRING ) . boolean ( ) ; Message < ? > org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; assertThat ( org.springframework.integration.file.dsl.Message<> , instanceOf ( ErrorMessage .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.integration.file.dsl.MessageChannel . send ( new GenericMessage <> ( java.lang.String ) ) ; Message < ? > org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; assertThat ( org.springframework.integration.file.dsl.Message<> . getPayload ( ) , instanceOf ( java.io.File .class ) ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.dsl.Message<> . getPayload ( ) ; assertThat ( java.io.File . java.lang.String ( ) , endsWith ( TestUtils . applySystemFileSeparator ( STRING ) ) ) ; java.lang.String java.lang.String = StreamUtils . copyToString ( new java.io.FileInputStream ( java.io.File ) , java.nio.charset.Charset . java.nio.charset.Charset ( ) ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( new java.io.File ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) , STRING ) ) ; java.io.FileOutputStream . void ( ( STRING ) . byte[] ( java.nio.charset.Charset . java.nio.charset.Charset ( ) ) ) ; java.io.FileOutputStream . void ( ) ; java.io.FileOutputStream . void ( ) ; Message < ? > org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; assertThat ( org.springframework.integration.file.dsl.Message<> . getPayload ( ) , instanceOf ( FileSplitter . FileSplitter .class ) ) ; assertEquals ( NUMBER , org.springframework.integration.file.dsl.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE ) ) ; org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; assertThat ( org.springframework.integration.file.dsl.Message<> . getPayload ( ) , instanceOf ( FileSplitter . FileSplitter .class ) ) ; assertNull ( this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ) ; assertEquals ( java.nio.charset.StandardCharsets . java.nio.charset.Charset , TestUtils . getPropertyValue ( this . org.springframework.integration.file.dsl.MessageHandler , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = org.springframework.integration.file.dsl.TemporaryFolder . newFolder ( ) ; java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( new java.io.File ( java.io.File , STRING ) ) ; java.io.FileOutputStream . void ( ( STRING ) . byte[] ( ) ) ; java.io.FileOutputStream . void ( ) ; java.io.FileOutputStream . void ( ) ; java.io.File java.io.File = org.springframework.integration.file.dsl.TemporaryFolder . newFolder ( ) ; java.io.FileOutputStream = new java.io.FileOutputStream ( new java.io.File ( java.io.File , STRING ) ) ; java.io.FileOutputStream . void ( ( STRING ) . byte[] ( ) ) ; java.io.FileOutputStream . void ( ) ; java.io.FileOutputStream . void ( ) ; this . org.springframework.integration.file.dsl.FileTests.MyService . void ( java.io.File , java.io.File ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String> <> ( ) ; Message < ? > org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; java.util.Set<java.lang.String> . boolean ( ( java.lang.String ) org.springframework.integration.file.dsl.Message<> . getPayload ( ) ) ; org.springframework.integration.file.dsl.Message<?> = this . org.springframework.integration.file.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.file.dsl.Message<> ) ; java.util.Set<java.lang.String> . boolean ( ( java.lang.String ) org.springframework.integration.file.dsl.Message<> . getPayload ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , java.util.Set<java.lang.String> . java.lang.Object[] ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.IntegrationFlow org.springframework.integration.file.dsl.IntegrationFlow ( ) { return IntegrationFlowDefinition :: controlBus ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.IntegrationFlow org.springframework.integration.file.dsl.IntegrationFlow ( ) { return f -> f . handle ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.IntegrationFlow org.springframework.integration.file.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . handle ( Files . outboundAdapter ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) ) . fileNameGenerator ( message -> null ) . fileExistsMode ( FileExistsMode . APPEND_NO_FLUSH ) . flushInterval ( NUMBER ) . flushWhenIdle ( false ) . flushPredicate ( ( fileAbsolutePath , firstWrite , lastWrite , filterMessage ) -> { flushPredicateCalled ( ) . countDown ( ) ; return true ; } ) , c -> c . id ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.IntegrationFlow org.springframework.integration.file.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Files . tailAdapter ( new java.io.File ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) , STRING ) ) . delay ( NUMBER ) . end ( false ) . id ( STRING ) . autoStartup ( false ) ) . transform ( STRING :: java.lang.String ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.IntegrationFlow org.springframework.integration.file.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Files . inboundAdapter ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) ) . patternFilter ( STRING ) . useWatchService ( true ) . watchEvents ( FileReadingMessageSource . WatchEventType . CREATE , FileReadingMessageSource . WatchEventType . MODIFY ) , e -> e . poller ( Pollers . fixedDelay ( NUMBER ) . errorChannel ( STRING ) ) ) . filter ( java.io.File .class , p -> ! p . getName ( ) . startsWith ( STRING ) , e -> e . throwExceptionOnRejection ( true ) ) . transform ( Files . toStringTransformer ( ) ) . aggregate ( a -> a . correlationExpression ( STRING ) . releaseStrategy ( g -> g . size ( ) == NUMBER ) ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.PollableChannel org.springframework.integration.file.dsl.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.IntegrationFlow org.springframework.integration.file.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) . enrichHeaders ( h -> h . header ( FileHeaders . FILENAME , STRING ) . header ( STRING , new File ( tmpDir . getRoot ( ) , STRING ) ) ) . handle ( Files . outboundGateway ( m -> m . getHeaders ( ) . get ( STRING ) ) ) . channel ( MessageChannels . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.IntegrationFlow org.springframework.integration.file.dsl.IntegrationFlow ( ) { return IntegrationFlows . from ( Files . inboundAdapter ( org.springframework.integration.file.dsl.TemporaryFolder . getRoot ( ) ) . filterFunction ( f -> STRING . equals ( f . getName ( ) ) ) , e -> e . poller ( p -> p . fixedDelay ( NUMBER ) ) ) . split ( Files . splitter ( ) . markers ( ) . charset ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) . applySequence ( true ) , e -> e . id ( STRING ) ) . channel ( c -> c . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.file.dsl.PollableChannel org.springframework.integration.file.dsl.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> void void ( java.io.File ... java.io.File[] ) { for ( java.io.File java.io.File : java.io.File[] ) { StandardIntegrationFlow org.springframework.integration.file.dsl.StandardIntegrationFlow = IntegrationFlows . from ( Files . inboundAdapter ( java.io.File ) , e -> e . poller ( p -> p . fixedDelay ( NUMBER ) ) . id ( directory . getName ( ) + STRING ) ) . transform ( Files . toStringTransformer ( ) , e -> e . id ( directory . getName ( ) + STRING ) ) . channel ( this . org.springframework.integration.file.dsl.PollableChannel ) . get ( ) ; this . org.springframework.integration.file.dsl.AutowireCapableBeanFactory . initializeBean ( org.springframework.integration.file.dsl.StandardIntegrationFlow , java.io.File . java.lang.String ( ) ) ; this . org.springframework.integration.file.dsl.AutowireCapableBeanFactory . getBean ( java.io.File . java.lang.String ( ) + STRING , Lifecycle .class ) . start ( ) ; this . org.springframework.integration.file.dsl.AutowireCapableBeanFactory . getBean ( java.io.File . java.lang.String ( ) + STRING , Lifecycle .class ) . start ( ) ; } }  <METHOD_END>
