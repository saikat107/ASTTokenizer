<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.jdbc.datasource.lookup.BeanFactory = mock ( BeanFactory .class ) ; StubDataSource org.springframework.jdbc.datasource.lookup.StubDataSource = new StubDataSource ( ) ; given ( org.springframework.jdbc.datasource.lookup.BeanFactory . getBean ( java.lang.String , javax.sql.DataSource .class ) ) . willReturn ( org.springframework.jdbc.datasource.lookup.StubDataSource ) ; BeanFactoryDataSourceLookup org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup = new BeanFactoryDataSourceLookup ( ) ; org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup . setBeanFactory ( org.springframework.jdbc.datasource.lookup.BeanFactory ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup . getDataSource ( java.lang.String ) ; assertNotNull ( STRING + STRING , javax.sql.DataSource ) ; assertSame ( org.springframework.jdbc.datasource.lookup.StubDataSource , javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final BeanFactory org.springframework.jdbc.datasource.lookup.BeanFactory = mock ( BeanFactory .class ) ; given ( org.springframework.jdbc.datasource.lookup.BeanFactory . getBean ( java.lang.String , javax.sql.DataSource .class ) ) . willThrow ( new BeanNotOfRequiredTypeException ( java.lang.String , javax.sql.DataSource .class , java.lang.String .class ) ) ; try { BeanFactoryDataSourceLookup org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup = new BeanFactoryDataSourceLookup ( org.springframework.jdbc.datasource.lookup.BeanFactory ) ; org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup . getDataSource ( java.lang.String ) ; fail ( STRING ) ; } catch ( DataSourceLookupFailureException org.springframework.jdbc.datasource.lookup.DataSourceLookupFailureException ) { } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { BeanFactoryDataSourceLookup org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup = new BeanFactoryDataSourceLookup ( ) ; org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup . getDataSource ( java.lang.String ) ; }  <METHOD_END>
