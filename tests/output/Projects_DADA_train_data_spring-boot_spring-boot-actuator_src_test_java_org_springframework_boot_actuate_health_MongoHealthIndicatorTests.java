<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class , MongoDataAutoConfiguration .class , EndpointAutoConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . getBeanNamesForType ( MongoTemplate .class ) . length ) . isEqualTo ( NUMBER ) ; MongoHealthIndicator org.springframework.boot.actuate.health.MongoHealthIndicator = this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . getBean ( MongoHealthIndicator .class ) ; assertThat ( org.springframework.boot.actuate.health.MongoHealthIndicator ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Document org.springframework.boot.actuate.health.Document = mock ( Document .class ) ; given ( org.springframework.boot.actuate.health.Document . getString ( STRING ) ) . willReturn ( STRING ) ; MongoTemplate org.springframework.boot.actuate.health.MongoTemplate = mock ( MongoTemplate .class ) ; given ( org.springframework.boot.actuate.health.MongoTemplate . executeCommand ( STRING ) ) . willReturn ( org.springframework.boot.actuate.health.Document ) ; MongoHealthIndicator org.springframework.boot.actuate.health.MongoHealthIndicator = new MongoHealthIndicator ( org.springframework.boot.actuate.health.MongoTemplate ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.MongoHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.boot.actuate.health.Document ) . getString ( STRING ) ; verify ( org.springframework.boot.actuate.health.MongoTemplate ) . executeCommand ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoTemplate org.springframework.boot.actuate.health.MongoTemplate = mock ( MongoTemplate .class ) ; given ( org.springframework.boot.actuate.health.MongoTemplate . executeCommand ( STRING ) ) . willThrow ( new MongoException ( STRING ) ) ; MongoHealthIndicator org.springframework.boot.actuate.health.MongoHealthIndicator = new MongoHealthIndicator ( org.springframework.boot.actuate.health.MongoTemplate ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.MongoHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( ( java.lang.String ) org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . contains ( STRING ) ; verify ( org.springframework.boot.actuate.health.MongoTemplate ) . executeCommand ( STRING ) ; }  <METHOD_END>
