<METHOD_START> public static java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ( final java.lang.annotation.Annotation ... java.lang.annotation.Annotation[] ) { return new java.lang.reflect.AnnotatedElement ( ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T extends java.lang.annotation.Annotation > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) == java.lang.Class<T> ) { return ( T ) java.lang.annotation.Annotation ; } } return null ; } @ java.lang.Override public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { return java.lang.annotation.Annotation[] ; } @ java.lang.Override public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { return java.lang.annotation.Annotation[] ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T extends java.lang.annotation.Annotation > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) == java.lang.Class<T> ) { return ( T ) java.lang.annotation.Annotation ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { return java.lang.annotation.Annotation[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { return java.lang.annotation.Annotation[] ; }  <METHOD_END>
<METHOD_START> public static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; return java.util.Set<java.lang.String> ( java.lang.reflect.AnnotatedElement , java.lang.reflect.AnnotatedElement . getAnnotation ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . hasLength ( java.lang.String , STRING ) ; return java.util.Set<java.lang.String> ( java.lang.reflect.AnnotatedElement , AnnotationUtils . getAnnotation ( java.lang.reflect.AnnotatedElement , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { if ( java.lang.annotation.Annotation == null ) { return null ; } try { final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.lang.Object ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) , null , null , null , new org.springframework.core.annotation.AnnotatedElementUtils.SimpleAnnotationProcessor<java.lang.Object> < java.lang.Object > ( true ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int ) { java.util.Set<java.lang.String> . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ; return java.lang.Boolean ; } } , new java.util.HashSet<java.lang.reflect.AnnotatedElement> <> ( ) , NUMBER ) ; return ( ! java.util.Set<java.lang.String> . boolean ( ) ? java.util.Set<java.lang.String> : null ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { AnnotationUtils . rethrowAnnotationConfigurationException ( java.lang.Throwable ) ; throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int ) { java.util.Set<java.lang.String> . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ; return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; return boolean ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . hasLength ( java.lang.String , STRING ) ; return boolean ( java.lang.reflect.AnnotatedElement , null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String ) { return java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , java.lang.String , new org.springframework.core.annotation.AnnotatedElementUtils.SimpleAnnotationProcessor<java.lang.Boolean> < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int ) { return ( int > NUMBER ? java.lang.Boolean . java.lang.Boolean : java.lang.Boolean ) ; } } ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int ) { return ( int > NUMBER ? java.lang.Boolean . java.lang.Boolean : java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.reflect.AnnotatedElement . boolean ( java.lang.Class<> ) ) { return true ; } return java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , null , org.springframework.core.annotation.AnnotatedElementUtils.Processor<java.lang.Boolean> ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . hasLength ( java.lang.String , STRING ) ; return java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ( java.lang.reflect.AnnotatedElement , null , java.lang.String , org.springframework.core.annotation.AnnotatedElementUtils.Processor<java.lang.Boolean> ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , null , new org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ( ) ) ; AnnotationUtils . postProcessAnnotationAttributes ( java.lang.reflect.AnnotatedElement , org.springframework.core.annotation.AnnotationAttributes , false , false ) ; return org.springframework.core.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String ) { return org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.String , false , false ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String , boolean boolean , boolean boolean ) { Assert . hasLength ( java.lang.String , STRING ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , null , java.lang.String , new org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ( boolean , boolean ) ) ; AnnotationUtils . postProcessAnnotationAttributes ( java.lang.reflect.AnnotatedElement , org.springframework.core.annotation.AnnotationAttributes , boolean , boolean ) ; return org.springframework.core.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > A A ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { Assert . notNull ( java.lang.Class<A> , STRING ) ; if ( ! ( java.lang.reflect.AnnotatedElement instanceof java.lang.Class ) ) { A A = java.lang.reflect.AnnotatedElement . A ( java.lang.Class<A> ) ; if ( A != null ) { return AnnotationUtils . synthesizeAnnotation ( A , java.lang.reflect.AnnotatedElement ) ; } } AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> ) ; return AnnotationUtils . synthesizeAnnotation ( org.springframework.core.annotation.AnnotationAttributes , java.lang.Class<A> , java.lang.reflect.AnnotatedElement ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<A> , STRING ) ; org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor = new org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ( false , false , true ) ; org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , null , org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ) ; return java.util.Set ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor . java.util.List<org.springframework.core.annotation.AnnotationAttributes> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { return java.util.Set<A> ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , null ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<A> , STRING ) ; if ( java.lang.Class<> == null ) { java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<? extends java.lang.annotation.Annotation> ( java.lang.Class<A> ) ; } else { void ( java.lang.Class<A> , java.lang.Class<> ) ; } org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor = new org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ( false , false , true ) ; org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , null , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ) ; return java.util.Set ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor . java.util.List<org.springframework.core.annotation.AnnotationAttributes> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String ) { return org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ( java.lang.reflect.AnnotatedElement , java.lang.String , false , false ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String , final boolean boolean , final boolean boolean ) { final MultiValueMap < java.lang.String , java.lang.Object > org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap <> ( ) ; java.lang.Object ( java.lang.reflect.AnnotatedElement , null , java.lang.String , new org.springframework.core.annotation.AnnotatedElementUtils.SimpleAnnotationProcessor<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation , boolean , boolean ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.core.annotation.AnnotationAttributes . entrySet ( ) ) { org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . add ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } return java.lang.Boolean ; } } ) ; return ( ! org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . isEmpty ( ) ? org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation , boolean , boolean ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.core.annotation.AnnotationAttributes . entrySet ( ) ) { org.springframework.core.annotation.MultiValueMap<java.lang.String,java.lang.Object> . add ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.reflect.AnnotatedElement . boolean ( java.lang.Class<> ) ) { return true ; } return java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Boolean ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , null , org.springframework.core.annotation.AnnotatedElementUtils.Processor<java.lang.Boolean> ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , boolean boolean , boolean boolean ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , null , new org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ( boolean , boolean ) ) ; AnnotationUtils . postProcessAnnotationAttributes ( java.lang.reflect.AnnotatedElement , org.springframework.core.annotation.AnnotationAttributes , boolean , boolean ) ; return org.springframework.core.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String , boolean boolean , boolean boolean ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , null , java.lang.String , new org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ( boolean , boolean ) ) ; AnnotationUtils . postProcessAnnotationAttributes ( java.lang.reflect.AnnotatedElement , org.springframework.core.annotation.AnnotationAttributes , boolean , boolean ) ; return org.springframework.core.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > A A ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { Assert . notNull ( java.lang.Class<A> , STRING ) ; if ( ! ( java.lang.reflect.AnnotatedElement instanceof java.lang.Class ) ) { A A = java.lang.reflect.AnnotatedElement . A ( java.lang.Class<A> ) ; if ( A != null ) { return AnnotationUtils . synthesizeAnnotation ( A , java.lang.reflect.AnnotatedElement ) ; } } AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , false , false ) ; return AnnotationUtils . synthesizeAnnotation ( org.springframework.core.annotation.AnnotationAttributes , java.lang.Class<A> , java.lang.reflect.AnnotatedElement ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<A> , STRING ) ; org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor = new org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ( false , false , true ) ; org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , null , org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ) ; return java.util.Set ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor . java.util.List<org.springframework.core.annotation.AnnotationAttributes> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { return java.util.Set<A> ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , null ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<A> , STRING ) ; if ( java.lang.Class<> == null ) { java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<? extends java.lang.annotation.Annotation> ( java.lang.Class<A> ) ; } else { void ( java.lang.Class<A> , java.lang.Class<> ) ; } org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor = new org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ( false , false , true ) ; org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , null , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor ) ; return java.util.Set ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , org.springframework.core.annotation.AnnotatedElementUtils.MergedAnnotationAttributesProcessor . java.util.List<org.springframework.core.annotation.AnnotationAttributes> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> < T > org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> ) { return T ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , java.lang.String , null , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> ) ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> < T > org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> ) { try { return T ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , new java.util.HashSet<java.lang.reflect.AnnotatedElement> <> ( ) , NUMBER ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { AnnotationUtils . rethrowAnnotationConfigurationException ( java.lang.Throwable ) ; throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> < T > org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> < java.lang.reflect.AnnotatedElement > java.util.Set<java.lang.reflect.AnnotatedElement> , int int ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; if ( java.util.Set<java.lang.reflect.AnnotatedElement> . boolean ( java.lang.reflect.AnnotatedElement ) ) { try { java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> = java.util.Arrays . java.util.List<java.lang.annotation.Annotation> ( java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) ) ; T T = T ( java.lang.reflect.AnnotatedElement , java.util.List<java.lang.annotation.Annotation> , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int ) ; if ( T != null ) { return T ; } if ( java.lang.reflect.AnnotatedElement instanceof java.lang.Class ) { java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> = new java.util.ArrayList<java.lang.annotation.Annotation> <> ( ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) ) { if ( ! java.util.List<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ) { java.util.List<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ; } } T = T ( java.lang.reflect.AnnotatedElement , java.util.List<java.lang.annotation.Annotation> , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int ) ; if ( T != null ) { return T ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { AnnotationUtils . handleIntrospectionFailure ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> < T > org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> < java.lang.reflect.AnnotatedElement > java.util.Set<java.lang.reflect.AnnotatedElement> , int int ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.util.List<java.lang.annotation.Annotation> ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.Class<> ) ) { if ( java.lang.Class<> == java.lang.Class<> || java.lang.Class<> . java.lang.String ( ) . boolean ( java.lang.String ) || org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) ) { T T = org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . T ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , int ) ; if ( T != null ) { if ( org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) && int == NUMBER ) { org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . java.util.List<T> ( ) . boolean ( T ) ; } else { return T ; } } } else if ( java.lang.Class<> == java.lang.Class<> ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation ) ) { T T = org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . T ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , int ) ; if ( T != null ) { org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . java.util.List<T> ( ) . boolean ( T ) ; } } } } } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.util.List<java.lang.annotation.Annotation> ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.Class<> ) ) { T T = T ( java.lang.Class<> , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int + NUMBER ) ; if ( T != null ) { org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . void ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , T ) ; if ( org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) && int == NUMBER ) { org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . java.util.List<T> ( ) . boolean ( T ) ; } else { return T ; } } } } return null ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> < T > org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> ) { return T ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , java.lang.String , null , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> ) ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> < T > org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> ) { if ( java.lang.Class<> != null && ! org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } try { return T ( java.lang.reflect.AnnotatedElement , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , new java.util.HashSet<java.lang.reflect.AnnotatedElement> <> ( ) , NUMBER ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { AnnotationUtils . rethrowAnnotationConfigurationException ( java.lang.Throwable ) ; throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> < T > org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> < java.lang.reflect.AnnotatedElement > java.util.Set<java.lang.reflect.AnnotatedElement> , int int ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; if ( java.util.Set<java.lang.reflect.AnnotatedElement> . boolean ( java.lang.reflect.AnnotatedElement ) ) { try { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) ; java.util.List<T> < T > java.util.List<T> = ( org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) ? new java.util.ArrayList<T> <> ( ) : null ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.Class<> ) ) { if ( java.lang.Class<> == java.lang.Class<> || java.lang.Class<> . java.lang.String ( ) . boolean ( java.lang.String ) || org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) ) { T T = org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . T ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , int ) ; if ( T != null ) { if ( org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) && int == NUMBER ) { java.util.List<T> . boolean ( T ) ; } else { return T ; } } } else if ( java.lang.Class<> == java.lang.Class<> ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation ) ) { T T = org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . T ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , int ) ; if ( T != null ) { java.util.List<T> . boolean ( T ) ; } } } } } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.Class<> ) ) { T T = T ( java.lang.Class<> , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int + NUMBER ) ; if ( T != null ) { org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . void ( java.lang.Class<> , java.lang.annotation.Annotation , T ) ; if ( org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) && int == NUMBER ) { java.util.List<T> . boolean ( T ) ; } else { return T ; } } } } if ( org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . boolean ( ) ) { org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> . java.util.List<T> ( ) . boolean ( NUMBER , java.util.List<T> ) ; } if ( java.lang.reflect.AnnotatedElement instanceof java.lang.reflect.Method ) { java.lang.reflect.Method java.lang.reflect.Method = ( java.lang.reflect.Method ) java.lang.reflect.AnnotatedElement ; java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; T T = T ( java.lang.reflect.Method , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int ) ; if ( T != null ) { return T ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.Class<?>[] ( ) ; T = T ( java.lang.reflect.Method , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int , java.lang.Class<?>[] ) ; if ( T != null ) { return T ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; while ( true ) { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; if ( java.lang.Class<> == null || java.lang.Object .class == java.lang.Class<> ) { break; } try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; T = T ( java.lang.reflect.Method , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int ) ; if ( T != null ) { return T ; } } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } T = T ( java.lang.reflect.Method , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int , java.lang.Class<> . java.lang.Class<?>[] ( ) ) ; if ( T != null ) { return T ; } } } else if ( java.lang.reflect.AnnotatedElement instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.AnnotatedElement ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { T T = T ( java.lang.Class<> , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int ) ; if ( T != null ) { return T ; } } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; if ( java.lang.Class<> != null && java.lang.Object .class != java.lang.Class<> ) { T T = T ( java.lang.Class<> , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int ) ; if ( T != null ) { return T ; } } } } catch ( java.lang.Throwable java.lang.Throwable ) { AnnotationUtils . handleIntrospectionFailure ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> < T > org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> < java.lang.reflect.AnnotatedElement > java.util.Set<java.lang.reflect.AnnotatedElement> , int int , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( AnnotationUtils . isInterfaceWithAnnotatedMethods ( java.lang.Class<> ) ) { try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; T T = T ( java.lang.reflect.Method , java.lang.Class<> , java.lang.String , java.lang.Class<> , org.springframework.core.annotation.AnnotatedElementUtils.Processor<T> , java.util.Set<java.lang.reflect.AnnotatedElement> , int ) ; if ( T != null ) { return T ; } } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < A extends java.lang.annotation.Annotation > A [] A[] ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { try { return ( A [] ) AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { AnnotationUtils . handleIntrospectionFailure ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } return ( A [] ) java.lang.annotation.Annotation[] ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = AnnotationUtils . resolveContainerAnnotationType ( java.lang.Class<> ) ; if ( java.lang.Class<> == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( AnnotationUtils . VALUE ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; if ( ! java.lang.Class<> . boolean ( ) || java.lang.Class<> . java.lang.Class<?> ( ) != java.lang.Class<> ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { AnnotationUtils . rethrowAnnotationConfigurationException ( java.lang.Throwable ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ; throw new AnnotationConfigurationException ( java.lang.String , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> , java.util.List<org.springframework.core.annotation.AnnotationAttributes> < AnnotationAttributes > java.util.List<org.springframework.core.annotation.AnnotationAttributes> ) { java.util.Set<A> < A > java.util.Set<A> = new java.util.LinkedHashSet<A> <> ( ) ; for ( AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes : java.util.List<org.springframework.core.annotation.AnnotationAttributes> ) { AnnotationUtils . postProcessAnnotationAttributes ( java.lang.reflect.AnnotatedElement , org.springframework.core.annotation.AnnotationAttributes , false , false ) ; java.util.Set<A> . boolean ( AnnotationUtils . synthesizeAnnotation ( org.springframework.core.annotation.AnnotationAttributes , java.lang.Class<A> , java.lang.reflect.AnnotatedElement ) ) ; } return java.util.Set<A> ; }  <METHOD_END>
<METHOD_START> T T ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int );  <METHOD_END>
<METHOD_START> void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , T T );  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> java.util.List<T> < T > java.util.List<T> ( )  <METHOD_END>
<METHOD_START> public void ( ) { this( false ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , T T ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.util.List<T> < T > java.util.List<T> ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Boolean java.lang.Boolean ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int ) { return java.lang.Boolean . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> void ( ) { this( false , false , false ); }  <METHOD_END>
<METHOD_START> void ( boolean boolean , boolean boolean ) { this( boolean , boolean , false ); }  <METHOD_END>
<METHOD_START> void ( boolean boolean , boolean boolean , boolean boolean ) { this . boolean = boolean ; this . boolean = boolean ; this . boolean = boolean ; this . java.util.List<org.springframework.core.annotation.AnnotationAttributes> = ( boolean ? new java.util.ArrayList <> ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.core.annotation.AnnotationAttributes> < AnnotationAttributes > java.util.List<org.springframework.core.annotation.AnnotationAttributes> ( ) { return this . java.util.List<org.springframework.core.annotation.AnnotationAttributes> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , int int ) { return AnnotationUtils . retrieveAnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , this . boolean , this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ) { java.lang.annotation.Annotation = AnnotationUtils . synthesizeAnnotation ( java.lang.annotation.Annotation , java.lang.reflect.AnnotatedElement ) ; java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : AnnotationUtils . getAttributeMethods ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; java.lang.String java.lang.String = AnnotationUtils . getAttributeOverrideName ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.lang.String != null ) { if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { continue; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = AnnotationUtils . getAttributeAliasMap ( java.lang.Class<> ) . get ( java.lang.String ) ; if ( java.util.List<java.lang.String> != null ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } } void ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , org.springframework.core.annotation.AnnotationAttributes , java.lang.String , java.util.List<java.lang.String> ) ; } else if ( ! AnnotationUtils . VALUE . equals ( java.lang.String ) && org.springframework.core.annotation.AnnotationAttributes . containsKey ( java.lang.String ) ) { void ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , org.springframework.core.annotation.AnnotationAttributes , java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes , java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.core.annotation.AnnotationAttributes . put ( java.lang.String , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes , java.lang.String java.lang.String , java.lang.String java.lang.String ) { org.springframework.core.annotation.AnnotationAttributes . put ( java.lang.String , java.lang.Object ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = AnnotationUtils . getValue ( java.lang.annotation.Annotation , java.lang.String ) ; return AnnotationUtils . adaptValue ( java.lang.reflect.AnnotatedElement , java.lang.Object , this . boolean , this . boolean ) ; }  <METHOD_END>
