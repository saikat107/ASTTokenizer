<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new TypeDiscoverer <> ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDiscoverer < java.lang.Object > org.springframework.data.util.TypeDiscoverer<java.lang.Object> = new TypeDiscoverer <> ( java.lang.Object .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; TypeDiscoverer < java.lang.String > org.springframework.data.util.TypeDiscoverer<java.lang.String> = new TypeDiscoverer <> ( java.lang.String .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; assertThat ( org.springframework.data.util.TypeDiscoverer<java.lang.Object> . equals ( org.springframework.data.util.TypeDiscoverer<java.lang.String> ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . boolean ( java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ) . isFalse ( ) ; TypeDiscoverer < java.lang.Object > org.springframework.data.util.TypeDiscoverer<java.lang.Object> = new TypeDiscoverer <> ( java.lang.Object .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; TypeDiscoverer < java.lang.Object > org.springframework.data.util.TypeDiscoverer<java.lang.Object> = new TypeDiscoverer <> ( java.lang.Object .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; assertThat ( org.springframework.data.util.TypeDiscoverer<java.lang.Object> . equals ( org.springframework.data.util.TypeDiscoverer<java.lang.Object> ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.TypeDiscovererUnitTests.SelfReferencing > org.springframework.data.util.TypeInformation<org.springframework.data.util.TypeDiscovererUnitTests.SelfReferencing> = from ( org.springframework.data.util.TypeDiscovererUnitTests.SelfReferencing .class ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeInformation<org.springframework.data.util.TypeDiscovererUnitTests.SelfReferencing> . getProperty ( STRING ) . flatMap ( TypeInformation :: getMapValueType ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = java.util.Optional<org.springframework.data.util.TypeInformation<?>> . flatMap ( it -> it . getProperty ( STRING ) ) . flatMap ( TypeInformation :: getMapValueType ) ; assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) . isEqualTo ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.TypeDiscovererUnitTests.SelfReferencingMap > org.springframework.data.util.TypeInformation<org.springframework.data.util.TypeDiscovererUnitTests.SelfReferencingMap> = from ( org.springframework.data.util.TypeDiscovererUnitTests.SelfReferencingMap .class ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeInformation<org.springframework.data.util.TypeDiscovererUnitTests.SelfReferencingMap> . getProperty ( STRING ) ; assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) . hasValueSatisfying ( it -> assertThat ( it . getMapValueType ( ) ) . hasValue ( information ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = new TypeDiscoverer <> ( org.springframework.data.util.TypeDiscovererUnitTests.CustomMap .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; assertThat ( org.springframework.data.util.TypeInformation<> . getMapValueType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Locale .class ) ) ; assertThat ( org.springframework.data.util.TypeInformation<> . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDiscoverer < org.springframework.data.util.TypeDiscovererUnitTests.CustomCollection > org.springframework.data.util.TypeDiscoverer<org.springframework.data.util.TypeDiscovererUnitTests.CustomCollection> = new TypeDiscoverer <> ( org.springframework.data.util.TypeDiscovererUnitTests.CustomCollection .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; assertThat ( org.springframework.data.util.TypeDiscoverer<org.springframework.data.util.TypeDiscovererUnitTests.CustomCollection> . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeDiscoverer < java.lang.String [] > org.springframework.data.util.TypeDiscoverer<java.lang.String[]> = new TypeDiscoverer <> ( java.lang.String [] .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; assertThat ( org.springframework.data.util.TypeDiscoverer<java.lang.String[]> . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException , java.lang.SecurityException { TypeDiscoverer < org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors > org.springframework.data.util.TypeDiscoverer<org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors> = new TypeDiscoverer <> ( org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; java.lang.reflect.Constructor<org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors> < org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors > java.lang.reflect.Constructor<org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors> = org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors .class . java.lang.reflect.Constructor<org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors> ( java.util.List .class , java.util.Locale .class ) ; java.util.List<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeDiscoverer<org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors> . getParameterTypes ( java.lang.reflect.Constructor<org.springframework.data.util.TypeDiscovererUnitTests.GenericConstructors> ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( java.util.List .class ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( NUMBER ) . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { TypeDiscoverer < java.util.Map > org.springframework.data.util.TypeDiscoverer<java.util.Map> = new TypeDiscoverer <> ( java.util.Map .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; assertThat ( org.springframework.data.util.TypeDiscoverer<java.util.Map> . getComponentType ( ) ) . isEmpty ( ) ; assertThat ( org.springframework.data.util.TypeDiscoverer<java.util.Map> . getMapValueType ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { TypeDiscoverer < org.springframework.data.util.TypeDiscovererUnitTests.Person > org.springframework.data.util.TypeDiscoverer<org.springframework.data.util.TypeDiscovererUnitTests.Person> = new TypeDiscoverer <> ( org.springframework.data.util.TypeDiscovererUnitTests.Person .class , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; TypeInformation org.springframework.data.util.TypeInformation = from ( org.springframework.data.util.TypeDiscovererUnitTests.Address .class ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeDiscoverer<org.springframework.data.util.TypeDiscovererUnitTests.Person> . getProperty ( STRING ) ; assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) . hasValueSatisfying ( it -> { assertThat ( it . isCollectionLike ( ) ) . isFalse ( ) ; assertThat ( it . getComponentType ( ) ) . hasValue ( reference ) ; } ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeDiscoverer<org.springframework.data.util.TypeDiscovererUnitTests.Person> . getProperty ( STRING ) ; assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> ) . hasValueSatisfying ( it -> { assertThat ( it . isCollectionLike ( ) ) . isTrue ( ) ; assertThat ( it . getComponentType ( ) ) . hasValue ( reference ) ; } ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.Locale java.util.Locale ) {		}  <METHOD_END>
