<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerInterceptor org.springframework.boot.actuate.endpoint.mvc.HandlerInterceptor = mock ( HandlerInterceptor .class ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; AbstractEndpointHandlerMapping < ? > org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<?> = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpointHandlerMapping <> ( java.util.Collections . java.util.List<org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . setSecurityInterceptor ( org.springframework.boot.actuate.endpoint.mvc.HandlerInterceptor ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) . getInterceptors ( ) ) . contains ( org.springframework.boot.actuate.endpoint.mvc.HandlerInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; AbstractEndpointHandlerMapping < ? > org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<?> = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpointHandlerMapping <> ( java.util.Collections . java.util.List<org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) . getInterceptors ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerInterceptor org.springframework.boot.actuate.endpoint.mvc.HandlerInterceptor = mock ( HandlerInterceptor .class ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; AbstractEndpointHandlerMapping < ? > org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<?> = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpointHandlerMapping <> ( java.util.Collections . java.util.List<org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . setSecurityInterceptor ( org.springframework.boot.actuate.endpoint.mvc.HandlerInterceptor ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . afterPropertiesSet ( ) ; MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest = org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ; org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ) . getInterceptors ( ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ) . getInterceptors ( ) [ NUMBER ] ) . isEqualTo ( org.springframework.boot.actuate.endpoint.mvc.HandlerInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestMvcEndpoint = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestMvcEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ( new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ( STRING ) ) ; AbstractEndpointHandlerMapping < ? > org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<?> = new org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpointHandlerMapping <> ( java.util.Arrays .< MvcEndpoint > java.util.List<org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint> ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestMvcEndpoint , org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ) ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . setApplicationContext ( this . org.springframework.boot.actuate.endpoint.mvc.StaticApplicationContext ) ; org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . getHandlerMethods ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNull ( ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMapping<> . getHandler ( org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( STRING , STRING ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest org.springframework.boot.actuate.endpoint.mvc.MockHttpServletRequest ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new MockHttpServletRequest ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ) { super( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ); }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ) { super( org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestEndpoint ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ PostMapping public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> void ( java.util.Collection<E> < E > java.util.Collection<E> ) { super( java.util.Collection<E> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( MvcEndpoint org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint ) { if ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint instanceof org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointHandlerMappingTests.TestActionEndpoint ) { return super. getPath ( org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint ) ; } return null ; }  <METHOD_END>
