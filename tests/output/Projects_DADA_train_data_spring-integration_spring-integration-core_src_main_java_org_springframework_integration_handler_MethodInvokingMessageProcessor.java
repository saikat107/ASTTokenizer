<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> = new MessagingMethodInvokerHelper < T > ( java.lang.Object , java.lang.reflect.Method , false ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> = new MessagingMethodInvokerHelper < T > ( java.lang.Object , java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , boolean boolean ) { this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> = new MessagingMethodInvokerHelper < T > ( java.lang.Object , java.lang.String , boolean ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> = new MessagingMethodInvokerHelper < T > ( java.lang.Object , java.lang.Class<> , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConversionService org.springframework.integration.handler.ConversionService ) { super. setConversionService ( org.springframework.integration.handler.ConversionService ) ; this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> . setConversionService ( org.springframework.integration.handler.ConversionService ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.handler.BeanFactory ) { super. setBeanFactory ( org.springframework.integration.handler.BeanFactory ) ; this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> . setBeanFactory ( org.springframework.integration.handler.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> . setUseSpelInvoker ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Message < ? > org.springframework.integration.handler.Message<?> ) { try { return this . org.springframework.integration.handler.MessagingMethodInvokerHelper<T> . process ( org.springframework.integration.handler.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageHandlingException ( org.springframework.integration.handler.Message<> , java.lang.Exception ) ; } }  <METHOD_END>
