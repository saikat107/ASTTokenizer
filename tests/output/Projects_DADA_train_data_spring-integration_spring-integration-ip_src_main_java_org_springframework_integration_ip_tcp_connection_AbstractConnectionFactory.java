<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) { this . org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher = org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ; if ( ! this . boolean && this . org.springframework.integration.ip.tcp.connection.Deserializer<> instanceof ApplicationEventPublisherAware ) { ( ( ApplicationEventPublisherAware ) this . org.springframework.integration.ip.tcp.connection.Deserializer<> ) . setApplicationEventPublisher ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ( ) { return this . org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> protected void void ( java.net.Socket java.net.Socket ) throws java.net.SocketException { if ( this . int >= NUMBER ) { java.net.Socket . void ( this . int ) ; } if ( this . int > NUMBER ) { java.net.Socket . void ( this . int ) ; } if ( this . int > NUMBER ) { java.net.Socket . void ( this . int ) ; } java.net.Socket . void ( this . boolean ) ; if ( this . int >= NUMBER ) { java.net.Socket . void ( true , this . int ) ; } if ( this . int >= NUMBER ) { java.net.Socket . void ( this . int ) ; } java.net.Socket . void ( this . boolean ) ; this . org.springframework.integration.ip.tcp.connection.TcpSocketSupport . postProcessSocket ( java.net.Socket ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . state ( ! boolean ( ) , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . state ( ! boolean ( ) , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.TcpListener org.springframework.integration.ip.tcp.connection.TcpListener ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpListener ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpSender ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.Serializer<?> < ? > org.springframework.integration.ip.tcp.connection.Serializer<?> ( ) { return this . org.springframework.integration.ip.tcp.connection.Serializer<> ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.Deserializer<?> < ? > org.springframework.integration.ip.tcp.connection.Deserializer<?> ( ) { return this . org.springframework.integration.ip.tcp.connection.Deserializer<> ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpMessageMapper ; }  <METHOD_END>
<METHOD_START> public void void ( TcpListener org.springframework.integration.ip.tcp.connection.TcpListener ) { Assert . isNull ( this . org.springframework.integration.ip.tcp.connection.TcpListener , this . java.lang.Class<? extends org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory> ( ) . java.lang.String ( ) + STRING ) ; this . org.springframework.integration.ip.tcp.connection.TcpListener = org.springframework.integration.ip.tcp.connection.TcpListener ; }  <METHOD_END>
<METHOD_START> public void void ( TcpSender org.springframework.integration.ip.tcp.connection.TcpSender ) { Assert . isNull ( this . org.springframework.integration.ip.tcp.connection.TcpSender , this . java.lang.Class<? extends org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory> ( ) . java.lang.String ( ) + STRING ) ; this . org.springframework.integration.ip.tcp.connection.TcpSender = org.springframework.integration.ip.tcp.connection.TcpSender ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( Deserializer < ? > org.springframework.integration.ip.tcp.connection.Deserializer<?> ) { this . org.springframework.integration.ip.tcp.connection.Deserializer<?> = org.springframework.integration.ip.tcp.connection.Deserializer<> ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( Serializer < ? > org.springframework.integration.ip.tcp.connection.Serializer<?> ) { this . org.springframework.integration.ip.tcp.connection.Serializer<?> = org.springframework.integration.ip.tcp.connection.Serializer<> ; }  <METHOD_END>
<METHOD_START> public void void ( TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper ) { this . org.springframework.integration.ip.tcp.connection.TcpMessageMapper = org.springframework.integration.ip.tcp.connection.TcpMessageMapper ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = ! boolean ; }  <METHOD_END>
<METHOD_START> public void void ( TcpConnectionInterceptorFactoryChain org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactoryChain ) { this . org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactoryChain = org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactoryChain ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> protected java.util.concurrent.BlockingQueue<org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO> < org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO > java.util.concurrent.BlockingQueue<org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO> ( ) { return this . java.util.concurrent.BlockingQueue<org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO> ; }  <METHOD_END>
<METHOD_START> protected long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { Assert . isTrue ( long > NUMBER , STRING ) ; this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( ! this . boolean ) { this . org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setBeanFactory ( this . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.concurrent.Executor java.util.concurrent.Executor ( ) { if ( ! this . boolean ) { throw new MessagingException ( STRING ) ; } synchronized ( this . java.lang.Object ) { if ( this . java.util.concurrent.Executor == null ) { this . boolean = true ; this . java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; } return this . java.util.concurrent.Executor ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> < java.lang.String , TcpConnectionSupport > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> = this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . entrySet ( ) . iterator ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> . hasNext ( ) ) { TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> . next ( ) . getValue ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> . remove ( ) ; } } synchronized ( this . java.lang.Object ) { if ( this . boolean ) { java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = ( java.util.concurrent.ExecutorService ) this . java.util.concurrent.Executor ; java.util.concurrent.ExecutorService . void ( ) ; try { if ( ! java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { logger . debug ( STRING ) ; java.util.concurrent.ExecutorService . java.util.List<java.lang.Runnable> ( ) ; if ( ! java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { logger . debug ( STRING ) ; } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.util.concurrent.ExecutorService . java.util.List<java.lang.Runnable> ( ) ; java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } finally { this . java.util.concurrent.Executor = null ; this . boolean = false ; } } } if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) throws java.lang.Exception { try { if ( this . org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactoryChain == null ) { return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; } TcpConnectionInterceptorFactory [] org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactory[] = this . org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactoryChain . getInterceptorFactories ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactory[] == null ) { return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; } for ( TcpConnectionInterceptorFactory org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactory : org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactory[] ) { TcpConnectionInterceptorSupport org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorFactory . getInterceptor ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport . setTheConnection ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; if ( this . org.springframework.integration.ip.tcp.connection.TcpListener == null ) { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . registerListener ( org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport ) ; } if ( this . org.springframework.integration.ip.tcp.connection.TcpSender == null ) { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . registerSender ( org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport ) ; } org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport ; } return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; } finally { this . void ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( int int , final java.nio.channels.Selector java.nio.channels.Selector , java.nio.channels.ServerSocketChannel java.nio.channels.ServerSocketChannel , java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> < java.nio.channels.SocketChannel , TcpNioConnection > java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> ) throws java.io.IOException { final long long = java.lang.System . long ( ) ; void ( java.nio.channels.Selector , long ) ; if ( this . int > NUMBER || long >= this . long || int == NUMBER ) { this . long = long + this . int ; java.util.Iterator<java.util.Map.Entry<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection>> < java.util.Map.Entry<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> < java.nio.channels.SocketChannel , TcpNioConnection > > java.util.Iterator<java.util.Map.Entry<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection>> = java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> . entrySet ( ) . iterator ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection>> . hasNext ( ) ) { java.nio.channels.SocketChannel java.nio.channels.SocketChannel = java.util.Iterator<java.util.Map.Entry<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection>> . next ( ) . getKey ( ) ; if ( ! java.nio.channels.SocketChannel . boolean ( ) ) { logger . debug ( STRING ) ; java.util.Iterator<java.util.Map.Entry<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection>> . remove ( ) ; } else if ( this . int > NUMBER ) { TcpNioConnection org.springframework.integration.ip.tcp.connection.TcpNioConnection = java.util.Map<java.nio.channels.SocketChannel,org.springframework.integration.ip.tcp.connection.TcpNioConnection> . get ( java.nio.channels.SocketChannel ) ; if ( long - org.springframework.integration.ip.tcp.connection.TcpNioConnection . getLastRead ( ) >= this . int ) { if ( ! org.springframework.integration.ip.tcp.connection.TcpNioConnection . isServer ( ) && long - org.springframework.integration.ip.tcp.connection.TcpNioConnection . getLastSend ( ) < this . int && long - org.springframework.integration.ip.tcp.connection.TcpNioConnection . getLastRead ( ) < this . int * NUMBER ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.ip.tcp.connection.TcpNioConnection . getConnectionId ( ) ) ; } } else { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.integration.ip.tcp.connection.TcpNioConnection . getConnectionId ( ) ) ; } java.net.SocketTimeoutException java.net.SocketTimeoutException = new java.net.SocketTimeoutException ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . publishConnectionExceptionEvent ( java.net.SocketTimeoutException ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . timeout ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . sendExceptionToListener ( java.net.SocketTimeoutException ) ; } } } } } this . void ( ) ; if ( logger . isTraceEnabled ( ) ) { if ( this . java.lang.String == null ) { logger . trace ( STRING + this . int + STRING + int ) ; } else { logger . trace ( STRING + this . java.lang.String + STRING + this . int + STRING + int ) ; } } if ( int > NUMBER ) { java.util.Set<java.nio.channels.SelectionKey> < java.nio.channels.SelectionKey > java.util.Set<java.nio.channels.SelectionKey> = java.nio.channels.Selector . java.util.Set<java.nio.channels.SelectionKey> ( ) ; java.util.Iterator<java.nio.channels.SelectionKey> < java.nio.channels.SelectionKey > java.util.Iterator<java.nio.channels.SelectionKey> = java.util.Set<java.nio.channels.SelectionKey> . java.util.Iterator<java.nio.channels.SelectionKey> ( ) ; while ( java.util.Iterator<java.nio.channels.SelectionKey> . boolean ( ) ) { final java.nio.channels.SelectionKey java.nio.channels.SelectionKey = java.util.Iterator<java.nio.channels.SelectionKey> . java.nio.channels.SelectionKey ( ) ; java.util.Iterator<java.nio.channels.SelectionKey> . void ( ) ; try { if ( ! java.nio.channels.SelectionKey . boolean ( ) ) { logger . debug ( STRING ) ; } else if ( java.nio.channels.SelectionKey . boolean ( ) ) { java.nio.channels.SelectionKey . java.nio.channels.SelectionKey ( java.nio.channels.SelectionKey . int ( ) - java.nio.channels.SelectionKey . int ) ; final TcpNioConnection org.springframework.integration.ip.tcp.connection.TcpNioConnection ; org.springframework.integration.ip.tcp.connection.TcpNioConnection = ( TcpNioConnection ) java.nio.channels.SelectionKey . java.lang.Object ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . setLastRead ( java.lang.System . long ( ) ) ; try { this . java.util.concurrent.Executor . void ( ( ) { boolean boolean = false ; try { org.springframework.integration.ip.tcp.connection.TcpNioConnection . readPacket ( ) ; } catch ( java.util.concurrent.RejectedExecutionException java.util.concurrent.RejectedExecutionException ) { void ( java.nio.channels.Selector , long , java.nio.channels.SelectionKey ) ; boolean = true ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.integration.ip.tcp.connection.TcpNioConnection . isOpen ( ) ) { logger . error ( STRING + org.springframework.integration.ip.tcp.connection.TcpNioConnection . getConnectionId ( ) + STRING + java.lang.Exception . java.lang.String ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . close ( ) ; } else { logger . debug ( STRING ) ; } } if ( ! boolean ) { if ( java.nio.channels.SelectionKey . java.nio.channels.SelectableChannel ( ) . boolean ( ) ) { java.nio.channels.SelectionKey . java.nio.channels.SelectionKey ( java.nio.channels.SelectionKey . int ) ; java.nio.channels.Selector . java.nio.channels.Selector ( ) ; } else { org.springframework.integration.ip.tcp.connection.TcpNioConnection . sendExceptionToListener ( new java.io.EOFException ( STRING ) ) ; } } } ) ; } catch ( java.util.concurrent.RejectedExecutionException java.util.concurrent.RejectedExecutionException ) { void ( java.nio.channels.Selector , long , java.nio.channels.SelectionKey ) ; } } else if ( java.nio.channels.SelectionKey . boolean ( ) ) { try { void ( java.nio.channels.Selector , java.nio.channels.ServerSocketChannel , long ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; } } else { logger . error ( STRING + java.nio.channels.SelectionKey ) ; } } catch ( java.nio.channels.CancelledKeyException java.nio.channels.CancelledKeyException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.nio.channels.SelectionKey + STRING ) ; } } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING + java.nio.channels.SelectionKey , java.lang.Exception ) ; } } } }  <METHOD_END>
<METHOD_START> protected void void ( java.nio.channels.Selector java.nio.channels.Selector , long long , final java.nio.channels.SelectionKey java.nio.channels.SelectionKey ) { TcpNioConnection org.springframework.integration.ip.tcp.connection.TcpNioConnection = ( TcpNioConnection ) java.nio.channels.SelectionKey . java.lang.Object ( ) ; if ( ! this . java.util.concurrent.BlockingQueue<org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO> . boolean ( new org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO ( long , java.nio.channels.SelectionKey ) ) ) { logger . error ( STRING + org.springframework.integration.ip.tcp.connection.TcpNioConnection . getConnectionId ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . close ( ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.ip.tcp.connection.TcpNioConnection . getConnectionId ( ) ) ; } java.nio.channels.Selector . java.nio.channels.Selector ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.nio.channels.Selector java.nio.channels.Selector , long long ) { boolean boolean = false ; try { while ( this . java.util.concurrent.BlockingQueue<org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO> . int ( ) > NUMBER ) { if ( this . java.util.concurrent.BlockingQueue<org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO> . org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO ( ) . long + this . long < long ) { org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO = this . java.util.concurrent.BlockingQueue<org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO> . org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO ( ) ; if ( org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO . java.nio.channels.SelectionKey . java.nio.channels.SelectableChannel ( ) . boolean ( ) ) { org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO . java.nio.channels.SelectionKey . java.nio.channels.SelectionKey ( java.nio.channels.SelectionKey . int ) ; boolean = true ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + ( ( TcpNioConnection ) org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO . java.nio.channels.SelectionKey . java.lang.Object ( ) ) . getConnectionId ( ) ) ; } } else { ( ( TcpNioConnection ) org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory.PendingIO . java.nio.channels.SelectionKey . java.lang.Object ( ) ) . sendExceptionToListener ( new java.io.EOFException ( STRING ) ) ; } } else { break; } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } finally { if ( boolean ) { java.nio.channels.Selector . java.nio.channels.Selector ( ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( final java.nio.channels.Selector java.nio.channels.Selector , java.nio.channels.ServerSocketChannel java.nio.channels.ServerSocketChannel , long long ) throws java.io.IOException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> ) { if ( ! this . boolean ) { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . close ( ) ; return; } this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . put ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( getComponentName ( ) + STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> < java.lang.String , TcpConnectionSupport > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> = this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . entrySet ( ) . iterator ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> . hasNext ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> < java.lang.String , TcpConnectionSupport > java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> . next ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . getValue ( ) ; if ( ! org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport>> . remove ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( getComponentName ( ) + STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) ) ; } } else { java.util.List<java.lang.String> . boolean ( java.util.Map.Entry<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . getKey ( ) ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( getComponentName ( ) + STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) ) ; } } } return java.util.List<java.lang.String> ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected void void ( ) java.io.IOException { if ( ! this . boolean ( ) ) { throw new java.io.IOException ( this + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.connection.TcpSocketSupport org.springframework.integration.ip.tcp.connection.TcpSocketSupport ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpSocketSupport ; }  <METHOD_END>
<METHOD_START> public void void ( TcpSocketSupport org.springframework.integration.ip.tcp.connection.TcpSocketSupport ) { Assert . notNull ( org.springframework.integration.ip.tcp.connection.TcpSocketSupport , STRING ) ; this . org.springframework.integration.ip.tcp.connection.TcpSocketSupport = org.springframework.integration.ip.tcp.connection.TcpSocketSupport ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( this . java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> ) { boolean boolean = false ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.connection.TcpConnectionSupport> . get ( java.lang.String ) ; if ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport != null ) { try { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . close ( ) ; boolean = true ; } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String , java.lang.Exception ) ; } org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . publishConnectionExceptionEvent ( java.lang.Exception ) ; } } return boolean ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return super. java.lang.String ( ) + ( this . java.lang.String != null ? STRING + this . java.lang.String : STRING ) + STRING + int ( ) ; }  <METHOD_END>
<METHOD_START> private void ( long long , java.nio.channels.SelectionKey java.nio.channels.SelectionKey ) { this . long = long ; this . java.nio.channels.SelectionKey = java.nio.channels.SelectionKey ; }  <METHOD_END>
