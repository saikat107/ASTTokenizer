<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; testSampleConfiguration ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; testFullConfiguration ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; testFullConfiguration ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; testCustomConfiguration ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; testExplicitContainerFactoryConfiguration ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; testDefaultContainerFactoryConfiguration ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) org.springframework.jms.annotation.JMSException { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; thrown . expect ( ListenerExecutionFailedException .class ) ; thrown . expectCause ( Is .< MethodArgumentNotValidException > isA ( MethodArgumentNotValidException .class ) ) ; testJmsHandlerMethodFactoryConfiguration ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; testJmsListenerRepeatable ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ApplicationContext org.springframework.jms.annotation.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.jms.annotation.AnnotationDrivenNamespaceTests> ( ) ) ; testJmsListenerRepeatable ( org.springframework.jms.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( JmsListenerEndpointRegistrar org.springframework.jms.annotation.JmsListenerEndpointRegistrar ) { SimpleJmsListenerEndpoint org.springframework.jms.annotation.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.annotation.SimpleJmsListenerEndpoint . setId ( STRING ) ; org.springframework.jms.annotation.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; org.springframework.jms.annotation.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.annotation.MessageListener ) ; org.springframework.jms.annotation.JmsListenerEndpointRegistrar . registerEndpoint ( org.springframework.jms.annotation.SimpleJmsListenerEndpoint ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageListener org.springframework.jms.annotation.MessageListener ) { this . org.springframework.jms.annotation.MessageListener = org.springframework.jms.annotation.MessageListener ; }  <METHOD_END>
