<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.integration.support.management.ApplicationContext ) throws org.springframework.integration.support.management.BeansException { this . org.springframework.integration.support.management.ApplicationContext = org.springframework.integration.support.management.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MetricsFactory org.springframework.integration.support.management.MetricsFactory ) { this . org.springframework.integration.support.management.MetricsFactory = org.springframework.integration.support.management.MetricsFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return this . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . state ( this . org.springframework.integration.support.management.ApplicationContext != null , STRING ) ; Assert . state ( java.lang.String . boolean ( this . java.lang.String ) , java.lang.Class<? extends org.springframework.integration.support.management.IntegrationManagementConfigurer> ( ) . java.lang.String ( ) + STRING + java.lang.String ) ; if ( this . org.springframework.integration.support.management.MetricsFactory == null && StringUtils . hasText ( this . java.lang.String ) ) { this . org.springframework.integration.support.management.MetricsFactory = this . org.springframework.integration.support.management.ApplicationContext . getBean ( this . java.lang.String , MetricsFactory .class ) ; } if ( this . org.springframework.integration.support.management.MetricsFactory == null ) { this . org.springframework.integration.support.management.MetricsFactory = new DefaultMetricsFactory ( ) ; } java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> < java.lang.String , IntegrationManagement > java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> = this . org.springframework.integration.support.management.ApplicationContext . getBeansOfType ( IntegrationManagement .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> < java.lang.String , IntegrationManagement > java.util.Map.Entry<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> : java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> . entrySet ( ) ) { IntegrationManagement org.springframework.integration.support.management.IntegrationManagement = java.util.Map.Entry<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> . getValue ( ) ; org.springframework.integration.support.management.IntegrationManagement . setLoggingEnabled ( this . boolean ) ; if ( org.springframework.integration.support.management.IntegrationManagement instanceof MessageChannelMetrics ) { void ( java.util.Map.Entry<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> . getKey ( ) , ( MessageChannelMetrics ) org.springframework.integration.support.management.IntegrationManagement ) ; } else if ( org.springframework.integration.support.management.IntegrationManagement instanceof MessageHandlerMetrics ) { void ( java.util.Map.Entry<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> . getKey ( ) , ( MessageHandlerMetrics ) org.springframework.integration.support.management.IntegrationManagement ) ; } else if ( org.springframework.integration.support.management.IntegrationManagement instanceof MessageSourceMetrics ) { void ( java.util.Map.Entry<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> . getKey ( ) , ( MessageSourceMetrics ) org.springframework.integration.support.management.IntegrationManagement ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.String java.lang.String , MessageChannelMetrics org.springframework.integration.support.management.MessageChannelMetrics ) { AbstractMessageChannelMetrics org.springframework.integration.support.management.AbstractMessageChannelMetrics = this . org.springframework.integration.support.management.MetricsFactory . createChannelMetrics ( java.lang.String ) ; Assert . state ( org.springframework.integration.support.management.AbstractMessageChannelMetrics != null , STRING ) ; java.lang.Boolean java.lang.Boolean = java.lang.Boolean ( this . java.lang.String[] , java.lang.String ) ; if ( java.lang.Boolean != null ) { org.springframework.integration.support.management.MessageChannelMetrics . setCountsEnabled ( java.lang.Boolean ) ; } else { org.springframework.integration.support.management.MessageChannelMetrics . setCountsEnabled ( this . java.lang.Boolean ) ; } java.lang.Boolean = java.lang.Boolean ( this . java.lang.String[] , java.lang.String ) ; if ( java.lang.Boolean != null ) { org.springframework.integration.support.management.MessageChannelMetrics . setStatsEnabled ( java.lang.Boolean ) ; org.springframework.integration.support.management.AbstractMessageChannelMetrics . setFullStatsEnabled ( java.lang.Boolean ) ; } else { org.springframework.integration.support.management.MessageChannelMetrics . setStatsEnabled ( this . java.lang.Boolean ) ; org.springframework.integration.support.management.AbstractMessageChannelMetrics . setFullStatsEnabled ( this . java.lang.Boolean ) ; } if ( org.springframework.integration.support.management.MessageChannelMetrics instanceof ConfigurableMetricsAware ) { ( ( ConfigurableMetricsAware < AbstractMessageChannelMetrics > ) org.springframework.integration.support.management.MessageChannelMetrics ) . configureMetrics ( org.springframework.integration.support.management.AbstractMessageChannelMetrics ) ; } this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageChannelMetrics> . put ( java.lang.String , org.springframework.integration.support.management.MessageChannelMetrics ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.String java.lang.String , MessageHandlerMetrics org.springframework.integration.support.management.MessageHandlerMetrics ) { AbstractMessageHandlerMetrics org.springframework.integration.support.management.AbstractMessageHandlerMetrics = this . org.springframework.integration.support.management.MetricsFactory . createHandlerMetrics ( java.lang.String ) ; Assert . state ( org.springframework.integration.support.management.AbstractMessageHandlerMetrics != null , STRING ) ; java.lang.Boolean java.lang.Boolean = java.lang.Boolean ( this . java.lang.String[] , java.lang.String ) ; if ( java.lang.Boolean != null ) { org.springframework.integration.support.management.MessageHandlerMetrics . setCountsEnabled ( java.lang.Boolean ) ; } else { org.springframework.integration.support.management.MessageHandlerMetrics . setCountsEnabled ( this . java.lang.Boolean ) ; } java.lang.Boolean = java.lang.Boolean ( this . java.lang.String[] , java.lang.String ) ; if ( java.lang.Boolean != null ) { org.springframework.integration.support.management.MessageHandlerMetrics . setStatsEnabled ( java.lang.Boolean ) ; org.springframework.integration.support.management.AbstractMessageHandlerMetrics . setFullStatsEnabled ( java.lang.Boolean ) ; } else { org.springframework.integration.support.management.MessageHandlerMetrics . setStatsEnabled ( this . java.lang.Boolean ) ; org.springframework.integration.support.management.AbstractMessageHandlerMetrics . setFullStatsEnabled ( this . java.lang.Boolean ) ; } if ( org.springframework.integration.support.management.MessageHandlerMetrics instanceof ConfigurableMetricsAware ) { ( ( ConfigurableMetricsAware < AbstractMessageHandlerMetrics > ) org.springframework.integration.support.management.MessageHandlerMetrics ) . configureMetrics ( org.springframework.integration.support.management.AbstractMessageHandlerMetrics ) ; } this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageHandlerMetrics> . put ( org.springframework.integration.support.management.MessageHandlerMetrics . getManagedName ( ) != null ? org.springframework.integration.support.management.MessageHandlerMetrics . getManagedName ( ) : java.lang.String , org.springframework.integration.support.management.MessageHandlerMetrics ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , MessageSourceMetrics org.springframework.integration.support.management.MessageSourceMetrics ) { java.lang.Boolean java.lang.Boolean = java.lang.Boolean ( this . java.lang.String[] , java.lang.String ) ; if ( java.lang.Boolean != null ) { org.springframework.integration.support.management.MessageSourceMetrics . setCountsEnabled ( java.lang.Boolean ) ; } else { org.springframework.integration.support.management.MessageSourceMetrics . setCountsEnabled ( this . java.lang.Boolean ) ; } this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageSourceMetrics> . put ( org.springframework.integration.support.management.MessageSourceMetrics . getManagedName ( ) != null ? org.springframework.integration.support.management.MessageSourceMetrics . getManagedName ( ) : java.lang.String , org.springframework.integration.support.management.MessageSourceMetrics ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Boolean java.lang.Boolean ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) { if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { boolean boolean = false ; java.lang.String java.lang.String = java.lang.String ; if ( java.lang.String . boolean ( STRING ) ) { boolean = true ; java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } if ( PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ) { return ! boolean ; } } } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageChannelMetrics> . keySet ( ) . toArray ( new java.lang.String [ this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageChannelMetrics> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageHandlerMetrics> . keySet ( ) . toArray ( new java.lang.String [ this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageHandlerMetrics> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageSourceMetrics> . keySet ( ) . toArray ( new java.lang.String [ this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageSourceMetrics> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.support.management.MessageChannelMetrics org.springframework.integration.support.management.MessageChannelMetrics ( java.lang.String java.lang.String ) { if ( this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageChannelMetrics> . containsKey ( java.lang.String ) ) { return this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageChannelMetrics> . get ( java.lang.String ) ; } if ( org.springframework.integration.support.management.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.management.Log . debug ( STRING + java.lang.String + STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.support.management.MessageHandlerMetrics org.springframework.integration.support.management.MessageHandlerMetrics ( java.lang.String java.lang.String ) { if ( this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageHandlerMetrics> . containsKey ( java.lang.String ) ) { return this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageHandlerMetrics> . get ( java.lang.String ) ; } if ( this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageHandlerMetrics> . containsKey ( java.lang.String + STRING ) ) { return this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageHandlerMetrics> . get ( java.lang.String + STRING ) ; } if ( org.springframework.integration.support.management.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.management.Log . debug ( STRING + java.lang.String + STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.support.management.MessageSourceMetrics org.springframework.integration.support.management.MessageSourceMetrics ( java.lang.String java.lang.String ) { if ( this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageSourceMetrics> . containsKey ( java.lang.String ) ) { return this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageSourceMetrics> . get ( java.lang.String ) ; } if ( this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageSourceMetrics> . containsKey ( java.lang.String + STRING ) ) { return this . java.util.Map<java.lang.String,org.springframework.integration.support.management.MessageSourceMetrics> . get ( java.lang.String + STRING ) ; } if ( org.springframework.integration.support.management.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.management.Log . debug ( STRING + java.lang.String + STRING ) ; } return null ; }  <METHOD_END>
