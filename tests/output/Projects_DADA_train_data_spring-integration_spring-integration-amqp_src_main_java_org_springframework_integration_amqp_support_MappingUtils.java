<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public static org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp.core.Message org.springframework.amqp.core.Message ( Message < ? > org.springframework.integration.amqp.support.Message<?> , MessageConverter org.springframework.integration.amqp.support.MessageConverter , AmqpHeaderMapper org.springframework.integration.amqp.support.AmqpHeaderMapper , MessageDeliveryMode org.springframework.integration.amqp.support.MessageDeliveryMode , boolean boolean ) { MessageProperties org.springframework.integration.amqp.support.MessageProperties = new MessageProperties ( ) ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message ; if ( ! boolean ) { org.springframework.integration.amqp.support.AmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.Message<> . getHeaders ( ) , org.springframework.integration.amqp.support.MessageProperties ) ; } if ( org.springframework.integration.amqp.support.MessageConverter instanceof ContentTypeDelegatingMessageConverter && boolean ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.integration.amqp.support.Message<> . getHeaders ( ) ) ; if ( java.lang.String != null ) { org.springframework.integration.amqp.support.MessageProperties . setContentType ( java.lang.String ) ; } } org.springframework.amqp.core.Message = org.springframework.integration.amqp.support.MessageConverter . toMessage ( org.springframework.integration.amqp.support.Message<> . getPayload ( ) , org.springframework.integration.amqp.support.MessageProperties ) ; if ( boolean ) { org.springframework.integration.amqp.support.AmqpHeaderMapper . fromHeadersToRequest ( org.springframework.integration.amqp.support.Message<> . getHeaders ( ) , org.springframework.integration.amqp.support.MessageProperties ) ; } void ( org.springframework.integration.amqp.support.Message<> , org.springframework.integration.amqp.support.MessageProperties , org.springframework.integration.amqp.support.MessageDeliveryMode ) ; return org.springframework.amqp.core.Message ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( MessageHeaders org.springframework.integration.amqp.support.MessageHeaders ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.support.MessageHeaders . get ( AmqpHeaders . CONTENT_TYPE ) ; if ( java.lang.Object instanceof MimeType ) { java.lang.Object = java.lang.Object . java.lang.String ( ) ; } if ( java.lang.Object instanceof java.lang.String ) { return ( java.lang.String ) java.lang.Object ; } else if ( java.lang.Object != null ) { throw new java.lang.IllegalArgumentException ( AmqpHeaders . CONTENT_TYPE + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> public static void void ( Message < ? > org.springframework.integration.amqp.support.Message<?> , MessageProperties org.springframework.integration.amqp.support.MessageProperties , MessageDeliveryMode org.springframework.integration.amqp.support.MessageDeliveryMode ) { if ( org.springframework.integration.amqp.support.MessageDeliveryMode != null && org.springframework.integration.amqp.support.Message<> . getHeaders ( ) . get ( AmqpHeaders . DELIVERY_MODE ) == null ) { org.springframework.integration.amqp.support.MessageProperties . setDeliveryMode ( org.springframework.integration.amqp.support.MessageDeliveryMode ) ; } }  <METHOD_END>
