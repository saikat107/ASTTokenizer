<METHOD_START> @ Before public void void ( ) { org.springframework.web.reactive.function.server.support.ServerRequest = mock ( ServerRequest .class ) ; org.springframework.web.reactive.function.server.support.ServerRequestWrapper = new ServerRequestWrapper ( org.springframework.web.reactive.function.server.support.ServerRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertSame ( org.springframework.web.reactive.function.server.support.ServerRequest , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . request ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMethod org.springframework.web.reactive.function.server.support.HttpMethod = HttpMethod . POST ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . method ( ) ) . thenReturn ( org.springframework.web.reactive.function.server.support.HttpMethod ) ; assertSame ( org.springframework.web.reactive.function.server.support.HttpMethod , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . method ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . uri ( ) ) . thenReturn ( java.net.URI ) ; assertSame ( java.net.URI , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . uri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . path ( ) ) . thenReturn ( java.lang.String ) ; assertSame ( java.lang.String , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . path ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerRequest . ServerRequest ServerRequest.Headers = mock ( ServerRequest . ServerRequest .class ) ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . headers ( ) ) . thenReturn ( ServerRequest.Headers ) ; assertSame ( ServerRequest.Headers , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . headers ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . attribute ( java.lang.String ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String ) ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String ) , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . attribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . queryParam ( java.lang.String ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String ) ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String ) , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . queryParam ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . queryParams ( java.lang.String ) ) . thenReturn ( java.util.List<java.lang.String> ) ; assertSame ( java.util.List<java.lang.String> , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . queryParams ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . pathVariable ( java.lang.String ) ) . thenReturn ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . pathVariable ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; when ( org.springframework.web.reactive.function.server.support.ServerRequest . pathVariables ( ) ) . thenReturn ( java.util.Map<java.lang.String,java.lang.String> ) ; assertSame ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.web.reactive.function.server.support.ServerRequestWrapper . pathVariables ( ) ) ; }  <METHOD_END>
