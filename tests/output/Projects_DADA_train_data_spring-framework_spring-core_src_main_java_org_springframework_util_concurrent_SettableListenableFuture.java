<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( T T ) { return this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . boolean ( T ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Throwable java.lang.Throwable ) { Assert . notNull ( java.lang.Throwable , STRING ) ; return this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . boolean ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ListenableFutureCallback < ? super T > org.springframework.util.concurrent.ListenableFutureCallback<? super T> ) { this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . addCallback ( org.springframework.util.concurrent.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SuccessCallback < ? super T > org.springframework.util.concurrent.SuccessCallback<? super T> , FailureCallback org.springframework.util.concurrent.FailureCallback ) { this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . addCallback ( org.springframework.util.concurrent.SuccessCallback<> , org.springframework.util.concurrent.FailureCallback ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( boolean boolean ) { boolean boolean = this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . cancel ( boolean ) ; if ( boolean && boolean ) { void ( ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . isCancelled ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . isDone ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { return this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException , java.util.concurrent.TimeoutException { return this . org.springframework.util.concurrent.SettableListenableFuture.SettableTask<T> . get ( long , java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( ) { super( ( java.util.concurrent.Callable<T> < T > ) java.util.concurrent.Callable<java.lang.Object> ); }  <METHOD_END>
<METHOD_START> public boolean boolean ( T T ) { boolean ( T ) ; return boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Throwable java.lang.Throwable ) { boolean ( java.lang.Throwable ) ; return boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( ! boolean ( ) ) { this . java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; } super. done ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { boolean boolean = ( this . java.lang.Thread == java.lang.Thread . java.lang.Thread ( ) ) ; if ( boolean ) { this . java.lang.Thread = null ; } return boolean ; }  <METHOD_END>
