<METHOD_START> void ( ) {	}  <METHOD_END>
<METHOD_START> public void void ( final AsyncWebRequest org.springframework.web.context.request.async.AsyncWebRequest ) { Assert . notNull ( org.springframework.web.context.request.async.AsyncWebRequest , STRING ) ; this . org.springframework.web.context.request.async.AsyncWebRequest = org.springframework.web.context.request.async.AsyncWebRequest ; this . org.springframework.web.context.request.async.AsyncWebRequest . addCompletionHandler ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.AsyncWebRequest . removeAttribute ( WebAsyncUtils . WEB_ASYNC_MANAGER_ATTRIBUTE , RequestAttributes . SCOPE_REQUEST ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.AsyncWebRequest . removeAttribute ( WebAsyncUtils . WEB_ASYNC_MANAGER_ATTRIBUTE , RequestAttributes . SCOPE_REQUEST ) ; }  <METHOD_END>
<METHOD_START> public void void ( AsyncTaskExecutor org.springframework.web.context.request.async.AsyncTaskExecutor ) { this . org.springframework.web.context.request.async.AsyncTaskExecutor = org.springframework.web.context.request.async.AsyncTaskExecutor ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( ( this . org.springframework.web.context.request.async.AsyncWebRequest != null ) && this . org.springframework.web.context.request.async.AsyncWebRequest . isAsyncStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . java.lang.Object != java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object [] java.lang.Object[] ( ) { return this . java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.context.request.async.CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor ( java.lang.Object java.lang.Object ) { return this . java.util.Map<java.lang.Object,org.springframework.web.context.request.async.CallableProcessingInterceptor> . get ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.context.request.async.DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ( java.lang.Object java.lang.Object ) { return this . java.util.Map<java.lang.Object,org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . get ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.web.context.request.async.CallableProcessingInterceptor , STRING ) ; this . java.util.Map<java.lang.Object,org.springframework.web.context.request.async.CallableProcessingInterceptor> . put ( java.lang.Object , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; }  <METHOD_END>
<METHOD_START> public void void ( CallableProcessingInterceptor ... org.springframework.web.context.request.async.CallableProcessingInterceptor[] ) { Assert . notNull ( org.springframework.web.context.request.async.CallableProcessingInterceptor[] , STRING ) ; for ( CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor : org.springframework.web.context.request.async.CallableProcessingInterceptor[] ) { java.lang.String java.lang.String = org.springframework.web.context.request.async.CallableProcessingInterceptor . getClass ( ) . getName ( ) + STRING + org.springframework.web.context.request.async.CallableProcessingInterceptor . hashCode ( ) ; this . java.util.Map<java.lang.Object,org.springframework.web.context.request.async.CallableProcessingInterceptor> . put ( java.lang.String , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor , STRING ) ; this . java.util.Map<java.lang.Object,org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . put ( java.lang.Object , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; }  <METHOD_END>
<METHOD_START> public void void ( DeferredResultProcessingInterceptor ... org.springframework.web.context.request.async.DeferredResultProcessingInterceptor[] ) { Assert . notNull ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor[] , STRING ) ; for ( DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor : org.springframework.web.context.request.async.DeferredResultProcessingInterceptor[] ) { java.lang.String java.lang.String = org.springframework.web.context.request.async.DeferredResultProcessingInterceptor . getClass ( ) . getName ( ) + STRING + org.springframework.web.context.request.async.DeferredResultProcessingInterceptor . hashCode ( ) ; this . java.util.Map<java.lang.Object,org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . put ( java.lang.String , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object[] = null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> , java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { Assert . notNull ( java.util.concurrent.Callable<> , STRING ) ; void ( new WebAsyncTask ( java.util.concurrent.Callable<> ) , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( final WebAsyncTask < ? > org.springframework.web.context.request.async.WebAsyncTask<?> , java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { Assert . notNull ( org.springframework.web.context.request.async.WebAsyncTask<> , STRING ) ; Assert . state ( this . org.springframework.web.context.request.async.AsyncWebRequest != null , STRING ) ; java.lang.Long java.lang.Long = org.springframework.web.context.request.async.WebAsyncTask<> . getTimeout ( ) ; if ( java.lang.Long != null ) { this . org.springframework.web.context.request.async.AsyncWebRequest . setTimeout ( java.lang.Long ) ; } AsyncTaskExecutor org.springframework.web.context.request.async.AsyncTaskExecutor = org.springframework.web.context.request.async.WebAsyncTask<> . getExecutor ( ) ; if ( org.springframework.web.context.request.async.AsyncTaskExecutor != null ) { this . org.springframework.web.context.request.async.AsyncTaskExecutor = org.springframework.web.context.request.async.AsyncTaskExecutor ; } java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> < CallableProcessingInterceptor > java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> = new java.util.ArrayList<org.springframework.web.context.request.async.CallableProcessingInterceptor> <> ( ) ; java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> . add ( org.springframework.web.context.request.async.WebAsyncTask<> . getInterceptor ( ) ) ; java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> . addAll ( this . java.util.Map<java.lang.Object,org.springframework.web.context.request.async.CallableProcessingInterceptor> . values ( ) ) ; java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> . add ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; final java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> = org.springframework.web.context.request.async.WebAsyncTask<> . getCallable ( ) ; final CallableInterceptorChain org.springframework.web.context.request.async.CallableInterceptorChain = new CallableInterceptorChain ( java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> ) ; this . org.springframework.web.context.request.async.AsyncWebRequest . addTimeoutHandler ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.Log . debug ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.context.request.async.CallableInterceptorChain . triggerAfterTimeout ( org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> ) ; if ( java.lang.Object != CallableProcessingInterceptor . RESULT_NONE ) { void ( java.lang.Object ) ; } } } ) ; this . org.springframework.web.context.request.async.AsyncWebRequest . addCompletionHandler ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.CallableInterceptorChain . triggerAfterCompletion ( org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> ) ; } } ) ; org.springframework.web.context.request.async.CallableInterceptorChain . applyBeforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> ) ; void ( java.lang.Object[] ) ; try { this . org.springframework.web.context.request.async.AsyncTaskExecutor . submit ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.lang.Object java.lang.Object = null ; try { org.springframework.web.context.request.async.CallableInterceptorChain . applyPreProcess ( org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> ) ; java.lang.Object = java.util.concurrent.Callable<> . call ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.Object = java.lang.Throwable ; } finally { java.lang.Object = org.springframework.web.context.request.async.CallableInterceptorChain . applyPostProcess ( org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> , java.lang.Object ) ; } void ( java.lang.Object ) ; } } ) ; } catch ( java.util.concurrent.RejectedExecutionException java.util.concurrent.RejectedExecutionException ) { java.lang.Object java.lang.Object = org.springframework.web.context.request.async.CallableInterceptorChain . applyPostProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> , java.util.concurrent.RejectedExecutionException ) ; void ( java.lang.Object ) ; throw java.util.concurrent.RejectedExecutionException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.Log . debug ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.context.request.async.CallableInterceptorChain . triggerAfterTimeout ( org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> ) ; if ( java.lang.Object != CallableProcessingInterceptor . RESULT_NONE ) { void ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.CallableInterceptorChain . triggerAfterCompletion ( org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.lang.Object java.lang.Object = null ; try { org.springframework.web.context.request.async.CallableInterceptorChain . applyPreProcess ( org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> ) ; java.lang.Object = java.util.concurrent.Callable<> . call ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.Object = java.lang.Throwable ; } finally { java.lang.Object = org.springframework.web.context.request.async.CallableInterceptorChain . applyPostProcess ( org.springframework.web.context.request.async.AsyncWebRequest , java.util.concurrent.Callable<> , java.lang.Object ) ; } void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { synchronized ( org.springframework.web.context.request.async.WebAsyncManager .this ) { if ( boolean ( ) ) { return; } this . java.lang.Object = java.lang.Object ; } if ( this . org.springframework.web.context.request.async.AsyncWebRequest . isAsyncComplete ( ) ) { org.springframework.web.context.request.async.Log . error ( STRING ) ; return; } if ( org.springframework.web.context.request.async.Log . isDebugEnabled ( ) ) { org.springframework.web.context.request.async.Log . debug ( STRING + this . java.lang.Object + STRING ) ; } this . org.springframework.web.context.request.async.AsyncWebRequest . dispatch ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( final DeferredResult < ? > org.springframework.web.context.request.async.DeferredResult<?> , java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { Assert . notNull ( org.springframework.web.context.request.async.DeferredResult<> , STRING ) ; Assert . state ( this . org.springframework.web.context.request.async.AsyncWebRequest != null , STRING ) ; java.lang.Long java.lang.Long = org.springframework.web.context.request.async.DeferredResult<> . getTimeoutValue ( ) ; if ( java.lang.Long != null ) { this . org.springframework.web.context.request.async.AsyncWebRequest . setTimeout ( java.lang.Long ) ; } java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> < DeferredResultProcessingInterceptor > java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> = new java.util.ArrayList<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> <> ( ) ; java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . add ( org.springframework.web.context.request.async.DeferredResult<> . getInterceptor ( ) ) ; java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . addAll ( this . java.util.Map<java.lang.Object,org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . values ( ) ) ; java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> . add ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; final DeferredResultInterceptorChain org.springframework.web.context.request.async.DeferredResultInterceptorChain = new DeferredResultInterceptorChain ( java.util.List<org.springframework.web.context.request.async.DeferredResultProcessingInterceptor> ) ; this . org.springframework.web.context.request.async.AsyncWebRequest . addTimeoutHandler ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { org.springframework.web.context.request.async.DeferredResultInterceptorChain . triggerAfterTimeout ( org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } } } ) ; this . org.springframework.web.context.request.async.AsyncWebRequest . addCompletionHandler ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.DeferredResultInterceptorChain . triggerAfterCompletion ( org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; } } ) ; org.springframework.web.context.request.async.DeferredResultInterceptorChain . applyBeforeConcurrentHandling ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; void ( java.lang.Object[] ) ; try { org.springframework.web.context.request.async.DeferredResultInterceptorChain . applyPreProcess ( this . org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; org.springframework.web.context.request.async.DeferredResult<> . setResultHandler ( new DeferredResultHandler ( ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { java.lang.Object = org.springframework.web.context.request.async.DeferredResultInterceptorChain . applyPostProcess ( org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<> , java.lang.Object ) ; void ( java.lang.Object ) ; } } ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { org.springframework.web.context.request.async.DeferredResultInterceptorChain . triggerAfterTimeout ( org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.DeferredResultInterceptorChain . triggerAfterCompletion ( org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { java.lang.Object = org.springframework.web.context.request.async.DeferredResultInterceptorChain . applyPostProcess ( org.springframework.web.context.request.async.AsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<> , java.lang.Object ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object [] java.lang.Object[] ) { void ( ) ; this . java.lang.Object[] = java.lang.Object[] ; this . org.springframework.web.context.request.async.AsyncWebRequest . startAsync ( ) ; if ( org.springframework.web.context.request.async.Log . isDebugEnabled ( ) ) { HttpServletRequest org.springframework.web.context.request.async.HttpServletRequest = this . org.springframework.web.context.request.async.AsyncWebRequest . getNativeRequest ( HttpServletRequest .class ) ; java.lang.String java.lang.String = org.springframework.web.context.request.async.UrlPathHelper . getRequestUri ( org.springframework.web.context.request.async.HttpServletRequest ) ; org.springframework.web.context.request.async.Log . debug ( STRING + org.springframework.web.context.request.async.HttpServletRequest . getMethod ( ) + STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
