<METHOD_START> @ Before public void void ( ) { this . org.springframework.cache.interceptor.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.interceptor.CacheSyncFailureTests.Config .class ) ; this . org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService = this . org.springframework.cache.interceptor.ConfigurableApplicationContext . getBean ( org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.cache.interceptor.ConfigurableApplicationContext != null ) { this . org.springframework.cache.interceptor.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.interceptor.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.cache.interceptor.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService . java.lang.Object ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.interceptor.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.cache.interceptor.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService . java.lang.Object ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.interceptor.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.cache.interceptor.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService . java.lang.Object ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.interceptor.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.cache.interceptor.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService . java.lang.Object ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.interceptor.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.cache.interceptor.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService . java.lang.Object ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = STRING , sync = true , unless = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = { STRING , STRING } , sync = true ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheResolver = STRING , sync = true ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = STRING , sync = true ) @ CacheEvict ( cacheNames = STRING , key = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Caching ( cacheable = { @ Cacheable ( cacheNames = STRING , sync = true ) , @ Cacheable ( cacheNames = STRING , sync = true ) } ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.interceptor.CacheManager org.springframework.cache.interceptor.CacheManager ( ) { return CacheTestUtils . createSimpleCacheManager ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheResolver org.springframework.cache.interceptor.CacheResolver ( ) { return new NamedCacheResolver ( org.springframework.cache.interceptor.CacheManager ( ) , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService ( ) { return new org.springframework.cache.interceptor.CacheSyncFailureTests.SimpleService ( ) ; }  <METHOD_END>
