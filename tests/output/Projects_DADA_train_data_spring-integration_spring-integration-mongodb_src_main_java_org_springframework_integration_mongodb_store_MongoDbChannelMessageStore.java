<METHOD_START> public void ( MongoTemplate org.springframework.integration.mongodb.store.MongoTemplate ) { this( org.springframework.integration.mongodb.store.MongoTemplate , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MongoTemplate org.springframework.integration.mongodb.store.MongoTemplate , java.lang.String java.lang.String ) { super( org.springframework.integration.mongodb.store.MongoTemplate , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory ) { this( org.springframework.integration.mongodb.store.MongoDbFactory , null , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory , MappingMongoConverter org.springframework.integration.mongodb.store.MappingMongoConverter ) { this( org.springframework.integration.mongodb.store.MongoDbFactory , org.springframework.integration.mongodb.store.MappingMongoConverter , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory , java.lang.String java.lang.String ) { this( org.springframework.integration.mongodb.store.MongoDbFactory , null , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.store.MongoDbFactory , MappingMongoConverter org.springframework.integration.mongodb.store.MappingMongoConverter , java.lang.String java.lang.String ) { super( org.springframework.integration.mongodb.store.MongoDbFactory , org.springframework.integration.mongodb.store.MappingMongoConverter , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { super. afterPropertiesSet ( ) ; this . mongoTemplate . indexOps ( this . collectionName ) . ensureIndex ( new Index ( MessageDocumentFields . GROUP_ID , Sort . Direction . ASC ) . on ( MessageDocumentFields . PRIORITY , Sort . Direction . DESC ) . on ( MessageDocumentFields . LAST_MODIFIED_TIME , Sort . Direction . ASC ) . on ( MessageDocumentFields . SEQUENCE , Sort . Direction . ASC ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.MessageGroup org.springframework.integration.mongodb.store.MessageGroup ( java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.mongodb.store.Message<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.integration.mongodb.store.Message<> , STRING ) ; MessageDocument org.springframework.integration.mongodb.store.MessageDocument = new MessageDocument ( org.springframework.integration.mongodb.store.Message<> ) ; org.springframework.integration.mongodb.store.MessageDocument . setGroupId ( java.lang.Object ) ; org.springframework.integration.mongodb.store.MessageDocument . setCreatedTime ( java.lang.System . long ( ) ) ; org.springframework.integration.mongodb.store.MessageDocument . setLastModifiedTime ( java.lang.System . long ( ) ) ; if ( this . boolean ) { org.springframework.integration.mongodb.store.MessageDocument . setPriority ( org.springframework.integration.mongodb.store.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . PRIORITY , java.lang.Integer .class ) ) ; } org.springframework.integration.mongodb.store.MessageDocument . setSequence ( this . getNextId ( ) ) ; this . addMessageDocument ( org.springframework.integration.mongodb.store.MessageDocument ) ; return this . org.springframework.integration.mongodb.store.MessageGroup ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.MessageGroup org.springframework.integration.mongodb.store.MessageGroup ( java.lang.Object java.lang.Object ) { return getMessageGroupFactory ( ) . create ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.store.Message<?> < ? > org.springframework.integration.mongodb.store.Message<?> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Sort org.springframework.integration.mongodb.store.Sort = Sort . by ( MessageDocumentFields . LAST_MODIFIED_TIME , MessageDocumentFields . SEQUENCE ) ; if ( this . boolean ) { org.springframework.integration.mongodb.store.Sort = Sort . by ( Sort . Direction . DESC , MessageDocumentFields . PRIORITY ) . and ( org.springframework.integration.mongodb.store.Sort ) ; } Query org.springframework.integration.mongodb.store.Query = groupIdQuery ( java.lang.Object ) . with ( org.springframework.integration.mongodb.store.Sort ) ; MessageDocument org.springframework.integration.mongodb.store.MessageDocument = this . mongoTemplate . findAndRemove ( org.springframework.integration.mongodb.store.Query , MessageDocument .class , this . collectionName ) ; Message < ? > org.springframework.integration.mongodb.store.Message<?> = null ; if ( org.springframework.integration.mongodb.store.MessageDocument != null ) { org.springframework.integration.mongodb.store.Message<?> = org.springframework.integration.mongodb.store.MessageDocument . getMessage ( ) ; } return org.springframework.integration.mongodb.store.Message<> ; }  <METHOD_END>
