<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . org.springframework.context.expression.ExpressionParser = new SpelExpressionParser ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . org.springframework.context.expression.ExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( null , java.lang.ClassLoader ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ExpressionParser org.springframework.context.expression.ExpressionParser ) { Assert . notNull ( org.springframework.context.expression.ExpressionParser , STRING ) ; this . org.springframework.context.expression.ExpressionParser = org.springframework.context.expression.ExpressionParser ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , BeanExpressionContext org.springframework.context.expression.BeanExpressionContext ) throws org.springframework.context.expression.BeansException { if ( ! StringUtils . hasLength ( java.lang.String ) ) { return java.lang.String ; } try { Expression org.springframework.context.expression.Expression = this . java.util.Map<java.lang.String,org.springframework.context.expression.Expression> . get ( java.lang.String ) ; if ( org.springframework.context.expression.Expression == null ) { org.springframework.context.expression.Expression = this . org.springframework.context.expression.ExpressionParser . parseExpression ( java.lang.String , this . org.springframework.context.expression.ParserContext ) ; this . java.util.Map<java.lang.String,org.springframework.context.expression.Expression> . put ( java.lang.String , org.springframework.context.expression.Expression ) ; } StandardEvaluationContext org.springframework.context.expression.StandardEvaluationContext = this . java.util.Map<org.springframework.context.expression.BeanExpressionContext,org.springframework.context.expression.StandardEvaluationContext> . get ( org.springframework.context.expression.BeanExpressionContext ) ; if ( org.springframework.context.expression.StandardEvaluationContext == null ) { org.springframework.context.expression.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.context.expression.StandardEvaluationContext . setRootObject ( org.springframework.context.expression.BeanExpressionContext ) ; org.springframework.context.expression.StandardEvaluationContext . addPropertyAccessor ( new BeanExpressionContextAccessor ( ) ) ; org.springframework.context.expression.StandardEvaluationContext . addPropertyAccessor ( new BeanFactoryAccessor ( ) ) ; org.springframework.context.expression.StandardEvaluationContext . addPropertyAccessor ( new MapAccessor ( ) ) ; org.springframework.context.expression.StandardEvaluationContext . addPropertyAccessor ( new EnvironmentAccessor ( ) ) ; org.springframework.context.expression.StandardEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.context.expression.BeanExpressionContext . getBeanFactory ( ) ) ) ; org.springframework.context.expression.StandardEvaluationContext . setTypeLocator ( new StandardTypeLocator ( org.springframework.context.expression.BeanExpressionContext . getBeanFactory ( ) . getBeanClassLoader ( ) ) ) ; ConversionService org.springframework.context.expression.ConversionService = org.springframework.context.expression.BeanExpressionContext . getBeanFactory ( ) . getConversionService ( ) ; if ( org.springframework.context.expression.ConversionService != null ) { org.springframework.context.expression.StandardEvaluationContext . setTypeConverter ( new StandardTypeConverter ( org.springframework.context.expression.ConversionService ) ) ; } void ( org.springframework.context.expression.StandardEvaluationContext ) ; this . java.util.Map<org.springframework.context.expression.BeanExpressionContext,org.springframework.context.expression.StandardEvaluationContext> . put ( org.springframework.context.expression.BeanExpressionContext , org.springframework.context.expression.StandardEvaluationContext ) ; } return org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanExpressionException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( StandardEvaluationContext org.springframework.context.expression.StandardEvaluationContext ) {	}  <METHOD_END>
