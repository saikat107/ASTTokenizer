<METHOD_START> public void ( SpelExpressionParser org.springframework.data.mongodb.repository.query.SpelExpressionParser , EvaluationContextProvider org.springframework.data.mongodb.repository.query.EvaluationContextProvider ) { Assert . notNull ( org.springframework.data.mongodb.repository.query.SpelExpressionParser , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.repository.query.EvaluationContextProvider , STRING ) ; this . org.springframework.data.mongodb.repository.query.SpelExpressionParser = org.springframework.data.mongodb.repository.query.SpelExpressionParser ; this . org.springframework.data.mongodb.repository.query.EvaluationContextProvider = org.springframework.data.mongodb.repository.query.EvaluationContextProvider ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return null ; } return java.lang.String ( java.lang.String , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext ) { if ( ! org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext . boolean ( ) ) { return java.lang.String ; } if ( java.lang.String . boolean ( STRING ) ) { return java.lang.String ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext . org.springframework.data.mongodb.repository.query.MongoParameters ( ) , org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext . java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ( ) . iterator ( ) . next ( ) ) ; } java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext . java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ( ) ) . matcher ( java.lang.String ) ; java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; int int = NUMBER ; while ( java.util.regex.Matcher . boolean ( ) ) { org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder = org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder ( int ++ , java.util.regex.Matcher ) ; ParameterBinding org.springframework.data.mongodb.repository.query.ParameterBinding = org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext . org.springframework.data.mongodb.repository.query.ParameterBinding ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.BindingContext . org.springframework.data.mongodb.repository.query.MongoParameters ( ) , org.springframework.data.mongodb.repository.query.ParameterBinding ) ; java.util.regex.Matcher . java.util.regex.Matcher ( java.lang.StringBuffer , java.util.regex.Matcher . java.lang.String ( java.lang.String ) ) ; if ( StringUtils . hasText ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder . getSuffix ( ) ) ) { java.lang.StringBuffer . java.lang.StringBuffer ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder . getSuffix ( ) ) ; } if ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder . isQuoted ( ) ) { void ( java.lang.StringBuffer , java.lang.String , ! org.springframework.data.mongodb.repository.query.ParameterBinding . isExpression ( ) ? org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getBindableValue ( org.springframework.data.mongodb.repository.query.ParameterBinding . getParameterIndex ( ) ) : null , org.springframework.data.mongodb.repository.query.ParameterBinding . isExpression ( ) ) ; } } java.util.regex.Matcher . java.lang.StringBuffer ( java.lang.StringBuffer ) ; return java.lang.StringBuffer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.StringBuffer java.lang.StringBuffer , java.lang.String java.lang.String , java.lang.Object java.lang.Object , boolean boolean ) { int int = java.lang.StringBuffer . int ( ) - java.lang.String . int ( ) - NUMBER ; char char = java.lang.StringBuffer . char ( int ) ; while ( char != '\'' && char != '"' ) { int -- ; if ( int < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } char = java.lang.StringBuffer . char ( int ) ; } if ( java.lang.String . boolean ( STRING ) && ( java.lang.Object instanceof DBObject || boolean ) ) { java.lang.StringBuffer . java.lang.StringBuffer ( int ) ; } else { if ( boolean ) { java.lang.StringBuffer . java.lang.StringBuffer ( int ) ; return; } if ( char == '\'' ) { java.lang.StringBuffer . java.lang.StringBuffer ( int , int + NUMBER , STRING ) ; } java.lang.StringBuffer . java.lang.StringBuffer ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor , MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters , ParameterBinding org.springframework.data.mongodb.repository.query.ParameterBinding ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.repository.query.ParameterBinding . isExpression ( ) ? java.lang.Object ( org.springframework.data.mongodb.repository.query.ParameterBinding . getExpression ( ) , org.springframework.data.mongodb.repository.query.MongoParameters , org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getValues ( ) ) : org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getBindableValue ( org.springframework.data.mongodb.repository.query.ParameterBinding . getParameterIndex ( ) ) ; if ( java.lang.Object instanceof java.lang.String && org.springframework.data.mongodb.repository.query.ParameterBinding . isQuoted ( ) ) { if ( org.springframework.data.mongodb.repository.query.ParameterBinding . isExpression ( ) && ( ( java.lang.String ) java.lang.Object ) . boolean ( STRING ) ) { return ( java.lang.String ) java.lang.Object ; } return org.springframework.data.mongodb.repository.query.ParameterBinding . isExpression ( ) ? JSON . serialize ( java.lang.Object ) : org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.QuotedString . java.lang.String ( JSON . serialize ( java.lang.Object ) ) ; } if ( java.lang.Object instanceof byte [] ) { java.lang.String java.lang.String = javax.xml.bind.DatatypeConverter . java.lang.String ( ( byte [] ) java.lang.Object ) ; if ( ! org.springframework.data.mongodb.repository.query.ParameterBinding . isQuoted ( ) ) { return STRING + java.lang.String + STRING + BSON . B_GENERAL + STRING ; } return java.lang.String ; } return JSON . serialize ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String , MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters , java.lang.Object [] java.lang.Object[] ) { EvaluationContext org.springframework.data.mongodb.repository.query.EvaluationContext = org.springframework.data.mongodb.repository.query.EvaluationContextProvider . getEvaluationContext ( org.springframework.data.mongodb.repository.query.MongoParameters , java.lang.Object[] ) ; Expression org.springframework.data.mongodb.repository.query.Expression = org.springframework.data.mongodb.repository.query.SpelExpressionParser . parseExpression ( java.lang.String ) ; return org.springframework.data.mongodb.repository.query.Expression . getValue ( org.springframework.data.mongodb.repository.query.EvaluationContext , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> private java.util.regex.Pattern java.util.regex.Pattern ( java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> < ParameterBinding > java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( ParameterBinding org.springframework.data.mongodb.repository.query.ParameterBinding : java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING + java.util.regex.Pattern . java.lang.String ( org.springframework.data.mongodb.repository.query.ParameterBinding . getParameter ( ) ) + STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.StringBuilder . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder ( int int , java.util.regex.Matcher java.util.regex.Matcher ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( int * NUMBER + NUMBER ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( int * NUMBER + NUMBER ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.util.regex.Matcher . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING ; } else { int int = java.lang.String . java.lang.String ( STRING , STRING ) . int ( ) - NUMBER ; if ( int > NUMBER && java.lang.String . int ( ) > int ) { java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; } } if ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.QuotedString . boolean ( java.lang.String ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - ( StringUtils . hasText ( java.lang.String ) ? java.lang.String . int ( ) : NUMBER ) ) ; } } if ( StringUtils . hasText ( java.lang.String ) ) { boolean boolean = org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.QuotedString . boolean ( java.lang.String ) ; return org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder . of ( int , java.lang.String , boolean , boolean ? org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.QuotedString . java.lang.String ( java.lang.String ) : java.lang.String ) ; } return org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder . of ( int , java.lang.String , false , null ) ; }  <METHOD_END>
<METHOD_START> public void ( MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters , java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> < ParameterBinding > java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ) { this . org.springframework.data.mongodb.repository.query.MongoParameters = org.springframework.data.mongodb.repository.query.MongoParameters ; this . java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> = java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> ( java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return ! CollectionUtils . isEmpty ( java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> < ParameterBinding > java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ( ) { return new java.util.ArrayList<org.springframework.data.mongodb.repository.query.ParameterBinding> < ParameterBinding > ( java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> . values ( ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.ParameterBinding org.springframework.data.mongodb.repository.query.ParameterBinding ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder ) { if ( ! java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> . containsKey ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder ) ) { throw new java.util.NoSuchElementException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder ) ) ; } return java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> . get ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.MongoParameters org.springframework.data.mongodb.repository.query.MongoParameters ( ) { return org.springframework.data.mongodb.repository.query.MongoParameters ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> < org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder , ParameterBinding > java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> ( java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> < ParameterBinding > java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ) { java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> < org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder , ParameterBinding > java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> = new java.util.LinkedHashMap<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> < org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder , ParameterBinding > ( java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> . size ( ) , NUMBER ) ; int int = NUMBER ; for ( ParameterBinding org.springframework.data.mongodb.repository.query.ParameterBinding : java.util.List<org.springframework.data.mongodb.repository.query.ParameterBinding> ) { java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> . put ( org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder . of ( int ++ , org.springframework.data.mongodb.repository.query.ParameterBinding . getParameter ( ) , org.springframework.data.mongodb.repository.query.ParameterBinding . isQuoted ( ) , null ) , org.springframework.data.mongodb.repository.query.ParameterBinding ) ; } return java.util.Map<org.springframework.data.mongodb.repository.query.ExpressionEvaluatingParameterBinder.Placeholder,org.springframework.data.mongodb.repository.query.ParameterBinding> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return boolean ? java.lang.String . java.lang.String ( STRING , java.lang.String + ( java.lang.String != null ? java.lang.String : STRING ) ) : java.lang.String + ( java.lang.String != null ? java.lang.String : STRING ) ; }  <METHOD_END>
<METHOD_START> static boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; }  <METHOD_END>
