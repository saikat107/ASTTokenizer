<METHOD_START> void ( WebBindingInitializer org.springframework.web.reactive.result.method.annotation.WebBindingInitializer , java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> < SyncInvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> ) { super( org.springframework.web.reactive.result.method.annotation.WebBindingInitializer ); this . java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> = java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> ; this . org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( org.springframework.web.reactive.result.method.annotation.WebBindingInitializer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder ( WebExchangeDataBinder org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { this . java.util.List<org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod> . stream ( ) . filter ( binderMethod -> { InitBinder annotation = binderMethod . getMethodAnnotation ( InitBinder .class ) ; Collection < String > names = Arrays . asList ( annotation . value ( ) ) ; return ( names . size ( ) == NUMBER || names . contains ( dataBinder . getObjectName ( ) ) ) ; } ) . forEach ( method -> invokeBinderMethod ( dataBinder , exchange , method ) ) ; return org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder ; }  <METHOD_END>
<METHOD_START> private void void ( WebExchangeDataBinder org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange , SyncInvocableHandlerMethod org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod ) { java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod . invokeForHandlerResult ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange , this . org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder ) . getReturnValue ( ) ; if ( java.util.Optional<java.lang.Object> . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod ) ; } if ( ! this . org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) . isEmpty ( ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.reactive.result.method.annotation.SyncInvocableHandlerMethod ) ; } }  <METHOD_END>
