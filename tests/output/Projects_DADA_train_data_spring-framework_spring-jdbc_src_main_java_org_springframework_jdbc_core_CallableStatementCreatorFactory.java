<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.util.List<org.springframework.jdbc.core.SqlParameter> = new java.util.LinkedList <> ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.List<org.springframework.jdbc.core.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.core.SqlParameter> ) { this . java.lang.String = java.lang.String ; this . java.util.List<org.springframework.jdbc.core.SqlParameter> = java.util.List<org.springframework.jdbc.core.SqlParameter> ; }  <METHOD_END>
<METHOD_START> public void void ( SqlParameter org.springframework.jdbc.core.SqlParameter ) { this . java.util.List<org.springframework.jdbc.core.SqlParameter> . add ( org.springframework.jdbc.core.SqlParameter ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.core.CallableStatementCreator org.springframework.jdbc.core.CallableStatementCreator ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return new org.springframework.jdbc.core.CallableStatementCreatorFactory.CallableStatementCreatorImpl ( java.util.Map<java.lang.String,> != null ? java.util.Map<java.lang.String,> : new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.core.CallableStatementCreator org.springframework.jdbc.core.CallableStatementCreator ( ParameterMapper org.springframework.jdbc.core.ParameterMapper ) { return new org.springframework.jdbc.core.CallableStatementCreatorFactory.CallableStatementCreatorImpl ( org.springframework.jdbc.core.ParameterMapper ) ; }  <METHOD_END>
<METHOD_START> public void ( ParameterMapper org.springframework.jdbc.core.ParameterMapper ) { this . org.springframework.jdbc.core.ParameterMapper = org.springframework.jdbc.core.ParameterMapper ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.CallableStatement java.sql.CallableStatement ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException { if ( this . org.springframework.jdbc.core.ParameterMapper != null ) { this . java.util.Map<java.lang.String,?> = this . org.springframework.jdbc.core.ParameterMapper . createMap ( java.sql.Connection ) ; } else { if ( this . java.util.Map<java.lang.String,> == null ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } } java.sql.CallableStatement java.sql.CallableStatement = null ; if ( int == java.sql.ResultSet . int && ! boolean ) { java.sql.CallableStatement = java.sql.Connection . java.sql.CallableStatement ( java.lang.String ) ; } else { java.sql.CallableStatement = java.sql.Connection . java.sql.CallableStatement ( java.lang.String , int , boolean ? java.sql.ResultSet . int : java.sql.ResultSet . int ) ; } int int = NUMBER ; for ( SqlParameter org.springframework.jdbc.core.SqlParameter : java.util.List<org.springframework.jdbc.core.SqlParameter> ) { if ( ! org.springframework.jdbc.core.SqlParameter . isResultsParameter ( ) ) { java.lang.Object java.lang.Object = this . java.util.Map<java.lang.String,> . get ( org.springframework.jdbc.core.SqlParameter . getName ( ) ) ; if ( org.springframework.jdbc.core.SqlParameter instanceof ResultSetSupportingSqlParameter ) { if ( org.springframework.jdbc.core.SqlParameter instanceof SqlOutParameter ) { if ( org.springframework.jdbc.core.SqlParameter . getTypeName ( ) != null ) { java.sql.CallableStatement . void ( int , org.springframework.jdbc.core.SqlParameter . getSqlType ( ) , org.springframework.jdbc.core.SqlParameter . getTypeName ( ) ) ; } else { if ( org.springframework.jdbc.core.SqlParameter . getScale ( ) != null ) { java.sql.CallableStatement . void ( int , org.springframework.jdbc.core.SqlParameter . getSqlType ( ) , org.springframework.jdbc.core.SqlParameter . getScale ( ) ) ; } else { java.sql.CallableStatement . void ( int , org.springframework.jdbc.core.SqlParameter . getSqlType ( ) ) ; } } if ( org.springframework.jdbc.core.SqlParameter . isInputValueProvided ( ) ) { StatementCreatorUtils . setParameterValue ( java.sql.CallableStatement , int , org.springframework.jdbc.core.SqlParameter , java.lang.Object ) ; } } } else { if ( ! this . java.util.Map<java.lang.String,> . boolean ( org.springframework.jdbc.core.SqlParameter . getName ( ) ) ) { throw new InvalidDataAccessApiUsageException ( STRING + org.springframework.jdbc.core.SqlParameter . getName ( ) + STRING ) ; } StatementCreatorUtils . setParameterValue ( java.sql.CallableStatement , int , org.springframework.jdbc.core.SqlParameter , java.lang.Object ) ; } int ++ ; } } return java.sql.CallableStatement ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.util.Map<java.lang.String,> != null ) { StatementCreatorUtils . cleanupParameters ( this . java.util.Map<java.lang.String,> . java.util.Collection<> ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String + STRING + this . java.util.Map<java.lang.String,> ; }  <METHOD_END>
