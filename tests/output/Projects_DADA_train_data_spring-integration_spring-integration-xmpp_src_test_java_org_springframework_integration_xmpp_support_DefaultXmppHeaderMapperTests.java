<METHOD_START> @ Test public void void ( ) { DefaultXmppHeaderMapper org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper = new DefaultXmppHeaderMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . THREAD , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . TO , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . FROM , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . SUBJECT , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . TYPE , STRING ) ; MessageHeaders org.springframework.integration.xmpp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; Message org.springframework.integration.xmpp.support.Message = new Message ( ) ; org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper . fromHeadersToRequest ( org.springframework.integration.xmpp.support.MessageHeaders , org.springframework.integration.xmpp.support.Message ) ; assertEquals ( STRING , org.springframework.integration.xmpp.support.Message . getThread ( ) ) ; assertEquals ( STRING , org.springframework.integration.xmpp.support.Message . getTo ( ) ) ; assertEquals ( STRING , org.springframework.integration.xmpp.support.Message . getFrom ( ) ) ; assertEquals ( STRING , org.springframework.integration.xmpp.support.Message . getSubject ( ) ) ; assertEquals ( Message . Type . headline , org.springframework.integration.xmpp.support.Message . getType ( ) ) ; assertNull ( JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; assertNull ( JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; assertNull ( JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; assertNull ( JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultXmppHeaderMapper org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper = new DefaultXmppHeaderMapper ( ) ; org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper . setRequestHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . THREAD , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . TO , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . FROM , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . SUBJECT , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . TYPE , STRING ) ; MessageHeaders org.springframework.integration.xmpp.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; Message org.springframework.integration.xmpp.support.Message = new Message ( ) ; org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper . fromHeadersToRequest ( org.springframework.integration.xmpp.support.MessageHeaders , org.springframework.integration.xmpp.support.Message ) ; assertNull ( org.springframework.integration.xmpp.support.Message . getThread ( ) ) ; assertNull ( org.springframework.integration.xmpp.support.Message . getTo ( ) ) ; assertNull ( org.springframework.integration.xmpp.support.Message . getFrom ( ) ) ; assertNull ( org.springframework.integration.xmpp.support.Message . getSubject ( ) ) ; assertEquals ( Message . Type . normal , org.springframework.integration.xmpp.support.Message . getType ( ) ) ; assertEquals ( STRING , JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; assertEquals ( STRING , JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; assertNull ( JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; assertNull ( JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; assertNull ( JivePropertiesManager . getProperty ( org.springframework.integration.xmpp.support.Message , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultXmppHeaderMapper org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper = new DefaultXmppHeaderMapper ( ) ; Message org.springframework.integration.xmpp.support.Message = new Message ( STRING , Message . Type . headline ) ; org.springframework.integration.xmpp.support.Message . setFrom ( STRING ) ; org.springframework.integration.xmpp.support.Message . setSubject ( STRING ) ; org.springframework.integration.xmpp.support.Message . setThread ( STRING ) ; JivePropertiesManager . addProperty ( org.springframework.integration.xmpp.support.Message , STRING , STRING ) ; JivePropertiesManager . addProperty ( org.springframework.integration.xmpp.support.Message , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper . toHeadersFromRequest ( org.springframework.integration.xmpp.support.Message ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . TO ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . FROM ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . SUBJECT ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . THREAD ) ) ; assertEquals ( Message . Type . headline , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . TYPE ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultXmppHeaderMapper org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper = new DefaultXmppHeaderMapper ( ) ; org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper . setReplyHeaderNames ( new java.lang.String [] { STRING } ) ; Message org.springframework.integration.xmpp.support.Message = new Message ( STRING , Message . Type . headline ) ; org.springframework.integration.xmpp.support.Message . setFrom ( STRING ) ; org.springframework.integration.xmpp.support.Message . setSubject ( STRING ) ; org.springframework.integration.xmpp.support.Message . setThread ( STRING ) ; JivePropertiesManager . addProperty ( org.springframework.integration.xmpp.support.Message , STRING , STRING ) ; JivePropertiesManager . addProperty ( org.springframework.integration.xmpp.support.Message , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.xmpp.support.DefaultXmppHeaderMapper . toHeadersFromReply ( org.springframework.integration.xmpp.support.Message ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . TO ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . FROM ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . SUBJECT ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . THREAD ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( XmppHeaders . TYPE ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
