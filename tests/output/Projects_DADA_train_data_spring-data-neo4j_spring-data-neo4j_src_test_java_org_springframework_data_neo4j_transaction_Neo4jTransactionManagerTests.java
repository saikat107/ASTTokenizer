<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.neo4j.transaction.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.data.neo4j.transaction.Session = mock ( Session .class ) ; org.springframework.data.neo4j.transaction.Transaction = mock ( Transaction .class ) ; org.springframework.data.neo4j.transaction.Neo4jTransactionManager = new Neo4jTransactionManager ( org.springframework.data.neo4j.transaction.SessionFactory ) ; org.springframework.data.neo4j.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager ) ; given ( org.springframework.data.neo4j.transaction.Session . getTransaction ( ) ) . willReturn ( org.springframework.data.neo4j.transaction.Transaction ) ; given ( org.springframework.data.neo4j.transaction.SessionFactory . openSession ( ) ) . willReturn ( org.springframework.data.neo4j.transaction.Session ) ; org.springframework.data.neo4j.transaction.Neo4jTransactionManager . setSessionFactory ( org.springframework.data.neo4j.transaction.SessionFactory ) ; org.springframework.data.neo4j.transaction.TransactionTemplate . setTransactionManager ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.List . boolean ( java.util.HashMap<java.lang.String,java.lang.Object> ) ; Result org.springframework.data.neo4j.transaction.Result = mock ( Result .class ) ; given ( org.springframework.data.neo4j.transaction.Session . query ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) ) ) . willReturn ( org.springframework.data.neo4j.transaction.Result ) ; given ( org.springframework.data.neo4j.transaction.Result . queryResults ( ) ) . willReturn ( java.util.List ) ; assertTrue ( STRING , ! TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.transaction.SessionFactory ) ) ; assertTrue ( STRING , ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; java.lang.Object java.lang.Object = org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( ( TransactionCallback ) status -> { assertTrue ( STRING , TransactionSynchronizationManager . hasResource ( sf ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; Session session = ( ( SessionHolder ) TransactionSynchronizationManager . getResource ( sf ) ) . getSession ( ) ; return session . query ( STRING , Collections .< String , Object > emptyMap ( ) ) . queryResults ( ) ; } ) ; assertTrue ( STRING , java.lang.Object == java.util.List ) ; assertTrue ( STRING , ! TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.transaction.SessionFactory ) ) ; assertTrue ( STRING , ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.data.neo4j.transaction.Session ) . beginTransaction ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . commit ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( STRING , ! TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.transaction.SessionFactory ) ) ; assertTrue ( STRING , ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; try { org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { assertTrue ( STRING , TransactionSynchronizationManager . hasResource ( sf ) ) ; throw new RuntimeException ( STRING ) ; } ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } assertTrue ( STRING , ! TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.transaction.SessionFactory ) ) ; assertTrue ( STRING , ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; verify ( org.springframework.data.neo4j.transaction.Session ) . beginTransaction ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . rollback ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( STRING , ! TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.transaction.SessionFactory ) ) ; org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { assertTrue ( STRING , TransactionSynchronizationManager . hasResource ( sf ) ) ; status . setRollbackOnly ( ) ; return null ; } ) ; assertTrue ( STRING , ! TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.transaction.SessionFactory ) ) ; verify ( org.springframework.data.neo4j.transaction.Session ) . beginTransaction ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . rollback ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> tt . execute ( ( TransactionCallback ) status1 -> l ) ) ; assertTrue ( STRING , java.lang.Object == java.util.List ) ; verify ( org.springframework.data.neo4j.transaction.Session ) . beginTransaction ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . commit ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> tt . execute ( status1 -> { throw new RuntimeException ( STRING ) ; } ) ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { } verify ( org.springframework.data.neo4j.transaction.Session ) . beginTransaction ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . rollback ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { try { org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> tt . execute ( status1 -> { status1 . setRollbackOnly ( ) ; return null ; } ) ) ; fail ( STRING ) ; } catch ( UnexpectedRollbackException org.springframework.data.neo4j.transaction.UnexpectedRollbackException ) { } verify ( org.springframework.data.neo4j.transaction.Session ) . beginTransaction ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . rollback ( ) ; verify ( org.springframework.data.neo4j.transaction.Transaction ) . close ( ) ; }  <METHOD_END>
