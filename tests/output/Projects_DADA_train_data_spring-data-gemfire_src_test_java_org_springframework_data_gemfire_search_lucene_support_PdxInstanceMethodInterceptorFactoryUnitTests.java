<METHOD_START> @ Test public void void ( ) { MethodInterceptor org.springframework.data.gemfire.search.lucene.support.MethodInterceptor = PdxInstanceMethodInterceptorFactory . INSTANCE . createMethodInterceptor ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , java.lang.Object .class ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.MethodInterceptor ) . isInstanceOf ( PdxInstanceMethodInterceptor .class ) ; assertThat ( ( ( PdxInstanceMethodInterceptor ) org.springframework.data.gemfire.search.lucene.support.MethodInterceptor ) . getSource ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( PdxInstanceMethodInterceptorFactory . INSTANCE . supports ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , java.lang.Object .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( PdxInstanceMethodInterceptorFactory . INSTANCE . supports ( new java.lang.Object ( ) , java.lang.Object .class ) ) . isFalse ( ) ; assertThat ( PdxInstanceMethodInterceptorFactory . INSTANCE . supports ( java.lang.Boolean . java.lang.Boolean , java.lang.Object .class ) ) . isFalse ( ) ; assertThat ( PdxInstanceMethodInterceptorFactory . INSTANCE . supports ( 'X' , java.lang.Object .class ) ) . isFalse ( ) ; assertThat ( PdxInstanceMethodInterceptorFactory . INSTANCE . supports ( NUMBER , java.lang.Object .class ) ) . isFalse ( ) ; assertThat ( PdxInstanceMethodInterceptorFactory . INSTANCE . supports ( java.lang.Math . double , java.lang.Object .class ) ) . isFalse ( ) ; assertThat ( PdxInstanceMethodInterceptorFactory . INSTANCE . supports ( STRING , java.lang.Object .class ) ) . isFalse ( ) ; }  <METHOD_END>
