<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RepositoryConfigurationExtension org.springframework.data.neo4j.repository.config.RepositoryConfigurationExtension = new Neo4jRepositoryConfigurationExtension ( ) ; org.springframework.data.neo4j.repository.config.RepositoryConfigurationExtension . registerBeansForRoot ( org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory , org.springframework.data.neo4j.repository.config.RepositoryConfigurationSource ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory . getBeanDefinitionNames ( ) ) ; assertThat ( java.lang.Iterable<java.lang.String> , hasItems ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.data.neo4j.repository.config.RootBeanDefinition = new RootBeanDefinition ( SessionBeanDefinitionRegistrarPostProcessor .class ) ; java.lang.String java.lang.String = BeanDefinitionReaderUtils . generateBeanName ( org.springframework.data.neo4j.repository.config.RootBeanDefinition , org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory ) ; org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.data.neo4j.repository.config.RootBeanDefinition ) ; void ( org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; RootBeanDefinition org.springframework.data.neo4j.repository.config.RootBeanDefinition = new RootBeanDefinition ( SessionBeanDefinitionRegistrarPostProcessor .class ) ; java.lang.String java.lang.String = STRING ; org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory . registerBeanDefinition ( java.lang.String , org.springframework.data.neo4j.repository.config.RootBeanDefinition ) ; void ( org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.data.neo4j.repository.config.ApplicationContext = mock ( ApplicationContext .class ) ; SessionFactory org.springframework.data.neo4j.repository.config.SessionFactory = mock ( SessionFactory .class ) ; MetaData org.springframework.data.neo4j.repository.config.MetaData = mock ( MetaData .class ) ; ClassInfo org.springframework.data.neo4j.repository.config.ClassInfo = mock ( ClassInfo .class ) ; java.util.Set<org.springframework.data.neo4j.repository.config.ClassInfo> < ClassInfo > java.util.Set<org.springframework.data.neo4j.repository.config.ClassInfo> = java.util.Collections . java.util.Set ( org.springframework.data.neo4j.repository.config.ClassInfo ) ; when ( org.springframework.data.neo4j.repository.config.ApplicationContext . getBean ( SessionFactory .class ) ) . thenReturn ( org.springframework.data.neo4j.repository.config.SessionFactory ) ; when ( org.springframework.data.neo4j.repository.config.SessionFactory . metaData ( ) ) . thenReturn ( org.springframework.data.neo4j.repository.config.MetaData ) ; when ( org.springframework.data.neo4j.repository.config.MetaData . persistentEntities ( ) ) . thenReturn ( java.util.Set<org.springframework.data.neo4j.repository.config.ClassInfo> ) ; when ( org.springframework.data.neo4j.repository.config.ClassInfo . name ( ) ) . thenReturn ( STRING ) ; Neo4jMappingContextFactoryBean org.springframework.data.neo4j.repository.config.Neo4jMappingContextFactoryBean = new Neo4jMappingContextFactoryBean ( ) ; org.springframework.data.neo4j.repository.config.Neo4jMappingContextFactoryBean . setApplicationContext ( org.springframework.data.neo4j.repository.config.ApplicationContext ) ; org.springframework.data.neo4j.repository.config.Neo4jMappingContextFactoryBean . createInstance ( ) . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultListableBeanFactory org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory , java.lang.String java.lang.String ) { RepositoryConfigurationExtension org.springframework.data.neo4j.repository.config.RepositoryConfigurationExtension = new Neo4jRepositoryConfigurationExtension ( ) ; org.springframework.data.neo4j.repository.config.RepositoryConfigurationExtension . registerBeansForRoot ( org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory , org.springframework.data.neo4j.repository.config.RepositoryConfigurationSource ) ; assertThat ( org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory . getBean ( java.lang.String ) , is ( notNullValue ( ) ) ) ; org.springframework.data.neo4j.repository.config.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; org.springframework.data.neo4j.repository.config.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; }  <METHOD_END>
