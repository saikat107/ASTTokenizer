<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods = mock ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods .class ) ; java.lang.String java.lang.String = STRING ; javax.naming.Context javax.naming.Context = javax.naming.Context ( java.lang.String , org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptor ( javax.naming.Context , java.lang.String ) ; verify ( javax.naming.Context ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final javax.naming.NamingException javax.naming.NamingException = new javax.naming.NamingException ( ) ; final java.lang.String java.lang.String = STRING ; JndiTemplate org.springframework.ejb.access.JndiTemplate = new JndiTemplate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; throw javax.naming.NamingException ; } } ; LocalSlsbInvokerInterceptor org.springframework.ejb.access.LocalSlsbInvokerInterceptor = new LocalSlsbInvokerInterceptor ( ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptor . setJndiName ( STRING ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptor . setJndiTemplate ( org.springframework.ejb.access.JndiTemplate ) ; try { org.springframework.ejb.access.LocalSlsbInvokerInterceptor . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { assertTrue ( javax.naming.NamingException == javax.naming.NamingException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertTrue ( java.lang.String . boolean ( java.lang.String ) ) ; throw javax.naming.NamingException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods = mock ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods .class ) ; given ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods . java.lang.Object ( ) ) . willReturn ( java.lang.Object ) ; java.lang.String java.lang.String = STRING ; javax.naming.Context javax.naming.Context = javax.naming.Context ( java.lang.String , org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods ) ; LocalSlsbInvokerInterceptor org.springframework.ejb.access.LocalSlsbInvokerInterceptor = org.springframework.ejb.access.LocalSlsbInvokerInterceptor ( javax.naming.Context , java.lang.String ) ; ProxyFactory org.springframework.ejb.access.ProxyFactory = new ProxyFactory ( new java.lang.Class<?> < ? > [] { org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods .class } ) ; org.springframework.ejb.access.ProxyFactory . addAdvice ( org.springframework.ejb.access.LocalSlsbInvokerInterceptor ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods = ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods ) org.springframework.ejb.access.ProxyFactory . getProxy ( ) ; assertTrue ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods . java.lang.Object ( ) == java.lang.Object ) ; verify ( javax.naming.Context ) . close ( ) ; verify ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods ) . remove ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface = mock ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface .class ) ; given ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface . java.lang.Object ( ) ) . willReturn ( java.lang.Object ) ; java.lang.String java.lang.String = STRING ; javax.naming.Context javax.naming.Context = javax.naming.Context ( java.lang.String , org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface ) ; LocalSlsbInvokerInterceptor org.springframework.ejb.access.LocalSlsbInvokerInterceptor = org.springframework.ejb.access.LocalSlsbInvokerInterceptor ( javax.naming.Context , java.lang.String ) ; ProxyFactory org.springframework.ejb.access.ProxyFactory = new ProxyFactory ( new java.lang.Class<?> < ? > [] { org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods .class } ) ; org.springframework.ejb.access.ProxyFactory . addAdvice ( org.springframework.ejb.access.LocalSlsbInvokerInterceptor ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods = ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods ) org.springframework.ejb.access.ProxyFactory . getProxy ( ) ; assertTrue ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.BusinessMethods . java.lang.Object ( ) == java.lang.Object ) ; verify ( javax.naming.Context ) . close ( ) ; verify ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface ) . remove ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Exception java.lang.Exception ) throws java.lang.Exception { org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods = mock ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods .class ) ; given ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods . java.lang.Object ( ) ) . willThrow ( java.lang.Exception ) ; java.lang.String java.lang.String = STRING ; javax.naming.Context javax.naming.Context = javax.naming.Context ( java.lang.String , org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods ) ; LocalSlsbInvokerInterceptor org.springframework.ejb.access.LocalSlsbInvokerInterceptor = org.springframework.ejb.access.LocalSlsbInvokerInterceptor ( javax.naming.Context , java.lang.String ) ; ProxyFactory org.springframework.ejb.access.ProxyFactory = new ProxyFactory ( new java.lang.Class<?> < ? > [] { org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods .class } ) ; org.springframework.ejb.access.ProxyFactory . addAdvice ( org.springframework.ejb.access.LocalSlsbInvokerInterceptor ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods = ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods ) org.springframework.ejb.access.ProxyFactory . getProxy ( ) ; try { org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterfaceWithBusinessMethods . java.lang.Object ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception == java.lang.Exception ) ; } verify ( javax.naming.Context ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.ApplicationException ( ) ) ; }  <METHOD_END>
<METHOD_START> protected javax.naming.Context javax.naming.Context ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object )			throws java.lang.Exception { org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.SlsbHome org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.SlsbHome = mock ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.SlsbHome .class ) ; given ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.SlsbHome . org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface ( ) ) . willReturn ( ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface ) java.lang.Object ) ; javax.naming.Context javax.naming.Context = mock ( javax.naming.Context .class ) ; given ( javax.naming.Context . java.lang.Object ( STRING + java.lang.String ) ) . willReturn ( org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.SlsbHome ) ; return javax.naming.Context ; }  <METHOD_END>
<METHOD_START> protected org.springframework.ejb.access.LocalSlsbInvokerInterceptor org.springframework.ejb.access.LocalSlsbInvokerInterceptor ( final javax.naming.Context javax.naming.Context , final java.lang.String java.lang.String )			throws java.lang.Exception { LocalSlsbInvokerInterceptor org.springframework.ejb.access.LocalSlsbInvokerInterceptor = new LocalSlsbInvokerInterceptor ( ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptor . setJndiTemplate ( new JndiTemplate ( ) { @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) javax.naming.NamingException { return javax.naming.Context ; } } ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptor . setJndiName ( java.lang.String ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptor . setResourceRef ( true ) ; org.springframework.ejb.access.LocalSlsbInvokerInterceptor . afterPropertiesSet ( ) ; return org.springframework.ejb.access.LocalSlsbInvokerInterceptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) javax.naming.NamingException { return javax.naming.Context ; }  <METHOD_END>
<METHOD_START> org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.LocalInterface ( ) org.springframework.ejb.access.CreateException ;  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( ) org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.ApplicationException ;  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( ) org.springframework.ejb.access.LocalSlsbInvokerInterceptorTests.ApplicationException ;  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
