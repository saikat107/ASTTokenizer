<METHOD_START> @ Test public void void ( ) java.lang.Exception { EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setCacheManagerName ( STRING ) ; assertEquals ( CacheManager .class , org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObjectType ( ) ) ; assertTrue ( STRING , org.springframework.cache.ehcache.EhCacheManagerFactoryBean . isSingleton ( ) ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; try { CacheManager org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheManager . getCacheNames ( ) . length == NUMBER ) ; Cache org.springframework.cache.ehcache.Cache = org.springframework.cache.ehcache.CacheManager . getCache ( STRING ) ; assertTrue ( STRING , org.springframework.cache.ehcache.Cache == null ) ; } finally { org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setCacheManagerName ( STRING ) ; assertEquals ( CacheManager .class , org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObjectType ( ) ) ; assertTrue ( STRING , org.springframework.cache.ehcache.EhCacheManagerFactoryBean . isSingleton ( ) ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; try { CacheManager org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheManager . getCacheNames ( ) . length == NUMBER ) ; Cache org.springframework.cache.ehcache.Cache = org.springframework.cache.ehcache.CacheManager . getCache ( STRING ) ; assertTrue ( STRING , org.springframework.cache.ehcache.Cache == null ) ; EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setCacheManagerName ( STRING ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( CacheException org.springframework.cache.ehcache.CacheException ) { } finally { org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setCacheManagerName ( STRING ) ; assertEquals ( CacheManager .class , org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObjectType ( ) ) ; assertTrue ( STRING , org.springframework.cache.ehcache.EhCacheManagerFactoryBean . isSingleton ( ) ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; try { CacheManager org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheManager . getCacheNames ( ) . length == NUMBER ) ; Cache org.springframework.cache.ehcache.Cache = org.springframework.cache.ehcache.CacheManager . getCache ( STRING ) ; assertTrue ( STRING , org.springframework.cache.ehcache.Cache == null ) ; EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setCacheManagerName ( STRING ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setAcceptExisting ( true ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; CacheManager org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ; assertSame ( org.springframework.cache.ehcache.CacheManager , org.springframework.cache.ehcache.CacheManager ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } finally { org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setConfigLocation ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.cache.ehcache.EhCacheSupportTests> ( ) ) ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setCacheManagerName ( STRING ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; try { CacheManager org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheManager . getCacheNames ( ) . length == NUMBER ) ; Cache org.springframework.cache.ehcache.Cache = org.springframework.cache.ehcache.CacheManager . getCache ( STRING ) ; assertFalse ( STRING , org.springframework.cache.ehcache.Cache . getCacheConfiguration ( ) . isEternal ( ) ) ; assertTrue ( STRING , org.springframework.cache.ehcache.Cache . getCacheConfiguration ( ) . getMaxEntriesLocalHeap ( ) == NUMBER ) ; } finally { org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Exception { Cache org.springframework.cache.ehcache.Cache ; EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = null ; boolean boolean = false ; try { EhCacheFactoryBean org.springframework.cache.ehcache.EhCacheFactoryBean = new EhCacheFactoryBean ( ) ; java.lang.Class<? extends org.springframework.cache.ehcache.Ehcache> < ? extends Ehcache > java.lang.Class<? extends org.springframework.cache.ehcache.Ehcache> = org.springframework.cache.ehcache.EhCacheFactoryBean . getObjectType ( ) ; assertTrue ( Ehcache .class . boolean ( java.lang.Class<> ) ) ; assertTrue ( STRING , org.springframework.cache.ehcache.EhCacheFactoryBean . isSingleton ( ) ) ; if ( boolean ) { org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setConfigLocation ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.cache.ehcache.EhCacheSupportTests> ( ) ) ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . setCacheManagerName ( STRING ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; boolean = true ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheManager ( org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ) ; } org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheName ( STRING ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . afterPropertiesSet ( ) ; org.springframework.cache.ehcache.Cache = ( Cache ) org.springframework.cache.ehcache.EhCacheFactoryBean . getObject ( ) ; java.lang.Class<? extends org.springframework.cache.ehcache.Ehcache> < ? extends Ehcache > java.lang.Class<? extends org.springframework.cache.ehcache.Ehcache> = org.springframework.cache.ehcache.EhCacheFactoryBean . getObjectType ( ) ; assertSame ( java.lang.Class<> , java.lang.Class<> ) ; CacheConfiguration org.springframework.cache.ehcache.CacheConfiguration = org.springframework.cache.ehcache.Cache . getCacheConfiguration ( ) ; assertEquals ( STRING , org.springframework.cache.ehcache.Cache . getName ( ) ) ; if ( boolean ) { assertEquals ( STRING , NUMBER , org.springframework.cache.ehcache.CacheConfiguration . getMaxEntriesLocalHeap ( ) ) ; } else { assertEquals ( STRING , NUMBER , org.springframework.cache.ehcache.CacheConfiguration . getMaxEntriesLocalHeap ( ) ) ; } org.springframework.cache.ehcache.EhCacheFactoryBean = new EhCacheFactoryBean ( ) ; if ( boolean ) { org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheManager ( org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ) ; } org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheName ( STRING ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . afterPropertiesSet ( ) ; org.springframework.cache.ehcache.Cache = ( Cache ) org.springframework.cache.ehcache.EhCacheFactoryBean . getObject ( ) ; org.springframework.cache.ehcache.CacheConfiguration = org.springframework.cache.ehcache.Cache . getCacheConfiguration ( ) ; assertEquals ( STRING , org.springframework.cache.ehcache.Cache . getName ( ) ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheConfiguration . getMaxEntriesLocalHeap ( ) == NUMBER ) ; assertFalse ( STRING , org.springframework.cache.ehcache.CacheConfiguration . isEternal ( ) ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheConfiguration . getTimeToLiveSeconds ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheConfiguration . getTimeToIdleSeconds ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheConfiguration . getDiskExpiryThreadIntervalSeconds ( ) == NUMBER ) ; org.springframework.cache.ehcache.EhCacheFactoryBean = new EhCacheFactoryBean ( ) ; if ( boolean ) { org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheManager ( org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ) ; } org.springframework.cache.ehcache.EhCacheFactoryBean . setBeanName ( STRING ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setMaxEntriesLocalHeap ( NUMBER ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setTimeToLive ( NUMBER ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setTimeToIdle ( NUMBER ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setDiskExpiryThreadIntervalSeconds ( NUMBER ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . afterPropertiesSet ( ) ; org.springframework.cache.ehcache.Cache = ( Cache ) org.springframework.cache.ehcache.EhCacheFactoryBean . getObject ( ) ; org.springframework.cache.ehcache.CacheConfiguration = org.springframework.cache.ehcache.Cache . getCacheConfiguration ( ) ; assertEquals ( STRING , org.springframework.cache.ehcache.Cache . getName ( ) ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheConfiguration . getMaxEntriesLocalHeap ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheConfiguration . getTimeToLiveSeconds ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheConfiguration . getTimeToIdleSeconds ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.cache.ehcache.CacheConfiguration . getDiskExpiryThreadIntervalSeconds ( ) == NUMBER ) ; } finally { if ( boolean ) { org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } else { CacheManager . getInstance ( ) . shutdown ( ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; try { CacheManager org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ; EhCacheFactoryBean org.springframework.cache.ehcache.EhCacheFactoryBean = new EhCacheFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheManager ( org.springframework.cache.ehcache.CacheManager ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheName ( STRING ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setBlocking ( true ) ; assertEquals ( org.springframework.cache.ehcache.EhCacheFactoryBean . getObjectType ( ) , BlockingCache .class ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . afterPropertiesSet ( ) ; Ehcache org.springframework.cache.ehcache.Ehcache = org.springframework.cache.ehcache.CacheManager . getEhcache ( STRING ) ; assertTrue ( org.springframework.cache.ehcache.Ehcache instanceof BlockingCache ) ; } finally { org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; try { CacheManager org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ; EhCacheFactoryBean org.springframework.cache.ehcache.EhCacheFactoryBean = new EhCacheFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheManager ( org.springframework.cache.ehcache.CacheManager ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheName ( STRING ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheEntryFactory ( new CacheEntryFactory ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws java.lang.Exception { return java.lang.Object ; } } ) ; assertEquals ( org.springframework.cache.ehcache.EhCacheFactoryBean . getObjectType ( ) , SelfPopulatingCache .class ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . afterPropertiesSet ( ) ; Ehcache org.springframework.cache.ehcache.Ehcache = org.springframework.cache.ehcache.CacheManager . getEhcache ( STRING ) ; assertTrue ( org.springframework.cache.ehcache.Ehcache instanceof SelfPopulatingCache ) ; assertEquals ( STRING , org.springframework.cache.ehcache.Ehcache . get ( STRING ) . getObjectValue ( ) ) ; } finally { org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws java.lang.Exception { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EhCacheManagerFactoryBean org.springframework.cache.ehcache.EhCacheManagerFactoryBean = new EhCacheManagerFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheManagerFactoryBean . afterPropertiesSet ( ) ; try { CacheManager org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.EhCacheManagerFactoryBean . getObject ( ) ; EhCacheFactoryBean org.springframework.cache.ehcache.EhCacheFactoryBean = new EhCacheFactoryBean ( ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheManager ( org.springframework.cache.ehcache.CacheManager ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheName ( STRING ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . setCacheEntryFactory ( new UpdatingCacheEntryFactory ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws java.lang.Exception { return java.lang.Object ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws java.lang.Exception {				} } ) ; assertEquals ( org.springframework.cache.ehcache.EhCacheFactoryBean . getObjectType ( ) , UpdatingSelfPopulatingCache .class ) ; org.springframework.cache.ehcache.EhCacheFactoryBean . afterPropertiesSet ( ) ; Ehcache org.springframework.cache.ehcache.Ehcache = org.springframework.cache.ehcache.CacheManager . getEhcache ( STRING ) ; assertTrue ( org.springframework.cache.ehcache.Ehcache instanceof UpdatingSelfPopulatingCache ) ; assertEquals ( STRING , org.springframework.cache.ehcache.Ehcache . get ( STRING ) . getObjectValue ( ) ) ; } finally { org.springframework.cache.ehcache.EhCacheManagerFactoryBean . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws java.lang.Exception { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws java.lang.Exception {				}  <METHOD_END>
