<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<org.springframework.data.gemfire.repository.query.Person> = ( GemfirePersistentEntity < Person > ) new GemfireMappingContext ( ) . getPersistentEntity ( Person .class ) . orElseThrow ( ( ) newIllegalStateException ( STRING , Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.gemfire.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; GemfireQueryCreator org.springframework.data.gemfire.repository.query.GemfireQueryCreator = new GemfireQueryCreator ( org.springframework.data.gemfire.repository.query.PartTree , org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<org.springframework.data.gemfire.repository.query.Person> ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.GemfireQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.gemfire.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; GemfireQueryCreator org.springframework.data.gemfire.repository.query.GemfireQueryCreator = new GemfireQueryCreator ( org.springframework.data.gemfire.repository.query.PartTree , org.springframework.data.gemfire.repository.query.GemfirePersistentEntity<org.springframework.data.gemfire.repository.query.Person> ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = org.springframework.data.gemfire.repository.query.GemfireQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
