<METHOD_START> JCacheCacheConfiguration ( CacheProperties org.springframework.boot.autoconfigure.cache.CacheProperties , CacheManagerCustomizers org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers , ObjectProvider < javax . javax.cache . javax.cache . javax.cache < ? , ? > > defaultCacheConfiguration , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer> < JCacheManagerCustomizer > > org.springframework.boot.autoconfigure.cache.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer>> , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.cache.JCachePropertiesCustomizer> < JCachePropertiesCustomizer > > org.springframework.boot.autoconfigure.cache.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.cache.JCachePropertiesCustomizer>> ) { this . org.springframework.boot.autoconfigure.cache.CacheProperties = org.springframework.boot.autoconfigure.cache.CacheProperties ; this . org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers = org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers ; this . defaultCacheConfiguration = defaultCacheConfiguration . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer> = org.springframework.boot.autoconfigure.cache.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer>> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.cache.JCachePropertiesCustomizer> = org.springframework.boot.autoconfigure.cache.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.cache.JCachePropertiesCustomizer>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager ( CacheManager org.springframework.boot.autoconfigure.cache.CacheManager ) { JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = new JCacheCacheManager ( org.springframework.boot.autoconfigure.cache.CacheManager ) ; return this . org.springframework.boot.autoconfigure.cache.CacheManagerCustomizers . customize ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.cache.CacheManager org.springframework.boot.autoconfigure.cache.CacheManager ( ) java.io.IOException { CacheManager org.springframework.boot.autoconfigure.cache.CacheManager = org.springframework.boot.autoconfigure.cache.CacheManager ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.boot.autoconfigure.cache.CacheProperties . getCacheNames ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.boot.autoconfigure.cache.CacheManager . createCache ( java.lang.String , getDefaultCacheConfiguration ( ) ) ; } } void ( org.springframework.boot.autoconfigure.cache.CacheManager ) ; return org.springframework.boot.autoconfigure.cache.CacheManager ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.cache.CacheManager org.springframework.boot.autoconfigure.cache.CacheManager ( ) java.io.IOException { CachingProvider org.springframework.boot.autoconfigure.cache.CachingProvider = org.springframework.boot.autoconfigure.cache.CachingProvider ( this . org.springframework.boot.autoconfigure.cache.CacheProperties . getJcache ( ) . getProvider ( ) ) ; java.util.Properties java.util.Properties = java.util.Properties ( ) ; Resource org.springframework.boot.autoconfigure.cache.Resource = this . org.springframework.boot.autoconfigure.cache.CacheProperties . resolveConfigLocation ( this . org.springframework.boot.autoconfigure.cache.CacheProperties . getJcache ( ) . getConfig ( ) ) ; if ( org.springframework.boot.autoconfigure.cache.Resource != null ) { return org.springframework.boot.autoconfigure.cache.CachingProvider . getCacheManager ( org.springframework.boot.autoconfigure.cache.Resource . getURI ( ) , org.springframework.boot.autoconfigure.cache.CachingProvider . getDefaultClassLoader ( ) , java.util.Properties ) ; } return org.springframework.boot.autoconfigure.cache.CachingProvider . getCacheManager ( null , null , java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.cache.CachingProvider org.springframework.boot.autoconfigure.cache.CachingProvider ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( java.lang.String ) ) { return Caching . getCachingProvider ( java.lang.String ) ; } return Caching . getCachingProvider ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; if ( this . java.util.List<org.springframework.boot.autoconfigure.cache.JCachePropertiesCustomizer> != null ) { for ( JCachePropertiesCustomizer org.springframework.boot.autoconfigure.cache.JCachePropertiesCustomizer : this . java.util.List<org.springframework.boot.autoconfigure.cache.JCachePropertiesCustomizer> ) { org.springframework.boot.autoconfigure.cache.JCachePropertiesCustomizer . customize ( this . org.springframework.boot.autoconfigure.cache.CacheProperties , java.util.Properties ) ; } } return java.util.Properties ; }  <METHOD_END>
<METHOD_START> private javax . javax.cache . javax.cache . javax.cache < ? , ? > getDefaultCacheConfiguration ( ) { if ( this . defaultCacheConfiguration != null ) { return this . defaultCacheConfiguration ; } return new MutableConfiguration <> ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( CacheManager org.springframework.boot.autoconfigure.cache.CacheManager ) { if ( this . java.util.List<org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer> != null ) { AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer> ) ; for ( JCacheManagerCustomizer org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer : this . java.util.List<org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer> ) { org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer . customize ( org.springframework.boot.autoconfigure.cache.CacheManager ) ; } } }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . REGISTER_BEAN ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.cache.ConditionOutcome org.springframework.boot.autoconfigure.cache.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.cache.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.cache.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; RelaxedPropertyResolver org.springframework.boot.autoconfigure.cache.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.cache.ConditionContext . getEnvironment ( ) , STRING ) ; if ( org.springframework.boot.autoconfigure.cache.RelaxedPropertyResolver . containsProperty ( STRING ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . because ( STRING ) ) ; } java.util.Iterator<org.springframework.boot.autoconfigure.cache.CachingProvider> < CachingProvider > java.util.Iterator<org.springframework.boot.autoconfigure.cache.CachingProvider> = Caching . getCachingProviders ( ) . iterator ( ) ; if ( ! java.util.Iterator<org.springframework.boot.autoconfigure.cache.CachingProvider> . hasNext ( ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; } java.util.Iterator<org.springframework.boot.autoconfigure.cache.CachingProvider> . next ( ) ; if ( java.util.Iterator<org.springframework.boot.autoconfigure.cache.CachingProvider> . hasNext ( ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; }  <METHOD_END>
