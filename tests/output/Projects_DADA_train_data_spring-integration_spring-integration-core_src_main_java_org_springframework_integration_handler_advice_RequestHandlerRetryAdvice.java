<METHOD_START> public void void ( RetryTemplate org.springframework.integration.handler.advice.RetryTemplate ) { Assert . notNull ( org.springframework.integration.handler.advice.RetryTemplate , STRING ) ; this . org.springframework.integration.handler.advice.RetryTemplate = org.springframework.integration.handler.advice.RetryTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( RecoveryCallback < java.lang.Object > org.springframework.integration.handler.advice.RecoveryCallback<java.lang.Object> ) { this . org.springframework.integration.handler.advice.RecoveryCallback<java.lang.Object> = org.springframework.integration.handler.advice.RecoveryCallback<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( RetryStateGenerator org.springframework.integration.handler.advice.RetryStateGenerator ) { Assert . notNull ( org.springframework.integration.handler.advice.RetryStateGenerator , STRING ) ; this . org.springframework.integration.handler.advice.RetryStateGenerator = org.springframework.integration.handler.advice.RetryStateGenerator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; this . org.springframework.integration.handler.advice.RetryTemplate . registerListener ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( final ExecutionCallback org.springframework.integration.handler.advice.ExecutionCallback , java.lang.Object java.lang.Object , final Message < ? > org.springframework.integration.handler.advice.Message<?> )			throws java.lang.Exception { RetryState org.springframework.integration.handler.advice.RetryState = null ; org.springframework.integration.handler.advice.RetryState = this . org.springframework.integration.handler.advice.RetryStateGenerator . determineRetryState ( org.springframework.integration.handler.advice.Message<> ) ; java.lang.ThreadLocal<org.springframework.integration.handler.advice.Message<?>> . set ( org.springframework.integration.handler.advice.Message<> ) ; try { return this . org.springframework.integration.handler.advice.RetryTemplate . execute ( context -> callback . cloneAndExecute ( ) , this . org.springframework.integration.handler.advice.RecoveryCallback<java.lang.Object> , org.springframework.integration.handler.advice.RetryState ) ; } catch ( MessagingException org.springframework.integration.handler.advice.MessagingException ) { if ( org.springframework.integration.handler.advice.MessagingException . getFailedMessage ( ) == null ) { throw new MessagingException ( org.springframework.integration.handler.advice.Message<> , STRING , org.springframework.integration.handler.advice.MessagingException ) ; } throw org.springframework.integration.handler.advice.MessagingException ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( org.springframework.integration.handler.advice.Message<> , STRING , unwrapExceptionIfNecessary ( java.lang.Exception ) ) ; } finally { java.lang.ThreadLocal<org.springframework.integration.handler.advice.Message<?>> . remove ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , E extends java.lang.Throwable > boolean boolean ( RetryContext org.springframework.integration.handler.advice.RetryContext , RetryCallback < T , E > org.springframework.integration.handler.advice.RetryCallback<T,E> ) { org.springframework.integration.handler.advice.RetryContext . setAttribute ( STRING , java.lang.ThreadLocal<org.springframework.integration.handler.advice.Message<?>> . get ( ) ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , E extends java.lang.Throwable > void void ( RetryContext org.springframework.integration.handler.advice.RetryContext , RetryCallback < T , E > org.springframework.integration.handler.advice.RetryCallback<T,E> , java.lang.Throwable java.lang.Throwable ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , E extends java.lang.Throwable > void void ( RetryContext org.springframework.integration.handler.advice.RetryContext , RetryCallback < T , E > org.springframework.integration.handler.advice.RetryCallback<T,E> , java.lang.Throwable java.lang.Throwable ) {	}  <METHOD_END>
