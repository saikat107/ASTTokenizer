<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller = new XStreamMarshaller ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , Flight .class . java.lang.String ( ) ) ; org.springframework.oxm.xstream.XStreamMarshaller . setAliases ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.oxm.xstream.Flight = new Flight ( ) ; org.springframework.oxm.xstream.Flight . setFlightNumber ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; javax.xml.transform.dom.DOMResult javax.xml.transform.dom.DOMResult = new javax.xml.transform.dom.DOMResult ( org.w3c.dom.Document ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , javax.xml.transform.dom.DOMResult ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Text org.w3c.dom.Text = org.w3c.dom.Document . org.w3c.dom.Text ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Text ) ; assertThat ( STRING , org.w3c.dom.Document , isSimilarTo ( org.w3c.dom.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Element ) ; javax.xml.transform.dom.DOMResult javax.xml.transform.dom.DOMResult = new javax.xml.transform.dom.DOMResult ( org.w3c.dom.Element ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , javax.xml.transform.dom.DOMResult ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Text org.w3c.dom.Text = org.w3c.dom.Document . org.w3c.dom.Text ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Text ) ; assertThat ( STRING , org.w3c.dom.Document , isSimilarTo ( org.w3c.dom.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.transform.stream.StreamResult javax.xml.transform.stream.StreamResult = new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , javax.xml.transform.stream.StreamResult ) ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; javax.xml.transform.stream.StreamResult javax.xml.transform.stream.StreamResult = new javax.xml.transform.stream.StreamResult ( java.io.ByteArrayOutputStream ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , javax.xml.transform.stream.StreamResult ) ; java.lang.String java.lang.String = new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) , STRING ) ; assertThat ( STRING , java.lang.String , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.xml.sax.ContentHandler org.xml.sax.ContentHandler = mock ( org.xml.sax.ContentHandler .class ) ; javax.xml.transform.sax.SAXResult javax.xml.transform.sax.SAXResult = new javax.xml.transform.sax.SAXResult ( org.xml.sax.ContentHandler ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , javax.xml.transform.sax.SAXResult ) ; InOrder org.springframework.oxm.xstream.InOrder = inOrder ( org.xml.sax.ContentHandler ) ; org.springframework.oxm.xstream.InOrder . verify ( org.xml.sax.ContentHandler ) . startDocument ( ) ; org.springframework.oxm.xstream.InOrder . verify ( org.xml.sax.ContentHandler ) . startElement ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , isA ( org.xml.sax.Attributes .class ) ) ; org.springframework.oxm.xstream.InOrder . verify ( org.xml.sax.ContentHandler ) . startElement ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , isA ( org.xml.sax.Attributes .class ) ) ; org.springframework.oxm.xstream.InOrder . verify ( org.xml.sax.ContentHandler ) . characters ( isA ( char [] .class ) , eq ( NUMBER ) , eq ( NUMBER ) ) ; org.springframework.oxm.xstream.InOrder . verify ( org.xml.sax.ContentHandler ) . endElement ( STRING , STRING , STRING ) ; org.springframework.oxm.xstream.InOrder . verify ( org.xml.sax.ContentHandler ) . endElement ( STRING , STRING , STRING ) ; org.springframework.oxm.xstream.InOrder . verify ( org.xml.sax.ContentHandler ) . endDocument ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLOutputFactory ( ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.stream.XMLStreamWriter javax.xml.stream.XMLStreamWriter = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLStreamWriter ( java.io.StringWriter ) ; javax.xml.transform.Result javax.xml.transform.Result = StaxUtils . createStaxResult ( javax.xml.stream.XMLStreamWriter ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , javax.xml.transform.Result ) ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLOutputFactory javax.xml.stream.XMLOutputFactory = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLOutputFactory ( ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.stream.XMLEventWriter javax.xml.stream.XMLEventWriter = javax.xml.stream.XMLOutputFactory . javax.xml.stream.XMLEventWriter ( java.io.StringWriter ) ; javax.xml.transform.Result javax.xml.transform.Result = StaxUtils . createStaxResult ( javax.xml.stream.XMLEventWriter ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , javax.xml.transform.Result ) ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setConverters ( new Converter [] { new EncodedByteArrayConverter ( ) } ) ; byte [] byte[] = new byte [] { NUMBER , NUMBER } ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( byte[] , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; assertThat ( java.io.Writer . java.lang.String ( ) , isSimilarTo ( STRING ) ) ; java.io.Reader java.io.Reader = new java.io.StringReader ( java.io.Writer . java.lang.String ( ) ) ; byte [] byte[] = ( byte [] ) org.springframework.oxm.xstream.XStreamMarshaller . unmarshal ( new javax.xml.transform.stream.StreamSource ( java.io.Reader ) ) ; assertTrue ( STRING , java.util.Arrays . boolean ( byte[] , byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setUseAttributeForTypes ( new java.lang.Class [] { java.lang.Long . java.lang.Class<java.lang.Long> } ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; java.lang.String java.lang.String = STRING ; assertThat ( STRING , java.io.Writer . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setUseAttributeFor ( java.util.Collections . java.util.Map<java.lang.String,java.lang.Class<java.lang.Long>> ( STRING , java.lang.Long . java.lang.Class<java.lang.Long> ) ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; java.lang.String java.lang.String = STRING ; assertThat ( STRING , java.io.Writer . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setUseAttributeFor ( java.util.Collections . java.util.Map<java.lang.Class<org.springframework.oxm.xstream.Flight>,java.lang.String> ( Flight .class , STRING ) ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; java.lang.String java.lang.String = STRING ; assertThat ( STRING , java.io.Writer . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setUseAttributeFor ( java.util.Collections . java.util.Map<java.lang.Class<org.springframework.oxm.xstream.Flight>,java.util.List<java.lang.String>> ( Flight .class , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; java.lang.String java.lang.String = STRING ; assertThat ( STRING , java.io.Writer . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = new java.util.HashMap<java.lang.String,java.lang.Class<?>> <> ( ) ; java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( STRING , Flight .class ) ; FlightSubclass org.springframework.oxm.xstream.FlightSubclass = new FlightSubclass ( ) ; org.springframework.oxm.xstream.FlightSubclass . setFlightNumber ( NUMBER ) ; org.springframework.oxm.xstream.XStreamMarshaller . setAliasesByType ( java.util.Map<java.lang.String,java.lang.Class<?>> ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.FlightSubclass , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; assertThat ( STRING , java.io.Writer . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , Flight .class . java.lang.String ( ) ) ; FlightSubclass org.springframework.oxm.xstream.FlightSubclass = new FlightSubclass ( ) ; org.springframework.oxm.xstream.FlightSubclass . setFlightNumber ( NUMBER ) ; org.springframework.oxm.xstream.XStreamMarshaller . setAliasesByType ( java.util.Map<java.lang.String,java.lang.String> ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.FlightSubclass , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; assertThat ( STRING , java.io.Writer . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setFieldAliases ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; java.lang.String java.lang.String = STRING ; assertThat ( STRING , java.io.Writer . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { java.util.Map java.util.Map = java.util.Collections . java.util.Map<java.lang.Class<org.springframework.oxm.xstream.Flight>,java.lang.String> ( Flight .class , STRING ) ; org.springframework.oxm.xstream.XStreamMarshaller . setOmittedFields ( java.util.Map ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; void ( STRING , java.io.Writer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { Flights org.springframework.oxm.xstream.Flights = new Flights ( ) ; org.springframework.oxm.xstream.Flights . getFlights ( ) . add ( org.springframework.oxm.xstream.Flight ) ; org.springframework.oxm.xstream.Flights . getStrings ( ) . add ( STRING ) ; java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = new java.util.HashMap<java.lang.String,java.lang.Class<?>> <> ( ) ; java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( STRING , Flight .class ) ; java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( STRING , Flights .class ) ; org.springframework.oxm.xstream.XStreamMarshaller . setAliases ( java.util.Map<java.lang.String,java.lang.Class<?>> ) ; java.util.Map java.util.Map = java.util.Collections . java.util.Map<java.lang.Class<org.springframework.oxm.xstream.Flights>,java.lang.String> ( Flights .class , STRING ) ; org.springframework.oxm.xstream.XStreamMarshaller . setImplicitCollections ( java.util.Map ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flights , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; java.lang.String java.lang.String = java.io.Writer . java.lang.String ( ) ; void ( STRING , java.lang.String ) ; void ( STRING , java.lang.String ) ; void ( STRING , java.lang.String ) ; void ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setStreamDriver ( new JettisonMappedXmlDriver ( ) ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; assertEquals ( STRING , STRING , java.io.Writer . java.lang.String ( ) ) ; java.lang.Object java.lang.Object = org.springframework.oxm.xstream.XStreamMarshaller . unmarshal ( new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( java.io.Writer . java.lang.String ( ) ) ) ) ; assertTrue ( STRING , java.lang.Object instanceof Flight ) ; Flight org.springframework.oxm.xstream.Flight = ( Flight ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.xstream.Flight ) ; assertEquals ( STRING , NUMBER , org.springframework.oxm.xstream.Flight . getFlightNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setStreamDriver ( new JsonHierarchicalStreamDriver ( ) { @ java.lang.Override public org.springframework.oxm.xstream.HierarchicalStreamWriter org.springframework.oxm.xstream.HierarchicalStreamWriter ( java.io.Writer java.io.Writer ) { return new JsonWriter ( java.io.Writer , JsonWriter . DROP_ROOT_MODE , new JsonWriter . JsonWriter ( new char [ NUMBER ] , new char [ NUMBER ] , JsonWriter . Format . SPACE_AFTER_LABEL | JsonWriter . Format . COMPACT_EMPTY_ELEMENT ) ) ; } } ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , new javax.xml.transform.stream.StreamResult ( java.io.Writer ) ) ; assertEquals ( STRING , STRING , java.io.Writer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.oxm.xstream.HierarchicalStreamWriter org.springframework.oxm.xstream.HierarchicalStreamWriter ( java.io.Writer java.io.Writer ) { return new JsonWriter ( java.io.Writer , JsonWriter . DROP_ROOT_MODE , new JsonWriter . JsonWriter ( new char [ NUMBER ] , new char [ NUMBER ] , JsonWriter . Format . SPACE_AFTER_LABEL | JsonWriter . Format . COMPACT_EMPTY_ELEMENT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller . setAnnotatedClasses ( Flight .class ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.transform.stream.StreamResult javax.xml.transform.stream.StreamResult = new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ; Flight org.springframework.oxm.xstream.Flight = new Flight ( ) ; org.springframework.oxm.xstream.Flight . setFlightNumber ( NUMBER ) ; org.springframework.oxm.xstream.XStreamMarshaller . marshal ( org.springframework.oxm.xstream.Flight , javax.xml.transform.stream.StreamResult ) ; java.lang.String java.lang.String = STRING ; assertThat ( STRING , java.io.StringWriter . java.lang.String ( ) , isSimilarTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { javax.xml.transform.Source javax.xml.transform.Source = Input . fromString ( java.lang.String ) . build ( ) ; java.lang.Iterable<org.w3c.dom.Node> < org.w3c.dom.Node > java.lang.Iterable<org.w3c.dom.Node> = new JAXPXPathEngine ( ) . selectNodes ( java.lang.String , javax.xml.transform.Source ) ; assertTrue ( STRING + java.lang.String , int ( java.lang.Iterable<org.w3c.dom.Node> ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { javax.xml.transform.Source javax.xml.transform.Source = Input . fromString ( java.lang.String ) . build ( ) ; java.lang.Iterable<org.w3c.dom.Node> < org.w3c.dom.Node > java.lang.Iterable<org.w3c.dom.Node> = new JAXPXPathEngine ( ) . selectNodes ( java.lang.String , javax.xml.transform.Source ) ; assertEquals ( STRING + java.lang.String , NUMBER , int ( java.lang.Iterable<org.w3c.dom.Node> ) ) ; }  <METHOD_END>
<METHOD_START> private static int int ( java.lang.Iterable<org.w3c.dom.Node> < org.w3c.dom.Node > java.lang.Iterable<org.w3c.dom.Node> ) { assertNotNull ( java.lang.Iterable<org.w3c.dom.Node> ) ; java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; java.lang.Iterable<org.w3c.dom.Node> . void ( org.w3c.dom.Node -> java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; return java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
