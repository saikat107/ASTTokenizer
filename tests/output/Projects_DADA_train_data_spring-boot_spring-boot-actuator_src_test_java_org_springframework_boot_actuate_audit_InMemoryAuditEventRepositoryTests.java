<METHOD_START> @ Test public void void ( ) java.lang.Exception { InMemoryAuditEventRepository org.springframework.boot.actuate.audit.InMemoryAuditEventRepository = new InMemoryAuditEventRepository ( ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; java.util.List<org.springframework.boot.actuate.audit.AuditEvent> < AuditEvent > java.util.List<org.springframework.boot.actuate.audit.AuditEvent> = org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . find ( STRING , null ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { InMemoryAuditEventRepository org.springframework.boot.actuate.audit.InMemoryAuditEventRepository = new InMemoryAuditEventRepository ( NUMBER ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; java.util.List<org.springframework.boot.actuate.audit.AuditEvent> < AuditEvent > java.util.List<org.springframework.boot.actuate.audit.AuditEvent> = org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . find ( STRING , null ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.audit.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.actuate.audit.ExpectedException . expectMessage ( STRING ) ; InMemoryAuditEventRepository org.springframework.boot.actuate.audit.InMemoryAuditEventRepository = new InMemoryAuditEventRepository ( ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { InMemoryAuditEventRepository org.springframework.boot.actuate.audit.InMemoryAuditEventRepository = new InMemoryAuditEventRepository ( ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; java.util.List<org.springframework.boot.actuate.audit.AuditEvent> < AuditEvent > java.util.List<org.springframework.boot.actuate.audit.AuditEvent> = org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . find ( STRING , null ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { InMemoryAuditEventRepository org.springframework.boot.actuate.audit.InMemoryAuditEventRepository = new InMemoryAuditEventRepository ( ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( STRING , STRING ) ) ; java.util.List<org.springframework.boot.actuate.audit.AuditEvent> < AuditEvent > java.util.List<org.springframework.boot.actuate.audit.AuditEvent> = org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . find ( STRING , null , STRING ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getPrincipal ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; InMemoryAuditEventRepository org.springframework.boot.actuate.audit.InMemoryAuditEventRepository = new InMemoryAuditEventRepository ( ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( java.util.Calendar . java.util.Date ( ) , STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( java.util.Calendar . java.util.Date ( ) , STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = java.util.Calendar . java.util.Date ( ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( java.util.Calendar . java.util.Date ( ) , STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . add ( new AuditEvent ( java.util.Calendar . java.util.Date ( ) , STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.List<org.springframework.boot.actuate.audit.AuditEvent> < AuditEvent > java.util.List<org.springframework.boot.actuate.audit.AuditEvent> = org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . find ( java.util.Date ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; java.util.List<org.springframework.boot.actuate.audit.AuditEvent> = org.springframework.boot.actuate.audit.InMemoryAuditEventRepository . find ( STRING , java.util.Date ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.actuate.audit.AuditEvent> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
