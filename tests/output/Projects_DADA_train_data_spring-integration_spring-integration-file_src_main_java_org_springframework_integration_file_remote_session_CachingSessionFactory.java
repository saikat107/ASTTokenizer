<METHOD_START> public void ( SessionFactory < F > org.springframework.integration.file.remote.session.SessionFactory<F> ) { this( org.springframework.integration.file.remote.session.SessionFactory<F> , NUMBER ); }  <METHOD_END>
<METHOD_START> public void ( SessionFactory < F > org.springframework.integration.file.remote.session.SessionFactory<F> , int int ) { Assert . isTrue ( ! ( org.springframework.integration.file.remote.session.SessionFactory<F> instanceof DelegatingSessionFactory ) , STRING ) ; this . org.springframework.integration.file.remote.session.SessionFactory<F> = org.springframework.integration.file.remote.session.SessionFactory<F> ; this . org.springframework.integration.file.remote.session.SimplePool<org.springframework.integration.file.remote.session.Session<F>> = new SimplePool < Session < F > > ( int , new SimplePool . SimplePool < Session < F > > ( ) { @ Override public Session < F > createForPool ( ) { return CachingSessionFactory .this . sessionFactory . getSession ( ) ; } @ Override public boolean isStale ( Session < F > session ) { return ! session . isOpen ( ) ; } @ Override public void removedFromPool ( Session < F > session ) { session . close ( ) ; } } ) ; this . boolean = org.springframework.integration.file.remote.session.SessionFactory<F> instanceof SharedSessionCapable ; }  <METHOD_END>
<METHOD_START> @ Override public Session < F > createForPool ( ) { return CachingSessionFactory .this . sessionFactory . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ Override public boolean isStale ( Session < F > session ) { return ! session . isOpen ( ) ; }  <METHOD_END>
<METHOD_START> @ Override public void removedFromPool ( Session < F > session ) { session . close ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.integration.file.remote.session.SimplePool<org.springframework.integration.file.remote.session.Session<F>> . setWaitTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.integration.file.remote.session.SimplePool<org.springframework.integration.file.remote.session.Session<F>> . setPoolSize ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.session.Session<F> < F > org.springframework.integration.file.remote.session.Session<F> ( ) { return new org.springframework.integration.file.remote.session.CachingSessionFactory<F>.CachedSession ( this . org.springframework.integration.file.remote.session.SimplePool<org.springframework.integration.file.remote.session.Session<F>> . getItem ( ) , this . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.file.remote.session.SimplePool<org.springframework.integration.file.remote.session.Session<F>> . removeAllIdleItems ( ) ; }  <METHOD_END>
<METHOD_START> public synchronized void void ( ) { if ( org.springframework.integration.file.remote.session.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.remote.session.Log . debug ( STRING ) ; } if ( this . boolean && ( ( SharedSessionCapable ) this . org.springframework.integration.file.remote.session.SessionFactory<F> ) . isSharedSession ( ) ) { ( ( SharedSessionCapable ) this . org.springframework.integration.file.remote.session.SessionFactory<F> ) . resetSharedSession ( ) ; } long long = java.lang.System . long ( ) ; while ( long == this . long ) { long = java.lang.System . long ( ) ; } this . long = long ; this . org.springframework.integration.file.remote.session.SimplePool<org.springframework.integration.file.remote.session.Session<F>> . removeAllIdleItems ( ) ; }  <METHOD_END>
<METHOD_START> private void ( Session < F > org.springframework.integration.file.remote.session.Session<F> , long long ) { this . org.springframework.integration.file.remote.session.Session<F> = org.springframework.integration.file.remote.session.Session<F> ; this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { if ( this . boolean ) { if ( org.springframework.integration.file.remote.session.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.remote.session.Log . debug ( STRING + this . org.springframework.integration.file.remote.session.Session<F> + STRING ) ; } } else { if ( org.springframework.integration.file.remote.session.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.remote.session.Log . debug ( STRING + this . org.springframework.integration.file.remote.session.Session<F> + STRING ) ; } if ( this . long != org.springframework.integration.file.remote.session.CachingSessionFactory .this . long ) { if ( org.springframework.integration.file.remote.session.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.remote.session.Log . debug ( STRING + this . org.springframework.integration.file.remote.session.Session<F> + STRING ) ; } this . org.springframework.integration.file.remote.session.Session<F> . close ( ) ; } else if ( this . boolean ) { this . org.springframework.integration.file.remote.session.Session<F> . close ( ) ; } if ( this . org.springframework.integration.file.remote.session.Session<F> . isOpen ( ) ) { try { this . org.springframework.integration.file.remote.session.Session<F> . finalizeRaw ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } org.springframework.integration.file.remote.session.CachingSessionFactory .this . org.springframework.integration.file.remote.session.SimplePool<org.springframework.integration.file.remote.session.Session<F>> . releaseItem ( this . org.springframework.integration.file.remote.session.Session<F> ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.file.remote.session.Session<F> . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public F [] F[] ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.file.remote.session.Session<F> . list ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { this . org.springframework.integration.file.remote.session.Session<F> . read ( java.lang.String , java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException { this . org.springframework.integration.file.remote.session.Session<F> . write ( java.io.InputStream , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException { this . org.springframework.integration.file.remote.session.Session<F> . append ( java.io.InputStream , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.file.remote.session.Session<F> . isOpen ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { this . org.springframework.integration.file.remote.session.Session<F> . rename ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.file.remote.session.Session<F> . mkdir ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.file.remote.session.Session<F> . rmdir ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.file.remote.session.Session<F> . exists ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.file.remote.session.Session<F> . listNames ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.integration.file.remote.session.Session<F> . readRaw ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) java.io.IOException { return this . org.springframework.integration.file.remote.session.Session<F> . finalizeRaw ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . org.springframework.integration.file.remote.session.Session<F> . getClientInstance ( ) ; }  <METHOD_END>
