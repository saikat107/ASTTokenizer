<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( null ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( STRING ) ) ; assertNull ( org.springframework.web.util.patterns.PathPattern ( STRING ) . getPathRemaining ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null ) ; void ( STRING , STRING ) ; void ( STRING , null ) ; void ( STRING , null ) ; void ( null , STRING ) ; void ( null , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING STRING , STRING , STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , null ) ; void ( STRING , null ) ; void ( null , STRING ) ; void ( null , null ) ; void ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( false ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( true ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( false ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( true ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( false ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( true ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( false ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( true ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( false ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( true ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { char = '.' ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; } finally { char = PathPatternParser . DEFAULT_SEPARATOR ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING STRING STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; void ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPattern org.springframework.web.util.patterns.PathPattern = new PathPatternParser ( ) . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; org.springframework.web.util.patterns.PathPattern = new PathPatternParser ( ) . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPattern ( STRING ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = new PathPatternParser ( ) . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ; org.springframework.web.util.patterns.PathPattern = new PathPatternParser ( ) . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertFalse ( new AntPathMatcher ( ) . match ( STRING , STRING ) ) ; assertTrue ( new AntPathMatcher ( ) . match ( STRING , STRING ) ) ; assertTrue ( new AntPathMatcher ( ) . match ( STRING , STRING ) ) ; assertFalse ( new AntPathMatcher ( ) . match ( STRING , STRING ) ) ; assertTrue ( new AntPathMatcher ( ) . match ( STRING , STRING ) ) ; assertFalse ( new AntPathMatcher ( ) . match ( STRING , STRING ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new AntPathMatcher ( ) . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING STRING STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ; try { java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } try { java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) . int ( ) ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = null ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; org.springframework.web.util.patterns.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.web.util.patterns.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.web.util.patterns.PathPattern . matchAndExtract ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner = new org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner ( ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( null , null ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , null ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( null , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( null , null ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( null , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , null ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( null , null ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , null ) ) ; assertEquals ( STRING , org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner = new org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner ( ) ; org.springframework.web.util.patterns.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.web.util.patterns.PathPatternMatcherTests.TestPathCombiner . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<org.springframework.web.util.patterns.PathPattern> < PathPattern > java.util.Comparator<org.springframework.web.util.patterns.PathPattern> = new PatternComparatorConsideringPath ( STRING ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( null , null ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( null , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , null ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPatternComparator org.springframework.web.util.patterns.PathPatternComparator = new PathPatternComparator ( ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPatternComparator . compare ( null , null ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPatternComparator . compare ( null , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; assertEquals ( - NUMBER , org.springframework.web.util.patterns.PathPatternComparator . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , null ) ) ; assertEquals ( NUMBER , org.springframework.web.util.patterns.PathPatternComparator . compare ( org.springframework.web.util.patterns.PathPattern ( STRING ) , org.springframework.web.util.patterns.PathPattern ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertEquals ( - NUMBER , org.springframework.web.util.patterns.PathPattern . compareTo ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<org.springframework.web.util.patterns.PathPattern> < PathPattern > java.util.Comparator<org.springframework.web.util.patterns.PathPattern> = new PatternComparatorConsideringPath ( STRING ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> < PathPattern > java.util.List<org.springframework.web.util.patterns.PathPattern> = new java.util.ArrayList<org.springframework.web.util.patterns.PathPattern> <> ( NUMBER ) ; PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( null ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertNull ( java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( null ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertNull ( java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; java.util.Comparator<org.springframework.web.util.patterns.PathPattern> = new PatternComparatorConsideringPath ( STRING ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING STRING ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . add ( org.springframework.web.util.patterns.PathPatternParser . parse ( STRING STRING ) ) ; java.util.Collections . void ( java.util.List<org.springframework.web.util.patterns.PathPattern> , java.util.Comparator<org.springframework.web.util.patterns.PathPattern> ) ; assertEquals ( STRING STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; assertEquals ( STRING STRING , java.util.List<org.springframework.web.util.patterns.PathPattern> . get ( NUMBER ) . getPatternString ( ) ) ; java.util.List<org.springframework.web.util.patterns.PathPattern> . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.util.patterns.PathPatternParser . setCaseSensitive ( false ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( STRING ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PatternMessage [] org.springframework.web.util.patterns.PatternMessage[] = PatternMessage . values ( ) ; assertNotNull ( org.springframework.web.util.patterns.PatternMessage[] ) ; for ( PatternMessage org.springframework.web.util.patterns.PatternMessage : org.springframework.web.util.patterns.PatternMessage[] ) { java.lang.String java.lang.String = org.springframework.web.util.patterns.PatternMessage . toString ( ) ; assertEquals ( org.springframework.web.util.patterns.PatternMessage . ordinal ( ) , PatternMessage . valueOf ( java.lang.String ) . ordinal ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.util.patterns.PathPattern org.springframework.web.util.patterns.PathPattern ( java.lang.String java.lang.String ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; return org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = ( char == PathPatternParser . DEFAULT_SEPARATOR ? new PathPatternParser ( ) : new PathPatternParser ( char ) ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matches ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matchStart ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; assertTrue ( org.springframework.web.util.patterns.PathPattern . matchStart ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; assertFalse ( org.springframework.web.util.patterns.PathPattern . matches ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.patterns.PathPattern . matchAndExtract ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; if ( java.lang.String[] != null ) { for ( int int = NUMBER ; int < java.lang.String[] . int ; int += NUMBER ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String[] [ int ] , java.lang.String[] [ int + NUMBER ] ) ; } } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; if ( java.lang.String == null ) { fail ( STRING + java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) + STRING + java.util.Map<java.lang.String,java.lang.String> ) ; } if ( ! java.lang.String . boolean ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ) { fail ( STRING + java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) + STRING + java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) + STRING + java.lang.String + STRING ) ; } } return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { PathPatternParser org.springframework.web.util.patterns.PathPatternParser = new PathPatternParser ( ) ; PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.web.util.patterns.PathPattern . extractPathWithinPattern ( java.lang.String ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { PathPattern org.springframework.web.util.patterns.PathPattern = org.springframework.web.util.patterns.PathPatternParser . parse ( java.lang.String ) ; return org.springframework.web.util.patterns.PathPattern . combine ( java.lang.String ) ; }  <METHOD_END>
