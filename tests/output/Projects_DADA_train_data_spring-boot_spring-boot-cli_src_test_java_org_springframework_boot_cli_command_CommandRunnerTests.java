<METHOD_START> @ After public void void ( ) { java.lang.Thread . java.lang.Thread ( ) . void ( this . java.lang.ClassLoader ) ; java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.cli.command.CommandRunner = new CommandRunner ( STRING ) { @ java.lang.Override protected void void ( ) { org.springframework.boot.cli.command.CommandRunnerTests .this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> . boolean ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; super. showUsage ( ) ; } ; @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { org.springframework.boot.cli.command.CommandRunnerTests .this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> . boolean ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; return super. errorMessage ( java.lang.String ) ; } @ java.lang.Override protected void void ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.cli.command.CommandRunnerTests .this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> . boolean ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; super. printStackTrace ( java.lang.Exception ) ; } } ; given ( this . org.springframework.boot.cli.command.Command . getName ( ) ) . willReturn ( STRING ) ; given ( this . org.springframework.boot.cli.command.Command . getName ( ) ) . willReturn ( STRING ) ; given ( this . org.springframework.boot.cli.command.Command . getDescription ( ) ) . willReturn ( STRING ) ; this . org.springframework.boot.cli.command.CommandRunner . addCommand ( this . org.springframework.boot.cli.command.Command ) ; this . org.springframework.boot.cli.command.CommandRunner . addCommand ( new HelpCommand ( this . org.springframework.boot.cli.command.CommandRunner ) ) ; this . org.springframework.boot.cli.command.CommandRunner . addCommand ( new HintCommand ( this . org.springframework.boot.cli.command.CommandRunner ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { org.springframework.boot.cli.command.CommandRunnerTests .this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> . boolean ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; super. showUsage ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { org.springframework.boot.cli.command.CommandRunnerTests .this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> . boolean ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; return super. errorMessage ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.cli.command.CommandRunnerTests .this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> . boolean ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; super. printStackTrace ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.ExpectedException . expect ( NoArgumentsException .class ) ; this . org.springframework.boot.cli.command.CommandRunner . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.CommandRunner . run ( STRING , STRING , STRING ) ; verify ( this . org.springframework.boot.cli.command.Command ) . run ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.ExpectedException . expect ( NoSuchCommandException .class ) ; this . org.springframework.boot.cli.command.CommandRunner . run ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.CommandRunner . runAndHandleErrors ( STRING , STRING , STRING , STRING ) ; verify ( this . org.springframework.boot.cli.command.Command ) . run ( STRING , STRING , STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = this . org.springframework.boot.cli.command.CommandRunner . runAndHandleErrors ( STRING ) ; assertThat ( int ) . isEqualTo ( NUMBER ) ; assertThat ( this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = this . org.springframework.boot.cli.command.CommandRunner . runAndHandleErrors ( STRING ) ; assertThat ( int ) . isEqualTo ( NUMBER ) ; assertThat ( this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> ) . containsOnly ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { willThrow ( new java.lang.RuntimeException ( STRING ) ) . given ( this . org.springframework.boot.cli.command.Command ) . run ( ) ; int int = this . org.springframework.boot.cli.command.CommandRunner . runAndHandleErrors ( STRING ) ; assertThat ( int ) . isEqualTo ( NUMBER ) ; assertThat ( this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> ) . containsOnly ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { willThrow ( new java.lang.NullPointerException ( ) ) . given ( this . org.springframework.boot.cli.command.Command ) . run ( ) ; int int = this . org.springframework.boot.cli.command.CommandRunner . runAndHandleErrors ( STRING ) ; assertThat ( int ) . isEqualTo ( NUMBER ) ; assertThat ( this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> ) . containsOnly ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call , org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { willThrow ( new java.lang.RuntimeException ( ) ) . given ( this . org.springframework.boot.cli.command.Command ) . run ( ) ; int int = this . org.springframework.boot.cli.command.CommandRunner . runAndHandleErrors ( STRING , STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( int ) . isEqualTo ( NUMBER ) ; assertThat ( this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> ) . containsOnly ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call , org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { willThrow ( new java.lang.RuntimeException ( ) ) . given ( this . org.springframework.boot.cli.command.Command ) . run ( ) ; int int = this . org.springframework.boot.cli.command.CommandRunner . runAndHandleErrors ( STRING , STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( int ) . isEqualTo ( NUMBER ) ; assertThat ( this . java.util.Set<org.springframework.boot.cli.command.CommandRunnerTests.Call> ) . containsOnly ( org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call , org.springframework.boot.cli.command.CommandRunnerTests.Call . org.springframework.boot.cli.command.CommandRunnerTests.Call ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new NoSuchCommandException ( STRING ) . getMessage ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.CommandRunner . run ( STRING , STRING ) ; verify ( this . org.springframework.boot.cli.command.Command ) . getHelp ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.ExpectedException . expect ( NoHelpCommandArgumentsException .class ) ; this . org.springframework.boot.cli.command.CommandRunner . run ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.command.ExpectedException . expect ( NoSuchCommandException .class ) ; this . org.springframework.boot.cli.command.CommandRunner . run ( STRING , STRING ) ; }  <METHOD_END>
