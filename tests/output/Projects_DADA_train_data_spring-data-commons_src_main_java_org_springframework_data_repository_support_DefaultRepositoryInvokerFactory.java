<METHOD_START> public void ( Repositories org.springframework.data.repository.support.Repositories ) { this( org.springframework.data.repository.support.Repositories , new DefaultFormattingConversionService ( ) ); }  <METHOD_END>
<METHOD_START> public void ( Repositories org.springframework.data.repository.support.Repositories , ConversionService org.springframework.data.repository.support.ConversionService ) { Assert . notNull ( org.springframework.data.repository.support.Repositories , STRING ) ; Assert . notNull ( org.springframework.data.repository.support.ConversionService , STRING ) ; this . org.springframework.data.repository.support.Repositories = org.springframework.data.repository.support.Repositories ; this . org.springframework.data.repository.support.ConversionService = org.springframework.data.repository.support.ConversionService ; this . java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryInvoker> = new java.util.HashMap <> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.support.RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryInvoker> . computeIfAbsent ( java.lang.Class<> , this :: org.springframework.data.repository.support.RepositoryInvoker ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.support.RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> < RepositoryInformation > java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> = org.springframework.data.repository.support.Repositories . getRepositoryInformationFor ( java.lang.Class<> ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.repository.support.Repositories . getRepositoryFor ( java.lang.Class<> ) ; return mapIfAllPresent ( java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> , java.util.Optional<java.lang.Object> , this :: org.springframework.data.repository.support.RepositoryInvoker ) . orElseThrow ( ( ) new IllegalArgumentException ( String . format ( STRING , domainType ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.repository.support.RepositoryInvoker org.springframework.data.repository.support.RepositoryInvoker ( RepositoryInformation org.springframework.data.repository.support.RepositoryInformation , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof PagingAndSortingRepository ) { return new PagingAndSortingRepositoryInvoker ( ( PagingAndSortingRepository < java.lang.Object , java.io.Serializable > ) java.lang.Object , org.springframework.data.repository.support.RepositoryInformation , org.springframework.data.repository.support.ConversionService ) ; } else if ( java.lang.Object instanceof CrudRepository ) { return new CrudRepositoryInvoker ( ( CrudRepository < java.lang.Object , java.io.Serializable > ) java.lang.Object , org.springframework.data.repository.support.RepositoryInformation , org.springframework.data.repository.support.ConversionService ) ; } else { return new ReflectionRepositoryInvoker ( java.lang.Object , org.springframework.data.repository.support.RepositoryInformation , org.springframework.data.repository.support.ConversionService ) ; } }  <METHOD_END>
