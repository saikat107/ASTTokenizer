<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.data.rest.webmvc.MethodParameter ) { return org.springframework.data.rest.webmvc.HandlerMethodReturnValueHandler . supportsReturnType ( org.springframework.data.rest.webmvc.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.data.rest.webmvc.MethodParameter , ModelAndViewContainer org.springframework.data.rest.webmvc.ModelAndViewContainer , NativeWebRequest org.springframework.data.rest.webmvc.NativeWebRequest ) throws java.lang.Exception { java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Object instanceof HttpEntity ) { java.lang.Object = ( ( HttpEntity < ? > ) java.lang.Object ) . getBody ( ) ; } if ( ! ResourceSupport .class . boolean ( java.lang.Object ) ) { org.springframework.data.rest.webmvc.HandlerMethodReturnValueHandler . handleReturnValue ( java.lang.Object , org.springframework.data.rest.webmvc.MethodParameter , org.springframework.data.rest.webmvc.ModelAndViewContainer , org.springframework.data.rest.webmvc.NativeWebRequest ) ; return; } ResolvableType org.springframework.data.rest.webmvc.ResolvableType = ResolvableType . forMethodReturnType ( org.springframework.data.rest.webmvc.MethodParameter . getMethod ( ) ) ; if ( org.springframework.data.rest.webmvc.ResolvableType . isAssignableFrom ( org.springframework.data.rest.webmvc.ResolvableType ) ) { org.springframework.data.rest.webmvc.ResolvableType = org.springframework.data.rest.webmvc.ResolvableType . getGeneric ( NUMBER ) ; } ResolvableType org.springframework.data.rest.webmvc.ResolvableType = ResolvableType . forClass ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( ! java.lang.Class<?> ( org.springframework.data.rest.webmvc.ResolvableType ) . equals ( java.lang.Class<?> ( org.springframework.data.rest.webmvc.ResolvableType ) ) ) { org.springframework.data.rest.webmvc.ResolvableType = org.springframework.data.rest.webmvc.ResolvableType ; } ResourceSupport org.springframework.data.rest.webmvc.ResourceSupport = org.springframework.data.rest.webmvc.ResourceProcessorInvoker . invokeProcessorsFor ( ( ResourceSupport ) java.lang.Object , org.springframework.data.rest.webmvc.ResolvableType ) ; org.springframework.data.rest.webmvc.HandlerMethodReturnValueHandler . handleReturnValue ( java.lang.Object ( org.springframework.data.rest.webmvc.ResourceSupport , java.lang.Object ) , org.springframework.data.rest.webmvc.MethodParameter , org.springframework.data.rest.webmvc.ModelAndViewContainer , org.springframework.data.rest.webmvc.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( ResourceSupport org.springframework.data.rest.webmvc.ResourceSupport , java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof HttpEntity ) ) { return org.springframework.data.rest.webmvc.ResourceSupport ; } HttpEntity < ResourceSupport > org.springframework.data.rest.webmvc.HttpEntity<org.springframework.data.rest.webmvc.ResourceSupport> = null ; if ( java.lang.Object instanceof ResponseEntity ) { ResponseEntity < ? > org.springframework.data.rest.webmvc.ResponseEntity<?> = ( ResponseEntity < ? > ) java.lang.Object ; org.springframework.data.rest.webmvc.HttpEntity<org.springframework.data.rest.webmvc.ResourceSupport> = new ResponseEntity < ResourceSupport > ( org.springframework.data.rest.webmvc.ResourceSupport , org.springframework.data.rest.webmvc.ResponseEntity<> . getHeaders ( ) , org.springframework.data.rest.webmvc.ResponseEntity<> . getStatusCode ( ) ) ; } else { HttpEntity < ? > org.springframework.data.rest.webmvc.HttpEntity<?> = ( HttpEntity < ? > ) java.lang.Object ; org.springframework.data.rest.webmvc.HttpEntity<org.springframework.data.rest.webmvc.ResourceSupport> = new HttpEntity < ResourceSupport > ( org.springframework.data.rest.webmvc.ResourceSupport , org.springframework.data.rest.webmvc.HttpEntity<> . getHeaders ( ) ) ; } return org.springframework.data.rest.webmvc.HttpEntity<?> ( org.springframework.data.rest.webmvc.HttpEntity<org.springframework.data.rest.webmvc.ResourceSupport> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.HttpEntity<?> < ? > org.springframework.data.rest.webmvc.HttpEntity<?> ( HttpEntity < ResourceSupport > org.springframework.data.rest.webmvc.HttpEntity<org.springframework.data.rest.webmvc.ResourceSupport> ) { return boolean ? HeaderLinksResponseEntity . wrap ( org.springframework.data.rest.webmvc.HttpEntity<org.springframework.data.rest.webmvc.ResourceSupport> ) : org.springframework.data.rest.webmvc.HttpEntity<org.springframework.data.rest.webmvc.ResourceSupport> ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( ResolvableType org.springframework.data.rest.webmvc.ResolvableType ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.ResolvableType . getRawClass ( ) ; return java.lang.Class<> == null ? java.lang.Object .class : java.lang.Class<> ; }  <METHOD_END>
