<METHOD_START> @ Test public void void ( ) java.io.IOException { MockMultipartHttpServletRequest org.springframework.mock.web.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; assertFalse ( org.springframework.mock.web.MockMultipartHttpServletRequest . getFileNames ( ) . hasNext ( ) ) ; assertNull ( org.springframework.mock.web.MockMultipartHttpServletRequest . getFile ( STRING ) ) ; assertNull ( org.springframework.mock.web.MockMultipartHttpServletRequest . getFile ( STRING ) ) ; assertTrue ( org.springframework.mock.web.MockMultipartHttpServletRequest . getFileMap ( ) . isEmpty ( ) ) ; org.springframework.mock.web.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.mock.web.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING , STRING , STRING . byte[] ( ) ) ) ; void ( org.springframework.mock.web.MockMultipartHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockMultipartHttpServletRequest org.springframework.mock.web.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.mock.web.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ) ; org.springframework.mock.web.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING , STRING , new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ) ; void ( org.springframework.mock.web.MockMultipartHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> private void void ( MultipartHttpServletRequest org.springframework.mock.web.MultipartHttpServletRequest ) throws java.io.IOException { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.mock.web.MultipartHttpServletRequest . getFileNames ( ) ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.util.Set<java.lang.String> . boolean ( java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; } assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; MultipartFile org.springframework.mock.web.MultipartFile = org.springframework.mock.web.MultipartHttpServletRequest . getFile ( STRING ) ; MultipartFile org.springframework.mock.web.MultipartFile = org.springframework.mock.web.MultipartHttpServletRequest . getFile ( STRING ) ; java.util.Map<java.lang.String,org.springframework.mock.web.MultipartFile> < java.lang.String , MultipartFile > java.util.Map<java.lang.String,org.springframework.mock.web.MultipartFile> = org.springframework.mock.web.MultipartHttpServletRequest . getFileMap ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList <> ( java.util.Map<java.lang.String,org.springframework.mock.web.MultipartFile> . keySet ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( org.springframework.mock.web.MultipartFile , java.util.Map<java.lang.String,org.springframework.mock.web.MultipartFile> . get ( STRING ) ) ; assertEquals ( org.springframework.mock.web.MultipartFile , java.util.Map<java.lang.String,org.springframework.mock.web.MultipartFile> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.mock.web.MultipartFile . getName ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MultipartFile . getOriginalFilename ( ) ) ; assertNull ( org.springframework.mock.web.MultipartFile . getContentType ( ) ) ; assertTrue ( ObjectUtils . nullSafeEquals ( STRING . byte[] ( ) , org.springframework.mock.web.MultipartFile . getBytes ( ) ) ) ; assertTrue ( ObjectUtils . nullSafeEquals ( STRING . byte[] ( ) , FileCopyUtils . copyToByteArray ( org.springframework.mock.web.MultipartFile . getInputStream ( ) ) ) ) ; assertEquals ( STRING , org.springframework.mock.web.MultipartFile . getName ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MultipartFile . getOriginalFilename ( ) ) ; assertEquals ( STRING , org.springframework.mock.web.MultipartFile . getContentType ( ) ) ; assertTrue ( ObjectUtils . nullSafeEquals ( STRING . byte[] ( ) , org.springframework.mock.web.MultipartFile . getBytes ( ) ) ) ; assertTrue ( ObjectUtils . nullSafeEquals ( STRING . byte[] ( ) , FileCopyUtils . copyToByteArray ( org.springframework.mock.web.MultipartFile . getInputStream ( ) ) ) ) ; }  <METHOD_END>
