<METHOD_START> public void void ( PropertySources org.springframework.context.support.PropertySources ) { this . org.springframework.context.support.MutablePropertySources = new MutablePropertySources ( org.springframework.context.support.PropertySources ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.context.support.Environment ) { this . org.springframework.context.support.Environment = org.springframework.context.support.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory ) throws org.springframework.context.support.BeansException { if ( this . org.springframework.context.support.MutablePropertySources == null ) { this . org.springframework.context.support.MutablePropertySources = new MutablePropertySources ( ) ; if ( this . org.springframework.context.support.Environment != null ) { this . org.springframework.context.support.MutablePropertySources . addLast ( new PropertySource < Environment > ( java.lang.String , this . org.springframework.context.support.Environment ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . source . getProperty ( java.lang.String ) ; } } ) ; } try { PropertySource < ? > org.springframework.context.support.PropertySource<?> = new PropertiesPropertySource ( java.lang.String , mergeProperties ( ) ) ; if ( this . localOverride ) { this . org.springframework.context.support.MutablePropertySources . addFirst ( org.springframework.context.support.PropertySource<> ) ; } else { this . org.springframework.context.support.MutablePropertySources . addLast ( org.springframework.context.support.PropertySource<> ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new BeanInitializationException ( STRING , java.io.IOException ) ; } } void ( org.springframework.context.support.ConfigurableListableBeanFactory , new PropertySourcesPropertyResolver ( this . org.springframework.context.support.MutablePropertySources ) ) ; this . org.springframework.context.support.PropertySources = this . org.springframework.context.support.MutablePropertySources ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . source . getProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory , final ConfigurablePropertyResolver org.springframework.context.support.ConfigurablePropertyResolver ) throws org.springframework.context.support.BeansException { org.springframework.context.support.ConfigurablePropertyResolver . setPlaceholderPrefix ( this . placeholderPrefix ) ; org.springframework.context.support.ConfigurablePropertyResolver . setPlaceholderSuffix ( this . placeholderSuffix ) ; org.springframework.context.support.ConfigurablePropertyResolver . setValueSeparator ( this . valueSeparator ) ; StringValueResolver org.springframework.context.support.StringValueResolver = new StringValueResolver ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = ( ignoreUnresolvablePlaceholders ? org.springframework.context.support.ConfigurablePropertyResolver . resolvePlaceholders ( java.lang.String ) : org.springframework.context.support.ConfigurablePropertyResolver . resolveRequiredPlaceholders ( java.lang.String ) ) ; if ( trimValues ) { java.lang.String = java.lang.String . java.lang.String ( ) ; } return ( java.lang.String . boolean ( nullValue ) ? null : java.lang.String ) ; } } ; doProcessProperties ( org.springframework.context.support.ConfigurableListableBeanFactory , org.springframework.context.support.StringValueResolver ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = ( ignoreUnresolvablePlaceholders ? org.springframework.context.support.ConfigurablePropertyResolver . resolvePlaceholders ( java.lang.String ) : org.springframework.context.support.ConfigurablePropertyResolver . resolveRequiredPlaceholders ( java.lang.String ) ) ; if ( trimValues ) { java.lang.String = java.lang.String . java.lang.String ( ) ; } return ( java.lang.String . boolean ( nullValue ) ? null : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated protected void void ( ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory , java.util.Properties java.util.Properties ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.support.PropertySources org.springframework.context.support.PropertySources ( ) java.lang.IllegalStateException { Assert . state ( this . org.springframework.context.support.PropertySources != null , STRING ) ; return this . org.springframework.context.support.PropertySources ; }  <METHOD_END>
