<METHOD_START> @ Bean public org.springframework.integration.websocket.MessageChannel org.springframework.integration.websocket.MessageChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.AbstractSubscribableChannel org.springframework.integration.websocket.AbstractSubscribableChannel ( ) { DirectChannel org.springframework.integration.websocket.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.websocket.DirectChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.websocket.Message<?> < ? > org.springframework.integration.websocket.Message<?> ( Message < ? > org.springframework.integration.websocket.Message<?> , MessageChannel org.springframework.integration.websocket.MessageChannel ) { SimpMessageHeaderAccessor org.springframework.integration.websocket.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.integration.websocket.Message<> ) ; org.springframework.integration.websocket.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; return MessageBuilder . createMessage ( org.springframework.integration.websocket.Message<> . getPayload ( ) , org.springframework.integration.websocket.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; } } ) ; return org.springframework.integration.websocket.DirectChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.websocket.Message<?> < ? > org.springframework.integration.websocket.Message<?> ( Message < ? > org.springframework.integration.websocket.Message<?> , MessageChannel org.springframework.integration.websocket.MessageChannel ) { SimpMessageHeaderAccessor org.springframework.integration.websocket.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.integration.websocket.Message<> ) ; org.springframework.integration.websocket.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; return MessageBuilder . createMessage ( org.springframework.integration.websocket.Message<> . getPayload ( ) , org.springframework.integration.websocket.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.SubProtocolHandler org.springframework.integration.websocket.SubProtocolHandler ( ) { return new StompSubProtocolHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.websocket.WebSocketHandler org.springframework.integration.websocket.WebSocketHandler ( ) { SubProtocolWebSocketHandler org.springframework.integration.websocket.SubProtocolWebSocketHandler = new SubProtocolWebSocketHandler ( org.springframework.integration.websocket.MessageChannel ( ) , org.springframework.integration.websocket.AbstractSubscribableChannel ( ) ) ; org.springframework.integration.websocket.SubProtocolWebSocketHandler . setDefaultProtocolHandler ( org.springframework.integration.websocket.SubProtocolHandler ( ) ) ; return org.springframework.integration.websocket.SubProtocolWebSocketHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketHandlerRegistry org.springframework.integration.websocket.WebSocketHandlerRegistry ) { org.springframework.integration.websocket.WebSocketHandlerRegistry . addHandler ( org.springframework.integration.websocket.WebSocketHandler ( ) , STRING ) . withSockJS ( ) ; }  <METHOD_END>
