<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.crossstore.TransactionTemplate = new TransactionTemplate ( org.springframework.data.mongodb.crossstore.PlatformTransactionManager ) ; void ( Person .class ) ; Address org.springframework.data.mongodb.crossstore.Address = new Address ( NUMBER , STRING , STRING , STRING , STRING ) ; Resume org.springframework.data.mongodb.crossstore.Resume = new Resume ( ) ; org.springframework.data.mongodb.crossstore.Resume . addEducation ( STRING ) ; org.springframework.data.mongodb.crossstore.Resume . addEducation ( STRING ) ; org.springframework.data.mongodb.crossstore.Resume . addJob ( STRING ) ; org.springframework.data.mongodb.crossstore.Resume . addJob ( STRING ) ; final Person org.springframework.data.mongodb.crossstore.Person = new Person ( STRING , NUMBER ) ; org.springframework.data.mongodb.crossstore.Person . setAddress ( org.springframework.data.mongodb.crossstore.Address ) ; org.springframework.data.mongodb.crossstore.Person . setResume ( org.springframework.data.mongodb.crossstore.Resume ) ; org.springframework.data.mongodb.crossstore.Person . setId ( NUMBER ) ; org.springframework.data.mongodb.crossstore.TransactionTemplate . execute ( new TransactionCallback < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { org.springframework.data.mongodb.crossstore.EntityManager . persist ( org.springframework.data.mongodb.crossstore.Person ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { org.springframework.data.mongodb.crossstore.EntityManager . persist ( org.springframework.data.mongodb.crossstore.Person ) ; return null ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.mongodb.crossstore.TransactionTemplate . execute ( new TransactionCallback < java.lang.Void > ( ) { public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { org.springframework.data.mongodb.crossstore.EntityManager . remove ( org.springframework.data.mongodb.crossstore.EntityManager . find ( Person .class , NUMBER ) ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { org.springframework.data.mongodb.crossstore.EntityManager . remove ( org.springframework.data.mongodb.crossstore.EntityManager . find ( Person .class , NUMBER ) ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = org.springframework.data.mongodb.crossstore.MongoTemplate . getCollectionName ( java.lang.Class<> ) ; org.springframework.data.mongodb.crossstore.MongoTemplate . dropCollection ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.EntityManager . find ( Person .class , NUMBER ) ; Assert . assertNotNull ( org.springframework.data.mongodb.crossstore.Person ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.mongodb.crossstore.Person . getId ( ) ) ; Assert . assertNotNull ( org.springframework.data.mongodb.crossstore.Person ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.mongodb.crossstore.Person . getId ( ) ) ; Assert . assertNotNull ( org.springframework.data.mongodb.crossstore.Person . getResume ( ) ) ; Assert . assertEquals ( STRING + STRING + STRING , org.springframework.data.mongodb.crossstore.Person . getResume ( ) . getJobs ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.EntityManager . find ( Person .class , NUMBER ) ; org.springframework.data.mongodb.crossstore.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.crossstore.Person . getResume ( ) . addJob ( STRING ) ; org.springframework.data.mongodb.crossstore.EntityManager . merge ( org.springframework.data.mongodb.crossstore.Person ) ; Assert . assertNotNull ( org.springframework.data.mongodb.crossstore.Person ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.mongodb.crossstore.Person . getId ( ) ) ; Assert . assertNotNull ( org.springframework.data.mongodb.crossstore.Person ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.mongodb.crossstore.Person . getId ( ) ) ; Assert . assertNotNull ( org.springframework.data.mongodb.crossstore.Person . getResume ( ) ) ; Assert . assertEquals ( STRING + STRING + STRING + STRING + STRING , org.springframework.data.mongodb.crossstore.Person . getResume ( ) . getJobs ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.EntityManager . find ( Person .class , NUMBER ) ; org.springframework.data.mongodb.crossstore.EntityManager . detach ( org.springframework.data.mongodb.crossstore.Person ) ; org.springframework.data.mongodb.crossstore.Person . getResume ( ) . addJob ( STRING ) ; Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.TransactionTemplate . execute ( new TransactionCallback < Person > ( ) { public org.springframework.data.mongodb.crossstore.Person org.springframework.data.mongodb.crossstore.Person ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.EntityManager . merge ( org.springframework.data.mongodb.crossstore.Person ) ; org.springframework.data.mongodb.crossstore.EntityManager . flush ( ) ; return org.springframework.data.mongodb.crossstore.Person ; } } ) ; Assert . assertTrue ( org.springframework.data.mongodb.crossstore.Person . getResume ( ) . getJobs ( ) . contains ( STRING ) ) ; Assert . assertTrue ( org.springframework.data.mongodb.crossstore.Person . getResume ( ) . getJobs ( ) . contains ( STRING ) ) ; final Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.EntityManager . find ( Person .class , NUMBER ) ; Assert . assertTrue ( org.springframework.data.mongodb.crossstore.Person . getResume ( ) . getJobs ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.crossstore.Person org.springframework.data.mongodb.crossstore.Person ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.EntityManager . merge ( org.springframework.data.mongodb.crossstore.Person ) ; org.springframework.data.mongodb.crossstore.EntityManager . flush ( ) ; return org.springframework.data.mongodb.crossstore.Person ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.crossstore.TransactionTemplate . execute ( new TransactionCallback < Person > ( ) { public org.springframework.data.mongodb.crossstore.Person org.springframework.data.mongodb.crossstore.Person ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { Person org.springframework.data.mongodb.crossstore.Person = new Person ( STRING , NUMBER ) ; Resume org.springframework.data.mongodb.crossstore.Resume = new Resume ( ) ; org.springframework.data.mongodb.crossstore.Resume . addEducation ( STRING ) ; org.springframework.data.mongodb.crossstore.Resume . addJob ( STRING ) ; org.springframework.data.mongodb.crossstore.Person . setResume ( org.springframework.data.mongodb.crossstore.Resume ) ; org.springframework.data.mongodb.crossstore.Person . setId ( NUMBER ) ; org.springframework.data.mongodb.crossstore.EntityManager . persist ( org.springframework.data.mongodb.crossstore.Person ) ; Person org.springframework.data.mongodb.crossstore.Person = new Person ( STRING , NUMBER ) ; Resume org.springframework.data.mongodb.crossstore.Resume = new Resume ( ) ; org.springframework.data.mongodb.crossstore.Resume . addEducation ( STRING ) ; org.springframework.data.mongodb.crossstore.Resume . addJob ( STRING ) ; org.springframework.data.mongodb.crossstore.Person . setResume ( org.springframework.data.mongodb.crossstore.Resume ) ; org.springframework.data.mongodb.crossstore.Person . setId ( NUMBER ) ; org.springframework.data.mongodb.crossstore.EntityManager . persist ( org.springframework.data.mongodb.crossstore.Person ) ; return null ; } } ) ; org.springframework.data.mongodb.crossstore.TransactionTemplate . execute ( new TransactionCallback < Person > ( ) { public org.springframework.data.mongodb.crossstore.Person org.springframework.data.mongodb.crossstore.Person ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { final Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.EntityManager . find ( Person .class , NUMBER ) ; org.springframework.data.mongodb.crossstore.EntityManager . remove ( org.springframework.data.mongodb.crossstore.Person ) ; return null ; } } ) ; boolean boolean = false ; for ( Document org.springframework.data.mongodb.crossstore.Document : this . org.springframework.data.mongodb.crossstore.MongoTemplate . getCollection ( org.springframework.data.mongodb.crossstore.MongoTemplate . getCollectionName ( Person .class ) ) . find ( ) ) { Assert . assertTrue ( ! org.springframework.data.mongodb.crossstore.Document . get ( STRING ) . equals ( NUMBER ) ) ; if ( org.springframework.data.mongodb.crossstore.Document . get ( STRING ) . equals ( NUMBER ) ) { boolean = true ; } } Assert . assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.crossstore.Person org.springframework.data.mongodb.crossstore.Person ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { Person org.springframework.data.mongodb.crossstore.Person = new Person ( STRING , NUMBER ) ; Resume org.springframework.data.mongodb.crossstore.Resume = new Resume ( ) ; org.springframework.data.mongodb.crossstore.Resume . addEducation ( STRING ) ; org.springframework.data.mongodb.crossstore.Resume . addJob ( STRING ) ; org.springframework.data.mongodb.crossstore.Person . setResume ( org.springframework.data.mongodb.crossstore.Resume ) ; org.springframework.data.mongodb.crossstore.Person . setId ( NUMBER ) ; org.springframework.data.mongodb.crossstore.EntityManager . persist ( org.springframework.data.mongodb.crossstore.Person ) ; Person org.springframework.data.mongodb.crossstore.Person = new Person ( STRING , NUMBER ) ; Resume org.springframework.data.mongodb.crossstore.Resume = new Resume ( ) ; org.springframework.data.mongodb.crossstore.Resume . addEducation ( STRING ) ; org.springframework.data.mongodb.crossstore.Resume . addJob ( STRING ) ; org.springframework.data.mongodb.crossstore.Person . setResume ( org.springframework.data.mongodb.crossstore.Resume ) ; org.springframework.data.mongodb.crossstore.Person . setId ( NUMBER ) ; org.springframework.data.mongodb.crossstore.EntityManager . persist ( org.springframework.data.mongodb.crossstore.Person ) ; return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.crossstore.Person org.springframework.data.mongodb.crossstore.Person ( TransactionStatus org.springframework.data.mongodb.crossstore.TransactionStatus ) { final Person org.springframework.data.mongodb.crossstore.Person = org.springframework.data.mongodb.crossstore.EntityManager . find ( Person .class , NUMBER ) ; org.springframework.data.mongodb.crossstore.EntityManager . remove ( org.springframework.data.mongodb.crossstore.Person ) ; return null ; }  <METHOD_END>
