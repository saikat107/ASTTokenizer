<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.HandlerMapping , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertTrue ( java.util.Map<,> . boolean ( STRING ) ) ; java.lang.Object java.lang.Object = java.util.Map<,> . get ( STRING ) ; assertSame ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertSame ( this . org.springframework.integration.websocket.config.HandshakeHandler , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; HandshakeInterceptor [] org.springframework.integration.websocket.config.HandshakeInterceptor[] = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING , HandshakeInterceptor [] .class ) ; assertNotNull ( org.springframework.integration.websocket.config.HandshakeInterceptor[] ) ; assertEquals ( NUMBER , interceptors . length ) ; assertSame ( this . org.springframework.integration.websocket.config.HandshakeInterceptor , org.springframework.integration.websocket.config.HandshakeInterceptor[] [ NUMBER ] ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING , java.lang.String [] .class ) ) ; WebSocketHandlerDecoratorFactory [] org.springframework.integration.websocket.config.WebSocketHandlerDecoratorFactory[] = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING , WebSocketHandlerDecoratorFactory [] .class ) ; assertNotNull ( org.springframework.integration.websocket.config.WebSocketHandlerDecoratorFactory[] ) ; assertEquals ( NUMBER , decoratorFactories . length ) ; assertSame ( this . org.springframework.integration.websocket.config.WebSocketHandlerDecoratorFactory , org.springframework.integration.websocket.config.WebSocketHandlerDecoratorFactory[] [ NUMBER ] ) ; TransportHandlingSockJsService org.springframework.integration.websocket.config.TransportHandlingSockJsService = TestUtils . getPropertyValue ( java.lang.Object , STRING , TransportHandlingSockJsService .class ) ; assertSame ( this . org.springframework.integration.websocket.config.TaskScheduler , org.springframework.integration.websocket.config.TransportHandlingSockJsService . getTaskScheduler ( ) ) ; assertSame ( this . org.springframework.integration.websocket.config.SockJsMessageCodec , org.springframework.integration.websocket.config.TransportHandlingSockJsService . getMessageCodec ( ) ) ; java.util.Map<org.springframework.integration.websocket.config.TransportType,org.springframework.integration.websocket.config.TransportHandler> < TransportType , TransportHandler > java.util.Map<org.springframework.integration.websocket.config.TransportType,org.springframework.integration.websocket.config.TransportHandler> = org.springframework.integration.websocket.config.TransportHandlingSockJsService . getTransportHandlers ( ) ; assertEquals ( NUMBER , java.util.Map<org.springframework.integration.websocket.config.TransportType,org.springframework.integration.websocket.config.TransportHandler> . size ( ) ) ; assertSame ( this . org.springframework.integration.websocket.config.HandshakeHandler , TestUtils . getPropertyValue ( java.util.Map<org.springframework.integration.websocket.config.TransportType,org.springframework.integration.websocket.config.TransportHandler> . get ( TransportType . WEBSOCKET ) , STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.websocket.config.TransportHandlingSockJsService . getDisconnectDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.websocket.config.TransportHandlingSockJsService . getHeartbeatTime ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.websocket.config.TransportHandlingSockJsService . getHttpMessageCacheSize ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.websocket.config.TransportHandlingSockJsService . getStreamBytesLimit ( ) ) ; assertEquals ( STRING , org.springframework.integration.websocket.config.TransportHandlingSockJsService . getSockJsClientLibraryUrl ( ) ) ; assertFalse ( org.springframework.integration.websocket.config.TransportHandlingSockJsService . isSessionCookieNeeded ( ) ) ; assertFalse ( org.springframework.integration.websocket.config.TransportHandlingSockJsService . isWebSocketEnabled ( ) ) ; assertTrue ( org.springframework.integration.websocket.config.TransportHandlingSockJsService . shouldSuppressCors ( ) ) ; assertSame ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; assertNull ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; assertEquals ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; assertEquals ( java.lang.String .class , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING , java.util.concurrent.atomic.AtomicReference .class ) . get ( ) ) ; assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING , java.lang.Boolean .class ) ) ; assertSame ( this . org.springframework.integration.websocket.config.AbstractBrokerMessageHandler , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; SubProtocolHandlerRegistry org.springframework.integration.websocket.config.SubProtocolHandlerRegistry = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING , SubProtocolHandlerRegistry .class ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.websocket.config.SubProtocolHandlerRegistry , STRING ) , instanceOf ( PassThruSubProtocolHandler .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.websocket.config.SubProtocolHandlerRegistry , STRING , java.util.Map .class ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { assertSame ( this . org.springframework.integration.websocket.config.MessageChannel , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; assertSame ( this . org.springframework.integration.websocket.config.MessageChannel , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; assertSame ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING , java.lang.Boolean .class ) ) ; assertEquals ( java.lang.Integer .class , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING , java.util.concurrent.atomic.AtomicReference .class ) . get ( ) ) ; SubProtocolHandlerRegistry org.springframework.integration.websocket.config.SubProtocolHandlerRegistry = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING , SubProtocolHandlerRegistry .class ) ; assertSame ( this . org.springframework.integration.websocket.config.StompSubProtocolHandler , TestUtils . getPropertyValue ( org.springframework.integration.websocket.config.SubProtocolHandlerRegistry , STRING ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.websocket.config.SubProtocolHandlerRegistry , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.Map<,> . java.util.Collection<> ( ) ) { assertSame ( this . org.springframework.integration.websocket.config.StompSubProtocolHandler , java.lang.Object ) ; } assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING , java.lang.Boolean .class ) ) ; CompositeMessageConverter org.springframework.integration.websocket.config.CompositeMessageConverter = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , STRING , CompositeMessageConverter .class ) ; java.util.List<org.springframework.integration.websocket.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.integration.websocket.config.MessageConverter> = org.springframework.integration.websocket.config.CompositeMessageConverter . getConverters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.websocket.config.MessageConverter> . size ( ) ) ; assertSame ( this . org.springframework.integration.websocket.config.SimpleMessageConverter , java.util.List<org.springframework.integration.websocket.config.MessageConverter> . get ( NUMBER ) ) ; assertSame ( this . org.springframework.integration.websocket.config.MapMessageConverter , java.util.List<org.springframework.integration.websocket.config.MessageConverter> . get ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.integration.websocket.config.MessageConverter> . get ( NUMBER ) , instanceOf ( StringMessageConverter .class ) ) ; assertSame ( this . org.springframework.integration.websocket.config.WebSocketInboundChannelAdapter , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertEquals ( new java.net.URI ( STRING ) , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING , java.net.URI .class ) ) ; assertSame ( this . org.springframework.integration.websocket.config.WebSocketClient , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; WebSocketHttpHeaders org.springframework.integration.websocket.config.WebSocketHttpHeaders = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING , WebSocketHttpHeaders .class ) ; assertEquals ( STRING , org.springframework.integration.websocket.config.WebSocketHttpHeaders . getOrigin ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.integration.websocket.config.WebSocketHttpHeaders . get ( STRING ) ) ; assertEquals ( NUMBER * NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertEquals ( NUMBER * NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertEquals ( new java.net.URI ( STRING ) , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING , java.net.URI .class ) ) ; assertSame ( this . org.springframework.integration.websocket.config.WebSocketClient , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertEquals ( java.lang.Integer . int , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING , java.lang.Boolean .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , STRING , WebSocketHttpHeaders .class ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING ) ) ; assertNull ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING ) ) ; assertEquals ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING ) , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING ) ) ; SubProtocolHandlerRegistry org.springframework.integration.websocket.config.SubProtocolHandlerRegistry = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING , SubProtocolHandlerRegistry .class ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.websocket.config.SubProtocolHandlerRegistry , STRING ) , instanceOf ( PassThruSubProtocolHandler .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.websocket.config.SubProtocolHandlerRegistry , STRING , java.util.Map .class ) . isEmpty ( ) ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { assertSame ( this . org.springframework.integration.websocket.config.IntegrationWebSocketContainer , TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING ) ) ; SubProtocolHandlerRegistry org.springframework.integration.websocket.config.SubProtocolHandlerRegistry = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING , SubProtocolHandlerRegistry .class ) ; assertSame ( this . org.springframework.integration.websocket.config.StompSubProtocolHandler , TestUtils . getPropertyValue ( org.springframework.integration.websocket.config.SubProtocolHandlerRegistry , STRING ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.websocket.config.SubProtocolHandlerRegistry , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.Map<,> . java.util.Collection<> ( ) ) { assertSame ( this . org.springframework.integration.websocket.config.StompSubProtocolHandler , java.lang.Object ) ; } assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING , java.lang.Boolean .class ) ) ; CompositeMessageConverter org.springframework.integration.websocket.config.CompositeMessageConverter = TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING , CompositeMessageConverter .class ) ; java.util.List<org.springframework.integration.websocket.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.integration.websocket.config.MessageConverter> = org.springframework.integration.websocket.config.CompositeMessageConverter . getConverters ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.websocket.config.MessageConverter> . size ( ) ) ; assertSame ( this . org.springframework.integration.websocket.config.SimpleMessageConverter , java.util.List<org.springframework.integration.websocket.config.MessageConverter> . get ( NUMBER ) ) ; assertSame ( this . org.springframework.integration.websocket.config.MapMessageConverter , java.util.List<org.springframework.integration.websocket.config.MessageConverter> . get ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.integration.websocket.config.MessageConverter> . get ( NUMBER ) , instanceOf ( StringMessageConverter .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( this . org.springframework.integration.websocket.config.WebSocketOutboundMessageHandler , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.websocket.config.WebSocketHandler org.springframework.integration.websocket.config.WebSocketHandler ( WebSocketHandler org.springframework.integration.websocket.config.WebSocketHandler ) { return org.springframework.integration.websocket.config.WebSocketHandler ; }  <METHOD_END>
