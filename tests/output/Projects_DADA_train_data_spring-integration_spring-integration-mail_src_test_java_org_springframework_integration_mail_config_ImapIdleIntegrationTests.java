<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; ClassPathXmlApplicationContext org.springframework.integration.mail.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.mail.config.ImapIdleIntegrationTests> ( ) ) ; org.springframework.integration.mail.config.ImapIdleIntegrationTests.PostTransactionProcessor org.springframework.integration.mail.config.ImapIdleIntegrationTests.PostTransactionProcessor = org.springframework.integration.mail.config.ClassPathXmlApplicationContext . getBean ( STRING , org.springframework.integration.mail.config.ImapIdleIntegrationTests.PostTransactionProcessor .class ) ; ImapIdleChannelAdapter org.springframework.integration.mail.config.ImapIdleChannelAdapter = org.springframework.integration.mail.config.ClassPathXmlApplicationContext . getBean ( STRING , ImapIdleChannelAdapter .class ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.mail.config.ImapIdleChannelAdapter , STRING ) ) ; ImapMailReceiver org.springframework.integration.mail.config.ImapMailReceiver = TestUtils . getPropertyValue ( org.springframework.integration.mail.config.ImapIdleChannelAdapter , STRING , ImapMailReceiver .class ) ; org.springframework.integration.mail.config.ImapMailReceiver = spy ( org.springframework.integration.mail.config.ImapMailReceiver ) ; doAnswer ( invocation -> { if ( block . get ( ) ) { Thread . sleep ( NUMBER ) ; } block . set ( true ) ; return null ; } ) . when ( org.springframework.integration.mail.config.ImapMailReceiver ) . waitForNewMessages ( ) ; Message org.springframework.integration.mail.config.Message = mock ( Message .class ) ; doReturn ( new Message [] { org.springframework.integration.mail.config.Message } ) . when ( org.springframework.integration.mail.config.ImapMailReceiver ) . receive ( ) ; Folder org.springframework.integration.mail.config.Folder = mock ( Folder .class ) ; when ( org.springframework.integration.mail.config.Folder . isOpen ( ) ) . thenReturn ( true ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( ImapMailReceiver .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.config.ImapMailReceiver , org.springframework.integration.mail.config.Folder ) ; java.lang.reflect.Field java.lang.reflect.Field = ImapIdleChannelAdapter .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.reflect.Field . void ( org.springframework.integration.mail.config.ImapIdleChannelAdapter , org.springframework.integration.mail.config.ImapMailReceiver ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; doAnswer ( invocation -> { txProcessorLatch . countDown ( ) ; return null ; } ) . when ( org.springframework.integration.mail.config.ImapIdleIntegrationTests.PostTransactionProcessor ) . process ( any ( Message .class ) ) ; org.springframework.integration.mail.config.ImapIdleChannelAdapter . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.mail.config.ImapIdleChannelAdapter . stop ( ) ; org.springframework.integration.mail.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> void void ( Message org.springframework.integration.mail.config.Message );  <METHOD_END>
