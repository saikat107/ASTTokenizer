<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.util.BeanDefinition . getDependsOn ( ) ) . thenReturn ( asArray ( STRING , STRING ) ) ; assertThat ( SpringUtils . addDependsOn ( org.springframework.data.gemfire.util.BeanDefinition , STRING ) ) . isSameAs ( org.springframework.data.gemfire.util.BeanDefinition ) ; verify ( org.springframework.data.gemfire.util.BeanDefinition , times ( NUMBER ) ) . getDependsOn ( ) ; verify ( org.springframework.data.gemfire.util.BeanDefinition , times ( NUMBER ) ) . setDependsOn ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.util.BeanDefinition . getDependsOn ( ) ) . thenReturn ( null ) ; assertThat ( SpringUtils . addDependsOn ( org.springframework.data.gemfire.util.BeanDefinition , STRING ) ) . isSameAs ( org.springframework.data.gemfire.util.BeanDefinition ) ; verify ( org.springframework.data.gemfire.util.BeanDefinition , times ( NUMBER ) ) . getDependsOn ( ) ; verify ( org.springframework.data.gemfire.util.BeanDefinition , times ( NUMBER ) ) . setDependsOn ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.util.BeanDefinition . getDependsOn ( ) ) . thenReturn ( asArray ( STRING , STRING ) ) ; assertThat ( SpringUtils . addDependsOn ( org.springframework.data.gemfire.util.BeanDefinition , STRING , STRING ) ) . isSameAs ( org.springframework.data.gemfire.util.BeanDefinition ) ; verify ( org.springframework.data.gemfire.util.BeanDefinition , times ( NUMBER ) ) . getDependsOn ( ) ; verify ( org.springframework.data.gemfire.util.BeanDefinition , times ( NUMBER ) ) . setDependsOn ( STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( SpringUtils . defaultIfEmpty ( null , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . defaultIfNull ( true , false ) ) . isTrue ( ) ; assertThat ( SpringUtils . defaultIfNull ( 'x' , 'A' ) ) . isEqualTo ( 'x' ) ; assertThat ( SpringUtils . defaultIfNull ( NUMBER , NUMBER ) ) . isEqualTo ( NUMBER ) ; assertThat ( SpringUtils . defaultIfNull ( java.lang.Math . double , NUMBER ) ) . isEqualTo ( java.lang.Math . double ) ; assertThat ( SpringUtils . defaultIfNull ( STRING , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . defaultIfNull ( null , false ) ) . isFalse ( ) ; assertThat ( SpringUtils . defaultIfNull ( null , 'A' ) ) . isEqualTo ( 'A' ) ; assertThat ( SpringUtils . defaultIfNull ( null , NUMBER ) ) . isEqualTo ( NUMBER ) ; assertThat ( SpringUtils . defaultIfNull ( null , NUMBER ) ) . isEqualTo ( NUMBER ) ; assertThat ( SpringUtils . defaultIfNull ( null , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.function.Supplier<java.lang.String> < java.lang.String > java.util.function.Supplier<java.lang.String> = mock ( java.util.function.Supplier .class ) ; assertThat ( SpringUtils . defaultIfNull ( STRING , java.util.function.Supplier<java.lang.String> ) ) . isEqualTo ( STRING ) ; verify ( java.util.function.Supplier<java.lang.String> , never ( ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.function.Supplier<java.lang.String> < java.lang.String > java.util.function.Supplier<java.lang.String> = mock ( java.util.function.Supplier .class ) ; when ( java.util.function.Supplier<java.lang.String> . java.lang.String ( ) ) . thenReturn ( STRING ) ; assertThat ( SpringUtils . defaultIfNull ( null , java.util.function.Supplier<java.lang.String> ) ) . isEqualTo ( STRING ) ; verify ( java.util.function.Supplier<java.lang.String> , times ( NUMBER ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . dereferenceBean ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . equalsIgnoreNull ( null , null ) ) . isTrue ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( true , true ) ) . isTrue ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( 'x' , 'x' ) ) . isTrue ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( NUMBER , NUMBER ) ) . isTrue ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( java.lang.Math . double , java.lang.Math . double ) ) . isTrue ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( STRING , STRING ) ) . isTrue ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( STRING , STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . equalsIgnoreNull ( null , STRING ) ) . isFalse ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( true , false ) ) . isFalse ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( 'x' , 'X' ) ) . isFalse ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( NUMBER , NUMBER ) ) . isFalse ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( NUMBER , java.lang.Math . double ) ) . isFalse ( ) ; assertThat ( SpringUtils . equalsIgnoreNull ( STRING , STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . nullOrEquals ( STRING , STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . nullOrEquals ( STRING , null ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . nullOrEquals ( null , STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . nullOrEquals ( STRING , STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . nullSafeEquals ( STRING , STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . nullSafeEquals ( null , STRING ) ) . isFalse ( ) ; assertThat ( SpringUtils . nullSafeEquals ( STRING , null ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . nullSafeEquals ( STRING , STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . safeGetValue ( ( ) STRING , null ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils . safeGetValue ( ( ) { throw new RuntimeException ( STRING ) ; } , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SpringUtils .< java.lang.Object > safeGetValue ( ( ) { throw new RuntimeException ( STRING ) ; } ) ) . isNull ( ) ; }  <METHOD_END>
