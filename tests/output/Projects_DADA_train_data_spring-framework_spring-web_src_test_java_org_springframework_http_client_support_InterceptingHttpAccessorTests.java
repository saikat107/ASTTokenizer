<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.http.client.support.InterceptingHttpAccessorTests.TestInterceptingHttpAccessor org.springframework.http.client.support.InterceptingHttpAccessorTests.TestInterceptingHttpAccessor = new org.springframework.http.client.support.InterceptingHttpAccessorTests.TestInterceptingHttpAccessor ( ) ; java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> = java.util.Arrays . java.util.List<java.lang.Object> ( new org.springframework.http.client.support.InterceptingHttpAccessorTests.SecondClientHttpRequestInterceptor ( ) , new org.springframework.http.client.support.InterceptingHttpAccessorTests.ThirdClientHttpRequestInterceptor ( ) , new org.springframework.http.client.support.InterceptingHttpAccessorTests.FirstClientHttpRequestInterceptor ( ) ) ; org.springframework.http.client.support.InterceptingHttpAccessorTests.TestInterceptingHttpAccessor . setInterceptors ( java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> ) ; assertThat ( org.springframework.http.client.support.InterceptingHttpAccessorTests.TestInterceptingHttpAccessor . getInterceptors ( ) . get ( NUMBER ) , Matchers . instanceOf ( org.springframework.http.client.support.InterceptingHttpAccessorTests.FirstClientHttpRequestInterceptor .class ) ) ; assertThat ( org.springframework.http.client.support.InterceptingHttpAccessorTests.TestInterceptingHttpAccessor . getInterceptors ( ) . get ( NUMBER ) , Matchers . instanceOf ( org.springframework.http.client.support.InterceptingHttpAccessorTests.SecondClientHttpRequestInterceptor .class ) ) ; assertThat ( org.springframework.http.client.support.InterceptingHttpAccessorTests.TestInterceptingHttpAccessor . getInterceptors ( ) . get ( NUMBER ) , Matchers . instanceOf ( org.springframework.http.client.support.InterceptingHttpAccessorTests.ThirdClientHttpRequestInterceptor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.support.ClientHttpResponse org.springframework.http.client.support.ClientHttpResponse ( HttpRequest org.springframework.http.client.support.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.support.ClientHttpRequestExecution ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.support.ClientHttpResponse org.springframework.http.client.support.ClientHttpResponse ( HttpRequest org.springframework.http.client.support.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.support.ClientHttpRequestExecution ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.support.ClientHttpResponse org.springframework.http.client.support.ClientHttpResponse ( HttpRequest org.springframework.http.client.support.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.http.client.support.ClientHttpRequestExecution ) throws java.io.IOException { return null ; }  <METHOD_END>
