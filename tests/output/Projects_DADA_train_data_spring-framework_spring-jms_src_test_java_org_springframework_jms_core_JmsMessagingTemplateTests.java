<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; org.springframework.jms.core.JmsMessagingTemplate = new JmsMessagingTemplate ( org.springframework.jms.core.JmsTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( this . org.springframework.jms.core.JmsTemplate , org.springframework.jms.core.JmsMessagingTemplate . getJmsTemplate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( org.springframework.jms.core.Destination , org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( org.springframework.jms.core.Destination ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; void ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( STRING , org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( STRING ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; void ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( org.springframework.jms.core.Destination ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; void ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestinationName ( STRING ) ; Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( STRING ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; void ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; org.springframework.jms.core.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( org.springframework.jms.core.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsMessagingTemplate org.springframework.jms.core.JmsMessagingTemplate = new JmsMessagingTemplate ( ) ; org.springframework.jms.core.JmsMessagingTemplate . setJmsTemplate ( org.springframework.jms.core.JmsTemplate ) ; org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestinationName ( STRING ) ; org.springframework.jms.core.JmsMessagingTemplate . afterPropertiesSet ( ) ; Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( STRING ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; void ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; org.springframework.jms.core.JmsMessagingTemplate . convertAndSend ( org.springframework.jms.core.Destination , STRING ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( org.springframework.jms.core.Destination ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; TextMessage org.springframework.jms.core.TextMessage = org.springframework.jms.core.Message<java.lang.String> ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; assertEquals ( STRING , org.springframework.jms.core.TextMessage . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { org.springframework.jms.core.JmsMessagingTemplate . convertAndSend ( STRING , STRING ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( STRING ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; TextMessage org.springframework.jms.core.TextMessage = org.springframework.jms.core.Message<java.lang.String> ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; assertEquals ( STRING , org.springframework.jms.core.TextMessage . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; org.springframework.jms.core.JmsMessagingTemplate . convertAndSend ( STRING ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( org.springframework.jms.core.Destination ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; TextMessage org.springframework.jms.core.TextMessage = org.springframework.jms.core.Message<java.lang.String> ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; assertEquals ( STRING , org.springframework.jms.core.TextMessage . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestinationName ( STRING ) ; org.springframework.jms.core.JmsMessagingTemplate . convertAndSend ( STRING ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( STRING ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; TextMessage org.springframework.jms.core.TextMessage = org.springframework.jms.core.Message<java.lang.String> ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; assertEquals ( STRING , org.springframework.jms.core.TextMessage . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { org.springframework.jms.core.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.core.JmsMessagingTemplate . convertAndSend ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { org.springframework.jms.core.JmsMessagingTemplate . setJmsMessageConverter ( new SimpleMessageConverter ( ) { @ java.lang.Override public javax . javax.jms . javax.jms.Message javax.jms.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.core.Session )					throws org.springframework.jms.core.JMSException , org . springframework . jms . org.springframework.jms.support . org.springframework.jms.support . org.springframework.jms.support.converter.MessageConversionException { throw new org . springframework . jms . org.springframework.jms.support . org.springframework.jms.support . org.springframework.jms.support ( STRING ) ; } } ) ; org.springframework.jms.core.JmsMessagingTemplate . convertAndSend ( STRING , STRING ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( STRING ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.ExpectedException . expectMessage ( new StringContains ( STRING ) ) ; org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) . createMessage ( mock ( Session .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax . javax.jms . javax.jms.Message javax.jms.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.core.Session )					throws org.springframework.jms.core.JMSException , org . springframework . jms . org.springframework.jms.support . org.springframework.jms.support . org.springframework.jms.support.converter.MessageConversionException { throw new org . springframework . jms . org.springframework.jms.support . org.springframework.jms.support . org.springframework.jms.support ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.jms.core.JmsMessagingTemplate . convertAndSend ( org.springframework.jms.core.Destination , STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( org.springframework.jms.core.Destination ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; void ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.jms.core.JmsMessagingTemplate . convertAndSend ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; verify ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( STRING ) , org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . capture ( ) ) ; void ( org.springframework.jms.core.ArgumentCaptor<org.springframework.jms.core.MessageCreator> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( org.springframework.jms.core.Destination ) ) . willReturn ( javax.jms.Message ) ; Message < ? > org.springframework.jms.core.Message<?> = org.springframework.jms.core.JmsMessagingTemplate . receive ( org.springframework.jms.core.Destination ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( org.springframework.jms.core.Destination ) ; void ( org.springframework.jms.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( STRING ) ) . willReturn ( javax.jms.Message ) ; Message < ? > org.springframework.jms.core.Message<?> = org.springframework.jms.core.JmsMessagingTemplate . receive ( STRING ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( STRING ) ; void ( org.springframework.jms.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( org.springframework.jms.core.Destination ) ) . willReturn ( javax.jms.Message ) ; Message < ? > org.springframework.jms.core.Message<?> = org.springframework.jms.core.JmsMessagingTemplate . receive ( ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( org.springframework.jms.core.Destination ) ; void ( org.springframework.jms.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestinationName ( STRING ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( STRING ) ) . willReturn ( javax.jms.Message ) ; Message < ? > org.springframework.jms.core.Message<?> = org.springframework.jms.core.JmsMessagingTemplate . receive ( ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( STRING ) ; void ( org.springframework.jms.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.core.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.core.JmsMessagingTemplate . receive ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( org.springframework.jms.core.Destination ) ) . willReturn ( javax.jms.Message ) ; java.lang.String java.lang.String = org.springframework.jms.core.JmsMessagingTemplate . receiveAndConvert ( org.springframework.jms.core.Destination , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( org.springframework.jms.core.Destination ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( STRING ) ) . willReturn ( javax.jms.Message ) ; java.lang.String java.lang.String = org.springframework.jms.core.JmsMessagingTemplate . receiveAndConvert ( STRING , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( org.springframework.jms.core.Destination ) ) . willReturn ( javax.jms.Message ) ; java.lang.String java.lang.String = org.springframework.jms.core.JmsMessagingTemplate . receiveAndConvert ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( org.springframework.jms.core.Destination ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestinationName ( STRING ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( STRING ) ) . willReturn ( javax.jms.Message ) ; java.lang.String java.lang.String = org.springframework.jms.core.JmsMessagingTemplate . receiveAndConvert ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( STRING ) ) . willReturn ( javax.jms.Message ) ; org.springframework.jms.core.JmsMessagingTemplate . setMessageConverter ( new GenericMessageConverter ( ) ) ; java.lang.Integer java.lang.Integer = org.springframework.jms.core.JmsMessagingTemplate . receiveAndConvert ( STRING , java.lang.Integer .class ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; verify ( org.springframework.jms.core.JmsTemplate ) . receive ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( STRING ) ) . willReturn ( javax.jms.Message ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . receiveAndConvert ( STRING , java.io.Writer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( org.springframework.jms.core.JmsTemplate . receive ( STRING ) ) . willReturn ( null ) ; assertNull ( org.springframework.jms.core.JmsMessagingTemplate . receiveAndConvert ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; given ( org.springframework.jms.core.JmsTemplate . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ) . willReturn ( javax.jms.Message ) ; Message < ? > org.springframework.jms.core.Message<?> = org.springframework.jms.core.JmsMessagingTemplate . sendAndReceive ( org.springframework.jms.core.Destination , org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate , times ( NUMBER ) ) . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ; void ( org.springframework.jms.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; given ( org.springframework.jms.core.JmsTemplate . sendAndReceive ( eq ( STRING ) , any ( ) ) ) . willReturn ( javax.jms.Message ) ; Message < ? > org.springframework.jms.core.Message<?> = org.springframework.jms.core.JmsMessagingTemplate . sendAndReceive ( STRING , org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate , times ( NUMBER ) ) . sendAndReceive ( eq ( STRING ) , any ( ) ) ; void ( org.springframework.jms.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; given ( org.springframework.jms.core.JmsTemplate . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ) . willReturn ( javax.jms.Message ) ; Message < ? > org.springframework.jms.core.Message<?> = org.springframework.jms.core.JmsMessagingTemplate . sendAndReceive ( org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate , times ( NUMBER ) ) . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ; void ( org.springframework.jms.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestinationName ( STRING ) ; Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; given ( org.springframework.jms.core.JmsTemplate . sendAndReceive ( eq ( STRING ) , any ( ) ) ) . willReturn ( javax.jms.Message ) ; Message < ? > org.springframework.jms.core.Message<?> = org.springframework.jms.core.JmsMessagingTemplate . sendAndReceive ( org.springframework.jms.core.Message<java.lang.String> ) ; verify ( org.springframework.jms.core.JmsTemplate , times ( NUMBER ) ) . sendAndReceive ( eq ( STRING ) , any ( ) ) ; void ( org.springframework.jms.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; org.springframework.jms.core.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.core.JmsMessagingTemplate . sendAndReceive ( org.springframework.jms.core.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ) . willReturn ( javax.jms.Message ) ; java.lang.String java.lang.String = org.springframework.jms.core.JmsMessagingTemplate . convertSendAndReceive ( org.springframework.jms.core.Destination , STRING , java.lang.String .class ) ; verify ( org.springframework.jms.core.JmsTemplate , times ( NUMBER ) ) . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . sendAndReceive ( eq ( STRING ) , any ( ) ) ) . willReturn ( javax.jms.Message ) ; java.lang.String java.lang.String = org.springframework.jms.core.JmsMessagingTemplate . convertSendAndReceive ( STRING , STRING , java.lang.String .class ) ; verify ( org.springframework.jms.core.JmsTemplate , times ( NUMBER ) ) . sendAndReceive ( eq ( STRING ) , any ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ) . willReturn ( javax.jms.Message ) ; java.lang.String java.lang.String = org.springframework.jms.core.JmsMessagingTemplate . convertSendAndReceive ( STRING , java.lang.String .class ) ; verify ( org.springframework.jms.core.JmsTemplate , times ( NUMBER ) ) . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { org.springframework.jms.core.JmsMessagingTemplate . setDefaultDestinationName ( STRING ) ; javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( STRING ) ; given ( org.springframework.jms.core.JmsTemplate . sendAndReceive ( eq ( STRING ) , any ( ) ) ) . willReturn ( javax.jms.Message ) ; java.lang.String java.lang.String = org.springframework.jms.core.JmsMessagingTemplate . convertSendAndReceive ( STRING , java.lang.String .class ) ; verify ( org.springframework.jms.core.JmsTemplate , times ( NUMBER ) ) . sendAndReceive ( eq ( STRING ) , any ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { org.springframework.jms.core.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.core.JmsMessagingTemplate . convertSendAndReceive ( STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; MessageConverter org.springframework.jms.core.MessageConverter = mock ( MessageConverter .class ) ; willThrow ( org . springframework . jms . org.springframework.jms.support . org.springframework.jms.support . org.springframework.jms.support .class ) . given ( org.springframework.jms.core.MessageConverter ) . toMessage ( eq ( org.springframework.jms.core.Message<java.lang.String> ) , any ( ) ) ; org.springframework.jms.core.JmsMessagingTemplate . setJmsMessageConverter ( org.springframework.jms.core.MessageConverter ) ; void ( STRING ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( STRING , org.springframework.jms.core.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { javax . javax.jms . javax.jms javax.jms.Message = javax.jms.Message ( ) ; MessageConverter org.springframework.jms.core.MessageConverter = mock ( MessageConverter .class ) ; willThrow ( org . springframework . jms . org.springframework.jms.support . org.springframework.jms.support . org.springframework.jms.support .class ) . given ( org.springframework.jms.core.MessageConverter ) . fromMessage ( javax.jms.Message ) ; org.springframework.jms.core.JmsMessagingTemplate . setJmsMessageConverter ( org.springframework.jms.core.MessageConverter ) ; given ( org.springframework.jms.core.JmsTemplate . receive ( STRING ) ) . willReturn ( javax.jms.Message ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . receive ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { willThrow ( MessageNotReadableException .class ) . given ( org.springframework.jms.core.JmsTemplate ) . receive ( STRING ) ; org.springframework.jms.core.ExpectedException . expect ( MessagingException .class ) ; org.springframework.jms.core.JmsMessagingTemplate . receive ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; willThrow ( DestinationResolutionException .class ) . given ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( org.springframework.jms.core.Destination , org.springframework.jms.core.Message<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; willThrow ( DestinationResolutionException .class ) . given ( org.springframework.jms.core.JmsTemplate ) . receive ( org.springframework.jms.core.Destination ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . receive ( org.springframework.jms.core.Destination ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; MessageConverter org.springframework.jms.core.MessageConverter = mock ( MessageConverter .class ) ; willThrow ( MessageFormatException .class ) . given ( org.springframework.jms.core.MessageConverter ) . toMessage ( eq ( org.springframework.jms.core.Message<java.lang.String> ) , any ( ) ) ; org.springframework.jms.core.JmsMessagingTemplate . setJmsMessageConverter ( org.springframework.jms.core.MessageConverter ) ; void ( STRING ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( STRING , org.springframework.jms.core.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.core.JMSException { Message < java.lang.String > org.springframework.jms.core.Message<java.lang.String> = org.springframework.jms.core.Message<java.lang.String> ( ) ; MessageConverter org.springframework.jms.core.MessageConverter = mock ( MessageConverter .class ) ; willThrow ( MessageNotWriteableException .class ) . given ( org.springframework.jms.core.MessageConverter ) . toMessage ( eq ( org.springframework.jms.core.Message<java.lang.String> ) , any ( ) ) ; org.springframework.jms.core.JmsMessagingTemplate . setJmsMessageConverter ( org.springframework.jms.core.MessageConverter ) ; void ( STRING ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . send ( STRING , org.springframework.jms.core.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { willThrow ( InvalidDestinationException .class ) . given ( org.springframework.jms.core.JmsTemplate ) . sendAndReceive ( eq ( STRING ) , any ( ) ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . sendAndReceive ( STRING , org.springframework.jms.core.Message<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Destination org.springframework.jms.core.Destination = new Destination ( ) {} ; willThrow ( InvalidDestinationException .class ) . given ( org.springframework.jms.core.JmsTemplate ) . sendAndReceive ( eq ( org.springframework.jms.core.Destination ) , any ( ) ) ; org.springframework.jms.core.ExpectedException . expect ( org . springframework . org.springframework.messaging . org.springframework.messaging . org.springframework.messaging .class ) ; org.springframework.jms.core.JmsMessagingTemplate . sendAndReceive ( org.springframework.jms.core.Destination , org.springframework.jms.core.Message<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { willAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.jms.core.InvocationOnMock ) throws java.lang.Throwable { MessageCreator org.springframework.jms.core.MessageCreator = ( MessageCreator ) org.springframework.jms.core.InvocationOnMock . getArguments ( ) [ NUMBER ] ; org.springframework.jms.core.MessageCreator . createMessage ( null ) ; return null ; } } ) . given ( org.springframework.jms.core.JmsTemplate ) . send ( eq ( STRING ) , any ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.jms.core.InvocationOnMock ) throws java.lang.Throwable { MessageCreator org.springframework.jms.core.MessageCreator = ( MessageCreator ) org.springframework.jms.core.InvocationOnMock . getArguments ( ) [ NUMBER ] ; org.springframework.jms.core.MessageCreator . createMessage ( null ) ; return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.core.Message<java.lang.String> < java.lang.String > org.springframework.jms.core.Message<java.lang.String> ( java.lang.String java.lang.String ) { return MessageBuilder . withPayload ( java.lang.String ) . setHeader ( STRING , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.core.Message<java.lang.String> < java.lang.String > org.springframework.jms.core.Message<java.lang.String> ( ) { return org.springframework.jms.core.Message<java.lang.String> ( STRING ) ; }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( java.lang.String java.lang.String ) { try { StubTextMessage org.springframework.jms.core.StubTextMessage = new StubTextMessage ( java.lang.String ) ; org.springframework.jms.core.StubTextMessage . setStringProperty ( STRING , STRING ) ; return org.springframework.jms.core.StubTextMessage ; } catch ( JMSException org.springframework.jms.core.JMSException ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.jms.core.JMSException ) ; } }  <METHOD_END>
<METHOD_START> private javax . javax.jms . javax.jms.Message javax.jms.Message ( ) { return javax.jms.Message ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageCreator org.springframework.jms.core.MessageCreator ) { try { TextMessage org.springframework.jms.core.TextMessage = org.springframework.jms.core.Message<java.lang.String> ( org.springframework.jms.core.MessageCreator ) ; assertEquals ( STRING , STRING , org.springframework.jms.core.TextMessage . getText ( ) ) ; assertEquals ( STRING , STRING , org.springframework.jms.core.TextMessage . getStringProperty ( STRING ) ) ; } catch ( JMSException org.springframework.jms.core.JMSException ) { throw new java.lang.IllegalStateException ( STRING , org.springframework.jms.core.JMSException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.jms.core.Message<?> ) { assertNotNull ( STRING , org.springframework.jms.core.Message<> ) ; assertEquals ( STRING , STRING , org.springframework.jms.core.Message<> . getPayload ( ) ) ; assertEquals ( STRING , STRING , org.springframework.jms.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.TextMessage org.springframework.jms.core.TextMessage ( MessageCreator org.springframework.jms.core.MessageCreator ) throws org.springframework.jms.core.JMSException { Session org.springframework.jms.core.Session = mock ( Session .class ) ; given ( org.springframework.jms.core.Session . createTextMessage ( BDDMockito .< java.lang.String > any ( ) ) ) . willAnswer ( new Answer < TextMessage > ( ) { @ java.lang.Override public org.springframework.jms.core.TextMessage org.springframework.jms.core.TextMessage ( InvocationOnMock org.springframework.jms.core.InvocationOnMock ) throws java.lang.Throwable { return new StubTextMessage ( ( java.lang.String ) org.springframework.jms.core.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; } } ) ; javax . javax.jms . javax.jms javax.jms.Message = org.springframework.jms.core.MessageCreator . createMessage ( org.springframework.jms.core.Session ) ; verify ( org.springframework.jms.core.Session ) . createTextMessage ( BDDMockito .< java.lang.String > any ( ) ) ; return TextMessage .class . org.springframework.jms.core.TextMessage ( javax.jms.Message ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.TextMessage org.springframework.jms.core.TextMessage ( InvocationOnMock org.springframework.jms.core.InvocationOnMock ) throws java.lang.Throwable { return new StubTextMessage ( ( java.lang.String ) org.springframework.jms.core.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; }  <METHOD_END>
