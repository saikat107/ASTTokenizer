<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext != null ) { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class ) ; SpringResourceTemplateResolver org.springframework.boot.devtools.autoconfigure.SpringResourceTemplateResolver = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( SpringResourceTemplateResolver .class ) ; assertThat ( org.springframework.boot.devtools.autoconfigure.SpringResourceTemplateResolver . isCacheable ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class , STRING ) ; SpringResourceTemplateResolver org.springframework.boot.devtools.autoconfigure.SpringResourceTemplateResolver = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( SpringResourceTemplateResolver .class ) ; assertThat ( org.springframework.boot.devtools.autoconfigure.SpringResourceTemplateResolver . isCacheable ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING , new java.io.File ( STRING ) . java.lang.String ( ) ) ; try { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class ) ; SpringResourceTemplateResolver org.springframework.boot.devtools.autoconfigure.SpringResourceTemplateResolver = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( SpringResourceTemplateResolver .class ) ; assertThat ( org.springframework.boot.devtools.autoconfigure.SpringResourceTemplateResolver . isCacheable ( ) ) . isTrue ( ) ; } finally { java.lang.System . java.lang.String ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.WebResourcesConfig .class ) ; ResourceProperties org.springframework.boot.devtools.autoconfigure.ResourceProperties = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( ResourceProperties .class ) ; assertThat ( org.springframework.boot.devtools.autoconfigure.ResourceProperties . getCachePeriod ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class ) ; LiveReloadServer org.springframework.boot.devtools.autoconfigure.LiveReloadServer = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( LiveReloadServer .class ) ; assertThat ( org.springframework.boot.devtools.autoconfigure.LiveReloadServer . isStarted ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.ConfigWithMockLiveReload .class ) ; LiveReloadServer org.springframework.boot.devtools.autoconfigure.LiveReloadServer = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( LiveReloadServer .class ) ; reset ( org.springframework.boot.devtools.autoconfigure.LiveReloadServer ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . publishEvent ( new ContextRefreshedEvent ( this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ) ) ; verify ( org.springframework.boot.devtools.autoconfigure.LiveReloadServer ) . triggerReload ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.ConfigWithMockLiveReload .class ) ; LiveReloadServer org.springframework.boot.devtools.autoconfigure.LiveReloadServer = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( LiveReloadServer .class ) ; reset ( org.springframework.boot.devtools.autoconfigure.LiveReloadServer ) ; ClassPathChangedEvent org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent = new ClassPathChangedEvent ( this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext , java.util.Collections .< ChangedFiles > java.util.Set<org.springframework.boot.devtools.autoconfigure.ChangedFiles> ( ) , false ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . publishEvent ( org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent ) ; verify ( org.springframework.boot.devtools.autoconfigure.LiveReloadServer ) . triggerReload ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.ConfigWithMockLiveReload .class ) ; LiveReloadServer org.springframework.boot.devtools.autoconfigure.LiveReloadServer = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( LiveReloadServer .class ) ; reset ( org.springframework.boot.devtools.autoconfigure.LiveReloadServer ) ; ClassPathChangedEvent org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent = new ClassPathChangedEvent ( this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext , java.util.Collections .< ChangedFiles > java.util.Set<org.springframework.boot.devtools.autoconfigure.ChangedFiles> ( ) , true ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . publishEvent ( org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent ) ; verify ( org.springframework.boot.devtools.autoconfigure.LiveReloadServer , never ( ) ) . triggerReload ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , false ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.boot.devtools.autoconfigure.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( OptionalLiveReloadServer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class ) ; ClassPathChangedEvent org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent = new ClassPathChangedEvent ( this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext , java.util.Collections .< ChangedFiles > java.util.Set<org.springframework.boot.devtools.autoconfigure.ChangedFiles> ( ) , true ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . publishEvent ( org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent ) ; verify ( this . org.springframework.boot.devtools.autoconfigure.MockRestarter . getMock ( ) ) . restart ( any ( FailureHandler .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class ) ; ClassPathChangedEvent org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent = new ClassPathChangedEvent ( this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext , java.util.Collections .< ChangedFiles > java.util.Set<org.springframework.boot.devtools.autoconfigure.ChangedFiles> ( ) , false ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . publishEvent ( org.springframework.boot.devtools.autoconfigure.ClassPathChangedEvent ) ; verify ( this . org.springframework.boot.devtools.autoconfigure.MockRestarter . getMock ( ) , never ( ) ) . restart ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class ) ; ClassPathFileSystemWatcher org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( ClassPathFileSystemWatcher .class ) ; assertThat ( org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , false ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.boot.devtools.autoconfigure.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( ClassPathFileSystemWatcher .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class , java.util.Map<java.lang.String,java.lang.Object> ) ; ClassPathFileSystemWatcher org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( ClassPathFileSystemWatcher .class ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher , STRING ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; assertThat ( java.lang.Object ) . isInstanceOf ( TriggerFileFilter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class , java.util.Map<java.lang.String,java.lang.Object> ) ; ClassPathFileSystemWatcher org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher = this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( ClassPathFileSystemWatcher .class ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.boot.devtools.autoconfigure.ClassPathFileSystemWatcher , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.io.File,java.lang.Object> < java.io.File , java.lang.Object > java.util.Map<java.io.File,java.lang.Object> = ( java.util.Map<java.io.File,java.lang.Object> < java.io.File , java.lang.Object > ) ReflectionTestUtils . getField ( java.lang.Object , STRING ) ; assertThat ( java.util.Map<java.io.File,java.lang.Object> ) . hasSize ( NUMBER ) . containsKey ( new java.io.File ( STRING ) . java.io.File ( ) ) . containsKey ( new java.io.File ( STRING ) . java.io.File ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfigurationTests.Config .class ) ; TomcatWebServer org.springframework.boot.devtools.autoconfigure.TomcatWebServer = ( TomcatWebServer ) ( ( ServletWebServerApplicationContext ) this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ) . getWebServer ( ) ; Container org.springframework.boot.devtools.autoconfigure.Container = org.springframework.boot.devtools.autoconfigure.TomcatWebServer . getTomcat ( ) . getHost ( ) . findChildren ( ) [ NUMBER ] ; StandardWrapper org.springframework.boot.devtools.autoconfigure.StandardWrapper = ( StandardWrapper ) org.springframework.boot.devtools.autoconfigure.Container . findChild ( STRING ) ; EmbeddedServletOptions org.springframework.boot.devtools.autoconfigure.EmbeddedServletOptions = ( EmbeddedServletOptions ) ReflectionTestUtils . getField ( org.springframework.boot.devtools.autoconfigure.StandardWrapper . getServlet ( ) , STRING ) ; assertThat ( org.springframework.boot.devtools.autoconfigure.EmbeddedServletOptions . getDevelopment ( ) ) . isEqualTo ( true ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { return org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( java.lang.Class<> , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String ... java.lang.String[] ) { Restarter . initialize ( new java.lang.String [ NUMBER ] , false , new MockRestartInitializer ( ) , false ) ; SpringApplication org.springframework.boot.devtools.autoconfigure.SpringApplication = new SpringApplication ( java.lang.Class<> ) ; org.springframework.boot.devtools.autoconfigure.SpringApplication . setDefaultProperties ( java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; ConfigurableApplicationContext org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.SpringApplication . run ( java.lang.String[] ) ; return org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , false ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , this . int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.LiveReloadServer org.springframework.boot.devtools.autoconfigure.LiveReloadServer ( ) { return mock ( LiveReloadServer .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.RedisTemplate<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.boot.devtools.autoconfigure.RedisTemplate<java.lang.Object,java.lang.Object> ( ) { RedisTemplate < java.lang.Object , java.lang.Object > org.springframework.boot.devtools.autoconfigure.RedisTemplate<java.lang.Object,java.lang.Object> = new RedisTemplate <> ( ) ; org.springframework.boot.devtools.autoconfigure.RedisTemplate<java.lang.Object,java.lang.Object> . setConnectionFactory ( mock ( RedisConnectionFactory .class ) ) ; return org.springframework.boot.devtools.autoconfigure.RedisTemplate<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
