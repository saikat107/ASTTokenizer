<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER } ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } , NUMBER , NUMBER ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER } ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } , NUMBER , NUMBER ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . length ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . length ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER } ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER } ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER } , NUMBER , NUMBER ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . startsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . startsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . startsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . startsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER } ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER } , NUMBER , NUMBER ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER } ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . endsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . endsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . endsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . endsWith ( org.springframework.boot.loader.jar.AsciiBytes ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; this . org.springframework.boot.loader.jar.ExpectedException . expect ( java.lang.IndexOutOfBoundsException .class ) ; org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; this . org.springframework.boot.loader.jar.ExpectedException . expect ( java.lang.IndexOutOfBoundsException .class ) ; org.springframework.boot.loader.jar.AsciiBytes . substring ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } , NUMBER , NUMBER ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = org.springframework.boot.loader.jar.AsciiBytes . append ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } , NUMBER , NUMBER ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = org.springframework.boot.loader.jar.AsciiBytes . append ( new byte [] { NUMBER } ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER } ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ) . substring ( NUMBER , NUMBER ) ; AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = new AsciiBytes ( STRING ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ) . isEqualTo ( org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ) . isEqualTo ( org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ) . isEqualTo ( org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes ) . isEqualTo ( org.springframework.boot.loader.jar.AsciiBytes ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes ) . isEqualTo ( org.springframework.boot.loader.jar.AsciiBytes ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes ) . isEqualTo ( org.springframework.boot.loader.jar.AsciiBytes ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ) . isNotEqualTo ( org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ) ; assertThat ( org.springframework.boot.loader.jar.AsciiBytes ) . isNotEqualTo ( org.springframework.boot.loader.jar.AsciiBytes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { assertThat ( new AsciiBytes ( java.lang.String ) . hashCode ( ) ) . isEqualTo ( java.lang.String . int ( ) ) ; }  <METHOD_END>
