<METHOD_START> public void void ( MessageConverter org.springframework.messaging.simp.stomp.MessageConverter ) { Assert . notNull ( org.springframework.messaging.simp.stomp.MessageConverter , STRING ) ; this . org.springframework.messaging.simp.stomp.MessageConverter = org.springframework.messaging.simp.stomp.MessageConverter ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.MessageConverter org.springframework.messaging.simp.stomp.MessageConverter ( ) { return this . org.springframework.messaging.simp.stomp.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( TaskScheduler org.springframework.messaging.simp.stomp.TaskScheduler ) { this . org.springframework.messaging.simp.stomp.TaskScheduler = org.springframework.messaging.simp.stomp.TaskScheduler ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.stomp.TaskScheduler org.springframework.messaging.simp.stomp.TaskScheduler ( ) { return this . org.springframework.messaging.simp.stomp.TaskScheduler ; }  <METHOD_END>
<METHOD_START> public void void ( long [] long[] ) { if ( long[] == null || long[] . int != NUMBER || long[] [ NUMBER ] < NUMBER || long[] [ NUMBER ] < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.util.Arrays . java.lang.String ( long[] ) ) ; } this . long[] = long[] ; }  <METHOD_END>
<METHOD_START> public long [] long[] ( ) { return this . long[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( long[] ( ) != null && long[] ( ) [ NUMBER ] != NUMBER && long[] ( ) [ NUMBER ] != NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { Assert . isTrue ( long > NUMBER , STRING ) ; this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> protected org.springframework.messaging.simp.stomp.ConnectionHandlingStompSession org.springframework.messaging.simp.stomp.ConnectionHandlingStompSession ( StompHeaders org.springframework.messaging.simp.stomp.StompHeaders , StompSessionHandler org.springframework.messaging.simp.stomp.StompSessionHandler ) { org.springframework.messaging.simp.stomp.StompHeaders = org.springframework.messaging.simp.stomp.StompHeaders ( org.springframework.messaging.simp.stomp.StompHeaders ) ; DefaultStompSession org.springframework.messaging.simp.stomp.DefaultStompSession = new DefaultStompSession ( org.springframework.messaging.simp.stomp.StompSessionHandler , org.springframework.messaging.simp.stomp.StompHeaders ) ; org.springframework.messaging.simp.stomp.DefaultStompSession . setMessageConverter ( org.springframework.messaging.simp.stomp.MessageConverter ( ) ) ; org.springframework.messaging.simp.stomp.DefaultStompSession . setTaskScheduler ( org.springframework.messaging.simp.stomp.TaskScheduler ( ) ) ; org.springframework.messaging.simp.stomp.DefaultStompSession . setReceiptTimeLimit ( long ( ) ) ; return org.springframework.messaging.simp.stomp.DefaultStompSession ; }  <METHOD_END>
<METHOD_START> protected org.springframework.messaging.simp.stomp.StompHeaders org.springframework.messaging.simp.stomp.StompHeaders ( StompHeaders org.springframework.messaging.simp.stomp.StompHeaders ) { org.springframework.messaging.simp.stomp.StompHeaders = ( org.springframework.messaging.simp.stomp.StompHeaders != null ? org.springframework.messaging.simp.stomp.StompHeaders : new StompHeaders ( ) ) ; if ( org.springframework.messaging.simp.stomp.StompHeaders . getHeartbeat ( ) == null ) { org.springframework.messaging.simp.stomp.StompHeaders . setHeartbeat ( long[] ( ) ) ; } return org.springframework.messaging.simp.stomp.StompHeaders ; }  <METHOD_END>
