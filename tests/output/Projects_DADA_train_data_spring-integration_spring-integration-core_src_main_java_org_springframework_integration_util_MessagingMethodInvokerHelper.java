<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { this( java.lang.Object , null , java.lang.reflect.Method , java.lang.Class<> , boolean ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , boolean boolean ) { this( java.lang.Object , java.lang.reflect.Method , null , boolean ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { this( java.lang.Object , null , java.lang.String , java.lang.Class<> , boolean ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , boolean boolean ) { this( java.lang.Object , java.lang.String , null , boolean ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , boolean boolean ) { this( java.lang.Object , java.lang.Class<> , null , boolean ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { this( java.lang.Object , java.lang.Class<> , ( java.lang.String ) null , java.lang.Class<> , boolean ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.util.BeanFactory ) { super. setBeanFactory ( org.springframework.integration.util.BeanFactory ) ; this . org.springframework.integration.util.DefaultMessageHandlerMethodFactory . setBeanFactory ( org.springframework.integration.util.BeanFactory ) ; if ( org.springframework.integration.util.BeanFactory instanceof ConfigurableListableBeanFactory ) { BeanExpressionResolver org.springframework.integration.util.BeanExpressionResolver = ( ( ConfigurableListableBeanFactory ) org.springframework.integration.util.BeanFactory ) . getBeanExpressionResolver ( ) ; if ( org.springframework.integration.util.BeanExpressionResolver != null ) { this . org.springframework.integration.util.BeanExpressionResolver = org.springframework.integration.util.BeanExpressionResolver ; } this . org.springframework.integration.util.BeanExpressionContext = new BeanExpressionContext ( ( ConfigurableListableBeanFactory ) org.springframework.integration.util.BeanFactory , null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConversionService org.springframework.integration.util.ConversionService ) { super. setConversionService ( org.springframework.integration.util.ConversionService ) ; if ( org.springframework.integration.util.ConversionService != null ) { this . org.springframework.integration.util.DefaultMessageHandlerMethodFactory . setConversionService ( org.springframework.integration.util.ConversionService ) ; } }  <METHOD_END>
<METHOD_START> public T T ( Message < ? > org.springframework.integration.util.Message<?> ) throws java.lang.Exception { org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper = new org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ( org.springframework.integration.util.Message<> ) ; return T ( org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) ; }  <METHOD_END>
<METHOD_START> public T T ( java.util.Collection<org.springframework.integration.util.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.util.Message<?>> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws java.lang.Exception { org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper = new org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ( java.util.Collection<org.springframework.integration.util.Message<?>> , java.util.Map<java.lang.String,java.lang.Object> ) ; return T ( org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.lang.Object instanceof Lifecycle ) { ( ( Lifecycle ) this . java.lang.Object ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.lang.Object instanceof Lifecycle ) { ( ( Lifecycle ) this . java.lang.Object ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . java.lang.Object instanceof Lifecycle ) || ( ( Lifecycle ) this . java.lang.Object ) . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; this . boolean = boolean ; Assert . notNull ( java.lang.reflect.Method , STRING ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . boolean = java.lang.Class<> != null ; if ( java.lang.Class<> != null ) { Assert . isTrue ( java.lang.reflect.Method . java.lang.Class<?> ( ) != java.lang.Void .class && java.lang.reflect.Method . java.lang.Class<?> ( ) != java.lang.Void . java.lang.Class<java.lang.Void> , STRING ) ; this . org.springframework.integration.util.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.Class<> ) ; } else { this . org.springframework.integration.util.TypeDescriptor = null ; } Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; try { InvocableHandlerMethod org.springframework.integration.util.InvocableHandlerMethod = this . org.springframework.integration.util.DefaultMessageHandlerMethodFactory . createInvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = new org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( org.springframework.integration.util.InvocableHandlerMethod , boolean ) ; this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = null ; void ( java.lang.Class<?> ( java.lang.Object ) , java.lang.reflect.Method , this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) ; } catch ( org.springframework.integration.util.MessagingMethodInvokerHelper.IneligibleMethodException org.springframework.integration.util.MessagingMethodInvokerHelper.IneligibleMethodException ) { throw new java.lang.IllegalArgumentException ( org.springframework.integration.util.MessagingMethodInvokerHelper.IneligibleMethodException ) ; } this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = null ; this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = null ; this . java.util.List<java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> = null ; this . void ( java.lang.Object , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Class<> != null ) { this . org.springframework.integration.util.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.Class<> ) ; } else { this . org.springframework.integration.util.TypeDescriptor = null ; } this . java.lang.Object = java.lang.Object ; java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> < java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > > java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> = java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> ( java.lang.Object , java.lang.Class<> , java.lang.String , java.lang.Class<> != null ) ; java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.String ) ; java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.String ) ; if ( ( java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . int ( ) == NUMBER && java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) ) || ( java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . int ( ) == NUMBER && java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) ) ) { if ( java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . int ( ) == NUMBER ) { this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . java.util.Collection<org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( ) . java.util.Iterator<org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( ) . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( ) ; } else { this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . java.util.Collection<org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( ) . java.util.Iterator<org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( ) . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( ) ; } this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = null ; this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = null ; this . java.util.List<java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> = null ; } else { this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = null ; this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ; this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ; this . java.util.List<java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> = new java.util.LinkedList<java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> <> ( ) ; this . java.util.List<java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . boolean ( this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) ; this . java.util.List<java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . boolean ( this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) ; } void ( java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; if ( java.lang.Object instanceof java.lang.reflect.Method ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( ( ( java.lang.reflect.Method ) java.lang.Object ) . java.lang.String ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.Object ) ; } this . java.lang.String = java.lang.StringBuilder . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.integration.util.StandardEvaluationContext = getEvaluationContext ( false ) ; java.lang.Class<?> < ? > java.lang.Class<?> = AopUtils . getTargetClass ( this . java.lang.Object ) ; if ( this . java.lang.reflect.Method != null ) { org.springframework.integration.util.StandardEvaluationContext . registerMethodFilter ( java.lang.Class<> , new FixedMethodFilter ( this . java.lang.reflect.Method ) ) ; if ( this . org.springframework.integration.util.TypeDescriptor != null ) { Assert . state ( org.springframework.integration.util.StandardEvaluationContext . getTypeConverter ( ) . canConvert ( TypeDescriptor . valueOf ( ( this . java.lang.reflect.Method ) . java.lang.Class<?> ( ) ) , this . org.springframework.integration.util.TypeDescriptor ) , STRING + this . org.springframework.integration.util.TypeDescriptor + STRING + this . java.lang.reflect.Method ) ; } } else { AnnotatedMethodFilter org.springframework.integration.util.AnnotatedMethodFilter = new AnnotatedMethodFilter ( this . java.lang.Class<> , this . java.lang.String , this . boolean ) ; Assert . state ( boolean ( org.springframework.integration.util.AnnotatedMethodFilter , java.lang.Class<> , org.springframework.integration.util.StandardEvaluationContext . getTypeConverter ( ) ) , STRING + this . org.springframework.integration.util.TypeDescriptor + STRING + this . java.lang.reflect.Method ) ; org.springframework.integration.util.StandardEvaluationContext . registerMethodFilter ( java.lang.Class<> , org.springframework.integration.util.AnnotatedMethodFilter ) ; } org.springframework.integration.util.StandardEvaluationContext . setVariable ( STRING , this . java.lang.Object ) ; org.springframework.integration.util.StandardEvaluationContext . registerFunction ( STRING , org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper .class . java.lang.reflect.Method ( STRING , java.util.Map .class , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( AnnotatedMethodFilter org.springframework.integration.util.AnnotatedMethodFilter , java.lang.Class<?> < ? > java.lang.Class<?> , TypeConverter org.springframework.integration.util.TypeConverter ) { if ( this . org.springframework.integration.util.TypeDescriptor == null ) { return true ; } java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = org.springframework.integration.util.AnnotatedMethodFilter . filter ( java.util.Arrays . java.util.List ( ReflectionUtils . getAllDeclaredMethods ( java.lang.Class<> ) ) ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { if ( org.springframework.integration.util.TypeConverter . canConvert ( TypeDescriptor . valueOf ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) , this . org.springframework.integration.util.TypeDescriptor ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private T T ( org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) throws java.lang.Exception { if ( ! this . boolean ) { void ( ) ; } org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) ; if ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod == null ) { org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ; } Assert . notNull ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod , STRING ) ; if ( ! org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . boolean ) { void ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) ; } Expression org.springframework.integration.util.Expression = org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . org.springframework.integration.util.Expression ; T T ; if ( this . boolean || org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . boolean ) { T = T ( org.springframework.integration.util.Expression , org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) ; } else { T = T ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod , org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) ; } if ( T != null && this . org.springframework.integration.util.TypeDescriptor != null ) { return ( T ) getEvaluationContext ( true ) . getTypeConverter ( ) . convertValue ( T , TypeDescriptor . forObject ( T ) , this . org.springframework.integration.util.TypeDescriptor ) ; } else { return T ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) { ExpressionParser org.springframework.integration.util.ExpressionParser ; if ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . org.springframework.integration.util.UseSpelInvoker == null ) { org.springframework.integration.util.ExpressionParser = org.springframework.integration.util.ExpressionParser ; } else { java.lang.String java.lang.String = java.lang.String ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . org.springframework.integration.util.UseSpelInvoker . compilerMode ( ) , STRING ) . toUpperCase ( ) ; org.springframework.integration.util.ExpressionParser = ! StringUtils . hasText ( java.lang.String ) ? org.springframework.integration.util.ExpressionParser : java.util.Map<org.springframework.integration.util.SpelCompilerMode,org.springframework.integration.util.ExpressionParser> . get ( SpelCompilerMode . valueOf ( java.lang.String ) ) ; } org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . org.springframework.integration.util.Expression = org.springframework.integration.util.ExpressionParser . parseExpression ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . java.lang.String ) ; org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . boolean = true ; }  <METHOD_END>
<METHOD_START> private synchronized void void ( ) java.lang.Exception { if ( ! this . boolean ) { PayloadExpressionArgumentResolver org.springframework.integration.util.PayloadExpressionArgumentResolver = new PayloadExpressionArgumentResolver ( ) ; org.springframework.integration.util.PayloadExpressionArgumentResolver . setBeanFactory ( getBeanFactory ( ) ) ; PayloadsArgumentResolver org.springframework.integration.util.PayloadsArgumentResolver = new PayloadsArgumentResolver ( ) ; org.springframework.integration.util.PayloadsArgumentResolver . setBeanFactory ( getBeanFactory ( ) ) ; CollectionArgumentResolver org.springframework.integration.util.CollectionArgumentResolver = new CollectionArgumentResolver ( this . boolean ) ; org.springframework.integration.util.CollectionArgumentResolver . setBeanFactory ( getBeanFactory ( ) ) ; MapArgumentResolver org.springframework.integration.util.MapArgumentResolver = new MapArgumentResolver ( ) ; org.springframework.integration.util.MapArgumentResolver . setBeanFactory ( getBeanFactory ( ) ) ; java.util.List<org.springframework.integration.util.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.integration.util.HandlerMethodArgumentResolver> = new java.util.LinkedList<org.springframework.integration.util.HandlerMethodArgumentResolver> <> ( ) ; java.util.List<org.springframework.integration.util.HandlerMethodArgumentResolver> . add ( org.springframework.integration.util.PayloadExpressionArgumentResolver ) ; java.util.List<org.springframework.integration.util.HandlerMethodArgumentResolver> . add ( org.springframework.integration.util.PayloadsArgumentResolver ) ; java.util.List<org.springframework.integration.util.HandlerMethodArgumentResolver> . add ( org.springframework.integration.util.CollectionArgumentResolver ) ; java.util.List<org.springframework.integration.util.HandlerMethodArgumentResolver> . add ( org.springframework.integration.util.MapArgumentResolver ) ; this . org.springframework.integration.util.DefaultMessageHandlerMethodFactory . setCustomArgumentResolvers ( java.util.List<org.springframework.integration.util.HandlerMethodArgumentResolver> ) ; if ( getBeanFactory ( ) != null && getBeanFactory ( ) . containsBean ( IntegrationContextUtils . ARGUMENT_RESOLVER_MESSAGE_CONVERTER_BEAN_NAME ) ) { this . org.springframework.integration.util.DefaultMessageHandlerMethodFactory . setMessageConverter ( getBeanFactory ( ) . getBean ( IntegrationContextUtils . ARGUMENT_RESOLVER_MESSAGE_CONVERTER_BEAN_NAME , MessageConverter .class ) ) ; } this . org.springframework.integration.util.DefaultMessageHandlerMethodFactory . afterPropertiesSet ( ) ; void ( ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private T T ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod , org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) throws java.lang.Exception { try { return ( T ) org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . java.lang.Object ( org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) ; } catch ( MethodArgumentResolutionException | MessageConversionException | java.lang.IllegalStateException java.lang.Object ) { if ( java.lang.Object instanceof MessageConversionException ) { if ( java.lang.Object . getCause ( ) instanceof ConversionFailedException && ! ( java.lang.Object . getCause ( ) . getCause ( ) instanceof ConverterNotFoundException ) ) { throw java.lang.Object ; } } else if ( java.lang.Object instanceof java.lang.IllegalStateException ) { if ( ! ( java.lang.Object . getCause ( ) instanceof java.lang.IllegalArgumentException ) || ! java.lang.Object . getStackTrace ( ) [ NUMBER ] . getClassName ( ) . equals ( InvocableHandlerMethod .class . java.lang.String ( ) ) || ( ! STRING . boolean ( java.lang.Object . getCause ( ) . getMessage ( ) ) && ! java.lang.Object . getCause ( ) . getMessage ( ) . startsWith ( STRING ) ) ) { throw java.lang.Object ; } } Expression org.springframework.integration.util.Expression = org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . org.springframework.integration.util.Expression ; if ( ++ org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . int >= int ) { org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . boolean = true ; if ( org.springframework.integration.util.Log . isInfoEnabled ( ) ) { org.springframework.integration.util.Log . info ( STRING + org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . org.springframework.integration.util.InvocableHandlerMethod + STRING + org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper + STRING + STRING + org.springframework.integration.util.Expression . getExpressionString ( ) + STRING ) ; } } return T ( org.springframework.integration.util.Expression , org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private T T ( Expression org.springframework.integration.util.Expression , org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) throws java.lang.Exception { try { return ( T ) evaluateExpression ( org.springframework.integration.util.Expression , org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception ; if ( ( java.lang.Exception instanceof EvaluationException || java.lang.Exception instanceof MessageHandlingException ) && java.lang.Exception . java.lang.Throwable ( ) != null ) { java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; } if ( java.lang.Throwable instanceof java.lang.Exception ) { throw ( java.lang.Exception ) java.lang.Throwable ; } else { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> < java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > > java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> ( final java.lang.Object java.lang.Object , final java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , final java.lang.String java.lang.String , final boolean boolean ) { java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> < java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > > java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> <> ( ) ; final java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = new java.util.HashMap<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> <> ( ) ; final java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = new java.util.HashMap<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> <> ( ) ; final java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = new java.util.HashMap<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> <> ( ) ; final java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> = new java.util.HashMap<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> <> ( ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> = new java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> <> ( ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> = new java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> <> ( ) ; final java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.Object ) ; MethodFilter org.springframework.integration.util.MethodFilter = new UniqueMethodFilter ( java.lang.Class<> ) ; ReflectionUtils . doWithMethods ( java.lang.Class<> , method1 -> { boolean matchesAnnotation = false ; if ( method1 . isBridge ( ) ) { return; } if ( isMethodDefinedOnObjectClass ( method1 ) ) { return; } if ( method1 . getDeclaringClass ( ) . equals ( Proxy .class ) ) { return; } if ( annotationType != null && AnnotationUtils . findAnnotation ( method1 , annotationType ) != null ) { matchesAnnotation = true ; } else if ( ! Modifier . isPublic ( method1 . getModifiers ( ) ) ) { return; } if ( requiresReply && void .class . equals ( method1 . getReturnType ( ) ) ) { return; } if ( methodName != null && ! methodName . equals ( method1 . getName ( ) ) ) { return; } if ( methodName == null && ObjectUtils . containsElement ( new String [] { STRING , STRING , STRING } , method1 . getName ( ) ) ) { return; } HandlerMethod handlerMethod1 ; try { method1 = org . springframework . util . ClassUtils . getMostSpecificMethod ( method1 , targetObject . getClass ( ) ) ; InvocableHandlerMethod invocableHandlerMethod = this . messageHandlerMethodFactory . createInvocableHandlerMethod ( targetObject , method1 ) ; handlerMethod1 = new HandlerMethod ( invocableHandlerMethod , this . canProcessMessageList ) ; checkSpelInvokerRequired ( targetClass , method1 , handlerMethod1 ) ; } catch ( IneligibleMethodException e ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + method1 + STRING + e . getMessage ( ) + STRING ) ; } return; } catch ( Exception e ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + method1 + STRING , e ) ; } return; } if ( AnnotationUtils . getAnnotation ( method1 , Default .class ) != null ) { Assert . state ( this . defaultHandlerMethod == null , ( ) STRING + targetObject ) ; this . defaultHandlerMethod = handlerMethod1 ; } Class < ? > targetParameterType = handlerMethod1 . getTargetParameterType ( ) ; if ( matchesAnnotation || annotationType == null ) { if ( handlerMethod1 . isMessageMethod ( ) ) { if ( candidateMessageMethods . containsKey ( targetParameterType ) ) { throw new IllegalArgumentException ( STRING + STRING + targetParameterType + STRING ) ; } candidateMessageMethods . put ( targetParameterType , handlerMethod1 ) ; } else { if ( candidateMethods . containsKey ( targetParameterType ) ) { String exceptionMessage = STRING ; if ( Void .class . equals ( targetParameterType ) ) { exceptionMessage += STRING ; } else { exceptionMessage += STRING + targetParameterType + STRING ; } throw new IllegalArgumentException ( exceptionMessage ) ; } candidateMethods . put ( targetParameterType , handlerMethod1 ) ; } } else { if ( handlerMethod1 . isMessageMethod ( ) ) { if ( fallbackMessageMethods . containsKey ( targetParameterType ) ) { ambiguousFallbackMessageGenericType . compareAndSet ( null , targetParameterType ) ; } fallbackMessageMethods . put ( targetParameterType , handlerMethod1 ) ; } else { if ( fallbackMethods . containsKey ( targetParameterType ) ) { ambiguousFallbackType . compareAndSet ( null , targetParameterType ) ; } fallbackMethods . put ( targetParameterType , handlerMethod1 ) ; } } } , org.springframework.integration.util.MethodFilter ) ; if ( java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) && java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) && java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) && java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) ) { void ( java.lang.Object , java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) ; } if ( ! java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) || ! java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) ) { java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) ; return java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> ; } if ( ( java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> . java.lang.Class<?> ( ) != null || java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> . java.lang.Class<?> ( ) != null ) && ServiceActivator .class . boolean ( java.lang.Class<> ) ) { java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> <> ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org . springframework . util . ClassUtils . getAllInterfacesForClass ( java.lang.Class<> ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { try { if ( STRING . boolean ( java.lang.Class<> . java.lang.String ( ) ) ) { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.Class<> . java.lang.reflect.Method ( STRING , Message .class ) ) ; if ( org.springframework.integration.util.Log . isDebugEnabled ( ) ) { org.springframework.integration.util.Log . debug ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { } } if ( java.util.List<java.lang.reflect.Method> . int ( ) == NUMBER ) { java.lang.reflect.Method java.lang.reflect.Method = org . springframework . util . ClassUtils . getMostSpecificMethod ( java.util.List<java.lang.reflect.Method> . java.lang.reflect.Method ( NUMBER ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; InvocableHandlerMethod org.springframework.integration.util.InvocableHandlerMethod = this . org.springframework.integration.util.DefaultMessageHandlerMethodFactory . createInvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = new org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( org.springframework.integration.util.InvocableHandlerMethod , this . boolean ) ; void ( java.lang.Class<> , java.lang.reflect.Method , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.String , java.util.Collections . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.Object .class , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) ; return java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> ; } } Assert . state ( ! java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) || ! java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( ) , STRING + this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; Assert . isNull ( java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> . java.lang.Class<?> ( ) , STRING + java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> + STRING + java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . java.util.Collection<org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( ) ) ; Assert . isNull ( java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> . java.lang.Class<?> ( ) , STRING + java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> + STRING + java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . java.util.Collection<org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ( java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) ; return java.util.Map<java.lang.String,java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.Object java.lang.Object , final java.lang.String java.lang.String , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> , java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> ) { if ( AopUtils . isAopProxy ( java.lang.Object ) ) { final java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> = new java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> <> ( ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> = new java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> <> ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( ( Advised ) java.lang.Object ) . getProxiedInterfaces ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { ReflectionUtils . doWithMethods ( java.lang.Class<> , method1 -> { if ( targetMethod . get ( ) != null ) { throw new IllegalStateException ( STRING + methodName + STRING + targetObject ) ; } else { targetMethod . set ( method1 ) ; targetClass . set ( clazz ) ; } } , method12 -> method12 . getName ( ) . equals ( methodName ) ) ; } java.lang.reflect.Method java.lang.reflect.Method = java.util.concurrent.atomic.AtomicReference<java.lang.reflect.Method> . java.lang.reflect.Method ( ) ; if ( java.lang.reflect.Method != null ) { java.lang.reflect.Method = org . springframework . util . ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; InvocableHandlerMethod org.springframework.integration.util.InvocableHandlerMethod = this . org.springframework.integration.util.DefaultMessageHandlerMethodFactory . createInvocableHandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = new org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( org.springframework.integration.util.InvocableHandlerMethod , this . boolean ) ; void ( java.util.concurrent.atomic.AtomicReference<java.lang.Class<?>> . java.lang.Class<?> ( ) , java.lang.reflect.Method , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . java.lang.Class<?> ( ) ; if ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . boolean ( ) ) { if ( java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + java.lang.Class<> + STRING ) ; } java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( java.lang.Class<> , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) ; } else { if ( java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( java.lang.Class<> ) ) { java.lang.String java.lang.String = STRING ; if ( java.lang.Void .class . boolean ( java.lang.Class<> ) ) { java.lang.String += STRING ; } else { java.lang.String += STRING + java.lang.Class<> + STRING ; } throw new java.lang.IllegalArgumentException ( java.lang.String ) ; } java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( java.lang.Class<> , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ) { java.lang.reflect.Method java.lang.reflect.Method = AopUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; UseSpelInvoker org.springframework.integration.util.UseSpelInvoker = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , UseSpelInvoker .class ) ; if ( org.springframework.integration.util.UseSpelInvoker == null ) { org.springframework.integration.util.UseSpelInvoker = AnnotationUtils . findAnnotation ( java.lang.Class<> , UseSpelInvoker .class ) ; } if ( org.springframework.integration.util.UseSpelInvoker != null ) { org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . boolean = true ; org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod . org.springframework.integration.util.UseSpelInvoker = org.springframework.integration.util.UseSpelInvoker ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! ( java.lang.String . boolean ( STRING ) && java.lang.String . boolean ( STRING ) ) ) { return java.lang.String ; } java.lang.Object java.lang.Object = this . org.springframework.integration.util.BeanExpressionResolver . evaluate ( java.lang.String , this . org.springframework.integration.util.BeanExpressionContext ) ; Assert . isInstanceOf ( java.lang.String .class , java.lang.Object , java.lang.String ) ; return ( java.lang.String ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( getBeanFactory ( ) != null && getBeanFactory ( ) instanceof ConfigurableBeanFactory ) { return ( ( ConfigurableBeanFactory ) getBeanFactory ( ) ) . resolveEmbeddedValue ( java.lang.String ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( AopUtils . isAopProxy ( java.lang.Object ) ) { java.lang.Class<?> = AopUtils . getTargetClass ( java.lang.Object ) ; if ( java.lang.Class<> == java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { try { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( ( Advised ) java.lang.Object ) . getProxiedInterfaces ( ) ; if ( java.lang.Class<?>[] != null && java.lang.Class<?>[] . int == NUMBER ) { java.lang.Class<?> = java.lang.Class<?>[] [ NUMBER ] ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.integration.util.Log . isDebugEnabled ( ) ) { org.springframework.integration.util.Log . debug ( STRING , java.lang.Exception ) ; } } } } else if ( org . springframework . util . ClassUtils . isCglibProxyClass ( java.lang.Class<> ) || java.lang.Class<> . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<? super > ( ) ; if ( ! java.lang.Object .class . boolean ( java.lang.Class<> ) ) { java.lang.Class<?> = java.lang.Class<> ; } } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) { if ( this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod != null ) { return this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ; } final java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper . java.lang.Class<?> ( ) ; org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod = this . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( java.lang.Class<> ) ; if ( org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod != null ) { return org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ; } if ( java.lang.Iterable .class . boolean ( java.lang.Class<> ) && this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . boolean ( java.util.Iterator .class ) ) { return this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( java.util.Iterator .class ) ; } else { return this . java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( java.lang.Void .class ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> < java.lang.Class<?> < ? > , org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod > java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> : this . java.util.List<java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod>> ) { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . java.util.Set<java.lang.Class<?>> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( ! CollectionUtils . isEmpty ( java.util.Set<java.lang.Class<?>> ) ) { java.lang.Class<?> = ClassUtils . findClosestMatch ( java.lang.Class<> , java.util.Set<java.lang.Class<?>> , true ) ; } if ( java.lang.Class<> != null ) { return java.util.Map<java.lang.Class<?>,org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod> . org.springframework.integration.util.MessagingMethodInvokerHelper.HandlerMethod ( java.lang.Class<> ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return java.lang.reflect.Method != null && ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Object .class ) || ReflectionUtils . isEqualsMethod ( java.lang.reflect.Method ) || ReflectionUtils . isHashCodeMethod ( java.lang.reflect.Method ) || ReflectionUtils . isToStringMethod ( java.lang.reflect.Method ) || AopUtils . isFinalizeMethod ( java.lang.reflect.Method ) || ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . java.lang.Class<?>[] ( ) . int == NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> void ( InvocableHandlerMethod org.springframework.integration.util.InvocableHandlerMethod , boolean boolean ) { this . org.springframework.integration.util.InvocableHandlerMethod = org.springframework.integration.util.InvocableHandlerMethod ; this . boolean = boolean ; this . java.lang.String = java.lang.String ( this . org.springframework.integration.util.InvocableHandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper ) throws java.lang.Exception { Message < ? > org.springframework.integration.util.Message<?> = org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper . org.springframework.integration.util.Message<?> ( ) ; if ( this . boolean ) { org.springframework.integration.util.Message<?> = new MutableMessage <> ( org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper . java.util.Collection<org.springframework.integration.util.Message<?>> ( ) , org.springframework.integration.util.MessagingMethodInvokerHelper.ParametersWrapper . java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; } return ( T ) this . org.springframework.integration.util.InvocableHandlerMethod . invoke ( org.springframework.integration.util.Message<> ) ; }  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.integration.util.InvocableHandlerMethod . toString ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.lang.annotation.Annotation [] [] java.lang.annotation.Annotation[][] = java.lang.reflect.Method . java.lang.annotation.Annotation[][] ( ) ; boolean boolean = false ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { if ( int != NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } MethodParameter org.springframework.integration.util.MethodParameter = new MethodParameter ( java.lang.reflect.Method , int ) ; TypeDescriptor org.springframework.integration.util.TypeDescriptor = new TypeDescriptor ( org.springframework.integration.util.MethodParameter ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.integration.util.TypeDescriptor . getObjectType ( ) ; java.lang.annotation.Annotation java.lang.annotation.Annotation = MessagingAnnotationUtils . findMessagePartAnnotation ( java.lang.annotation.Annotation[][] [ int ] , true ) ; if ( java.lang.annotation.Annotation != null ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( java.lang.Class<> . boolean ( Payload .class ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) ; } if ( ! StringUtils . hasText ( java.lang.String ) ) { this . void ( org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.MethodParameter ) ; } } if ( java.lang.Class<> . boolean ( Payloads .class ) ) { Assert . isTrue ( this . boolean , STRING ) ; Assert . isTrue ( java.util.Collection .class . boolean ( java.lang.Class<> ) , STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.String java.lang.String = ( ( Payloads ) java.lang.annotation.Annotation ) . value ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { this . void ( org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.MethodParameter ) ; } } else if ( java.lang.Class<> . boolean ( Headers .class ) ) { Assert . isTrue ( java.util.Map .class . boolean ( java.lang.Class<> ) , STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else if ( java.lang.Class<> . boolean ( Header .class ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.String ( java.lang.annotation.Annotation , org.springframework.integration.util.MethodParameter ) ) ; } } else if ( org.springframework.integration.util.TypeDescriptor . isAssignableTo ( org.springframework.integration.util.TypeDescriptor ) ) { this . boolean = true ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; this . void ( org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.MethodParameter ) ; } else if ( this . boolean && ( org.springframework.integration.util.TypeDescriptor . isAssignableTo ( org.springframework.integration.util.TypeDescriptor ) || org.springframework.integration.util.TypeDescriptor . isAssignableTo ( org.springframework.integration.util.TypeDescriptor ) ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; this . void ( org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.MethodParameter ) ; } else if ( java.util.Collection .class . boolean ( java.lang.Class<> ) || java.lang.Class<> . boolean ( ) ) { if ( this . boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } this . void ( org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.MethodParameter ) ; } else if ( java.util.Iterator .class . boolean ( java.lang.Class<> ) ) { if ( this . boolean ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Method . java.lang.reflect.Type[] ( ) [ int ] ; java.lang.reflect.Type java.lang.reflect.Type = null ; if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) [ NUMBER ] ; if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type ( ) ; } } if ( java.lang.reflect.Type != null && Message .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } this . void ( org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.MethodParameter ) ; } else if ( java.util.Map .class . boolean ( java.lang.Class<> ) ) { if ( java.util.Properties .class . boolean ( java.lang.Class<> ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING + STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } Assert . isTrue ( ! boolean , STRING + STRING ) ; boolean = true ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; this . void ( org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.MethodParameter ) ; } } if ( boolean ) { if ( this . java.lang.Class<> != null && java.util.Map .class . boolean ( this . java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( this . org.springframework.integration.util.TypeDescriptor == null ) { this . org.springframework.integration.util.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.Void .class ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.annotation.Annotation java.lang.annotation.Annotation , MethodParameter org.springframework.integration.util.MethodParameter ) { org.springframework.integration.util.MethodParameter . initParameterNameDiscovery ( org.springframework.integration.util.ParameterNameDiscoverer ) ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = STRING ; AnnotationAttributes org.springframework.integration.util.AnnotationAttributes = ( AnnotationAttributes ) AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ; java.lang.String java.lang.String = org.springframework.integration.util.AnnotationAttributes . getString ( AnnotationUtils . VALUE ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = org.springframework.integration.util.MethodParameter . getParameterName ( ) ; } else if ( java.lang.String . int ( '.' ) != - NUMBER ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING , NUMBER ) ; java.lang.String = java.lang.String[] [ NUMBER ] ; if ( StringUtils . hasText ( java.lang.String[] [ NUMBER ] ) ) { java.lang.String = STRING + java.lang.String[] [ NUMBER ] ; this . boolean = true ; } } else { java.lang.String = java.lang.String ; } Assert . notNull ( java.lang.String , STRING + STRING ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING ; java.lang.String java.lang.String = java.lang.String + java.lang.String ; if ( org.springframework.integration.util.AnnotationAttributes . getBoolean ( STRING ) && ! org.springframework.integration.util.MethodParameter . getParameterType ( ) . equals ( java.util.Optional .class ) ) { return STRING + java.lang.String + STRING + java.lang.String ; } else if ( ! StringUtils . hasLength ( java.lang.String ) ) { return java.lang.String + STRING ; } else { return java.lang.String + STRING + java.lang.String + STRING ; } }  <METHOD_END>
<METHOD_START> private void void ( TypeDescriptor org.springframework.integration.util.TypeDescriptor , MethodParameter org.springframework.integration.util.MethodParameter ) { if ( this . org.springframework.integration.util.TypeDescriptor != null ) { throw new org.springframework.integration.util.MessagingMethodInvokerHelper.IneligibleMethodException ( STRING + this . org.springframework.integration.util.TypeDescriptor + STRING + org.springframework.integration.util.TypeDescriptor + STRING ) ; } this . org.springframework.integration.util.TypeDescriptor = org.springframework.integration.util.TypeDescriptor ; if ( Message .class . boolean ( org.springframework.integration.util.TypeDescriptor . getObjectType ( ) ) ) { org.springframework.integration.util.MethodParameter . increaseNestingLevel ( ) ; this . java.lang.Class<?> = org.springframework.integration.util.MethodParameter . getNestedParameterType ( ) ; org.springframework.integration.util.MethodParameter . decreaseNestingLevel ( ) ; } else { this . java.lang.Class<?> = org.springframework.integration.util.TypeDescriptor . getObjectType ( ) ; } }  <METHOD_END>
<METHOD_START> void ( Message < ? > org.springframework.integration.util.Message<?> ) { this . org.springframework.integration.util.Message<?> = org.springframework.integration.util.Message<> ; this . java.lang.Object = org.springframework.integration.util.Message<> . getPayload ( ) ; this . java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.util.Message<> . getHeaders ( ) ; this . java.util.Collection<org.springframework.integration.util.Message<?>> = null ; }  <METHOD_END>
<METHOD_START> void ( java.util.Collection<org.springframework.integration.util.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.util.Message<?>> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.lang.Object = null ; this . java.util.Collection<org.springframework.integration.util.Message<?>> = java.util.Collection<org.springframework.integration.util.Message<?>> ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; this . org.springframework.integration.util.Message<?> = null ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = java.util.Map<,> . get ( java.lang.String ) ; if ( java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { Assert . state ( this . java.lang.Object != null , STRING ) ; return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.integration.util.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.util.Message<?>> ( ) { Assert . state ( this . java.util.Collection<org.springframework.integration.util.Message<?>> != null , STRING ) ; return this . java.util.Collection<org.springframework.integration.util.Message<?>> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.util.Message<?> < ? > org.springframework.integration.util.Message<?> ( ) { return this . org.springframework.integration.util.Message<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.Object != null ) { return this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } return this . java.util.Collection<org.springframework.integration.util.Message<?>> . getClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; if ( this . java.util.Collection<org.springframework.integration.util.Message<?>> != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.util.Collection<org.springframework.integration.util.Message<?>> ) . append ( STRING ) . append ( this . java.util.Map<java.lang.String,java.lang.Object> ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . org.springframework.integration.util.Message<> ) ; } return java.lang.StringBuilder . java.lang.StringBuilder ( '}' ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
