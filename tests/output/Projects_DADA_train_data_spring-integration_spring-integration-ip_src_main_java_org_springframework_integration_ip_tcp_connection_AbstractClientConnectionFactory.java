<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { super( java.lang.String , int ); }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.lang.Exception { this . checkActive ( ) ; return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.lang.Exception { if ( ! this . isSingleUse ( ) ) { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport != null ) { return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; } } return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.lang.InterruptedException { this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; try { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport != null && org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) { return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; } } finally { this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.lang.Exception { boolean boolean = this . isSingleUse ( ) ; if ( ! boolean ) { this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; } try { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; if ( ! boolean ) { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport != null ) { return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; } } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . getHost ( ) + STRING + this . getPort ( ) ) ; } org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; if ( ! boolean ) { this . void ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; } org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . publishConnectionOpenEvent ( ) ; return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; } catch ( java.lang.Exception java.lang.Exception ) { ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher = getApplicationEventPublisher ( ) ; if ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher != null ) { org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher . publishEvent ( new TcpConnectionFailedEvent ( this , java.lang.Exception ) ) ; } throw java.lang.Exception ; } finally { if ( ! boolean ) { this . java.util.concurrent.locks.ReadWriteLock . java.util.concurrent.locks.Lock ( ) . void ( ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.lang.Exception { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , java.net.Socket java.net.Socket ) { if ( this . boolean ) { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . enableManualListenerRegistration ( ) ; } else { TcpListener org.springframework.integration.ip.tcp.connection.TcpListener = this . getListener ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpListener != null ) { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . registerListener ( org.springframework.integration.ip.tcp.connection.TcpListener ) ; } } TcpSender org.springframework.integration.ip.tcp.connection.TcpSender = this . getSender ( ) ; if ( org.springframework.integration.ip.tcp.connection.TcpSender != null ) { org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . registerSender ( org.springframework.integration.ip.tcp.connection.TcpSender ) ; } org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setMapper ( this . getMapper ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setDeserializer ( this . getDeserializer ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . setSerializer ( this . getSerializer ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) { this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) { return this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; }  <METHOD_END>
<METHOD_START> public void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { if ( this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport == org.springframework.integration.ip.tcp.connection.TcpConnection ) { this . org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = null ; } org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; }  <METHOD_END>
