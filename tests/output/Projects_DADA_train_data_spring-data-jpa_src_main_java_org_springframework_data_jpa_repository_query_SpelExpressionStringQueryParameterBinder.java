<METHOD_START> public void ( JpaParameters org.springframework.data.jpa.repository.query.JpaParameters , java.lang.Object [] java.lang.Object[] , StringQuery org.springframework.data.jpa.repository.query.StringQuery , EvaluationContextProvider org.springframework.data.jpa.repository.query.EvaluationContextProvider , SpelExpressionParser org.springframework.data.jpa.repository.query.SpelExpressionParser ) { super( org.springframework.data.jpa.repository.query.JpaParameters , java.lang.Object[] , org.springframework.data.jpa.repository.query.StringQuery ); Assert . notNull ( org.springframework.data.jpa.repository.query.EvaluationContextProvider , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.SpelExpressionParser , STRING ) ; this . org.springframework.data.jpa.repository.query.EvaluationContextProvider = org.springframework.data.jpa.repository.query.EvaluationContextProvider ; this . org.springframework.data.jpa.repository.query.StringQuery = org.springframework.data.jpa.repository.query.StringQuery ; this . org.springframework.data.jpa.repository.query.SpelExpressionParser = org.springframework.data.jpa.repository.query.SpelExpressionParser ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends org.springframework.data.jpa.repository.query.Query > T T ( T T ) { return org.springframework.data.jpa.repository.query.Query ( super. bind ( T ) ) ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.data.jpa.repository.query.Query > T T ( T T ) { if ( boolean ( T ) && T . getParameters ( ) . isEmpty ( ) ) { return T ; } for ( ParameterBinding org.springframework.data.jpa.repository.query.ParameterBinding : org.springframework.data.jpa.repository.query.StringQuery . getParameterBindings ( ) ) { if ( org.springframework.data.jpa.repository.query.ParameterBinding . isExpression ( ) ) { Expression org.springframework.data.jpa.repository.query.Expression = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.ParameterBinding . getExpression ( ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.data.jpa.repository.query.Expression ) ; try { if ( org.springframework.data.jpa.repository.query.ParameterBinding . getName ( ) != null ) { T . setParameter ( org.springframework.data.jpa.repository.query.ParameterBinding . getName ( ) , org.springframework.data.jpa.repository.query.ParameterBinding . prepare ( java.lang.Object ) ) ; } else { T . setParameter ( org.springframework.data.jpa.repository.query.ParameterBinding . getPosition ( ) , org.springframework.data.jpa.repository.query.ParameterBinding . prepare ( java.lang.Object ) ) ; } } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } } } return T ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.data.jpa.repository.query.Query > boolean boolean ( T T ) { java.lang.String java.lang.String = T . java.lang.Class<? extends org.springframework.data.jpa.repository.query.Query> ( ) . java.lang.String ( ) ; return java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.Expression org.springframework.data.jpa.repository.query.Expression ( java.lang.String java.lang.String ) { return org.springframework.data.jpa.repository.query.SpelExpressionParser . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Expression org.springframework.data.jpa.repository.query.Expression ) { return org.springframework.data.jpa.repository.query.Expression . getValue ( org.springframework.data.jpa.repository.query.EvaluationContext ( ) , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.EvaluationContext org.springframework.data.jpa.repository.query.EvaluationContext ( ) { return org.springframework.data.jpa.repository.query.EvaluationContextProvider . getEvaluationContext ( getParameters ( ) , getValues ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( JpaParameter org.springframework.data.jpa.repository.query.JpaParameter ) { java.util.List<org.springframework.data.jpa.repository.query.ParameterBinding> < ParameterBinding > java.util.List<org.springframework.data.jpa.repository.query.ParameterBinding> = org.springframework.data.jpa.repository.query.StringQuery . getParameterBindings ( ) ; if ( java.util.List<org.springframework.data.jpa.repository.query.ParameterBinding> . isEmpty ( ) ) { return super. canBindParameter ( org.springframework.data.jpa.repository.query.JpaParameter ) ; } int int = NUMBER ; for ( ParameterBinding org.springframework.data.jpa.repository.query.ParameterBinding : java.util.List<org.springframework.data.jpa.repository.query.ParameterBinding> ) { if ( org.springframework.data.jpa.repository.query.ParameterBinding . isExpression ( ) ) { int ++ ; } } boolean boolean = java.util.List<org.springframework.data.jpa.repository.query.ParameterBinding> . size ( ) - int == NUMBER ; return ! boolean && super. canBindParameter ( org.springframework.data.jpa.repository.query.JpaParameter ) ; }  <METHOD_END>
