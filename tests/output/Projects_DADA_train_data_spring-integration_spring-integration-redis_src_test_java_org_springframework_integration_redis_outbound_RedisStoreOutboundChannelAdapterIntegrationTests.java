<METHOD_START> @ Before @ After public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.outbound.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; this . org.springframework.integration.redis.outbound.StringRedisTemplate . setConnectionFactory ( org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; this . org.springframework.integration.redis.outbound.StringRedisTemplate . afterPropertiesSet ( ) ; this . org.springframework.integration.redis.outbound.StringRedisTemplate . delete ( STRING ) ; this . org.springframework.integration.redis.outbound.StringRedisTemplate . delete ( STRING ) ; this . org.springframework.integration.redis.outbound.StringRedisTemplate . delete ( STRING ) ; this . org.springframework.integration.redis.outbound.StringRedisTemplate . delete ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisList < java.lang.String > org.springframework.integration.redis.outbound.RedisList<java.lang.String> = new DefaultRedisList < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setHeader ( RedisHeaders . KEY , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { org.springframework.integration.redis.outbound.StringRedisTemplate . delete ( STRING ) ; RedisList < java.lang.String > org.springframework.integration.redis.outbound.RedisList<java.lang.String> = new DefaultRedisList < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisList < java.lang.String > org.springframework.integration.redis.outbound.RedisList<java.lang.String> = new DefaultRedisList < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisList<java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . KEY , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . score ( STRING ) ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . score ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . KEY , STRING ) . setHeader ( RedisHeaders . ZSET_INCREMENT_SCORE , false ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . score ( STRING ) ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . score ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . KEY , STRING ) . setHeader ( RedisHeaders . ZSET_SCORE , NUMBER ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . score ( STRING ) ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . score ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . KEY , STRING ) . setHeader ( RedisHeaders . ZSET_INCREMENT_SCORE , false ) . setHeader ( RedisHeaders . ZSET_SCORE , NUMBER ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . score ( STRING ) ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . fromMessage ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) . setHeader ( RedisHeaders . ZSET_SCORE , NUMBER ) . build ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . score ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisZSet < java.lang.String > org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> = new DefaultRedisZSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; Message < java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.Integer>> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Integer> ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.Integer>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = this . org.springframework.integration.redis.outbound.BeanFactory . getBean ( STRING , RedisStoreWritingMessageHandler .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler , STRING ) ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.Integer>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( MessageBuilder . fromMessage ( org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.Integer>> ) . setHeader ( RedisHeaders . ZSET_INCREMENT_SCORE , false ) . build ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisZSet<java.lang.String> . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisMap < java.lang.String , java.lang.String > org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.lang.String> = new DefaultRedisMap < java.lang.String , java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.lang.String> . size ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.String>> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.String> ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.String>> ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; RedisStoreWritingMessageHandler org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler = this . org.springframework.integration.redis.outbound.BeanFactory . getBean ( STRING , RedisStoreWritingMessageHandler .class ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler , STRING , LiteralExpression .class ) . getExpressionString ( ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.redis.outbound.RedisStoreWritingMessageHandler , STRING , SpelExpression .class ) . getExpressionString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) @ RedisAvailable public void void ( ) { RedisMap < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> = new DefaultRedisMap < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . size ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.String>> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.String> ) . setHeader ( RedisHeaders . KEY , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) @ RedisAvailable public void void ( ) { RedisTemplate < java.lang.String , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> = new RedisTemplate < java.lang.String , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > > ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . setHashKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . setConnectionFactory ( getConnectionFactoryForTest ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . afterPropertiesSet ( ) ; RedisMap < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> = new DefaultRedisMap < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( STRING , org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . size ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.String>> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.String> ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.String>> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisTemplate < java.lang.String , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> = new RedisTemplate < java.lang.String , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > > ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . setHashKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . setConnectionFactory ( getConnectionFactoryForTest ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> . afterPropertiesSet ( ) ; RedisMap < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> = new DefaultRedisMap < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > ( STRING , org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . size ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.String>> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.String> ) . setHeader ( RedisHeaders . KEY , STRING ) . setHeader ( RedisHeaders . MAP_KEY , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Map<java.lang.String,java.lang.String>> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . get ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisMap < java.lang.String , java.lang.String > org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.lang.String> = new DefaultRedisMap < java.lang.String , java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.lang.String> . size ( ) ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . KEY , STRING ) . setHeader ( RedisHeaders . MAP_KEY , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; java.lang.String java.lang.String = org.springframework.integration.redis.outbound.RedisMap<java.lang.String,java.lang.String> . get ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisSet < java.lang.String > org.springframework.integration.redis.outbound.RedisSet<java.lang.String> = new DefaultRedisSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisSet<java.lang.String> . size ( ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; Message < java.util.Set<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.Set<java.lang.String>> = MessageBuilder . withPayload ( java.util.Set<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Set<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisSet<java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisSet < java.lang.String > org.springframework.integration.redis.outbound.RedisSet<java.lang.String> = new DefaultRedisSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisSet<java.lang.String> . size ( ) ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . KEY , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisSet<java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisSet < java.lang.String > org.springframework.integration.redis.outbound.RedisSet<java.lang.String> = new DefaultRedisSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisSet<java.lang.String> . size ( ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; Message < java.util.Set<java.lang.String> < java.lang.String > > org.springframework.integration.redis.outbound.Message<java.util.Set<java.lang.String>> = MessageBuilder . withPayload ( java.util.Set<java.lang.String> ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Set<java.lang.String>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisSet<java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisSet < java.lang.String > org.springframework.integration.redis.outbound.RedisSet<java.lang.String> = new DefaultRedisSet < java.lang.String > ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisSet<java.lang.String> . size ( ) ) ; java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisSet<java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisProperties org.springframework.integration.redis.outbound.RedisProperties = new RedisProperties ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisProperties . size ( ) ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; Message < java.util.Properties > org.springframework.integration.redis.outbound.Message<java.util.Properties> = MessageBuilder . withPayload ( java.util.Properties ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.util.Properties> ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisProperties . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisProperties . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisProperties . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { RedisProperties org.springframework.integration.redis.outbound.RedisProperties = new RedisProperties ( STRING , this . org.springframework.integration.redis.outbound.StringRedisTemplate ) ; assertEquals ( NUMBER , org.springframework.integration.redis.outbound.RedisProperties . size ( ) ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( RedisHeaders . KEY , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; assertEquals ( STRING , org.springframework.integration.redis.outbound.RedisProperties . get ( STRING ) ) ; }  <METHOD_END>
