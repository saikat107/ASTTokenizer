<METHOD_START> public void ( int int , java.lang.String java.lang.String ) { super( int ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { BeanResolver org.springframework.expression.spel.ast.BeanResolver = org.springframework.expression.spel.ast.ExpressionState . getEvaluationContext ( ) . getBeanResolver ( ) ; if ( org.springframework.expression.spel.ast.BeanResolver == null ) { throw new SpelEvaluationException ( getStartPosition ( ) , SpelMessage . NO_BEAN_RESOLVER_REGISTERED , this . java.lang.String ) ; } try { return new TypedValue ( org.springframework.expression.spel.ast.BeanResolver . resolve ( org.springframework.expression.spel.ast.ExpressionState . getEvaluationContext ( ) , this . java.lang.String ) ) ; } catch ( AccessException org.springframework.expression.spel.ast.AccessException ) { throw new SpelEvaluationException ( getStartPosition ( ) , org.springframework.expression.spel.ast.AccessException , SpelMessage . EXCEPTION_DURING_BEAN_RESOLUTION , this . java.lang.String , org.springframework.expression.spel.ast.AccessException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( ! this . java.lang.String . boolean ( java.lang.String ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } if ( ! this . java.lang.String . boolean ( STRING ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.String ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.lang.String ) . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
