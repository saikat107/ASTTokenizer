<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . PERSISTENT_PARTITION , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . REPLICATE , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . PERSISTENT_REPLICATE , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertFalse ( org.springframework.data.gemfire.Region . getAttributes ( ) . getCloningEnabled ( ) ) ; assertTrue ( org.springframework.data.gemfire.Region . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( DataPolicy . PERSISTENT_PARTITION , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertFalse ( org.springframework.data.gemfire.Region . getAttributes ( ) . isDiskSynchronous ( ) ) ; assertTrue ( org.springframework.data.gemfire.Region . getAttributes ( ) . getIgnoreJTA ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( new java.lang.Float ( NUMBER ) , new java.lang.Float ( org.springframework.data.gemfire.Region . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertEquals ( java.lang.Long .class , org.springframework.data.gemfire.Region . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.Region . getAttributes ( ) . getValueConstraint ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_HEAP , org.springframework.data.gemfire.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAlgorithm ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region . getAttributes ( ) . getPartitionAttributes ( ) . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region . getAttributes ( ) . getPartitionAttributes ( ) . getTotalNumBuckets ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) ) ; assertTrue ( org.springframework.data.gemfire.Region . getAttributes ( ) . getCloningEnabled ( ) ) ; assertFalse ( org.springframework.data.gemfire.Region . getAttributes ( ) . getConcurrencyChecksEnabled ( ) ) ; assertEquals ( DataPolicy . PARTITION , org.springframework.data.gemfire.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertTrue ( org.springframework.data.gemfire.Region . getAttributes ( ) . isDiskSynchronous ( ) ) ; assertFalse ( org.springframework.data.gemfire.Region . getAttributes ( ) . getIgnoreJTA ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region . getAttributes ( ) . getInitialCapacity ( ) ) ; assertEquals ( new java.lang.Float ( NUMBER ) , new java.lang.Float ( org.springframework.data.gemfire.Region . getAttributes ( ) . getLoadFactor ( ) ) ) ; assertEquals ( java.lang.String .class , org.springframework.data.gemfire.Region . getAttributes ( ) . getKeyConstraint ( ) ) ; assertEquals ( java.lang.Object .class , org.springframework.data.gemfire.Region . getAttributes ( ) . getValueConstraint ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . LOCAL_DESTROY , org.springframework.data.gemfire.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region . getAttributes ( ) . getEvictionAttributes ( ) . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_ENTRY , org.springframework.data.gemfire.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAlgorithm ( ) ) ; assertNotNull ( org.springframework.data.gemfire.Region . getAttributes ( ) . getPartitionAttributes ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region . getAttributes ( ) . getPartitionAttributes ( ) . getRedundantCopies ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.Region . getAttributes ( ) . getPartitionAttributes ( ) . getTotalNumBuckets ( ) ) ; }  <METHOD_END>
