<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.amqp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpOutboundGatewayParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING ) ; assertFalse ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = TestUtils . getPropertyValue ( java.lang.Object , STRING , AmqpOutboundEndpoint .class ) ; assertEquals ( STRING , org.springframework.integration.amqp.config.AmqpOutboundEndpoint . getComponentType ( ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , java.lang.Boolean .class ) ) ; void ( org.springframework.integration.amqp.config.ConfigurableApplicationContext , org.springframework.integration.amqp.config.AmqpOutboundEndpoint ) ; AsyncAmqpOutboundGateway org.springframework.integration.amqp.config.AsyncAmqpOutboundGateway = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , AsyncAmqpOutboundGateway .class ) ; assertEquals ( STRING , org.springframework.integration.amqp.config.AsyncAmqpOutboundGateway . getComponentType ( ) ) ; void ( org.springframework.integration.amqp.config.ConfigurableApplicationContext , org.springframework.integration.amqp.config.AsyncAmqpOutboundGateway ) ; assertSame ( org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AsyncAmqpOutboundGateway , STRING ) ) ; org.springframework.integration.amqp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableApplicationContext org.springframework.integration.amqp.config.ConfigurableApplicationContext , Orderable org.springframework.integration.amqp.config.Orderable ) { assertEquals ( NUMBER , org.springframework.integration.amqp.config.Orderable . getOrder ( ) ) ; assertEquals ( org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.Orderable , STRING ) ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; assertSame ( org.springframework.integration.amqp.config.MessageChannel , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.Orderable , STRING ) ) ; java.lang.Long java.lang.Long = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.Orderable , STRING , java.lang.Long .class ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.Orderable , STRING , java.lang.Boolean .class ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.Orderable , STRING , org . springframework . org.springframework.expression . org.springframework.expression .class ) . getExpressionString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.amqp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpOutboundGatewayParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = TestUtils . getPropertyValue ( java.lang.Object , STRING , AmqpOutboundEndpoint .class ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , java.lang.Boolean .class ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , java.lang.Boolean .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , java.lang.Boolean .class ) ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( AmqpOutboundEndpoint .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , RabbitTemplate .class ) ; org.springframework.integration.amqp.config.RabbitTemplate = Mockito . spy ( org.springframework.integration.amqp.config.RabbitTemplate ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; org . springframework . amqp . core . Message amqpRequestMessage = ( org . springframework . amqp . core . Message ) args [ NUMBER ] ; MessageProperties properties = amqpRequestMessage . getMessageProperties ( ) ; assertEquals ( STRING , properties . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( shouldBePersistent . get ( ) ? MessageDeliveryMode . PERSISTENT : MessageDeliveryMode . NON_PERSISTENT , properties . getDeliveryMode ( ) ) ; MessageProperties amqpProperties = new MessageProperties ( ) ; amqpProperties . setAppId ( STRING ) ; amqpProperties . setHeader ( STRING , STRING ) ; amqpProperties . setHeader ( STRING , STRING ) ; return new org . springframework . amqp . core . Message ( STRING . getBytes ( ) , amqpProperties ) ; } ) . when ( org.springframework.integration.amqp.config.RabbitTemplate ) . sendAndReceive ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.integration.amqp.config.AmqpOutboundEndpoint , org.springframework.integration.amqp.config.RabbitTemplate ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.amqp.config.MessageChannel . send ( org.springframework.integration.amqp.config.Message<> ) ; Mockito . verify ( org.springframework.integration.amqp.config.RabbitTemplate , Mockito . times ( NUMBER ) ) . sendAndReceive ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; QueueChannel org.springframework.integration.amqp.config.QueueChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . DELIVERY_MODE ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . CONTENT_TYPE ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . APP_ID ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; org.springframework.integration.amqp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . setHeader ( AmqpHeaders . DELIVERY_MODE , MessageDeliveryMode . PERSISTENT ) . build ( ) ; org.springframework.integration.amqp.config.MessageChannel . send ( org.springframework.integration.amqp.config.Message<> ) ; org.springframework.integration.amqp.config.Message<?> = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.amqp.config.Message<> ) ; org.springframework.integration.amqp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.amqp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpOutboundGatewayParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = TestUtils . getPropertyValue ( java.lang.Object , STRING , AmqpOutboundEndpoint .class ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , java.lang.Boolean .class ) ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( AmqpOutboundEndpoint .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , RabbitTemplate .class ) ; org.springframework.integration.amqp.config.RabbitTemplate = Mockito . spy ( org.springframework.integration.amqp.config.RabbitTemplate ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; org . springframework . amqp . core . Message amqpRequestMessage = ( org . springframework . amqp . core . Message ) args [ NUMBER ] ; MessageProperties properties = amqpRequestMessage . getMessageProperties ( ) ; assertEquals ( STRING , properties . getHeaders ( ) . get ( STRING ) ) ; MessageProperties amqpProperties = new MessageProperties ( ) ; amqpProperties . setAppId ( STRING ) ; amqpProperties . setHeader ( STRING , STRING ) ; amqpProperties . setHeader ( STRING , STRING ) ; assertEquals ( MessageDeliveryMode . PERSISTENT , properties . getDeliveryMode ( ) ) ; amqpProperties . setReceivedDeliveryMode ( properties . getDeliveryMode ( ) ) ; return new org . springframework . amqp . core . Message ( STRING . getBytes ( ) , amqpProperties ) ; } ) . when ( org.springframework.integration.amqp.config.RabbitTemplate ) . sendAndReceive ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.integration.amqp.config.AmqpOutboundEndpoint , org.springframework.integration.amqp.config.RabbitTemplate ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.amqp.config.MessageChannel . send ( org.springframework.integration.amqp.config.Message<> ) ; Mockito . verify ( org.springframework.integration.amqp.config.RabbitTemplate , Mockito . times ( NUMBER ) ) . sendAndReceive ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; QueueChannel org.springframework.integration.amqp.config.QueueChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . RECEIVED_DELIVERY_MODE ) ) ; assertNotNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . CONTENT_TYPE ) ) ; assertNotNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . APP_ID ) ) ; org.springframework.integration.amqp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.amqp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpOutboundGatewayParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = TestUtils . getPropertyValue ( java.lang.Object , STRING , AmqpOutboundEndpoint .class ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( AmqpOutboundEndpoint .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , RabbitTemplate .class ) ; org.springframework.integration.amqp.config.RabbitTemplate = Mockito . spy ( org.springframework.integration.amqp.config.RabbitTemplate ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; org . springframework . amqp . core . Message amqpRequestMessage = ( org . springframework . amqp . core . Message ) args [ NUMBER ] ; MessageProperties properties = amqpRequestMessage . getMessageProperties ( ) ; assertNull ( properties . getHeaders ( ) . get ( STRING ) ) ; MessageProperties amqpProperties = new MessageProperties ( ) ; amqpProperties . setAppId ( STRING ) ; amqpProperties . setHeader ( STRING , STRING ) ; amqpProperties . setHeader ( STRING , STRING ) ; return new org . springframework . amqp . core . Message ( STRING . getBytes ( ) , amqpProperties ) ; } ) . when ( org.springframework.integration.amqp.config.RabbitTemplate ) . sendAndReceive ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.integration.amqp.config.AmqpOutboundEndpoint , org.springframework.integration.amqp.config.RabbitTemplate ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.amqp.config.MessageChannel . send ( org.springframework.integration.amqp.config.Message<> ) ; Mockito . verify ( org.springframework.integration.amqp.config.RabbitTemplate , Mockito . times ( NUMBER ) ) . sendAndReceive ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; QueueChannel org.springframework.integration.amqp.config.QueueChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . DELIVERY_MODE ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . CONTENT_TYPE ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . APP_ID ) ) ; assertEquals ( NUMBER , int ) ; org.springframework.integration.amqp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.amqp.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpOutboundGatewayParserTests> ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.List .class ) ; AmqpOutboundEndpoint org.springframework.integration.amqp.config.AmqpOutboundEndpoint = ( AmqpOutboundEndpoint ) java.util.List<> . get ( NUMBER ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( AmqpOutboundEndpoint .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpOutboundEndpoint , STRING , RabbitTemplate .class ) ; org.springframework.integration.amqp.config.RabbitTemplate = Mockito . spy ( org.springframework.integration.amqp.config.RabbitTemplate ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; org . springframework . amqp . core . Message amqpRequestMessage = ( org . springframework . amqp . core . Message ) args [ NUMBER ] ; MessageProperties properties = amqpRequestMessage . getMessageProperties ( ) ; assertNull ( properties . getHeaders ( ) . get ( STRING ) ) ; MessageProperties amqpProperties = new MessageProperties ( ) ; amqpProperties . setAppId ( STRING ) ; amqpProperties . setHeader ( STRING , STRING ) ; amqpProperties . setHeader ( STRING , STRING ) ; return new org . springframework . amqp . core . Message ( STRING . getBytes ( ) , amqpProperties ) ; } ) . when ( org.springframework.integration.amqp.config.RabbitTemplate ) . sendAndReceive ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.integration.amqp.config.AmqpOutboundEndpoint , org.springframework.integration.amqp.config.RabbitTemplate ) ; MessageChannel org.springframework.integration.amqp.config.MessageChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.amqp.config.MessageChannel . send ( org.springframework.integration.amqp.config.Message<> ) ; Mockito . verify ( org.springframework.integration.amqp.config.RabbitTemplate , Mockito . times ( NUMBER ) ) . sendAndReceive ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp .class ) , isNull ( ) ) ; QueueChannel org.springframework.integration.amqp.config.QueueChannel = org.springframework.integration.amqp.config.ConfigurableApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.amqp.config.Message<?> = org.springframework.integration.amqp.config.QueueChannel . receive ( NUMBER ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.amqp.config.Message<> . getPayload ( ) ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . DELIVERY_MODE ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . CONTENT_TYPE ) ) ; assertNull ( org.springframework.integration.amqp.config.Message<> . getHeaders ( ) . get ( AmqpHeaders . APP_ID ) ) ; org.springframework.integration.amqp.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpOutboundGatewayParserTests> ( ) ) . close ( ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.amqp.config.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.amqp.config.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.amqp.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.amqp.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.amqp.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
