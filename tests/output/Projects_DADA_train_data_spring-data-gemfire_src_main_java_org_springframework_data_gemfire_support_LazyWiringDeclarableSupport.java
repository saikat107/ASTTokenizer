<METHOD_START> public void ( ) { SpringContextBootstrappingInitializer . register ( this ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { Assert . state ( boolean ( ) , java.lang.String . java.lang.String ( STRING , java.lang.Class<? extends org.springframework.data.gemfire.support.LazyWiringDeclarableSupport> ( ) . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { Assert . state ( boolean ( ) , java.lang.String . java.lang.String ( STRING , java.lang.Class<? extends org.springframework.data.gemfire.support.LazyWiringDeclarableSupport> ( ) . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return ! boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( java.util.Properties java.util.Properties ) { void ( java.util.Properties ) ; try { void ( locateBeanFactory ( ) , java.util.Properties ( ) ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> synchronized void void ( BeanFactory org.springframework.data.gemfire.support.BeanFactory , java.util.Properties java.util.Properties ) { this . boolean = ( boolean ( ) || configureThis ( org.springframework.data.gemfire.support.BeanFactory , java.util.Properties . java.lang.String ( TEMPLATE_BEAN_NAME_PROPERTY ) ) ) ; void ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Properties java.util.Properties ) {	}  <METHOD_END>
<METHOD_START> protected java.util.Properties java.util.Properties ( ) { java.util.Properties java.util.Properties = java.util.concurrent.atomic.AtomicReference<java.util.Properties> . java.util.Properties ( ) ; return ( java.util.Properties != null ? java.util.Properties : new java.util.Properties ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Properties java.util.Properties ) { java.util.concurrent.atomic.AtomicReference<java.util.Properties> . void ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public final void void ( ContextRefreshedEvent org.springframework.data.gemfire.support.ContextRefreshedEvent ) { ApplicationContext org.springframework.data.gemfire.support.ApplicationContext = org.springframework.data.gemfire.support.ContextRefreshedEvent . getApplicationContext ( ) ; Assert . isTrue ( org.springframework.data.gemfire.support.ApplicationContext instanceof ConfigurableApplicationContext , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.support.ApplicationContext ) ) ; ConfigurableListableBeanFactory org.springframework.data.gemfire.support.ConfigurableListableBeanFactory = ( ( ConfigurableApplicationContext ) org.springframework.data.gemfire.support.ApplicationContext ) . getBeanFactory ( ) ; void ( org.springframework.data.gemfire.support.ConfigurableListableBeanFactory , java.util.Properties ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { SpringContextBootstrappingInitializer . unregister ( this ) ; void ( null ) ; this . boolean = false ; }  <METHOD_END>
