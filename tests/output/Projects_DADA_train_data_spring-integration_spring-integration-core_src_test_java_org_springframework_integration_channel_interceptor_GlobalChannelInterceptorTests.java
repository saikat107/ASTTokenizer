<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.integration.channel.interceptor.ChannelInterceptorAware> < java.lang.String , ChannelInterceptorAware > java.util.Map<java.lang.String,org.springframework.integration.channel.interceptor.ChannelInterceptorAware> = org.springframework.integration.channel.interceptor.ApplicationContext . getBeansOfType ( ChannelInterceptorAware .class ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,org.springframework.integration.channel.interceptor.ChannelInterceptorAware> . keySet ( ) ) { ChannelInterceptorAware org.springframework.integration.channel.interceptor.ChannelInterceptorAware = java.util.Map<java.lang.String,org.springframework.integration.channel.interceptor.ChannelInterceptorAware> . get ( java.lang.String ) ; if ( java.lang.String . boolean ( STRING ) ) { continue; } ChannelInterceptor [] org.springframework.integration.channel.interceptor.ChannelInterceptor[] = org.springframework.integration.channel.interceptor.ChannelInterceptorAware . getChannelInterceptors ( ) . toArray ( new ChannelInterceptor [ org.springframework.integration.channel.interceptor.ChannelInterceptorAware . getChannelInterceptors ( ) . size ( ) ] ) ; if ( java.lang.String . boolean ( STRING ) ) { Assert . assertTrue ( interceptors . length == NUMBER ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { Assert . assertTrue ( interceptors . length == NUMBER ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { Assert . assertTrue ( interceptors . length == NUMBER ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { Assert . assertTrue ( interceptors . length == NUMBER ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { Assert . assertTrue ( interceptors . length == NUMBER ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptor[] [ NUMBER ] . toString ( ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { Assert . assertTrue ( interceptors . length == NUMBER ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> = this . org.springframework.integration.channel.interceptor.ChannelInterceptorAware . getChannelInterceptors ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( ChannelInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptor : java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> ) { java.util.List<java.lang.String> . boolean ( org.springframework.integration.channel.interceptor.ChannelInterceptor . toString ( ) ) ; } Assert . assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; Assert . assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean ) {		}  <METHOD_END>
<METHOD_START> public boolean boolean ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return false ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.integration.channel.interceptor.MethodInvocation ) throws java.lang.Throwable { return org.springframework.integration.channel.interceptor.MethodInvocation . proceed ( ) ; }  <METHOD_END>
