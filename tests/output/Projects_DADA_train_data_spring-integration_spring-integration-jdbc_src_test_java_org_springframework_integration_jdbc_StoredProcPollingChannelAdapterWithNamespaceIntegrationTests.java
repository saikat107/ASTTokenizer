<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.integration.jdbc.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.jdbc.Message<?>> = new java.util.ArrayList<org.springframework.integration.jdbc.Message<?>> < Message < ? > > ( ) ; java.util.List<org.springframework.integration.jdbc.Message<?>> . add ( org.springframework.integration.jdbc.StoredProcPollingChannelAdapterWithNamespaceIntegrationTests.Consumer . org.springframework.integration.jdbc.Message<?> ( NUMBER ) ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = java.util.List<org.springframework.integration.jdbc.Message<?>> . get ( NUMBER ) ; org.springframework.integration.jdbc.AbstractApplicationContext . stop ( ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> . getPayload ( ) instanceof java.util.Collection<?> < ? > ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.integration.jdbc.Message<> . getPayload ( ) ; assertThat ( java.util.List<java.lang.Integer> , contains ( NUMBER , NUMBER , NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) java.lang.InterruptedException { if ( java.util.concurrent.atomic.AtomicInteger . int ( ) > NUMBER ) { return null ; } return java.lang.Integer . java.lang.Integer ( java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator public void void ( Message < ? > org.springframework.integration.jdbc.Message<?> ) { java.util.concurrent.BlockingQueue<org.springframework.integration.jdbc.Message<?>> . add ( org.springframework.integration.jdbc.Message<> ) ; }  <METHOD_END>
<METHOD_START> org.springframework.integration.jdbc.Message<?> < ? > org.springframework.integration.jdbc.Message<?> ( long long ) throws java.lang.InterruptedException { return java.util.concurrent.BlockingQueue<org.springframework.integration.jdbc.Message<?>> . poll ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
