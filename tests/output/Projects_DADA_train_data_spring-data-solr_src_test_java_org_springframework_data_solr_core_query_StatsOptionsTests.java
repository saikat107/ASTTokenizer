<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new StatsOptions ( ) . addField ( ( Field ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new StatsOptions ( ) . addField ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new StatsOptions ( ) . addFacet ( ( Field ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new StatsOptions ( ) . addFacet ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.query.StatsOptions = new StatsOptions ( ) ; StatsOptions org.springframework.data.solr.core.query.StatsOptions = org.springframework.data.solr.core.query.StatsOptions . addField ( STRING ) . addSelectiveFacet ( STRING ) . addField ( STRING ) . setCalcDistinct ( true ) . addFacet ( STRING ) ; Assert . assertArrayEquals ( org.springframework.data.solr.core.query.StatsOptions . getFacets ( ) . toArray ( ) , org.springframework.data.solr.core.query.StatsOptions . getFacets ( ) . toArray ( ) ) ; Assert . assertArrayEquals ( org.springframework.data.solr.core.query.StatsOptions . getFields ( ) . toArray ( ) , org.springframework.data.solr.core.query.StatsOptions . getFields ( ) . toArray ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.query.StatsOptions . getSelectiveFacets ( ) , org.springframework.data.solr.core.query.StatsOptions . getSelectiveFacets ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.StatsOptions . isCalcDistinct ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.query.StatsOptions = new StatsOptions ( ) . addField ( STRING ) . addSelectiveFacet ( STRING ) . addField ( STRING ) . addSelectiveFacet ( STRING ) . addSelectiveFacet ( STRING ) . addSelectiveFacet ( STRING ) ; java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> < Field , java.util.Collection<org.springframework.data.solr.core.query.Field> < Field > > java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> = org.springframework.data.solr.core.query.StatsOptions . getSelectiveFacets ( ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> . size ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> . get ( new SimpleField ( STRING ) ) . size ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> . get ( new SimpleField ( STRING ) ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.query.StatsOptions = new StatsOptions ( ) . setCalcDistinct ( true ) . addField ( STRING ) . addSelectiveFacet ( STRING ) . setSelectiveCalcDistinct ( true ) . addField ( STRING ) . addSelectiveFacet ( STRING ) . addSelectiveFacet ( STRING ) . addSelectiveFacet ( STRING ) ; java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> < Field , java.util.Collection<org.springframework.data.solr.core.query.Field> < Field > > java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> = org.springframework.data.solr.core.query.StatsOptions . getSelectiveFacets ( ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> . size ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> . get ( new SimpleField ( STRING ) ) . size ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.query.Field,java.util.Collection<org.springframework.data.solr.core.query.Field>> . get ( new SimpleField ( STRING ) ) . size ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.StatsOptions . isCalcDistinct ( ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.query.StatsOptions . isSelectiveCalcDistincts ( new SimpleField ( STRING ) ) ) ; Assert . assertNull ( org.springframework.data.solr.core.query.StatsOptions . isSelectiveCalcDistincts ( new SimpleField ( STRING ) ) ) ; }  <METHOD_END>
