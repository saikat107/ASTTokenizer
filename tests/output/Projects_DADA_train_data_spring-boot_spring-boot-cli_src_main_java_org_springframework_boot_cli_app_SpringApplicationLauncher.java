<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] , java.lang.String [] java.lang.String[] ) throws java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.ClassLoader . java.lang.Class<?> ( java.lang.String ( ) ) ; java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.Object [] .class ) ; java.lang.Object java.lang.Object = java.lang.reflect.Constructor<> . newInstance ( ( java.lang.Object ) java.lang.Object[] ) ; java.lang.Class<> . java.lang.reflect.Method ( STRING , java.util.Map .class ) . java.lang.Object ( java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ; return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , ( java.lang.Object ) java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( STRING ) ; if ( java.lang.String == null ) { java.lang.String = java.lang.String ( STRING ) ; } if ( java.lang.String == null ) { java.lang.String = java.lang.String ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.System . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
