<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.Object java.lang.Object , java.lang.String ... java.lang.String[] ) { java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] = BeanUtils . getPropertyDescriptors ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; java.util.Set<java.lang.String> . boolean ( STRING ) ; final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; final java.lang.Object [] java.lang.Object[] = new java.lang.Object [ NUMBER ] ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { java.lang.String java.lang.String = java.beans.PropertyDescriptor . java.lang.String ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) ; if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) && java.lang.reflect.Method != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.String ) ) . java.lang.StringBuilder ( STRING ) ; java.lang.Object java.lang.Object ; try { java.lang.Object = java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException | java.lang.IllegalAccessException | java.lang.IllegalArgumentException java.lang.Exception ) { if ( org.springframework.integration.json.Log . isDebugEnabled ( ) ) { org.springframework.integration.json.Log . debug ( STRING + java.lang.String , java.lang.Exception ) ; } java.lang.Object = java.lang.Exception . java.lang.String ( ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.Object ) ) . java.lang.StringBuilder ( STRING ) ; } } java.lang.StringBuilder . void ( java.lang.StringBuilder . int ( ) - NUMBER ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( java.lang.StringBuilder . int ( ) == NUMBER ) { return null ; } else { return java.lang.StringBuilder . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Number || java.lang.Object instanceof java.lang.Boolean ) { return java.lang.Object . java.lang.String ( ) ; } else { return STRING + java.lang.Object . java.lang.String ( ) + STRING ; } }  <METHOD_END>
