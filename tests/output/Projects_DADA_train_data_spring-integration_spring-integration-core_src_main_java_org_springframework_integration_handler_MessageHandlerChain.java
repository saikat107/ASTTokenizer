<METHOD_START> public void void ( java.util.List<org.springframework.integration.handler.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.handler.MessageHandler> ) { this . java.util.List<org.springframework.integration.handler.MessageHandler> = java.util.List<org.springframework.integration.handler.MessageHandler> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.integration.handler.MessageHandler> < MessageHandler > java.util.List<org.springframework.integration.handler.MessageHandler> ( ) { return java.util.Collections . java.util.List<org.springframework.integration.handler.MessageHandler> ( this . java.util.List<org.springframework.integration.handler.MessageHandler> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; synchronized ( this . java.lang.Object ) { if ( ! this . boolean ) { Assert . notEmpty ( this . java.util.List<org.springframework.integration.handler.MessageHandler> , STRING ) ; this . void ( ) ; this . boolean = true ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.handler.Message<?> ) throws java.lang.Exception { if ( ! this . boolean ) { this . void ( ) ; } this . java.util.List<org.springframework.integration.handler.MessageHandler> . get ( NUMBER ) . handleMessage ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Assert . isTrue ( this . java.util.List<org.springframework.integration.handler.MessageHandler> . size ( ) == new java.util.HashSet<org.springframework.integration.handler.MessageHandler> < MessageHandler > ( this . java.util.List<org.springframework.integration.handler.MessageHandler> ) . int ( ) , STRING ) ; for ( int int = NUMBER ; int < this . java.util.List<org.springframework.integration.handler.MessageHandler> . size ( ) ; int ++ ) { MessageHandler org.springframework.integration.handler.MessageHandler = this . java.util.List<org.springframework.integration.handler.MessageHandler> . get ( int ) ; if ( int < this . java.util.List<org.springframework.integration.handler.MessageHandler> . size ( ) - NUMBER ) { Assert . isInstanceOf ( MessageProducer .class , org.springframework.integration.handler.MessageHandler , STRING + STRING ) ; MessageHandler org.springframework.integration.handler.MessageHandler = this . java.util.List<org.springframework.integration.handler.MessageHandler> . get ( int + NUMBER ) ; MessageChannel org.springframework.integration.handler.MessageChannel = ( message , timeout ) -> { nextHandler . handleMessage ( message ) ; return true ; } ; ( ( MessageProducer ) org.springframework.integration.handler.MessageHandler ) . setOutputChannel ( org.springframework.integration.handler.MessageChannel ) ; if ( org.springframework.integration.handler.MessageHandler instanceof org.springframework.integration.handler.MessageHandlerChain ) { ( ( org.springframework.integration.handler.MessageHandlerChain ) org.springframework.integration.handler.MessageHandler ) . boolean = false ; ( ( org.springframework.integration.handler.MessageHandlerChain ) org.springframework.integration.handler.MessageHandler ) . afterPropertiesSet ( ) ; } } else if ( org.springframework.integration.handler.MessageHandler instanceof MessageProducer ) { MessageChannel org.springframework.integration.handler.MessageChannel = new org.springframework.integration.handler.MessageHandlerChain.ReplyForwardingMessageChannel ( ) ; ( ( MessageProducer ) org.springframework.integration.handler.MessageHandler ) . setOutputChannel ( org.springframework.integration.handler.MessageChannel ) ; } else { Assert . isNull ( getOutputChannel ( ) , STRING + STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; try { return this . boolean ; } finally { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; try { if ( ! this . boolean ) { this . void ( ) ; this . boolean = true ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this ) ; } } } finally { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; try { if ( this . boolean ) { this . void ( ) ; this . boolean = false ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + this ) ; } } } finally { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; } }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.Runnable java.lang.Runnable ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; try { this . void ( ) ; java.lang.Runnable . void ( ) ; } finally { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( MessageHandler org.springframework.integration.handler.MessageHandler : this . java.util.List<org.springframework.integration.handler.MessageHandler> ) { if ( org.springframework.integration.handler.MessageHandler instanceof Lifecycle ) { ( ( Lifecycle ) org.springframework.integration.handler.MessageHandler ) . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( MessageHandler org.springframework.integration.handler.MessageHandler : this . java.util.List<org.springframework.integration.handler.MessageHandler> ) { if ( org.springframework.integration.handler.MessageHandler instanceof Lifecycle ) { ( ( Lifecycle ) org.springframework.integration.handler.MessageHandler ) . start ( ) ; } } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.handler.Message<?> , long long ) { produceOutput ( org.springframework.integration.handler.Message<> , org.springframework.integration.handler.Message<> ) ; return true ; }  <METHOD_END>
