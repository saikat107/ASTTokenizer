<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . state ( this . java.util.Iterator<org.springframework.test.web.client.RequestExpectation> == null , STRING ) ; this . java.util.Iterator<org.springframework.test.web.client.RequestExpectation> = getExpectations ( ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.client.ClientHttpResponse org.springframework.test.web.client.ClientHttpResponse ( ClientHttpRequest org.springframework.test.web.client.ClientHttpRequest ) throws java.io.IOException { RequestExpectation org.springframework.test.web.client.RequestExpectation ; try { org.springframework.test.web.client.RequestExpectation = org.springframework.test.web.client.RequestExpectation ( org.springframework.test.web.client.ClientHttpRequest ) ; org.springframework.test.web.client.RequestExpectation . match ( org.springframework.test.web.client.ClientHttpRequest ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { org.springframework.test.web.client.RequestExpectation = this . org.springframework.test.web.client.RequestExpectationGroup . findExpectation ( org.springframework.test.web.client.ClientHttpRequest ) ; if ( org.springframework.test.web.client.RequestExpectation == null ) { throw java.lang.AssertionError ; } } ClientHttpResponse org.springframework.test.web.client.ClientHttpResponse = org.springframework.test.web.client.RequestExpectation . createResponse ( org.springframework.test.web.client.ClientHttpRequest ) ; this . org.springframework.test.web.client.RequestExpectationGroup . update ( org.springframework.test.web.client.RequestExpectation ) ; return org.springframework.test.web.client.ClientHttpResponse ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.client.RequestExpectation org.springframework.test.web.client.RequestExpectation ( ClientHttpRequest org.springframework.test.web.client.ClientHttpRequest ) { if ( this . java.util.Iterator<org.springframework.test.web.client.RequestExpectation> . hasNext ( ) ) { return this . java.util.Iterator<org.springframework.test.web.client.RequestExpectation> . next ( ) ; } throw createUnexpectedRequestError ( org.springframework.test.web.client.ClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. reset ( ) ; this . java.util.Iterator<org.springframework.test.web.client.RequestExpectation> = null ; this . org.springframework.test.web.client.RequestExpectationGroup . reset ( ) ; }  <METHOD_END>
