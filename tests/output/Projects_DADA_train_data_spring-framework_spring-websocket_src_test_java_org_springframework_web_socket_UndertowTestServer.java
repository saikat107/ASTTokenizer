<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( WebApplicationContext org.springframework.web.socket.WebApplicationContext , Filter ... org.springframework.web.socket.Filter[] ) { org.springframework.web.socket.UndertowTestServer.DispatcherServletInstanceFactory org.springframework.web.socket.UndertowTestServer.DispatcherServletInstanceFactory = new org.springframework.web.socket.UndertowTestServer.DispatcherServletInstanceFactory ( org.springframework.web.socket.WebApplicationContext ) ; WebSocketDeploymentInfo org.springframework.web.socket.WebSocketDeploymentInfo = new WebSocketDeploymentInfo ( ) ; try { org.springframework.web.socket.WebSocketDeploymentInfo . setWorker ( Xnio . getInstance ( ) . createWorker ( OptionMap . EMPTY ) ) ; org.springframework.web.socket.WebSocketDeploymentInfo . setBuffers ( new org . org.xnio . org.xnio ( NUMBER , NUMBER ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } DeploymentInfo org.springframework.web.socket.DeploymentInfo = deployment ( ) . setClassLoader ( org.springframework.web.socket.UndertowTestServer .class . java.lang.ClassLoader ( ) ) . setDeploymentName ( STRING ) . setContextPath ( STRING ) . addServlet ( servlet ( STRING , DispatcherServlet .class , org.springframework.web.socket.UndertowTestServer.DispatcherServletInstanceFactory ) . addMapping ( STRING ) . setAsyncSupported ( true ) ) . addServletContextAttribute ( WebSocketDeploymentInfo . ATTRIBUTE_NAME , org.springframework.web.socket.WebSocketDeploymentInfo ) ; for ( final Filter org.springframework.web.socket.Filter : org.springframework.web.socket.Filter[] ) { java.lang.String java.lang.String = org.springframework.web.socket.Filter . getClass ( ) . getName ( ) ; org.springframework.web.socket.UndertowTestServer.FilterInstanceFactory org.springframework.web.socket.UndertowTestServer.FilterInstanceFactory = new org.springframework.web.socket.UndertowTestServer.FilterInstanceFactory ( org.springframework.web.socket.Filter ) ; FilterInfo org.springframework.web.socket.FilterInfo = new FilterInfo ( java.lang.String , org.springframework.web.socket.Filter . getClass ( ) , org.springframework.web.socket.UndertowTestServer.FilterInstanceFactory ) ; org.springframework.web.socket.DeploymentInfo . addFilter ( org.springframework.web.socket.FilterInfo . setAsyncSupported ( true ) ) ; for ( DispatcherType org.springframework.web.socket.DispatcherType : DispatcherType . values ( ) ) { org.springframework.web.socket.DeploymentInfo . addFilterUrlMapping ( java.lang.String , STRING , org.springframework.web.socket.DispatcherType ) ; } } try { this . org.springframework.web.socket.DeploymentManager = defaultContainer ( ) . addDeployment ( org.springframework.web.socket.DeploymentInfo ) ; this . org.springframework.web.socket.DeploymentManager . deploy ( ) ; HttpHandler org.springframework.web.socket.HttpHandler = this . org.springframework.web.socket.DeploymentManager . start ( ) ; this . org.springframework.web.socket.Undertow = Undertow . builder ( ) . addHttpListener ( NUMBER , STRING ) . setHandler ( org.springframework.web.socket.HttpHandler ) . build ( ) ; } catch ( ServletException org.springframework.web.socket.ServletException ) { throw new java.lang.IllegalStateException ( org.springframework.web.socket.ServletException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.socket.DeploymentManager . undeploy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.web.socket.Undertow . start ( ) ; Undertow . Undertow Undertow.ListenerInfo = this . org.springframework.web.socket.Undertow . getListenerInfo ( ) . get ( NUMBER ) ; this . int = ( ( java.net.InetSocketAddress ) Undertow.ListenerInfo . getAddress ( ) ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.web.socket.Undertow . stop ( ) ; this . int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.ServletContext org.springframework.web.socket.ServletContext ( ) { return this . org.springframework.web.socket.DeploymentManager . getDeployment ( ) . getServletContext ( ) ; }  <METHOD_END>
<METHOD_START> public void ( WebApplicationContext org.springframework.web.socket.WebApplicationContext ) { this . org.springframework.web.socket.WebApplicationContext = org.springframework.web.socket.WebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.InstanceHandle<org.springframework.web.socket.Servlet> < Servlet > org.springframework.web.socket.InstanceHandle<org.springframework.web.socket.Servlet> ( ) java.lang.InstantiationException { return new InstanceHandle < Servlet > ( ) { @ java.lang.Override public org.springframework.web.socket.Servlet org.springframework.web.socket.Servlet ( ) { return new DispatcherServlet ( org.springframework.web.socket.WebApplicationContext ) ; } @ java.lang.Override public void void ( ) {				} } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.Servlet org.springframework.web.socket.Servlet ( ) { return new DispatcherServlet ( org.springframework.web.socket.WebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {				}  <METHOD_END>
<METHOD_START> private void ( Filter org.springframework.web.socket.Filter ) { this . org.springframework.web.socket.Filter = org.springframework.web.socket.Filter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.InstanceHandle<org.springframework.web.socket.Filter> < Filter > org.springframework.web.socket.InstanceHandle<org.springframework.web.socket.Filter> ( ) java.lang.InstantiationException { return new InstanceHandle < Filter > ( ) { @ java.lang.Override public org.springframework.web.socket.Filter org.springframework.web.socket.Filter ( ) { return org.springframework.web.socket.Filter ; } @ java.lang.Override public void void ( ) {} } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.Filter org.springframework.web.socket.Filter ( ) { return org.springframework.web.socket.Filter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {}  <METHOD_END>
