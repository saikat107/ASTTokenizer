<METHOD_START> public void ( ) { super( MediaType . APPLICATION_XML , MediaType . parseMediaType ( STRING ) ); this . org.springframework.data.web.ProjectionFactory = new XBProjector ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = ResolvableType . forType ( java.lang.Class<> ) . getRawClass ( ) ; java.lang.Boolean java.lang.Boolean = java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> ) ; if ( java.lang.Boolean != null ) { return java.lang.Boolean ; } java.lang.Boolean = java.lang.Class<> . boolean ( ) && AnnotationUtils . findAnnotation ( java.lang.Class<> , ProjectedPayload .class ) != null ; java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> , java.lang.Boolean ) ; return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.data.web.MediaType ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> , HttpInputMessage org.springframework.data.web.HttpInputMessage )			throws java.io.IOException , org.springframework.data.web.HttpMessageNotReadableException { return org.springframework.data.web.ProjectionFactory . io ( ) . stream ( org.springframework.data.web.HttpInputMessage . getBody ( ) ) . read ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , HttpOutputMessage org.springframework.data.web.HttpOutputMessage )			throws java.io.IOException , org.springframework.data.web.HttpMessageNotWritableException {}  <METHOD_END>
