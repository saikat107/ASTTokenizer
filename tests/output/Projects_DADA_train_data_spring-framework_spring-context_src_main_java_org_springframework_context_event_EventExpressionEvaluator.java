<METHOD_START> public org.springframework.context.event.EvaluationContext org.springframework.context.event.EvaluationContext ( ApplicationEvent org.springframework.context.event.ApplicationEvent , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , BeanFactory org.springframework.context.event.BeanFactory ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Class<> , java.lang.reflect.Method ) ; EventExpressionRootObject org.springframework.context.event.EventExpressionRootObject = new EventExpressionRootObject ( org.springframework.context.event.ApplicationEvent , java.lang.Object[] ) ; MethodBasedEvaluationContext org.springframework.context.event.MethodBasedEvaluationContext = new MethodBasedEvaluationContext ( org.springframework.context.event.EventExpressionRootObject , java.lang.reflect.Method , java.lang.Object[] , getParameterNameDiscoverer ( ) ) ; if ( org.springframework.context.event.BeanFactory != null ) { org.springframework.context.event.MethodBasedEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.context.event.BeanFactory ) ) ; } return org.springframework.context.event.MethodBasedEvaluationContext ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String , AnnotatedElementKey org.springframework.context.event.AnnotatedElementKey , EvaluationContext org.springframework.context.event.EvaluationContext ) { return getExpression ( this . java.util.Map<org.springframework.context.event.ExpressionKey,org.springframework.context.event.Expression> , org.springframework.context.event.AnnotatedElementKey , java.lang.String ) . getValue ( org.springframework.context.event.EvaluationContext , boolean .class ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method ) { AnnotatedElementKey org.springframework.context.event.AnnotatedElementKey = new AnnotatedElementKey ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.reflect.Method java.lang.reflect.Method = this . java.util.Map<org.springframework.context.event.AnnotatedElementKey,java.lang.reflect.Method> . get ( org.springframework.context.event.AnnotatedElementKey ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = AopUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ; } this . java.util.Map<org.springframework.context.event.AnnotatedElementKey,java.lang.reflect.Method> . put ( org.springframework.context.event.AnnotatedElementKey , java.lang.reflect.Method ) ; } return java.lang.reflect.Method ; }  <METHOD_END>
