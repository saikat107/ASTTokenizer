<METHOD_START> public void ( MongoConverter org.springframework.data.mongodb.repository.support.MongoConverter ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.MongoConverter , STRING ) ; this . org.springframework.data.mongodb.repository.support.MappingContext<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> = org.springframework.data.mongodb.repository.support.MongoConverter . getMappingContext ( ) ; this . org.springframework.data.mongodb.repository.support.MongoConverter = org.springframework.data.mongodb.repository.support.MongoConverter ; this . org.springframework.data.mongodb.repository.support.QueryMapper = new QueryMapper ( org.springframework.data.mongodb.repository.support.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Constant < ? > org.springframework.data.mongodb.repository.support.Constant<?> , java.lang.Void java.lang.Void ) { if ( ! ClassUtils . isAssignable ( java.lang.Enum .class , org.springframework.data.mongodb.repository.support.Constant<> . getType ( ) ) ) { return super. visit ( org.springframework.data.mongodb.repository.support.Constant<> , java.lang.Void ) ; } return org.springframework.data.mongodb.repository.support.MongoConverter . convertToMongoType ( org.springframework.data.mongodb.repository.support.Constant<> . getConstant ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( Path < ? > org.springframework.data.mongodb.repository.support.Path<?> , PathMetadata org.springframework.data.mongodb.repository.support.PathMetadata ) { if ( ! org.springframework.data.mongodb.repository.support.PathMetadata . getPathType ( ) . equals ( PathType . PROPERTY ) ) { return super. getKeyForPath ( org.springframework.data.mongodb.repository.support.Path<> , org.springframework.data.mongodb.repository.support.PathMetadata ) ; } Path < ? > org.springframework.data.mongodb.repository.support.Path<?> = org.springframework.data.mongodb.repository.support.PathMetadata . getParent ( ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?> = org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> . getRequiredPersistentEntity ( org.springframework.data.mongodb.repository.support.Path<> . getType ( ) ) ; java.util.Optional<org.springframework.data.mongodb.repository.support.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.repository.support.MongoPersistentProperty> = org.springframework.data.mongodb.repository.support.MongoPersistentEntity<> . getPersistentProperty ( org.springframework.data.mongodb.repository.support.PathMetadata . getName ( ) ) ; return ! java.util.Optional<org.springframework.data.mongodb.repository.support.MongoPersistentProperty> . isPresent ( ) ? super. getKeyForPath ( org.springframework.data.mongodb.repository.support.Path<> , org.springframework.data.mongodb.repository.support.PathMetadata ) : java.util.Optional<org.springframework.data.mongodb.repository.support.MongoPersistentProperty> . get ( ) . getFieldName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.support.DBObject org.springframework.data.mongodb.repository.support.DBObject ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.lang.Object = java.lang.Object instanceof java.util.Optional ? ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( null ) : java.lang.Object ; if ( java.lang.String . boolean ( java.lang.String ) ) { DBObject org.springframework.data.mongodb.repository.support.DBObject = super. asDBObject ( java.lang.String , java.lang.Object ) ; Document org.springframework.data.mongodb.repository.support.Document = org.springframework.data.mongodb.repository.support.QueryMapper . getMappedObject ( ( BasicDBObject ) org.springframework.data.mongodb.repository.support.DBObject , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; return ( DBObject ) JSON . parse ( org.springframework.data.mongodb.repository.support.Document . toJson ( ) ) ; } return super. asDBObject ( java.lang.String , java.lang.Object instanceof java.util.regex.Pattern ? java.lang.Object : org.springframework.data.mongodb.repository.support.MongoConverter . convertToMongoType ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Path < ? > org.springframework.data.mongodb.repository.support.Path<?> ) { MongoPersistentProperty org.springframework.data.mongodb.repository.support.MongoPersistentProperty = org.springframework.data.mongodb.repository.support.MongoPersistentProperty ( org.springframework.data.mongodb.repository.support.Path<> ) ; return org.springframework.data.mongodb.repository.support.MongoPersistentProperty == null ? false : org.springframework.data.mongodb.repository.support.MongoPersistentProperty . isAssociation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.support.DBRef org.springframework.data.mongodb.repository.support.DBRef ( java.lang.Object java.lang.Object ) { return org.springframework.data.mongodb.repository.support.DBRef ( java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.repository.support.DBRef org.springframework.data.mongodb.repository.support.DBRef ( java.lang.Object java.lang.Object , Path < ? > org.springframework.data.mongodb.repository.support.Path<?> ) { return org.springframework.data.mongodb.repository.support.MongoConverter . toDBRef ( java.lang.Object , org.springframework.data.mongodb.repository.support.MongoPersistentProperty ( org.springframework.data.mongodb.repository.support.Path<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( Operation < ? > org.springframework.data.mongodb.repository.support.Operation<?> , int int ) { Expression < ? > org.springframework.data.mongodb.repository.support.Expression<?> = org.springframework.data.mongodb.repository.support.Operation<> . getArg ( int ) ; java.lang.String java.lang.String = super. asDBKey ( org.springframework.data.mongodb.repository.support.Operation<> , int ) ; if ( ! ( org.springframework.data.mongodb.repository.support.Expression<> instanceof Path ) ) { return java.lang.String ; } Path < ? > org.springframework.data.mongodb.repository.support.Path<?> = ( Path < ? > ) org.springframework.data.mongodb.repository.support.Expression<> ; if ( ! boolean ( org.springframework.data.mongodb.repository.support.Path<> ) ) { return java.lang.String ; } MongoPersistentProperty org.springframework.data.mongodb.repository.support.MongoPersistentProperty = org.springframework.data.mongodb.repository.support.MongoPersistentProperty ( org.springframework.data.mongodb.repository.support.Path<> ) ; return org.springframework.data.mongodb.repository.support.MongoPersistentProperty . isIdProperty ( ) ? java.lang.String . java.lang.String ( STRING + java.lang.String + STRING , STRING ) : java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( Path < ? > org.springframework.data.mongodb.repository.support.Path<?> , Constant < ? > org.springframework.data.mongodb.repository.support.Constant<?> ) { if ( ! boolean ( org.springframework.data.mongodb.repository.support.Path<> ) ) { return super. convert ( org.springframework.data.mongodb.repository.support.Path<> , org.springframework.data.mongodb.repository.support.Constant<> ) ; } MongoPersistentProperty org.springframework.data.mongodb.repository.support.MongoPersistentProperty = org.springframework.data.mongodb.repository.support.MongoPersistentProperty ( org.springframework.data.mongodb.repository.support.Path<> ) ; return org.springframework.data.mongodb.repository.support.MongoPersistentProperty . isIdProperty ( ) ? org.springframework.data.mongodb.repository.support.DBRef ( org.springframework.data.mongodb.repository.support.Constant<> . getConstant ( ) , org.springframework.data.mongodb.repository.support.Path<> . getMetadata ( ) . getParent ( ) ) : org.springframework.data.mongodb.repository.support.DBRef ( org.springframework.data.mongodb.repository.support.Constant<> . getConstant ( ) , org.springframework.data.mongodb.repository.support.Path<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.MongoPersistentProperty org.springframework.data.mongodb.repository.support.MongoPersistentProperty ( Path < ? > org.springframework.data.mongodb.repository.support.Path<?> ) { Path < ? > org.springframework.data.mongodb.repository.support.Path<?> = org.springframework.data.mongodb.repository.support.Path<> . getMetadata ( ) . getParent ( ) ; if ( org.springframework.data.mongodb.repository.support.Path<> == null || ! java.util.Set<org.springframework.data.mongodb.repository.support.PathType> . contains ( org.springframework.data.mongodb.repository.support.Path<> . getMetadata ( ) . getPathType ( ) ) ) { return null ; } java.util.Optional<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>> = org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> . getPersistentEntity ( org.springframework.data.mongodb.repository.support.Path<> . getType ( ) ) ; return java.util.Optional<> . boolean ( ) ? java.util.Optional<> . get ( ) . getRequiredPersistentProperty ( org.springframework.data.mongodb.repository.support.Path<> . getMetadata ( ) . getName ( ) ) : null ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.MongoPersistentProperty org.springframework.data.mongodb.repository.support.MongoPersistentProperty ( Path < ? > org.springframework.data.mongodb.repository.support.Path<?> ) { if ( org.springframework.data.mongodb.repository.support.Path<> == null ) { return null ; } MongoPersistentProperty org.springframework.data.mongodb.repository.support.MongoPersistentProperty = org.springframework.data.mongodb.repository.support.MongoPersistentProperty ( org.springframework.data.mongodb.repository.support.Path<> ) ; PathMetadata org.springframework.data.mongodb.repository.support.PathMetadata = org.springframework.data.mongodb.repository.support.Path<> . getMetadata ( ) ; if ( org.springframework.data.mongodb.repository.support.MongoPersistentProperty != null && org.springframework.data.mongodb.repository.support.MongoPersistentProperty . isIdProperty ( ) && org.springframework.data.mongodb.repository.support.PathMetadata != null && org.springframework.data.mongodb.repository.support.PathMetadata . getParent ( ) != null ) { return org.springframework.data.mongodb.repository.support.MongoPersistentProperty ( org.springframework.data.mongodb.repository.support.PathMetadata . getParent ( ) ) ; } return org.springframework.data.mongodb.repository.support.MongoPersistentProperty ; }  <METHOD_END>
