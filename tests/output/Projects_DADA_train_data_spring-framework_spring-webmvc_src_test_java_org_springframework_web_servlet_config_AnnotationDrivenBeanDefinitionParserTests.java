<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.config.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; RequestMappingHandlerAdapter org.springframework.web.servlet.config.RequestMappingHandlerAdapter = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.config.RequestMappingHandlerAdapter . getWebBindingInitializer ( ) ; assertNotNull ( java.lang.Object ) ; MessageCodesResolver org.springframework.web.servlet.config.MessageCodesResolver = ( ( ConfigurableWebBindingInitializer ) java.lang.Object ) . getMessageCodesResolver ( ) ; assertNotNull ( org.springframework.web.servlet.config.MessageCodesResolver ) ; assertEquals ( org.springframework.web.servlet.config.TestMessageCodesResolver .class , org.springframework.web.servlet.config.MessageCodesResolver . getClass ( ) ) ; assertEquals ( false , new DirectFieldAccessor ( org.springframework.web.servlet.config.RequestMappingHandlerAdapter ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; RequestMappingHandlerMapping org.springframework.web.servlet.config.RequestMappingHandlerMapping = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.RequestMappingHandlerMapping ) ; assertTrue ( org.springframework.web.servlet.config.RequestMappingHandlerMapping . useSuffixPatternMatch ( ) ) ; assertFalse ( org.springframework.web.servlet.config.RequestMappingHandlerMapping . useTrailingSlashMatch ( ) ) ; assertTrue ( org.springframework.web.servlet.config.RequestMappingHandlerMapping . useRegisteredSuffixPatternMatch ( ) ) ; assertThat ( org.springframework.web.servlet.config.RequestMappingHandlerMapping . getUrlPathHelper ( ) , Matchers . instanceOf ( org.springframework.web.servlet.config.TestPathHelper .class ) ) ; assertThat ( org.springframework.web.servlet.config.RequestMappingHandlerMapping . getPathMatcher ( ) , Matchers . instanceOf ( org.springframework.web.servlet.config.TestPathMatcher .class ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.servlet.config.RequestMappingHandlerMapping . getContentNegotiationManager ( ) . getAllFileExtensions ( ) ; assertThat ( java.util.List<java.lang.String> , Matchers . contains ( STRING ) ) ; assertThat ( java.util.List<java.lang.String> , Matchers . hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) , true ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ExceptionHandlerExceptionResolver .class ) , true ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ExceptionHandlerExceptionResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) , false ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ExceptionHandlerExceptionResolver .class ) , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ExceptionHandlerExceptionResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> = ( java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> . get ( NUMBER ) instanceof ServletWebArgumentResolverAdapter ) ; assertTrue ( java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> . get ( NUMBER ) instanceof org.springframework.web.servlet.config.TestHandlerMethodArgumentResolver ) ; assertTrue ( java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> . get ( NUMBER ) instanceof org.springframework.web.servlet.config.TestHandlerMethodArgumentResolver ) ; assertNotSame ( java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> . get ( NUMBER ) , java.util.List<org.springframework.web.servlet.config.HandlerMethodArgumentResolver> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ) ; void ( this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( ExceptionHandlerExceptionResolver .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.web.servlet.config.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.servlet.config.HandlerMethodReturnValueHandler> = ( java.util.List<org.springframework.web.servlet.config.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.config.HandlerMethodReturnValueHandler> . size ( ) ) ; assertEquals ( org.springframework.web.servlet.config.TestHandlerMethodReturnValueHandler .class , java.util.List<org.springframework.web.servlet.config.HandlerMethodReturnValueHandler> . get ( NUMBER ) . getClass ( ) ) ; assertEquals ( org.springframework.web.servlet.config.TestHandlerMethodReturnValueHandler .class , java.util.List<org.springframework.web.servlet.config.HandlerMethodReturnValueHandler> . get ( NUMBER ) . getClass ( ) ) ; assertNotSame ( java.util.List<org.springframework.web.servlet.config.HandlerMethodReturnValueHandler> . get ( NUMBER ) , java.util.List<org.springframework.web.servlet.config.HandlerMethodReturnValueHandler> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; BeanNameUrlHandlerMapping org.springframework.web.servlet.config.BeanNameUrlHandlerMapping = this . org.springframework.web.servlet.config.GenericWebApplicationContext . getBean ( BeanNameUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.servlet.config.BeanNameUrlHandlerMapping ) ; assertEquals ( NUMBER , org.springframework.web.servlet.config.BeanNameUrlHandlerMapping . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { XmlBeanDefinitionReader org.springframework.web.servlet.config.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( this . org.springframework.web.servlet.config.GenericWebApplicationContext ) ; Resource org.springframework.web.servlet.config.Resource = new ClassPathResource ( java.lang.String , org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParserTests .class ) ; org.springframework.web.servlet.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.web.servlet.config.Resource ) ; this . org.springframework.web.servlet.config.GenericWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.Object java.lang.Object , boolean boolean ) { assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> = ( java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ) java.lang.Object ; if ( boolean ) { assertTrue ( STRING , java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> . size ( ) > NUMBER ) ; } else { assertTrue ( STRING , java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> . size ( ) == NUMBER ) ; } assertTrue ( java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> . get ( NUMBER ) instanceof StringHttpMessageConverter ) ; assertTrue ( java.util.List<org.springframework.web.servlet.config.HttpMessageConverter<?>> . get ( NUMBER ) instanceof ResourceHttpMessageConverter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.Object java.lang.Object ) { assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> < ResponseBodyAdvice > java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> = ( java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> < ResponseBodyAdvice > ) java.lang.Object ; assertTrue ( java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> . get ( NUMBER ) instanceof JsonViewResponseBodyAdvice ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.Object java.lang.Object ) { assertNotNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( java.lang.Object ) . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> < ResponseBodyAdvice > java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> = ( java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> < ResponseBodyAdvice > ) java.lang.Object ; assertTrue ( java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> . get ( NUMBER ) instanceof JsonViewRequestBodyAdvice ) ; assertTrue ( java.util.List<org.springframework.web.servlet.config.ResponseBodyAdvice> . get ( NUMBER ) instanceof JsonViewResponseBodyAdvice ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.config.MethodParameter , NativeWebRequest org.springframework.web.servlet.config.NativeWebRequest ) throws java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.config.MethodParameter ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.config.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.config.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.config.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.config.WebDataBinderFactory ) throws java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.config.MethodParameter ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.config.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.config.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.config.NativeWebRequest ) throws java.lang.Exception {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class java.lang.Class ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
