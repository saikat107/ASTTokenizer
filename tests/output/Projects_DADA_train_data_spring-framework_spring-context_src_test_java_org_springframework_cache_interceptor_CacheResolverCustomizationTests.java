<METHOD_START> @ Before public void void ( ) { ApplicationContext org.springframework.cache.interceptor.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.interceptor.CacheResolverCustomizationTests.Config .class ) ; this . org.springframework.cache.interceptor.CacheManager = org.springframework.cache.interceptor.ApplicationContext . getBean ( STRING , CacheManager .class ) ; this . org.springframework.cache.interceptor.CacheManager = org.springframework.cache.interceptor.ApplicationContext . getBean ( STRING , CacheManager .class ) ; this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService = org.springframework.cache.interceptor.ApplicationContext . getBean ( org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.interceptor.Cache = this . org.springframework.cache.interceptor.CacheManager . getCache ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.interceptor.Cache ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService . java.lang.Object ( java.lang.Object ) ; assertCacheHit ( java.lang.Object , java.lang.Object , org.springframework.cache.interceptor.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.interceptor.Cache = this . org.springframework.cache.interceptor.CacheManager . getCache ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.interceptor.Cache ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService . java.lang.Object ( java.lang.Object ) ; assertCacheHit ( java.lang.Object , java.lang.Object , org.springframework.cache.interceptor.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.interceptor.Cache = this . org.springframework.cache.interceptor.CacheManager . getCache ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.interceptor.Cache ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService . java.lang.Object ( java.lang.Object ) ; assertCacheHit ( java.lang.Object , java.lang.Object , org.springframework.cache.interceptor.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.interceptor.Cache = this . org.springframework.cache.interceptor.CacheManager . getCache ( STRING ) ; Cache org.springframework.cache.interceptor.Cache = this . org.springframework.cache.interceptor.CacheManager . getCache ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.interceptor.Cache , org.springframework.cache.interceptor.Cache ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService . java.lang.Object ( java.lang.Object , STRING ) ; assertCacheHit ( java.lang.Object , java.lang.Object , org.springframework.cache.interceptor.Cache ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.interceptor.Cache ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.interceptor.Cache , org.springframework.cache.interceptor.Cache ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService . java.lang.Object ( java.lang.Object , STRING ) ; assertCacheHit ( java.lang.Object , java.lang.Object , org.springframework.cache.interceptor.Cache ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.interceptor.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.interceptor.Cache = this . org.springframework.cache.interceptor.CacheManager . getCache ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertCacheMiss ( java.lang.Object , org.springframework.cache.interceptor.Cache ) ; java.lang.Object java.lang.Object = this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService . java.lang.Object ( java.lang.Object ) ; assertCacheHit ( java.lang.Object , java.lang.Object , org.springframework.cache.interceptor.Cache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService .class , STRING , java.lang.Object .class ) ; try { this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService . java.lang.Object ( new java.lang.Object ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { this . org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService . java.lang.Object ( new java.lang.Object ( ) ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.cache.interceptor.NoSuchBeanDefinitionException ) { assertEquals ( STRING , STRING , org.springframework.cache.interceptor.NoSuchBeanDefinitionException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.interceptor.CacheManager org.springframework.cache.interceptor.CacheManager ( ) { return CacheTestUtils . createSimpleCacheManager ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.interceptor.KeyGenerator org.springframework.cache.interceptor.KeyGenerator ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheManager org.springframework.cache.interceptor.CacheManager ( ) { return CacheTestUtils . createSimpleCacheManager ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheResolver org.springframework.cache.interceptor.CacheResolver ( ) { return new NamedCacheResolver ( org.springframework.cache.interceptor.CacheManager ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheResolver org.springframework.cache.interceptor.CacheResolver ( ) { return new NamedCacheResolver ( org.springframework.cache.interceptor.CacheManager ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheResolver org.springframework.cache.interceptor.CacheResolver ( ) { return new org.springframework.cache.interceptor.CacheResolverCustomizationTests.RuntimeCacheResolver ( org.springframework.cache.interceptor.CacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheResolver org.springframework.cache.interceptor.CacheResolver ( ) { NamedCacheResolver org.springframework.cache.interceptor.NamedCacheResolver = new NamedCacheResolver ( ) ; org.springframework.cache.interceptor.NamedCacheResolver . setCacheManager ( org.springframework.cache.interceptor.CacheManager ( ) ) ; org.springframework.cache.interceptor.NamedCacheResolver . setCacheNames ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ) ; return org.springframework.cache.interceptor.NamedCacheResolver ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheResolver org.springframework.cache.interceptor.CacheResolver ( ) { return new org.springframework.cache.interceptor.CacheResolverCustomizationTests.NullCacheResolver ( org.springframework.cache.interceptor.CacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService ( ) { return new org.springframework.cache.interceptor.CacheResolverCustomizationTests.SimpleService ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheResolver = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheManager = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheResolver = STRING , key = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheResolver = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheResolver = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheResolver = STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> private void ( CacheManager org.springframework.cache.interceptor.CacheManager ) { super( org.springframework.cache.interceptor.CacheManager ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( CacheOperationInvocationContext < ? > org.springframework.cache.interceptor.CacheOperationInvocationContext<?> ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.cache.interceptor.CacheOperationInvocationContext<> . getArgs ( ) [ NUMBER ] ; return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( CacheManager org.springframework.cache.interceptor.CacheManager ) { super( org.springframework.cache.interceptor.CacheManager ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( CacheOperationInvocationContext < ? > org.springframework.cache.interceptor.CacheOperationInvocationContext<?> ) { return null ; }  <METHOD_END>
