<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( new org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ( STRING ) ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.ConverterParserTests.TestBean2 .class , org.springframework.integration.config.xml.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.config.xml.ConverterParserTests.TestBean2 ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( new org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ( STRING ) ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.ConverterParserTests.TestBean3 .class , org.springframework.integration.config.xml.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.config.xml.ConverterParserTests.TestBean3 ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( new org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ( STRING ) ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.ConverterParserTests.TestBean2 .class , org.springframework.integration.config.xml.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.config.xml.ConverterParserTests.TestBean2 ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( new org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ( STRING ) ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.ConverterParserTests.TestBean2 .class , org.springframework.integration.config.xml.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.config.xml.ConverterParserTests.TestBean2 ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( new org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ( STRING ) ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.ConverterParserTests.TestBean1 .class , org.springframework.integration.config.xml.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( new org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ( STRING ) ) . build ( ) ; this . org.springframework.integration.config.xml.MessageChannel . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = this . org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.ConverterParserTests.TestBean1 .class , org.springframework.integration.config.xml.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( org.springframework.integration.config.xml.ConverterParserTests.TestBean2 org.springframework.integration.config.xml.ConverterParserTests.TestBean2 ) { return org.springframework.integration.config.xml.ConverterParserTests.TestBean2 ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( org.springframework.integration.config.xml.ConverterParserTests.TestBean3 org.springframework.integration.config.xml.ConverterParserTests.TestBean3 ) { return org.springframework.integration.config.xml.ConverterParserTests.TestBean3 ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.integration.config.xml.ConverterParserTests.TestBean2 org.springframework.integration.config.xml.ConverterParserTests.TestBean2 ) { return true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.config.xml.ConverterParserTests.TestBean2 org.springframework.integration.config.xml.ConverterParserTests.TestBean2 ( org.springframework.integration.config.xml.ConverterParserTests.TestBean1 org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ) { return new org.springframework.integration.config.xml.ConverterParserTests.TestBean2 ( org.springframework.integration.config.xml.ConverterParserTests.TestBean1 . java.lang.String . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.config.xml.ConverterParserTests.TestBean3 org.springframework.integration.config.xml.ConverterParserTests.TestBean3 ( org.springframework.integration.config.xml.ConverterParserTests.TestBean1 org.springframework.integration.config.xml.ConverterParserTests.TestBean1 ) { return new org.springframework.integration.config.xml.ConverterParserTests.TestBean3 ( org.springframework.integration.config.xml.ConverterParserTests.TestBean1 . java.lang.String . java.lang.String ( ) ) ; }  <METHOD_END>
