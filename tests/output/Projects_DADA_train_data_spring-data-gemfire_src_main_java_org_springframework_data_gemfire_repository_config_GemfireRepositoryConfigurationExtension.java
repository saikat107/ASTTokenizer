<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Collection<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { return Region . REGION_ANNOTATION_TYPES ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set<java.lang.Class<?>> ( GemfireRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return GemfireRepositoryFactoryBean .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.gemfire.repository.config.BeanDefinitionBuilder , AnnotationRepositoryConfigurationSource org.springframework.data.gemfire.repository.config.AnnotationRepositoryConfigurationSource ) { org.springframework.data.gemfire.repository.config.BeanDefinitionBuilder . addPropertyReference ( java.lang.String , org.springframework.data.gemfire.repository.config.AnnotationRepositoryConfigurationSource . getAttribute ( java.lang.String ) . orElse ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionBuilder org.springframework.data.gemfire.repository.config.BeanDefinitionBuilder , XmlRepositoryConfigurationSource org.springframework.data.gemfire.repository.config.XmlRepositoryConfigurationSource ) { org.springframework.data.gemfire.repository.config.BeanDefinitionBuilder . addPropertyReference ( java.lang.String , org.springframework.data.gemfire.repository.config.XmlRepositoryConfigurationSource . getAttribute ( java.lang.String ) . orElse ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanDefinitionRegistry org.springframework.data.gemfire.repository.config.BeanDefinitionRegistry , RepositoryConfigurationSource org.springframework.data.gemfire.repository.config.RepositoryConfigurationSource ) { super. registerBeansForRoot ( org.springframework.data.gemfire.repository.config.BeanDefinitionRegistry , org.springframework.data.gemfire.repository.config.RepositoryConfigurationSource ) ; if ( ! org.springframework.data.gemfire.repository.config.RepositoryConfigurationSource . getAttribute ( java.lang.String ) . isPresent ( ) ) { org.springframework.data.gemfire.repository.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , new RootBeanDefinition ( GemfireMappingContext .class ) ) ; } }  <METHOD_END>
