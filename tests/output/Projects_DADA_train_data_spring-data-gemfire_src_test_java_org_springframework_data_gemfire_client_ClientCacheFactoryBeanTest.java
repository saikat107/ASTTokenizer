<METHOD_START> protected java.util.Properties java.util.Properties ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.util.Properties ( null , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Properties java.util.Properties ( java.util.Properties java.util.Properties , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.Properties = ( java.util.Properties != null ? java.util.Properties : new java.util.Properties ( ) ) ; java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.client.ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint ( java.lang.String java.lang.String , int int ) { return new ConnectionEndpoint ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertThat ( ( java.lang.Class<org.springframework.data.gemfire.client.ClientCache> < ClientCache > ) new ClientCacheFactoryBean ( ) . getObjectType ( ) , is ( equalTo ( ClientCache .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new ClientCacheFactoryBean ( ) . isSingleton ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = java.util.Properties ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING , STRING ) ; final DistributedSystem org.springframework.data.gemfire.client.DistributedSystem = mock ( DistributedSystem .class ) ; when ( org.springframework.data.gemfire.client.DistributedSystem . isConnected ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.DistributedSystem . getProperties ( ) ) . thenReturn ( java.util.Properties ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T extends org.springframework.data.gemfire.client.DistributedSystem > T T ( ) { return ( T ) org.springframework.data.gemfire.client.DistributedSystem ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setProperties ( java.util.Properties ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolveProperties ( ) ; assertThat ( java.util.Properties , is ( notNullValue ( ) ) ) ; assertThat ( java.util.Properties , is ( not ( sameInstance ( java.util.Properties ) ) ) ) ; assertThat ( java.util.Properties , is ( not ( sameInstance ( java.util.Properties ) ) ) ) ; assertThat ( java.util.Properties . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.Properties . boolean ( DistributedSystemUtils . DURABLE_CLIENT_ID_PROPERTY_NAME ) , is ( false ) ) ; assertThat ( java.util.Properties . boolean ( DistributedSystemUtils . DURABLE_CLIENT_TIMEOUT_PROPERTY_NAME ) , is ( false ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; verify ( org.springframework.data.gemfire.client.DistributedSystem , times ( NUMBER ) ) . isConnected ( ) ; verify ( org.springframework.data.gemfire.client.DistributedSystem , times ( NUMBER ) ) . getProperties ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T extends org.springframework.data.gemfire.client.DistributedSystem > T T ( ) { return ( T ) org.springframework.data.gemfire.client.DistributedSystem ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = DistributedSystemUtils . configureDurableClient ( java.util.Properties ( STRING , STRING ) , STRING , NUMBER ) ; java.util.Properties java.util.Properties = DistributedSystemUtils . configureDurableClient ( java.util.Properties ( STRING , STRING ) , STRING , NUMBER ) ; final DistributedSystem org.springframework.data.gemfire.client.DistributedSystem = mock ( DistributedSystem .class ) ; when ( org.springframework.data.gemfire.client.DistributedSystem . isConnected ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.DistributedSystem . getProperties ( ) ) . thenReturn ( java.util.Properties ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T extends org.springframework.data.gemfire.client.DistributedSystem > T T ( ) { return ( T ) org.springframework.data.gemfire.client.DistributedSystem ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setProperties ( java.util.Properties ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolveProperties ( ) ; assertThat ( java.util.Properties , is ( notNullValue ( ) ) ) ; assertThat ( java.util.Properties , is ( not ( sameInstance ( java.util.Properties ) ) ) ) ; assertThat ( java.util.Properties , is ( not ( sameInstance ( java.util.Properties ) ) ) ) ; assertThat ( java.util.Properties . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( DistributedSystemUtils . DURABLE_CLIENT_ID_PROPERTY_NAME ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( DistributedSystemUtils . DURABLE_CLIENT_TIMEOUT_PROPERTY_NAME ) , is ( equalTo ( STRING ) ) ) ; verify ( org.springframework.data.gemfire.client.DistributedSystem , times ( NUMBER ) ) . isConnected ( ) ; verify ( org.springframework.data.gemfire.client.DistributedSystem , times ( NUMBER ) ) . getProperties ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T extends org.springframework.data.gemfire.client.DistributedSystem > T T ( ) { return ( T ) org.springframework.data.gemfire.client.DistributedSystem ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = java.util.Properties ( STRING , STRING ) ; java.util.Properties java.util.Properties = java.util.Properties ( STRING , STRING ) ; final DistributedSystem org.springframework.data.gemfire.client.DistributedSystem = mock ( DistributedSystem .class ) ; when ( org.springframework.data.gemfire.client.DistributedSystem . isConnected ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.client.DistributedSystem . getProperties ( ) ) . thenReturn ( java.util.Properties ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T extends org.springframework.data.gemfire.client.DistributedSystem > T T ( ) { return ( T ) org.springframework.data.gemfire.client.DistributedSystem ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setProperties ( java.util.Properties ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolveProperties ( ) ; assertThat ( java.util.Properties , is ( sameInstance ( java.util.Properties ) ) ) ; verify ( org.springframework.data.gemfire.client.DistributedSystem , times ( NUMBER ) ) . isConnected ( ) ; verify ( org.springframework.data.gemfire.client.DistributedSystem , never ( ) ) . getProperties ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override < T extends org.springframework.data.gemfire.client.DistributedSystem > T T ( ) { return ( T ) org.springframework.data.gemfire.client.DistributedSystem ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = java.util.Properties ( STRING , STRING ) ; assertThat ( java.util.Properties . int ( ) , is ( equalTo ( NUMBER ) ) ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override < T extends org.springframework.data.gemfire.client.DistributedSystem > T T ( ) { return null ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setDurableClientId ( STRING ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setProperties ( java.util.Properties ) ; java.util.Properties java.util.Properties = org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolveProperties ( ) ; assertThat ( java.util.Properties , is ( sameInstance ( java.util.Properties ) ) ) ; assertThat ( java.util.Properties . int ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( java.util.Properties . java.lang.String ( DistributedSystemUtils . DURABLE_CLIENT_ID_PROPERTY_NAME ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override < T extends org.springframework.data.gemfire.client.DistributedSystem > T T ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.lang.Object java.lang.Object = new ClientCacheFactoryBean ( ) . createFactory ( java.util.Properties ) ; assertThat ( java.lang.Object , is ( instanceOf ( ClientCacheFactory .class ) ) ) ; assertThat ( java.util.Properties . boolean ( ) , is ( true ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = ( ClientCacheFactory ) java.lang.Object ; org.springframework.data.gemfire.client.ClientCacheFactory . set ( STRING , STRING ) ; assertThat ( java.util.Properties . boolean ( STRING ) , is ( true ) ) ; assertThat ( java.util.Properties . java.lang.String ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override org.springframework.data.gemfire.client.ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory ( final ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.client.ClientCacheFactory ; } @ java.lang.Override org.springframework.data.gemfire.client.ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory ( final ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.client.ClientCacheFactory ; } } ; assertThat ( ( ClientCacheFactory ) org.springframework.data.gemfire.client.ClientCacheFactoryBean . prepareFactory ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory ( final ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.client.ClientCacheFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory ( final ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; return org.springframework.data.gemfire.client.ClientCacheFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; PdxSerializer org.springframework.data.gemfire.client.PdxSerializer = mock ( PdxSerializer .class ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxDiskStoreName ( STRING ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxIgnoreUnreadFields ( false ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxPersistent ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxReadSerialized ( false ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxSerializer ( org.springframework.data.gemfire.client.PdxSerializer ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxDiskStoreName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxIgnoreUnreadFields ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxPersistent ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxReadSerialized ( ) , is ( false ) ) ; assertThat ( ( PdxSerializer ) org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxSerializer ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.PdxSerializer ) ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePdx ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPdxSerializer ( eq ( org.springframework.data.gemfire.client.PdxSerializer ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPdxDiskStore ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPdxIgnoreUnreadFields ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPdxPersistent ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPdxReadSerialized ( eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxReadSerialized ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxIgnoreUnreadFields ( true ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxDiskStoreName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxIgnoreUnreadFields ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxPersistent ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxReadSerialized ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxSerializer ( ) , is ( nullValue ( ) ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePdx ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . setPdxDiskStore ( anyString ( ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPdxIgnoreUnreadFields ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . setPdxPersistent ( anyBoolean ( ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPdxReadSerialized ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . setPdxSerializer ( any ( PdxSerializer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxDiskStoreName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxIgnoreUnreadFields ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxPersistent ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxReadSerialized ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPdxSerializer ( ) , is ( nullValue ( ) ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePdx ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.ClientCacheFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; try { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxSerializer ( java.lang.Object ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxReadSerialized ( false ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxPersistent ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxIgnoreUnreadFields ( false ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPdxDiskStoreName ( STRING ) ; org.springframework.data.gemfire.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.client.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expectMessage ( containsString ( java.lang.String . java.lang.String ( STRING , java.lang.Object ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePdx ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; } finally { verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . setPdxSerializer ( any ( PdxSerializer .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . setPdxDiskStore ( any ( java.lang.String .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . setPdxIgnoreUnreadFields ( any ( java.lang.Boolean .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . setPdxPersistent ( any ( java.lang.Boolean .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . setPdxReadSerialized ( any ( java.lang.Boolean .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.client.Pool . getFreeConnectionTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getIdleTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getLoadConditioningInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getLocators ( ) ) . thenReturn ( java.util.Collections .< java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) ) ; when ( org.springframework.data.gemfire.client.Pool . getMaxConnections ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getMinConnections ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getMultiuserAuthentication ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.Pool . getPRSingleHopEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.Pool . getPingInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getReadTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getRetryAttempts ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getServerGroup ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.Pool . getSocketBufferSize ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getStatisticInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getSubscriptionAckInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getSubscriptionEnabled ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.Pool . getSubscriptionMessageTrackingTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getSubscriptionRedundancy ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getThreadLocalConnections ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.client.Pool . getServers ( ) ) . thenReturn ( java.util.Arrays . java.util.List<java.net.InetSocketAddress> ( new java.net.InetSocketAddress ( STRING , NUMBER ) , new java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getFreeConnectionTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getIdleTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLoadConditioningInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMaxConnections ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMinConnections ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMultiUserAuthentication ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPingInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPrSingleHopEnabled ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getRetryAttempts ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServerGroup ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSocketBufferSize ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getStatisticsInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionAckInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionEnabled ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionMessageTrackingTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionRedundancy ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getThreadLocalConnections ( ) , is ( nullValue ( ) ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePool ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getFreeConnectionTimeout ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getIdleTimeout ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getLoadConditioningInterval ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getLocators ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getMaxConnections ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getMinConnections ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getMultiuserAuthentication ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getPRSingleHopEnabled ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getPingInterval ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getReadTimeout ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getRetryAttempts ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getServerGroup ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getSocketBufferSize ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getStatisticInterval ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getSubscriptionAckInterval ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getSubscriptionEnabled ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getSubscriptionMessageTrackingTimeout ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getSubscriptionRedundancy ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getThreadLocalConnections ( ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolFreeConnectionTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolIdleTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolLoadConditioningInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMaxConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMinConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMultiuserAuthentication ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolPRSingleHopEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolPingInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolReadTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolRetryAttempts ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolServerGroup ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSocketBufferSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolStatisticInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionAckInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionMessageTrackingTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionRedundancy ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolThreadLocalConnections ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolServer ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolServer ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . addPoolLocator ( anyString ( ) , anyInt ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setFreeConnectionTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setIdleTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setLoadConditioningInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMaxConnections ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMinConnections ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMultiUserAuthentication ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPingInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPrSingleHopEnabled ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setRetryAttempts ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setServerGroup ( STRING ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSocketBufferSize ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setStatisticsInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionAckInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionEnabled ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionMessageTrackingTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionRedundancy ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setThreadLocalConnections ( false ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . addLocators ( org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) , org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getFreeConnectionTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getIdleTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLoadConditioningInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMaxConnections ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMinConnections ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMultiUserAuthentication ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPingInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPrSingleHopEnabled ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getRetryAttempts ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServerGroup ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSocketBufferSize ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getStatisticsInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionAckInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionEnabled ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionMessageTrackingTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionRedundancy ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getThreadLocalConnections ( ) , is ( equalTo ( false ) ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePool ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.Pool ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolFreeConnectionTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolIdleTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolLoadConditioningInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMaxConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMinConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMultiuserAuthentication ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolPingInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolPRSingleHopEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolReadTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolRetryAttempts ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolServerGroup ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSocketBufferSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolStatisticInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionAckInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionMessageTrackingTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionRedundancy ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolThreadLocalConnections ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolLocator ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolLocator ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . addPoolServer ( anyString ( ) , anyInt ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.client.Pool . getFreeConnectionTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getIdleTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getLoadConditioningInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getLocators ( ) ) . thenReturn ( java.util.Collections .< java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) ) ; when ( org.springframework.data.gemfire.client.Pool . getMaxConnections ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getMinConnections ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getMultiuserAuthentication ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.client.Pool . getPingInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getPRSingleHopEnabled ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.client.Pool . getReadTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getRetryAttempts ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getServerGroup ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.client.Pool . getServers ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ; when ( org.springframework.data.gemfire.client.Pool . getSocketBufferSize ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getStatisticInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getSubscriptionAckInterval ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getSubscriptionEnabled ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.client.Pool . getSubscriptionMessageTrackingTimeout ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getSubscriptionRedundancy ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.gemfire.client.Pool . getThreadLocalConnections ( ) ) . thenReturn ( true ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setIdleTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMaxConnections ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMinConnections ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMultiUserAuthentication ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPrSingleHopEnabled ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setServerGroup ( STRING ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSocketBufferSize ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setStatisticsInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionAckInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionEnabled ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionRedundancy ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setThreadLocalConnections ( false ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . addLocators ( org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getFreeConnectionTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getIdleTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLoadConditioningInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMaxConnections ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMinConnections ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMultiUserAuthentication ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPingInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPrSingleHopEnabled ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getRetryAttempts ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServerGroup ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSocketBufferSize ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getStatisticsInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionAckInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionEnabled ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionMessageTrackingTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionRedundancy ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getThreadLocalConnections ( ) , is ( false ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePool ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getFreeConnectionTimeout ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getIdleTimeout ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getLoadConditioningInterval ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getLocators ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getMaxConnections ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getMinConnections ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getMultiuserAuthentication ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getPingInterval ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getPRSingleHopEnabled ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getReadTimeout ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getRetryAttempts ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getServerGroup ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getSocketBufferSize ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getStatisticInterval ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getSubscriptionAckInterval ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getSubscriptionEnabled ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getSubscriptionMessageTrackingTimeout ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getSubscriptionRedundancy ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getThreadLocalConnections ( ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolFreeConnectionTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolIdleTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolLoadConditioningInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMaxConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMinConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolMultiuserAuthentication ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolPingInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolPRSingleHopEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolReadTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolRetryAttempts ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolServerGroup ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSocketBufferSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolStatisticInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionAckInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionMessageTrackingTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . setPoolSubscriptionRedundancy ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolLocator ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . addPoolServer ( anyString ( ) , anyInt ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.client.Pool . getLocators ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ; when ( org.springframework.data.gemfire.client.Pool . getServers ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . addServers ( org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePool ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getLocators ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . addPoolLocator ( anyString ( ) , anyInt ( ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolServer ( eq ( STRING ) , eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.client.Pool . getLocators ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ; when ( org.springframework.data.gemfire.client.Pool . getServers ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . addLocators ( org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePool ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getLocators ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolLocator ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . addPoolServer ( anyString ( ) , anyInt ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.client.Pool . getLocators ( ) ) . thenReturn ( java.util.Collections .< java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) ) ; when ( org.springframework.data.gemfire.client.Pool . getServers ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePool ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . getLocators ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . addPoolLocator ( anyString ( ) , anyInt ( ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolServer ( eq ( STRING ) , eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.client.Pool . getLocators ( ) ) . thenReturn ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ; when ( org.springframework.data.gemfire.client.Pool . getServers ( ) ) . thenReturn ( java.util.Collections .< java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePool ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getLocators ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getServers ( ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolLocator ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . addPoolServer ( anyString ( ) , anyInt ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override org.springframework.data.gemfire.client.Pool org.springframework.data.gemfire.client.Pool ( ) { return null ; } } ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . initializePool ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCacheFactory ) ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , never ( ) ) . addPoolLocator ( anyString ( ) , anyInt ( ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . addPoolServer ( eq ( STRING ) , eq ( GemfireUtils . DEFAULT_CACHE_SERVER_PORT ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.Pool org.springframework.data.gemfire.client.Pool ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientCacheFactory org.springframework.data.gemfire.client.ClientCacheFactory = mock ( ClientCacheFactory .class ) ; when ( org.springframework.data.gemfire.client.ClientCacheFactory . create ( ) ) . thenReturn ( org.springframework.data.gemfire.client.ClientCache ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; assertThat ( ( ClientCache ) org.springframework.data.gemfire.client.ClientCacheFactoryBean . createCache ( org.springframework.data.gemfire.client.ClientCacheFactory ) , is ( sameInstance ( org.springframework.data.gemfire.client.ClientCache ) ) ) ; verify ( org.springframework.data.gemfire.client.ClientCacheFactory , times ( NUMBER ) ) . create ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.ClientCache ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolvePool ( ) , is ( equalTo ( org.springframework.data.gemfire.client.Pool ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override org.springframework.data.gemfire.client.Pool org.springframework.data.gemfire.client.Pool ( java.lang.String java.lang.String ) { assertThat ( java.lang.String , is ( equalTo ( STRING ) ) ) ; return org.springframework.data.gemfire.client.Pool ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPoolName ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolvePool ( ) , is ( equalTo ( org.springframework.data.gemfire.client.Pool ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.Pool ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.Pool org.springframework.data.gemfire.client.Pool ( java.lang.String java.lang.String ) { assertThat ( java.lang.String , is ( equalTo ( STRING ) ) ) ; return org.springframework.data.gemfire.client.Pool ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override org.springframework.data.gemfire.client.Pool org.springframework.data.gemfire.client.Pool ( java.lang.String java.lang.String ) { assertThat ( java.lang.String , is ( equalTo ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ) ; return org.springframework.data.gemfire.client.Pool ; } } ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolvePool ( ) , is ( equalTo ( org.springframework.data.gemfire.client.Pool ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.Pool ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.client.Pool org.springframework.data.gemfire.client.Pool ( java.lang.String java.lang.String ) { assertThat ( java.lang.String , is ( equalTo ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ) ; return org.springframework.data.gemfire.client.Pool ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListableBeanFactory org.springframework.data.gemfire.client.ListableBeanFactory = mock ( ListableBeanFactory .class ) ; Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = mock ( PoolFactoryBean .class ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> < java.lang.String , PoolFactoryBean > java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> = java.util.Collections . java.util.Map ( STRING , org.springframework.data.gemfire.client.PoolFactoryBean ) ; when ( org.springframework.data.gemfire.client.ListableBeanFactory . getBeansOfType ( eq ( PoolFactoryBean .class ) , eq ( false ) , eq ( false ) ) ) . thenReturn ( java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> ) ; when ( org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ) . thenReturn ( org.springframework.data.gemfire.client.Pool ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setBeanFactory ( org.springframework.data.gemfire.client.ListableBeanFactory ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPoolName ( STRING ) ; assertThat ( ( ListableBeanFactory ) org.springframework.data.gemfire.client.ClientCacheFactoryBean . getBeanFactory ( ) , is ( equalTo ( org.springframework.data.gemfire.client.ListableBeanFactory ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolvePool ( ) , is ( equalTo ( org.springframework.data.gemfire.client.Pool ) ) ) ; verify ( org.springframework.data.gemfire.client.ListableBeanFactory , times ( NUMBER ) ) . getBeansOfType ( eq ( PoolFactoryBean .class ) , eq ( false ) , eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactoryBean , times ( NUMBER ) ) . getPool ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListableBeanFactory org.springframework.data.gemfire.client.ListableBeanFactory = mock ( ListableBeanFactory .class ) ; Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = mock ( PoolFactoryBean .class ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> < java.lang.String , PoolFactoryBean > java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> = java.util.Collections . java.util.Map ( STRING , org.springframework.data.gemfire.client.PoolFactoryBean ) ; when ( org.springframework.data.gemfire.client.ListableBeanFactory . getBeansOfType ( eq ( PoolFactoryBean .class ) , eq ( false ) , eq ( false ) ) ) . thenReturn ( java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> ) ; when ( org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ) . thenReturn ( org.springframework.data.gemfire.client.Pool ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setBeanFactory ( org.springframework.data.gemfire.client.ListableBeanFactory ) ; assertThat ( ( ListableBeanFactory ) org.springframework.data.gemfire.client.ClientCacheFactoryBean . getBeanFactory ( ) , is ( equalTo ( org.springframework.data.gemfire.client.ListableBeanFactory ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolvePool ( ) , is ( equalTo ( org.springframework.data.gemfire.client.Pool ) ) ) ; verify ( org.springframework.data.gemfire.client.ListableBeanFactory , times ( NUMBER ) ) . getBeansOfType ( eq ( PoolFactoryBean .class ) , eq ( false ) , eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactoryBean , times ( NUMBER ) ) . getPool ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListableBeanFactory org.springframework.data.gemfire.client.ListableBeanFactory = mock ( ListableBeanFactory .class ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> < java.lang.String , PoolFactoryBean > java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> = java.util.Collections . java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> ( ) ; when ( org.springframework.data.gemfire.client.ListableBeanFactory . getBeansOfType ( eq ( PoolFactoryBean .class ) , eq ( false ) , eq ( false ) ) ) . thenReturn ( java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setBeanFactory ( org.springframework.data.gemfire.client.ListableBeanFactory ) ; assertThat ( ( ListableBeanFactory ) org.springframework.data.gemfire.client.ClientCacheFactoryBean . getBeanFactory ( ) , is ( equalTo ( org.springframework.data.gemfire.client.ListableBeanFactory ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolvePool ( ) , is ( nullValue ( ) ) ) ; verify ( org.springframework.data.gemfire.client.ListableBeanFactory , times ( NUMBER ) ) . getBeansOfType ( eq ( PoolFactoryBean .class ) , eq ( false ) , eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListableBeanFactory org.springframework.data.gemfire.client.ListableBeanFactory = mock ( ListableBeanFactory .class ) ; Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = mock ( PoolFactoryBean .class ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> < java.lang.String , PoolFactoryBean > java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> = java.util.Collections . java.util.Map ( STRING , org.springframework.data.gemfire.client.PoolFactoryBean ) ; when ( org.springframework.data.gemfire.client.ListableBeanFactory . getBeansOfType ( eq ( PoolFactoryBean .class ) , eq ( false ) , eq ( false ) ) ) . thenReturn ( java.util.Map<java.lang.String,org.springframework.data.gemfire.client.PoolFactoryBean> ) ; when ( org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ) . thenReturn ( org.springframework.data.gemfire.client.Pool ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setBeanFactory ( org.springframework.data.gemfire.client.ListableBeanFactory ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPoolName ( STRING ) ; assertThat ( ( ListableBeanFactory ) org.springframework.data.gemfire.client.ClientCacheFactoryBean . getBeanFactory ( ) , is ( equalTo ( org.springframework.data.gemfire.client.ListableBeanFactory ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolvePool ( ) , is ( nullValue ( ) ) ) ; verify ( org.springframework.data.gemfire.client.ListableBeanFactory , times ( NUMBER ) ) . getBeansOfType ( eq ( PoolFactoryBean .class ) , eq ( false ) , eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactoryBean , never ( ) ) . getPool ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.Pool ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.client.BeanFactory = mock ( BeanFactory .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setBeanFactory ( org.springframework.data.gemfire.client.BeanFactory ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getBeanFactory ( ) , is ( equalTo ( org.springframework.data.gemfire.client.BeanFactory ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . resolvePool ( ) , is ( nullValue ( ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( true ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . onApplicationEvent ( mock ( ContextRefreshedEvent .class , STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . readyForEvents ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; doThrow ( new java.lang.RuntimeException ( STRING ) ) . when ( org.springframework.data.gemfire.client.ClientCache ) . readyForEvents ( ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( false ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( false ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . onApplicationEvent ( mock ( ContextRefreshedEvent .class , STRING ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , never ( ) ) . readyForEvents ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; doThrow ( new java.lang.IllegalStateException ( STRING ) ) . when ( org.springframework.data.gemfire.client.ClientCache ) . readyForEvents ( ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( true ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . onApplicationEvent ( mock ( ContextRefreshedEvent .class ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . readyForEvents ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { throw new CacheClosedException ( STRING ) ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( true ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . onApplicationEvent ( mock ( ContextRefreshedEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { throw new CacheClosedException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setKeepAlive ( true ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isKeepAlive ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . close ( org.springframework.data.gemfire.client.ClientCache ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . close ( eq ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setKeepAlive ( false ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isKeepAlive ( ) , is ( false ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . close ( org.springframework.data.gemfire.client.ClientCache ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . close ( eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new ClientCacheFactoryBean ( ) . getEnableAutoReconnect ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { new ClientCacheFactoryBean ( ) . setEnableAutoReconnect ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new ClientCacheFactoryBean ( ) . getUseClusterConfiguration ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { new ClientCacheFactoryBean ( ) . setUseClusterConfiguration ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getKeepAlive ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isKeepAlive ( ) , is ( false ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setKeepAlive ( true ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getKeepAlive ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isKeepAlive ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setKeepAlive ( null ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getKeepAlive ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isKeepAlive ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPool ( null ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPool ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPoolName ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( equalTo ( STRING ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPoolName ( null ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPoolName ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getFreeConnectionTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getIdleTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLoadConditioningInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMaxConnections ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMinConnections ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMultiUserAuthentication ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPingInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPrSingleHopEnabled ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getRetryAttempts ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServerGroup ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSocketBufferSize ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getStatisticsInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionAckInterval ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionEnabled ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionMessageTrackingTimeout ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionRedundancy ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getThreadLocalConnections ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setFreeConnectionTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setIdleTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setLoadConditioningInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMaxConnections ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMinConnections ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setMultiUserAuthentication ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPingInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setPrSingleHopEnabled ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setRetryAttempts ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setServerGroup ( STRING ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSocketBufferSize ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setStatisticsInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionAckInterval ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionEnabled ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionMessageTrackingTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setSubscriptionRedundancy ( NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setThreadLocalConnections ( false ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getFreeConnectionTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getIdleTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLoadConditioningInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMaxConnections ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMinConnections ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getMultiUserAuthentication ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPingInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getPrSingleHopEnabled ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getRetryAttempts ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServerGroup ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSocketBufferSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getStatisticsInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionAckInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionEnabled ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionMessageTrackingTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getSubscriptionRedundancy ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getThreadLocalConnections ( ) , is ( equalTo ( false ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( true ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( null ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( false ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.client.ClientCache org.springframework.data.gemfire.client.ClientCache ( java.lang.String java.lang.String ) { ClientCache org.springframework.data.gemfire.client.ClientCache = mock ( ClientCache .class ) ; DistributedSystem org.springframework.data.gemfire.client.DistributedSystem = mock ( DistributedSystem .class ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( DistributedSystemUtils . DURABLE_CLIENT_ID_PROPERTY_NAME , java.lang.String ) ; java.util.Properties . java.lang.Object ( DistributedSystemUtils . DURABLE_CLIENT_TIMEOUT_PROPERTY_NAME , STRING ) ; when ( org.springframework.data.gemfire.client.ClientCache . getDistributedSystem ( ) ) . thenReturn ( org.springframework.data.gemfire.client.DistributedSystem ) ; when ( org.springframework.data.gemfire.client.DistributedSystem . isConnected ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.client.DistributedSystem . getProperties ( ) ) . thenReturn ( java.util.Properties ) ; return org.springframework.data.gemfire.client.ClientCache ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final ClientCache org.springframework.data.gemfire.client.ClientCache = org.springframework.data.gemfire.client.ClientCache ( STRING ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( true ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( true ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.ClientCache ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final ClientCache org.springframework.data.gemfire.client.ClientCache = org.springframework.data.gemfire.client.ClientCache ( STRING ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; } } ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setReadyForEvents ( false ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( false ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.client.ClientCache ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { throw new CacheClosedException ( STRING ) ; } } ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { throw new CacheClosedException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final ClientCache org.springframework.data.gemfire.client.ClientCache = org.springframework.data.gemfire.client.ClientCache ( STRING ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; } } ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . getDistributedSystem ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final ClientCache org.springframework.data.gemfire.client.ClientCache = org.springframework.data.gemfire.client.ClientCache ( STRING ) ; ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) { @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; } } ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getReadyForEvents ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . isReadyForEvents ( ) , is ( false ) ) ; verify ( org.springframework.data.gemfire.client.ClientCache , times ( NUMBER ) ) . getDistributedSystem ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T extends org.springframework.data.gemfire.client.GemFireCache > T T ( ) { return ( T ) org.springframework.data.gemfire.client.ClientCache ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . addLocators ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . addLocators ( org.springframework.data.gemfire.client.ConnectionEndpoint , org.springframework.data.gemfire.client.ConnectionEndpoint ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setLocators ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setLocators ( java.util.Collections .< ConnectionEndpoint > java.util.List<org.springframework.data.gemfire.client.ConnectionEndpoint> ( ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . addServers ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . addServers ( org.springframework.data.gemfire.client.ConnectionEndpoint , org.springframework.data.gemfire.client.ConnectionEndpoint ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setServers ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setServers ( java.util.Collections .< ConnectionEndpoint > java.util.List<org.springframework.data.gemfire.client.ConnectionEndpoint> ( ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCacheFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
