<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , true , false ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , boolean boolean , boolean boolean )			throws java.lang.Exception { UserTransaction org.springframework.transaction.UserTransaction = mock ( UserTransaction .class ) ; TransactionManager org.springframework.transaction.TransactionManager = mock ( TransactionManager .class ) ; if ( boolean ) { given ( org.springframework.transaction.UserTransaction . getStatus ( ) ) . willReturn ( Status . STATUS_NO_TRANSACTION , Status . STATUS_ACTIVE , Status . STATUS_ACTIVE ) ; } else { given ( org.springframework.transaction.TransactionManager . getStatus ( ) ) . willReturn ( Status . STATUS_NO_TRANSACTION , Status . STATUS_ACTIVE , Status . STATUS_ACTIVE ) ; } JtaTransactionManager org.springframework.transaction.JtaTransactionManager = new JtaTransactionManager ( ) ; ExpectedLookupTemplate org.springframework.transaction.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; if ( boolean ) { org.springframework.transaction.ExpectedLookupTemplate . addObject ( STRING , org.springframework.transaction.UserTransaction ) ; } org.springframework.transaction.ExpectedLookupTemplate . addObject ( java.lang.String , org.springframework.transaction.TransactionManager ) ; org.springframework.transaction.JtaTransactionManager . setJndiTemplate ( org.springframework.transaction.ExpectedLookupTemplate ) ; org.springframework.transaction.JtaTransactionManager . afterPropertiesSet ( ) ; if ( boolean ) { assertEquals ( org.springframework.transaction.TransactionManager , org.springframework.transaction.JtaTransactionManager . getTransactionManager ( ) ) ; } else { assertNull ( org.springframework.transaction.JtaTransactionManager . getTransactionManager ( ) ) ; } if ( boolean ) { assertEquals ( org.springframework.transaction.UserTransaction , org.springframework.transaction.JtaTransactionManager . getUserTransaction ( ) ) ; } else { assertTrue ( org.springframework.transaction.JtaTransactionManager . getUserTransaction ( ) instanceof UserTransactionAdapter ) ; UserTransactionAdapter org.springframework.transaction.UserTransactionAdapter = ( UserTransactionAdapter ) org.springframework.transaction.JtaTransactionManager . getUserTransaction ( ) ; assertEquals ( org.springframework.transaction.TransactionManager , org.springframework.transaction.UserTransactionAdapter . getTransactionManager ( ) ) ; } TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.transaction.JtaTransactionManager ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } } ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; if ( boolean ) { verify ( org.springframework.transaction.UserTransaction ) . begin ( ) ; verify ( org.springframework.transaction.UserTransaction ) . commit ( ) ; } else { verify ( org.springframework.transaction.TransactionManager ) . begin ( ) ; verify ( org.springframework.transaction.TransactionManager ) . commit ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UserTransaction org.springframework.transaction.UserTransaction = mock ( UserTransaction .class ) ; given ( org.springframework.transaction.UserTransaction . getStatus ( ) ) . willReturn ( Status . STATUS_NO_TRANSACTION , Status . STATUS_ACTIVE , Status . STATUS_ACTIVE ) ; TransactionManager org.springframework.transaction.TransactionManager = mock ( TransactionManager .class ) ; JtaTransactionManager org.springframework.transaction.JtaTransactionManager = new JtaTransactionManager ( ) ; org.springframework.transaction.JtaTransactionManager . setUserTransactionName ( STRING ) ; org.springframework.transaction.JtaTransactionManager . setTransactionManagerName ( STRING ) ; ExpectedLookupTemplate org.springframework.transaction.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; org.springframework.transaction.ExpectedLookupTemplate . addObject ( STRING , org.springframework.transaction.UserTransaction ) ; org.springframework.transaction.ExpectedLookupTemplate . addObject ( STRING , org.springframework.transaction.TransactionManager ) ; org.springframework.transaction.JtaTransactionManager . setJndiTemplate ( org.springframework.transaction.ExpectedLookupTemplate ) ; org.springframework.transaction.JtaTransactionManager . afterPropertiesSet ( ) ; assertEquals ( org.springframework.transaction.UserTransaction , org.springframework.transaction.JtaTransactionManager . getUserTransaction ( ) ) ; assertEquals ( org.springframework.transaction.TransactionManager , org.springframework.transaction.JtaTransactionManager . getTransactionManager ( ) ) ; TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.transaction.JtaTransactionManager ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } } ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; verify ( org.springframework.transaction.UserTransaction ) . begin ( ) ; verify ( org.springframework.transaction.UserTransaction ) . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UserTransaction org.springframework.transaction.UserTransaction = mock ( UserTransaction .class ) ; given ( org.springframework.transaction.UserTransaction . getStatus ( ) ) . willReturn ( Status . STATUS_NO_TRANSACTION , Status . STATUS_ACTIVE , Status . STATUS_ACTIVE ) ; UserTransaction org.springframework.transaction.UserTransaction = mock ( UserTransaction .class ) ; given ( org.springframework.transaction.UserTransaction . getStatus ( ) ) . willReturn ( Status . STATUS_NO_TRANSACTION , Status . STATUS_ACTIVE , Status . STATUS_ACTIVE ) ; JtaTransactionManager org.springframework.transaction.JtaTransactionManager = new JtaTransactionManager ( ) ; org.springframework.transaction.JtaTransactionManager . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , org.springframework.transaction.UserTransaction ) ) ; org.springframework.transaction.JtaTransactionManager . setCacheUserTransaction ( false ) ; org.springframework.transaction.JtaTransactionManager . afterPropertiesSet ( ) ; assertEquals ( org.springframework.transaction.UserTransaction , org.springframework.transaction.JtaTransactionManager . getUserTransaction ( ) ) ; TransactionTemplate org.springframework.transaction.TransactionTemplate = new TransactionTemplate ( org.springframework.transaction.JtaTransactionManager ) ; assertEquals ( JtaTransactionManager . SYNCHRONIZATION_ALWAYS , org.springframework.transaction.JtaTransactionManager . getTransactionSynchronization ( ) ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } } ) ; org.springframework.transaction.JtaTransactionManager . setJndiTemplate ( new ExpectedLookupTemplate ( STRING , org.springframework.transaction.UserTransaction ) ) ; org.springframework.transaction.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } } ) ; assertTrue ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; verify ( org.springframework.transaction.UserTransaction ) . begin ( ) ; verify ( org.springframework.transaction.UserTransaction ) . commit ( ) ; verify ( org.springframework.transaction.UserTransaction ) . begin ( ) ; verify ( org.springframework.transaction.UserTransaction ) . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.transaction.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertNull ( TransactionSynchronizationManager . getCurrentTransactionName ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; }  <METHOD_END>
