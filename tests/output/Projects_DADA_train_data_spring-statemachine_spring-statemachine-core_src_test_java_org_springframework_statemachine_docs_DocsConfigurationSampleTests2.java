<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.docs.AnnotationConfigApplicationContext org.springframework.statemachine.docs.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withInternal ( ) . source ( STRING ) . action ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TimerAction ( ) ) . timer ( NUMBER ) . and ( ) . withInternal ( ) . source ( STRING ) . action ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TimerAction ( ) ) . timerOnce ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TimerAction org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TimerAction ( ) { return new org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TimerAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateContext<java.lang.String,java.lang.String> ) { }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( scopeName = STRING , proxyMode = ScopedProxyMode . TARGET_CLASS ) org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . autoStartup ( true ) . taskExecutor ( new SyncTaskExecutor ( ) ) ; org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.docs.Builder<java.lang.String,java.lang.String> . build ( ) ; return org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . POST ) public org.springframework.statemachine.docs.HttpEntity<java.lang.Void> < java.lang.Void > org.springframework.statemachine.docs.HttpEntity<java.lang.Void> ( @ RequestParam ( STRING ) java.lang.String java.lang.String ) { org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( java.lang.String ) ; return new ResponseEntity < java.lang.Void > ( HttpStatus . ACCEPTED ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) @ ResponseBody public java.lang.String java.lang.String ( ) { return org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getId ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.Config5 .class , org.springframework.statemachine.docs.DocsConfigurationSampleTests2.ExecutorConfig .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener = new org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener ( ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.Config5 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener = new org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener ( ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.Config6 .class , org.springframework.statemachine.docs.DocsConfigurationSampleTests2.ExecutorConfig .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener = new org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener ( ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.Config6 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener = new org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener ( ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . void ( NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.docs.DocsConfigurationSampleTests2.TestListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME ) public org.springframework.statemachine.docs.TaskExecutor org.springframework.statemachine.docs.TaskExecutor ( ) { ThreadPoolTaskExecutor org.springframework.statemachine.docs.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; org.springframework.statemachine.docs.ThreadPoolTaskExecutor . setCorePoolSize ( NUMBER ) ; return org.springframework.statemachine.docs.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING , STRING ) . state ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING , STRING ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING , STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.docs.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > org.springframework.statemachine.docs.State<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.docs.State<java.lang.String,java.lang.String> ) { if ( org.springframework.statemachine.docs.State<java.lang.String,java.lang.String> . getId ( ) . equals ( STRING ) ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
