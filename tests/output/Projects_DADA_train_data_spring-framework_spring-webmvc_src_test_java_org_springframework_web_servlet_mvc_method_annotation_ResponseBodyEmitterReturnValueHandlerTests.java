<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = java.util.Arrays . java.util.List ( new StringHttpMessageConverter ( ) , new MappingJackson2HttpMessageConverter ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler = new ResponseBodyEmitterReturnValueHandler ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; AsyncWebRequest org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest = new StandardServletAsyncWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . setAsyncWebRequest ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAsyncSupported ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ) ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ) ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ) ) ; assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ) ) ; assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ) ) ; assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ; ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = new ResponseBodyEmitter ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean = new org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . send ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean ) ; assertEquals ( STRING + STRING + STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; MockAsyncContext org.springframework.web.servlet.mvc.method.annotation.MockAsyncContext = ( MockAsyncContext ) this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAsyncContext ( ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.MockAsyncContext . getDispatchedPath ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . complete ( ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.MockAsyncContext . getDispatchedPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AsyncWebRequest org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest = mock ( AsyncWebRequest .class ) ; WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) . setAsyncWebRequest ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) ; ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = new ResponseBodyEmitter ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . onTimeout ( mock ( java.lang.Runnable .class ) ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . onCompletion ( mock ( java.lang.Runnable .class ) ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ; void ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) . setTimeout ( NUMBER ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) . addTimeoutHandler ( any ( java.lang.Runnable .class ) ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest , times ( NUMBER ) ) . addCompletionHandler ( any ( java.lang.Runnable .class ) ) ; verify ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) . startAsync ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ; SseEmitter org.springframework.web.servlet.mvc.method.annotation.SseEmitter = new SseEmitter ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.SseEmitter , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentType ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean = new org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean = new org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean . void ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.SseEmitter . send ( SseEmitter . event ( ) . comment ( STRING ) . name ( STRING ) . id ( STRING ) . reconnectTime ( NUMBER ) . data ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean ) . data ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.SimpleBean ) ) ; assertEquals ( STRING + STRING + STRING + STRING + STRING + STRING + STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ; ResponseEntity < SseEmitter > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.SseEmitter> = ResponseEntity . ok ( ) . header ( STRING , STRING ) . body ( new SseEmitter ( ) ) ; void ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.SseEmitter> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentType ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ; ResponseEntity < ? > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<?> = ResponseEntity . noContent ( ) . header ( STRING , STRING ) . build ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeaders ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) throws java.lang.Exception { ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( java.lang.String java.lang.String ) throws java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandlerTests.TestController .class . java.lang.reflect.Method ( java.lang.String ) ; return new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter> < ResponseBodyEmitter > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter> ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.SseEmitter org.springframework.web.servlet.mvc.method.annotation.SseEmitter ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.SseEmitter> < SseEmitter > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.SseEmitter> ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.util.concurrent.atomic.AtomicReference<java.lang.String>> < java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.util.concurrent.atomic.AtomicReference<java.lang.String>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity org.springframework.web.servlet.mvc.method.annotation.ResponseEntity ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
