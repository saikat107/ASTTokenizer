<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfigurationTests.TestConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ) . isNotNull ( ) ; Mongo org.springframework.boot.autoconfigure.data.mongo.Mongo = this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( Mongo .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.mongo.Mongo ) . isInstanceOf ( MongoClient .class ) ; MongoMappingContext org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext = this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( MongoMappingContext .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Set<? extends java.lang.Class<?>> < ? extends java.lang.Class<?> < ? > > java.util.Set<? extends java.lang.Class<?>> = ( java.util.Set<? extends java.lang.Class<?>> < ? extends java.lang.Class<?> < ? > > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext , STRING ) ; assertThat ( java.util.Set<> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfigurationTests.EmptyConfiguration .class ) ; Mongo org.springframework.boot.autoconfigure.data.mongo.Mongo = this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( Mongo .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.mongo.Mongo ) . isInstanceOf ( MongoClient .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfigurationTests.CustomizedConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( CityMongoDbRepository .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { void ( org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfigurationTests.SortOfInvalidCustomConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . register ( MongoAutoConfiguration .class , MongoDataAutoConfiguration .class , MongoRepositoriesAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.mongo.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
