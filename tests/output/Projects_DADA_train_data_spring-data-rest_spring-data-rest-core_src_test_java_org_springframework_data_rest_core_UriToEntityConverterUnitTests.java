<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.core.KeyValueMappingContext<?,?> = new KeyValueMappingContext <> ( ) ; this . org.springframework.data.rest.core.KeyValueMappingContext<,> . setInitialEntitySet ( new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( org.springframework.data.rest.core.UriToEntityConverterUnitTests.Entity .class , org.springframework.data.rest.core.UriToEntityConverterUnitTests.NonEntity .class ) ) ) ; this . org.springframework.data.rest.core.KeyValueMappingContext<,> . afterPropertiesSet ( ) ; this . org.springframework.data.rest.core.UriToEntityConverter = new UriToEntityConverter ( new PersistentEntities ( java.util.Arrays . java.util.List ( this . org.springframework.data.rest.core.KeyValueMappingContext<,> ) ) , org.springframework.data.rest.core.RepositoryInvokerFactory , org.springframework.data.rest.core.Repositories ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<org.springframework.data.rest.core.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.data.rest.core.ConvertiblePair> = org.springframework.data.rest.core.UriToEntityConverter . getConvertibleTypes ( ) ; assertThat ( java.util.Set<org.springframework.data.rest.core.ConvertiblePair> ) . contains ( new ConvertiblePair ( java.net.URI .class , org.springframework.data.rest.core.UriToEntityConverterUnitTests.Entity .class ) ) ; assertThat ( java.util.Set<org.springframework.data.rest.core.ConvertiblePair> ) . doesNotContain ( new ConvertiblePair ( java.net.URI .class , org.springframework.data.rest.core.UriToEntityConverterUnitTests.NonEntity .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.rest.core.UriToEntityConverter . matches ( org.springframework.data.rest.core.TypeDescriptor , org.springframework.data.rest.core.TypeDescriptor ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( java.util.Optional . java.util.Optional ( mock ( RepositoryInformation .class ) ) ) . when ( org.springframework.data.rest.core.Repositories ) . getRepositoryInformationFor ( org.springframework.data.rest.core.TypeDescriptor . getType ( ) ) ; assertThat ( org.springframework.data.rest.core.UriToEntityConverter . matches ( org.springframework.data.rest.core.TypeDescriptor , org.springframework.data.rest.core.TypeDescriptor ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.rest.core.UriToEntityConverter . matches ( org.springframework.data.rest.core.TypeDescriptor , TypeDescriptor . valueOf ( org.springframework.data.rest.core.UriToEntityConverterUnitTests.NonEntity .class ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.core.UriToEntityConverterUnitTests.Entity org.springframework.data.rest.core.UriToEntityConverterUnitTests.Entity = new org.springframework.data.rest.core.UriToEntityConverterUnitTests.Entity ( ) ; RepositoryInvoker org.springframework.data.rest.core.RepositoryInvoker = mock ( RepositoryInvoker .class ) ; doReturn ( java.util.Optional . java.util.Optional<org.springframework.data.rest.core.UriToEntityConverterUnitTests.Entity> ( org.springframework.data.rest.core.UriToEntityConverterUnitTests.Entity ) ) . when ( org.springframework.data.rest.core.RepositoryInvoker ) . invokeFindOne ( STRING ) ; doReturn ( org.springframework.data.rest.core.RepositoryInvoker ) . when ( org.springframework.data.rest.core.RepositoryInvokerFactory ) . getInvokerFor ( org.springframework.data.rest.core.TypeDescriptor . getType ( ) ) ; assertThat ( org.springframework.data.rest.core.UriToEntityConverter . convert ( java.net.URI . java.net.URI ( STRING ) , org.springframework.data.rest.core.TypeDescriptor , org.springframework.data.rest.core.TypeDescriptor ) ) . isEqualTo ( ( java.lang.Object ) org.springframework.data.rest.core.UriToEntityConverterUnitTests.Entity ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.data.rest.core.UriToEntityConverter . convert ( java.net.URI . java.net.URI ( STRING ) , org.springframework.data.rest.core.TypeDescriptor , org.springframework.data.rest.core.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.data.rest.core.UriToEntityConverter . convert ( java.net.URI . java.net.URI ( STRING ) , org.springframework.data.rest.core.TypeDescriptor , org.springframework.data.rest.core.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new UriToEntityConverter ( null , org.springframework.data.rest.core.RepositoryInvokerFactory , org.springframework.data.rest.core.Repositories ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new UriToEntityConverter ( mock ( PersistentEntities .class ) , null , org.springframework.data.rest.core.Repositories ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new UriToEntityConverter ( mock ( PersistentEntities .class ) , org.springframework.data.rest.core.RepositoryInvokerFactory , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntities org.springframework.data.rest.core.PersistentEntities = mock ( PersistentEntities .class ) ; doReturn ( Streamable . of ( ClassTypeInformation . OBJECT ) ) . when ( org.springframework.data.rest.core.PersistentEntities ) . getManagedTypes ( ) ; new UriToEntityConverter ( org.springframework.data.rest.core.PersistentEntities , org.springframework.data.rest.core.RepositoryInvokerFactory , org.springframework.data.rest.core.Repositories ) ; }  <METHOD_END>
