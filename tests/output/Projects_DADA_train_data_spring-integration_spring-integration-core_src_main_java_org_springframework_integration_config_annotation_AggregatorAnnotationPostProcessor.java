<METHOD_START> public void ( ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) { super( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.annotation.MessageHandler org.springframework.integration.config.annotation.MessageHandler ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { MethodInvokingMessageGroupProcessor org.springframework.integration.config.annotation.MethodInvokingMessageGroupProcessor = new MethodInvokingMessageGroupProcessor ( java.lang.Object , java.lang.reflect.Method ) ; org.springframework.integration.config.annotation.MethodInvokingMessageGroupProcessor . setBeanFactory ( this . beanFactory ) ; MethodInvokingReleaseStrategy org.springframework.integration.config.annotation.MethodInvokingReleaseStrategy = null ; java.lang.reflect.Method java.lang.reflect.Method = MessagingAnnotationUtils . findAnnotatedMethod ( java.lang.Object , ReleaseStrategy .class ) ; if ( java.lang.reflect.Method != null ) { org.springframework.integration.config.annotation.MethodInvokingReleaseStrategy = new MethodInvokingReleaseStrategy ( java.lang.Object , java.lang.reflect.Method ) ; } MethodInvokingCorrelationStrategy org.springframework.integration.config.annotation.MethodInvokingCorrelationStrategy = null ; java.lang.reflect.Method java.lang.reflect.Method = MessagingAnnotationUtils . findAnnotatedMethod ( java.lang.Object , CorrelationStrategy .class ) ; if ( java.lang.reflect.Method != null ) { org.springframework.integration.config.annotation.MethodInvokingCorrelationStrategy = new MethodInvokingCorrelationStrategy ( java.lang.Object , java.lang.reflect.Method ) ; } AggregatingMessageHandler org.springframework.integration.config.annotation.AggregatingMessageHandler = new AggregatingMessageHandler ( org.springframework.integration.config.annotation.MethodInvokingMessageGroupProcessor , new SimpleMessageStore ( ) , org.springframework.integration.config.annotation.MethodInvokingCorrelationStrategy , org.springframework.integration.config.annotation.MethodInvokingReleaseStrategy ) ; java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.AggregatingMessageHandler . setDiscardChannelName ( java.lang.String ) ; } java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.AggregatingMessageHandler . setOutputChannelName ( java.lang.String ) ; } java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( java.lang.String != null ) { org.springframework.integration.config.annotation.AggregatingMessageHandler . setSendPartialResultOnExpiry ( java.lang.Boolean . boolean ( this . beanFactory . resolveEmbeddedValue ( java.lang.String ) ) ) ; } org.springframework.integration.config.annotation.AggregatingMessageHandler . setBeanFactory ( this . beanFactory ) ; return org.springframework.integration.config.annotation.AggregatingMessageHandler ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
