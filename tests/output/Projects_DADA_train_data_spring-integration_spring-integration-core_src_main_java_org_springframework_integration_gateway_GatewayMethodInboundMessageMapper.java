<METHOD_START> void ( java.lang.reflect.Method java.lang.reflect.Method ) { this( java.lang.reflect.Method , null ); }  <METHOD_END>
<METHOD_START> void ( java.lang.reflect.Method java.lang.reflect.Method , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ) { this( java.lang.reflect.Method , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> , null , null , null ); }  <METHOD_END>
<METHOD_START> void ( java.lang.reflect.Method java.lang.reflect.Method , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> , MethodArgsMessageMapper org.springframework.integration.gateway.MethodArgsMessageMapper , MessageBuilderFactory org.springframework.integration.gateway.MessageBuilderFactory ) { this( java.lang.reflect.Method , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> , null , org.springframework.integration.gateway.MethodArgsMessageMapper , org.springframework.integration.gateway.MessageBuilderFactory ); }  <METHOD_END>
<METHOD_START> void ( java.lang.reflect.Method java.lang.reflect.Method , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , MethodArgsMessageMapper org.springframework.integration.gateway.MethodArgsMessageMapper , MessageBuilderFactory org.springframework.integration.gateway.MessageBuilderFactory ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> = java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; this . java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> = java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ; this . java.util.List<org.springframework.integration.gateway.MethodParameter> = java.util.List<org.springframework.integration.gateway.MethodParameter> ( java.lang.reflect.Method ) ; this . org.springframework.integration.gateway.Expression = org.springframework.integration.gateway.Expression ( java.lang.reflect.Method ) ; if ( org.springframework.integration.gateway.MethodArgsMessageMapper == null ) { this . org.springframework.integration.gateway.MethodArgsMessageMapper = new org.springframework.integration.gateway.GatewayMethodInboundMessageMapper.DefaultMethodArgsMessageMapper ( ) ; } else { this . org.springframework.integration.gateway.MethodArgsMessageMapper = org.springframework.integration.gateway.MethodArgsMessageMapper ; } if ( org.springframework.integration.gateway.MessageBuilderFactory == null ) { this . org.springframework.integration.gateway.MessageBuilderFactory = new DefaultMessageBuilderFactory ( ) ; } else { this . org.springframework.integration.gateway.MessageBuilderFactory = org.springframework.integration.gateway.MessageBuilderFactory ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.gateway.Expression = org.springframework.integration.gateway.SpelExpressionParser . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final BeanFactory org.springframework.integration.gateway.BeanFactory ) { if ( org.springframework.integration.gateway.BeanFactory != null ) { this . org.springframework.integration.gateway.BeanFactory = org.springframework.integration.gateway.BeanFactory ; this . org.springframework.integration.gateway.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( org.springframework.integration.gateway.BeanFactory ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( java.lang.Object [] java.lang.Object[] ) { Assert . notNull ( java.lang.Object[] , STRING ) ; if ( java.lang.Object[] . int != this . java.util.List<org.springframework.integration.gateway.MethodParameter> . size ( ) ) { java.lang.String java.lang.String = ( java.lang.Object[] . int < this . java.util.List<org.springframework.integration.gateway.MethodParameter> . size ( ) ) ? STRING : STRING ; throw new java.lang.IllegalArgumentException ( java.lang.String + STRING + this . java.lang.reflect.Method + STRING + this . java.util.List<org.springframework.integration.gateway.MethodParameter> . size ( ) + STRING + java.lang.Object[] . int + STRING ) ; } return this . org.springframework.integration.gateway.Message<?> ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( java.lang.Object [] java.lang.Object[] ) { try { return this . org.springframework.integration.gateway.MethodArgsMessageMapper . toMessage ( new MethodArgsHolder ( this . java.lang.reflect.Method , java.lang.Object[] ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } else { throw new MessageMappingException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( EvaluationContext org.springframework.integration.gateway.EvaluationContext , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map.Entry<java.lang.String,org.springframework.integration.gateway.Expression> : java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> . entrySet ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,org.springframework.integration.gateway.Expression> . getValue ( ) . getValue ( org.springframework.integration.gateway.EvaluationContext ) ; if ( java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.String,org.springframework.integration.gateway.Expression> . getKey ( ) , java.lang.Object ) ; } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.gateway.StandardEvaluationContext org.springframework.integration.gateway.StandardEvaluationContext ( java.lang.Object [] java.lang.Object[] ) { StandardEvaluationContext org.springframework.integration.gateway.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . org.springframework.integration.gateway.BeanFactory ) ; org.springframework.integration.gateway.StandardEvaluationContext . setVariable ( STRING , java.lang.Object[] ) ; org.springframework.integration.gateway.StandardEvaluationContext . setVariable ( STRING , this . java.lang.reflect.Method ) ; return org.springframework.integration.gateway.StandardEvaluationContext ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Expression org.springframework.integration.gateway.Expression = this . java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> . get ( java.lang.String ) ; if ( org.springframework.integration.gateway.Expression == null ) { org.springframework.integration.gateway.Expression = org.springframework.integration.gateway.SpelExpressionParser . parseExpression ( java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> . put ( java.lang.String , org.springframework.integration.gateway.Expression ) ; } return org.springframework.integration.gateway.Expression . getValue ( this . org.springframework.integration.gateway.StandardEvaluationContext , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { for ( java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<,> . getKey ( ) ; if ( ! ( java.lang.Object instanceof java.lang.String ) ) { if ( this . org.springframework.integration.gateway.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.gateway.Log . warn ( STRING + java.lang.Object + STRING ) ; } } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ( java.lang.String ) java.lang.Object , java.util.Map.Entry<,> . getValue ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( MethodParameter org.springframework.integration.gateway.MethodParameter ) { throw new MessagingException ( STRING + STRING + org.springframework.integration.gateway.MethodParameter . getMethod ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.annotation.Annotation java.lang.annotation.Annotation , MethodParameter org.springframework.integration.gateway.MethodParameter ) { java.lang.String java.lang.String = ( java.lang.String ) AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ; java.lang.String java.lang.String = StringUtils . hasText ( java.lang.String ) ? java.lang.String : org.springframework.integration.gateway.MethodParameter . getParameterName ( ) ; Assert . notNull ( java.lang.String , STRING + STRING ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.integration.gateway.MethodParameter> < MethodParameter > java.util.List<org.springframework.integration.gateway.MethodParameter> ( java.lang.reflect.Method java.lang.reflect.Method ) { java.util.List<org.springframework.integration.gateway.MethodParameter> < MethodParameter > java.util.List<org.springframework.integration.gateway.MethodParameter> = new java.util.LinkedList<org.springframework.integration.gateway.MethodParameter> < MethodParameter > ( ) ; ParameterNameDiscoverer org.springframework.integration.gateway.ParameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer ( ) ; int int = java.lang.reflect.Method . java.lang.Class<?>[] ( ) . int ; for ( int int = NUMBER ; int < int ; int ++ ) { MethodParameter org.springframework.integration.gateway.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , int ) ; org.springframework.integration.gateway.MethodParameter . initParameterNameDiscovery ( org.springframework.integration.gateway.ParameterNameDiscoverer ) ; java.util.List<org.springframework.integration.gateway.MethodParameter> . add ( org.springframework.integration.gateway.MethodParameter ) ; } return java.util.List<org.springframework.integration.gateway.MethodParameter> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.gateway.Expression org.springframework.integration.gateway.Expression ( java.lang.reflect.Method java.lang.reflect.Method ) { Expression org.springframework.integration.gateway.Expression = null ; java.lang.annotation.Annotation java.lang.annotation.Annotation = java.lang.reflect.Method . T ( Payload .class ) ; if ( java.lang.annotation.Annotation != null ) { java.lang.String java.lang.String = ( java.lang.String ) AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ; Assert . hasText ( java.lang.String , STRING ) ; org.springframework.integration.gateway.Expression = org.springframework.integration.gateway.SpelExpressionParser . parseExpression ( java.lang.String ) ; } return org.springframework.integration.gateway.Expression ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( MethodArgsHolder org.springframework.integration.gateway.MethodArgsHolder ) throws java.lang.Exception { java.lang.Object java.lang.Object = null ; boolean boolean = false ; java.lang.Object [] java.lang.Object[] = org.springframework.integration.gateway.MethodArgsHolder . getArgs ( ) ; EvaluationContext org.springframework.integration.gateway.EvaluationContext = org.springframework.integration.gateway.StandardEvaluationContext ( java.lang.Object[] ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; if ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . org.springframework.integration.gateway.Expression != null ) { java.lang.Object = org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . org.springframework.integration.gateway.Expression . getValue ( org.springframework.integration.gateway.EvaluationContext ) ; } for ( int int = NUMBER ; int < org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.util.List<org.springframework.integration.gateway.MethodParameter> . size ( ) ; int ++ ) { java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; MethodParameter org.springframework.integration.gateway.MethodParameter = org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.util.List<org.springframework.integration.gateway.MethodParameter> . get ( int ) ; java.lang.annotation.Annotation java.lang.annotation.Annotation = MessagingAnnotationUtils . findMessagePartAnnotation ( org.springframework.integration.gateway.MethodParameter . getParameterAnnotations ( ) , false ) ; if ( java.lang.annotation.Annotation != null ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . boolean ( Payload .class ) ) { if ( java.lang.Object != null ) { void ( org.springframework.integration.gateway.MethodParameter ) ; } java.lang.String java.lang.String = ( java.lang.String ) AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.Object = java.lang.Object ; } else { java.lang.Object = java.lang.Object ( java.lang.String , java.lang.Object ) ; } boolean = true ; } else if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . boolean ( Header .class ) ) { java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.lang.String ( java.lang.annotation.Annotation , org.springframework.integration.gateway.MethodParameter ) ; if ( ( java.lang.Boolean ) AnnotationUtils . getValue ( java.lang.annotation.Annotation , STRING ) && java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . boolean ( Headers .class ) ) { if ( java.lang.Object != null ) { if ( ! ( java.lang.Object instanceof java.util.Map ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } for ( java.lang.Object java.lang.Object : ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . java.util.Set<> ( ) ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object , STRING + java.lang.Object + STRING ) ; java.lang.Object java.lang.Object = ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ( java.lang.String ) java.lang.Object , java.lang.Object ) ; } } } } else if ( java.lang.Object == null ) { java.lang.Object = java.lang.Object ; } else if ( java.util.Map .class . boolean ( org.springframework.integration.gateway.MethodParameter . getParameterType ( ) ) ) { if ( java.lang.Object instanceof java.util.Map && ! boolean ) { if ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . org.springframework.integration.gateway.Expression == null ) { throw new MessagingException ( STRING + STRING ) ; } } org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . void ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> ) ; } else if ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . org.springframework.integration.gateway.Expression == null ) { org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . void ( org.springframework.integration.gateway.MethodParameter ) ; } } Assert . isTrue ( java.lang.Object != null , STRING + org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.lang.reflect.Method + STRING ) ; AbstractIntegrationMessageBuilder < ? > org.springframework.integration.gateway.AbstractIntegrationMessageBuilder<?> = ( java.lang.Object instanceof Message ) ? org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . org.springframework.integration.gateway.MessageBuilderFactory . fromMessage ( ( Message < ? > ) java.lang.Object ) : org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . org.springframework.integration.gateway.MessageBuilderFactory . withPayload ( java.lang.Object ) ; org.springframework.integration.gateway.AbstractIntegrationMessageBuilder<> . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) ; if ( ! CollectionUtils . isEmpty ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.gateway.EvaluationContext , org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ) ; org.springframework.integration.gateway.AbstractIntegrationMessageBuilder<> . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; } if ( ! CollectionUtils . isEmpty ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.gateway.EvaluationContext , org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> ) ; org.springframework.integration.gateway.AbstractIntegrationMessageBuilder<> . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) ; } if ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.util.Map<java.lang.String,java.lang.Object> != null ) { org.springframework.integration.gateway.AbstractIntegrationMessageBuilder<> . copyHeadersIfAbsent ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper .this . java.util.Map<java.lang.String,java.lang.Object> ) ; } return org.springframework.integration.gateway.AbstractIntegrationMessageBuilder<> . build ( ) ; }  <METHOD_END>
