<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.neo4j.web.support.SessionFactory = mock ( SessionFactory .class ) ; org.springframework.data.neo4j.web.support.Session = mock ( Session .class ) ; given ( org.springframework.data.neo4j.web.support.SessionFactory . openSession ( ) ) . willReturn ( org.springframework.data.neo4j.web.support.Session ) ; this . org.springframework.data.neo4j.web.support.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.data.neo4j.web.support.MockHttpServletRequest . setAsyncSupported ( true ) ; this . org.springframework.data.neo4j.web.support.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.data.neo4j.web.support.ServletWebRequest = new ServletWebRequest ( this . org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { OpenSessionInViewInterceptor org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor = new OpenSessionInViewInterceptor ( ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . setSessionFactory ( this . org.springframework.data.neo4j.web.support.SessionFactory ) ; MockServletContext org.springframework.data.neo4j.web.support.MockServletContext = new MockServletContext ( ) ; MockHttpServletRequest org.springframework.data.neo4j.web.support.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.data.neo4j.web.support.MockServletContext ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( this . org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . postHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterCompletion ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . postHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterCompletion ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . postHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterCompletion ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . postHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterCompletion ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { OpenSessionInViewInterceptor org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor = new OpenSessionInViewInterceptor ( ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . setSessionFactory ( org.springframework.data.neo4j.web.support.SessionFactory ) ; given ( org.springframework.data.neo4j.web.support.SessionFactory . openSession ( ) ) . willReturn ( this . org.springframework.data.neo4j.web.support.Session ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( this . org.springframework.data.neo4j.web.support.ServletWebRequest ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; AsyncWebRequest org.springframework.data.neo4j.web.support.AsyncWebRequest = new StandardServletAsyncWebRequest ( this . org.springframework.data.neo4j.web.support.MockHttpServletRequest , this . org.springframework.data.neo4j.web.support.MockHttpServletResponse ) ; WebAsyncManager org.springframework.data.neo4j.web.support.WebAsyncManager = WebAsyncUtils . getAsyncManager ( this . org.springframework.data.neo4j.web.support.ServletWebRequest ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . setTaskExecutor ( new org.springframework.data.neo4j.web.support.OpenSessionInViewTests.SyncTaskExecutor ( ) ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . setAsyncWebRequest ( org.springframework.data.neo4j.web.support.AsyncWebRequest ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . startCallableProcessing ( new java.util.concurrent.Callable<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; } } ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterConcurrentHandlingStarted ( this . org.springframework.data.neo4j.web.support.ServletWebRequest ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( this . org.springframework.data.neo4j.web.support.ServletWebRequest ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . clearConcurrentResult ( ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . postHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterCompletion ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . postHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterCompletion ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . postHandle ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterCompletion ( new ServletWebRequest ( org.springframework.data.neo4j.web.support.MockHttpServletRequest ) , null ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . postHandle ( this . org.springframework.data.neo4j.web.support.ServletWebRequest , null ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterCompletion ( this . org.springframework.data.neo4j.web.support.ServletWebRequest , null ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { OpenSessionInViewInterceptor org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor = new OpenSessionInViewInterceptor ( ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . setSessionFactory ( org.springframework.data.neo4j.web.support.SessionFactory ) ; given ( this . org.springframework.data.neo4j.web.support.SessionFactory . openSession ( ) ) . willReturn ( this . org.springframework.data.neo4j.web.support.Session ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . preHandle ( this . org.springframework.data.neo4j.web.support.ServletWebRequest ) ; assertTrue ( TransactionSynchronizationManager . hasResource ( this . org.springframework.data.neo4j.web.support.SessionFactory ) ) ; AsyncWebRequest org.springframework.data.neo4j.web.support.AsyncWebRequest = new StandardServletAsyncWebRequest ( this . org.springframework.data.neo4j.web.support.MockHttpServletRequest , this . org.springframework.data.neo4j.web.support.MockHttpServletResponse ) ; WebAsyncManager org.springframework.data.neo4j.web.support.WebAsyncManager = WebAsyncUtils . getAsyncManager ( this . org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . setTaskExecutor ( new org.springframework.data.neo4j.web.support.OpenSessionInViewTests.SyncTaskExecutor ( ) ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . setAsyncWebRequest ( org.springframework.data.neo4j.web.support.AsyncWebRequest ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . startCallableProcessing ( new java.util.concurrent.Callable<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; } } ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewInterceptor . afterConcurrentHandlingStarted ( this . org.springframework.data.neo4j.web.support.ServletWebRequest ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( this . org.springframework.data.neo4j.web.support.SessionFactory ) ) ; MockAsyncContext org.springframework.data.neo4j.web.support.MockAsyncContext = ( MockAsyncContext ) this . org.springframework.data.neo4j.web.support.MockHttpServletRequest . getAsyncContext ( ) ; for ( AsyncListener org.springframework.data.neo4j.web.support.AsyncListener : org.springframework.data.neo4j.web.support.MockAsyncContext . getListeners ( ) ) { org.springframework.data.neo4j.web.support.AsyncListener . onTimeout ( new AsyncEvent ( org.springframework.data.neo4j.web.support.MockAsyncContext ) ) ; } for ( AsyncListener org.springframework.data.neo4j.web.support.AsyncListener : org.springframework.data.neo4j.web.support.MockAsyncContext . getListeners ( ) ) { org.springframework.data.neo4j.web.support.AsyncListener . onComplete ( new AsyncEvent ( org.springframework.data.neo4j.web.support.MockAsyncContext ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final SessionFactory org.springframework.data.neo4j.web.support.SessionFactory = mock ( SessionFactory .class ) ; final Session org.springframework.data.neo4j.web.support.Session = mock ( Session .class ) ; given ( org.springframework.data.neo4j.web.support.SessionFactory . openSession ( ) ) . willReturn ( org.springframework.data.neo4j.web.support.Session ) ; MockServletContext org.springframework.data.neo4j.web.support.MockServletContext = new MockServletContext ( ) ; StaticWebApplicationContext org.springframework.data.neo4j.web.support.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . setServletContext ( org.springframework.data.neo4j.web.support.MockServletContext ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.data.neo4j.web.support.SessionFactory ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.data.neo4j.web.support.SessionFactory ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . refresh ( ) ; org.springframework.data.neo4j.web.support.MockServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.data.neo4j.web.support.StaticWebApplicationContext ) ; MockHttpServletRequest org.springframework.data.neo4j.web.support.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.data.neo4j.web.support.MockServletContext ) ; MockHttpServletResponse org.springframework.data.neo4j.web.support.MockHttpServletResponse = new MockHttpServletResponse ( ) ; MockFilterConfig org.springframework.data.neo4j.web.support.MockFilterConfig = new MockFilterConfig ( org.springframework.data.neo4j.web.support.StaticWebApplicationContext . getServletContext ( ) , STRING ) ; MockFilterConfig org.springframework.data.neo4j.web.support.MockFilterConfig = new MockFilterConfig ( org.springframework.data.neo4j.web.support.StaticWebApplicationContext . getServletContext ( ) , STRING ) ; org.springframework.data.neo4j.web.support.MockFilterConfig . addInitParameter ( STRING , STRING ) ; final OpenSessionInViewFilter org.springframework.data.neo4j.web.support.OpenSessionInViewFilter = new OpenSessionInViewFilter ( ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . init ( org.springframework.data.neo4j.web.support.MockFilterConfig ) ; final OpenSessionInViewFilter org.springframework.data.neo4j.web.support.OpenSessionInViewFilter = new OpenSessionInViewFilter ( ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . init ( org.springframework.data.neo4j.web.support.MockFilterConfig ) ; final FilterChain org.springframework.data.neo4j.web.support.FilterChain = new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.data.neo4j.web.support.ServletRequest , ServletResponse org.springframework.data.neo4j.web.support.ServletResponse ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.ServletRequest . setAttribute ( STRING , java.lang.Boolean . java.lang.Boolean ) ; } } ; final FilterChain org.springframework.data.neo4j.web.support.FilterChain = new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.data.neo4j.web.support.ServletRequest , ServletResponse org.springframework.data.neo4j.web.support.ServletResponse )					throws java.io.IOException , org.springframework.data.neo4j.web.support.ServletException { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . doFilter ( org.springframework.data.neo4j.web.support.ServletRequest , org.springframework.data.neo4j.web.support.ServletResponse , org.springframework.data.neo4j.web.support.FilterChain ) ; } } ; FilterChain org.springframework.data.neo4j.web.support.FilterChain = new PassThroughFilterChain ( org.springframework.data.neo4j.web.support.OpenSessionInViewFilter , org.springframework.data.neo4j.web.support.FilterChain ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . doFilter ( org.springframework.data.neo4j.web.support.MockHttpServletRequest , org.springframework.data.neo4j.web.support.MockHttpServletResponse , org.springframework.data.neo4j.web.support.FilterChain ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertNotNull ( org.springframework.data.neo4j.web.support.MockHttpServletRequest . getAttribute ( STRING ) ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.data.neo4j.web.support.ServletRequest , ServletResponse org.springframework.data.neo4j.web.support.ServletResponse ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.ServletRequest . setAttribute ( STRING , java.lang.Boolean . java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.data.neo4j.web.support.ServletRequest , ServletResponse org.springframework.data.neo4j.web.support.ServletResponse )					throws java.io.IOException , org.springframework.data.neo4j.web.support.ServletException { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . doFilter ( org.springframework.data.neo4j.web.support.ServletRequest , org.springframework.data.neo4j.web.support.ServletResponse , org.springframework.data.neo4j.web.support.FilterChain ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final SessionFactory org.springframework.data.neo4j.web.support.SessionFactory = mock ( SessionFactory .class ) ; final Session org.springframework.data.neo4j.web.support.Session = mock ( Session .class ) ; given ( org.springframework.data.neo4j.web.support.SessionFactory . openSession ( ) ) . willReturn ( org.springframework.data.neo4j.web.support.Session ) ; MockServletContext org.springframework.data.neo4j.web.support.MockServletContext = new MockServletContext ( ) ; StaticWebApplicationContext org.springframework.data.neo4j.web.support.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . setServletContext ( org.springframework.data.neo4j.web.support.MockServletContext ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.data.neo4j.web.support.SessionFactory ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.data.neo4j.web.support.SessionFactory ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . refresh ( ) ; org.springframework.data.neo4j.web.support.MockServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.data.neo4j.web.support.StaticWebApplicationContext ) ; MockFilterConfig org.springframework.data.neo4j.web.support.MockFilterConfig = new MockFilterConfig ( org.springframework.data.neo4j.web.support.StaticWebApplicationContext . getServletContext ( ) , STRING ) ; MockFilterConfig org.springframework.data.neo4j.web.support.MockFilterConfig = new MockFilterConfig ( org.springframework.data.neo4j.web.support.StaticWebApplicationContext . getServletContext ( ) , STRING ) ; org.springframework.data.neo4j.web.support.MockFilterConfig . addInitParameter ( STRING , STRING ) ; final OpenSessionInViewFilter org.springframework.data.neo4j.web.support.OpenSessionInViewFilter = new OpenSessionInViewFilter ( ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . init ( org.springframework.data.neo4j.web.support.MockFilterConfig ) ; final OpenSessionInViewFilter org.springframework.data.neo4j.web.support.OpenSessionInViewFilter = new OpenSessionInViewFilter ( ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . init ( org.springframework.data.neo4j.web.support.MockFilterConfig ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; final FilterChain org.springframework.data.neo4j.web.support.FilterChain = new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.data.neo4j.web.support.ServletRequest , ServletResponse org.springframework.data.neo4j.web.support.ServletResponse ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.ServletRequest . setAttribute ( STRING , java.lang.Boolean . java.lang.Boolean ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; final FilterChain org.springframework.data.neo4j.web.support.FilterChain = new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.data.neo4j.web.support.ServletRequest , ServletResponse org.springframework.data.neo4j.web.support.ServletResponse )					throws java.io.IOException , org.springframework.data.neo4j.web.support.ServletException { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . doFilter ( org.springframework.data.neo4j.web.support.ServletRequest , org.springframework.data.neo4j.web.support.ServletResponse , org.springframework.data.neo4j.web.support.FilterChain ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ; FilterChain org.springframework.data.neo4j.web.support.FilterChain = new PassThroughFilterChain ( org.springframework.data.neo4j.web.support.OpenSessionInViewFilter , org.springframework.data.neo4j.web.support.FilterChain ) ; AsyncWebRequest org.springframework.data.neo4j.web.support.AsyncWebRequest = mock ( AsyncWebRequest .class ) ; given ( org.springframework.data.neo4j.web.support.AsyncWebRequest . isAsyncStarted ( ) ) . willReturn ( true ) ; WebAsyncManager org.springframework.data.neo4j.web.support.WebAsyncManager = WebAsyncUtils . getAsyncManager ( this . org.springframework.data.neo4j.web.support.MockHttpServletRequest ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . setTaskExecutor ( new org.springframework.data.neo4j.web.support.OpenSessionInViewTests.SyncTaskExecutor ( ) ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . setAsyncWebRequest ( org.springframework.data.neo4j.web.support.AsyncWebRequest ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . startCallableProcessing ( new java.util.concurrent.Callable<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; } } ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . doFilter ( this . org.springframework.data.neo4j.web.support.MockHttpServletRequest , this . org.springframework.data.neo4j.web.support.MockHttpServletResponse , org.springframework.data.neo4j.web.support.FilterChain ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertNotNull ( org.springframework.data.neo4j.web.support.MockHttpServletRequest . getAttribute ( STRING ) ) ; verify ( org.springframework.data.neo4j.web.support.AsyncWebRequest , times ( NUMBER ) ) . addCompletionHandler ( any ( java.lang.Runnable .class ) ) ; verify ( org.springframework.data.neo4j.web.support.AsyncWebRequest ) . addTimeoutHandler ( any ( java.lang.Runnable .class ) ) ; verify ( org.springframework.data.neo4j.web.support.AsyncWebRequest , times ( NUMBER ) ) . addCompletionHandler ( any ( java.lang.Runnable .class ) ) ; verify ( org.springframework.data.neo4j.web.support.AsyncWebRequest ) . startAsync ( ) ; reset ( org.springframework.data.neo4j.web.support.AsyncWebRequest ) ; given ( org.springframework.data.neo4j.web.support.AsyncWebRequest . isAsyncStarted ( ) ) . willReturn ( false ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . doFilter ( this . org.springframework.data.neo4j.web.support.MockHttpServletRequest , this . org.springframework.data.neo4j.web.support.MockHttpServletResponse , org.springframework.data.neo4j.web.support.FilterChain ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertFalse ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.data.neo4j.web.support.StaticWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.data.neo4j.web.support.ServletRequest , ServletResponse org.springframework.data.neo4j.web.support.ServletResponse ) { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.ServletRequest . setAttribute ( STRING , java.lang.Boolean . java.lang.Boolean ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.data.neo4j.web.support.ServletRequest , ServletResponse org.springframework.data.neo4j.web.support.ServletResponse )					throws java.io.IOException , org.springframework.data.neo4j.web.support.ServletException { assertTrue ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ) ) ; org.springframework.data.neo4j.web.support.OpenSessionInViewFilter . doFilter ( org.springframework.data.neo4j.web.support.ServletRequest , org.springframework.data.neo4j.web.support.ServletResponse , org.springframework.data.neo4j.web.support.FilterChain ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable , long long ) { java.lang.Runnable . void ( ) ; }  <METHOD_END>
