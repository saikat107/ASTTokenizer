<METHOD_START> @ Test public void void ( ) { MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( null ) ; assertNotNull ( org.springframework.messaging.MessageHeaders . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( null ) ; java.lang.Thread . void ( NUMBER ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( org.springframework.messaging.MessageHeaders ) ; assertNotSame ( org.springframework.messaging.MessageHeaders . getTimestamp ( ) , org.springframework.messaging.MessageHeaders . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( null , null , NUMBER ) ; assertEquals ( NUMBER , ( long ) org.springframework.messaging.MessageHeaders . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( MessageHeaders . TIMESTAMP , NUMBER ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> , null , null ) ; assertNotNull ( org.springframework.messaging.MessageHeaders . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( null , null , - NUMBER ) ; assertNull ( org.springframework.messaging.MessageHeaders . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( null ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( org.springframework.messaging.MessageHeaders ) ; assertNotSame ( org.springframework.messaging.MessageHeaders . getId ( ) , org.springframework.messaging.MessageHeaders . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( null ) ; assertNotNull ( org.springframework.messaging.MessageHeaders . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.UUID java.util.UUID = new java.util.UUID ( NUMBER , NUMBER ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( null , java.util.UUID , null ) ; assertEquals ( java.util.UUID , org.springframework.messaging.MessageHeaders . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( MessageHeaders . ID , new java.util.UUID ( NUMBER , NUMBER ) ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> , null , null ) ; assertNotNull ( org.springframework.messaging.MessageHeaders . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( null , MessageHeaders . ID_VALUE_NONE , null ) ; assertNull ( org.springframework.messaging.MessageHeaders . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Integer ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( java.lang.Integer , org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Integer ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( java.lang.Integer , org.springframework.messaging.MessageHeaders . get ( STRING , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Integer ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( java.lang.Integer , org.springframework.messaging.MessageHeaders . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertNull ( org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertNull ( org.springframework.messaging.MessageHeaders . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.messaging.MessageHeaders . keySet ( ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageHeaders org.springframework.messaging.MessageHeaders = ( MessageHeaders ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.messaging.MessageHeaders ) ; assertEquals ( STRING , org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; MessageHeaders org.springframework.messaging.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageHeaders org.springframework.messaging.MessageHeaders = ( MessageHeaders ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.messaging.MessageHeaders ) ; assertEquals ( STRING , org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; assertNull ( org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; assertSame ( java.lang.Object , org.springframework.messaging.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = new java.util.concurrent.atomic.AtomicLong ( ) ; @ java.lang.SuppressWarnings ( STRING ) class MyMH extends MessageHeaders { public void ( ) { super( null , new java.util.UUID ( NUMBER , java.util.concurrent.atomic.AtomicLong . long ( ) ) , - NUMBER ); } } MessageHeaders org.springframework.messaging.MessageHeaders = new MyMH ( ) ; assertEquals ( STRING , org.springframework.messaging.MessageHeaders . getId ( ) . toString ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.MessageHeaders . size ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( null , new java.util.UUID ( NUMBER , java.util.concurrent.atomic.AtomicLong . long ( ) ) , - NUMBER ); }  <METHOD_END>
