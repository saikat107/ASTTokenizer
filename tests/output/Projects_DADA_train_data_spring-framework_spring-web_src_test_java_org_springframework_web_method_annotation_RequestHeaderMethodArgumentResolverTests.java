<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { GenericWebApplicationContext org.springframework.web.method.annotation.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.method.annotation.GenericWebApplicationContext . refresh ( ) ; org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver = new RequestHeaderMethodArgumentResolver ( org.springframework.web.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolverTests> ( ) , STRING , ( java.lang.Class<?> < ? > [] ) null ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.method.annotation.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; assertTrue ( STRING , org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; org.springframework.web.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String[] ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String [] ) ; assertArrayEquals ( java.lang.String[] , ( java.lang.String [] ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; try { java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; try { java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( java.lang.String , java.lang.Object ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; try { java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( java.lang.String , java.lang.Object ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.MockHttpServletRequest . setContextPath ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ServletRequestBindingException .class ) public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; ConfigurableWebBindingInitializer org.springframework.web.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultFormattingConversionService ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , new DefaultDataBinderFactory ( org.springframework.web.method.annotation.ConfigurableWebBindingInitializer ) ) ; assertTrue ( java.lang.Object instanceof java.util.Date ) ; assertEquals ( new java.util.Date ( java.lang.String ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.web.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; ConfigurableWebBindingInitializer org.springframework.web.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultFormattingConversionService ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.RequestHeaderMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.NativeWebRequest , new DefaultDataBinderFactory ( org.springframework.web.method.annotation.ConfigurableWebBindingInitializer ) ) ; assertTrue ( java.lang.Object instanceof java.time.Instant ) ; assertEquals ( java.time.Instant . java.time.Instant ( java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter . java.time.temporal.TemporalAccessor ( java.lang.String ) ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ RequestHeader ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.lang.String [] java.lang.String[] , @ RequestHeader ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestHeader ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.lang.String java.lang.String , @ RequestHeader ( STRING ) java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , @ RequestHeader ( STRING ) java.util.Date java.util.Date , @ RequestHeader ( STRING ) java.time.Instant java.time.Instant ) {	}  <METHOD_END>
