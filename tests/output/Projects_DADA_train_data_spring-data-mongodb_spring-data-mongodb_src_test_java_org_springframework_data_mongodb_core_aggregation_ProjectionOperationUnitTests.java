<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ProjectionOperation ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) ; org.springframework.data.mongodb.core.aggregation.ProjectionOperation = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . and ( STRING ) . previousOperation ( ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) Fields . UNDERSCORE_ID_REF ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( Fields . fields ( STRING ) . and ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . and ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . and ( STRING ) . plus ( NUMBER ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( ( java.lang.Object ) STRING ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; ProjectionOperationBuilder org.springframework.data.mongodb.core.aggregation.ProjectionOperationBuilder = new ProjectionOperation ( ) . and ( java.lang.String ) . plus ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperationBuilder . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( java.lang.String , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . containsKey ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) , is ( ( java.lang.Object ) java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) . and ( java.lang.String ) . plus ( NUMBER ) . as ( java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( java.lang.String , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . containsKey ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) , is ( ( java.lang.Object ) java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) . and ( java.lang.String ) . minus ( NUMBER ) . as ( java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( java.lang.String , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . containsKey ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) , is ( ( java.lang.Object ) java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) . and ( java.lang.String ) . multiply ( NUMBER ) . as ( java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( java.lang.String , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . containsKey ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) , is ( ( java.lang.Object ) java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) . and ( java.lang.String ) . divide ( NUMBER ) . as ( java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( java.lang.String , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . containsKey ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) , is ( ( java.lang.Object ) java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ProjectionOperation ( ) . and ( STRING ) . divide ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) . and ( java.lang.String ) . mod ( NUMBER ) . as ( java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( java.lang.String , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . containsKey ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) , is ( ( java.lang.Object ) java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ProjectionOperation ( ) . andExclude ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = new ProjectionOperation ( ) . andExclude ( Fields . UNDERSCORE_ID ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; assertThat ( ( java.lang.Integer ) org.springframework.data.mongodb.core.aggregation.Document . get ( Fields . UNDERSCORE_ID ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( STRING ) . and ( STRING ) . as ( STRING ) . andInclude ( STRING , STRING ) . andExclude ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ProjectionOperation ( ) . and ( STRING ) . mod ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . plus ( STRING ) . as ( STRING ) . and ( STRING ) . minus ( STRING ) . as ( STRING ) . and ( STRING ) . multiply ( STRING ) . as ( STRING ) . and ( STRING ) . divide ( STRING ) . as ( STRING ) . and ( STRING ) . mod ( STRING ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , java.lang.String ) ; assertThat ( ( Document ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; assertThat ( ( Document ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; assertThat ( ( Document ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; assertThat ( ( Document ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; assertThat ( ( Document ) org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . andExpression ( STRING , NUMBER ) . as ( STRING ) . and ( STRING ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . extractHour ( ) . as ( STRING ) . and ( STRING ) . extractMinute ( ) . as ( STRING ) . and ( STRING ) . extractSecond ( ) . as ( STRING ) . and ( STRING ) . extractMillisecond ( ) . as ( STRING ) . and ( STRING ) . extractYear ( ) . as ( STRING ) . and ( STRING ) . extractMonth ( ) . as ( STRING ) . and ( STRING ) . extractWeek ( ) . as ( STRING ) . and ( STRING ) . extractDayOfYear ( ) . as ( STRING ) . and ( STRING ) . extractDayOfMonth ( ) . as ( STRING ) . and ( STRING ) . extractDayOfWeek ( ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( notNullValue ( ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . andExpression ( STRING ) . extractDayOfYear ( ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( notNullValue ( ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List ( new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . size ( ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( SIZE . of ( field ( STRING ) ) ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . slice ( NUMBER ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . slice ( NUMBER , NUMBER ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document . get ( STRING ) , is ( ( java.lang.Object ) new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . cmp ( NUMBER ) . as ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . eq ( NUMBER ) . as ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . gt ( NUMBER ) . as ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . gte ( NUMBER ) . as ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . lt ( NUMBER ) . as ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . lte ( NUMBER ) . as ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionOperation org.springframework.data.mongodb.core.aggregation.ProjectionOperation = Aggregation . project ( ) . and ( STRING ) . ne ( NUMBER ) . as ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ProjectionOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( STRING ) . equalsArrays ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( SetOperators . arrayAsSet ( STRING ) . isEqualTo ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( STRING ) . intersectsArrays ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( SetOperators . arrayAsSet ( STRING ) . intersects ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( STRING ) . unionArrays ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( SetOperators . arrayAsSet ( STRING ) . union ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( STRING ) . differenceToArray ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( SetOperators . arrayAsSet ( STRING ) . differenceTo ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( STRING ) . subsetOfArray ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING , STRING ) . and ( SetOperators . arrayAsSet ( STRING ) . isSubsetOf ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING ) . and ( STRING ) . anyElementInArrayTrue ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING ) . and ( SetOperators . arrayAsSet ( STRING ) . anyElementTrue ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING ) . and ( STRING ) . allElementsInArrayTrue ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( STRING ) . and ( SetOperators . arrayAsSet ( STRING ) . allElementsTrue ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . absoluteValue ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . abs ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . add ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . ceil ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . ceil ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . divide ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . divideBy ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . exp ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . exp ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . floor ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . floor ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . ln ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . ln ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . log ( NUMBER ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . log ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . log10 ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . log10 ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . mod ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . mod ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . multiply ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . multiplyBy ( NUMBER ) . multiplyBy ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . pow ( NUMBER ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . pow ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . sqrt ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . sqrt ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . minus ( AggregationFunctionExpressions . SIZE . of ( field ( STRING ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . subtract ( AggregationFunctionExpressions . SIZE . of ( field ( STRING ) ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . trunc ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( AggregationFunctionExpressions . SUBTRACT . of ( field ( STRING ) , field ( STRING ) ) ) . trunc ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . concat ( STRING , field ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . concat ( STRING ) . concatValueOf ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . substring ( NUMBER , NUMBER ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . substring ( NUMBER , NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . toLower ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . toLower ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . toUpper ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . toUpper ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . strCaseCmp ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . strCaseCmp ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . arrayElementAt ( NUMBER ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . elementAt ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . concatArrays ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . concat ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . isArray ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . isArray ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . length ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . slice ( ) . itemCount ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . slice ( ) . offset ( NUMBER ) . itemCount ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . asLiteral ( ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( LiteralOperators . valueOf ( STRING ) . asLiteral ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . dayOfYear ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . dayOfMonth ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . dayOfWeek ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . year ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . month ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . week ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . hour ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . minute ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . second ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . millisecond ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( STRING ) . dateAsFormattedString ( STRING ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . toString ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . sum ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . sum ( ) . and ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . avg ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . avg ( ) . and ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . max ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . max ( ) . and ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . min ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . min ( ) . and ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . stdDevPop ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArithmeticOperators . valueOf ( STRING ) . stdDevSamp ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ComparisonOperators . valueOf ( STRING ) . compareToValue ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ComparisonOperators . valueOf ( STRING ) . equalToValue ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ComparisonOperators . valueOf ( STRING ) . greaterThanValue ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ComparisonOperators . valueOf ( STRING ) . greaterThanEqualToValue ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ComparisonOperators . valueOf ( STRING ) . lessThanValue ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ComparisonOperators . valueOf ( STRING ) . lessThanEqualToValue ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ComparisonOperators . valueOf ( STRING ) . notEqualToValue ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( BooleanOperators . valueOf ( ComparisonOperators . valueOf ( STRING ) . greaterThanValue ( NUMBER ) ) . and ( ComparisonOperators . valueOf ( STRING ) . lessThanValue ( NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( BooleanOperators . valueOf ( ComparisonOperators . valueOf ( STRING ) . greaterThanValue ( NUMBER ) ) . or ( ComparisonOperators . valueOf ( STRING ) . lessThanValue ( NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( BooleanOperators . not ( ComparisonOperators . valueOf ( STRING ) . greaterThanValue ( NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . project ( ) . and ( VariableOperators . mapItemsOf ( STRING ) . as ( STRING ) . andApply ( AggregationFunctionExpressions . ADD . of ( field ( STRING ) , NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . project ( ) . and ( VariableOperators . mapItemsOf ( AggregationFunctionExpressions . SIZE . of ( STRING ) ) . as ( STRING ) . andApply ( AggregationFunctionExpressions . ADD . of ( field ( STRING ) , NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ConditionalOperators . ifNull ( ArrayOperators . arrayOf ( STRING ) . elementAt ( NUMBER ) ) . then ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ConditionalOperators . ifNull ( STRING ) . then ( ArrayOperators . arrayOf ( STRING ) . elementAt ( NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ConditionalOperators . ifNull ( STRING ) . thenValueOf ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . project ( ) . and ( VariableOperators . define ( newVariable ( STRING ) . forExpression ( AggregationFunctionExpressions . ADD . of ( Fields . field ( STRING ) , Fields . field ( STRING ) ) ) , newVariable ( STRING ) . forExpression ( ConditionalOperators . Cond . when ( STRING ) . then ( NUMBER ) . otherwise ( NUMBER ) ) ) . andApply ( AggregationFunctionExpressions . MULTIPLY . of ( Fields . field ( STRING ) , Fields . field ( STRING ) ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionVariable org.springframework.data.mongodb.core.aggregation.ExpressionVariable = newVariable ( STRING ) . forExpression ( AggregationFunctionExpressions . ADD . of ( Fields . field ( STRING ) , Fields . field ( STRING ) ) ) ; ExpressionVariable org.springframework.data.mongodb.core.aggregation.ExpressionVariable = newVariable ( STRING ) . forExpression ( ConditionalOperators . Cond . when ( STRING ) . then ( NUMBER ) . otherwise ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = Aggregation . project ( ) . and ( STRING ) . let ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.aggregation.ExpressionVariable , org.springframework.data.mongodb.core.aggregation.ExpressionVariable ) , AggregationFunctionExpressions . MULTIPLY . of ( Fields . field ( STRING ) , Fields . field ( STRING ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING + STRING + STRING + STRING + STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . indexOf ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . indexOf ( STRING ) . within ( new Range < java.lang.Long > ( NUMBER , NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . indexOfCP ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . indexOfCP ( STRING ) . within ( new Range < java.lang.Long > ( NUMBER , NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . split ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . length ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . lengthCP ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( StringOperators . valueOf ( STRING ) . substringCP ( NUMBER , NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . indexOf ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . RangeOperator . rangeStartingAt ( NUMBER ) . to ( STRING ) . withStepSize ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . reverse ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . reduce ( ArithmeticOperators . valueOf ( STRING ) . multiplyBy ( STRING ) ) . startingWith ( NUMBER ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyExpression org.springframework.data.mongodb.core.aggregation.PropertyExpression = PropertyExpression . property ( STRING ) . definedAs ( ArithmeticOperators . valueOf ( Variable . VALUE . referringTo ( STRING ) . getName ( ) ) . add ( Variable . THIS . getName ( ) ) ) ; PropertyExpression org.springframework.data.mongodb.core.aggregation.PropertyExpression = PropertyExpression . property ( STRING ) . definedAs ( ArithmeticOperators . valueOf ( Variable . VALUE . referringTo ( STRING ) . getName ( ) ) . multiplyBy ( Variable . THIS . getName ( ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . reduce ( org.springframework.data.mongodb.core.aggregation.PropertyExpression , org.springframework.data.mongodb.core.aggregation.PropertyExpression ) . startingWith ( new Document ( ) . append ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression = ArrayOperators . arrayOf ( STRING ) . elementAt ( NUMBER ) ; AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression = ArrayOperators . arrayOf ( STRING ) . elementAt ( NUMBER ) ; AggregationExpression org.springframework.data.mongodb.core.aggregation.AggregationExpression = ArrayOperators . arrayOf ( STRING ) . elementAt ( NUMBER ) ; Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( org.springframework.data.mongodb.core.aggregation.AggregationExpression ) . zipWith ( org.springframework.data.mongodb.core.aggregation.AggregationExpression , org.springframework.data.mongodb.core.aggregation.AggregationExpression ) . useLongestLength ( ) . defaultTo ( new java.lang.Object [] { NUMBER , NUMBER } ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ArrayOperators . arrayOf ( STRING ) . containsValue ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . isoDayOfWeek ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . isoWeek ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DateOperators . dateOf ( STRING ) . isoWeekYear ( ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; CaseOperator org.springframework.data.mongodb.core.aggregation.CaseOperator = CaseOperator . when ( ComparisonOperators . Gte . valueOf ( AccumulatorOperators . Avg . avgOf ( STRING ) ) . greaterThanEqualToValue ( NUMBER ) ) . then ( STRING ) ; CaseOperator org.springframework.data.mongodb.core.aggregation.CaseOperator = CaseOperator . when ( BooleanOperators . And . and ( ComparisonOperators . Gte . valueOf ( AccumulatorOperators . Avg . avgOf ( STRING ) ) . greaterThanEqualToValue ( NUMBER ) , ComparisonOperators . Lt . valueOf ( AccumulatorOperators . Avg . avgOf ( STRING ) ) . lessThanValue ( NUMBER ) ) ) . then ( STRING ) ; CaseOperator org.springframework.data.mongodb.core.aggregation.CaseOperator = CaseOperator . when ( ComparisonOperators . Lt . valueOf ( AccumulatorOperators . Avg . avgOf ( STRING ) ) . lessThanValue ( NUMBER ) ) . then ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( ConditionalOperators . switchCases ( org.springframework.data.mongodb.core.aggregation.CaseOperator , org.springframework.data.mongodb.core.aggregation.CaseOperator , org.springframework.data.mongodb.core.aggregation.CaseOperator ) . defaultTo ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING + java.lang.String + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = project ( ) . and ( DataTypeOperators . Type . typeOf ( STRING ) ) . as ( STRING ) . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , Matchers . is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.aggregation.Document ) { return ( Document ) org.springframework.data.mongodb.core.aggregation.Document . get ( java.lang.String ) ; }  <METHOD_END>
