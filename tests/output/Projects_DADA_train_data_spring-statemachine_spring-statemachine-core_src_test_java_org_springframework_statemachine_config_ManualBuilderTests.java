<METHOD_START> @ Test public void void ( ) java.lang.Exception { StateMachineConfigBuilder < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineConfigBuilder<java.lang.String,java.lang.String> = new StateMachineConfigBuilder < java.lang.String , java.lang.String > ( ) ; org.springframework.statemachine.config.ManualBuilderTests.Config org.springframework.statemachine.config.ManualBuilderTests.Config = new org.springframework.statemachine.config.ManualBuilderTests.Config ( ) ; org.springframework.statemachine.config.StateMachineConfigBuilder<java.lang.String,java.lang.String> . apply ( org.springframework.statemachine.config.ManualBuilderTests.Config ) ; StateMachineConfig < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineConfig<java.lang.String,java.lang.String> = org.springframework.statemachine.config.StateMachineConfigBuilder<java.lang.String,java.lang.String> . getOrBuild ( ) ; TransitionsData < java.lang.String , java.lang.String > org.springframework.statemachine.config.TransitionsData<java.lang.String,java.lang.String> = org.springframework.statemachine.config.StateMachineConfig<java.lang.String,java.lang.String> . getTransitions ( ) ; StatesData < java.lang.String , java.lang.String > org.springframework.statemachine.config.StatesData<java.lang.String,java.lang.String> = org.springframework.statemachine.config.StateMachineConfig<java.lang.String,java.lang.String> . getStates ( ) ; ConfigurationData < java.lang.String , java.lang.String > org.springframework.statemachine.config.ConfigurationData<java.lang.String,java.lang.String> = org.springframework.statemachine.config.StateMachineConfig<java.lang.String,java.lang.String> . getStateMachineConfigurationConfig ( ) ; ObjectStateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.config.ObjectStateMachineFactory<java.lang.String,java.lang.String> = new ObjectStateMachineFactory < java.lang.String , java.lang.String > ( new DefaultStateMachineModel < java.lang.String , java.lang.String > ( org.springframework.statemachine.config.ConfigurationData<java.lang.String,java.lang.String> , org.springframework.statemachine.config.StatesData<java.lang.String,java.lang.String> , org.springframework.statemachine.config.TransitionsData<java.lang.String,java.lang.String> ) ) ; StaticListableBeanFactory org.springframework.statemachine.config.StaticListableBeanFactory = new StaticListableBeanFactory ( ) ; org.springframework.statemachine.config.StaticListableBeanFactory . addBean ( StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME , new SyncTaskExecutor ( ) ) ; org.springframework.statemachine.config.StaticListableBeanFactory . addBean ( STRING , new ConcurrentTaskScheduler ( ) ) ; org.springframework.statemachine.config.ObjectStateMachineFactory<java.lang.String,java.lang.String> . setBeanFactory ( org.springframework.statemachine.config.StaticListableBeanFactory ) ; org.springframework.statemachine.config.ManualBuilderTests.TestListener org.springframework.statemachine.config.ManualBuilderTests.TestListener = new org.springframework.statemachine.config.ManualBuilderTests.TestListener ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.ObjectStateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.config.ManualBuilderTests.TestListener ) ; org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; StaticListableBeanFactory org.springframework.statemachine.config.StaticListableBeanFactory = new StaticListableBeanFactory ( ) ; org.springframework.statemachine.config.StaticListableBeanFactory . addBean ( StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME , new SyncTaskExecutor ( ) ) ; org.springframework.statemachine.config.StaticListableBeanFactory . addBean ( STRING , new ConcurrentTaskScheduler ( ) ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . beanFactory ( org.springframework.statemachine.config.StaticListableBeanFactory ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . build ( ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.config.ManualBuilderTests.TestListener org.springframework.statemachine.config.ManualBuilderTests.TestListener = new org.springframework.statemachine.config.ManualBuilderTests.TestListener ( ) ; org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.config.ManualBuilderTests.TestListener ) ; org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Builder < org.springframework.statemachine.config.ManualBuilderTests.MyStates , org.springframework.statemachine.config.ManualBuilderTests.MyEvents > org.springframework.statemachine.config.Builder<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> = StateMachineBuilder . builder ( ) ; StaticListableBeanFactory org.springframework.statemachine.config.StaticListableBeanFactory = new StaticListableBeanFactory ( ) ; org.springframework.statemachine.config.StaticListableBeanFactory . addBean ( StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME , new SyncTaskExecutor ( ) ) ; org.springframework.statemachine.config.StaticListableBeanFactory . addBean ( STRING , new ConcurrentTaskScheduler ( ) ) ; org.springframework.statemachine.config.Builder<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . configureConfiguration ( ) . withConfiguration ( ) . beanFactory ( org.springframework.statemachine.config.StaticListableBeanFactory ) ; org.springframework.statemachine.config.Builder<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . configureStates ( ) . withStates ( ) . initial ( org.springframework.statemachine.config.ManualBuilderTests.MyStates . org.springframework.statemachine.config.ManualBuilderTests.MyStates ) . state ( org.springframework.statemachine.config.ManualBuilderTests.MyStates . org.springframework.statemachine.config.ManualBuilderTests.MyStates ) ; org.springframework.statemachine.config.Builder<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . configureTransitions ( ) . withExternal ( ) . source ( org.springframework.statemachine.config.ManualBuilderTests.MyStates . org.springframework.statemachine.config.ManualBuilderTests.MyStates ) . target ( org.springframework.statemachine.config.ManualBuilderTests.MyStates . org.springframework.statemachine.config.ManualBuilderTests.MyStates ) . event ( org.springframework.statemachine.config.ManualBuilderTests.MyEvents . org.springframework.statemachine.config.ManualBuilderTests.MyEvents ) . and ( ) . withExternal ( ) . source ( org.springframework.statemachine.config.ManualBuilderTests.MyStates . org.springframework.statemachine.config.ManualBuilderTests.MyStates ) . target ( org.springframework.statemachine.config.ManualBuilderTests.MyStates . org.springframework.statemachine.config.ManualBuilderTests.MyStates ) . event ( org.springframework.statemachine.config.ManualBuilderTests.MyEvents . org.springframework.statemachine.config.ManualBuilderTests.MyEvents ) ; StateMachine < org.springframework.statemachine.config.ManualBuilderTests.MyStates , org.springframework.statemachine.config.ManualBuilderTests.MyEvents > org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> = org.springframework.statemachine.config.Builder<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . build ( ) ; assertThat ( org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> , notNullValue ( ) ) ; org.springframework.statemachine.config.ManualBuilderTests.TestListener2 org.springframework.statemachine.config.ManualBuilderTests.TestListener2 = new org.springframework.statemachine.config.ManualBuilderTests.TestListener2 ( ) ; org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . addStateListener ( org.springframework.statemachine.config.ManualBuilderTests.TestListener2 ) ; org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . start ( ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener2 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.config.ManualBuilderTests.MyStates . org.springframework.statemachine.config.ManualBuilderTests.MyStates ) ) ; org.springframework.statemachine.config.ManualBuilderTests.TestListener2 . void ( NUMBER ) ; org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . sendEvent ( org.springframework.statemachine.config.ManualBuilderTests.MyEvents . org.springframework.statemachine.config.ManualBuilderTests.MyEvents ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener2 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.config.ManualBuilderTests.MyStates . org.springframework.statemachine.config.ManualBuilderTests.MyStates ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . taskExecutor ( new SyncTaskExecutor ( ) ) . taskScheduler ( new ConcurrentTaskScheduler ( ) ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . build ( ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.config.ManualBuilderTests.TestListener org.springframework.statemachine.config.ManualBuilderTests.TestListener = new org.springframework.statemachine.config.ManualBuilderTests.TestListener ( ) ; org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.config.ManualBuilderTests.TestListener ) ; org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; org.springframework.statemachine.config.ManualBuilderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.config.ManualBuilderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . build ( ) ; assertThat ( org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) , notNullValue ( ) ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Builder < java.lang.String , java.lang.String > org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureConfiguration ( ) . withConfiguration ( ) . autoStartup ( true ) . taskExecutor ( new SyncTaskExecutor ( ) ) . taskScheduler ( new ConcurrentTaskScheduler ( ) ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureStates ( ) . withStates ( ) . initial ( STRING ) . state ( STRING ) ; org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . configureTransitions ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.config.Builder<java.lang.String,java.lang.String> . build ( ) ; assertThat ( ( ( SmartLifecycle ) org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) . isAutoStartup ( ) , is ( true ) ) ; assertThat ( ( ( SmartLifecycle ) org.springframework.statemachine.config.StateMachine<java.lang.String,java.lang.String> ) . isRunning ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.config.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > org.springframework.statemachine.config.State<java.lang.String,java.lang.String> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { int = NUMBER ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < org.springframework.statemachine.config.ManualBuilderTests.MyStates , org.springframework.statemachine.config.ManualBuilderTests.MyEvents > org.springframework.statemachine.config.State<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> , State < org.springframework.statemachine.config.ManualBuilderTests.MyStates , org.springframework.statemachine.config.ManualBuilderTests.MyEvents > org.springframework.statemachine.config.State<org.springframework.statemachine.config.ManualBuilderTests.MyStates,org.springframework.statemachine.config.ManualBuilderTests.MyEvents> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { int = NUMBER ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
