<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.integration.handler.HeaderAnnotationTransformerTests.TestTransformer ( ) ; MethodInvokingTransformer org.springframework.integration.handler.MethodInvokingTransformer = new MethodInvokingTransformer ( java.lang.Object , STRING ) ; MessageTransformingHandler org.springframework.integration.handler.MessageTransformingHandler = new MessageTransformingHandler ( org.springframework.integration.handler.MethodInvokingTransformer ) ; org.springframework.integration.handler.MessageTransformingHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.MessageTransformingHandler . afterPropertiesSet ( ) ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.handler.MessageTransformingHandler . setOutputChannel ( org.springframework.integration.handler.QueueChannel ) ; org.springframework.integration.handler.MessageTransformingHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertEquals ( STRING , new IntegrationMessageHeaderAccessor ( org.springframework.integration.handler.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.integration.handler.HeaderAnnotationTransformerTests.TestTransformer ( ) ; MethodInvokingTransformer org.springframework.integration.handler.MethodInvokingTransformer = new MethodInvokingTransformer ( java.lang.Object , STRING ) ; MessageTransformingHandler org.springframework.integration.handler.MessageTransformingHandler = new MessageTransformingHandler ( org.springframework.integration.handler.MethodInvokingTransformer ) ; org.springframework.integration.handler.MessageTransformingHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.MessageTransformingHandler . afterPropertiesSet ( ) ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.handler.MessageTransformingHandler . setOutputChannel ( org.springframework.integration.handler.QueueChannel ) ; org.springframework.integration.handler.MessageTransformingHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertEquals ( STRING , new IntegrationMessageHeaderAccessor ( org.springframework.integration.handler.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.integration.handler.HeaderAnnotationTransformerTests.TestTransformer ( ) ; MethodInvokingTransformer org.springframework.integration.handler.MethodInvokingTransformer = new MethodInvokingTransformer ( java.lang.Object , STRING ) ; MessageTransformingHandler org.springframework.integration.handler.MessageTransformingHandler = new MessageTransformingHandler ( org.springframework.integration.handler.MethodInvokingTransformer ) ; org.springframework.integration.handler.MessageTransformingHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.MessageTransformingHandler . afterPropertiesSet ( ) ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.handler.MessageTransformingHandler . setOutputChannel ( org.springframework.integration.handler.QueueChannel ) ; org.springframework.integration.handler.MessageTransformingHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.integration.handler.HeaderAnnotationTransformerTests.TestTransformer ( ) ; MethodInvokingTransformer org.springframework.integration.handler.MethodInvokingTransformer = new MethodInvokingTransformer ( java.lang.Object , STRING ) ; MessageTransformingHandler org.springframework.integration.handler.MessageTransformingHandler = new MessageTransformingHandler ( org.springframework.integration.handler.MethodInvokingTransformer ) ; org.springframework.integration.handler.MessageTransformingHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.handler.MessageTransformingHandler . afterPropertiesSet ( ) ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.handler.MessageTransformingHandler . setOutputChannel ( org.springframework.integration.handler.QueueChannel ) ; org.springframework.integration.handler.MessageTransformingHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Object java.lang.Object , @ Header ( value = IntegrationMessageHeaderAccessor . CORRELATION_ID , required = true ) java.lang.Object java.lang.Object ) { return java.lang.Object . java.lang.String ( ) + java.lang.Object . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Object java.lang.Object , @ Header ( STRING ) java.lang.Object java.lang.Object ) { return java.lang.Object . java.lang.String ( ) + java.lang.Object . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( IntegrationMessageHeaderAccessor . CORRELATION_ID + STRING ) java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( value = STRING , required = true ) java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
