<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { void ( STRING ) ; HandlerMapping org.springframework.web.socket.config.HandlerMapping = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( HandlerMapping .class ) ; assertThat ( org.springframework.web.socket.config.HandlerMapping , Matchers . instanceOf ( SimpleUrlHandlerMapping .class ) ) ; SimpleUrlHandlerMapping org.springframework.web.socket.config.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) org.springframework.web.socket.config.HandlerMapping ; assertThat ( org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . keySet ( ) , Matchers . hasSize ( NUMBER ) ) ; assertThat ( org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . values ( ) , Matchers . hasSize ( NUMBER ) ) ; HttpRequestHandler org.springframework.web.socket.config.HttpRequestHandler = ( HttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.HttpRequestHandler ) ; assertThat ( org.springframework.web.socket.config.HttpRequestHandler , Matchers . instanceOf ( WebSocketHttpRequestHandler .class ) ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) org.springframework.web.socket.config.HttpRequestHandler ; HandshakeHandler org.springframework.web.socket.config.HandshakeHandler = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeHandler ( ) ; assertNotNull ( org.springframework.web.socket.config.HandshakeHandler ) ; assertTrue ( org.springframework.web.socket.config.HandshakeHandler instanceof TestHandshakeHandler ) ; java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) ; assertThat ( java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> , contains ( instanceOf ( FooTestInterceptor .class ) , instanceOf ( BarTestInterceptor .class ) , instanceOf ( OriginHandshakeInterceptor .class ) ) ) ; WebSocketSession org.springframework.web.socket.config.WebSocketSession = new TestWebSocketSession ( STRING ) ; org.springframework.web.socket.config.WebSocketHttpRequestHandler . getWebSocketHandler ( ) . afterConnectionEstablished ( org.springframework.web.socket.config.WebSocketSession ) ; assertEquals ( true , org.springframework.web.socket.config.WebSocketSession . getAttributes ( ) . get ( STRING ) ) ; WebSocketHandler org.springframework.web.socket.config.WebSocketHandler = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getWebSocketHandler ( ) ; assertThat ( org.springframework.web.socket.config.WebSocketHandler , Matchers . instanceOf ( ExceptionWebSocketHandlerDecorator .class ) ) ; org.springframework.web.socket.config.WebSocketHandler = ( ( ExceptionWebSocketHandlerDecorator ) org.springframework.web.socket.config.WebSocketHandler ) . getDelegate ( ) ; assertThat ( org.springframework.web.socket.config.WebSocketHandler , Matchers . instanceOf ( LoggingWebSocketHandlerDecorator .class ) ) ; org.springframework.web.socket.config.WebSocketHandler = ( ( LoggingWebSocketHandlerDecorator ) org.springframework.web.socket.config.WebSocketHandler ) . getDelegate ( ) ; assertThat ( org.springframework.web.socket.config.WebSocketHandler , Matchers . instanceOf ( org.springframework.web.socket.config.TestWebSocketHandlerDecorator .class ) ) ; org.springframework.web.socket.config.WebSocketHandler = ( ( org.springframework.web.socket.config.TestWebSocketHandlerDecorator ) org.springframework.web.socket.config.WebSocketHandler ) . getDelegate ( ) ; assertThat ( org.springframework.web.socket.config.WebSocketHandler , Matchers . instanceOf ( SubProtocolWebSocketHandler .class ) ) ; assertSame ( org.springframework.web.socket.config.WebSocketHandler , this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( MessageBrokerBeanDefinitionParser . WEB_SOCKET_HANDLER_BEAN_NAME ) ) ; SubProtocolWebSocketHandler org.springframework.web.socket.config.SubProtocolWebSocketHandler = ( SubProtocolWebSocketHandler ) org.springframework.web.socket.config.WebSocketHandler ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.socket.config.SubProtocolWebSocketHandler . getSubProtocols ( ) ) ; assertEquals ( NUMBER * NUMBER , org.springframework.web.socket.config.SubProtocolWebSocketHandler . getSendTimeLimit ( ) ) ; assertEquals ( NUMBER * NUMBER , org.springframework.web.socket.config.SubProtocolWebSocketHandler . getSendBufferSizeLimit ( ) ) ; java.util.Map<java.lang.String,org.springframework.web.socket.config.SubProtocolHandler> < java.lang.String , SubProtocolHandler > java.util.Map<java.lang.String,org.springframework.web.socket.config.SubProtocolHandler> = org.springframework.web.socket.config.SubProtocolWebSocketHandler . getProtocolHandlerMap ( ) ; StompSubProtocolHandler org.springframework.web.socket.config.StompSubProtocolHandler = ( StompSubProtocolHandler ) java.util.Map<java.lang.String,org.springframework.web.socket.config.SubProtocolHandler> . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.StompSubProtocolHandler ) ; assertEquals ( NUMBER * NUMBER , org.springframework.web.socket.config.StompSubProtocolHandler . getMessageSizeLimit ( ) ) ; assertNotNull ( org.springframework.web.socket.config.StompSubProtocolHandler . getErrorHandler ( ) ) ; assertEquals ( org.springframework.web.socket.config.TestStompErrorHandler .class , org.springframework.web.socket.config.StompSubProtocolHandler . getErrorHandler ( ) . getClass ( ) ) ; assertNotNull ( new DirectFieldAccessor ( org.springframework.web.socket.config.StompSubProtocolHandler ) . getPropertyValue ( STRING ) ) ; org.springframework.web.socket.config.HttpRequestHandler = ( HttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.HttpRequestHandler ) ; assertThat ( org.springframework.web.socket.config.HttpRequestHandler , Matchers . instanceOf ( SockJsHttpRequestHandler .class ) ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) org.springframework.web.socket.config.HttpRequestHandler ; org.springframework.web.socket.config.WebSocketHandler = org.springframework.web.socket.config.WebSocketHandler ( org.springframework.web.socket.config.SockJsHttpRequestHandler . getWebSocketHandler ( ) ) ; assertNotNull ( org.springframework.web.socket.config.WebSocketHandler ) ; assertThat ( org.springframework.web.socket.config.WebSocketHandler , Matchers . instanceOf ( SubProtocolWebSocketHandler .class ) ) ; assertNotNull ( org.springframework.web.socket.config.SockJsHttpRequestHandler . getSockJsService ( ) ) ; assertThat ( org.springframework.web.socket.config.SockJsHttpRequestHandler . getSockJsService ( ) , Matchers . instanceOf ( DefaultSockJsService .class ) ) ; DefaultSockJsService org.springframework.web.socket.config.DefaultSockJsService = ( DefaultSockJsService ) org.springframework.web.socket.config.SockJsHttpRequestHandler . getSockJsService ( ) ; WebSocketTransportHandler org.springframework.web.socket.config.WebSocketTransportHandler = ( WebSocketTransportHandler ) org.springframework.web.socket.config.DefaultSockJsService . getTransportHandlers ( ) . get ( TransportType . WEBSOCKET ) ; assertNotNull ( org.springframework.web.socket.config.WebSocketTransportHandler . getHandshakeHandler ( ) ) ; assertThat ( org.springframework.web.socket.config.WebSocketTransportHandler . getHandshakeHandler ( ) , Matchers . instanceOf ( TestHandshakeHandler .class ) ) ; assertFalse ( org.springframework.web.socket.config.DefaultSockJsService . shouldSuppressCors ( ) ) ; ThreadPoolTaskScheduler org.springframework.web.socket.config.ThreadPoolTaskScheduler = ( ThreadPoolTaskScheduler ) org.springframework.web.socket.config.DefaultSockJsService . getTaskScheduler ( ) ; assertEquals ( java.lang.Runtime . java.lang.Runtime ( ) . int ( ) , org.springframework.web.socket.config.ThreadPoolTaskScheduler . getScheduledThreadPoolExecutor ( ) . getCorePoolSize ( ) ) ; assertTrue ( org.springframework.web.socket.config.ThreadPoolTaskScheduler . getScheduledThreadPoolExecutor ( ) . getRemoveOnCancelPolicy ( ) ) ; java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> = org.springframework.web.socket.config.DefaultSockJsService . getHandshakeInterceptors ( ) ; assertThat ( java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> , contains ( instanceOf ( FooTestInterceptor .class ) , instanceOf ( BarTestInterceptor .class ) , instanceOf ( OriginHandshakeInterceptor .class ) ) ) ; assertTrue ( org.springframework.web.socket.config.DefaultSockJsService . getAllowedOrigins ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.web.socket.config.DefaultSockJsService . getAllowedOrigins ( ) . contains ( STRING ) ) ; SimpUserRegistry org.springframework.web.socket.config.SimpUserRegistry = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( SimpUserRegistry .class ) ; assertNotNull ( org.springframework.web.socket.config.SimpUserRegistry ) ; assertEquals ( DefaultSimpUserRegistry .class , org.springframework.web.socket.config.SimpUserRegistry . getClass ( ) ) ; UserDestinationResolver org.springframework.web.socket.config.UserDestinationResolver = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( UserDestinationResolver .class ) ; assertNotNull ( org.springframework.web.socket.config.UserDestinationResolver ) ; assertThat ( org.springframework.web.socket.config.UserDestinationResolver , Matchers . instanceOf ( DefaultUserDestinationResolver .class ) ) ; DefaultUserDestinationResolver org.springframework.web.socket.config.DefaultUserDestinationResolver = ( DefaultUserDestinationResolver ) org.springframework.web.socket.config.UserDestinationResolver ; assertEquals ( STRING , org.springframework.web.socket.config.DefaultUserDestinationResolver . getDestinationPrefix ( ) ) ; UserDestinationMessageHandler org.springframework.web.socket.config.UserDestinationMessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( UserDestinationMessageHandler .class ) ; assertNotNull ( org.springframework.web.socket.config.UserDestinationMessageHandler ) ; SimpleBrokerMessageHandler org.springframework.web.socket.config.SimpleBrokerMessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( SimpleBrokerMessageHandler .class ) ; assertNotNull ( org.springframework.web.socket.config.SimpleBrokerMessageHandler ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = org.springframework.web.socket.config.SimpleBrokerMessageHandler . getDestinationPrefixes ( ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , new java.util.ArrayList <> ( java.util.Collection<java.lang.String> ) ) ; assertNotNull ( org.springframework.web.socket.config.SimpleBrokerMessageHandler . getTaskScheduler ( ) ) ; assertArrayEquals ( new long [] { NUMBER , NUMBER } , org.springframework.web.socket.config.SimpleBrokerMessageHandler . getHeartbeatValue ( ) ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> < java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Arrays .< java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> ( SimpAnnotationMethodMessageHandler .class , UserDestinationMessageHandler .class , SimpleBrokerMessageHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; void ( STRING , java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER , java.lang.Integer . int , NUMBER ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Collections . java.util.List<java.lang.Class<org.springframework.web.socket.config.SubProtocolWebSocketHandler>> ( SubProtocolWebSocketHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; void ( STRING , java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER , java.lang.Integer . int , NUMBER ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Arrays .< java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> ( SimpleBrokerMessageHandler .class , UserDestinationMessageHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; try { this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( STRING , ThreadPoolTaskExecutor .class ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.web.socket.config.NoSuchBeanDefinitionException ) { } assertNotNull ( this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( STRING , CustomScopeConfigurer .class ) ) ; DirectFieldAccessor org.springframework.web.socket.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.socket.config.SimpleBrokerMessageHandler . getSubscriptionRegistry ( ) ) ; java.lang.String java.lang.String = ( java.lang.String ) new DirectFieldAccessor ( org.springframework.web.socket.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; HandlerMapping org.springframework.web.socket.config.HandlerMapping = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( HandlerMapping .class ) ; assertNotNull ( org.springframework.web.socket.config.HandlerMapping ) ; assertThat ( org.springframework.web.socket.config.HandlerMapping , Matchers . instanceOf ( SimpleUrlHandlerMapping .class ) ) ; SimpleUrlHandlerMapping org.springframework.web.socket.config.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) org.springframework.web.socket.config.HandlerMapping ; assertThat ( org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . keySet ( ) , Matchers . hasSize ( NUMBER ) ) ; assertThat ( org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . values ( ) , Matchers . hasSize ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.SimpleUrlHandlerMapping . getOrder ( ) ) ; HttpRequestHandler org.springframework.web.socket.config.HttpRequestHandler = ( HttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.HttpRequestHandler ) ; assertThat ( org.springframework.web.socket.config.HttpRequestHandler , Matchers . instanceOf ( SockJsHttpRequestHandler .class ) ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) org.springframework.web.socket.config.HttpRequestHandler ; WebSocketHandler org.springframework.web.socket.config.WebSocketHandler = org.springframework.web.socket.config.WebSocketHandler ( org.springframework.web.socket.config.SockJsHttpRequestHandler . getWebSocketHandler ( ) ) ; assertNotNull ( org.springframework.web.socket.config.WebSocketHandler ) ; assertThat ( org.springframework.web.socket.config.WebSocketHandler , Matchers . instanceOf ( SubProtocolWebSocketHandler .class ) ) ; assertNotNull ( org.springframework.web.socket.config.SockJsHttpRequestHandler . getSockJsService ( ) ) ; UserDestinationResolver org.springframework.web.socket.config.UserDestinationResolver = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( UserDestinationResolver .class ) ; assertNotNull ( org.springframework.web.socket.config.UserDestinationResolver ) ; assertThat ( org.springframework.web.socket.config.UserDestinationResolver , Matchers . instanceOf ( DefaultUserDestinationResolver .class ) ) ; DefaultUserDestinationResolver org.springframework.web.socket.config.DefaultUserDestinationResolver = ( DefaultUserDestinationResolver ) org.springframework.web.socket.config.UserDestinationResolver ; assertEquals ( STRING , org.springframework.web.socket.config.DefaultUserDestinationResolver . getDestinationPrefix ( ) ) ; StompBrokerRelayMessageHandler org.springframework.web.socket.config.StompBrokerRelayMessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( StompBrokerRelayMessageHandler .class ) ; assertNotNull ( org.springframework.web.socket.config.StompBrokerRelayMessageHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getClientLogin ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getClientPasscode ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getSystemLogin ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getSystemPasscode ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getRelayHost ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getRelayPort ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getVirtualHost ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getSystemHeartbeatReceiveInterval ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getSystemHeartbeatSendInterval ( ) ) ; assertThat ( org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getDestinationPrefixes ( ) , Matchers . containsInAnyOrder ( STRING , STRING ) ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> < java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Arrays .< java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> ( SimpAnnotationMethodMessageHandler .class , UserDestinationMessageHandler .class , StompBrokerRelayMessageHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; void ( STRING , java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER , java.lang.Integer . int , NUMBER ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Collections . java.util.List<java.lang.Class<org.springframework.web.socket.config.SubProtocolWebSocketHandler>> ( SubProtocolWebSocketHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; void ( STRING , java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER , java.lang.Integer . int , NUMBER ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Arrays .< java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> ( StompBrokerRelayMessageHandler .class , UserDestinationMessageHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; try { this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( STRING , ThreadPoolTaskExecutor .class ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.web.socket.config.NoSuchBeanDefinitionException ) { } java.lang.String java.lang.String = STRING ; UserDestinationMessageHandler org.springframework.web.socket.config.UserDestinationMessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( UserDestinationMessageHandler .class ) ; assertEquals ( java.lang.String , org.springframework.web.socket.config.UserDestinationMessageHandler . getBroadcastDestination ( ) ) ; assertNotNull ( org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getSystemSubscriptions ( ) ) ; assertSame ( org.springframework.web.socket.config.UserDestinationMessageHandler , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getSystemSubscriptions ( ) . get ( java.lang.String ) ) ; java.lang.String = STRING ; UserRegistryMessageHandler org.springframework.web.socket.config.UserRegistryMessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( UserRegistryMessageHandler .class ) ; assertEquals ( java.lang.String , org.springframework.web.socket.config.UserRegistryMessageHandler . getBroadcastDestination ( ) ) ; assertNotNull ( org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getSystemSubscriptions ( ) ) ; assertSame ( org.springframework.web.socket.config.UserRegistryMessageHandler , org.springframework.web.socket.config.StompBrokerRelayMessageHandler . getSystemSubscriptions ( ) . get ( java.lang.String ) ) ; SimpUserRegistry org.springframework.web.socket.config.SimpUserRegistry = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( SimpUserRegistry .class ) ; assertEquals ( MultiServerUserRegistry .class , org.springframework.web.socket.config.SimpUserRegistry . getClass ( ) ) ; java.lang.String java.lang.String = STRING ; WebSocketMessageBrokerStats org.springframework.web.socket.config.WebSocketMessageBrokerStats = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( java.lang.String , WebSocketMessageBrokerStats .class ) ; java.lang.String java.lang.String = org.springframework.web.socket.config.WebSocketMessageBrokerStats . toString ( ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING ; assertTrue ( STRING + java.lang.String . java.lang.String ( STRING , STRING ) + STRING + java.lang.String , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; SimpAnnotationMethodMessageHandler org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ; assertNotNull ( org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler ) ; MessageConverter org.springframework.web.socket.config.MessageConverter = org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler . getMessageConverter ( ) ; assertNotNull ( org.springframework.web.socket.config.MessageConverter ) ; assertTrue ( org.springframework.web.socket.config.MessageConverter instanceof CompositeMessageConverter ) ; java.lang.String java.lang.String = MessageBrokerBeanDefinitionParser . MESSAGE_CONVERTER_BEAN_NAME ; CompositeMessageConverter org.springframework.web.socket.config.CompositeMessageConverter = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( java.lang.String , CompositeMessageConverter .class ) ; assertNotNull ( org.springframework.web.socket.config.CompositeMessageConverter ) ; java.lang.String = MessageBrokerBeanDefinitionParser . MESSAGING_TEMPLATE_BEAN_NAME ; SimpMessagingTemplate org.springframework.web.socket.config.SimpMessagingTemplate = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( java.lang.String , SimpMessagingTemplate .class ) ; assertNotNull ( org.springframework.web.socket.config.SimpMessagingTemplate ) ; assertEquals ( STRING , org.springframework.web.socket.config.SimpMessagingTemplate . getUserDestinationPrefix ( ) ) ; java.util.List<org.springframework.web.socket.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.web.socket.config.MessageConverter> = org.springframework.web.socket.config.CompositeMessageConverter . getConverters ( ) ; assertThat ( java.util.List<org.springframework.web.socket.config.MessageConverter> . size ( ) , Matchers . is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.socket.config.MessageConverter> . get ( NUMBER ) , Matchers . instanceOf ( StringMessageConverter .class ) ) ; assertThat ( java.util.List<org.springframework.web.socket.config.MessageConverter> . get ( NUMBER ) , Matchers . instanceOf ( ByteArrayMessageConverter .class ) ) ; assertThat ( java.util.List<org.springframework.web.socket.config.MessageConverter> . get ( NUMBER ) , Matchers . instanceOf ( MappingJackson2MessageConverter .class ) ) ; ContentTypeResolver org.springframework.web.socket.config.ContentTypeResolver = ( ( MappingJackson2MessageConverter ) java.util.List<org.springframework.web.socket.config.MessageConverter> . get ( NUMBER ) ) . getContentTypeResolver ( ) ; assertEquals ( MimeTypeUtils . APPLICATION_JSON , ( ( DefaultContentTypeResolver ) org.springframework.web.socket.config.ContentTypeResolver ) . getDefaultMimeType ( ) ) ; DirectFieldAccessor org.springframework.web.socket.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler ) ; java.lang.String java.lang.String = ( java.lang.String ) new DirectFieldAccessor ( org.springframework.web.socket.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; SimpAnnotationMethodMessageHandler org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ; Validator org.springframework.web.socket.config.Validator = org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler . getValidator ( ) ; assertNotNull ( org.springframework.web.socket.config.Validator ) ; assertSame ( this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( STRING ) , org.springframework.web.socket.config.Validator ) ; assertThat ( org.springframework.web.socket.config.Validator , Matchers . instanceOf ( org.springframework.web.socket.config.TestValidator .class ) ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> < java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Arrays .< java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> ( SimpAnnotationMethodMessageHandler .class , UserDestinationMessageHandler .class , SimpleBrokerMessageHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; void ( STRING , NUMBER , NUMBER , NUMBER ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Collections . java.util.List<java.lang.Class<org.springframework.web.socket.config.SubProtocolWebSocketHandler>> ( SubProtocolWebSocketHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; void ( STRING , NUMBER , NUMBER , NUMBER ) ; java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> = java.util.Arrays .< java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> ( SimpleBrokerMessageHandler .class , UserDestinationMessageHandler .class ) ; void ( STRING , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , NUMBER ) ; void ( STRING , NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING , java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER , java.lang.Integer . int , NUMBER ) ; void ( STRING , java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER , java.lang.Integer . int , NUMBER ) ; assertFalse ( this . org.springframework.web.socket.config.GenericWebApplicationContext . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; SimpAnnotationMethodMessageHandler org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( SimpAnnotationMethodMessageHandler .class ) ; java.util.List<org.springframework.web.socket.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.socket.config.HandlerMethodArgumentResolver> = org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler . getCustomArgumentResolvers ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.HandlerMethodArgumentResolver> . size ( ) ) ; assertTrue ( org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler . getArgumentResolvers ( ) . contains ( java.util.List<org.springframework.web.socket.config.HandlerMethodArgumentResolver> . get ( NUMBER ) ) ) ; assertTrue ( org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler . getArgumentResolvers ( ) . contains ( java.util.List<org.springframework.web.socket.config.HandlerMethodArgumentResolver> . get ( NUMBER ) ) ) ; java.util.List<org.springframework.web.socket.config.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.web.socket.config.HandlerMethodReturnValueHandler> = org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler . getCustomReturnValueHandlers ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.HandlerMethodReturnValueHandler> . size ( ) ) ; assertTrue ( org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler . getReturnValueHandlers ( ) . contains ( java.util.List<org.springframework.web.socket.config.HandlerMethodReturnValueHandler> . get ( NUMBER ) ) ) ; assertTrue ( org.springframework.web.socket.config.SimpAnnotationMethodMessageHandler . getReturnValueHandlers ( ) . contains ( java.util.List<org.springframework.web.socket.config.HandlerMethodReturnValueHandler> . get ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; CompositeMessageConverter org.springframework.web.socket.config.CompositeMessageConverter = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( CompositeMessageConverter .class ) ; assertNotNull ( org.springframework.web.socket.config.CompositeMessageConverter ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.CompositeMessageConverter . getConverters ( ) . size ( ) ) ; assertEquals ( StringMessageConverter .class , org.springframework.web.socket.config.CompositeMessageConverter . getConverters ( ) . iterator ( ) . next ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; CompositeMessageConverter org.springframework.web.socket.config.CompositeMessageConverter = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( CompositeMessageConverter .class ) ; assertNotNull ( org.springframework.web.socket.config.CompositeMessageConverter ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.CompositeMessageConverter . getConverters ( ) . size ( ) ) ; assertEquals ( StringMessageConverter .class , org.springframework.web.socket.config.CompositeMessageConverter . getConverters ( ) . iterator ( ) . next ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> < java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > > java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> , int int ) { AbstractSubscribableChannel org.springframework.web.socket.config.AbstractSubscribableChannel = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( java.lang.String , AbstractSubscribableChannel .class ) ; for ( java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> < ? extends MessageHandler > java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler> : java.util.List<java.lang.Class<? extends org.springframework.web.socket.config.MessageHandler>> ) { MessageHandler org.springframework.web.socket.config.MessageHandler = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( java.lang.Class<> ) ; assertNotNull ( STRING + java.lang.Class<> , org.springframework.web.socket.config.MessageHandler ) ; assertTrue ( org.springframework.web.socket.config.AbstractSubscribableChannel . hasSubscription ( org.springframework.web.socket.config.MessageHandler ) ) ; } java.util.List<org.springframework.web.socket.config.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.web.socket.config.ChannelInterceptor> = org.springframework.web.socket.config.AbstractSubscribableChannel . getInterceptors ( ) ; assertEquals ( int , java.util.List<org.springframework.web.socket.config.ChannelInterceptor> . size ( ) ) ; assertEquals ( ImmutableMessageChannelInterceptor .class , java.util.List<org.springframework.web.socket.config.ChannelInterceptor> . get ( java.util.List<org.springframework.web.socket.config.ChannelInterceptor> . size ( ) - NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , int int , int int , int int ) { ThreadPoolTaskExecutor org.springframework.web.socket.config.ThreadPoolTaskExecutor = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( java.lang.String + STRING , ThreadPoolTaskExecutor .class ) ; assertEquals ( int , org.springframework.web.socket.config.ThreadPoolTaskExecutor . getCorePoolSize ( ) ) ; assertEquals ( int , org.springframework.web.socket.config.ThreadPoolTaskExecutor . getMaxPoolSize ( ) ) ; assertEquals ( int , org.springframework.web.socket.config.ThreadPoolTaskExecutor . getKeepAliveSeconds ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { XmlBeanDefinitionReader org.springframework.web.socket.config.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( this . org.springframework.web.socket.config.GenericWebApplicationContext ) ; ClassPathResource org.springframework.web.socket.config.ClassPathResource = new ClassPathResource ( java.lang.String , org.springframework.web.socket.config.MessageBrokerBeanDefinitionParserTests .class ) ; org.springframework.web.socket.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.web.socket.config.ClassPathResource ) ; this . org.springframework.web.socket.config.GenericWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.web.socket.config.GenericWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.config.WebSocketHandler org.springframework.web.socket.config.WebSocketHandler ( WebSocketHandler org.springframework.web.socket.config.WebSocketHandler ) { return ( org.springframework.web.socket.config.WebSocketHandler instanceof WebSocketHandlerDecorator ) ? ( ( WebSocketHandlerDecorator ) org.springframework.web.socket.config.WebSocketHandler ) . getLastHandler ( ) : org.springframework.web.socket.config.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.socket.config.MethodParameter ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.socket.config.MethodParameter , Message < ? > org.springframework.web.socket.config.Message<?> ) throws java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.socket.config.MethodParameter ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.socket.config.MethodParameter , Message < ? > org.springframework.web.socket.config.Message<?> ) throws java.lang.Exception {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.WebSocketHandler org.springframework.web.socket.config.WebSocketHandler ( WebSocketHandler org.springframework.web.socket.config.WebSocketHandler ) { return new org.springframework.web.socket.config.TestWebSocketHandlerDecorator ( org.springframework.web.socket.config.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.config.WebSocketHandler ) { super( org.springframework.web.socket.config.WebSocketHandler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.WebSocketSession ) throws java.lang.Exception { org.springframework.web.socket.config.WebSocketSession . getAttributes ( ) . put ( STRING , true ) ; super. afterConnectionEstablished ( org.springframework.web.socket.config.WebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.web.socket.config.Errors ) { }  <METHOD_END>
