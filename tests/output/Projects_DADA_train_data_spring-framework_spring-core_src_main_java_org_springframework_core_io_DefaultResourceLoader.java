<METHOD_START> public void ( ) { this . java.lang.ClassLoader = ClassUtils . getDefaultClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return ( this . java.lang.ClassLoader != null ? this . java.lang.ClassLoader : ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ProtocolResolver org.springframework.core.io.ProtocolResolver ) { Assert . notNull ( org.springframework.core.io.ProtocolResolver , STRING ) ; this . java.util.Set<org.springframework.core.io.ProtocolResolver> . add ( org.springframework.core.io.ProtocolResolver ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.core.io.ProtocolResolver> < ProtocolResolver > java.util.Collection<org.springframework.core.io.ProtocolResolver> ( ) { return this . java.util.Set<org.springframework.core.io.ProtocolResolver> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > java.util.Map<org.springframework.core.io.Resource,T> < Resource , T > java.util.Map<org.springframework.core.io.Resource,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return ( java.util.Map<org.springframework.core.io.Resource,T> < Resource , T > ) this . java.util.Map<java.lang.Class<?>,java.util.Map<org.springframework.core.io.Resource,?>> . computeIfAbsent ( java.lang.Class<T> , key -> new ConcurrentHashMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.Map<java.lang.Class<?>,java.util.Map<org.springframework.core.io.Resource,?>> . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.Resource org.springframework.core.io.Resource ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; for ( ProtocolResolver org.springframework.core.io.ProtocolResolver : this . java.util.Set<org.springframework.core.io.ProtocolResolver> ) { Resource org.springframework.core.io.Resource = org.springframework.core.io.ProtocolResolver . resolve ( java.lang.String , this ) ; if ( org.springframework.core.io.Resource != null ) { return org.springframework.core.io.Resource ; } } if ( java.lang.String . boolean ( STRING ) ) { return org.springframework.core.io.Resource ( java.lang.String ) ; } else if ( java.lang.String . boolean ( CLASSPATH_URL_PREFIX ) ) { return new ClassPathResource ( java.lang.String . java.lang.String ( CLASSPATH_URL_PREFIX . length ( ) ) , java.lang.ClassLoader ( ) ) ; } else { try { java.net.URL java.net.URL = new java.net.URL ( java.lang.String ) ; return new UrlResource ( java.net.URL ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { return org.springframework.core.io.Resource ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.core.io.Resource org.springframework.core.io.Resource ( java.lang.String java.lang.String ) { return new org.springframework.core.io.DefaultResourceLoader.ClassPathContextResource ( java.lang.String , java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.String , java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return getPath ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.Resource org.springframework.core.io.Resource ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = StringUtils . applyRelativePath ( getPath ( ) , java.lang.String ) ; return new org.springframework.core.io.DefaultResourceLoader.ClassPathContextResource ( java.lang.String , java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
