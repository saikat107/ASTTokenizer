<METHOD_START> @ Test public void void ( ) { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setUrl ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getDriverClassName ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineDriverClassName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setUrl ( STRING ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setDriverClassName ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getDriverClassName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineDriverClassName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getUrl ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) . isEqualTo ( EmbeddedDatabaseConnection . H2 . getUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setUrl ( STRING ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getUrl ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setGenerateUniqueName ( true ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) ; DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setGenerateUniqueName ( true ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) . isNotEqualTo ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getUsername ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUsername ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setUsername ( STRING ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getUsername ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determineUsername ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getPassword ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determinePassword ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setPassword ( STRING ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . afterPropertiesSet ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getPassword ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . determinePassword ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setSchemaUsername ( STRING ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setSchemaPassword ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getSchemaUsername ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getSchemaPassword ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties = new DataSourceProperties ( ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setDataUsername ( STRING ) ; org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . setDataPassword ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getDataUsername ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties . getDataPassword ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
