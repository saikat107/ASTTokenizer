<METHOD_START> @ Test public void void ( ) { RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING , STRING ) ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestConditionHolder , org.springframework.web.reactive.result.condition.RequestConditionHolder . combine ( org.springframework.web.reactive.result.condition.RequestConditionHolder ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( null ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; assertSame ( org.springframework.web.reactive.result.condition.RequestConditionHolder , org.springframework.web.reactive.result.condition.RequestConditionHolder . combine ( org.springframework.web.reactive.result.condition.RequestConditionHolder ) ) ; assertSame ( org.springframework.web.reactive.result.condition.RequestConditionHolder , org.springframework.web.reactive.result.condition.RequestConditionHolder . combine ( org.springframework.web.reactive.result.condition.RequestConditionHolder ) ) ; assertSame ( org.springframework.web.reactive.result.condition.RequestConditionHolder , org.springframework.web.reactive.result.condition.RequestConditionHolder . combine ( org.springframework.web.reactive.result.condition.RequestConditionHolder ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.ClassCastException .class ) public void void ( ) { RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new HeadersRequestCondition ( STRING ) ) ; org.springframework.web.reactive.result.condition.RequestConditionHolder . combine ( org.springframework.web.reactive.result.condition.RequestConditionHolder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( RequestMethod . GET , RequestMethod . POST ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ) ; RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( RequestMethod . GET ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = org.springframework.web.reactive.result.condition.RequestConditionHolder . getMatchingCondition ( this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNotNull ( org.springframework.web.reactive.result.condition.RequestConditionHolder ) ; assertEquals ( org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition , org.springframework.web.reactive.result.condition.RequestConditionHolder . getCondition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestMethodsRequestCondition org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( RequestMethod . POST ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( org.springframework.web.reactive.result.condition.RequestMethodsRequestCondition ) ; assertNull ( org.springframework.web.reactive.result.condition.RequestConditionHolder . getMatchingCondition ( this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( null ) ; assertSame ( org.springframework.web.reactive.result.condition.RequestConditionHolder , org.springframework.web.reactive.result.condition.RequestConditionHolder . getMatchingCondition ( this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING , STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.RequestConditionHolder . compareTo ( org.springframework.web.reactive.result.condition.RequestConditionHolder , this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; assertEquals ( - NUMBER , org.springframework.web.reactive.result.condition.RequestConditionHolder . compareTo ( org.springframework.web.reactive.result.condition.RequestConditionHolder , this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( null ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( null ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.RequestConditionHolder . compareTo ( org.springframework.web.reactive.result.condition.RequestConditionHolder , this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; assertEquals ( - NUMBER , org.springframework.web.reactive.result.condition.RequestConditionHolder . compareTo ( org.springframework.web.reactive.result.condition.RequestConditionHolder , this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.condition.RequestConditionHolder . compareTo ( org.springframework.web.reactive.result.condition.RequestConditionHolder , this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.ClassCastException .class ) public void void ( ) { RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.reactive.result.condition.RequestConditionHolder = new RequestConditionHolder ( new HeadersRequestCondition ( STRING ) ) ; org.springframework.web.reactive.result.condition.RequestConditionHolder . compareTo ( org.springframework.web.reactive.result.condition.RequestConditionHolder , this . org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; }  <METHOD_END>
