<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; void ( org.springframework.integration.config.PollableChannel , STRING , STRING , STRING ) ; void ( org.springframework.integration.config.PollableChannel , STRING , STRING , STRING ) ; void ( org.springframework.integration.config.PollableChannel , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.config.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; void ( org.springframework.integration.config.PollableChannel , STRING , STRING , STRING ) ; void ( org.springframework.integration.config.PollableChannel , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( PollableChannel org.springframework.integration.config.PollableChannel , java.lang.String ... java.lang.String[] ) { Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; Assert . assertNotNull ( org.springframework.integration.config.Message<> ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { assertThat ( ( java.lang.String ) org.springframework.integration.config.Message<> . getPayload ( ) , containsString ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( MessageGroup org.springframework.integration.config.MessageGroup ) { return org.springframework.integration.config.MessageGroup . size ( ) == int ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.Message<?> ) { return org.springframework.integration.config.Message<> . getPayload ( ) . toString ( ) . subSequence ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer . java.lang.String ( java.lang.Integer % NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.Object . java.lang.String ( ) ) ; } return java.lang.StringBuffer . java.lang.String ( ) ; }  <METHOD_END>
