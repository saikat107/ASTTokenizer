<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Type java.lang.reflect.Type = SerializableTypeWrapper . forField ( org.springframework.core.SerializableTypeWrapperTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( java.lang.reflect.Type . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.SerializableTypeWrapperTests.Methods .class . java.lang.reflect.Method ( STRING , java.lang.Class .class , java.lang.Object .class ) ; java.lang.reflect.Type java.lang.reflect.Type = SerializableTypeWrapper . forMethodParameter ( MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ) ; assertThat ( java.lang.reflect.Type . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = org.springframework.core.SerializableTypeWrapperTests.Constructors .class . java.lang.reflect.Constructor<org.springframework.core.SerializableTypeWrapperTests.Constructors> ( java.util.List .class ) ; java.lang.reflect.Type java.lang.reflect.Type = SerializableTypeWrapper . forMethodParameter ( MethodParameter . forExecutable ( java.lang.reflect.Constructor<> , NUMBER ) ) ; assertThat ( java.lang.reflect.Type . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Type java.lang.reflect.Type = SerializableTypeWrapper . forGenericSuperclass ( java.util.ArrayList .class ) ; assertThat ( java.lang.reflect.Type . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Type java.lang.reflect.Type = SerializableTypeWrapper . forGenericInterfaces ( java.util.List .class ) [ NUMBER ] ; assertThat ( java.lang.reflect.Type . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Type java.lang.reflect.Type = SerializableTypeWrapper . forTypeParameters ( java.util.List .class ) [ NUMBER ] ; assertThat ( java.lang.reflect.Type . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Type java.lang.reflect.Type = SerializableTypeWrapper . forField ( org.springframework.core.SerializableTypeWrapperTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( java.lang.reflect.Type . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ( java.lang.reflect.GenericArrayType ) SerializableTypeWrapper . forField ( org.springframework.core.SerializableTypeWrapperTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( java.lang.reflect.GenericArrayType . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.GenericArrayType ) ; void ( java.lang.reflect.GenericArrayType . java.lang.reflect.Type ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) SerializableTypeWrapper . forField ( org.springframework.core.SerializableTypeWrapperTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( java.lang.reflect.ParameterizedType . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.ParameterizedType ) ; void ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) ) ; void ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) ) ; void ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) ) ; void ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.TypeVariable<?> < ? > java.lang.reflect.TypeVariable<?> = ( java.lang.reflect.TypeVariable<?> < ? > ) SerializableTypeWrapper . forField ( org.springframework.core.SerializableTypeWrapperTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( java.lang.reflect.TypeVariable<> . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.TypeVariable<> ) ; void ( java.lang.reflect.TypeVariable<> . java.lang.reflect.Type[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ( java.lang.reflect.ParameterizedType ) SerializableTypeWrapper . forField ( org.springframework.core.SerializableTypeWrapperTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ( java.lang.reflect.WildcardType ) java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ; assertThat ( java.lang.reflect.WildcardType . java.lang.String ( ) , equalTo ( STRING ) ) ; void ( java.lang.reflect.WildcardType ) ; void ( java.lang.reflect.WildcardType . java.lang.reflect.Type[] ( ) ) ; void ( java.lang.reflect.WildcardType . java.lang.reflect.Type[] ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( java.lang.Object ) ; java.io.ObjectOutputStream . void ( ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; assertThat ( java.io.ObjectInputStream . java.lang.Object ( ) , equalTo ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Class<T> < T > java.lang.Class<T> , T T );  <METHOD_END>
<METHOD_START> public void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) {		}  <METHOD_END>
