<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ReplaceRootOperation ( ( Field ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ReplaceRootOperation ( ( AggregationExpression ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReplaceRootOperation org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation = ReplaceRootDocumentOperation . builder ( ) . withDocument ( new Document ( STRING , STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReplaceRootOperation org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation = new ReplaceRootOperation ( VariableOperators . mapItemsOf ( STRING ) . as ( STRING ) . andApply ( AggregationFunctionExpressions . MULTIPLY . of ( STRING , NUMBER ) ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING + STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReplaceRootOperation org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation = ReplaceRootDocumentOperation . builder ( ) . withDocument ( ) . andValue ( STRING ) . as ( STRING ) . and ( AggregationFunctionExpressions . MULTIPLY . of ( STRING , NUMBER ) ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( STRING , STRING ) . append ( STRING , STRING ) ; ReplaceRootOperation org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation = ReplaceRootDocumentOperation . builder ( ) . withDocument ( ) . andValue ( STRING ) . as ( STRING ) . andValuesOf ( org.springframework.data.mongodb.core.aggregation.Document ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReplaceRootOperation org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation = new ReplaceRootOperation ( Fields . field ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation . getFields ( ) . exposesNoFields ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.ReplaceRootOperation . getFields ( ) . exposesSingleFieldOnly ( ) , is ( false ) ) ; }  <METHOD_END>
