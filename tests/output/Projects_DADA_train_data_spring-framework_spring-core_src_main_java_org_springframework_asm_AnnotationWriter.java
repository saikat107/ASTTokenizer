<METHOD_START> void ( final ClassWriter org.springframework.asm.ClassWriter , final boolean boolean , final ByteVector org.springframework.asm.ByteVector , final ByteVector org.springframework.asm.ByteVector , final int int ) { super( Opcodes . ASM5 ); this . org.springframework.asm.ClassWriter = org.springframework.asm.ClassWriter ; this . boolean = boolean ; this . org.springframework.asm.ByteVector = org.springframework.asm.ByteVector ; this . org.springframework.asm.ByteVector = org.springframework.asm.ByteVector ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) { ++ int ; if ( boolean ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) ; } if ( java.lang.Object instanceof java.lang.String ) { org.springframework.asm.ByteVector . put12 ( 's' , org.springframework.asm.ClassWriter . newUTF8 ( ( java.lang.String ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.lang.Byte ) { org.springframework.asm.ByteVector . put12 ( 'B' , org.springframework.asm.ClassWriter . newInteger ( ( ( java.lang.Byte ) java.lang.Object ) . byte ( ) ) . index ) ; } else if ( java.lang.Object instanceof java.lang.Boolean ) { int int = ( ( java.lang.Boolean ) java.lang.Object ) . boolean ( ) ? NUMBER : NUMBER ; org.springframework.asm.ByteVector . put12 ( 'Z' , org.springframework.asm.ClassWriter . newInteger ( int ) . index ) ; } else if ( java.lang.Object instanceof java.lang.Character ) { org.springframework.asm.ByteVector . put12 ( 'C' , org.springframework.asm.ClassWriter . newInteger ( ( ( java.lang.Character ) java.lang.Object ) . char ( ) ) . index ) ; } else if ( java.lang.Object instanceof java.lang.Short ) { org.springframework.asm.ByteVector . put12 ( 'S' , org.springframework.asm.ClassWriter . newInteger ( ( ( java.lang.Short ) java.lang.Object ) . short ( ) ) . index ) ; } else if ( java.lang.Object instanceof Type ) { org.springframework.asm.ByteVector . put12 ( 'c' , org.springframework.asm.ClassWriter . newUTF8 ( ( ( Type ) java.lang.Object ) . getDescriptor ( ) ) ) ; } else if ( java.lang.Object instanceof byte [] ) { byte [] byte[] = ( byte [] ) java.lang.Object ; org.springframework.asm.ByteVector . put12 ( '[' , byte[] . int ) ; for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { org.springframework.asm.ByteVector . put12 ( 'B' , org.springframework.asm.ClassWriter . newInteger ( byte[] [ int ] ) . index ) ; } } else if ( java.lang.Object instanceof boolean [] ) { boolean [] boolean[] = ( boolean [] ) java.lang.Object ; org.springframework.asm.ByteVector . put12 ( '[' , boolean[] . int ) ; for ( int int = NUMBER ; int < boolean[] . int ; int ++ ) { org.springframework.asm.ByteVector . put12 ( 'Z' , org.springframework.asm.ClassWriter . newInteger ( boolean[] [ int ] ? NUMBER : NUMBER ) . index ) ; } } else if ( java.lang.Object instanceof short [] ) { short [] short[] = ( short [] ) java.lang.Object ; org.springframework.asm.ByteVector . put12 ( '[' , short[] . int ) ; for ( int int = NUMBER ; int < short[] . int ; int ++ ) { org.springframework.asm.ByteVector . put12 ( 'S' , org.springframework.asm.ClassWriter . newInteger ( short[] [ int ] ) . index ) ; } } else if ( java.lang.Object instanceof char [] ) { char [] char[] = ( char [] ) java.lang.Object ; org.springframework.asm.ByteVector . put12 ( '[' , char[] . int ) ; for ( int int = NUMBER ; int < char[] . int ; int ++ ) { org.springframework.asm.ByteVector . put12 ( 'C' , org.springframework.asm.ClassWriter . newInteger ( char[] [ int ] ) . index ) ; } } else if ( java.lang.Object instanceof int [] ) { int [] int[] = ( int [] ) java.lang.Object ; org.springframework.asm.ByteVector . put12 ( '[' , int[] . int ) ; for ( int int = NUMBER ; int < int[] . int ; int ++ ) { org.springframework.asm.ByteVector . put12 ( 'I' , org.springframework.asm.ClassWriter . newInteger ( int[] [ int ] ) . index ) ; } } else if ( java.lang.Object instanceof long [] ) { long [] long[] = ( long [] ) java.lang.Object ; org.springframework.asm.ByteVector . put12 ( '[' , long[] . int ) ; for ( int int = NUMBER ; int < long[] . int ; int ++ ) { org.springframework.asm.ByteVector . put12 ( 'J' , org.springframework.asm.ClassWriter . newLong ( long[] [ int ] ) . index ) ; } } else if ( java.lang.Object instanceof float [] ) { float [] float[] = ( float [] ) java.lang.Object ; org.springframework.asm.ByteVector . put12 ( '[' , float[] . int ) ; for ( int int = NUMBER ; int < float[] . int ; int ++ ) { org.springframework.asm.ByteVector . put12 ( 'F' , org.springframework.asm.ClassWriter . newFloat ( float[] [ int ] ) . index ) ; } } else if ( java.lang.Object instanceof double [] ) { double [] double[] = ( double [] ) java.lang.Object ; org.springframework.asm.ByteVector . put12 ( '[' , double[] . int ) ; for ( int int = NUMBER ; int < double[] . int ; int ++ ) { org.springframework.asm.ByteVector . put12 ( 'D' , org.springframework.asm.ClassWriter . newDouble ( double[] [ int ] ) . index ) ; } } else { Item org.springframework.asm.Item = org.springframework.asm.ClassWriter . newConstItem ( java.lang.Object ) ; org.springframework.asm.ByteVector . put12 ( STRING . char ( i . type ) , i . index ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { ++ int ; if ( boolean ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) ; } org.springframework.asm.ByteVector . put12 ( 'e' , org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { ++ int ; if ( boolean ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) ; } org.springframework.asm.ByteVector . put12 ( '@' , org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) . putShort ( NUMBER ) ; return new org.springframework.asm.AnnotationWriter ( org.springframework.asm.ClassWriter , true , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector . length - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.asm.AnnotationVisitor org.springframework.asm.AnnotationVisitor ( final java.lang.String java.lang.String ) { ++ int ; if ( boolean ) { org.springframework.asm.ByteVector . putShort ( org.springframework.asm.ClassWriter . newUTF8 ( java.lang.String ) ) ; } org.springframework.asm.ByteVector . put12 ( '[' , NUMBER ) ; return new org.springframework.asm.AnnotationWriter ( org.springframework.asm.ClassWriter , false , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector , org.springframework.asm.ByteVector . length - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.asm.ByteVector != null ) { byte [] byte[] = org.springframework.asm.ByteVector . data ; byte[] [ int ] = ( byte ) ( int >>> NUMBER ) ; byte[] [ int + NUMBER ] = ( byte ) int ; } }  <METHOD_END>
<METHOD_START> int int ( ) { int int = NUMBER ; org.springframework.asm.AnnotationWriter org.springframework.asm.AnnotationWriter = this ; while ( org.springframework.asm.AnnotationWriter != null ) { int += org.springframework.asm.AnnotationWriter . org.springframework.asm.ByteVector . length ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter . org.springframework.asm.AnnotationWriter ; } return int ; }  <METHOD_END>
<METHOD_START> void void ( final ByteVector org.springframework.asm.ByteVector ) { int int = NUMBER ; int int = NUMBER ; org.springframework.asm.AnnotationWriter org.springframework.asm.AnnotationWriter = this ; org.springframework.asm.AnnotationWriter org.springframework.asm.AnnotationWriter = null ; while ( org.springframework.asm.AnnotationWriter != null ) { ++ int ; int += org.springframework.asm.AnnotationWriter . org.springframework.asm.ByteVector . length ; org.springframework.asm.AnnotationWriter . void ( ) ; org.springframework.asm.AnnotationWriter . org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter . org.springframework.asm.AnnotationWriter ; } org.springframework.asm.ByteVector . putInt ( int ) ; org.springframework.asm.ByteVector . putShort ( int ) ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; while ( org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.AnnotationWriter . org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.AnnotationWriter . org.springframework.asm.ByteVector . length ) ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter . org.springframework.asm.AnnotationWriter ; } }  <METHOD_END>
<METHOD_START> static void void ( final org.springframework.asm.AnnotationWriter [] org.springframework.asm.AnnotationWriter[] , final int int , final ByteVector org.springframework.asm.ByteVector ) { int int = NUMBER + NUMBER * ( org.springframework.asm.AnnotationWriter[] . int - int ) ; for ( int int = int ; int < org.springframework.asm.AnnotationWriter[] . int ; ++ int ) { int += org.springframework.asm.AnnotationWriter[] [ int ] == null ? NUMBER : org.springframework.asm.AnnotationWriter[] [ int ] . int ( ) ; } org.springframework.asm.ByteVector . putInt ( int ) . putByte ( org.springframework.asm.AnnotationWriter[] . int - int ) ; for ( int int = int ; int < org.springframework.asm.AnnotationWriter[] . int ; ++ int ) { org.springframework.asm.AnnotationWriter org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter[] [ int ] ; org.springframework.asm.AnnotationWriter org.springframework.asm.AnnotationWriter = null ; int int = NUMBER ; while ( org.springframework.asm.AnnotationWriter != null ) { ++ int ; org.springframework.asm.AnnotationWriter . void ( ) ; org.springframework.asm.AnnotationWriter . org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter . org.springframework.asm.AnnotationWriter ; } org.springframework.asm.ByteVector . putShort ( int ) ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter ; while ( org.springframework.asm.AnnotationWriter != null ) { org.springframework.asm.ByteVector . putByteArray ( org.springframework.asm.AnnotationWriter . org.springframework.asm.ByteVector . data , NUMBER , org.springframework.asm.AnnotationWriter . org.springframework.asm.ByteVector . length ) ; org.springframework.asm.AnnotationWriter = org.springframework.asm.AnnotationWriter . org.springframework.asm.AnnotationWriter ; } } }  <METHOD_END>
<METHOD_START> static void void ( int int , TypePath org.springframework.asm.TypePath , ByteVector org.springframework.asm.ByteVector ) { switch ( int >>> NUMBER ) { case NUMBER : case NUMBER : case NUMBER : org.springframework.asm.ByteVector . putShort ( int >>> NUMBER ) ; break; case NUMBER : case NUMBER : case NUMBER : org.springframework.asm.ByteVector . putByte ( int >>> NUMBER ) ; break; case NUMBER : case NUMBER : case NUMBER : case NUMBER : case NUMBER : org.springframework.asm.ByteVector . putInt ( int ) ; break; default: org.springframework.asm.ByteVector . put12 ( int >>> NUMBER , ( int & NUMBER ) >> NUMBER ) ; break; } if ( org.springframework.asm.TypePath == null ) { org.springframework.asm.ByteVector . putByte ( NUMBER ) ; } else { int int = typePath . b [ typePath . offset ] * NUMBER + NUMBER ; org.springframework.asm.ByteVector . putByteArray ( typePath . b , typePath . offset , int ) ; } }  <METHOD_END>
