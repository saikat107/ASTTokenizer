<METHOD_START> @ Bean org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.NonEmbeddedInMemoryDatabaseShutdownExecutor org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.NonEmbeddedInMemoryDatabaseShutdownExecutor ( javax.sql.DataSource javax.sql.DataSource , DataSourceProperties org.springframework.boot.devtools.autoconfigure.DataSourceProperties ) { return new org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.NonEmbeddedInMemoryDatabaseShutdownExecutor ( javax.sql.DataSource , org.springframework.boot.devtools.autoconfigure.DataSourceProperties ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> void ( javax.sql.DataSource javax.sql.DataSource , DataSourceProperties org.springframework.boot.devtools.autoconfigure.DataSourceProperties ) { this . javax.sql.DataSource = javax.sql.DataSource ; this . org.springframework.boot.devtools.autoconfigure.DataSourceProperties = org.springframework.boot.devtools.autoconfigure.DataSourceProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( boolean ( ) ) { this . javax.sql.DataSource . java.sql.Connection ( ) . java.sql.Statement ( ) . boolean ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { for ( org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.NonEmbeddedInMemoryDatabaseShutdownExecutor.InMemoryDatabase org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.NonEmbeddedInMemoryDatabaseShutdownExecutor.InMemoryDatabase : org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.NonEmbeddedInMemoryDatabaseShutdownExecutor.InMemoryDatabase . org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.NonEmbeddedInMemoryDatabaseShutdownExecutor.InMemoryDatabase[] ( ) ) { if ( org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration.NonEmbeddedInMemoryDatabaseShutdownExecutor.InMemoryDatabase . boolean ( this . org.springframework.boot.devtools.autoconfigure.DataSourceProperties ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { this . java.lang.String = java.lang.String ; this . java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( DataSourceProperties org.springframework.boot.devtools.autoconfigure.DataSourceProperties ) { java.lang.String java.lang.String = org.springframework.boot.devtools.autoconfigure.DataSourceProperties . getUrl ( ) ; return ( java.lang.String == null || this . java.lang.String == null || java.lang.String . boolean ( this . java.lang.String ) ) && this . java.util.Set<java.lang.String> . boolean ( org.springframework.boot.devtools.autoconfigure.DataSourceProperties . determineDriverClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.devtools.autoconfigure.ConfigurationPhase org.springframework.boot.devtools.autoconfigure.ConfigurationPhase ( ) { return ConfigurationPhase . REGISTER_BEAN ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.devtools.autoconfigure.ConditionOutcome org.springframework.boot.devtools.autoconfigure.ConditionOutcome ( ConditionContext org.springframework.boot.devtools.autoconfigure.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.devtools.autoconfigure.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; java.lang.String [] java.lang.String[] = org.springframework.boot.devtools.autoconfigure.ConditionContext . getBeanFactory ( ) . getBeanNamesForType ( javax.sql.DataSource .class ) ; if ( java.lang.String[] . int != NUMBER ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; } if ( org.springframework.boot.devtools.autoconfigure.ConditionContext . getBeanFactory ( ) . getBeanNamesForType ( DataSourceProperties .class ) . length != NUMBER ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; } BeanDefinition org.springframework.boot.devtools.autoconfigure.BeanDefinition = org.springframework.boot.devtools.autoconfigure.ConditionContext . getRegistry ( ) . getBeanDefinition ( java.lang.String[] [ NUMBER ] ) ; if ( org.springframework.boot.devtools.autoconfigure.BeanDefinition instanceof AnnotatedBeanDefinition && ( ( AnnotatedBeanDefinition ) org.springframework.boot.devtools.autoconfigure.BeanDefinition ) . getFactoryMethodMetadata ( ) != null && ( ( AnnotatedBeanDefinition ) org.springframework.boot.devtools.autoconfigure.BeanDefinition ) . getFactoryMethodMetadata ( ) . getDeclaringClassName ( ) . startsWith ( DataSourceAutoConfiguration .class . java.lang.Package ( ) . java.lang.String ( ) + STRING ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
