<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.OutputStream java.io.OutputStream = mock ( java.io.OutputStream .class ) ; ConnectionOutputStream org.springframework.boot.devtools.livereload.ConnectionOutputStream = new ConnectionOutputStream ( java.io.OutputStream ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.boot.devtools.livereload.ConnectionOutputStream . write ( byte[] , NUMBER , NUMBER ) ; verify ( java.io.OutputStream ) . write ( byte[] , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; ConnectionOutputStream org.springframework.boot.devtools.livereload.ConnectionOutputStream = new ConnectionOutputStream ( java.io.ByteArrayOutputStream ) ; org.springframework.boot.devtools.livereload.ConnectionOutputStream . writeHttp ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) , STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.String += STRING ; java.lang.String += STRING ; java.lang.String += STRING ; java.lang.String += STRING ; java.lang.String += STRING ; assertThat ( java.io.ByteArrayOutputStream . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; ConnectionOutputStream org.springframework.boot.devtools.livereload.ConnectionOutputStream = new ConnectionOutputStream ( java.io.ByteArrayOutputStream ) ; org.springframework.boot.devtools.livereload.ConnectionOutputStream . writeHeaders ( STRING , STRING ) ; org.springframework.boot.devtools.livereload.ConnectionOutputStream . flush ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String += STRING ; java.lang.String += STRING ; assertThat ( java.io.ByteArrayOutputStream . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
