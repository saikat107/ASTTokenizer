<METHOD_START> public void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveTypeArgument ( this . java.lang.Class<? extends org.springframework.data.mongodb.core.mapping.event.AbstractMongoEventListener> ( ) , org.springframework.data.mongodb.core.mapping.event.AbstractMongoEventListener .class ) ; this . java.lang.Class<?> = java.lang.Class<> == null ? java.lang.Object .class : java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( MongoMappingEvent < ? > org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<?> ) { if ( org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> instanceof AfterLoadEvent ) { AfterLoadEvent < ? > org.springframework.data.mongodb.core.mapping.event.AfterLoadEvent<?> = ( AfterLoadEvent < ? > ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ; if ( java.lang.Class<> . boolean ( org.springframework.data.mongodb.core.mapping.event.AfterLoadEvent<> . getType ( ) ) ) { void ( ( AfterLoadEvent < E > ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ) ; } return; } if ( org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> instanceof AbstractDeleteEvent ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( AbstractDeleteEvent ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ) . getType ( ) ; if ( java.lang.Class<> != null && java.lang.Class<> . boolean ( java.lang.Class<> ) ) { if ( org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> instanceof BeforeDeleteEvent ) { void ( ( BeforeDeleteEvent < E > ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ) ; } if ( org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> instanceof AfterDeleteEvent ) { void ( ( AfterDeleteEvent < E > ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ) ; } } return; } java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> . getSource ( ) ; if ( java.lang.Object != null && ! java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return; } if ( org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> instanceof BeforeConvertEvent ) { void ( ( BeforeConvertEvent < E > ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ) ; } else if ( org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> instanceof BeforeSaveEvent ) { void ( ( BeforeSaveEvent < E > ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ) ; } else if ( org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> instanceof AfterSaveEvent ) { void ( ( AfterSaveEvent < E > ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ) ; } else if ( org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> instanceof AfterConvertEvent ) { void ( ( AfterConvertEvent < E > ) org.springframework.data.mongodb.core.mapping.event.MongoMappingEvent<> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( BeforeConvertEvent < E > org.springframework.data.mongodb.core.mapping.event.BeforeConvertEvent<E> ) { if ( org.springframework.data.mongodb.core.mapping.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.mapping.event.Logger . debug ( STRING , org.springframework.data.mongodb.core.mapping.event.BeforeConvertEvent<E> . getSource ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( BeforeSaveEvent < E > org.springframework.data.mongodb.core.mapping.event.BeforeSaveEvent<E> ) { if ( org.springframework.data.mongodb.core.mapping.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.mapping.event.Logger . debug ( STRING , org.springframework.data.mongodb.core.mapping.event.BeforeSaveEvent<E> . getSource ( ) , org.springframework.data.mongodb.core.mapping.event.BeforeSaveEvent<E> . getDocument ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AfterSaveEvent < E > org.springframework.data.mongodb.core.mapping.event.AfterSaveEvent<E> ) { if ( org.springframework.data.mongodb.core.mapping.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.mapping.event.Logger . debug ( STRING , org.springframework.data.mongodb.core.mapping.event.AfterSaveEvent<E> . getSource ( ) , org.springframework.data.mongodb.core.mapping.event.AfterSaveEvent<E> . getDocument ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AfterLoadEvent < E > org.springframework.data.mongodb.core.mapping.event.AfterLoadEvent<E> ) { if ( org.springframework.data.mongodb.core.mapping.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.mapping.event.Logger . debug ( STRING , org.springframework.data.mongodb.core.mapping.event.AfterLoadEvent<E> . getDocument ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AfterConvertEvent < E > org.springframework.data.mongodb.core.mapping.event.AfterConvertEvent<E> ) { if ( org.springframework.data.mongodb.core.mapping.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.mapping.event.Logger . debug ( STRING , org.springframework.data.mongodb.core.mapping.event.AfterConvertEvent<E> . getDocument ( ) , org.springframework.data.mongodb.core.mapping.event.AfterConvertEvent<E> . getSource ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AfterDeleteEvent < E > org.springframework.data.mongodb.core.mapping.event.AfterDeleteEvent<E> ) { if ( org.springframework.data.mongodb.core.mapping.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.mapping.event.Logger . debug ( STRING , org.springframework.data.mongodb.core.mapping.event.AfterDeleteEvent<E> . getDocument ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( BeforeDeleteEvent < E > org.springframework.data.mongodb.core.mapping.event.BeforeDeleteEvent<E> ) { if ( org.springframework.data.mongodb.core.mapping.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.core.mapping.event.Logger . debug ( STRING , org.springframework.data.mongodb.core.mapping.event.BeforeDeleteEvent<E> . getDocument ( ) ) ; } }  <METHOD_END>
