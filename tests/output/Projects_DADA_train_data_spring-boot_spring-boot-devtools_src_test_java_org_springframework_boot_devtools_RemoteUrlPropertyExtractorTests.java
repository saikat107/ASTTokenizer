<METHOD_START> @ After public void void ( ) { ( ( Logger ) LoggerFactory . getLogger ( org.springframework.boot.devtools.RemoteUrlPropertyExtractorTests .class ) ) . getLoggerContext ( ) . getTurboFilterList ( ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.devtools.ApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.devtools.ApplicationContext ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.devtools.ApplicationContext ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.boot.devtools.ApplicationContext = org.springframework.boot.devtools.ApplicationContext ( STRING ) ; assertThat ( org.springframework.boot.devtools.ApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.devtools.ApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.boot.devtools.ApplicationContext = org.springframework.boot.devtools.ApplicationContext ( STRING ) ; assertThat ( org.springframework.boot.devtools.ApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.ApplicationContext org.springframework.boot.devtools.ApplicationContext ( java.lang.String ... java.lang.String[] ) { SpringApplication org.springframework.boot.devtools.SpringApplication = new SpringApplication ( org.springframework.boot.devtools.RemoteUrlPropertyExtractorTests.Config .class ) ; org.springframework.boot.devtools.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.devtools.SpringApplication . addListeners ( new RemoteUrlPropertyExtractor ( ) ) ; return org.springframework.boot.devtools.SpringApplication . run ( java.lang.String[] ) ; }  <METHOD_END>
