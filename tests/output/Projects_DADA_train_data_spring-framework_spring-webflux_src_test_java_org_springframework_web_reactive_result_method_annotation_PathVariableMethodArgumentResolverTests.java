<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver = new PathVariableMethodArgumentResolver ( null , new ReactiveAdapterRegistry ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolverTests> ( ) , STRING , ( java.lang.Class<?> < ? > [] ) null ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; try { this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getAttributes ( ) . put ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getAttributes ( ) . put ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getAttributes ( ) . put ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; ConfigurableWebBindingInitializer org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer = new ConfigurableWebBindingInitializer ( ) ; org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer . setConversionService ( new DefaultFormattingConversionService ( ) ) ; BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( org.springframework.web.reactive.result.method.annotation.ConfigurableWebBindingInitializer ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertEquals ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ) . expectNextCount ( NUMBER ) . expectError ( ServerErrorException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext = new BindingContext ( ) ; Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.PathVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.BindingContext , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ) . consumeNextWith ( value -> { assertTrue ( value instanceof Optional ) ; assertFalse ( ( ( Optional < ? > ) value ) . isPresent ( ) ) ; } ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( @ PathVariable ( value = STRING ) java.lang.String java.lang.String , java.lang.String java.lang.String , @ PathVariable ( name = STRING , required = false ) java.lang.String java.lang.String , @ PathVariable ( STRING ) java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> , @ PathVariable Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> ) {	}  <METHOD_END>
