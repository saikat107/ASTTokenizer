<METHOD_START> @ Test public void void ( ) { assertEquals ( - NUMBER , this . org.springframework.core.OrderComparator . compare ( new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) , new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.core.OrderComparator . compare ( new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) , new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.core.OrderComparator . compare ( new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) , new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , this . org.springframework.core.OrderComparator . compare ( new java.lang.Object ( ) , new java.lang.Object ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> = this . org.springframework.core.OrderComparator . withSourceProvider ( new org.springframework.core.OrderComparatorTests.TestSourceProvider ( NUMBER , new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.Object> . int ( new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> = this . org.springframework.core.OrderComparator . withSourceProvider ( new org.springframework.core.OrderComparatorTests.TestSourceProvider ( NUMBER , new java.lang.Object [] { new org.springframework.core.OrderComparatorTests.StubOrdered ( NUMBER ) , new org.springframework.core.OrderComparatorTests.StubOrdered ( - NUMBER ) } ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.Object> . int ( NUMBER , new java.lang.Object ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> = this . org.springframework.core.OrderComparator . withSourceProvider ( new org.springframework.core.OrderComparatorTests.TestSourceProvider ( NUMBER , new java.lang.Object [] { new java.lang.Object ( ) , new java.lang.Object ( ) } ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.Object> . int ( new java.lang.Object ( ) , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.Object> < java.lang.Object > java.util.Comparator<java.lang.Object> = this . org.springframework.core.OrderComparator . withSourceProvider ( new org.springframework.core.OrderComparatorTests.TestSourceProvider ( NUMBER , new java.lang.Object ( ) ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.Object> . int ( new java.lang.Object ( ) , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object . boolean ( java.lang.Object ) ) { return java.lang.Object ; } return null ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
