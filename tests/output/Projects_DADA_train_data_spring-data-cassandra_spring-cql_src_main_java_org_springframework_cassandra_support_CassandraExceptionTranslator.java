<METHOD_START> @ java.lang.Override public org.springframework.cassandra.support.DataAccessException org.springframework.cassandra.support.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( java.lang.RuntimeException instanceof DataAccessException ) { return ( DataAccessException ) java.lang.RuntimeException ; } if ( ! ( java.lang.RuntimeException instanceof DriverException ) ) { return null ; } return org.springframework.cassandra.support.DataAccessException ( null , null , ( DriverException ) java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.support.DataAccessException org.springframework.cassandra.support.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , DriverException org.springframework.cassandra.support.DriverException ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.String , org.springframework.cassandra.support.DriverException ) ; if ( org.springframework.cassandra.support.DriverException instanceof AuthenticationException ) { return new CassandraAuthenticationException ( ( ( AuthenticationException ) org.springframework.cassandra.support.DriverException ) . getHost ( ) , java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof DriverInternalError ) { return new CassandraInternalException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof InvalidTypeException ) { return new CassandraTypeMismatchException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof ReadTimeoutException ) { return new CassandraReadTimeoutException ( ( ( ReadTimeoutException ) org.springframework.cassandra.support.DriverException ) . wasDataRetrieved ( ) , java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof WriteTimeoutException ) { WriteType org.springframework.cassandra.support.WriteType = ( ( WriteTimeoutException ) org.springframework.cassandra.support.DriverException ) . getWriteType ( ) ; return new CassandraWriteTimeoutException ( org.springframework.cassandra.support.WriteType == null ? null : org.springframework.cassandra.support.WriteType . name ( ) , java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof TruncateException ) { return new CassandraTruncateException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof UnavailableException ) { UnavailableException org.springframework.cassandra.support.UnavailableException = ( UnavailableException ) org.springframework.cassandra.support.DriverException ; return new CassandraInsufficientReplicasAvailableException ( org.springframework.cassandra.support.UnavailableException . getRequiredReplicas ( ) , org.springframework.cassandra.support.UnavailableException . getAliveReplicas ( ) , java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof OverloadedException || org.springframework.cassandra.support.DriverException instanceof BootstrappingException ) { return new TransientDataAccessResourceException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof AlreadyExistsException ) { AlreadyExistsException org.springframework.cassandra.support.AlreadyExistsException = ( AlreadyExistsException ) org.springframework.cassandra.support.DriverException ; return org.springframework.cassandra.support.AlreadyExistsException . wasTableCreation ( ) ? new CassandraTableExistsException ( org.springframework.cassandra.support.AlreadyExistsException . getTable ( ) , java.lang.String , org.springframework.cassandra.support.DriverException ) : new CassandraKeyspaceExistsException ( org.springframework.cassandra.support.AlreadyExistsException . getKeyspace ( ) , java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof InvalidConfigurationInQueryException ) { return new CassandraInvalidConfigurationInQueryException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof InvalidQueryException ) { return new CassandraInvalidQueryException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof SyntaxError ) { return new CassandraQuerySyntaxException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof UnauthorizedException ) { return new CassandraUnauthorizedException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof TraceRetrievalException ) { return new CassandraTraceRetrievalException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( org.springframework.cassandra.support.DriverException instanceof NoHostAvailableException ) { return new CassandraConnectionFailureException ( ( ( NoHostAvailableException ) org.springframework.cassandra.support.DriverException ) . getErrors ( ) , java.lang.String , org.springframework.cassandra.support.DriverException ) ; } java.lang.String java.lang.String = ClassUtils . getShortName ( ClassUtils . getUserClass ( org.springframework.cassandra.support.DriverException . getClass ( ) ) ) ; if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { java.util.Map<java.net.InetSocketAddress,java.lang.Throwable> < java.net.InetSocketAddress , java.lang.Throwable > java.util.Map<java.net.InetSocketAddress,java.lang.Throwable> = java.util.Collections . java.util.Map<java.net.InetSocketAddress,java.lang.Throwable> ( ) ; if ( org.springframework.cassandra.support.DriverException instanceof CoordinatorException ) { CoordinatorException org.springframework.cassandra.support.CoordinatorException = ( CoordinatorException ) org.springframework.cassandra.support.DriverException ; java.util.Map<java.net.InetSocketAddress,java.lang.Throwable> = java.util.Collections . java.util.Map ( org.springframework.cassandra.support.CoordinatorException . getAddress ( ) , org.springframework.cassandra.support.DriverException ) ; } return new CassandraConnectionFailureException ( java.util.Map<java.net.InetSocketAddress,java.lang.Throwable> , java.lang.String , org.springframework.cassandra.support.DriverException ) ; } if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new DataAccessResourceFailureException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; } return new CassandraUncategorizedException ( java.lang.String , org.springframework.cassandra.support.DriverException ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , DriverException org.springframework.cassandra.support.DriverException ) { if ( StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) ) { return java.lang.String + STRING + java.lang.String + STRING + org.springframework.cassandra.support.DriverException . getMessage ( ) ; } return org.springframework.cassandra.support.DriverException . getMessage ( ) ; }  <METHOD_END>
