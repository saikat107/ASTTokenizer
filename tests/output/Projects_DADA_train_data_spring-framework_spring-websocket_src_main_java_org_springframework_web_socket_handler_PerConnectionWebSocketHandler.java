<METHOD_START> public void ( java.lang.Class<? extends org.springframework.web.socket.handler.WebSocketHandler> < ? extends WebSocketHandler > java.lang.Class<? extends org.springframework.web.socket.handler.WebSocketHandler> ) { this( java.lang.Class<> , false ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends org.springframework.web.socket.handler.WebSocketHandler> < ? extends WebSocketHandler > java.lang.Class<? extends org.springframework.web.socket.handler.WebSocketHandler> , boolean boolean ) { this . org.springframework.web.socket.handler.BeanCreatingHandlerProvider<org.springframework.web.socket.handler.WebSocketHandler> = new BeanCreatingHandlerProvider <> ( java.lang.Class<> ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.web.socket.handler.BeanFactory ) { this . org.springframework.web.socket.handler.BeanCreatingHandlerProvider<org.springframework.web.socket.handler.WebSocketHandler> . setBeanFactory ( org.springframework.web.socket.handler.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession ) throws java.lang.Exception { WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler = this . org.springframework.web.socket.handler.BeanCreatingHandlerProvider<org.springframework.web.socket.handler.WebSocketHandler> . getHandler ( ) ; this . java.util.Map<org.springframework.web.socket.handler.WebSocketSession,org.springframework.web.socket.handler.WebSocketHandler> . put ( org.springframework.web.socket.handler.WebSocketSession , org.springframework.web.socket.handler.WebSocketHandler ) ; org.springframework.web.socket.handler.WebSocketHandler . afterConnectionEstablished ( org.springframework.web.socket.handler.WebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , WebSocketMessage < ? > org.springframework.web.socket.handler.WebSocketMessage<?> ) throws java.lang.Exception { org.springframework.web.socket.handler.WebSocketHandler ( org.springframework.web.socket.handler.WebSocketSession ) . handleMessage ( org.springframework.web.socket.handler.WebSocketSession , org.springframework.web.socket.handler.WebSocketMessage<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { org.springframework.web.socket.handler.WebSocketHandler ( org.springframework.web.socket.handler.WebSocketSession ) . handleTransportError ( org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , CloseStatus org.springframework.web.socket.handler.CloseStatus ) throws java.lang.Exception { try { org.springframework.web.socket.handler.WebSocketHandler ( org.springframework.web.socket.handler.WebSocketSession ) . afterConnectionClosed ( org.springframework.web.socket.handler.WebSocketSession , org.springframework.web.socket.handler.CloseStatus ) ; } finally { void ( org.springframework.web.socket.handler.WebSocketSession ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.handler.WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession ) { WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler = this . java.util.Map<org.springframework.web.socket.handler.WebSocketSession,org.springframework.web.socket.handler.WebSocketHandler> . get ( org.springframework.web.socket.handler.WebSocketSession ) ; if ( org.springframework.web.socket.handler.WebSocketHandler == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.socket.handler.WebSocketSession ) ; } return org.springframework.web.socket.handler.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> private void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession ) { WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler = this . java.util.Map<org.springframework.web.socket.handler.WebSocketSession,org.springframework.web.socket.handler.WebSocketHandler> . remove ( org.springframework.web.socket.handler.WebSocketSession ) ; try { if ( org.springframework.web.socket.handler.WebSocketHandler != null ) { this . org.springframework.web.socket.handler.BeanCreatingHandlerProvider<org.springframework.web.socket.handler.WebSocketHandler> . destroy ( org.springframework.web.socket.handler.WebSocketHandler ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.handler.Log . isWarnEnabled ( ) ) { org.springframework.web.socket.handler.Log . warn ( STRING + org.springframework.web.socket.handler.WebSocketHandler , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.web.socket.handler.BeanCreatingHandlerProvider<org.springframework.web.socket.handler.WebSocketHandler> . getHandlerType ( ) + STRING ; }  <METHOD_END>
