<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.web.util.UriComponents = UriComponentsBuilder . fromUriString ( java.lang.String ) . build ( ) ; org.springframework.web.util.UriTemplate.TemplateInfo org.springframework.web.util.UriTemplate.TemplateInfo = org.springframework.web.util.UriTemplate.TemplateInfo . org.springframework.web.util.UriTemplate.TemplateInfo ( java.lang.String ) ; this . java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( org.springframework.web.util.UriTemplate.TemplateInfo . java.util.List<java.lang.String> ( ) ) ; this . java.util.regex.Pattern = org.springframework.web.util.UriTemplate.TemplateInfo . java.util.regex.Pattern ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { UriComponents org.springframework.web.util.UriComponents = this . org.springframework.web.util.UriComponents . expand ( java.util.Map<java.lang.String,> ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponents . encode ( ) ; return org.springframework.web.util.UriComponents . toUri ( ) ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( java.lang.Object ... java.lang.Object[] ) { UriComponents org.springframework.web.util.UriComponents = this . org.springframework.web.util.UriComponents . expand ( java.lang.Object[] ) ; UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponents . encode ( ) ; return org.springframework.web.util.UriComponents . toUri ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return false ; } java.util.regex.Matcher java.util.regex.Matcher = this . java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; return java.util.regex.Matcher . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( this . java.util.List<java.lang.String> . int ( ) ) ; java.util.regex.Matcher java.util.regex.Matcher = this . java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( java.util.regex.Matcher . boolean ( ) ) { for ( int int = NUMBER ; int <= java.util.regex.Matcher . int ( ) ; int ++ ) { java.lang.String java.lang.String = this . java.util.List<java.lang.String> . java.lang.String ( int - NUMBER ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( int ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } } return java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> private void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.regex.Pattern java.util.regex.Pattern ) { this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ; this . java.util.regex.Pattern = java.util.regex.Pattern ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.regex.Pattern java.util.regex.Pattern ( ) { return this . java.util.regex.Pattern ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.util.UriTemplate.TemplateInfo org.springframework.web.util.UriTemplate.TemplateInfo ( java.lang.String java.lang.String ) { int int = NUMBER ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { char char = java.lang.String . char ( int ) ; if ( char == '{' ) { int ++ ; if ( int == NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.StringBuilder ) ) ; java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; continue; } } else if ( char == '}' ) { int -- ; if ( int == NUMBER ) { java.lang.String java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; int int = java.lang.String . int ( ':' ) ; if ( int == - NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } else { if ( int + NUMBER == java.lang.String . int ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '(' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ')' ) ; java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( NUMBER , int ) ) ; } java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; continue; } } java.lang.StringBuilder . java.lang.StringBuilder ( char ) ; } if ( java.lang.StringBuilder . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.lang.StringBuilder ) ) ; } return new org.springframework.web.util.UriTemplate.TemplateInfo ( java.util.List<java.lang.String> , java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.StringBuilder . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.StringBuilder java.lang.StringBuilder ) { return ( java.lang.StringBuilder . int ( ) > NUMBER ? java.util.regex.Pattern . java.lang.String ( java.lang.StringBuilder . java.lang.String ( ) ) : STRING ) ; }  <METHOD_END>
