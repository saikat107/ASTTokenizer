<METHOD_START> public abstract org.springframework.boot.test.mock.mockito.MockCreationSettings<?> < ? > org.springframework.boot.test.mock.mockito.MockCreationSettings<?> ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> public abstract org.springframework.boot.test.mock.mockito.MockingProgress org.springframework.boot.test.mock.mockito.MockingProgress ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> public abstract void void ( ArgumentMatcherStorage org.springframework.boot.test.mock.mockito.ArgumentMatcherStorage , java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> < LocalizedMatcher > java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> );  <METHOD_END>
<METHOD_START> public abstract org.springframework.boot.test.mock.mockito.MockAwareVerificationMode org.springframework.boot.test.mock.mockito.MockAwareVerificationMode ( java.lang.Object java.lang.Object , VerificationMode org.springframework.boot.test.mock.mockito.VerificationMode );  <METHOD_END>
<METHOD_START> public abstract org.springframework.boot.test.mock.mockito.Answer<java.lang.Object> < java.lang.Object > org.springframework.boot.test.mock.mockito.Answer<java.lang.Object> ( Answers org.springframework.boot.test.mock.mockito.Answers );  <METHOD_END>
<METHOD_START> private static org.springframework.boot.test.mock.mockito.MockitoApi org.springframework.boot.test.mock.mockito.MockitoApi ( ) { if ( ClassUtils . isPresent ( STRING , null ) ) { return new org.springframework.boot.test.mock.mockito.MockitoApi.Mockito1Api ( ) ; } return new org.springframework.boot.test.mock.mockito.MockitoApi.Mockito2Api ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.mock.mockito.MockitoApi org.springframework.boot.test.mock.mockito.MockitoApi ( ) { return org.springframework.boot.test.mock.mockito.MockitoApi ; }  <METHOD_END>
<METHOD_START> void ( ) { this . org.springframework.boot.test.mock.mockito.MockUtil = BeanUtils . instantiateClass ( MockUtil .class ) ; this . java.lang.reflect.Method = ReflectionUtils . findMethod ( MockUtil .class , STRING , java.lang.Object .class ) ; this . java.lang.reflect.Method = ReflectionUtils . findMethod ( MockUtil .class , STRING , java.lang.Object .class ) ; this . java.lang.reflect.Method = ReflectionUtils . findMethod ( ArgumentMatcherStorage .class , STRING , Matcher .class ) ; this . java.lang.reflect.Constructor<org.springframework.boot.test.mock.mockito.MockAwareVerificationMode> = ClassUtils . getConstructorIfAvailable ( MockAwareVerificationMode .class , java.lang.Object .class , VerificationMode .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.mock.mockito.MockCreationSettings<?> < ? > org.springframework.boot.test.mock.mockito.MockCreationSettings<?> ( java.lang.Object java.lang.Object ) { return ( MockCreationSettings < ? > ) ReflectionUtils . invokeMethod ( this . java.lang.reflect.Method , this . org.springframework.boot.test.mock.mockito.MockUtil , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.mock.mockito.MockingProgress org.springframework.boot.test.mock.mockito.MockingProgress ( java.lang.Object java.lang.Object ) { InternalMockHandler < ? > org.springframework.boot.test.mock.mockito.InternalMockHandler<?> = ( InternalMockHandler < ? > ) ReflectionUtils . invokeMethod ( this . java.lang.reflect.Method , this . org.springframework.boot.test.mock.mockito.MockUtil , java.lang.Object ) ; InvocationContainer org.springframework.boot.test.mock.mockito.InvocationContainer = org.springframework.boot.test.mock.mockito.InternalMockHandler<> . getInvocationContainer ( ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.boot.test.mock.mockito.InvocationContainer . getClass ( ) , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( MockingProgress ) ReflectionUtils . getField ( java.lang.reflect.Field , org.springframework.boot.test.mock.mockito.InvocationContainer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ArgumentMatcherStorage org.springframework.boot.test.mock.mockito.ArgumentMatcherStorage , java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> < LocalizedMatcher > java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> ) { for ( LocalizedMatcher org.springframework.boot.test.mock.mockito.LocalizedMatcher : java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> ) { ReflectionUtils . invokeMethod ( this . java.lang.reflect.Method , org.springframework.boot.test.mock.mockito.ArgumentMatcherStorage , org.springframework.boot.test.mock.mockito.LocalizedMatcher ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.mock.mockito.MockAwareVerificationMode org.springframework.boot.test.mock.mockito.MockAwareVerificationMode ( java.lang.Object java.lang.Object , VerificationMode org.springframework.boot.test.mock.mockito.VerificationMode ) { return BeanUtils . instantiateClass ( this . java.lang.reflect.Constructor<org.springframework.boot.test.mock.mockito.MockAwareVerificationMode> , java.lang.Object , org.springframework.boot.test.mock.mockito.VerificationMode ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.boot.test.mock.mockito.Answer<java.lang.Object> < java.lang.Object > org.springframework.boot.test.mock.mockito.Answer<java.lang.Object> ( Answers org.springframework.boot.test.mock.mockito.Answers ) { return org.springframework.boot.test.mock.mockito.Answers . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.mock.mockito.MockCreationSettings<?> < ? > org.springframework.boot.test.mock.mockito.MockCreationSettings<?> ( java.lang.Object java.lang.Object ) { return MockUtil . getMockSettings ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.mock.mockito.MockingProgress org.springframework.boot.test.mock.mockito.MockingProgress ( java.lang.Object java.lang.Object ) { return ThreadSafeMockingProgress . mockingProgress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ArgumentMatcherStorage org.springframework.boot.test.mock.mockito.ArgumentMatcherStorage , java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> < LocalizedMatcher > java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> ) { for ( LocalizedMatcher org.springframework.boot.test.mock.mockito.LocalizedMatcher : java.util.List<org.springframework.boot.test.mock.mockito.LocalizedMatcher> ) { org.springframework.boot.test.mock.mockito.ArgumentMatcherStorage . reportMatcher ( org.springframework.boot.test.mock.mockito.LocalizedMatcher . getMatcher ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.mock.mockito.MockAwareVerificationMode org.springframework.boot.test.mock.mockito.MockAwareVerificationMode ( java.lang.Object java.lang.Object , VerificationMode org.springframework.boot.test.mock.mockito.VerificationMode ) { try { return new MockAwareVerificationMode ( java.lang.Object , org.springframework.boot.test.mock.mockito.VerificationMode , java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ; } catch ( java.lang.NoSuchMethodError java.lang.NoSuchMethodError ) { java.lang.reflect.Constructor<org.springframework.boot.test.mock.mockito.MockAwareVerificationMode> < MockAwareVerificationMode > java.lang.reflect.Constructor<org.springframework.boot.test.mock.mockito.MockAwareVerificationMode> = ClassUtils . getConstructorIfAvailable ( MockAwareVerificationMode .class , java.lang.Object .class , VerificationMode .class ) ; if ( java.lang.reflect.Constructor<org.springframework.boot.test.mock.mockito.MockAwareVerificationMode> == null ) { throw java.lang.NoSuchMethodError ; } return BeanUtils . instantiateClass ( java.lang.reflect.Constructor<org.springframework.boot.test.mock.mockito.MockAwareVerificationMode> , java.lang.Object , org.springframework.boot.test.mock.mockito.VerificationMode ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.mock.mockito.Answer<java.lang.Object> < java.lang.Object > org.springframework.boot.test.mock.mockito.Answer<java.lang.Object> ( Answers org.springframework.boot.test.mock.mockito.Answers ) { return org.springframework.boot.test.mock.mockito.Answers ; }  <METHOD_END>
