<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.htmlunit.WebRequest = new WebRequest ( new java.net.URL ( STRING ) ) ; this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder = new MockWebResponseBuilder ( java.lang.System . long ( ) , this . org.springframework.test.web.servlet.htmlunit.WebRequest , this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MockWebResponseBuilder ( NUMBER , null , this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new MockWebResponseBuilder ( NUMBER , new WebRequest ( new java.net.URL ( STRING ) ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . getWriter ( ) . write ( STRING ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getContentAsString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . addHeader ( STRING , STRING ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getContentCharset ( ) , equalTo ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . addHeader ( STRING , STRING ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getContentType ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . addHeader ( STRING , STRING ) ; this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . addHeader ( STRING , STRING ) ; Cookie org.springframework.test.web.servlet.htmlunit.Cookie = new Cookie ( STRING , STRING ) ; org.springframework.test.web.servlet.htmlunit.Cookie . setDomain ( STRING ) ; org.springframework.test.web.servlet.htmlunit.Cookie . setPath ( STRING ) ; org.springframework.test.web.servlet.htmlunit.Cookie . setMaxAge ( NUMBER ) ; org.springframework.test.web.servlet.htmlunit.Cookie . setSecure ( true ) ; org.springframework.test.web.servlet.htmlunit.Cookie . setHttpOnly ( true ) ; this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . addCookie ( org.springframework.test.web.servlet.htmlunit.Cookie ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> < NameValuePair > java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> = org.springframework.test.web.servlet.htmlunit.WebResponse . getResponseHeaders ( ) ; assertThat ( java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> . size ( ) , equalTo ( NUMBER ) ) ; NameValuePair org.springframework.test.web.servlet.htmlunit.NameValuePair = java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> . get ( NUMBER ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getValue ( ) , equalTo ( STRING ) ) ; org.springframework.test.web.servlet.htmlunit.NameValuePair = java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> . get ( NUMBER ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getValue ( ) , equalTo ( STRING ) ) ; org.springframework.test.web.servlet.htmlunit.NameValuePair = java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> . get ( NUMBER ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getValue ( ) , startsWith ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getValue ( ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Cookie org.springframework.test.web.servlet.htmlunit.Cookie = new Cookie ( STRING , STRING ) ; this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . addCookie ( org.springframework.test.web.servlet.htmlunit.Cookie ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> < NameValuePair > java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> = org.springframework.test.web.servlet.htmlunit.WebResponse . getResponseHeaders ( ) ; assertThat ( java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> . size ( ) , equalTo ( NUMBER ) ) ; NameValuePair org.springframework.test.web.servlet.htmlunit.NameValuePair = java.util.List<org.springframework.test.web.servlet.htmlunit.NameValuePair> . get ( NUMBER ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getName ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.NameValuePair . getValue ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getStatusCode ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getStatusMessage ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . setStatus ( NUMBER ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getStatusCode ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getStatusMessage ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.htmlunit.MockHttpServletResponse . sendError ( NUMBER , STRING ) ; WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getStatusCode ( ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getStatusMessage ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebResponse org.springframework.test.web.servlet.htmlunit.WebResponse = this . org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder . build ( ) ; assertThat ( org.springframework.test.web.servlet.htmlunit.WebResponse . getWebRequest ( ) , equalTo ( this . org.springframework.test.web.servlet.htmlunit.WebRequest ) ) ; }  <METHOD_END>
