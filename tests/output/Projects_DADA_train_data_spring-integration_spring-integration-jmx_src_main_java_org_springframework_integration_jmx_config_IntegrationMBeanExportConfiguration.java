<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.jmx.config.BeanFactory ) throws org.springframework.integration.jmx.config.BeansException { this . org.springframework.integration.jmx.config.BeanFactory = org.springframework.integration.jmx.config.BeanFactory ; if ( org.springframework.integration.jmx.config.BeanFactory instanceof ConfigurableListableBeanFactory ) { this . org.springframework.integration.jmx.config.BeanExpressionResolver = ( ( ConfigurableListableBeanFactory ) org.springframework.integration.jmx.config.BeanFactory ) . getBeanExpressionResolver ( ) ; this . org.springframework.integration.jmx.config.BeanExpressionContext = new BeanExpressionContext ( ( ConfigurableListableBeanFactory ) org.springframework.integration.jmx.config.BeanFactory , null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.integration.jmx.config.Environment ) { this . org.springframework.integration.jmx.config.Environment = org.springframework.integration.jmx.config.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.integration.jmx.config.AnnotationMetadata ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.jmx.config.AnnotationMetadata . getAnnotationAttributes ( EnableIntegrationMBeanExport .class . java.lang.String ( ) ) ; this . org.springframework.integration.jmx.config.AnnotationAttributes = AnnotationAttributes . fromMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; Assert . notNull ( this . org.springframework.integration.jmx.config.AnnotationAttributes , STRING + org.springframework.integration.jmx.config.AnnotationMetadata . getClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = java.lang.String ) @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) public org.springframework.integration.jmx.config.IntegrationMBeanExporter org.springframework.integration.jmx.config.IntegrationMBeanExporter ( ) { IntegrationMBeanExporter org.springframework.integration.jmx.config.IntegrationMBeanExporter = new IntegrationMBeanExporter ( ) ; org.springframework.integration.jmx.config.IntegrationMBeanExporter . setRegistrationPolicy ( this . org.springframework.integration.jmx.config.AnnotationAttributes .< RegistrationPolicy > getEnum ( STRING ) ) ; void ( org.springframework.integration.jmx.config.IntegrationMBeanExporter ) ; void ( org.springframework.integration.jmx.config.IntegrationMBeanExporter ) ; void ( org.springframework.integration.jmx.config.IntegrationMBeanExporter ) ; if ( this . org.springframework.integration.jmx.config.IntegrationManagementConfigurer != null ) { if ( this . org.springframework.integration.jmx.config.IntegrationManagementConfigurer . getDefaultCountsEnabled ( ) == null ) { this . org.springframework.integration.jmx.config.IntegrationManagementConfigurer . setDefaultCountsEnabled ( true ) ; } if ( this . org.springframework.integration.jmx.config.IntegrationManagementConfigurer . getDefaultStatsEnabled ( ) == null ) { this . org.springframework.integration.jmx.config.IntegrationManagementConfigurer . setDefaultStatsEnabled ( true ) ; } } return org.springframework.integration.jmx.config.IntegrationMBeanExporter ; }  <METHOD_END>
<METHOD_START> private void void ( IntegrationMBeanExporter org.springframework.integration.jmx.config.IntegrationMBeanExporter ) { java.lang.String java.lang.String = this . org.springframework.integration.jmx.config.AnnotationAttributes . getString ( STRING ) ; if ( java.lang.String != null && this . org.springframework.integration.jmx.config.Environment != null ) { java.lang.String = this . org.springframework.integration.jmx.config.Environment . resolvePlaceholders ( java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.jmx.config.IntegrationMBeanExporter . setDefaultDomain ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( IntegrationMBeanExporter org.springframework.integration.jmx.config.IntegrationMBeanExporter ) { java.lang.String java.lang.String = this . org.springframework.integration.jmx.config.AnnotationAttributes . getString ( STRING ) ; if ( java.lang.String != null && this . org.springframework.integration.jmx.config.Environment != null ) { java.lang.String = this . org.springframework.integration.jmx.config.Environment . resolvePlaceholders ( java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { javax.management.MBeanServer javax.management.MBeanServer = null ; if ( java.lang.String . boolean ( STRING ) && java.lang.String . boolean ( STRING ) ) { javax.management.MBeanServer = ( javax.management.MBeanServer ) this . org.springframework.integration.jmx.config.BeanExpressionResolver . evaluate ( java.lang.String , this . org.springframework.integration.jmx.config.BeanExpressionContext ) ; } else { javax.management.MBeanServer = this . org.springframework.integration.jmx.config.BeanFactory . getBean ( java.lang.String , javax.management.MBeanServer .class ) ; } org.springframework.integration.jmx.config.IntegrationMBeanExporter . setServer ( javax.management.MBeanServer ) ; } else { SpecificPlatform org.springframework.integration.jmx.config.SpecificPlatform = SpecificPlatform . get ( ) ; if ( org.springframework.integration.jmx.config.SpecificPlatform != null ) { org.springframework.integration.jmx.config.IntegrationMBeanExporter . setServer ( org.springframework.integration.jmx.config.SpecificPlatform . getMBeanServer ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( IntegrationMBeanExporter org.springframework.integration.jmx.config.IntegrationMBeanExporter ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.lang.String [] java.lang.String[] = this . org.springframework.integration.jmx.config.AnnotationAttributes . getStringArray ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = this . org.springframework.integration.jmx.config.Environment . resolvePlaceholders ( java.lang.String ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) ) ; } org.springframework.integration.jmx.config.IntegrationMBeanExporter . setComponentNamePatterns ( java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; }  <METHOD_END>
