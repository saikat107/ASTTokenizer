<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.ResourceHttpMessageConverter . canRead ( Resource .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.ResourceHttpMessageConverter . canWrite ( Resource .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.ResourceHttpMessageConverter . canWrite ( Resource .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { byte [] byte[] = FileCopyUtils . copyToByteArray ( java.lang.Class<? extends org.springframework.http.converter.ResourceHttpMessageConverterTests> ( ) . java.io.InputStream ( STRING ) ) ; MockHttpInputMessage org.springframework.http.converter.MockHttpInputMessage = new MockHttpInputMessage ( byte[] ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentType ( MediaType . IMAGE_JPEG ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentDisposition ( ContentDisposition . builder ( STRING ) . filename ( STRING ) . build ( ) ) ; Resource org.springframework.http.converter.Resource = org.springframework.http.converter.ResourceHttpMessageConverter . read ( Resource .class , org.springframework.http.converter.MockHttpInputMessage ) ; assertThat ( FileCopyUtils . copyToByteArray ( org.springframework.http.converter.Resource . getInputStream ( ) ) , is ( byte[] ) ) ; assertEquals ( STRING , org.springframework.http.converter.Resource . getFilename ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { try ( java.io.InputStream java.io.InputStream = java.lang.Class<? extends org.springframework.http.converter.ResourceHttpMessageConverterTests> ( ) . java.io.InputStream ( STRING ) ) { MockHttpInputMessage org.springframework.http.converter.MockHttpInputMessage = new MockHttpInputMessage ( java.io.InputStream ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentType ( MediaType . IMAGE_JPEG ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentDisposition ( ContentDisposition . builder ( STRING ) . filename ( STRING ) . build ( ) ) ; Resource org.springframework.http.converter.Resource = org.springframework.http.converter.ResourceHttpMessageConverter . read ( InputStreamResource .class , org.springframework.http.converter.MockHttpInputMessage ) ; assertThat ( org.springframework.http.converter.Resource , instanceOf ( InputStreamResource .class ) ) ; assertThat ( org.springframework.http.converter.Resource . getInputStream ( ) , is ( java.io.InputStream ) ) ; assertEquals ( STRING , org.springframework.http.converter.Resource . getFilename ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ResourceHttpMessageConverter org.springframework.http.converter.ResourceHttpMessageConverter = new ResourceHttpMessageConverter ( false ) ; try ( java.io.InputStream java.io.InputStream = java.lang.Class<? extends org.springframework.http.converter.ResourceHttpMessageConverterTests> ( ) . java.io.InputStream ( STRING ) ) { this . org.springframework.http.converter.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; MockHttpInputMessage org.springframework.http.converter.MockHttpInputMessage = new MockHttpInputMessage ( java.io.InputStream ) ; org.springframework.http.converter.MockHttpInputMessage . getHeaders ( ) . setContentType ( MediaType . IMAGE_JPEG ) ; org.springframework.http.converter.ResourceHttpMessageConverter . read ( InputStreamResource .class , org.springframework.http.converter.MockHttpInputMessage ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; Resource org.springframework.http.converter.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.http.converter.ResourceHttpMessageConverterTests> ( ) ) ; org.springframework.http.converter.ResourceHttpMessageConverter . write ( org.springframework.http.converter.Resource , null , org.springframework.http.converter.MockHttpOutputMessage ) ; assertEquals ( STRING , MediaType . IMAGE_JPEG , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.Resource . getFile ( ) . length ( ) , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; byte [] byte[] = { NUMBER , NUMBER , NUMBER } ; Resource org.springframework.http.converter.Resource = new ByteArrayResource ( byte[] ) ; org.springframework.http.converter.ResourceHttpMessageConverter . write ( org.springframework.http.converter.Resource , null , org.springframework.http.converter.MockHttpOutputMessage ) ; assertTrue ( java.util.Arrays . boolean ( byte[] , org.springframework.http.converter.MockHttpOutputMessage . getBodyAsBytes ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; Resource org.springframework.http.converter.Resource = mock ( Resource .class ) ; given ( org.springframework.http.converter.Resource . getInputStream ( ) ) . willThrow ( java.io.FileNotFoundException .class ) ; org.springframework.http.converter.ResourceHttpMessageConverter . write ( org.springframework.http.converter.Resource , MediaType . APPLICATION_OCTET_STREAM , org.springframework.http.converter.MockHttpOutputMessage ) ; assertEquals ( NUMBER , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; Resource org.springframework.http.converter.Resource = mock ( Resource .class ) ; java.io.InputStream java.io.InputStream = mock ( java.io.InputStream .class ) ; given ( org.springframework.http.converter.Resource . getInputStream ( ) ) . willReturn ( java.io.InputStream ) ; given ( java.io.InputStream . int ( any ( ) ) ) . willReturn ( - NUMBER ) ; doThrow ( new java.lang.NullPointerException ( ) ) . when ( java.io.InputStream ) . close ( ) ; org.springframework.http.converter.ResourceHttpMessageConverter . write ( org.springframework.http.converter.Resource , MediaType . APPLICATION_OCTET_STREAM , org.springframework.http.converter.MockHttpOutputMessage ) ; assertEquals ( NUMBER , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; Resource org.springframework.http.converter.Resource = mock ( Resource .class ) ; java.io.InputStream java.io.InputStream = mock ( java.io.InputStream .class ) ; given ( org.springframework.http.converter.Resource . getInputStream ( ) ) . willReturn ( java.io.InputStream ) ; given ( java.io.InputStream . int ( any ( ) ) ) . willThrow ( java.lang.NullPointerException .class ) ; org.springframework.http.converter.ResourceHttpMessageConverter . write ( org.springframework.http.converter.Resource , MediaType . APPLICATION_OCTET_STREAM , org.springframework.http.converter.MockHttpOutputMessage ) ; assertEquals ( NUMBER , org.springframework.http.converter.MockHttpOutputMessage . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
