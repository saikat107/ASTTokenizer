<METHOD_START> protected org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface ( org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl ) { MapPersistenceExceptionTranslator org.springframework.dao.annotation.MapPersistenceExceptionTranslator = new MapPersistenceExceptionTranslator ( ) ; org.springframework.dao.annotation.MapPersistenceExceptionTranslator . addTranslation ( org.springframework.dao.annotation.PersistenceException , new InvalidDataAccessApiUsageException ( STRING , org.springframework.dao.annotation.PersistenceException ) ) ; ProxyFactory org.springframework.dao.annotation.ProxyFactory = new ProxyFactory ( org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl ) ; org.springframework.dao.annotation.ProxyFactory . addInterface ( org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface .class ) ; void ( org.springframework.dao.annotation.ProxyFactory , org.springframework.dao.annotation.MapPersistenceExceptionTranslator ) ; return ( org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface ) org.springframework.dao.annotation.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ProxyFactory org.springframework.dao.annotation.ProxyFactory , PersistenceExceptionTranslator org.springframework.dao.annotation.PersistenceExceptionTranslator ) { org.springframework.dao.annotation.ProxyFactory . addAdvisor ( new PersistenceExceptionTranslationAdvisor ( org.springframework.dao.annotation.PersistenceExceptionTranslator , Repository .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl = new org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl ( ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface = org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface ( org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl . void ( org.springframework.dao.annotation.PersistenceException ) ; try { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; fail ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertSame ( org.springframework.dao.annotation.PersistenceException , java.lang.RuntimeException ) ; } try { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; fail ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertSame ( org.springframework.dao.annotation.PersistenceException , java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl = new org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.StereotypedRepositoryInterfaceImpl ( ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface = org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface ( org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl . void ( java.lang.RuntimeException ) ; try { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; fail ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertSame ( java.lang.RuntimeException , java.lang.RuntimeException ) ; } try { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; fail ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertSame ( java.lang.RuntimeException , java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.StereotypedRepositoryInterfaceImpl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.MyStereotypedRepositoryInterfaceImpl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.CustomStereotypedRepositoryInterfaceImpl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.MyInterfaceStereotypedRepositoryInterfaceImpl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.MyInterfaceInheritedStereotypedRepositoryInterfaceImpl ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl ) { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface = org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface ( org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterfaceImpl . void ( org.springframework.dao.annotation.PersistenceException ) ; try { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; fail ( ) ; } catch ( DataAccessException org.springframework.dao.annotation.DataAccessException ) { assertSame ( org.springframework.dao.annotation.PersistenceException , org.springframework.dao.annotation.DataAccessException . getCause ( ) ) ; } catch ( PersistenceException org.springframework.dao.annotation.PersistenceException ) { fail ( STRING ) ; } try { org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisorTests.RepositoryInterface . void ( ) ; fail ( ) ; } catch ( PersistenceException org.springframework.dao.annotation.PersistenceException ) { assertSame ( org.springframework.dao.annotation.PersistenceException , org.springframework.dao.annotation.PersistenceException ) ; } }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( ) org.springframework.dao.annotation.PersistenceException ;  <METHOD_END>
<METHOD_START> public void void ( java.lang.RuntimeException java.lang.RuntimeException ) { this . java.lang.RuntimeException = java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( java.lang.RuntimeException != null ) { throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.dao.annotation.PersistenceException { if ( java.lang.RuntimeException != null ) { throw java.lang.RuntimeException ; } }  <METHOD_END>
