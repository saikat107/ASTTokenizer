<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender = spy ( new org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender . append ( org.springframework.boot.logging.logback.ILoggingEvent ( Level . INFO ) ) ; verify ( this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender ) . getLogger ( org . slf4j . Logger . ROOT_LOGGER_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender . setDestinationLogger ( STRING ) ; this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender . append ( org.springframework.boot.logging.logback.ILoggingEvent ( Level . INFO ) ) ; verify ( this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender ) . getLogger ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender . append ( org.springframework.boot.logging.logback.ILoggingEvent ( Level . INFO ) ) ; verify ( this . org.springframework.boot.logging.logback.AppendableLogger ) . callAppenders ( this . org.springframework.boot.logging.logback.ArgumentCaptor<org.springframework.boot.logging.logback.ILoggingEvent> . capture ( ) ) ; assertThat ( this . org.springframework.boot.logging.logback.ArgumentCaptor<org.springframework.boot.logging.logback.ILoggingEvent> . getValue ( ) . getLevel ( ) ) . isEqualTo ( Level . DEBUG ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender . setRemapLevels ( STRING ) ; this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender . append ( org.springframework.boot.logging.logback.ILoggingEvent ( Level . DEBUG ) ) ; this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender . append ( org.springframework.boot.logging.logback.ILoggingEvent ( Level . ERROR ) ) ; verify ( this . org.springframework.boot.logging.logback.AppendableLogger , times ( NUMBER ) ) . callAppenders ( this . org.springframework.boot.logging.logback.ArgumentCaptor<org.springframework.boot.logging.logback.ILoggingEvent> . capture ( ) ) ; assertThat ( this . org.springframework.boot.logging.logback.ArgumentCaptor<org.springframework.boot.logging.logback.ILoggingEvent> . getAllValues ( ) . get ( NUMBER ) . getLevel ( ) ) . isEqualTo ( Level . TRACE ) ; assertThat ( this . org.springframework.boot.logging.logback.ArgumentCaptor<org.springframework.boot.logging.logback.ILoggingEvent> . getAllValues ( ) . get ( NUMBER ) . getLevel ( ) ) . isEqualTo ( Level . WARN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LevelRemappingAppenderTests.TestableLevelRemappingAppender . append ( org.springframework.boot.logging.logback.ILoggingEvent ( Level . TRACE ) ) ; verify ( this . org.springframework.boot.logging.logback.AppendableLogger ) . callAppenders ( this . org.springframework.boot.logging.logback.ArgumentCaptor<org.springframework.boot.logging.logback.ILoggingEvent> . capture ( ) ) ; assertThat ( this . org.springframework.boot.logging.logback.ArgumentCaptor<org.springframework.boot.logging.logback.ILoggingEvent> . getAllValues ( ) . get ( NUMBER ) . getLevel ( ) ) . isEqualTo ( Level . TRACE ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.logging.logback.ILoggingEvent org.springframework.boot.logging.logback.ILoggingEvent ( Level org.springframework.boot.logging.logback.Level ) { ILoggingEvent org.springframework.boot.logging.logback.ILoggingEvent = mock ( ILoggingEvent .class ) ; given ( org.springframework.boot.logging.logback.ILoggingEvent . getLevel ( ) ) . willReturn ( org.springframework.boot.logging.logback.Level ) ; return org.springframework.boot.logging.logback.ILoggingEvent ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.logging.logback.AppendableLogger org.springframework.boot.logging.logback.AppendableLogger ( java.lang.String java.lang.String ) { return org.springframework.boot.logging.logback.LevelRemappingAppenderTests .this . org.springframework.boot.logging.logback.AppendableLogger ; }  <METHOD_END>
