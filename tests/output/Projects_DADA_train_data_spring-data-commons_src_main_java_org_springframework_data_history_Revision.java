<METHOD_START> public static < N extends java.lang.Number & java.lang.Comparable<N> < N > , T > org.springframework.data.history.Revision<N,T> < N , T > org.springframework.data.history.Revision<N,T> ( RevisionMetadata < N > org.springframework.data.history.RevisionMetadata<N> , T T ) { return new org.springframework.data.history.Revision <> ( org.springframework.data.history.RevisionMetadata<N> , T ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<N> < N > java.util.Optional<N> ( ) { return org.springframework.data.history.RevisionMetadata<N> . getRevisionNumber ( ) ; }  <METHOD_END>
<METHOD_START> public N N ( ) { return org.springframework.data.history.RevisionMetadata<N> . getRequiredRevisionNumber ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.time.LocalDateTime> < java.time.LocalDateTime > java.util.Optional<java.time.LocalDateTime> ( ) { return org.springframework.data.history.RevisionMetadata<N> . getRevisionDate ( ) ; }  <METHOD_END>
<METHOD_START> public java.time.LocalDateTime java.time.LocalDateTime ( ) { return org.springframework.data.history.RevisionMetadata<N> . getRequiredRevisionDate ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( org.springframework.data.history.Revision<N,?> < N , ? > org.springframework.data.history.Revision<N,?> ) { return mapIfAllPresent ( java.util.Optional<N> ( ) , org.springframework.data.history.Revision<N,> . java.util.Optional<N> ( ) , ( left , right ) -> left . compareTo ( right ) ) . orElse ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.util.Optional<N> ( ) . java.util.Optional<java.lang.String> ( java.lang.Object :: java.lang.String ) . java.lang.String ( STRING ) , T , org.springframework.data.history.RevisionMetadata<N> ) ; }  <METHOD_END>
