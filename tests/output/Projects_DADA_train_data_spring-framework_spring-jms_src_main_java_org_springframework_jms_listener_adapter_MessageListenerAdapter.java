<METHOD_START> public void ( ) { this . java.lang.Object = this ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( Message org.springframework.jms.listener.adapter.Message , Session org.springframework.jms.listener.adapter.Session ) throws org.springframework.jms.listener.adapter.JMSException { java.lang.Object java.lang.Object = java.lang.Object ( ) ; if ( java.lang.Object != this ) { if ( java.lang.Object instanceof SessionAwareMessageListener ) { if ( org.springframework.jms.listener.adapter.Session != null ) { ( ( SessionAwareMessageListener < Message > ) java.lang.Object ) . onMessage ( org.springframework.jms.listener.adapter.Message , org.springframework.jms.listener.adapter.Session ) ; return; } else if ( ! ( java.lang.Object instanceof MessageListener ) ) { throw new javax . javax.jms . javax.jms ( STRING + STRING ) ; } } if ( java.lang.Object instanceof MessageListener ) { ( ( MessageListener ) java.lang.Object ) . onMessage ( org.springframework.jms.listener.adapter.Message ) ; return; } } java.lang.Object java.lang.Object = extractMessage ( org.springframework.jms.listener.adapter.Message ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.jms.listener.adapter.Message , java.lang.Object ) ; if ( java.lang.String == null ) { throw new javax . javax.jms . javax.jms ( STRING + STRING + STRING ) ; } java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( java.lang.Object ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , java.lang.Object[] ) ; if ( java.lang.Object != null ) { handleResult ( java.lang.Object , org.springframework.jms.listener.adapter.Message , org.springframework.jms.listener.adapter.Session ) ; } else { logger . trace ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.Object java.lang.Object = java.lang.Object ( ) ; if ( java.lang.Object != this && java.lang.Object instanceof SubscriptionNameProvider ) { return ( ( SubscriptionNameProvider ) java.lang.Object ) . getSubscriptionName ( ) ; } else { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( Message org.springframework.jms.listener.adapter.Message , java.lang.Object java.lang.Object ) throws org.springframework.jms.listener.adapter.JMSException { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object [] java.lang.Object[] ( java.lang.Object java.lang.Object ) { return new java.lang.Object [] { java.lang.Object } ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] ) throws org.springframework.jms.listener.adapter.JMSException { try { MethodInvoker org.springframework.jms.listener.adapter.MethodInvoker = new MethodInvoker ( ) ; org.springframework.jms.listener.adapter.MethodInvoker . setTargetObject ( java.lang.Object ( ) ) ; org.springframework.jms.listener.adapter.MethodInvoker . setTargetMethod ( java.lang.String ) ; org.springframework.jms.listener.adapter.MethodInvoker . setArguments ( java.lang.Object[] ) ; org.springframework.jms.listener.adapter.MethodInvoker . prepare ( ) ; return org.springframework.jms.listener.adapter.MethodInvoker . invoke ( ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; if ( java.lang.Throwable instanceof JMSException ) { throw ( JMSException ) java.lang.Throwable ; } else { throw new ListenerExecutionFailedException ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ListenerExecutionFailedException ( STRING + java.lang.String + STRING + ObjectUtils . nullSafeToString ( java.lang.Object[] ) , java.lang.Throwable ) ; } }  <METHOD_END>
