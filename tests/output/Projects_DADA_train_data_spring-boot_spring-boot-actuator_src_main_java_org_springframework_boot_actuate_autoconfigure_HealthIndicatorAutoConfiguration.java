<METHOD_START> public void ( HealthIndicatorProperties org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties ) { this . org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties = org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( HealthAggregator .class ) public org.springframework.boot.actuate.autoconfigure.OrderedHealthAggregator org.springframework.boot.actuate.autoconfigure.OrderedHealthAggregator ( ) { OrderedHealthAggregator org.springframework.boot.actuate.autoconfigure.OrderedHealthAggregator = new OrderedHealthAggregator ( ) ; if ( this . org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties . getOrder ( ) != null ) { org.springframework.boot.actuate.autoconfigure.OrderedHealthAggregator . setStatusOrder ( this . org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties . getOrder ( ) ) ; } return org.springframework.boot.actuate.autoconfigure.OrderedHealthAggregator ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( HealthIndicator .class ) public org.springframework.boot.actuate.autoconfigure.ApplicationHealthIndicator org.springframework.boot.actuate.autoconfigure.ApplicationHealthIndicator ( ) { return new ApplicationHealthIndicator ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CassandraOperations> < java.lang.String , CassandraOperations > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CassandraOperations> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CassandraOperations> = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CassandraOperations> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CassandraOperations> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CouchbaseOperations> < java.lang.String , CouchbaseOperations > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CouchbaseOperations> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CouchbaseOperations> = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CouchbaseOperations> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.CouchbaseOperations> ) ; }  <METHOD_END>
<METHOD_START> public void ( ObjectProvider < java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > > org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.Map<java.lang.String,javax.sql.DataSource>> , ObjectProvider < java.util.Collection<org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadataProvider> < DataSourcePoolMetadataProvider > > org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.Collection<org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadataProvider>> ) { this . java.util.Map<java.lang.String,javax.sql.DataSource> = java.util.Map<java.lang.String,javax.sql.DataSource> ( org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.Map<java.lang.String,javax.sql.DataSource>> . getIfAvailable ( ) ) ; this . java.util.Collection<org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadataProvider> = org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.Collection<org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadataProvider>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map<java.lang.String,javax.sql.DataSource> ( java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map<java.lang.String,javax.sql.DataSource> ) { if ( java.util.Map<java.lang.String,javax.sql.DataSource> == null ) { return null ; } java.util.Map<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map<java.lang.String,javax.sql.DataSource> = new java.util.LinkedHashMap<java.lang.String,javax.sql.DataSource> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,javax.sql.DataSource> < java.lang.String , javax.sql.DataSource > java.util.Map.Entry<java.lang.String,javax.sql.DataSource> : java.util.Map<java.lang.String,javax.sql.DataSource> . java.util.Set<java.util.Map.Entry<java.lang.String,javax.sql.DataSource>> ( ) ) { if ( ! ( java.util.Map.Entry<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( ) instanceof AbstractRoutingDataSource ) ) { java.util.Map<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( java.util.Map.Entry<java.lang.String,javax.sql.DataSource> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,javax.sql.DataSource> . javax.sql.DataSource ( ) ) ; } } return java.util.Map<java.lang.String,javax.sql.DataSource> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadataProvider = new DataSourcePoolMetadataProviders ( this . java.util.Collection<org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadataProvider> ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return org.springframework.boot.actuate.autoconfigure.DataSourceHealthIndicator ( this . java.util.Map<java.lang.String,javax.sql.DataSource> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.autoconfigure.DataSourceHealthIndicator org.springframework.boot.actuate.autoconfigure.DataSourceHealthIndicator ( javax.sql.DataSource javax.sql.DataSource ) { return new DataSourceHealthIndicator ( javax.sql.DataSource , java.lang.String ( javax.sql.DataSource ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( javax.sql.DataSource javax.sql.DataSource ) { DataSourcePoolMetadata org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadata = this . org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadataProvider . getDataSourcePoolMetadata ( javax.sql.DataSource ) ; return ( org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadata == null ? null : org.springframework.boot.actuate.autoconfigure.DataSourcePoolMetadata . getValidationQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.LdapOperations> < java.lang.String , LdapOperations > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.LdapOperations> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.LdapOperations> = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.LdapOperations> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.LdapOperations> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.MongoTemplate> < java.lang.String , MongoTemplate > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.MongoTemplate> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.MongoTemplate> = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.MongoTemplate> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.MongoTemplate> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RedisConnectionFactory> < java.lang.String , RedisConnectionFactory > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RedisConnectionFactory> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RedisConnectionFactory> = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RedisConnectionFactory> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RedisConnectionFactory> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RabbitTemplate> < java.lang.String , RabbitTemplate > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RabbitTemplate> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RabbitTemplate> = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RabbitTemplate> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.RabbitTemplate> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.SolrClient> < java.lang.String , SolrClient > java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.SolrClient> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.SolrClient> = java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.SolrClient> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.SolrClient> ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.DiskSpaceHealthIndicator org.springframework.boot.actuate.autoconfigure.DiskSpaceHealthIndicator ( DiskSpaceHealthIndicatorProperties org.springframework.boot.actuate.autoconfigure.DiskSpaceHealthIndicatorProperties ) { return new DiskSpaceHealthIndicator ( org.springframework.boot.actuate.autoconfigure.DiskSpaceHealthIndicatorProperties ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.DiskSpaceHealthIndicatorProperties org.springframework.boot.actuate.autoconfigure.DiskSpaceHealthIndicatorProperties ( ) { return new DiskSpaceHealthIndicatorProperties ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ObjectProvider < java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.JavaMailSenderImpl> < java.lang.String , JavaMailSenderImpl > > org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.JavaMailSenderImpl>> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.JavaMailSenderImpl> = org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.JavaMailSenderImpl>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.JavaMailSenderImpl> ) ; }  <METHOD_END>
<METHOD_START> public void ( ObjectProvider < java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.ConnectionFactory> < java.lang.String , ConnectionFactory > > org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.ConnectionFactory>> ) { this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.ConnectionFactory> = org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.ConnectionFactory>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.actuate.autoconfigure.HealthIndicator org.springframework.boot.actuate.autoconfigure.HealthIndicator ( ) { return createHealthIndicator ( this . java.util.Map<java.lang.String,org.springframework.boot.actuate.autoconfigure.ConnectionFactory> ) ; }  <METHOD_END>
