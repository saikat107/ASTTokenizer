<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.codec.FormHttpMessageWriter . canWrite ( ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.String .class , java.lang.String .class ) , MediaType . APPLICATION_FORM_URLENCODED ) ) ; assertFalse ( this . org.springframework.http.codec.FormHttpMessageWriter . canWrite ( ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.String .class , java.lang.Object .class ) , MediaType . APPLICATION_FORM_URLENCODED ) ) ; assertFalse ( this . org.springframework.http.codec.FormHttpMessageWriter . canWrite ( ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.Object .class , java.lang.String .class ) , MediaType . APPLICATION_FORM_URLENCODED ) ) ; assertFalse ( this . org.springframework.http.codec.FormHttpMessageWriter . canWrite ( ResolvableType . forClassWithGenerics ( java.util.Map .class , java.lang.String .class , java.lang.String .class ) , MediaType . APPLICATION_FORM_URLENCODED ) ) ; assertFalse ( this . org.springframework.http.codec.FormHttpMessageWriter . canWrite ( ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.String .class , java.lang.String .class ) , MediaType . MULTIPART_FORM_DATA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , null ) ; MockServerHttpResponse org.springframework.http.codec.MockServerHttpResponse = new MockServerHttpResponse ( ) ; this . org.springframework.http.codec.FormHttpMessageWriter . write ( Mono . just ( org.springframework.http.codec.MultiValueMap<java.lang.String,java.lang.String> ) , null , MediaType . APPLICATION_FORM_URLENCODED , org.springframework.http.codec.MockServerHttpResponse , null ) . block ( ) ; java.lang.String java.lang.String = org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) . block ( ) ; assertEquals ( STRING , java.lang.String ) ; assertEquals ( MediaType . APPLICATION_FORM_URLENCODED , org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( java.lang.String . byte[] ( ) . int , org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentLength ( ) ) ; }  <METHOD_END>
