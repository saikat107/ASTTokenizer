<METHOD_START> @ BeforeClass public static void void ( ) java.lang.InterruptedException { int int = NUMBER ; while ( int ++ < NUMBER && ( ! org.springframework.integration.mail.config.Pop3Server . isListening ( ) ) ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( int < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.mail.config.Pop3Server . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Pop3MailReceiver org.springframework.integration.mail.config.Pop3MailReceiver = new Pop3MailReceiver ( STRING , org.springframework.integration.mail.config.Pop3Server . getPort ( ) , STRING , STRING ) ; org.springframework.integration.mail.config.Pop3MailReceiver . setHeaderMapper ( new DefaultMailHeaderMapper ( ) ) ; MailReceivingMessageSource org.springframework.integration.mail.config.MailReceivingMessageSource = new MailReceivingMessageSource ( org.springframework.integration.mail.config.Pop3MailReceiver ) ; Message < ? > org.springframework.integration.mail.config.Message<?> = org.springframework.integration.mail.config.MailReceivingMessageSource . receive ( ) ; assertNotNull ( org.springframework.integration.mail.config.Message<> ) ; MessageHeaders org.springframework.integration.mail.config.MessageHeaders = org.springframework.integration.mail.config.Message<> . getHeaders ( ) ; assertEquals ( STRING , org.springframework.integration.mail.config.MessageHeaders . get ( MailHeaders . TO , java.lang.String [] .class ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.integration.mail.config.MessageHeaders . get ( MailHeaders . FROM ) ) ; assertEquals ( STRING , org.springframework.integration.mail.config.MessageHeaders . get ( MailHeaders . SUBJECT ) ) ; assertEquals ( STRING , org.springframework.integration.mail.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
