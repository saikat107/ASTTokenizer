<METHOD_START> public static org.springframework.context.index.CandidateComponentsIndex org.springframework.context.index.CandidateComponentsIndex ( java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.ClassLoader java.lang.ClassLoader = java.lang.ClassLoader ; if ( java.lang.ClassLoader == null ) { java.lang.ClassLoader = org.springframework.context.index.CandidateComponentsIndexLoader .class . java.lang.ClassLoader ( ) ; } return java.util.concurrent.ConcurrentMap<java.lang.ClassLoader,org.springframework.context.index.CandidateComponentsIndex> . computeIfAbsent ( java.lang.ClassLoader , org.springframework.context.index.CandidateComponentsIndexLoader :: org.springframework.context.index.CandidateComponentsIndex ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.context.index.CandidateComponentsIndex org.springframework.context.index.CandidateComponentsIndex ( java.lang.ClassLoader java.lang.ClassLoader ) { if ( boolean ) { return null ; } try { java.util.Enumeration<java.net.URL> < java.net.URL > java.util.Enumeration<java.net.URL> = java.lang.ClassLoader . java.util.Enumeration<java.net.URL> ( java.lang.String ) ; if ( ! java.util.Enumeration<java.net.URL> . boolean ( ) ) { return null ; } java.util.List<java.util.Properties> < java.util.Properties > java.util.List<java.util.Properties> = new java.util.ArrayList<java.util.Properties> <> ( ) ; while ( java.util.Enumeration<java.net.URL> . boolean ( ) ) { java.net.URL java.net.URL = java.util.Enumeration<java.net.URL> . java.net.URL ( ) ; java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadProperties ( new UrlResource ( java.net.URL ) ) ; java.util.List<java.util.Properties> . boolean ( java.util.Properties ) ; } if ( org.springframework.context.index.Log . isDebugEnabled ( ) ) { org.springframework.context.index.Log . debug ( STRING + java.util.List<java.util.Properties> . int ( ) + STRING ) ; } int int = java.util.List<java.util.Properties> . java.util.stream.Stream<java.util.Properties> ( ) . java.util.stream.IntStream ( java.util.Properties :: int ) . int ( ) ; return ( int > NUMBER ? new CandidateComponentsIndex ( java.util.List<java.util.Properties> ) : null ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING , java.io.IOException ) ; } }  <METHOD_END>
