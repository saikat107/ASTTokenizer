<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestArrayResultSender ( ) , NUMBER ) ; void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestArrayResultSender ( ) , NUMBER ) ; void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestArrayResultSender ( ) , NUMBER ) ; void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestArrayResultSender ( ) , NUMBER ) ; void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestArrayResultSender ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestListResultSender ( ) , NUMBER ) ; void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestListResultSender ( ) , NUMBER ) ; void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestListResultSender ( ) , NUMBER ) ; void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestListResultSender ( ) , NUMBER ) ; void ( new org.springframework.data.gemfire.function.BatchingResultSenderTest.TestListResultSender ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.data.gemfire.function.BatchingResultSenderTest.AbstractTestResultSender org.springframework.data.gemfire.function.BatchingResultSenderTest.AbstractTestResultSender , int int ) { BatchingResultSender org.springframework.data.gemfire.function.BatchingResultSender = new BatchingResultSender ( int , org.springframework.data.gemfire.function.BatchingResultSenderTest.AbstractTestResultSender ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<java.lang.Integer> . boolean ( int ) ; } if ( org.springframework.data.gemfire.function.BatchingResultSenderTest.AbstractTestResultSender instanceof org.springframework.data.gemfire.function.BatchingResultSenderTest.TestArrayResultSender ) { org.springframework.data.gemfire.function.BatchingResultSender . sendArrayResults ( java.util.List<java.lang.Integer> . java.lang.Integer[] ( new java.lang.Integer [ NUMBER ] ) ) ; } else { org.springframework.data.gemfire.function.BatchingResultSender . sendResults ( java.util.List<java.lang.Integer> ) ; } assertEquals ( NUMBER , org.springframework.data.gemfire.function.BatchingResultSenderTest.AbstractTestResultSender . java.util.List<java.lang.Object> ( ) . int ( ) ) ; for( int int = NUMBER ; int < NUMBER ; int ++ ) { assertEquals ( int , org.springframework.data.gemfire.function.BatchingResultSenderTest.AbstractTestResultSender . java.util.List<java.lang.Object> ( ) . java.lang.Object ( int ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return; } void ( java.lang.Object , java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { fail ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return; } void ( java.lang.Object , java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.Object java.lang.Object , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> );  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { return this . java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) java.lang.Object ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { if ( java.lang.Object == null ) { return; } assertTrue ( java.lang.Object instanceof java.util.Collection ) ; java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; java.util.List<java.lang.Object> . boolean ( java.util.Collection<> ) ; }  <METHOD_END>
