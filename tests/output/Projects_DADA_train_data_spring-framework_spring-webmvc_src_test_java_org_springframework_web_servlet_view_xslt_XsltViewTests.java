<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { final XsltView org.springframework.web.servlet.view.xslt.XsltView = org.springframework.web.servlet.view.xslt.XsltView ( java.lang.String ) ; org.springframework.web.servlet.view.xslt.XsltView . render ( java.util.Map<java.lang.Object,java.lang.Object> ( ) , org.springframework.web.servlet.view.xslt.MockHttpServletRequest , org.springframework.web.servlet.view.xslt.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { final XsltView org.springframework.web.servlet.view.xslt.XsltView = new XsltView ( ) ; org.springframework.web.servlet.view.xslt.XsltView . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.transform.Source javax.xml.transform.Source = new javax.xml.transform.stream.StreamSource ( org.springframework.web.servlet.view.xslt.Resource ( ) . getInputStream ( ) ) ; void ( java.util.Map<java.lang.String,java.lang.Object> ( STRING , javax.xml.transform.Source ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org . w3c . dom . org.w3c.dom.Document org.w3c.dom.Document = org.w3c.dom.Document ( ) ; void ( java.util.Map<java.lang.String,java.lang.Object> ( STRING , org.w3c.dom.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org . w3c . dom . org.w3c.dom.Document org.w3c.dom.Document = org.w3c.dom.Document ( ) ; void ( java.util.Map<java.lang.String,java.lang.Object> ( STRING , org.w3c.dom.Document . org.w3c.dom.Element ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Map ( STRING , org.springframework.web.servlet.view.xslt.Resource ( ) . getInputStream ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Map<K,V> ( STRING , new java.io.InputStreamReader ( org.springframework.web.servlet.view.xslt.Resource ( ) . getInputStream ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.util.Map ( STRING , org.springframework.web.servlet.view.xslt.Resource ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XsltView org.springframework.web.servlet.view.xslt.XsltView = org.springframework.web.servlet.view.xslt.XsltView ( java.lang.String ) ; org.springframework.web.servlet.view.xslt.XsltView . setSourceKey ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.xslt.Resource ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.view.xslt.XsltViewTests> ( ) ) ) ; org.springframework.web.servlet.view.xslt.XsltView . render ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.xslt.MockHttpServletRequest , this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse ) ; void ( this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XsltView org.springframework.web.servlet.view.xslt.XsltView = org.springframework.web.servlet.view.xslt.XsltView ( java.lang.String ) ; javax.xml.transform.Source javax.xml.transform.Source = new javax.xml.transform.stream.StreamSource ( org.springframework.web.servlet.view.xslt.Resource ( ) . getInputStream ( ) ) ; org.springframework.web.servlet.view.xslt.XsltView . render ( java.util.Map<java.lang.String,javax.xml.transform.Source> ( STRING , javax.xml.transform.Source ) , this . org.springframework.web.servlet.view.xslt.MockHttpServletRequest , this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse ) ; assertTrue ( this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse . getContentType ( ) . startsWith ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.xslt.Resource ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertTrue ( this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse . getContentAsString ( ) . indexOf ( STRING ) > - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { XsltView org.springframework.web.servlet.view.xslt.XsltView = org.springframework.web.servlet.view.xslt.XsltView ( java.lang.String ) ; org.springframework.web.servlet.view.xslt.XsltView . setSourceKey ( STRING ) ; org.springframework.web.servlet.view.xslt.XsltView . addStaticAttribute ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.web.servlet.view.xslt.Resource ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.view.xslt.XsltViewTests> ( ) ) ) ; org.springframework.web.servlet.view.xslt.XsltView . render ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.xslt.MockHttpServletRequest , this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse ) ; void ( this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse . getContentAsString ( ) ) ; assertTrue ( this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse . getContentAsString ( ) . indexOf ( STRING ) > - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org . w3c . dom . org.w3c.dom.Document org.w3c.dom.Document ( ) javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException , java.io.IOException { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; org . w3c . dom . org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( org.springframework.web.servlet.view.xslt.Resource ( ) . getInputStream ( ) ) ; return org.w3c.dom.Document ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws java.lang.Exception { XsltView org.springframework.web.servlet.view.xslt.XsltView = org.springframework.web.servlet.view.xslt.XsltView ( java.lang.String ) ; org.springframework.web.servlet.view.xslt.XsltView . render ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.xslt.MockHttpServletRequest , this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse ) ; void ( this . org.springframework.web.servlet.view.xslt.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { SAXReader org.springframework.web.servlet.view.xslt.SAXReader = new SAXReader ( ) ; Document org.springframework.web.servlet.view.xslt.Document = org.springframework.web.servlet.view.xslt.SAXReader . read ( new java.io.StringReader ( java.lang.String ) ) ; java.util.List java.util.List = org.springframework.web.servlet.view.xslt.Document . getRootElement ( ) . selectNodes ( STRING ) ; Element org.springframework.web.servlet.view.xslt.Element = ( Element ) java.util.List . java.lang.Object ( NUMBER ) ; void ( org.springframework.web.servlet.view.xslt.Element , STRING , STRING , STRING ) ; Element org.springframework.web.servlet.view.xslt.Element = ( Element ) java.util.List . java.lang.Object ( NUMBER ) ; void ( org.springframework.web.servlet.view.xslt.Element , STRING , STRING , STRING ) ; Element org.springframework.web.servlet.view.xslt.Element = ( Element ) java.util.List . java.lang.Object ( NUMBER ) ; void ( org.springframework.web.servlet.view.xslt.Element , STRING , STRING , STRING ) ; Element org.springframework.web.servlet.view.xslt.Element = ( Element ) java.util.List . java.lang.Object ( NUMBER ) ; void ( org.springframework.web.servlet.view.xslt.Element , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( Element org.springframework.web.servlet.view.xslt.Element , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Element org.springframework.web.servlet.view.xslt.Element = ( Element ) org.springframework.web.servlet.view.xslt.Element . elements ( ) . get ( NUMBER ) ; Element org.springframework.web.servlet.view.xslt.Element = ( Element ) org.springframework.web.servlet.view.xslt.Element . elements ( ) . get ( NUMBER ) ; Element org.springframework.web.servlet.view.xslt.Element = ( Element ) org.springframework.web.servlet.view.xslt.Element . elements ( ) . get ( NUMBER ) ; assertEquals ( STRING , java.lang.String , org.springframework.web.servlet.view.xslt.Element . getText ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.web.servlet.view.xslt.Element . getText ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.web.servlet.view.xslt.Element . getText ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.view.xslt.XsltView org.springframework.web.servlet.view.xslt.XsltView ( java.lang.String java.lang.String ) { XsltView org.springframework.web.servlet.view.xslt.XsltView = new XsltView ( ) ; org.springframework.web.servlet.view.xslt.XsltView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.xslt.XsltView . setApplicationContext ( new StaticApplicationContext ( ) ) ; org.springframework.web.servlet.view.xslt.XsltView . initApplicationContext ( ) ; return org.springframework.web.servlet.view.xslt.XsltView ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.view.xslt.Resource org.springframework.web.servlet.view.xslt.Resource ( ) { return new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.servlet.view.xslt.XsltViewTests> ( ) ) ; }  <METHOD_END>
