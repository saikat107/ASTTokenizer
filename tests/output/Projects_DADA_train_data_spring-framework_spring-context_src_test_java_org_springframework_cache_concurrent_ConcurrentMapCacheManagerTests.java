<METHOD_START> @ Test public void void ( ) { CacheManager org.springframework.cache.concurrent.CacheManager = new ConcurrentMapCacheManager ( ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.CacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.CacheManager . getCache ( STRING ) ; assertSame ( org.springframework.cache.concurrent.Cache , org.springframework.cache.concurrent.Cache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.CacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.CacheManager . getCache ( STRING ) ; assertSame ( org.springframework.cache.concurrent.Cache , org.springframework.cache.concurrent.Cache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.CacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.CacheManager . getCache ( STRING ) ; assertSame ( org.springframework.cache.concurrent.Cache , org.springframework.cache.concurrent.Cache ) ; org.springframework.cache.concurrent.Cache . put ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . put ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . put ( STRING , null ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . put ( STRING , null ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . evict ( STRING ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.cache.concurrent.Cache . putIfAbsent ( STRING , STRING ) . get ( ) ) ; assertEquals ( STRING , org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; assertEquals ( NUMBER , org.springframework.cache.concurrent.Cache . putIfAbsent ( STRING , NUMBER ) . get ( ) ) ; assertNull ( org.springframework.cache.concurrent.Cache . putIfAbsent ( STRING , null ) ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; assertNull ( org.springframework.cache.concurrent.Cache . putIfAbsent ( STRING , null ) . get ( ) ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . evict ( STRING ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConcurrentMapCacheManager org.springframework.cache.concurrent.ConcurrentMapCacheManager = new ConcurrentMapCacheManager ( STRING , STRING ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertSame ( org.springframework.cache.concurrent.Cache , org.springframework.cache.concurrent.Cache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertSame ( org.springframework.cache.concurrent.Cache , org.springframework.cache.concurrent.Cache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertNull ( org.springframework.cache.concurrent.Cache ) ; org.springframework.cache.concurrent.Cache . put ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . put ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . put ( STRING , null ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . evict ( STRING ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) ) ; org.springframework.cache.concurrent.ConcurrentMapCacheManager . setAllowNullValues ( false ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; assertTrue ( org.springframework.cache.concurrent.Cache != org.springframework.cache.concurrent.Cache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; assertTrue ( org.springframework.cache.concurrent.Cache != org.springframework.cache.concurrent.Cache ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertNull ( org.springframework.cache.concurrent.Cache ) ; org.springframework.cache.concurrent.Cache . put ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . put ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.ConcurrentMapCacheManager . setAllowNullValues ( true ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; org.springframework.cache.concurrent.Cache . put ( STRING , null ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) . get ( ) ) ; org.springframework.cache.concurrent.Cache . evict ( STRING ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConcurrentMapCacheManager org.springframework.cache.concurrent.ConcurrentMapCacheManager = new ConcurrentMapCacheManager ( STRING , STRING ) ; assertFalse ( org.springframework.cache.concurrent.ConcurrentMapCacheManager . isStoreByValue ( ) ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; assertFalse ( ( ( ConcurrentMapCache ) org.springframework.cache.concurrent.Cache ) . isStoreByValue ( ) ) ; org.springframework.cache.concurrent.Cache . put ( STRING , STRING ) ; org.springframework.cache.concurrent.ConcurrentMapCacheManager . setStoreByValue ( true ) ; assertTrue ( org.springframework.cache.concurrent.ConcurrentMapCacheManager . isStoreByValue ( ) ) ; Cache org.springframework.cache.concurrent.Cache = org.springframework.cache.concurrent.ConcurrentMapCacheManager . getCache ( STRING ) ; assertTrue ( org.springframework.cache.concurrent.Cache instanceof ConcurrentMapCache ) ; assertTrue ( org.springframework.cache.concurrent.Cache != org.springframework.cache.concurrent.Cache ) ; assertNull ( org.springframework.cache.concurrent.Cache . get ( STRING ) ) ; }  <METHOD_END>
