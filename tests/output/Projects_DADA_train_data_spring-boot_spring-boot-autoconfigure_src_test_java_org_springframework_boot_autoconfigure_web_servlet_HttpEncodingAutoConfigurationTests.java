<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class ) ; CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( CharacterEncodingFilter .class ) ; void ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter , STRING , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class , STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( CharacterEncodingFilter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class , STRING , STRING ) ; CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( CharacterEncodingFilter .class ) ; void ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter , STRING , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.FilterConfiguration .class , STRING , STRING ) ; CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( CharacterEncodingFilter .class ) ; void ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter , STRING , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class , STRING ) ; CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( CharacterEncodingFilter .class ) ; void ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter , STRING , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class , STRING ) ; CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( CharacterEncodingFilter .class ) ; void ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter , STRING , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class , STRING , STRING ) ; CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( CharacterEncodingFilter .class ) ; void ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter , STRING , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class , STRING , STRING ) ; CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( CharacterEncodingFilter .class ) ; void ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter , STRING , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.OrderedConfiguration .class ) ; java.util.List<org.springframework.boot.autoconfigure.web.servlet.Filter> < Filter > java.util.List<org.springframework.boot.autoconfigure.web.servlet.Filter> = new java.util.ArrayList <> ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBeansOfType ( Filter .class ) . values ( ) ) ; AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.Filter> ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.Filter> . get ( NUMBER ) ) . isInstanceOf ( CharacterEncodingFilter .class ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.web.servlet.Filter> . get ( NUMBER ) ) . isInstanceOf ( HiddenHttpMethodFilter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> < java.lang.String , WebServerFactoryCustomizer < ? > > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> = java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( MockServletWebServerFactory .class ) . getLocaleCharsetMappings ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.EmptyConfiguration .class , STRING , STRING ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> < java.lang.String , WebServerFactoryCustomizer < ? > > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> = java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( MockServletWebServerFactory .class ) . getLocaleCharsetMappings ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( MockServletWebServerFactory .class ) . getLocaleCharsetMappings ( ) . get ( java.util.Locale . java.util.Locale ) ) . isEqualTo ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( MockServletWebServerFactory .class ) . getLocaleCharsetMappings ( ) . get ( java.util.Locale . java.util.Locale ) ) . isEqualTo ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> < java.lang.String , WebServerFactoryCustomizer < ? > > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizer<?>> ( ) { return ( java.util.Map ) this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBeansOfType ( WebServerFactoryCustomizer .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter , java.lang.String java.lang.String , boolean boolean , boolean boolean ) { assertThat ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter . getEncoding ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter . isForceRequestEncoding ( ) ) . isEqualTo ( boolean ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter . isForceResponseEncoding ( ) ) . isEqualTo ( boolean ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext ( new java.lang.Class<?> < ? > [] { java.lang.Class<> } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String ... java.lang.String[] ) { AnnotationConfigWebApplicationContext org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfigurationTests.MinimalWebAutoConfiguration .class , HttpEncodingAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; return org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter ( ) { CharacterEncodingFilter org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter = new CharacterEncodingFilter ( ) ; org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter . setEncoding ( STRING ) ; org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter . setForceEncoding ( false ) ; return org.springframework.boot.autoconfigure.web.servlet.CharacterEncodingFilter ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.OrderedHiddenHttpMethodFilter org.springframework.boot.autoconfigure.web.servlet.OrderedHiddenHttpMethodFilter ( ) { return new OrderedHiddenHttpMethodFilter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.OrderedHttpPutFormContentFilter org.springframework.boot.autoconfigure.web.servlet.OrderedHttpPutFormContentFilter ( ) { return new OrderedHttpPutFormContentFilter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory ( ) { return new MockServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizerBeanPostProcessor org.springframework.boot.autoconfigure.web.servlet.WebServerFactoryCustomizerBeanPostProcessor ( ) { return new WebServerFactoryCustomizerBeanPostProcessor ( ) ; }  <METHOD_END>
