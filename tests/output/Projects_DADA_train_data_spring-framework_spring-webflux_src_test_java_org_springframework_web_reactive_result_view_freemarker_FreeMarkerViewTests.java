<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.freemarker.GenericApplicationContext = new GenericApplicationContext ( ) ; this . org.springframework.web.reactive.result.view.freemarker.GenericApplicationContext . refresh ( ) ; FreeMarkerConfigurer org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer . setPreferFileSystemAccess ( false ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer . setTemplateLoaderPath ( java.lang.String ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer . setResourceLoader ( this . org.springframework.web.reactive.result.view.freemarker.GenericApplicationContext ) ; this . org.springframework.web.reactive.result.view.freemarker.Configuration = org.springframework.web.reactive.result.view.freemarker.FreeMarkerConfigurer . createConfiguration ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.freemarker.ExpectedException . expect ( ApplicationContextException .class ) ; this . org.springframework.web.reactive.result.view.freemarker.ExpectedException . expectMessage ( STRING ) ; FreeMarkerView org.springframework.web.reactive.result.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . setApplicationContext ( this . org.springframework.web.reactive.result.view.freemarker.GenericApplicationContext ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . setUrl ( STRING ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.view.freemarker.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.web.reactive.result.view.freemarker.ExpectedException . expectMessage ( STRING ) ; FreeMarkerView org.springframework.web.reactive.result.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerView org.springframework.web.reactive.result.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . setConfiguration ( this . org.springframework.web.reactive.result.view.freemarker.Configuration ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . setUrl ( STRING ) ; assertTrue ( org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . checkResourceExists ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FreeMarkerView org.springframework.web.reactive.result.view.freemarker.FreeMarkerView = new FreeMarkerView ( ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . setConfiguration ( this . org.springframework.web.reactive.result.view.freemarker.Configuration ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . setUrl ( STRING ) ; ModelMap org.springframework.web.reactive.result.view.freemarker.ModelMap = new ExtendedModelMap ( ) ; org.springframework.web.reactive.result.view.freemarker.ModelMap . addAttribute ( STRING , STRING ) ; org.springframework.web.reactive.result.view.freemarker.FreeMarkerView . render ( org.springframework.web.reactive.result.view.freemarker.ModelMap , null , this . org.springframework.web.reactive.result.view.freemarker.MockServerWebExchange ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; StepVerifier . create ( this . org.springframework.web.reactive.result.view.freemarker.MockServerWebExchange . getResponse ( ) . getBody ( ) ) . consumeNextWith ( buf -> assertEquals ( STRING , asString ( buf ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( DataBuffer org.springframework.web.reactive.result.view.freemarker.DataBuffer ) { java.nio.ByteBuffer java.nio.ByteBuffer = org.springframework.web.reactive.result.view.freemarker.DataBuffer . asByteBuffer ( ) ; final byte [] byte[] = new byte [ java.nio.ByteBuffer . int ( ) ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; return new java.lang.String ( byte[] , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
