<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler = new org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler = new org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler ( new FixedContentTypeResolver ( IMAGE_GIF ) ) ; java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> = java.util.Arrays . java.util.List ( IMAGE_JPEG , IMAGE_GIF , IMAGE_PNG ) ; MockServerWebExchange org.springframework.web.reactive.result.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; MediaType org.springframework.web.reactive.result.MediaType = org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler . selectMediaType ( org.springframework.web.reactive.result.MockServerWebExchange , ( ) mediaTypes ) ; assertEquals ( IMAGE_GIF , org.springframework.web.reactive.result.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.result.MockServerWebExchange . getAttributes ( ) . put ( HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Collections . java.util.Set ( IMAGE_GIF ) ) ; java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> = java.util.Arrays . java.util.List ( IMAGE_JPEG , IMAGE_GIF , IMAGE_PNG ) ; MediaType org.springframework.web.reactive.result.MediaType = org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler . selectMediaType ( org.springframework.web.reactive.result.MockServerWebExchange , ( ) mediaTypes ) ; assertEquals ( IMAGE_GIF , org.springframework.web.reactive.result.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> = java.util.Arrays . java.util.List ( TEXT_PLAIN , APPLICATION_JSON_UTF8 ) ; MediaType org.springframework.web.reactive.result.MediaType = this . org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler . selectMediaType ( org.springframework.web.reactive.result.MockServerWebExchange , ( ) mediaTypes ) ; assertEquals ( APPLICATION_JSON_UTF8 , org.springframework.web.reactive.result.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.reactive.result.MediaType = MediaType . parseMediaType ( STRING ) ; MediaType org.springframework.web.reactive.result.MediaType = MediaType . parseMediaType ( STRING ) ; MockServerWebExchange org.springframework.web.reactive.result.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . accept ( org.springframework.web.reactive.result.MediaType ) . toExchange ( ) ; MediaType org.springframework.web.reactive.result.MediaType = this . org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler . selectMediaType ( org.springframework.web.reactive.result.MockServerWebExchange , ( ) Collections . singletonList ( textUtf8 ) ) ; assertEquals ( org.springframework.web.reactive.result.MediaType , org.springframework.web.reactive.result.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.web.reactive.result.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.MediaType> = java.util.Collections . java.util.List ( ALL ) ; MockServerWebExchange org.springframework.web.reactive.result.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; MediaType org.springframework.web.reactive.result.MediaType = this . org.springframework.web.reactive.result.HandlerResultHandlerTests.TestResultHandler . selectMediaType ( org.springframework.web.reactive.result.MockServerWebExchange , ( ) producible ) ; assertEquals ( APPLICATION_OCTET_STREAM , org.springframework.web.reactive.result.MediaType ) ; }  <METHOD_END>
<METHOD_START> protected void ( ) { this( new HeaderContentTypeResolver ( ) ); }  <METHOD_END>
<METHOD_START> public void ( RequestedContentTypeResolver org.springframework.web.reactive.result.RequestedContentTypeResolver ) { super( org.springframework.web.reactive.result.RequestedContentTypeResolver ); }  <METHOD_END>
