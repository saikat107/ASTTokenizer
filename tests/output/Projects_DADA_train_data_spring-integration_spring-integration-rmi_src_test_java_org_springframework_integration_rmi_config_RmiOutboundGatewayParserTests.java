<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.rmi.config.QueueChannel . setBeanName ( STRING ) ; RmiInboundGateway org.springframework.integration.rmi.config.RmiInboundGateway = new RmiInboundGateway ( ) ; org.springframework.integration.rmi.config.RmiInboundGateway . setRequestChannel ( org.springframework.integration.rmi.config.QueueChannel ) ; org.springframework.integration.rmi.config.RmiInboundGateway . setExpectReply ( false ) ; org.springframework.integration.rmi.config.RmiInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.rmi.config.RmiInboundGateway . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.rmi.config.RmiOutboundGateway , STRING ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.rmi.config.RmiOutboundGateway , STRING , java.lang.Boolean .class ) ) ; assertSame ( this . RmiOutboundGateway.RmiProxyFactoryBeanConfigurer , TestUtils . getPropertyValue ( this . org.springframework.integration.rmi.config.RmiOutboundGateway , STRING ) ) ; verify ( this . RmiOutboundGateway.RmiProxyFactoryBeanConfigurer ) . configure ( any ( RmiProxyFactoryBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.rmi.config.RmiOutboundGateway , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.rmi.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.rmi.config.Message<?> = org.springframework.integration.rmi.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.rmi.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.rmi.config.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.rmi.config.RmiOutboundGatewayParserTests.FooAdvice . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.rmi.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.rmi.config.Message<?> = org.springframework.integration.rmi.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.rmi.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.rmi.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.rmi.config.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Message < ? > org.springframework.integration.rmi.config.Message<?> = org.springframework.integration.rmi.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.rmi.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.rmi.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.rmi.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.rmi.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.rmi.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
