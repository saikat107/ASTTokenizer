<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.devtools.remote.server.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.boot.devtools.remote.server.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.boot.devtools.remote.server.ServerHttpRequest = new ServletServerHttpRequest ( this . org.springframework.boot.devtools.remote.server.MockHttpServletRequest ) ; this . org.springframework.boot.devtools.remote.server.ServerHttpResponse = new ServletServerHttpResponse ( this . org.springframework.boot.devtools.remote.server.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.server.ExpectedException . expectMessage ( STRING ) ; new Dispatcher ( null , java.util.Collections .< HandlerMapper > java.util.List<org.springframework.boot.devtools.remote.server.HandlerMapper> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.server.ExpectedException . expectMessage ( STRING ) ; new Dispatcher ( this . org.springframework.boot.devtools.remote.server.AccessManager , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.devtools.remote.server.AccessManager . isAllowed ( any ( ServerHttpRequest .class ) ) ) . willReturn ( false ) ; HandlerMapper org.springframework.boot.devtools.remote.server.HandlerMapper = mock ( HandlerMapper .class ) ; Handler org.springframework.boot.devtools.remote.server.Handler = mock ( Handler .class ) ; given ( org.springframework.boot.devtools.remote.server.HandlerMapper . getHandler ( any ( ServerHttpRequest .class ) ) ) . willReturn ( org.springframework.boot.devtools.remote.server.Handler ) ; Dispatcher org.springframework.boot.devtools.remote.server.Dispatcher = new Dispatcher ( this . org.springframework.boot.devtools.remote.server.AccessManager , java.util.Collections . java.util.Set ( org.springframework.boot.devtools.remote.server.HandlerMapper ) ) ; org.springframework.boot.devtools.remote.server.Dispatcher . handle ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest , this . org.springframework.boot.devtools.remote.server.ServerHttpResponse ) ; verifyZeroInteractions ( org.springframework.boot.devtools.remote.server.Handler ) ; assertThat ( this . org.springframework.boot.devtools.remote.server.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.devtools.remote.server.AccessManager . isAllowed ( any ( ServerHttpRequest .class ) ) ) . willReturn ( true ) ; HandlerMapper org.springframework.boot.devtools.remote.server.HandlerMapper = mock ( HandlerMapper .class ) ; Handler org.springframework.boot.devtools.remote.server.Handler = mock ( Handler .class ) ; given ( org.springframework.boot.devtools.remote.server.HandlerMapper . getHandler ( any ( ServerHttpRequest .class ) ) ) . willReturn ( org.springframework.boot.devtools.remote.server.Handler ) ; Dispatcher org.springframework.boot.devtools.remote.server.Dispatcher = new Dispatcher ( this . org.springframework.boot.devtools.remote.server.AccessManager , java.util.Collections . java.util.Set ( org.springframework.boot.devtools.remote.server.HandlerMapper ) ) ; org.springframework.boot.devtools.remote.server.Dispatcher . handle ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest , this . org.springframework.boot.devtools.remote.server.ServerHttpResponse ) ; verify ( org.springframework.boot.devtools.remote.server.Handler ) . handle ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest , this . org.springframework.boot.devtools.remote.server.ServerHttpResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMapper org.springframework.boot.devtools.remote.server.HandlerMapper = mock ( HandlerMapper .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; HandlerMapper org.springframework.boot.devtools.remote.server.HandlerMapper = mock ( HandlerMapper .class , withSettings ( ) . extraInterfaces ( Ordered .class ) ) ; given ( ( ( Ordered ) org.springframework.boot.devtools.remote.server.HandlerMapper ) . getOrder ( ) ) . willReturn ( NUMBER ) ; given ( ( ( Ordered ) org.springframework.boot.devtools.remote.server.HandlerMapper ) . getOrder ( ) ) . willReturn ( NUMBER ) ; java.util.List<org.springframework.boot.devtools.remote.server.HandlerMapper> < HandlerMapper > java.util.List<org.springframework.boot.devtools.remote.server.HandlerMapper> = java.util.Arrays . java.util.List ( org.springframework.boot.devtools.remote.server.HandlerMapper , org.springframework.boot.devtools.remote.server.HandlerMapper ) ; Dispatcher org.springframework.boot.devtools.remote.server.Dispatcher = new Dispatcher ( AccessManager . PERMIT_ALL , java.util.List<org.springframework.boot.devtools.remote.server.HandlerMapper> ) ; org.springframework.boot.devtools.remote.server.Dispatcher . handle ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest , this . org.springframework.boot.devtools.remote.server.ServerHttpResponse ) ; InOrder org.springframework.boot.devtools.remote.server.InOrder = inOrder ( org.springframework.boot.devtools.remote.server.HandlerMapper , org.springframework.boot.devtools.remote.server.HandlerMapper ) ; org.springframework.boot.devtools.remote.server.InOrder . verify ( org.springframework.boot.devtools.remote.server.HandlerMapper ) . getHandler ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest ) ; org.springframework.boot.devtools.remote.server.InOrder . verify ( org.springframework.boot.devtools.remote.server.HandlerMapper ) . getHandler ( this . org.springframework.boot.devtools.remote.server.ServerHttpRequest ) ; }  <METHOD_END>
