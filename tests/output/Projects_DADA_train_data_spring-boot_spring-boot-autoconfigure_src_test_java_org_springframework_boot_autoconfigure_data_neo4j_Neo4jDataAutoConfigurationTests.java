<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( org . org.neo4j . org.neo4j . org.neo4j . org.neo4j .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( SessionFactory .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( Neo4jTransactionManager .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( OpenSessionInViewInterceptor .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , STRING , STRING ) ; Neo4jTransactionManager org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager = this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBean ( Neo4jTransactionManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager . getDefaultTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jTransactionManager . isRollbackOnCommitFailure ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfigurationTests.CustomSessionFactory .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( org . org.neo4j . org.neo4j . org.neo4j . org.neo4j .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( SessionFactory .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfigurationTests.CustomConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBean ( org . org.neo4j . org.neo4j . org.neo4j . org.neo4j .class ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBean ( STRING ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( SessionFactory .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( org . org.neo4j . org.neo4j . org.neo4j . org.neo4j .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( ) ; java.lang.String java.lang.String = City .class . java.lang.Package ( ) . java.lang.String ( ) ; AutoConfigurationPackages . register ( ( BeanDefinitionRegistry ) this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext , java.lang.String ) ; ( ( AnnotationConfigApplicationContext ) this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext ) . register ( Neo4jDataAutoConfiguration .class , Neo4jRepositoriesAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . refresh ( ) ; void ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBean ( Neo4jMappingContext .class ) , City .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBeansOfType ( OpenSessionInViewInterceptor .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfigurationTests.EventListenerConfiguration .class ) ; Session org.springframework.boot.autoconfigure.data.neo4j.Session = this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBean ( SessionFactory .class ) . openSession ( ) ; org.springframework.boot.autoconfigure.data.neo4j.Session . notifyListeners ( new PersistenceEvent ( null , Event . TYPE . PRE_SAVE ) ) ; verify ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBean ( STRING , EventListener .class ) ) . onPreSave ( any ( Event .class ) ) ; verify ( this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext . getBean ( STRING , EventListener .class ) ) . onPreSave ( any ( Event .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigWebApplicationContext org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigWebApplicationContext , java.lang.String[] ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigWebApplicationContext . register ( java.lang.Class<> ) ; } org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfigurationTests.TestConfiguration .class , PropertyPlaceholderAutoConfiguration .class , Neo4jDataAutoConfiguration .class , TransactionAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigWebApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.data.neo4j.ConfigurableApplicationContext = org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigWebApplicationContext ; }  <METHOD_END>
<METHOD_START> private static void void ( Neo4jMappingContext org.springframework.boot.autoconfigure.data.neo4j.Neo4jMappingContext , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { Assertions . assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jMappingContext . getPersistentEntity ( java.lang.Class<> ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.neo4j.SessionFactory org.springframework.boot.autoconfigure.data.neo4j.SessionFactory ( ) { return mock ( SessionFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org . org.neo4j . org.neo4j . org.neo4j . org.neo4j.ogm.config.Configuration org.neo4j.ogm.config.Configuration ( ) { return new org . org.neo4j . org.neo4j . org.neo4j . org.neo4j . org.neo4j ( ) . uri ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.neo4j.EventListener org.springframework.boot.autoconfigure.data.neo4j.EventListener ( ) { return mock ( EventListener .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.data.neo4j.EventListener org.springframework.boot.autoconfigure.data.neo4j.EventListener ( ) { return mock ( EventListener .class ) ; }  <METHOD_END>
