<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Mono < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> = RenderingResponse . create ( java.lang.String ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) . expectNextMatches ( response -> name . equals ( response . name ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders = new HttpHeaders ( ) ; Mono < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> = RenderingResponse . create ( STRING ) . headers ( org.springframework.web.reactive.function.server.HttpHeaders ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) . expectNextMatches ( response -> headers . equals ( response . headers ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> = RenderingResponse . create ( STRING ) . modelAttribute ( STRING , STRING ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) . expectNextMatches ( response -> STRING . equals ( response . model ( ) . get ( STRING ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mono < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> = RenderingResponse . create ( STRING ) . modelAttribute ( STRING ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) . expectNextMatches ( response -> STRING . equals ( response . model ( ) . get ( STRING ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; Mono < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> = RenderingResponse . create ( STRING ) . modelAttributes ( java.util.Map<java.lang.String,java.lang.String> ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) . expectNextMatches ( response -> STRING . equals ( response . model ( ) . get ( STRING ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Collections . java.util.Set<java.lang.String> ( STRING ) ; Mono < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> = RenderingResponse . create ( STRING ) . modelAttributes ( java.util.Set<java.lang.String> ) . build ( ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) . expectNextMatches ( response -> STRING . equals ( response . model ( ) . get ( STRING ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; Mono < RenderingResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> = RenderingResponse . create ( STRING ) . modelAttributes ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; MockServerWebExchange org.springframework.web.reactive.function.server.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; ViewResolver org.springframework.web.reactive.function.server.ViewResolver = mock ( ViewResolver .class ) ; View org.springframework.web.reactive.function.server.View = mock ( View .class ) ; when ( org.springframework.web.reactive.function.server.ViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ) . thenReturn ( Mono . just ( org.springframework.web.reactive.function.server.View ) ) ; when ( org.springframework.web.reactive.function.server.View . render ( java.util.Map<java.lang.String,java.lang.Object> , null , org.springframework.web.reactive.function.server.MockServerWebExchange ) ) . thenReturn ( Mono . empty ( ) ) ; java.util.List<org.springframework.web.reactive.function.server.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.reactive.function.server.ViewResolver> = new java.util.ArrayList<org.springframework.web.reactive.function.server.ViewResolver> <> ( ) ; java.util.List<org.springframework.web.reactive.function.server.ViewResolver> . add ( org.springframework.web.reactive.function.server.ViewResolver ) ; HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies = mock ( HandlerStrategies .class ) ; when ( org.springframework.web.reactive.function.server.HandlerStrategies . viewResolvers ( ) ) . thenReturn ( java.util.List<org.springframework.web.reactive.function.server.ViewResolver> :: stream ) ; StepVerifier . create ( org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.RenderingResponse> ) . expectNextMatches ( response -> STRING . equals ( response . name ( ) ) && model . equals ( response . model ( ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
