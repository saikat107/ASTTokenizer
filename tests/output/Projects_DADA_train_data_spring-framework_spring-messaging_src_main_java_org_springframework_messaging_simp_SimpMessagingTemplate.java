<METHOD_START> public void ( MessageChannel org.springframework.messaging.simp.MessageChannel ) { Assert . notNull ( org.springframework.messaging.simp.MessageChannel , STRING ) ; this . org.springframework.messaging.simp.MessageChannel = org.springframework.messaging.simp.MessageChannel ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.MessageChannel org.springframework.messaging.simp.MessageChannel ( ) { return this . org.springframework.messaging.simp.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = ( java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHeaderInitializer org.springframework.messaging.simp.MessageHeaderInitializer ) { this . org.springframework.messaging.simp.MessageHeaderInitializer = org.springframework.messaging.simp.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.MessageHeaderInitializer org.springframework.messaging.simp.MessageHeaderInitializer ( ) { return this . org.springframework.messaging.simp.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.simp.Message<?> ) { Assert . notNull ( org.springframework.messaging.simp.Message<> , STRING ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.Message<> . getHeaders ( ) ) ; if ( java.lang.String != null ) { void ( org.springframework.messaging.simp.Message<> ) ; return; } void ( getRequiredDefaultDestination ( ) , org.springframework.messaging.simp.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.Message<?> ) { Assert . notNull ( java.lang.String , STRING ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.Message<> , SimpMessageHeaderAccessor .class ) ; if ( org.springframework.messaging.simp.SimpMessageHeaderAccessor != null ) { if ( org.springframework.messaging.simp.SimpMessageHeaderAccessor . isMutable ( ) ) { org.springframework.messaging.simp.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setMessageTypeIfNotSet ( SimpMessageType . MESSAGE ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setImmutable ( ) ; void ( org.springframework.messaging.simp.Message<> ) ; return; } else { org.springframework.messaging.simp.SimpMessageHeaderAccessor = ( SimpMessageHeaderAccessor ) MessageHeaderAccessor . getMutableAccessor ( org.springframework.messaging.simp.Message<> ) ; void ( org.springframework.messaging.simp.SimpMessageHeaderAccessor ) ; } } else { org.springframework.messaging.simp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.Message<> ) ; void ( org.springframework.messaging.simp.SimpMessageHeaderAccessor ) ; } org.springframework.messaging.simp.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setMessageTypeIfNotSet ( SimpMessageType . MESSAGE ) ; org.springframework.messaging.simp.Message<?> = MessageBuilder . createMessage ( org.springframework.messaging.simp.Message<> . getPayload ( ) , org.springframework.messaging.simp.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; void ( org.springframework.messaging.simp.Message<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.messaging.simp.Message<?> ) { java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.Message<> . getHeaders ( ) ) ; Assert . notNull ( java.lang.String , STRING ) ; long long = this . long ; boolean boolean = ( long >= NUMBER ? this . org.springframework.messaging.simp.MessageChannel . send ( org.springframework.messaging.simp.Message<> , long ) : this . org.springframework.messaging.simp.MessageChannel . send ( org.springframework.messaging.simp.Message<> ) ) ; if ( ! boolean ) { throw new MessageDeliveryException ( org.springframework.messaging.simp.Message<> , STRING + java.lang.String + STRING + long ) ; } }  <METHOD_END>
<METHOD_START> private void void ( SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor ) { if ( org.springframework.messaging.simp.MessageHeaderInitializer ( ) != null ) { org.springframework.messaging.simp.MessageHeaderInitializer ( ) . initHeaders ( org.springframework.messaging.simp.SimpMessageHeaderAccessor ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.messaging.simp.MessagingException { void ( java.lang.String , java.lang.String , java.lang.Object , ( MessagePostProcessor ) null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws org.springframework.messaging.simp.MessagingException { void ( java.lang.String , java.lang.String , java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object java.lang.Object , MessagePostProcessor org.springframework.messaging.simp.MessagePostProcessor ) throws org.springframework.messaging.simp.MessagingException { void ( java.lang.String , java.lang.String , java.lang.Object , null , org.springframework.messaging.simp.MessagePostProcessor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , MessagePostProcessor org.springframework.messaging.simp.MessagePostProcessor ) throws org.springframework.messaging.simp.MessagingException { Assert . notNull ( java.lang.String , STRING ) ; java.lang.String = StringUtils . replace ( java.lang.String , STRING , STRING ) ; super. convertAndSend ( this . java.lang.String + java.lang.String + java.lang.String , java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.messaging.simp.MessagePostProcessor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> == null ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; void ( org.springframework.messaging.simp.SimpMessageHeaderAccessor ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; return org.springframework.messaging.simp.SimpMessageHeaderAccessor . getMessageHeaders ( ) ; } if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( NativeMessageHeaderAccessor . NATIVE_HEADERS ) ) { return java.util.Map<java.lang.String,java.lang.Object> ; } if ( java.util.Map<java.lang.String,java.lang.Object> instanceof MessageHeaders ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( ( MessageHeaders ) java.util.Map<java.lang.String,java.lang.Object> , SimpMessageHeaderAccessor .class ) ; if ( org.springframework.messaging.simp.SimpMessageHeaderAccessor != null ) { return java.util.Map<java.lang.String,java.lang.Object> ; } } SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; void ( org.springframework.messaging.simp.SimpMessageHeaderAccessor ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setNativeHeader ( java.lang.String , ( java.lang.Object != null ? java.lang.Object . java.lang.String ( ) : null ) ) ; } return org.springframework.messaging.simp.SimpMessageHeaderAccessor . getMessageHeaders ( ) ; }  <METHOD_END>
