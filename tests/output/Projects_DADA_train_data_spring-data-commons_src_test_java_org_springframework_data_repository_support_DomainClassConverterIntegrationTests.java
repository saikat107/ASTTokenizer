<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { DefaultListableBeanFactory org.springframework.data.repository.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) { @ java.lang.Override protected org.springframework.data.repository.support.BeanWrapper org.springframework.data.repository.support.BeanWrapper ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.data.repository.support.RootBeanDefinition ) { return java.lang.String . boolean ( STRING ) ? new BeanWrapperImpl ( org.springframework.data.repository.support.RepositoryFactoryBeanSupport ) : super. instantiateBean ( java.lang.String , org.springframework.data.repository.support.RootBeanDefinition ) ; } } ; org.springframework.data.repository.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.data.repository.support.DomainClassConverterIntegrationTests.PredictingProcessor .class ) ) ; org.springframework.data.repository.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( RepositoryFactoryBeanSupport .class ) ) ; doReturn ( org.springframework.data.repository.support.DomainClassConverterIntegrationTests.Person .class ) . when ( org.springframework.data.repository.support.RepositoryInformation ) . getDomainType ( ) ; doReturn ( java.io.Serializable .class ) . when ( org.springframework.data.repository.support.RepositoryInformation ) . getIdType ( ) ; doReturn ( org.springframework.data.repository.support.DomainClassConverterIntegrationTests.PersonRepository .class ) . when ( org.springframework.data.repository.support.RepositoryFactoryBeanSupport ) . getObjectType ( ) ; doReturn ( org.springframework.data.repository.support.RepositoryInformation ) . when ( org.springframework.data.repository.support.RepositoryFactoryBeanSupport ) . getRepositoryInformation ( ) ; GenericApplicationContext org.springframework.data.repository.support.GenericApplicationContext = new GenericApplicationContext ( org.springframework.data.repository.support.DefaultListableBeanFactory ) ; org.springframework.data.repository.support.GenericApplicationContext . refresh ( ) ; assertThat ( org.springframework.data.repository.support.GenericApplicationContext . getBeansOfType ( RepositoryFactoryInformation .class ) . values ( ) ) . hasSize ( NUMBER ) ; DomainClassConverter org.springframework.data.repository.support.DomainClassConverter = new DomainClassConverter ( new DefaultConversionService ( ) ) ; org.springframework.data.repository.support.DomainClassConverter . setApplicationContext ( org.springframework.data.repository.support.GenericApplicationContext ) ; assertThat ( org.springframework.data.repository.support.DomainClassConverter . matches ( TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( org.springframework.data.repository.support.DomainClassConverterIntegrationTests.Person .class ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.repository.support.BeanWrapper org.springframework.data.repository.support.BeanWrapper ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.data.repository.support.RootBeanDefinition ) { return java.lang.String . boolean ( STRING ) ? new BeanWrapperImpl ( org.springframework.data.repository.support.RepositoryFactoryBeanSupport ) : super. instantiateBean ( java.lang.String , org.springframework.data.repository.support.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return RepositoryFactoryBeanSupport .class . boolean ( java.lang.Class<> ) ? org.springframework.data.repository.support.DomainClassConverterIntegrationTests.PersonRepository .class : null ; }  <METHOD_END>
