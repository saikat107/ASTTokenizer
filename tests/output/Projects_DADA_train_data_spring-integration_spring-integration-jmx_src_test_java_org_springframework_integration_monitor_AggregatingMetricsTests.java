<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.monitor.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; int int = NUMBER ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.integration.monitor.MessageChannel . send ( org.springframework.integration.monitor.Message<> ) ; } assertEquals ( int , this . org.springframework.integration.monitor.QueueChannel . getQueueSize ( ) ) ; assertEquals ( int , this . org.springframework.integration.monitor.QueueChannel . getSendCount ( ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( int / NUMBER ) . long ( ) , this . org.springframework.integration.monitor.QueueChannel . getSendDuration ( ) . getCountLong ( ) ) ; assertEquals ( int , this . org.springframework.integration.monitor.BridgeHandler . getHandleCount ( ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( int / NUMBER ) . long ( ) , this . org.springframework.integration.monitor.BridgeHandler . getDuration ( ) . getCountLong ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; this . org.springframework.integration.monitor.AbstractMessageChannel . configureMetrics ( new AggregatingMessageChannelMetrics ( STRING , int ) ) ; this . org.springframework.integration.monitor.AbstractMessageChannel . setStatsEnabled ( true ) ; this . org.springframework.integration.monitor.ServiceActivatingHandler . configureMetrics ( new AggregatingMessageHandlerMetrics ( STRING , int ) ) ; this . org.springframework.integration.monitor.ServiceActivatingHandler . setStatsEnabled ( true ) ; GenericMessage < java.lang.String > org.springframework.integration.monitor.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; int int = NUMBER ; for ( int int = NUMBER ; int < int ; int ++ ) { this . org.springframework.integration.monitor.AbstractMessageChannel . send ( org.springframework.integration.monitor.GenericMessage<java.lang.String> ) ; } assertEquals ( int , this . org.springframework.integration.monitor.AbstractMessageChannel . getSendCount ( ) ) ; assertEquals ( int / int , this . org.springframework.integration.monitor.AbstractMessageChannel . getSendDuration ( ) . getCount ( ) ) ; assertThat ( ( int ) this . org.springframework.integration.monitor.AbstractMessageChannel . getMeanSendDuration ( ) / int , greaterThanOrEqualTo ( NUMBER ) ) ; assertEquals ( int , this . org.springframework.integration.monitor.ServiceActivatingHandler . getHandleCount ( ) ) ; assertEquals ( int / int , this . org.springframework.integration.monitor.ServiceActivatingHandler . getDuration ( ) . getCount ( ) ) ; assertThat ( ( int ) this . org.springframework.integration.monitor.ServiceActivatingHandler . getMeanDuration ( ) / int , greaterThanOrEqualTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { AggregatingMessageHandlerMetrics org.springframework.integration.monitor.AggregatingMessageHandlerMetrics = new AggregatingMessageHandlerMetrics ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.monitor.AggregatingMessageHandlerMetrics . afterHandle ( org.springframework.integration.monitor.AggregatingMessageHandlerMetrics . beforeHandle ( ) , true ) ; } }  <METHOD_END>
