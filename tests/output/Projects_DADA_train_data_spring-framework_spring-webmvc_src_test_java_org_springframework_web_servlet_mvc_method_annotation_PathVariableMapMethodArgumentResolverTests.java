<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolver = new PathVariableMapMethodArgumentResolver ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolverTests> ( ) . java.lang.reflect.Method ( STRING , java.util.Map .class , java.util.Map .class , java.util.Map .class ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.servlet.mvc.method.annotation.PathVariableMapMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest , null ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( @ PathVariable java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , @ PathVariable ( value = STRING ) java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) {	}  <METHOD_END>
