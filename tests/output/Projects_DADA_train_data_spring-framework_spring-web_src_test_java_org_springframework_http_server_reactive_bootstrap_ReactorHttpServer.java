<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.http.server.reactive.bootstrap.ReactorHttpHandlerAdapter = org.springframework.http.server.reactive.bootstrap.ReactorHttpHandlerAdapter ( ) ; this . reactor.ipc.netty.http.server.HttpServer = reactor . ipc . netty . http . server . HttpServer . create ( getHost ( ) , getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.server.reactive.bootstrap.ReactorHttpHandlerAdapter org.springframework.http.server.reactive.bootstrap.ReactorHttpHandlerAdapter ( ) { return new ReactorHttpHandlerAdapter ( resolveHttpHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { NettyContext org.springframework.http.server.reactive.bootstrap.NettyContext = this . reactor.ipc.netty.http.server.HttpServer . newHandler ( this . org.springframework.http.server.reactive.bootstrap.ReactorHttpHandlerAdapter ) . block ( ) ; setPort ( org.springframework.http.server.reactive.bootstrap.NettyContext . address ( ) . getPort ( ) ) ; this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.bootstrap.NettyContext> . set ( org.springframework.http.server.reactive.bootstrap.NettyContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.bootstrap.NettyContext> . get ( ) . dispose ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . reactor.ipc.netty.http.server.HttpServer = null ; this . org.springframework.http.server.reactive.bootstrap.ReactorHttpHandlerAdapter = null ; this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.bootstrap.NettyContext> . set ( null ) ; }  <METHOD_END>
