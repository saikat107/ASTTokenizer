<METHOD_START> public org.springframework.integration.redis.rules.Statement org.springframework.integration.redis.rules.Statement ( final Statement org.springframework.integration.redis.rules.Statement , final FrameworkMethod org.springframework.integration.redis.rules.FrameworkMethod , java.lang.Object java.lang.Object ) { RedisAvailable org.springframework.integration.redis.rules.RedisAvailable = org.springframework.integration.redis.rules.FrameworkMethod . getAnnotation ( RedisAvailable .class ) ; if ( org.springframework.integration.redis.rules.RedisAvailable != null ) { JedisConnectionFactory org.springframework.integration.redis.rules.JedisConnectionFactory = null ; try { org.springframework.integration.redis.rules.JedisConnectionFactory = new JedisConnectionFactory ( ) ; org.springframework.integration.redis.rules.JedisConnectionFactory . setPort ( int ) ; org.springframework.integration.redis.rules.JedisConnectionFactory . setTimeout ( NUMBER ) ; org.springframework.integration.redis.rules.JedisConnectionFactory . afterPropertiesSet ( ) ; org.springframework.integration.redis.rules.JedisConnectionFactory . getConnection ( ) ; java.lang.ThreadLocal<org.springframework.integration.redis.rules.JedisConnectionFactory> . set ( org.springframework.integration.redis.rules.JedisConnectionFactory ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.integration.redis.rules.JedisConnectionFactory != null ) { org.springframework.integration.redis.rules.JedisConnectionFactory . destroy ( ) ; } return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { Assume . assumeTrue ( STRING + int , false ) ; } } ; } return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { try { org.springframework.integration.redis.rules.Statement . evaluate ( ) ; } finally { JedisConnectionFactory org.springframework.integration.redis.rules.JedisConnectionFactory = java.lang.ThreadLocal<org.springframework.integration.redis.rules.JedisConnectionFactory> . get ( ) ; java.lang.ThreadLocal<org.springframework.integration.redis.rules.JedisConnectionFactory> . remove ( ) ; if ( org.springframework.integration.redis.rules.JedisConnectionFactory != null ) { org.springframework.integration.redis.rules.JedisConnectionFactory . destroy ( ) ; } } } } ; } return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { org.springframework.integration.redis.rules.Statement . evaluate ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { Assume . assumeTrue ( STRING + int , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { try { org.springframework.integration.redis.rules.Statement . evaluate ( ) ; } finally { JedisConnectionFactory org.springframework.integration.redis.rules.JedisConnectionFactory = java.lang.ThreadLocal<org.springframework.integration.redis.rules.JedisConnectionFactory> . get ( ) ; java.lang.ThreadLocal<org.springframework.integration.redis.rules.JedisConnectionFactory> . remove ( ) ; if ( org.springframework.integration.redis.rules.JedisConnectionFactory != null ) { org.springframework.integration.redis.rules.JedisConnectionFactory . destroy ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { org.springframework.integration.redis.rules.Statement . evaluate ( ) ; }  <METHOD_END>
