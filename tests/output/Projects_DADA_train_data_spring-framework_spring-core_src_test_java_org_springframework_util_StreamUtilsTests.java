<METHOD_START> @ Before public void void ( ) { new java.util.Random ( ) . void ( byte[] ) ; while ( java.lang.String . int ( ) < StreamUtils . BUFFER_SIZE + NUMBER ) { java.lang.String += java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = spy ( new java.io.ByteArrayInputStream ( byte[] ) ) ; byte [] byte[] = StreamUtils . copyToByteArray ( java.io.InputStream ) ; assertThat ( byte[] , equalTo ( byte[] ) ) ; verify ( java.io.InputStream , never ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( ) ; java.io.InputStream java.io.InputStream = spy ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( java.nio.charset.Charset ) ) ) ; java.lang.String java.lang.String = StreamUtils . copyToString ( java.io.InputStream , java.nio.charset.Charset ) ; assertThat ( java.lang.String , equalTo ( java.lang.String ) ) ; verify ( java.io.InputStream , never ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = spy ( new java.io.ByteArrayOutputStream ( ) ) ; StreamUtils . copy ( byte[] , java.io.ByteArrayOutputStream ) ; assertThat ( java.io.ByteArrayOutputStream . byte[] ( ) , equalTo ( byte[] ) ) ; verify ( java.io.ByteArrayOutputStream , never ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = spy ( new java.io.ByteArrayOutputStream ( ) ) ; StreamUtils . copy ( java.lang.String , java.nio.charset.Charset , java.io.ByteArrayOutputStream ) ; assertThat ( java.io.ByteArrayOutputStream . byte[] ( ) , equalTo ( java.lang.String . byte[] ( java.nio.charset.Charset ) ) ) ; verify ( java.io.ByteArrayOutputStream , never ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = spy ( new java.io.ByteArrayOutputStream ( ) ) ; StreamUtils . copy ( new java.io.ByteArrayInputStream ( byte[] ) , java.io.ByteArrayOutputStream ) ; assertThat ( java.io.ByteArrayOutputStream . byte[] ( ) , equalTo ( byte[] ) ) ; verify ( java.io.ByteArrayOutputStream , never ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = spy ( new java.io.ByteArrayOutputStream ( ) ) ; StreamUtils . copyRange ( new java.io.ByteArrayInputStream ( byte[] ) , java.io.ByteArrayOutputStream , NUMBER , NUMBER ) ; byte [] byte[] = java.util.Arrays . byte[] ( byte[] , NUMBER , NUMBER ) ; assertThat ( java.io.ByteArrayOutputStream . byte[] ( ) , equalTo ( byte[] ) ) ; verify ( java.io.ByteArrayOutputStream , never ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = mock ( java.io.InputStream .class ) ; java.io.InputStream java.io.InputStream = StreamUtils . nonClosing ( java.io.InputStream ) ; java.io.InputStream . int ( ) ; java.io.InputStream . int ( byte[] ) ; java.io.InputStream . int ( byte[] , NUMBER , NUMBER ) ; java.io.InputStream . void ( ) ; InOrder org.springframework.util.InOrder = inOrder ( java.io.InputStream ) ; org.springframework.util.InOrder . verify ( java.io.InputStream ) . read ( ) ; org.springframework.util.InOrder . verify ( java.io.InputStream ) . read ( byte[] , NUMBER , byte[] . int ) ; org.springframework.util.InOrder . verify ( java.io.InputStream ) . read ( byte[] , NUMBER , NUMBER ) ; org.springframework.util.InOrder . verify ( java.io.InputStream , never ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.OutputStream java.io.OutputStream = mock ( java.io.OutputStream .class ) ; java.io.OutputStream java.io.OutputStream = StreamUtils . nonClosing ( java.io.OutputStream ) ; java.io.OutputStream . void ( NUMBER ) ; java.io.OutputStream . void ( byte[] ) ; java.io.OutputStream . void ( byte[] , NUMBER , NUMBER ) ; java.io.OutputStream . void ( ) ; InOrder org.springframework.util.InOrder = inOrder ( java.io.OutputStream ) ; org.springframework.util.InOrder . verify ( java.io.OutputStream ) . write ( NUMBER ) ; org.springframework.util.InOrder . verify ( java.io.OutputStream ) . write ( byte[] , NUMBER , byte[] . int ) ; org.springframework.util.InOrder . verify ( java.io.OutputStream ) . write ( byte[] , NUMBER , NUMBER ) ; org.springframework.util.InOrder . verify ( java.io.OutputStream , never ( ) ) . close ( ) ; }  <METHOD_END>
