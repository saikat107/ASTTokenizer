<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.context.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.test.web.servlet.samples.context.WebApplicationContext ) . build ( ) ; void ( ) ; given ( this . org.springframework.test.web.servlet.samples.context.PersonDao . getPerson ( NUMBER ) ) . willReturn ( new Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.context.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andDo ( print ( ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.context.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { assertNotNull ( org.springframework.test.web.servlet.samples.context.PersonDao ) ; assertNotNull ( org.springframework.test.web.servlet.samples.context.PersonController ) ; ApplicationContext org.springframework.test.web.servlet.samples.context.ApplicationContext = org.springframework.test.web.servlet.samples.context.WebApplicationContext . getParent ( ) ; assertNotNull ( org.springframework.test.web.servlet.samples.context.ApplicationContext ) ; assertTrue ( org.springframework.test.web.servlet.samples.context.ApplicationContext instanceof WebApplicationContext ) ; WebApplicationContext org.springframework.test.web.servlet.samples.context.WebApplicationContext = ( WebApplicationContext ) org.springframework.test.web.servlet.samples.context.ApplicationContext ; ServletContext org.springframework.test.web.servlet.samples.context.ServletContext = org.springframework.test.web.servlet.samples.context.WebApplicationContext . getServletContext ( ) ; assertNotNull ( org.springframework.test.web.servlet.samples.context.ServletContext ) ; ServletContext org.springframework.test.web.servlet.samples.context.ServletContext = org.springframework.test.web.servlet.samples.context.WebApplicationContext . getServletContext ( ) ; assertNotNull ( org.springframework.test.web.servlet.samples.context.ServletContext ) ; assertSame ( org.springframework.test.web.servlet.samples.context.ServletContext , org.springframework.test.web.servlet.samples.context.ServletContext ) ; assertSame ( org.springframework.test.web.servlet.samples.context.WebApplicationContext , org.springframework.test.web.servlet.samples.context.ServletContext . getAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ) ; assertSame ( org.springframework.test.web.servlet.samples.context.WebApplicationContext , org.springframework.test.web.servlet.samples.context.ServletContext . getAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.context.PersonDao org.springframework.test.web.servlet.samples.context.PersonDao ( ) { return Mockito . mock ( PersonDao .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.context.PersonController org.springframework.test.web.servlet.samples.context.PersonController ( ) { return new PersonController ( this . org.springframework.test.web.servlet.samples.context.JavaConfigTests.RootConfig . org.springframework.test.web.servlet.samples.context.PersonDao ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceHandlerRegistry org.springframework.test.web.servlet.samples.context.ResourceHandlerRegistry ) { org.springframework.test.web.servlet.samples.context.ResourceHandlerRegistry . addResourceHandler ( STRING ) . addResourceLocations ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewControllerRegistry org.springframework.test.web.servlet.samples.context.ViewControllerRegistry ) { org.springframework.test.web.servlet.samples.context.ViewControllerRegistry . addViewController ( STRING ) . setViewName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( DefaultServletHandlerConfigurer org.springframework.test.web.servlet.samples.context.DefaultServletHandlerConfigurer ) { org.springframework.test.web.servlet.samples.context.DefaultServletHandlerConfigurer . enable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.test.web.servlet.samples.context.ViewResolverRegistry ) { org.springframework.test.web.servlet.samples.context.ViewResolverRegistry . tiles ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.context.TilesConfigurer org.springframework.test.web.servlet.samples.context.TilesConfigurer ( ) { TilesConfigurer org.springframework.test.web.servlet.samples.context.TilesConfigurer = new TilesConfigurer ( ) ; org.springframework.test.web.servlet.samples.context.TilesConfigurer . setDefinitions ( STRING STRING ) ; return org.springframework.test.web.servlet.samples.context.TilesConfigurer ; }  <METHOD_END>
