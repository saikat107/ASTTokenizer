<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String java.lang.String , BeanFactory org.springframework.beans.factory.support.BeanFactory ) { return java.lang.Object ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , org.springframework.beans.factory.support.BeanFactory , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String java.lang.String , BeanFactory org.springframework.beans.factory.support.BeanFactory , java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> , java.lang.Object ... java.lang.Object[] ) { return new org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy.CglibSubclassCreator ( org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.BeanFactory ) . java.lang.Object ( java.lang.reflect.Constructor<> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , BeanFactory org.springframework.beans.factory.support.BeanFactory ) { this . org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ; this . org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> , java.lang.Object ... java.lang.Object[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( this . org.springframework.beans.factory.support.RootBeanDefinition ) ; java.lang.Object java.lang.Object ; if ( java.lang.reflect.Constructor<> == null ) { java.lang.Object = BeanUtils . instantiateClass ( java.lang.Class<> ) ; } else { try { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.reflect.Constructor<> . java.lang.Class<?>[] ( ) ) ; java.lang.Object = java.lang.reflect.Constructor<> . newInstance ( java.lang.Object[] ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInstantiationException ( this . org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) , STRING + java.lang.Class<> . java.lang.String ( ) + STRING , java.lang.Exception ) ; } } Factory org.springframework.beans.factory.support.Factory = ( Factory ) java.lang.Object ; org.springframework.beans.factory.support.Factory . setCallbacks ( new Callback [] { NoOp . INSTANCE , new org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy.LookupOverrideMethodInterceptor ( this . org.springframework.beans.factory.support.RootBeanDefinition , this . org.springframework.beans.factory.support.BeanFactory ) , new org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy.ReplaceOverrideMethodInterceptor ( this . org.springframework.beans.factory.support.RootBeanDefinition , this . org.springframework.beans.factory.support.BeanFactory ) } ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { Enhancer org.springframework.beans.factory.support.Enhancer = new Enhancer ( ) ; org.springframework.beans.factory.support.Enhancer . setSuperclass ( org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) ) ; org.springframework.beans.factory.support.Enhancer . setNamingPolicy ( SpringNamingPolicy . INSTANCE ) ; if ( this . org.springframework.beans.factory.support.BeanFactory instanceof ConfigurableBeanFactory ) { java.lang.ClassLoader java.lang.ClassLoader = ( ( ConfigurableBeanFactory ) this . org.springframework.beans.factory.support.BeanFactory ) . getBeanClassLoader ( ) ; org.springframework.beans.factory.support.Enhancer . setStrategy ( new org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy.ClassLoaderAwareGeneratorStrategy ( java.lang.ClassLoader ) ) ; } org.springframework.beans.factory.support.Enhancer . setCallbackFilter ( new org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy.MethodOverrideCallbackFilter ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.Enhancer . setCallbackTypes ( java.lang.Class<?>[] ) ; return org.springframework.beans.factory.support.Enhancer . createClass ( ) ; }  <METHOD_END>
<METHOD_START> public void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { this . org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ( ) { return this . org.springframework.beans.factory.support.RootBeanDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Class<? extends org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy.CglibIdentitySupport> ( ) == java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) && this . org.springframework.beans.factory.support.RootBeanDefinition . equals ( ( ( org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy.CglibIdentitySupport ) java.lang.Object ) . org.springframework.beans.factory.support.RootBeanDefinition ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( ClassGenerator org.springframework.beans.factory.support.ClassGenerator ) throws java.lang.Exception { if ( this . java.lang.ClassLoader == null ) { return super. generate ( org.springframework.beans.factory.support.ClassGenerator ) ; } java.lang.Thread java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; java.lang.ClassLoader java.lang.ClassLoader ; try { java.lang.ClassLoader = java.lang.Thread . java.lang.ClassLoader ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return super. generate ( org.springframework.beans.factory.support.ClassGenerator ) ; } boolean boolean = ! this . java.lang.ClassLoader . boolean ( java.lang.ClassLoader ) ; if ( boolean ) { java.lang.Thread . void ( this . java.lang.ClassLoader ) ; } try { return super. generate ( org.springframework.beans.factory.support.ClassGenerator ) ; } finally { if ( boolean ) { java.lang.Thread . void ( java.lang.ClassLoader ) ; } } }  <METHOD_END>
<METHOD_START> public void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { super( org.springframework.beans.factory.support.RootBeanDefinition ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.reflect.Method java.lang.reflect.Method ) { MethodOverride org.springframework.beans.factory.support.MethodOverride = org.springframework.beans.factory.support.RootBeanDefinition ( ) . getMethodOverrides ( ) . getOverride ( java.lang.reflect.Method ) ; if ( org.springframework.beans.factory.support.Log . isTraceEnabled ( ) ) { org.springframework.beans.factory.support.Log . trace ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING + org.springframework.beans.factory.support.MethodOverride + STRING ) ; } if ( org.springframework.beans.factory.support.MethodOverride == null ) { return int ; } else if ( org.springframework.beans.factory.support.MethodOverride instanceof LookupOverride ) { return int ; } else if ( org.springframework.beans.factory.support.MethodOverride instanceof ReplaceOverride ) { return int ; } throw new java.lang.UnsupportedOperationException ( STRING + org.springframework.beans.factory.support.MethodOverride . getClass ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , BeanFactory org.springframework.beans.factory.support.BeanFactory ) { super( org.springframework.beans.factory.support.RootBeanDefinition ); this . org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.beans.factory.support.MethodProxy ) throws java.lang.Throwable { LookupOverride org.springframework.beans.factory.support.LookupOverride = ( LookupOverride ) org.springframework.beans.factory.support.RootBeanDefinition ( ) . getMethodOverrides ( ) . getOverride ( java.lang.reflect.Method ) ; java.lang.Object [] java.lang.Object[] = ( java.lang.Object[] . int > NUMBER ? java.lang.Object[] : null ) ; if ( StringUtils . hasText ( org.springframework.beans.factory.support.LookupOverride . getBeanName ( ) ) ) { return this . org.springframework.beans.factory.support.BeanFactory . getBean ( org.springframework.beans.factory.support.LookupOverride . getBeanName ( ) , java.lang.Object[] ) ; } else { return this . org.springframework.beans.factory.support.BeanFactory . getBean ( java.lang.reflect.Method . java.lang.Class<?> ( ) , java.lang.Object[] ) ; } }  <METHOD_END>
<METHOD_START> public void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , BeanFactory org.springframework.beans.factory.support.BeanFactory ) { super( org.springframework.beans.factory.support.RootBeanDefinition ); this . org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.beans.factory.support.MethodProxy ) throws java.lang.Throwable { ReplaceOverride org.springframework.beans.factory.support.ReplaceOverride = ( ReplaceOverride ) org.springframework.beans.factory.support.RootBeanDefinition ( ) . getMethodOverrides ( ) . getOverride ( java.lang.reflect.Method ) ; MethodReplacer org.springframework.beans.factory.support.MethodReplacer = this . org.springframework.beans.factory.support.BeanFactory . getBean ( org.springframework.beans.factory.support.ReplaceOverride . getMethodReplacerBeanName ( ) , MethodReplacer .class ) ; return org.springframework.beans.factory.support.MethodReplacer . reimplement ( java.lang.Object , java.lang.reflect.Method , java.lang.Object[] ) ; }  <METHOD_END>
