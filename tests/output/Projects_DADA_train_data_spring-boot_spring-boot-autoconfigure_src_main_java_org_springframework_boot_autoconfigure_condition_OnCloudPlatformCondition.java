<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . getAnnotationAttributes ( ConditionalOnCloudPlatform .class . java.lang.String ( ) ) ; CloudPlatform org.springframework.boot.autoconfigure.condition.CloudPlatform = ( CloudPlatform ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; return org.springframework.boot.autoconfigure.condition.ConditionOutcome ( org.springframework.boot.autoconfigure.condition.ConditionContext . getEnvironment ( ) , org.springframework.boot.autoconfigure.condition.CloudPlatform ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( Environment org.springframework.boot.autoconfigure.condition.Environment , CloudPlatform org.springframework.boot.autoconfigure.condition.CloudPlatform ) { java.lang.String java.lang.String = org.springframework.boot.autoconfigure.condition.CloudPlatform . name ( ) ; ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( ConditionalOnCloudPlatform .class ) ; if ( org.springframework.boot.autoconfigure.condition.CloudPlatform . isActive ( org.springframework.boot.autoconfigure.condition.Environment ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( java.lang.String ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( java.lang.String ) . atAll ( ) ) ; }  <METHOD_END>
