<METHOD_START> @ Before public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; Scope org.springframework.beans.factory.config.Scope = new NoOpScope ( ) { private int int ; private java.util.List<org.springframework.beans.factory.config.TestBean> < TestBean > java.util.List<org.springframework.beans.factory.config.TestBean> = new java.util.LinkedList<org.springframework.beans.factory.config.TestBean> <> ( ) ; { java.util.List<org.springframework.beans.factory.config.TestBean> . add ( new TestBean ( ) ) ; java.util.List<org.springframework.beans.factory.config.TestBean> . add ( new TestBean ( ) ) ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , ObjectFactory < ? > org.springframework.beans.factory.config.ObjectFactory<?> ) { if ( int >= java.util.List<org.springframework.beans.factory.config.TestBean> . size ( ) ) { int = NUMBER ; } return java.util.List<org.springframework.beans.factory.config.TestBean> . get ( int ++ ) ; } } ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerScope ( STRING , org.springframework.beans.factory.config.Scope ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.config.DefaultListableBeanFactory . getRegisteredScopeNames ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertSame ( org.springframework.beans.factory.config.Scope , org.springframework.beans.factory.config.DefaultListableBeanFactory . getRegisteredScope ( STRING ) ) ; XmlBeanDefinitionReader org.springframework.beans.factory.config.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; org.springframework.beans.factory.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.config.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , ObjectFactory < ? > org.springframework.beans.factory.config.ObjectFactory<?> ) { if ( int >= java.util.List<org.springframework.beans.factory.config.TestBean> . size ( ) ) { int = NUMBER ; } return java.util.List<org.springframework.beans.factory.config.TestBean> . get ( int ++ ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( org.springframework.beans.factory.config.TestBean , org.springframework.beans.factory.config.TestBean ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.config.TestBean , org.springframework.beans.factory.config.TestBean ) ; }  <METHOD_END>
