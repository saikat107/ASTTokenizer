<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.scheduling.quartz.TestBean = new TestBean ( STRING , NUMBER ) ; StaticApplicationContext org.springframework.scheduling.quartz.StaticApplicationContext = new StaticApplicationContext ( ) ; final Scheduler org.springframework.scheduling.quartz.Scheduler = mock ( Scheduler .class ) ; SchedulerContext org.springframework.scheduling.quartz.SchedulerContext = new SchedulerContext ( ) ; given ( org.springframework.scheduling.quartz.Scheduler . getContext ( ) ) . willReturn ( org.springframework.scheduling.quartz.SchedulerContext ) ; SchedulerFactoryBean org.springframework.scheduling.quartz.SchedulerFactoryBean = new SchedulerFactoryBean ( ) { @ java.lang.Override protected org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( SchedulerFactory org.springframework.scheduling.quartz.SchedulerFactory , java.lang.String java.lang.String ) { return org.springframework.scheduling.quartz.Scheduler ; } } ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobFactory ( null ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.scheduling.quartz.TestBean ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setSchedulerContextAsMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setApplicationContext ( org.springframework.scheduling.quartz.StaticApplicationContext ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setApplicationContextSchedulerContextKey ( STRING ) ; try { org.springframework.scheduling.quartz.SchedulerFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . start ( ) ; Scheduler org.springframework.scheduling.quartz.Scheduler = org.springframework.scheduling.quartz.SchedulerFactoryBean . getObject ( ) ; assertEquals ( org.springframework.scheduling.quartz.TestBean , org.springframework.scheduling.quartz.Scheduler . getContext ( ) . get ( STRING ) ) ; assertEquals ( org.springframework.scheduling.quartz.StaticApplicationContext , org.springframework.scheduling.quartz.Scheduler . getContext ( ) . get ( STRING ) ) ; } finally { org.springframework.scheduling.quartz.SchedulerFactoryBean . destroy ( ) ; } verify ( org.springframework.scheduling.quartz.Scheduler ) . start ( ) ; verify ( org.springframework.scheduling.quartz.Scheduler ) . shutdown ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.scheduling.quartz.Scheduler org.springframework.scheduling.quartz.Scheduler ( SchedulerFactory org.springframework.scheduling.quartz.SchedulerFactory , java.lang.String java.lang.String ) { return org.springframework.scheduling.quartz.Scheduler ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; org.springframework.scheduling.quartz.QuartzSupportTests.CountingTaskExecutor org.springframework.scheduling.quartz.QuartzSupportTests.CountingTaskExecutor = new org.springframework.scheduling.quartz.QuartzSupportTests.CountingTaskExecutor ( ) ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; JobDetailImpl org.springframework.scheduling.quartz.JobDetailImpl = new JobDetailImpl ( ) ; org.springframework.scheduling.quartz.JobDetailImpl . setDurability ( true ) ; org.springframework.scheduling.quartz.JobDetailImpl . setJobClass ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob .class ) ; org.springframework.scheduling.quartz.JobDetailImpl . setName ( STRING ) ; SimpleTriggerFactoryBean org.springframework.scheduling.quartz.SimpleTriggerFactoryBean = new SimpleTriggerFactoryBean ( ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setName ( STRING ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setJobDetail ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setStartDelay ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatInterval ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatCount ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . afterPropertiesSet ( ) ; SchedulerFactoryBean org.springframework.scheduling.quartz.SchedulerFactoryBean = new SchedulerFactoryBean ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setTaskExecutor ( org.springframework.scheduling.quartz.QuartzSupportTests.CountingTaskExecutor ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setTriggers ( org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . getObject ( ) ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobDetails ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . start ( ) ; java.lang.Thread . void ( NUMBER ) ; assertTrue ( STRING , org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int > NUMBER ) ; assertEquals ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int , org.springframework.scheduling.quartz.QuartzSupportTests.CountingTaskExecutor . int ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { JobDetailImpl org.springframework.scheduling.quartz.JobDetailImpl = new JobDetailImpl ( ) ; org.springframework.scheduling.quartz.JobDetailImpl . setJobClass ( ( java.lang.Class ) org.springframework.scheduling.quartz.QuartzSupportTests.DummyRunnable .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; JobDetailImpl org.springframework.scheduling.quartz.JobDetailImpl = new JobDetailImpl ( ) ; org.springframework.scheduling.quartz.JobDetailImpl . setDurability ( true ) ; org.springframework.scheduling.quartz.JobDetailImpl . setJobClass ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJobBean .class ) ; org.springframework.scheduling.quartz.JobDetailImpl . setName ( STRING ) ; org.springframework.scheduling.quartz.JobDetailImpl . getJobDataMap ( ) . put ( STRING , STRING ) ; SimpleTriggerFactoryBean org.springframework.scheduling.quartz.SimpleTriggerFactoryBean = new SimpleTriggerFactoryBean ( ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setName ( STRING ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setJobDetail ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setStartDelay ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatInterval ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatCount ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . afterPropertiesSet ( ) ; SchedulerFactoryBean org.springframework.scheduling.quartz.SchedulerFactoryBean = new SchedulerFactoryBean ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setTriggers ( org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . getObject ( ) ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobDetails ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . start ( ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.scheduling.quartz.QuartzSupportTests.DummyJobBean . int ) ; assertTrue ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJobBean . int > NUMBER ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; JobDetailImpl org.springframework.scheduling.quartz.JobDetailImpl = new JobDetailImpl ( ) ; org.springframework.scheduling.quartz.JobDetailImpl . setDurability ( true ) ; org.springframework.scheduling.quartz.JobDetailImpl . setJobClass ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob .class ) ; org.springframework.scheduling.quartz.JobDetailImpl . setName ( STRING ) ; org.springframework.scheduling.quartz.JobDetailImpl . getJobDataMap ( ) . put ( STRING , STRING ) ; org.springframework.scheduling.quartz.JobDetailImpl . getJobDataMap ( ) . put ( STRING , STRING ) ; SimpleTriggerFactoryBean org.springframework.scheduling.quartz.SimpleTriggerFactoryBean = new SimpleTriggerFactoryBean ( ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setName ( STRING ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setJobDetail ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setStartDelay ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatInterval ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatCount ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . afterPropertiesSet ( ) ; SchedulerFactoryBean org.springframework.scheduling.quartz.SchedulerFactoryBean = new SchedulerFactoryBean ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobFactory ( new SpringBeanJobFactory ( ) ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setTriggers ( org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . getObject ( ) ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobDetails ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . start ( ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int ) ; assertTrue ( STRING , org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int > NUMBER ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; JobDetailImpl org.springframework.scheduling.quartz.JobDetailImpl = new JobDetailImpl ( ) ; org.springframework.scheduling.quartz.JobDetailImpl . setDurability ( true ) ; org.springframework.scheduling.quartz.JobDetailImpl . setJobClass ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob .class ) ; org.springframework.scheduling.quartz.JobDetailImpl . setName ( STRING ) ; org.springframework.scheduling.quartz.JobDetailImpl . getJobDataMap ( ) . put ( STRING , STRING ) ; org.springframework.scheduling.quartz.JobDetailImpl . getJobDataMap ( ) . put ( STRING , STRING ) ; SimpleTriggerFactoryBean org.springframework.scheduling.quartz.SimpleTriggerFactoryBean = new SimpleTriggerFactoryBean ( ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setName ( STRING ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setJobDetail ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setStartDelay ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatInterval ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatCount ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . afterPropertiesSet ( ) ; SchedulerFactoryBean org.springframework.scheduling.quartz.SchedulerFactoryBean = new SchedulerFactoryBean ( ) ; SpringBeanJobFactory org.springframework.scheduling.quartz.SpringBeanJobFactory = new SpringBeanJobFactory ( ) ; org.springframework.scheduling.quartz.SpringBeanJobFactory . setIgnoredUnknownProperties ( STRING ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobFactory ( org.springframework.scheduling.quartz.SpringBeanJobFactory ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setTriggers ( org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . getObject ( ) ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobDetails ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . afterPropertiesSet ( ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int ) ; assertTrue ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int == NUMBER ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJobBean . int = NUMBER ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJobBean . int = NUMBER ; JobDetailImpl org.springframework.scheduling.quartz.JobDetailImpl = new JobDetailImpl ( ) ; org.springframework.scheduling.quartz.JobDetailImpl . setDurability ( true ) ; org.springframework.scheduling.quartz.JobDetailImpl . setJobClass ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJobBean .class ) ; org.springframework.scheduling.quartz.JobDetailImpl . setName ( STRING ) ; org.springframework.scheduling.quartz.JobDetailImpl . getJobDataMap ( ) . put ( STRING , STRING ) ; SimpleTriggerFactoryBean org.springframework.scheduling.quartz.SimpleTriggerFactoryBean = new SimpleTriggerFactoryBean ( ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setName ( STRING ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setJobDetail ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setStartDelay ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatInterval ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . setRepeatCount ( NUMBER ) ; org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . afterPropertiesSet ( ) ; SchedulerFactoryBean org.springframework.scheduling.quartz.SchedulerFactoryBean = new SchedulerFactoryBean ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobFactory ( new SpringBeanJobFactory ( ) ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setTriggers ( org.springframework.scheduling.quartz.SimpleTriggerFactoryBean . getObject ( ) ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobDetails ( org.springframework.scheduling.quartz.JobDetailImpl ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . start ( ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.scheduling.quartz.QuartzSupportTests.DummyJobBean . int ) ; assertTrue ( org.springframework.scheduling.quartz.QuartzSupportTests.DummyJobBean . int > NUMBER ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; SchedulerFactoryBean org.springframework.scheduling.quartz.SchedulerFactoryBean = new SchedulerFactoryBean ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobFactory ( new SpringBeanJobFactory ( ) ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . setJobSchedulingDataLocation ( STRING ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . start ( ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int ) ; assertTrue ( STRING , org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int > NUMBER ) ; org.springframework.scheduling.quartz.SchedulerFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.scheduling.quartz.ClassPathXmlApplicationContext = org.springframework.scheduling.quartz.ClassPathXmlApplicationContext ( STRING ) ; try { Scheduler org.springframework.scheduling.quartz.Scheduler = ( Scheduler ) org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . getBean ( STRING ) ; Scheduler org.springframework.scheduling.quartz.Scheduler = ( Scheduler ) org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNotSame ( org.springframework.scheduling.quartz.Scheduler , org.springframework.scheduling.quartz.Scheduler ) ; assertEquals ( STRING , org.springframework.scheduling.quartz.Scheduler . getSchedulerName ( ) ) ; assertEquals ( STRING , org.springframework.scheduling.quartz.Scheduler . getSchedulerName ( ) ) ; } finally { org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; ClassPathXmlApplicationContext org.springframework.scheduling.quartz.ClassPathXmlApplicationContext = org.springframework.scheduling.quartz.ClassPathXmlApplicationContext ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; try { QuartzTestBean org.springframework.scheduling.quartz.QuartzTestBean = ( QuartzTestBean ) org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . getBean ( STRING ) ; QuartzTestBean org.springframework.scheduling.quartz.QuartzTestBean = ( QuartzTestBean ) org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.scheduling.quartz.QuartzTestBean . getImportCount ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scheduling.quartz.QuartzTestBean . getExportCount ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scheduling.quartz.QuartzTestBean . getImportCount ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scheduling.quartz.QuartzTestBean . getExportCount ( ) ) ; } finally { org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; ClassPathXmlApplicationContext org.springframework.scheduling.quartz.ClassPathXmlApplicationContext = org.springframework.scheduling.quartz.ClassPathXmlApplicationContext ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; try { QuartzTestBean org.springframework.scheduling.quartz.QuartzTestBean = ( QuartzTestBean ) org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . getBean ( STRING ) ; QuartzTestBean org.springframework.scheduling.quartz.QuartzTestBean = ( QuartzTestBean ) org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.scheduling.quartz.QuartzTestBean . getImportCount ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scheduling.quartz.QuartzTestBean . getExportCount ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scheduling.quartz.QuartzTestBean . getImportCount ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scheduling.quartz.QuartzTestBean . getExportCount ( ) ) ; } finally { org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.scheduling.quartz.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.scheduling.quartz.StaticApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( SchedulerFactoryBean .class ) ) ; Scheduler org.springframework.scheduling.quartz.Scheduler = org.springframework.scheduling.quartz.StaticApplicationContext . getBean ( STRING , Scheduler .class ) ; assertFalse ( org.springframework.scheduling.quartz.Scheduler . isStarted ( ) ) ; org.springframework.scheduling.quartz.StaticApplicationContext . refresh ( ) ; assertTrue ( org.springframework.scheduling.quartz.Scheduler . isStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { StaticApplicationContext org.springframework.scheduling.quartz.StaticApplicationContext = new StaticApplicationContext ( ) ; BeanDefinition org.springframework.scheduling.quartz.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( SchedulerFactoryBean .class ) . addPropertyValue ( STRING , false ) . getBeanDefinition ( ) ; org.springframework.scheduling.quartz.StaticApplicationContext . registerBeanDefinition ( STRING , org.springframework.scheduling.quartz.BeanDefinition ) ; Scheduler org.springframework.scheduling.quartz.Scheduler = org.springframework.scheduling.quartz.StaticApplicationContext . getBean ( STRING , Scheduler .class ) ; assertFalse ( org.springframework.scheduling.quartz.Scheduler . isStarted ( ) ) ; org.springframework.scheduling.quartz.StaticApplicationContext . refresh ( ) ; assertFalse ( org.springframework.scheduling.quartz.Scheduler . isStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.scheduling.quartz.ClassPathXmlApplicationContext = org.springframework.scheduling.quartz.ClassPathXmlApplicationContext ( STRING ) ; assertSame ( SchedulerRepository . getInstance ( ) . lookup ( STRING ) , org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . getBean ( STRING ) ) ; org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; org.springframework.scheduling.quartz.QuartzSupportTests.DummyJob . int = NUMBER ; ClassPathXmlApplicationContext org.springframework.scheduling.quartz.ClassPathXmlApplicationContext = org.springframework.scheduling.quartz.ClassPathXmlApplicationContext ( STRING ) ; JdbcTemplate org.springframework.scheduling.quartz.JdbcTemplate = new JdbcTemplate ( org.springframework.scheduling.quartz.ClassPathXmlApplicationContext . getBean ( javax.sql.DataSource .class ) ) ; assertFalse ( STRING , org.springframework.scheduling.quartz.JdbcTemplate . queryForList ( STRING ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.scheduling.quartz.ClassPathXmlApplicationContext org.springframework.scheduling.quartz.ClassPathXmlApplicationContext ( java.lang.String java.lang.String ) { return new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<? extends org.springframework.scheduling.quartz.QuartzSupportTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { this . int ++ ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { if ( int > NUMBER ) { throw new java.lang.IllegalStateException ( STRING ) ; } int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( JobExecutionContext org.springframework.scheduling.quartz.JobExecutionContext ) throws org.springframework.scheduling.quartz.JobExecutionException { int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { if ( int > NUMBER ) { throw new java.lang.IllegalStateException ( STRING ) ; } int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected synchronized void void ( JobExecutionContext org.springframework.scheduling.quartz.JobExecutionContext ) throws org.springframework.scheduling.quartz.JobExecutionException { int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
