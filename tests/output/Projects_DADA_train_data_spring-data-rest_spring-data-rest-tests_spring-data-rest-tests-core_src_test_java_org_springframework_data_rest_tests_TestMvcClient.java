<METHOD_START> public void ( MockMvc org.springframework.data.rest.tests.MockMvc , LinkDiscoverers org.springframework.data.rest.tests.LinkDiscoverers ) { Assert . notNull ( org.springframework.data.rest.tests.MockMvc , STRING ) ; Assert . notNull ( org.springframework.data.rest.tests.LinkDiscoverers , STRING ) ; this . org.springframework.data.rest.tests.MockMvc = org.springframework.data.rest.tests.MockMvc ; this . org.springframework.data.rest.tests.LinkDiscoverers = org.springframework.data.rest.tests.LinkDiscoverers ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { MockHttpServletRequest org.springframework.data.rest.tests.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServletRequestAttributes org.springframework.data.rest.tests.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.data.rest.tests.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.data.rest.tests.ServletRequestAttributes ) ; }  <METHOD_END>
<METHOD_START> public static void void ( HttpEntity < ? > org.springframework.data.rest.tests.HttpEntity<?> , HttpMethod ... org.springframework.data.rest.tests.HttpMethod[] ) { HttpHeaders org.springframework.data.rest.tests.HttpHeaders = org.springframework.data.rest.tests.HttpEntity<> . getHeaders ( ) ; assertThat ( org.springframework.data.rest.tests.HttpHeaders . getAllow ( ) , hasSize ( methods . length ) ) ; assertThat ( org.springframework.data.rest.tests.HttpHeaders . getAllow ( ) , hasItems ( org.springframework.data.rest.tests.HttpMethod[] ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ( java.lang.String java.lang.String , MediaType org.springframework.data.rest.tests.MediaType ) throws java.lang.Exception { return org.springframework.data.rest.tests.MockMvc . perform ( get ( java.lang.String ) . accept ( org.springframework.data.rest.tests.MediaType ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( org.springframework.data.rest.tests.MediaType ) ) . andReturn ( ) . getResponse ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ( java.lang.String java.lang.String , MediaType org.springframework.data.rest.tests.MediaType , HttpHeaders org.springframework.data.rest.tests.HttpHeaders ) throws java.lang.Exception { return org.springframework.data.rest.tests.MockMvc . perform ( get ( java.lang.String ) . accept ( org.springframework.data.rest.tests.MediaType ) . headers ( org.springframework.data.rest.tests.HttpHeaders ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( org.springframework.data.rest.tests.MediaType ) ) . andReturn ( ) . getResponse ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ( Link org.springframework.data.rest.tests.Link ) throws java.lang.Exception { return org.springframework.data.rest.tests.MockHttpServletResponse ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ( Link org.springframework.data.rest.tests.Link , MediaType org.springframework.data.rest.tests.MediaType ) throws java.lang.Exception { return org.springframework.data.rest.tests.MockHttpServletResponse ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) , org.springframework.data.rest.tests.MediaType ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ( java.lang.String java.lang.String ) throws java.lang.Exception { return org.springframework.data.rest.tests.MockHttpServletResponse ( java.lang.String , org.springframework.data.rest.tests.MediaType ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.ResultActions org.springframework.data.rest.tests.ResultActions ( Link org.springframework.data.rest.tests.Link ) throws java.lang.Exception { return org.springframework.data.rest.tests.ResultActions ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.ResultActions org.springframework.data.rest.tests.ResultActions ( java.lang.String java.lang.String ) throws java.lang.Exception { return org.springframework.data.rest.tests.ResultActions ( java.lang.String , MediaType . ALL ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.ResultActions org.springframework.data.rest.tests.ResultActions ( Link org.springframework.data.rest.tests.Link , MediaType org.springframework.data.rest.tests.MediaType ) throws java.lang.Exception { return org.springframework.data.rest.tests.ResultActions ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) , org.springframework.data.rest.tests.MediaType ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.ResultActions org.springframework.data.rest.tests.ResultActions ( java.lang.String java.lang.String , MediaType org.springframework.data.rest.tests.MediaType ) throws java.lang.Exception { return org.springframework.data.rest.tests.MockMvc . perform ( get ( java.lang.String ) . header ( HttpHeaders . ACCEPT , org.springframework.data.rest.tests.MediaType . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.rest.tests.Link> < Link > java.util.List<org.springframework.data.rest.tests.Link> ( java.lang.String java.lang.String ) throws java.lang.Exception { return java.util.List<org.springframework.data.rest.tests.Link> ( new Link ( STRING ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( java.lang.String java.lang.String ) throws java.lang.Exception { java.util.List<org.springframework.data.rest.tests.Link> < Link > java.util.List<org.springframework.data.rest.tests.Link> = java.util.List<org.springframework.data.rest.tests.Link> ( java.lang.String ) ; assertThat ( java.util.List<org.springframework.data.rest.tests.Link> , hasSize ( NUMBER ) ) ; return java.util.List<org.springframework.data.rest.tests.Link> . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . java.util.Iterator<java.lang.String> ( ) ; Link org.springframework.data.rest.tests.Link = null ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; org.springframework.data.rest.tests.Link = org.springframework.data.rest.tests.Link == null ? org.springframework.data.rest.tests.Link ( java.lang.String ) : org.springframework.data.rest.tests.Link ( org.springframework.data.rest.tests.Link , java.lang.String ) ; } return org.springframework.data.rest.tests.Link ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.rest.tests.Link> < Link > java.util.List<org.springframework.data.rest.tests.Link> ( Link org.springframework.data.rest.tests.Link , java.lang.String java.lang.String ) throws java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MockMvc . perform ( get ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) ) . accept ( org.springframework.data.rest.tests.MediaType ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( org.springframework.data.rest.tests.ResultMatcher ( java.lang.String ) ) . andReturn ( ) . getResponse ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; return org.springframework.data.rest.tests.LinkDiscoverer ( org.springframework.data.rest.tests.MockHttpServletResponse ) . findLinksWithRel ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( Link org.springframework.data.rest.tests.Link , java.lang.String java.lang.String ) throws java.lang.Exception { return org.springframework.data.rest.tests.Link ( org.springframework.data.rest.tests.Link , java.lang.String , org.springframework.data.rest.tests.MediaType ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( Link org.springframework.data.rest.tests.Link , java.lang.String java.lang.String , MediaType org.springframework.data.rest.tests.MediaType ) throws java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MockMvc . perform ( get ( org.springframework.data.rest.tests.Link . expand ( ) . getHref ( ) ) . accept ( org.springframework.data.rest.tests.MediaType ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( org.springframework.data.rest.tests.ResultMatcher ( java.lang.String ) ) . andReturn ( ) . getResponse ( ) ; return org.springframework.data.rest.tests.Link ( java.lang.String , org.springframework.data.rest.tests.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( java.lang.String java.lang.String , MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; Link org.springframework.data.rest.tests.Link = org.springframework.data.rest.tests.LinkDiscoverer ( org.springframework.data.rest.tests.MockHttpServletResponse ) . findLinkWithRel ( java.lang.String , java.lang.String ) ; assertThat ( STRING + java.lang.String + STRING + java.lang.String + STRING , org.springframework.data.rest.tests.Link , is ( notNullValue ( ) ) ) ; return org.springframework.data.rest.tests.Link ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.ResultMatcher org.springframework.data.rest.tests.ResultMatcher ( final java.lang.String java.lang.String ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.data.rest.tests.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MvcResult . getResponse ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( STRING + java.lang.String + STRING + java.lang.String , org.springframework.data.rest.tests.LinkDiscoverer ( org.springframework.data.rest.tests.MockHttpServletResponse ) . findLinkWithRel ( java.lang.String , java.lang.String ) , notNullValue ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.data.rest.tests.MvcResult ) throws java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse = org.springframework.data.rest.tests.MvcResult . getResponse ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( STRING + java.lang.String + STRING + java.lang.String , org.springframework.data.rest.tests.LinkDiscoverer ( org.springframework.data.rest.tests.MockHttpServletResponse ) . findLinkWithRel ( java.lang.String , java.lang.String ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.LinkDiscoverer org.springframework.data.rest.tests.LinkDiscoverer ( MockHttpServletResponse org.springframework.data.rest.tests.MockHttpServletResponse ) { java.lang.String java.lang.String = org.springframework.data.rest.tests.MockHttpServletResponse . getContentType ( ) ; LinkDiscoverer org.springframework.data.rest.tests.LinkDiscoverer = org.springframework.data.rest.tests.LinkDiscoverers . getLinkDiscovererFor ( java.lang.String ) ; assertThat ( STRING + java.lang.String + STRING , org.springframework.data.rest.tests.LinkDiscoverer , is ( notNullValue ( ) ) ) ; return org.springframework.data.rest.tests.LinkDiscoverer ; }  <METHOD_END>
