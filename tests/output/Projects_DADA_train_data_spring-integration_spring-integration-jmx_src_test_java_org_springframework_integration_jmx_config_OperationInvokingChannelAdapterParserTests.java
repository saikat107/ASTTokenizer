<METHOD_START> @ After public void void ( ) { org.springframework.integration.jmx.config.TestBean . messages . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception instanceof MessagingException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( this . org.springframework.integration.jmx.config.Message<?> ( STRING ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( this . org.springframework.integration.jmx.config.Message<?> ( STRING ) ) ; org.springframework.integration.jmx.config.MessageChannel . send ( this . org.springframework.integration.jmx.config.Message<?> ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.jmx.config.TestBean . messages . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.jmx.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception instanceof MessagingException ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jmx.config.Message<?> < ? > org.springframework.integration.jmx.config.Message<?> ( java.lang.String java.lang.String ) { return MessageBuilder . withPayload ( java.lang.String ) . setHeader ( JmxHeaders . OBJECT_NAME , STRING ) . setHeader ( JmxHeaders . OPERATION_NAME , STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jmx.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jmx.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.jmx.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
