<METHOD_START> @ Test public void void ( ) { MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( null ) ; assertNotNull ( org.springframework.integration.message.MessageHeaders . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( null ) ; java.lang.Thread . void ( NUMBER ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( org.springframework.integration.message.MessageHeaders ) ; assertNotSame ( org.springframework.integration.message.MessageHeaders . getTimestamp ( ) , org.springframework.integration.message.MessageHeaders . getTimestamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( null ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( org.springframework.integration.message.MessageHeaders ) ; assertNotSame ( org.springframework.integration.message.MessageHeaders . getId ( ) , org.springframework.integration.message.MessageHeaders . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( null ) ; assertNotNull ( org.springframework.integration.message.MessageHeaders . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Integer ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( java.lang.Integer , org.springframework.integration.message.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Integer ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( java.lang.Integer , org.springframework.integration.message.MessageHeaders . get ( STRING , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.Integer java.lang.Integer = new java.lang.Integer ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Integer ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( java.lang.Integer , org.springframework.integration.message.MessageHeaders . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertNull ( org.springframework.integration.message.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertNull ( org.springframework.integration.message.MessageHeaders . get ( STRING , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Integer ( NUMBER ) ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.integration.message.MessageHeaders . keySet ( ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = ( MessageHeaders ) java.lang.Object ( org.springframework.integration.message.MessageHeaders ) ; assertEquals ( STRING , org.springframework.integration.message.MessageHeaders . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.message.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; MessageHeaders org.springframework.integration.message.MessageHeaders = ( MessageHeaders ) java.lang.Object ( org.springframework.integration.message.MessageHeaders ) ; assertEquals ( STRING , org.springframework.integration.message.MessageHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.message.MessageHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( java.lang.Object ) ; java.io.ObjectOutputStream . void ( ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( java.io.ByteArrayInputStream ) ; java.lang.Object java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; java.io.ObjectInputStream . void ( ) ; return java.lang.Object ; }  <METHOD_END>
