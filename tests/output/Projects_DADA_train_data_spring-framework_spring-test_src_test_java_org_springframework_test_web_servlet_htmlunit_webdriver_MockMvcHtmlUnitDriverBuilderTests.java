<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.htmlunit.webdriver.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.test.web.servlet.htmlunit.webdriver.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { MockMvcHtmlUnitDriverBuilder . webAppContextSetup ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { MockMvcHtmlUnitDriverBuilder . mockMvcSetup ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebConnectionHtmlUnitDriver org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver = new WebConnectionHtmlUnitDriver ( ) ; this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver = MockMvcHtmlUnitDriverBuilder . mockMvcSetup ( this . org.springframework.test.web.servlet.htmlunit.webdriver.MockMvc ) . withDelegate ( org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver ) . build ( ) ; void ( STRING ) ; Assume . group ( TestGroup . PERFORMANCE , ( ) assertMockMvcNotUsed ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver = MockMvcHtmlUnitDriverBuilder . mockMvcSetup ( this . org.springframework.test.web.servlet.htmlunit.webdriver.MockMvc ) . build ( ) ; void ( STRING ) ; Assume . group ( TestGroup . PERFORMANCE , ( ) assertMockMvcNotUsed ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver = MockMvcHtmlUnitDriverBuilder . mockMvcSetup ( this . org.springframework.test.web.servlet.htmlunit.webdriver.MockMvc ) . build ( ) ; assertTrue ( this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver . isJavascriptEnabled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver = MockMvcHtmlUnitDriverBuilder . mockMvcSetup ( this . org.springframework.test.web.servlet.htmlunit.webdriver.MockMvc ) . javascriptEnabled ( false ) . build ( ) ; assertFalse ( this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver . isJavascriptEnabled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebConnectionHtmlUnitDriver org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver = new WebConnectionHtmlUnitDriver ( ) ; this . org.springframework.test.web.servlet.htmlunit.webdriver.MockMvc = MockMvcBuilders . standaloneSetup ( new org.springframework.test.web.servlet.htmlunit.webdriver.MockMvcHtmlUnitDriverBuilderTests.CookieController ( ) ) . build ( ) ; this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver = MockMvcHtmlUnitDriverBuilder . mockMvcSetup ( this . org.springframework.test.web.servlet.htmlunit.webdriver.MockMvc ) . withDelegate ( org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver ) . build ( ) ; assertThat ( java.lang.String ( STRING ) , equalTo ( STRING ) ) ; Cookie org.springframework.test.web.servlet.htmlunit.webdriver.Cookie = new Cookie ( STRING , STRING , STRING ) ; org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver . getWebClient ( ) . getCookieManager ( ) . addCookie ( org.springframework.test.web.servlet.htmlunit.webdriver.Cookie ) ; assertThat ( java.lang.String ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { assertThat ( java.lang.String ( java.lang.String ) , containsString ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { assertThat ( java.lang.String ( java.lang.String ) , not ( containsString ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.io.IOException { this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver . get ( java.lang.String ) ; return this . org.springframework.test.web.servlet.htmlunit.webdriver.HtmlUnitDriver . getPageSource ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public java.lang.String java.lang.String ( HttpServletRequest org.springframework.test.web.servlet.htmlunit.webdriver.HttpServletRequest ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , produces = STRING ) java.lang.String java.lang.String ( @ CookieValue ( STRING ) java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
