<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method ) { super( java.lang.String , java.lang.Class<> , java.lang.reflect.Method ); this . org.springframework.transaction.event.TransactionalEventListener = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , TransactionalEventListener .class ) ; if ( this . org.springframework.transaction.event.TransactionalEventListener == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.transaction.event.ApplicationEvent ) { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { TransactionSynchronization org.springframework.transaction.event.TransactionSynchronization = org.springframework.transaction.event.TransactionSynchronization ( org.springframework.transaction.event.ApplicationEvent ) ; TransactionSynchronizationManager . registerSynchronization ( org.springframework.transaction.event.TransactionSynchronization ) ; } else if ( this . org.springframework.transaction.event.TransactionalEventListener . fallbackExecution ( ) ) { if ( this . org.springframework.transaction.event.TransactionalEventListener . phase ( ) == TransactionPhase . AFTER_ROLLBACK && logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.transaction.event.ApplicationEvent + STRING ) ; } processEvent ( org.springframework.transaction.event.ApplicationEvent ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.transaction.event.ApplicationEvent ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.event.TransactionSynchronization org.springframework.transaction.event.TransactionSynchronization ( ApplicationEvent org.springframework.transaction.event.ApplicationEvent ) { return new org.springframework.transaction.event.ApplicationListenerMethodTransactionalAdapter.TransactionSynchronizationEventAdapter ( this , org.springframework.transaction.event.ApplicationEvent , this . org.springframework.transaction.event.TransactionalEventListener . phase ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ApplicationListenerMethodAdapter org.springframework.transaction.event.ApplicationListenerMethodAdapter , ApplicationEvent org.springframework.transaction.event.ApplicationEvent , TransactionPhase org.springframework.transaction.event.TransactionPhase ) { this . org.springframework.transaction.event.ApplicationListenerMethodAdapter = org.springframework.transaction.event.ApplicationListenerMethodAdapter ; this . org.springframework.transaction.event.ApplicationEvent = org.springframework.transaction.event.ApplicationEvent ; this . org.springframework.transaction.event.TransactionPhase = org.springframework.transaction.event.TransactionPhase ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.transaction.event.ApplicationListenerMethodAdapter . getOrder ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { if ( this . org.springframework.transaction.event.TransactionPhase == TransactionPhase . BEFORE_COMMIT ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { if ( this . org.springframework.transaction.event.TransactionPhase == TransactionPhase . AFTER_COMMIT && int == STATUS_COMMITTED ) { void ( ) ; } else if ( this . org.springframework.transaction.event.TransactionPhase == TransactionPhase . AFTER_ROLLBACK && int == STATUS_ROLLED_BACK ) { void ( ) ; } else if ( this . org.springframework.transaction.event.TransactionPhase == TransactionPhase . AFTER_COMPLETION ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . org.springframework.transaction.event.ApplicationListenerMethodAdapter . processEvent ( this . org.springframework.transaction.event.ApplicationEvent ) ; }  <METHOD_END>
