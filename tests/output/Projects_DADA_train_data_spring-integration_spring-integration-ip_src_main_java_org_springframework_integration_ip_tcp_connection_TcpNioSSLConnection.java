<METHOD_START> public void ( java.nio.channels.SocketChannel java.nio.channels.SocketChannel , boolean boolean , boolean boolean , ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher , java.lang.String java.lang.String , javax.net.ssl.SSLEngine javax.net.ssl.SSLEngine ) throws java.lang.Exception { super( java.nio.channels.SocketChannel , boolean , boolean , org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher , java.lang.String ); this . javax.net.ssl.SSLEngine = javax.net.ssl.SSLEngine ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.net.ssl.SSLSession javax.net.ssl.SSLSession ( ) { return this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLSession ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final java.nio.ByteBuffer java.nio.ByteBuffer ) throws java.io.IOException { Assert . notNull ( java.nio.ByteBuffer , STRING ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) + STRING + java.nio.ByteBuffer . int ( ) ) ; } javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult = null ; while ( ! this . boolean ) { try { javax.net.ssl.SSLEngineResult = javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer ) ; } catch ( javax.net.ssl.SSLHandshakeException javax.net.ssl.SSLHandshakeException ) { this . javax.net.ssl.SSLHandshakeException = javax.net.ssl.SSLHandshakeException ; this . java.util.concurrent.Semaphore . void ( ) ; throw javax.net.ssl.SSLHandshakeException ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( javax.net.ssl.SSLEngineResult ) + STRING + java.nio.ByteBuffer . int ( ) ) ; } } this . boolean = false ; if ( javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.Status ( ) == javax.net.ssl.SSLEngineResult.Status . javax.net.ssl.SSLEngineResult.Status ) { java.nio.ByteBuffer . java.nio.ByteBuffer ( ) ; } else { java.nio.ByteBuffer . java.nio.Buffer ( ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( javax.net.ssl.SSLEngineResult ) + STRING + java.nio.ByteBuffer . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer java.nio.ByteBuffer ) throws java.io.IOException { javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult = new javax.net.ssl.SSLEngineResult ( javax.net.ssl.SSLEngineResult.Status . javax.net.ssl.SSLEngineResult.Status , this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) , NUMBER , NUMBER ) ; javax.net.ssl.SSLEngineResult.HandshakeStatus javax.net.ssl.SSLEngineResult.HandshakeStatus = this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) ; switch ( javax.net.ssl.SSLEngineResult.HandshakeStatus ) { case javax.net.ssl.SSLEngineResult.HandshakeStatus : void ( ) ; break; case javax.net.ssl.SSLEngineResult.HandshakeStatus : case javax.net.ssl.SSLEngineResult.HandshakeStatus : case javax.net.ssl.SSLEngineResult.HandshakeStatus : this . java.nio.ByteBuffer . java.nio.Buffer ( ) ; javax.net.ssl.SSLEngineResult = this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer , this . java.nio.ByteBuffer ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( javax.net.ssl.SSLEngineResult ) ) ; } javax.net.ssl.SSLEngineResult.Status javax.net.ssl.SSLEngineResult.Status = javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.Status ( ) ; if ( javax.net.ssl.SSLEngineResult.Status == javax.net.ssl.SSLEngineResult.Status . javax.net.ssl.SSLEngineResult.Status ) { this . java.nio.ByteBuffer = this . java.nio.ByteBuffer ( this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLSession ( ) . int ( ) ) ; } if ( javax.net.ssl.SSLEngineResult . int ( ) > NUMBER ) { this . java.nio.ByteBuffer . java.nio.Buffer ( ) ; super. sendToPipe ( this . java.nio.ByteBuffer ) ; } break; case javax.net.ssl.SSLEngineResult.HandshakeStatus : if ( ! boolean ( ) ) { this . java.nio.ByteBuffer . java.nio.Buffer ( ) ; javax.net.ssl.SSLEngineResult = this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer , this . java.nio.ByteBuffer ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( javax.net.ssl.SSLEngineResult ) ) ; } if ( javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.Status ( ) == javax.net.ssl.SSLEngineResult.Status . javax.net.ssl.SSLEngineResult.Status ) { this . java.nio.ByteBuffer = this . java.nio.ByteBuffer ( this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLSession ( ) . int ( ) ) ; } else { this . java.nio.ByteBuffer . java.nio.Buffer ( ) ; org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream ( ) . void ( this . java.nio.ByteBuffer ) ; } } break; default: } switch ( javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) ) { case javax.net.ssl.SSLEngineResult.HandshakeStatus : boolean ( ) ; case javax.net.ssl.SSLEngineResult.HandshakeStatus : case javax.net.ssl.SSLEngineResult.HandshakeStatus : this . boolean = javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.Status ( ) == javax.net.ssl.SSLEngineResult.Status . javax.net.ssl.SSLEngineResult.Status || java.nio.ByteBuffer . int ( ) == NUMBER ; break; default: } return javax.net.ssl.SSLEngineResult ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( this . boolean ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + this . java.util.concurrent.Semaphore . int ( ) ) ; } this . java.util.concurrent.Semaphore . void ( ) ; return true ; } return false ; }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.Runnable java.lang.Runnable ; while ( ( java.lang.Runnable = this . javax.net.ssl.SSLEngine . java.lang.Runnable ( ) ) != null ) { java.lang.Runnable . void ( ) ; } }  <METHOD_END>
<METHOD_START> private javax.net.ssl.SSLEngineResult.HandshakeStatus javax.net.ssl.SSLEngineResult.HandshakeStatus ( javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult ) throws java.io.IOException { if ( javax.net.ssl.SSLEngineResult != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( javax.net.ssl.SSLEngineResult ) ) ; } if ( javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) == javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus ) { void ( ) ; } } javax.net.ssl.SSLEngineResult.HandshakeStatus javax.net.ssl.SSLEngineResult.HandshakeStatus = this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + javax.net.ssl.SSLEngineResult.HandshakeStatus ) ; } return javax.net.ssl.SSLEngineResult.HandshakeStatus ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { if ( this . java.nio.ByteBuffer == null ) { this . java.nio.ByteBuffer = java.nio.ByteBuffer ( NUMBER ) ; this . java.nio.ByteBuffer = java.nio.ByteBuffer ( NUMBER ) ; this . void ( ) ; } }  <METHOD_END>
<METHOD_START> private java.nio.ByteBuffer java.nio.ByteBuffer ( int int ) { if ( this . isUsingDirectBuffers ( ) ) { return java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ; } else { return java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { boolean boolean = ! this . isServer ( ) ; this . javax.net.ssl.SSLEngine . void ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.ip.tcp.connection.ChannelOutputStream org.springframework.integration.ip.tcp.connection.ChannelOutputStream ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream == null ) { this . org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream = new org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream ( super. getChannelOutputStream ( ) ) ; } return this . org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream ( ) { if ( this . org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream == null ) { return ( org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream ) this . org.springframework.integration.ip.tcp.connection.ChannelOutputStream ( ) ; } else { return this . org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection.SSLChannelOutputStream ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult ) { return javax.net.ssl.SSLEngineResult . java.lang.String ( ) . java.lang.String ( '\n' , ' ' ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. close ( ) ; this . java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> private void ( ChannelOutputStream org.springframework.integration.ip.tcp.connection.ChannelOutputStream ) { this . org.springframework.integration.ip.tcp.connection.ChannelOutputStream = org.springframework.integration.ip.tcp.connection.ChannelOutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected synchronized void void ( java.nio.ByteBuffer java.nio.ByteBuffer )				throws java.io.IOException { try { org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . boolean = true ; int int = java.nio.ByteBuffer . int ( ) ; while ( int > NUMBER ) { javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult = javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( javax.net.ssl.SSLEngineResult ) ) ; } if ( javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) == javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus ) { void ( ) ; if ( java.nio.ByteBuffer . int ( ) >= int ) { throw new MessagingException ( STRING + int ) ; } int = java.nio.ByteBuffer . int ( ) ; } else { void ( java.nio.ByteBuffer , javax.net.ssl.SSLEngineResult ) ; void ( ) ; } } } finally { org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . boolean = false ; } }  <METHOD_END>
<METHOD_START> private void void ( java.nio.ByteBuffer java.nio.ByteBuffer , javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult ) throws java.io.IOException { org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.util.concurrent.Semaphore . int ( ) ; javax.net.ssl.SSLEngineResult.HandshakeStatus javax.net.ssl.SSLEngineResult.HandshakeStatus = org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) ; while ( javax.net.ssl.SSLEngineResult.HandshakeStatus != javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus ) { void ( ) ; javax.net.ssl.SSLEngineResult.HandshakeStatus = javax.net.ssl.SSLEngineResult.HandshakeStatus ( javax.net.ssl.SSLEngineResult ) ; if ( javax.net.ssl.SSLEngineResult.HandshakeStatus == javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus ) { javax.net.ssl.SSLEngineResult.HandshakeStatus = javax.net.ssl.SSLEngineResult.HandshakeStatus ( javax.net.ssl.SSLEngineResult , javax.net.ssl.SSLEngineResult.HandshakeStatus ) ; } if ( javax.net.ssl.SSLEngineResult.HandshakeStatus == javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus || javax.net.ssl.SSLEngineResult.HandshakeStatus == javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus || javax.net.ssl.SSLEngineResult.HandshakeStatus == javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus ) { javax.net.ssl.SSLEngineResult = javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer ) ; javax.net.ssl.SSLEngineResult.HandshakeStatus = javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.HandshakeStatus ( ) ; if ( javax.net.ssl.SSLEngineResult.HandshakeStatus == javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus || javax.net.ssl.SSLEngineResult.HandshakeStatus == javax.net.ssl.SSLEngineResult.HandshakeStatus . javax.net.ssl.SSLEngineResult.HandshakeStatus ) { break; } } else { logger . debug ( javax.net.ssl.SSLEngineResult.HandshakeStatus ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.nio.ByteBuffer . java.nio.Buffer ( ) ; void ( org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.nio.ByteBuffer ) ; org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.nio.ByteBuffer . java.nio.Buffer ( ) ; }  <METHOD_END>
<METHOD_START> private javax.net.ssl.SSLEngineResult.HandshakeStatus javax.net.ssl.SSLEngineResult.HandshakeStatus ( javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult , javax.net.ssl.SSLEngineResult.HandshakeStatus javax.net.ssl.SSLEngineResult.HandshakeStatus ) throws java.io.IOException { try { logger . trace ( STRING ) ; if ( ! org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.util.concurrent.Semaphore . boolean ( org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { throw new MessagingException ( STRING ) ; } else { if ( org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . javax.net.ssl.SSLHandshakeException != null ) { throw org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . javax.net.ssl.SSLHandshakeException ; } else if ( ! isOpen ( ) ) { throw new java.io.IOException ( STRING ) ; } } logger . trace ( STRING ) ; javax.net.ssl.SSLEngineResult.HandshakeStatus = javax.net.ssl.SSLEngineResult.HandshakeStatus ( javax.net.ssl.SSLEngineResult ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new MessagingException ( STRING ) ; } return javax.net.ssl.SSLEngineResult.HandshakeStatus ; }  <METHOD_END>
<METHOD_START> private javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer java.nio.ByteBuffer )				throws javax.net.ssl.SSLException , java.io.IOException { org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.nio.ByteBuffer . java.nio.Buffer ( ) ; javax.net.ssl.SSLEngineResult javax.net.ssl.SSLEngineResult = org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer , org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.nio.ByteBuffer ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ( javax.net.ssl.SSLEngineResult ) + STRING + java.nio.ByteBuffer . int ( ) + STRING + java.nio.ByteBuffer . int ( ) ) ; } if ( javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.Status ( ) == javax.net.ssl.SSLEngineResult . javax.net.ssl.SSLEngineResult.Status . javax.net.ssl.SSLEngineResult.Status ) { org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.nio.ByteBuffer = java.nio.ByteBuffer ( org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLSession ( ) . int ( ) ) ; javax.net.ssl.SSLEngineResult = org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . javax.net.ssl.SSLEngine . javax.net.ssl.SSLEngineResult ( java.nio.ByteBuffer , org.springframework.integration.ip.tcp.connection.TcpNioSSLConnection .this . java.nio.ByteBuffer ) ; } return javax.net.ssl.SSLEngineResult ; }  <METHOD_END>
<METHOD_START> void void ( java.nio.ByteBuffer java.nio.ByteBuffer ) throws java.io.IOException { this . org.springframework.integration.ip.tcp.connection.ChannelOutputStream . doWrite ( java.nio.ByteBuffer ) ; }  <METHOD_END>
