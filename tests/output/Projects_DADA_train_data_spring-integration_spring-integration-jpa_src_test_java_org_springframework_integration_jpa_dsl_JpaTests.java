<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.integration.jpa.dsl.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( ) . setType ( EmbeddedDatabaseType . H2 ) . addScript ( STRING ) . addScript ( STRING ) . addScript ( STRING ) . ignoreFailedDrops ( true ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.jpa.dsl.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.jpa.dsl.Message<?> = this . org.springframework.integration.jpa.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jpa.dsl.Message<> ) ; assertThat ( org.springframework.integration.jpa.dsl.Message<> . getPayload ( ) , instanceOf ( StudentDomain .class ) ) ; StudentDomain org.springframework.integration.jpa.dsl.StudentDomain = ( StudentDomain ) org.springframework.integration.jpa.dsl.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.jpa.dsl.StudentDomain . getFirstName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcTemplate org.springframework.integration.jpa.dsl.JdbcTemplate = new JdbcTemplate ( org.springframework.integration.jpa.dsl.EmbeddedDatabase ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.jpa.dsl.JdbcTemplate . queryForList ( STRING ) ; assertNotNull ( java.util.List<> ) ; assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER ) ; StudentDomain org.springframework.integration.jpa.dsl.StudentDomain = new StudentDomain ( ) . withFirstName ( STRING ) . withLastName ( STRING ) . withGender ( Gender . MALE ) . withDateOfBirth ( java.util.Calendar . java.util.Date ( ) ) . withLastUpdated ( new java.util.Date ( ) ) ; assertNull ( org.springframework.integration.jpa.dsl.StudentDomain . getRollNumber ( ) ) ; this . org.springframework.integration.jpa.dsl.MessageChannel . send ( MessageBuilder . withPayload ( org.springframework.integration.jpa.dsl.StudentDomain ) . build ( ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.jpa.dsl.JdbcTemplate . queryForList ( STRING ) ; assertNotNull ( java.util.List<> ) ; assertTrue ( java.util.List<> . int ( ) == NUMBER ) ; assertNotNull ( org.springframework.integration.jpa.dsl.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( NUMBER , NUMBER , NUMBER ) ; StudentDomain org.springframework.integration.jpa.dsl.StudentDomain = new StudentDomain ( ) . withFirstName ( STRING ) . withLastName ( STRING ) . withGender ( Gender . MALE ) . withDateOfBirth ( java.util.Calendar . java.util.Date ( ) ) . withLastUpdated ( new java.util.Date ( ) ) ; assertNull ( org.springframework.integration.jpa.dsl.StudentDomain . getRollNumber ( ) ) ; this . org.springframework.integration.jpa.dsl.MessageChannel . send ( MessageBuilder . withPayload ( org.springframework.integration.jpa.dsl.StudentDomain ) . build ( ) ) ; Message < ? > org.springframework.integration.jpa.dsl.Message<?> = this . org.springframework.integration.jpa.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jpa.dsl.Message<> ) ; StudentDomain org.springframework.integration.jpa.dsl.StudentDomain = ( StudentDomain ) org.springframework.integration.jpa.dsl.Message<> . getPayload ( ) ; assertEquals ( org.springframework.integration.jpa.dsl.StudentDomain . getFirstName ( ) , org.springframework.integration.jpa.dsl.StudentDomain . getFirstName ( ) ) ; assertNotNull ( org.springframework.integration.jpa.dsl.StudentDomain . getRollNumber ( ) ) ; assertNull ( org.springframework.integration.jpa.dsl.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.jpa.dsl.MessageChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; Message < ? > org.springframework.integration.jpa.dsl.Message<?> = this . org.springframework.integration.jpa.dsl.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jpa.dsl.Message<> ) ; assertThat ( org.springframework.integration.jpa.dsl.Message<> . getPayload ( ) , instanceOf ( StudentDomain .class ) ) ; StudentDomain org.springframework.integration.jpa.dsl.StudentDomain = ( StudentDomain ) org.springframework.integration.jpa.dsl.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.jpa.dsl.StudentDomain . getFirstName ( ) ) ; assertEquals ( Gender . FEMALE , org.springframework.integration.jpa.dsl.StudentDomain . getGender ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jpa.dsl.JpaVendorAdapter org.springframework.integration.jpa.dsl.JpaVendorAdapter ( ) { AbstractJpaVendorAdapter org.springframework.integration.jpa.dsl.AbstractJpaVendorAdapter = new HibernateJpaVendorAdapter ( ) ; org.springframework.integration.jpa.dsl.AbstractJpaVendorAdapter . setShowSql ( true ) ; org.springframework.integration.jpa.dsl.AbstractJpaVendorAdapter . setDatabase ( Database . H2 ) ; org.springframework.integration.jpa.dsl.AbstractJpaVendorAdapter . setGenerateDdl ( true ) ; return org.springframework.integration.jpa.dsl.AbstractJpaVendorAdapter ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jpa.dsl.LocalContainerEntityManagerFactoryBean org.springframework.integration.jpa.dsl.LocalContainerEntityManagerFactoryBean ( ) { LocalContainerEntityManagerFactoryBean org.springframework.integration.jpa.dsl.LocalContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean ( ) ; org.springframework.integration.jpa.dsl.LocalContainerEntityManagerFactoryBean . setDataSource ( org.springframework.integration.jpa.dsl.EmbeddedDatabase ) ; org.springframework.integration.jpa.dsl.LocalContainerEntityManagerFactoryBean . setPersistenceUnitName ( STRING ) ; org.springframework.integration.jpa.dsl.LocalContainerEntityManagerFactoryBean . setJpaVendorAdapter ( org.springframework.integration.jpa.dsl.JpaVendorAdapter ( ) ) ; return org.springframework.integration.jpa.dsl.LocalContainerEntityManagerFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jpa.dsl.PlatformTransactionManager org.springframework.integration.jpa.dsl.PlatformTransactionManager ( EntityManagerFactory org.springframework.integration.jpa.dsl.EntityManagerFactory ) { JpaTransactionManager org.springframework.integration.jpa.dsl.JpaTransactionManager = new JpaTransactionManager ( org.springframework.integration.jpa.dsl.EntityManagerFactory ) ; org.springframework.integration.jpa.dsl.JpaTransactionManager . setDataSource ( org.springframework.integration.jpa.dsl.EmbeddedDatabase ) ; return org.springframework.integration.jpa.dsl.JpaTransactionManager ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jpa.dsl.IntegrationFlow org.springframework.integration.jpa.dsl.IntegrationFlow ( EntityManagerFactory org.springframework.integration.jpa.dsl.EntityManagerFactory ) { return IntegrationFlows . from ( Jpa . inboundAdapter ( org.springframework.integration.jpa.dsl.EntityManagerFactory ) . entityClass ( StudentDomain .class ) . maxResults ( NUMBER ) . expectSingleResult ( true ) , e -> e . poller ( p -> p . trigger ( new OnlyOnceTrigger ( ) ) ) ) . channel ( c -> c . queue ( STRING ) ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jpa.dsl.IntegrationFlow org.springframework.integration.jpa.dsl.IntegrationFlow ( EntityManagerFactory org.springframework.integration.jpa.dsl.EntityManagerFactory ) { return f -> f . handle ( Jpa . outboundAdapter ( entityManagerFactory ) . entityClass ( StudentDomain .class ) . persistMode ( PersistMode . PERSIST ) , e -> e . transactional ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jpa.dsl.IntegrationFlow org.springframework.integration.jpa.dsl.IntegrationFlow ( EntityManagerFactory org.springframework.integration.jpa.dsl.EntityManagerFactory ) { return f -> f . handle ( Jpa . updatingGateway ( entityManagerFactory ) , e -> e . transactional ( true ) ) . channel ( c -> c . queue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.jpa.dsl.IntegrationFlow org.springframework.integration.jpa.dsl.IntegrationFlow ( EntityManagerFactory org.springframework.integration.jpa.dsl.EntityManagerFactory ) { return f -> f . handle ( Jpa . retrievingGateway ( entityManagerFactory ) . jpaQuery ( STRING ) . expectSingleResult ( true ) . parameterExpression ( STRING , STRING ) ) . channel ( c -> c . queue ( STRING ) ) ; }  <METHOD_END>
