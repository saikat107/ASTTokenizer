<METHOD_START> @ Before @ After public void void ( ) { Restarter . clearInstance ( ) ; java.lang.System . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new RestartApplicationListener ( ) . getOrder ( ) ) . isEqualTo ( Ordered . HIGHEST_PRECEDENCE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; assertThat ( ReflectionTestUtils . getField ( Restarter . getInstance ( ) , STRING ) ) . isEqualTo ( java.lang.String[] ) ; assertThat ( Restarter . getInstance ( ) . isFinished ( ) ) . isTrue ( ) ; assertThat ( ( java.util.List<?> < ? > ) ReflectionTestUtils . getField ( Restarter . getInstance ( ) , STRING ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; assertThat ( ReflectionTestUtils . getField ( Restarter . getInstance ( ) , STRING ) ) . isEqualTo ( java.lang.String[] ) ; assertThat ( Restarter . getInstance ( ) . isFinished ( ) ) . isTrue ( ) ; assertThat ( ( java.util.List<?> < ? > ) ReflectionTestUtils . getField ( Restarter . getInstance ( ) , STRING ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( java.lang.String , STRING ) ; void ( false ) ; assertThat ( ReflectionTestUtils . getField ( Restarter . getInstance ( ) , STRING ) ) . isEqualTo ( false ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { Restarter . clearInstance ( ) ; RestartApplicationListener org.springframework.boot.devtools.restart.RestartApplicationListener = new RestartApplicationListener ( ) ; SpringApplication org.springframework.boot.devtools.restart.SpringApplication = new SpringApplication ( ) ; ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext = mock ( ConfigurableApplicationContext .class ) ; org.springframework.boot.devtools.restart.RestartApplicationListener . onApplicationEvent ( new ApplicationStartingEvent ( org.springframework.boot.devtools.restart.SpringApplication , java.lang.String[] ) ) ; assertThat ( Restarter . getInstance ( ) ) . isNotEqualTo ( nullValue ( ) ) ; assertThat ( Restarter . getInstance ( ) . isFinished ( ) ) . isFalse ( ) ; org.springframework.boot.devtools.restart.RestartApplicationListener . onApplicationEvent ( new ApplicationPreparedEvent ( org.springframework.boot.devtools.restart.SpringApplication , java.lang.String[] , org.springframework.boot.devtools.restart.ConfigurableApplicationContext ) ) ; if ( boolean ) { org.springframework.boot.devtools.restart.RestartApplicationListener . onApplicationEvent ( new ApplicationFailedEvent ( org.springframework.boot.devtools.restart.SpringApplication , java.lang.String[] , org.springframework.boot.devtools.restart.ConfigurableApplicationContext , new java.lang.RuntimeException ( ) ) ) ; } else { org.springframework.boot.devtools.restart.RestartApplicationListener . onApplicationEvent ( new ApplicationReadyEvent ( org.springframework.boot.devtools.restart.SpringApplication , java.lang.String[] , org.springframework.boot.devtools.restart.ConfigurableApplicationContext ) ) ; } }  <METHOD_END>
