<METHOD_START> public org.springframework.web.method.support.HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ( HandlerMethodArgumentResolver org.springframework.web.method.support.HandlerMethodArgumentResolver ) { this . java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> . add ( org.springframework.web.method.support.HandlerMethodArgumentResolver ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.support.HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ( HandlerMethodArgumentResolver ... org.springframework.web.method.support.HandlerMethodArgumentResolver[] ) { if ( org.springframework.web.method.support.HandlerMethodArgumentResolver[] != null ) { for ( HandlerMethodArgumentResolver org.springframework.web.method.support.HandlerMethodArgumentResolver : org.springframework.web.method.support.HandlerMethodArgumentResolver[] ) { this . java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> . add ( org.springframework.web.method.support.HandlerMethodArgumentResolver ) ; } } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.support.HandlerMethodArgumentResolverComposite org.springframework.web.method.support.HandlerMethodArgumentResolverComposite ( java.util.List<? extends org.springframework.web.method.support.HandlerMethodArgumentResolver> < ? extends HandlerMethodArgumentResolver > java.util.List<? extends org.springframework.web.method.support.HandlerMethodArgumentResolver> ) { if ( java.util.List<> != null ) { for ( HandlerMethodArgumentResolver org.springframework.web.method.support.HandlerMethodArgumentResolver : java.util.List<> ) { this . java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> . add ( org.springframework.web.method.support.HandlerMethodArgumentResolver ) ; } } return this ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> ( ) { return java.util.Collections . java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> ( this . java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.method.support.MethodParameter ) { return ( org.springframework.web.method.support.HandlerMethodArgumentResolver ( org.springframework.web.method.support.MethodParameter ) != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.method.support.MethodParameter , ModelAndViewContainer org.springframework.web.method.support.ModelAndViewContainer , NativeWebRequest org.springframework.web.method.support.NativeWebRequest , WebDataBinderFactory org.springframework.web.method.support.WebDataBinderFactory ) throws java.lang.Exception { HandlerMethodArgumentResolver org.springframework.web.method.support.HandlerMethodArgumentResolver = org.springframework.web.method.support.HandlerMethodArgumentResolver ( org.springframework.web.method.support.MethodParameter ) ; if ( org.springframework.web.method.support.HandlerMethodArgumentResolver == null ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.method.support.MethodParameter . getParameterType ( ) . getName ( ) + STRING ) ; } return org.springframework.web.method.support.HandlerMethodArgumentResolver . resolveArgument ( org.springframework.web.method.support.MethodParameter , org.springframework.web.method.support.ModelAndViewContainer , org.springframework.web.method.support.NativeWebRequest , org.springframework.web.method.support.WebDataBinderFactory ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.method.support.HandlerMethodArgumentResolver org.springframework.web.method.support.HandlerMethodArgumentResolver ( MethodParameter org.springframework.web.method.support.MethodParameter ) { HandlerMethodArgumentResolver org.springframework.web.method.support.HandlerMethodArgumentResolver = this . java.util.Map<org.springframework.web.method.support.MethodParameter,org.springframework.web.method.support.HandlerMethodArgumentResolver> . get ( org.springframework.web.method.support.MethodParameter ) ; if ( org.springframework.web.method.support.HandlerMethodArgumentResolver == null ) { for ( HandlerMethodArgumentResolver org.springframework.web.method.support.HandlerMethodArgumentResolver : this . java.util.List<org.springframework.web.method.support.HandlerMethodArgumentResolver> ) { if ( org.springframework.web.method.support.Log . isTraceEnabled ( ) ) { org.springframework.web.method.support.Log . trace ( STRING + org.springframework.web.method.support.HandlerMethodArgumentResolver + STRING + org.springframework.web.method.support.MethodParameter . getGenericParameterType ( ) + STRING ) ; } if ( org.springframework.web.method.support.HandlerMethodArgumentResolver . supportsParameter ( org.springframework.web.method.support.MethodParameter ) ) { org.springframework.web.method.support.HandlerMethodArgumentResolver = org.springframework.web.method.support.HandlerMethodArgumentResolver ; this . java.util.Map<org.springframework.web.method.support.MethodParameter,org.springframework.web.method.support.HandlerMethodArgumentResolver> . put ( org.springframework.web.method.support.MethodParameter , org.springframework.web.method.support.HandlerMethodArgumentResolver ) ; break; } } } return org.springframework.web.method.support.HandlerMethodArgumentResolver ; }  <METHOD_END>
