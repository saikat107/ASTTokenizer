<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveTypeArgument ( java.lang.Class<? extends org.springframework.context.annotation.AdviceModeImportSelector> ( ) , org.springframework.context.annotation.AdviceModeImportSelector .class ) ; AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.AnnotationMetadata , java.lang.Class<> ) ; if ( org.springframework.context.annotation.AnnotationAttributes == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) ) ; } AdviceMode org.springframework.context.annotation.AdviceMode = org.springframework.context.annotation.AnnotationAttributes . getEnum ( this . java.lang.String ( ) ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.context.annotation.AdviceMode ) ; if ( java.lang.String[] == null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.context.annotation.AdviceMode ) ) ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String [] java.lang.String[] ( AdviceMode org.springframework.context.annotation.AdviceMode );  <METHOD_END>
