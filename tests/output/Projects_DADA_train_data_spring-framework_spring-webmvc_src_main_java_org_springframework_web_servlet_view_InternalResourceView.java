<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , boolean boolean ) { super( java.lang.String ); this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) throws java.lang.Exception { exposeModelAsRequestAttributes ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.HttpServletRequest ) ; void ( org.springframework.web.servlet.view.HttpServletRequest ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; RequestDispatcher org.springframework.web.servlet.view.RequestDispatcher = org.springframework.web.servlet.view.RequestDispatcher ( org.springframework.web.servlet.view.HttpServletRequest , java.lang.String ) ; if ( org.springframework.web.servlet.view.RequestDispatcher == null ) { throw new ServletException ( STRING + getUrl ( ) + STRING ) ; } if ( boolean ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ) { org.springframework.web.servlet.view.HttpServletResponse . setContentType ( getContentType ( ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getUrl ( ) + STRING + getBeanName ( ) + STRING ) ; } org.springframework.web.servlet.view.RequestDispatcher . include ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getUrl ( ) + STRING + getBeanName ( ) + STRING ) ; } org.springframework.web.servlet.view.RequestDispatcher . forward ( org.springframework.web.servlet.view.HttpServletRequest , org.springframework.web.servlet.view.HttpServletResponse ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest ) throws java.lang.Exception {	}  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse )			throws java.lang.Exception { java.lang.String java.lang.String = getUrl ( ) ; if ( this . boolean ) { java.lang.String java.lang.String = org.springframework.web.servlet.view.HttpServletRequest . getRequestURI ( ) ; if ( java.lang.String . boolean ( STRING ) ? java.lang.String . boolean ( java.lang.String ) : java.lang.String . boolean ( StringUtils . applyRelativePath ( java.lang.String , java.lang.String ) ) ) { throw new ServletException ( STRING + java.lang.String + STRING + STRING + java.lang.String + STRING + STRING ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.view.RequestDispatcher org.springframework.web.servlet.view.RequestDispatcher ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , java.lang.String java.lang.String ) { return org.springframework.web.servlet.view.HttpServletRequest . getRequestDispatcher ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) { return ( this . boolean || WebUtils . isIncludeRequest ( org.springframework.web.servlet.view.HttpServletRequest ) || org.springframework.web.servlet.view.HttpServletResponse . isCommitted ( ) ) ; }  <METHOD_END>
