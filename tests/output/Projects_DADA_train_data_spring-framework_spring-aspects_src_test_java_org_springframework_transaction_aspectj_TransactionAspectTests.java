<METHOD_START> @ Before public void void ( ) { AnnotationTransactionAspect . aspectOf ( ) . setTransactionManager ( org.springframework.transaction.aspectj.CallCountingTransactionManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; org.springframework.transaction.aspectj.TransactionalAnnotationOnlyOnClassWithNoInterface . echo ( null ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; org.springframework.transaction.aspectj.ClassWithProtectedAnnotatedMember . doInTransaction ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; org.springframework.transaction.aspectj.ClassWithPrivateAnnotatedMember . doSomething ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; org.springframework.transaction.aspectj.TransactionalAnnotationOnlyOnClassWithNoInterface . nonTransactionalMethod ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; org.springframework.transaction.aspectj.MethodAnnotationOnClassWithNoInterface . echo ( null ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; new org.springframework.transaction.aspectj.TransactionAspectTests.NotTransactional ( ) . void ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; try { void ( new org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return org.springframework.transaction.aspectj.TransactionalAnnotationOnlyOnClassWithNoInterface . echo ( java.lang.Exception ) ; } } , false ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertSame ( java.lang.Exception , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return org.springframework.transaction.aspectj.TransactionalAnnotationOnlyOnClassWithNoInterface . echo ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; try { void ( new org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return org.springframework.transaction.aspectj.TransactionalAnnotationOnlyOnClassWithNoInterface . echo ( java.lang.RuntimeException ) ; } } , true ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertSame ( java.lang.RuntimeException , java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return org.springframework.transaction.aspectj.TransactionalAnnotationOnlyOnClassWithNoInterface . echo ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; try { void ( new org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return new org.springframework.transaction.aspectj.TransactionAspectTests.SubclassOfClassWithTransactionalAnnotation ( ) . echo ( java.lang.Exception ) ; } } , false ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertSame ( java.lang.Exception , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return new org.springframework.transaction.aspectj.TransactionAspectTests.SubclassOfClassWithTransactionalAnnotation ( ) . echo ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; try { void ( new org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return new org.springframework.transaction.aspectj.TransactionAspectTests.SubclassOfClassWithTransactionalMethodAnnotation ( ) . echo ( java.lang.Exception ) ; } } , false ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertSame ( java.lang.Exception , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return new org.springframework.transaction.aspectj.TransactionAspectTests.SubclassOfClassWithTransactionalMethodAnnotation ( ) . echo ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; void ( new org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return new org.springframework.transaction.aspectj.TransactionAspectTests.ImplementsAnnotatedInterface ( ) . java.lang.Object ( java.lang.Exception ) ; } } , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return new org.springframework.transaction.aspectj.TransactionAspectTests.ImplementsAnnotatedInterface ( ) . java.lang.Object ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationTransactionAttributeSource org.springframework.transaction.aspectj.AnnotationTransactionAttributeSource = new AnnotationTransactionAttributeSource ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.transaction.aspectj.TransactionAspectTests.ImplementsAnnotatedInterface .class . java.lang.reflect.Method ( STRING , java.lang.Throwable .class ) ; TransactionAttribute org.springframework.transaction.aspectj.TransactionAttribute = org.springframework.transaction.aspectj.AnnotationTransactionAttributeSource . getTransactionAttribute ( java.lang.reflect.Method , org.springframework.transaction.aspectj.TransactionAspectTests.ImplementsAnnotatedInterface .class ) ; assertNull ( org.springframework.transaction.aspectj.TransactionAttribute ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.Exception java.lang.Exception = new java.lang.RuntimeException ( ) ; void ( new org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return new org.springframework.transaction.aspectj.TransactionAspectTests.ImplementsAnnotatedInterface ( ) . java.lang.Object ( java.lang.Exception ) ; } } , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Throwable { return new org.springframework.transaction.aspectj.TransactionAspectTests.ImplementsAnnotatedInterface ( ) . java.lang.Object ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback , boolean boolean ) throws java.lang.Throwable { org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; try { org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback . java.lang.Object ( ) ; } finally { assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; assertEquals ( boolean ? NUMBER : NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . commits ) ; assertEquals ( boolean ? NUMBER : NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . rollbacks ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback , java.lang.Throwable java.lang.Throwable ) throws java.lang.Throwable { org.springframework.transaction.aspectj.CallCountingTransactionManager . clear ( ) ; assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; try { org.springframework.transaction.aspectj.TransactionAspectTests.TransactionOperationCallback . java.lang.Object ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable == null ) { fail ( STRING + java.lang.Throwable ) ; } assertSame ( java.lang.Throwable , java.lang.Throwable ) ; } finally { assertEquals ( NUMBER , org.springframework.transaction.aspectj.CallCountingTransactionManager . begun ) ; } }  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( ) java.lang.Throwable ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Throwable java.lang.Throwable ) throws java.lang.Throwable { if ( java.lang.Throwable != null ) { throw java.lang.Throwable ; } return java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
