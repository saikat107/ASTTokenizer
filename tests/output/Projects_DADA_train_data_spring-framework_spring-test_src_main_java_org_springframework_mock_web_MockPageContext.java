<METHOD_START> public void ( ) { this( null , null , null , null ); }  <METHOD_END>
<METHOD_START> public void ( ServletContext org.springframework.mock.web.ServletContext ) { this( org.springframework.mock.web.ServletContext , null , null , null ); }  <METHOD_END>
<METHOD_START> public void ( ServletContext org.springframework.mock.web.ServletContext , HttpServletRequest org.springframework.mock.web.HttpServletRequest ) { this( org.springframework.mock.web.ServletContext , org.springframework.mock.web.HttpServletRequest , null , null ); }  <METHOD_END>
<METHOD_START> public void ( ServletContext org.springframework.mock.web.ServletContext , HttpServletRequest org.springframework.mock.web.HttpServletRequest , HttpServletResponse org.springframework.mock.web.HttpServletResponse ) { this( org.springframework.mock.web.ServletContext , org.springframework.mock.web.HttpServletRequest , org.springframework.mock.web.HttpServletResponse , null ); }  <METHOD_END>
<METHOD_START> public void ( ServletContext org.springframework.mock.web.ServletContext , HttpServletRequest org.springframework.mock.web.HttpServletRequest , HttpServletResponse org.springframework.mock.web.HttpServletResponse , ServletConfig org.springframework.mock.web.ServletConfig ) { this . org.springframework.mock.web.ServletContext = ( org.springframework.mock.web.ServletContext != null ? org.springframework.mock.web.ServletContext : new MockServletContext ( ) ) ; this . org.springframework.mock.web.HttpServletRequest = ( org.springframework.mock.web.HttpServletRequest != null ? org.springframework.mock.web.HttpServletRequest : new MockHttpServletRequest ( org.springframework.mock.web.ServletContext ) ) ; this . org.springframework.mock.web.HttpServletResponse = ( org.springframework.mock.web.HttpServletResponse != null ? org.springframework.mock.web.HttpServletResponse : new MockHttpServletResponse ( ) ) ; this . org.springframework.mock.web.ServletConfig = ( org.springframework.mock.web.ServletConfig != null ? org.springframework.mock.web.ServletConfig : new MockServletConfig ( org.springframework.mock.web.ServletContext ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Servlet org.springframework.mock.web.Servlet , ServletRequest org.springframework.mock.web.ServletRequest , ServletResponse org.springframework.mock.web.ServletResponse , java.lang.String java.lang.String , boolean boolean , int int , boolean boolean ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.String , STRING ) ; if ( java.lang.Object != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , int int ) { Assert . notNull ( java.lang.String , STRING ) ; switch ( int ) { case PAGE_SCOPE : void ( java.lang.String , java.lang.Object ) ; break; case REQUEST_SCOPE : this . org.springframework.mock.web.HttpServletRequest . setAttribute ( java.lang.String , java.lang.Object ) ; break; case SESSION_SCOPE : this . org.springframework.mock.web.HttpServletRequest . getSession ( ) . setAttribute ( java.lang.String , java.lang.Object ) ; break; case APPLICATION_SCOPE : this . org.springframework.mock.web.ServletContext . setAttribute ( java.lang.String , java.lang.Object ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , int int ) { Assert . notNull ( java.lang.String , STRING ) ; switch ( int ) { case PAGE_SCOPE : return java.lang.Object ( java.lang.String ) ; case REQUEST_SCOPE : return this . org.springframework.mock.web.HttpServletRequest . getAttribute ( java.lang.String ) ; case SESSION_SCOPE : HttpSession org.springframework.mock.web.HttpSession = this . org.springframework.mock.web.HttpServletRequest . getSession ( false ) ; return ( org.springframework.mock.web.HttpSession != null ? org.springframework.mock.web.HttpSession . getAttribute ( java.lang.String ) : null ) ; case APPLICATION_SCOPE : return this . org.springframework.mock.web.ServletContext . getAttribute ( java.lang.String ) ; default: throw new java.lang.IllegalArgumentException ( STRING + int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = java.lang.Object ( java.lang.String , REQUEST_SCOPE ) ; if ( java.lang.Object == null ) { java.lang.Object = java.lang.Object ( java.lang.String , SESSION_SCOPE ) ; if ( java.lang.Object == null ) { java.lang.Object = java.lang.Object ( java.lang.String , APPLICATION_SCOPE ) ; } } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . void ( java.lang.String , PageContext . PAGE_SCOPE ) ; this . void ( java.lang.String , PageContext . REQUEST_SCOPE ) ; this . void ( java.lang.String , PageContext . SESSION_SCOPE ) ; this . void ( java.lang.String , PageContext . APPLICATION_SCOPE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int ) { Assert . notNull ( java.lang.String , STRING ) ; switch ( int ) { case PAGE_SCOPE : this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; break; case REQUEST_SCOPE : this . org.springframework.mock.web.HttpServletRequest . removeAttribute ( java.lang.String ) ; break; case SESSION_SCOPE : this . org.springframework.mock.web.HttpServletRequest . getSession ( ) . removeAttribute ( java.lang.String ) ; break; case APPLICATION_SCOPE : this . org.springframework.mock.web.ServletContext . removeAttribute ( java.lang.String ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.String java.lang.String ) { if ( java.lang.Object ( java.lang.String ) != null ) { return PAGE_SCOPE ; } else if ( java.lang.Object ( java.lang.String , REQUEST_SCOPE ) != null ) { return REQUEST_SCOPE ; } else if ( java.lang.Object ( java.lang.String , SESSION_SCOPE ) != null ) { return SESSION_SCOPE ; } else if ( java.lang.Object ( java.lang.String , APPLICATION_SCOPE ) != null ) { return APPLICATION_SCOPE ; } else { return NUMBER ; } }  <METHOD_END>
<METHOD_START> public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { return java.util.Collections . java.util.Enumeration<java.lang.String> ( new java.util.LinkedHashSet<java.lang.String> <> ( this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( int int ) { switch ( int ) { case PAGE_SCOPE : return java.util.Enumeration<java.lang.String> ( ) ; case REQUEST_SCOPE : return this . org.springframework.mock.web.HttpServletRequest . getAttributeNames ( ) ; case SESSION_SCOPE : HttpSession org.springframework.mock.web.HttpSession = this . org.springframework.mock.web.HttpServletRequest . getSession ( false ) ; return ( org.springframework.mock.web.HttpSession != null ? org.springframework.mock.web.HttpSession . getAttributeNames ( ) : null ) ; case APPLICATION_SCOPE : return this . org.springframework.mock.web.ServletContext . getAttributeNames ( ) ; default: throw new java.lang.IllegalArgumentException ( STRING + int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.JspWriter org.springframework.mock.web.JspWriter ( ) { if ( this . org.springframework.mock.web.JspWriter == null ) { this . org.springframework.mock.web.JspWriter = new MockJspWriter ( this . org.springframework.mock.web.HttpServletResponse ) ; } return this . org.springframework.mock.web.JspWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public javax . javax.servlet . javax.servlet . javax.servlet . javax.servlet.jsp.el.ExpressionEvaluator javax.servlet.jsp.el.ExpressionEvaluator ( ) { return new MockExpressionEvaluator ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.ELContext org.springframework.mock.web.ELContext ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.Deprecated public javax . javax.servlet . javax.servlet . javax.servlet . javax.servlet.jsp.el.VariableResolver javax.servlet.jsp.el.VariableResolver ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.HttpSession org.springframework.mock.web.HttpSession ( ) { return this . org.springframework.mock.web.HttpServletRequest . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.ServletRequest org.springframework.mock.web.ServletRequest ( ) { return this . org.springframework.mock.web.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.ServletResponse org.springframework.mock.web.ServletResponse ( ) { return this . org.springframework.mock.web.HttpServletResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Exception java.lang.Exception ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.ServletConfig org.springframework.mock.web.ServletConfig ( ) { return this . org.springframework.mock.web.ServletConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.ServletContext org.springframework.mock.web.ServletContext ( ) { return this . org.springframework.mock.web.ServletContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.mock.web.ServletException , java.io.IOException { this . org.springframework.mock.web.HttpServletRequest . getRequestDispatcher ( java.lang.String ) . forward ( this . org.springframework.mock.web.HttpServletRequest , this . org.springframework.mock.web.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.mock.web.ServletException , java.io.IOException { this . org.springframework.mock.web.HttpServletRequest . getRequestDispatcher ( java.lang.String ) . include ( this . org.springframework.mock.web.HttpServletRequest , this . org.springframework.mock.web.HttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , boolean boolean ) throws org.springframework.mock.web.ServletException , java.io.IOException { this . org.springframework.mock.web.HttpServletRequest . getRequestDispatcher ( java.lang.String ) . include ( this . org.springframework.mock.web.HttpServletRequest , this . org.springframework.mock.web.HttpServletResponse ) ; if ( boolean ) { this . org.springframework.mock.web.HttpServletResponse . flushBuffer ( ) ; } }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { Assert . state ( this . org.springframework.mock.web.HttpServletResponse instanceof MockHttpServletResponse , STRING ) ; return ( ( MockHttpServletResponse ) this . org.springframework.mock.web.HttpServletResponse ) . getContentAsByteArray ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) java.io.UnsupportedEncodingException { Assert . state ( this . org.springframework.mock.web.HttpServletResponse instanceof MockHttpServletResponse , STRING ) ; return ( ( MockHttpServletResponse ) this . org.springframework.mock.web.HttpServletResponse ) . getContentAsString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Exception java.lang.Exception ) throws org.springframework.mock.web.ServletException , java.io.IOException { throw new ServletException ( STRING , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) throws org.springframework.mock.web.ServletException , java.io.IOException { throw new ServletException ( STRING , java.lang.Throwable ) ; }  <METHOD_END>
