<METHOD_START> public void ( Region < java.lang.Object , java.lang.Object > org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ) { this . org.springframework.integration.gemfire.store.Cache = null ; this . org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> = org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { if ( this . org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> != null ) { return; } try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } RegionAttributesFactoryBean org.springframework.integration.gemfire.store.RegionAttributesFactoryBean = new RegionAttributesFactoryBean ( ) ; org.springframework.integration.gemfire.store.RegionAttributesFactoryBean . setIgnoreJTA ( this . boolean ) ; org.springframework.integration.gemfire.store.RegionAttributesFactoryBean . afterPropertiesSet ( ) ; RegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.integration.gemfire.store.RegionFactoryBean<java.lang.Object,java.lang.Object> = new RegionFactoryBean < java.lang.Object , java.lang.Object > ( ) {			} ; org.springframework.integration.gemfire.store.RegionFactoryBean<java.lang.Object,java.lang.Object> . setBeanName ( java.lang.String ) ; org.springframework.integration.gemfire.store.RegionFactoryBean<java.lang.Object,java.lang.Object> . setAttributes ( org.springframework.integration.gemfire.store.RegionAttributesFactoryBean . getObject ( ) ) ; org.springframework.integration.gemfire.store.RegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( this . org.springframework.integration.gemfire.store.Cache ) ; org.springframework.integration.gemfire.store.RegionFactoryBean<java.lang.Object,java.lang.Object> . afterPropertiesSet ( ) ; this . org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> = org.springframework.integration.gemfire.store.RegionFactoryBean<java.lang.Object,java.lang.Object> . getObject ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return this . org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> . get ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; this . org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> . put ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> . putIfAbsent ( java.lang.Object , java.lang.Object ) ; if ( java.lang.Object != null && logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Object + STRING + STRING + java.lang.Object + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return this . org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> . remove ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<?> < ? > java.util.Collection<?> ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = this . org.springframework.integration.gemfire.store.Region<java.lang.Object,java.lang.Object> . keySet ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<java.lang.Object> ) { java.lang.String java.lang.String = java.lang.Object . java.lang.String ( ) ; if ( PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ) { java.util.List<java.lang.Object> . boolean ( java.lang.String ) ; } } return java.util.List<java.lang.Object> ; }  <METHOD_END>
