<METHOD_START> public void ( ) { this( new BasicCassandraMappingContext ( ) ); }  <METHOD_END>
<METHOD_START> public void ( CassandraMappingContext org.springframework.data.cassandra.convert.CassandraMappingContext ) { super( new DefaultConversionService ( ) ); Assert . notNull ( org.springframework.data.cassandra.convert.CassandraMappingContext , STRING ) ; this . org.springframework.data.cassandra.convert.CassandraMappingContext = org.springframework.data.cassandra.convert.CassandraMappingContext ; this . org.springframework.data.cassandra.convert.SpELContext = new SpELContext ( RowReaderPropertyAccessor . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < R > R R ( java.lang.Class<R> < R > java.lang.Class<R> , Row org.springframework.data.cassandra.convert.Row ) { java.lang.Class<R> < R > java.lang.Class<R> = java.lang.Class<R> ( java.lang.Class<R> ) ; TypeInformation < ? extends R > org.springframework.data.cassandra.convert.TypeInformation<? extends R> = ClassTypeInformation . from ( java.lang.Class<R> ) ; java.lang.Class<? extends R> < ? extends R > java.lang.Class<? extends R> = org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) ; if ( Row .class . boolean ( java.lang.Class<> ) ) { return ( R ) org.springframework.data.cassandra.convert.Row ; } if ( getCustomConversions ( ) . hasCustomReadTarget ( Row .class , java.lang.Class<> ) || getConversionService ( ) . canConvert ( Row .class , java.lang.Class<> ) ) { return getConversionService ( ) . convert ( org.springframework.data.cassandra.convert.Row , java.lang.Class<> ) ; } if ( org.springframework.data.cassandra.convert.TypeInformation<> . isCollectionLike ( ) || org.springframework.data.cassandra.convert.TypeInformation<> . isMap ( ) ) { return getConversionService ( ) . convert ( org.springframework.data.cassandra.convert.Row , java.lang.Class<R> ) ; } CassandraPersistentEntity < R > org.springframework.data.cassandra.convert.CassandraPersistentEntity<R> = ( CassandraPersistentEntity < R > ) org.springframework.data.cassandra.convert.CassandraMappingContext ( ) . getRequiredPersistentEntity ( org.springframework.data.cassandra.convert.TypeInformation<> ) ; return java.lang.Object ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<R> , org.springframework.data.cassandra.convert.Row ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.cassandra.convert.ApplicationContext ) throws org.springframework.data.cassandra.convert.BeansException { this . org.springframework.data.cassandra.convert.ApplicationContext = org.springframework.data.cassandra.convert.ApplicationContext ; this . org.springframework.data.cassandra.convert.SpELContext = new SpELContext ( this . org.springframework.data.cassandra.convert.SpELContext , org.springframework.data.cassandra.convert.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected < S > S S ( final CassandraPersistentEntity < S > org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> , final Row org.springframework.data.cassandra.convert.Row ) { DefaultSpELExpressionEvaluator org.springframework.data.cassandra.convert.DefaultSpELExpressionEvaluator = new DefaultSpELExpressionEvaluator ( org.springframework.data.cassandra.convert.Row , org.springframework.data.cassandra.convert.SpELContext ) ; BasicCassandraRowValueProvider org.springframework.data.cassandra.convert.BasicCassandraRowValueProvider = new BasicCassandraRowValueProvider ( org.springframework.data.cassandra.convert.Row , org.springframework.data.cassandra.convert.DefaultSpELExpressionEvaluator ) ; PersistentEntityParameterValueProvider < CassandraPersistentProperty > org.springframework.data.cassandra.convert.PersistentEntityParameterValueProvider<org.springframework.data.cassandra.convert.CassandraPersistentProperty> = new PersistentEntityParameterValueProvider <> ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> , new org.springframework.data.cassandra.convert.MappingCassandraConverter.MappingAndConvertingValueProvider ( org.springframework.data.cassandra.convert.BasicCassandraRowValueProvider ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; EntityInstantiator org.springframework.data.cassandra.convert.EntityInstantiator = instantiators . getInstantiatorFor ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> ) ; S S = org.springframework.data.cassandra.convert.EntityInstantiator . createInstance ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> , org.springframework.data.cassandra.convert.PersistentEntityParameterValueProvider<org.springframework.data.cassandra.convert.CassandraPersistentProperty> ) ; void ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> , org.springframework.data.cassandra.convert.BasicCassandraRowValueProvider , org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( S , org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> ) ) ; return S ; }  <METHOD_END>
<METHOD_START> protected < S > S S ( CassandraPersistentEntity < S > org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> , UDTValue org.springframework.data.cassandra.convert.UDTValue ) { DefaultSpELExpressionEvaluator org.springframework.data.cassandra.convert.DefaultSpELExpressionEvaluator = new DefaultSpELExpressionEvaluator ( org.springframework.data.cassandra.convert.UDTValue , org.springframework.data.cassandra.convert.SpELContext ) ; CassandraUDTValueProvider org.springframework.data.cassandra.convert.CassandraUDTValueProvider = new CassandraUDTValueProvider ( org.springframework.data.cassandra.convert.UDTValue , CodecRegistry . DEFAULT_INSTANCE , org.springframework.data.cassandra.convert.DefaultSpELExpressionEvaluator ) ; PersistentEntityParameterValueProvider < CassandraPersistentProperty > org.springframework.data.cassandra.convert.PersistentEntityParameterValueProvider<org.springframework.data.cassandra.convert.CassandraPersistentProperty> = new PersistentEntityParameterValueProvider ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> , new org.springframework.data.cassandra.convert.MappingCassandraConverter.MappingAndConvertingValueProvider ( org.springframework.data.cassandra.convert.CassandraUDTValueProvider ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; EntityInstantiator org.springframework.data.cassandra.convert.EntityInstantiator = instantiators . getInstantiatorFor ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> ) ; S S = org.springframework.data.cassandra.convert.EntityInstantiator . createInstance ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> , org.springframework.data.cassandra.convert.PersistentEntityParameterValueProvider<org.springframework.data.cassandra.convert.CassandraPersistentProperty> ) ; void ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> , org.springframework.data.cassandra.convert.CassandraUDTValueProvider , org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( S , org.springframework.data.cassandra.convert.CassandraPersistentEntity<S> ) ) ; return S ; }  <METHOD_END>
<METHOD_START> protected void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> , CassandraRowValueProvider org.springframework.data.cassandra.convert.CassandraRowValueProvider , PersistentPropertyAccessor org.springframework.data.cassandra.convert.PersistentPropertyAccessor ) { void ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> , org.springframework.data.cassandra.convert.CassandraRowValueProvider , org.springframework.data.cassandra.convert.PersistentPropertyAccessor ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> , final CassandraValueProvider org.springframework.data.cassandra.convert.CassandraValueProvider , final PersistentPropertyAccessor org.springframework.data.cassandra.convert.PersistentPropertyAccessor ) { org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getPersistentProperties ( ) . forEach ( property -> MappingCassandraConverter .this . readProperty ( entity , property , valueProvider , propertyAccessor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> , CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty , CassandraRowValueProvider org.springframework.data.cassandra.convert.CassandraRowValueProvider , PersistentPropertyAccessor org.springframework.data.cassandra.convert.PersistentPropertyAccessor ) { void ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> , org.springframework.data.cassandra.convert.CassandraPersistentProperty , org.springframework.data.cassandra.convert.CassandraRowValueProvider , org.springframework.data.cassandra.convert.PersistentPropertyAccessor ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> , CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty , CassandraValueProvider org.springframework.data.cassandra.convert.CassandraValueProvider , PersistentPropertyAccessor org.springframework.data.cassandra.convert.PersistentPropertyAccessor ) { if ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . isConstructorArgument ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ) { return; } if ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> = org.springframework.data.cassandra.convert.CassandraPersistentProperty . getCompositePrimaryKeyEntity ( ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.cassandra.convert.PersistentPropertyAccessor . getProperty ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ; if ( ! java.util.Optional<java.lang.Object> . boolean ( ) ) { java.util.Optional<java.lang.Object> = java.util.Optional . java.util.Optional ( java.lang.Object ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> , org.springframework.data.cassandra.convert.CassandraPersistentProperty , org.springframework.data.cassandra.convert.CassandraValueProvider ) ) ; } java.util.Optional<java.lang.Object> . void ( java.lang.Object -> void ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getCompositePrimaryKeyEntity ( ) , org.springframework.data.cassandra.convert.CassandraValueProvider , org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ) ) ; org.springframework.data.cassandra.convert.PersistentPropertyAccessor . setProperty ( org.springframework.data.cassandra.convert.CassandraPersistentProperty , java.util.Optional<java.lang.Object> ) ; return; } if ( ! org.springframework.data.cassandra.convert.CassandraValueProvider . hasProperty ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ) { return; } org.springframework.data.cassandra.convert.PersistentPropertyAccessor . setProperty ( org.springframework.data.cassandra.convert.CassandraPersistentProperty , java.util.Optional ( org.springframework.data.cassandra.convert.CassandraValueProvider , org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> , CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty , PropertyValueProvider < CassandraPersistentProperty > org.springframework.data.cassandra.convert.PropertyValueProvider<org.springframework.data.cassandra.convert.CassandraPersistentProperty> ) { return instantiators . getInstantiatorFor ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) . createInstance ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> , new PersistentEntityParameterValueProvider <> ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> , org.springframework.data.cassandra.convert.PropertyValueProvider<org.springframework.data.cassandra.convert.CassandraPersistentProperty> , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < R > R R ( java.lang.Class<R> < R > java.lang.Class<R> , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Row ) { return R ( java.lang.Class<R> , ( Row ) java.lang.Object ) ; } throw new MappingException ( STRING + ObjectUtils . nullSafeClassName ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.util.Optional<T> < T > java.util.Optional<T> , TypeInformation < ? > org.springframework.data.cassandra.convert.TypeInformation<?> ) { Assert . notNull ( org.springframework.data.cassandra.convert.TypeInformation<> , STRING ) ; return java.util.Optional<T> . java.util.Optional<java.lang.Object> ( T -> { if ( T . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( T ) ; } return java.util.Optional ( java.util.Optional<T> , org.springframework.data.cassandra.convert.TypeInformation<> ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { if ( java.lang.Object != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> = org.springframework.data.cassandra.convert.CassandraMappingContext ( ) . getRequiredPersistentEntity ( java.lang.Class<> ) ; void ( java.lang.Object , java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { if ( java.lang.Object == null ) { return; } if ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> == null ) { throw new MappingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } if ( java.lang.Object instanceof Insert ) { void ( java.lang.Object , ( Insert ) java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; } else if ( java.lang.Object instanceof Update ) { void ( java.lang.Object , ( Update ) java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; } else if ( java.lang.Object instanceof Select . Select ) { void ( java.lang.Object , ( Select . Select ) java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; } else if ( java.lang.Object instanceof Delete . Delete ) { void ( java.lang.Object , ( Delete . Delete ) java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; } else if ( java.lang.Object instanceof UDTValue ) { void ( org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) , ( UDTValue ) java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; } else { throw new MappingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( final java.lang.Object java.lang.Object , final Insert org.springframework.data.cassandra.convert.Insert , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { void ( org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) , org.springframework.data.cassandra.convert.Insert , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final ConvertingPropertyAccessor org.springframework.data.cassandra.convert.ConvertingPropertyAccessor , final Insert org.springframework.data.cassandra.convert.Insert , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getPersistentProperties ( ) . forEach ( property -> { Optional < Object > value = getWriteValue ( property , accessor ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( STRING , property . getType ( ) . getName ( ) , value ) ; } if ( property . isCompositePrimaryKey ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( STRING ) ; } writeInsertFromWrapper ( getConvertingAccessor ( value . orElse ( null ) , property . getCompositePrimaryKeyEntity ( ) ) , insert , property . getCompositePrimaryKeyEntity ( ) ) ; return; } if ( log . isDebugEnabled ( ) ) { log . debug ( STRING , property . getColumnName ( ) . toCql ( ) , value ) ; } insert . value ( property . getColumnName ( ) . toCql ( ) , value . orElse ( null ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final java.lang.Object java.lang.Object , final Update org.springframework.data.cassandra.convert.Update , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { void ( org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) , org.springframework.data.cassandra.convert.Update , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final ConvertingPropertyAccessor org.springframework.data.cassandra.convert.ConvertingPropertyAccessor , final Update org.springframework.data.cassandra.convert.Update , final CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getPersistentProperties ( ) . forEach ( property -> { Optional < Object > value = getWriteValue ( property , accessor ) ; if ( property . isCompositePrimaryKey ( ) ) { CassandraPersistentEntity < ? > keyEntity = property . getCompositePrimaryKeyEntity ( ) ; writeUpdateFromWrapper ( getConvertingAccessor ( value . orElse ( null ) , keyEntity ) , update , keyEntity ) ; return; } if ( isPrimaryKeyPart ( property ) ) { update . where ( QueryBuilder . eq ( property . getColumnName ( ) . toCql ( ) , value . orElse ( null ) ) ) ; } else { update . with ( QueryBuilder . set ( property . getColumnName ( ) . toCql ( ) , value . orElse ( null ) ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final java.lang.Object java.lang.Object , final Select . Select Select.Where , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { java.util.Collection<org.springframework.data.cassandra.convert.Clause> ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) . forEach ( Select.Where :: and ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final java.lang.Object java.lang.Object , final Delete . Delete Delete.Where , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { java.util.Collection<org.springframework.data.cassandra.convert.Clause> ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) . forEach ( Delete.Where :: and ) ; }  <METHOD_END>
<METHOD_START> protected void void ( final ConvertingPropertyAccessor org.springframework.data.cassandra.convert.ConvertingPropertyAccessor , final UDTValue org.springframework.data.cassandra.convert.UDTValue , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getPersistentProperties ( ) . forEach ( property -> { Optional < Object > value = getWriteValue ( property , accessor ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( STRING , property . getType ( ) . getName ( ) , value ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( STRING , property . getColumnName ( ) . toCql ( ) , value ) ; } TypeCodec < Object > typeCodec = CodecRegistry . DEFAULT_INSTANCE . codecFor ( getMappingContext ( ) . getDataType ( property ) ) ; udtValue . set ( property . getColumnName ( ) . toCql ( ) , value . orElse ( null ) , typeCodec ) ; } ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.data.cassandra.convert.Clause> < Clause > java.util.Collection<org.springframework.data.cassandra.convert.Clause> ( java.lang.Object java.lang.Object , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; Assert . notNull ( java.lang.Object , java.lang.String . java.lang.String ( STRING , java.lang.Object ) ) ; java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> = org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getIdProperty ( ) ; java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> = java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . filter ( CassandraPersistentProperty :: isCompositePrimaryKey ) ; if ( java.lang.Object instanceof MapId ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> = java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . map ( CassandraPersistentProperty :: getCompositePrimaryKeyEntity ) . orElse ( ( CassandraPersistentEntity ) org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; return java.util.Collection<org.springframework.data.cassandra.convert.Clause> ( ( MapId ) java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; } CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty = java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . orElseThrow ( ( ) new InvalidDataAccessApiUsageException ( String . format ( STRING , entity . getName ( ) , source ) ) ) ; if ( java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . isPresent ( ) ) { CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty = java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . filter ( p -> ClassUtils . isAssignableValue ( p . getType ( ) , id ) ) . orElseThrow ( ( ) new InvalidDataAccessApiUsageException ( String . format ( STRING , id , entity . getName ( ) ) ) ) ; return java.util.Collection<org.springframework.data.cassandra.convert.Clause> ( org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentProperty . getCompositePrimaryKeyEntity ( ) ) , org.springframework.data.cassandra.convert.CassandraPersistentProperty . getCompositePrimaryKeyEntity ( ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ; if ( getConversionService ( ) . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return java.util.Collections . java.util.Set ( QueryBuilder . eq ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) , java.util.Optional<java.lang.Object> ( java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) , ( java.lang.Class<java.lang.Object> < java.lang.Object > ) java.lang.Class<> ) . java.lang.Object ( null ) ) ) ; } return java.util.Collections . java.util.Set ( QueryBuilder . eq ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { if ( ClassUtils . isAssignableValue ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getType ( ) , java.lang.Object ) ) { return java.lang.Object ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; } else if ( java.lang.Object instanceof MapId ) { return java.lang.Object ; } else if ( java.lang.Object instanceof MapIdentifiable ) { return ( ( MapIdentifiable ) java.lang.Object ) . getMapId ( ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.data.cassandra.convert.Clause> < Clause > java.util.Collection<org.springframework.data.cassandra.convert.Clause> ( final ConvertingPropertyAccessor org.springframework.data.cassandra.convert.ConvertingPropertyAccessor , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { Assert . isTrue ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . isCompositePrimaryKey ( ) , java.lang.String . java.lang.String ( STRING , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getName ( ) ) ) ; java.util.Collection<org.springframework.data.cassandra.convert.Clause> < Clause > java.util.Collection<org.springframework.data.cassandra.convert.Clause> = new java.util.ArrayList<org.springframework.data.cassandra.convert.Clause> <> ( ) ; org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getPersistentProperties ( ) . forEach ( property -> { TypeCodec < Object > codec = getCodec ( property ) ; Optional < Object > value = accessor . getProperty ( property , codec . getJavaType ( ) . getRawType ( ) ) ; clauses . add ( QueryBuilder . eq ( property . getColumnName ( ) . toCql ( ) , value . orElse ( null ) ) ) ; } ) ; return java.util.Collection<org.springframework.data.cassandra.convert.Clause> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.data.cassandra.convert.Clause> < Clause > java.util.Collection<org.springframework.data.cassandra.convert.Clause> ( MapId org.springframework.data.cassandra.convert.MapId , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { Assert . notNull ( org.springframework.data.cassandra.convert.MapId , STRING ) ; java.util.Collection<org.springframework.data.cassandra.convert.Clause> < Clause > java.util.Collection<org.springframework.data.cassandra.convert.Clause> = new java.util.ArrayList<org.springframework.data.cassandra.convert.Clause> <> ( ) ; for ( Entry < java.lang.String , java.io.Serializable > org.springframework.data.cassandra.convert.Entry<java.lang.String,java.io.Serializable> : org.springframework.data.cassandra.convert.MapId . entrySet ( ) ) { java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> = org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getPersistentProperty ( org.springframework.data.cassandra.convert.Entry<java.lang.String,java.io.Serializable> . getKey ( ) ) ; CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty = java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . orElseThrow ( ( ) new IllegalArgumentException ( String . format ( STRING , entry . getKey ( ) , entity . getName ( ) ) ) ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional ( java.util.Optional . java.util.Optional ( org.springframework.data.cassandra.convert.Entry<java.lang.String,java.io.Serializable> . getValue ( ) ) , org.springframework.data.cassandra.convert.CassandraPersistentProperty . getTypeInformation ( ) ) ; java.util.Collection<org.springframework.data.cassandra.convert.Clause> . add ( QueryBuilder . eq ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) , java.util.Optional<java.lang.Object> . java.lang.Object ( null ) ) ) ; } return java.util.Collection<org.springframework.data.cassandra.convert.Clause> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { Assert . notNull ( java.lang.Object , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> , STRING ) ; final ConvertingPropertyAccessor org.springframework.data.cassandra.convert.ConvertingPropertyAccessor = org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> ) ; Assert . isTrue ( org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getType ( ) . isAssignableFrom ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) , java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getType ( ) . getName ( ) ) ) ; if ( java.lang.Object instanceof MapIdentifiable ) { return ( ( MapIdentifiable ) java.lang.Object ) . getMapId ( ) ; } java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> = org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getIdProperty ( ) ; if ( java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . isPresent ( ) ) { CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty = java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . get ( ) ; return org.springframework.data.cassandra.convert.ConvertingPropertyAccessor . getProperty ( org.springframework.data.cassandra.convert.CassandraPersistentProperty , org.springframework.data.cassandra.convert.CassandraPersistentProperty . isCompositePrimaryKey ( ) ? ( java.lang.Class<java.lang.Object> < java.lang.Object > ) org.springframework.data.cassandra.convert.CassandraPersistentProperty . getType ( ) : ( java.lang.Class<java.lang.Object> < java.lang.Object > ) java.lang.Class<?> ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ) . orElse ( null ) ; } final MapId org.springframework.data.cassandra.convert.MapId = id ( ) ; org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getPersistentProperties ( ) . filter ( CassandraPersistentProperty :: isPrimaryKeyColumn ) . forEach ( property -> { id . with ( property . getName ( ) , ( Serializable ) getWriteValue ( property , accessor ) . orElse ( null ) ) ; } ) ; return org.springframework.data.cassandra.convert.MapId ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T > java.lang.Class<T> < T > java.lang.Class<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { try { return ( java.lang.Class<T> < T > ) ClassUtils . forName ( java.lang.Class<T> . java.lang.String ( ) , java.lang.ClassLoader ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { return java.lang.Class<T> ; } catch ( java.lang.LinkageError java.lang.LinkageError ) { return java.lang.Class<T> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.convert.CassandraMappingContext org.springframework.data.cassandra.convert.CassandraMappingContext ( ) { return org.springframework.data.cassandra.convert.CassandraMappingContext ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.convert.ConvertingPropertyAccessor org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ( java.lang.Object java.lang.Object , CassandraPersistentEntity < ? > org.springframework.data.cassandra.convert.CassandraPersistentEntity<?> ) { PersistentPropertyAccessor org.springframework.data.cassandra.convert.PersistentPropertyAccessor = ( java.lang.Object instanceof PersistentPropertyAccessor ? ( PersistentPropertyAccessor ) java.lang.Object : org.springframework.data.cassandra.convert.CassandraPersistentEntity<> . getPropertyAccessor ( java.lang.Object ) ) ; return new ConvertingPropertyAccessor ( org.springframework.data.cassandra.convert.PersistentPropertyAccessor , getConversionService ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { return ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . isCompositePrimaryKey ( ) || org.springframework.data.cassandra.convert.CassandraPersistentProperty . isPrimaryKeyColumn ( ) || org.springframework.data.cassandra.convert.CassandraPersistentProperty . isIdProperty ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { if ( getCustomConversions ( ) . hasCustomWriteTarget ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getType ( ) ) ) { return getCustomConversions ( ) . getCustomWriteTarget ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getType ( ) ) ; } if ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . findAnnotation ( CassandraType .class ) . isPresent ( ) ) { return java.lang.Class<?> ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ; } if ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . isCompositePrimaryKey ( ) || getCustomConversions ( ) . isSimpleType ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getType ( ) ) || org.springframework.data.cassandra.convert.CassandraPersistentProperty . isCollectionLike ( ) ) { return org.springframework.data.cassandra.convert.CassandraPersistentProperty . getType ( ) ; } return java.lang.Class<?> ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { DataType org.springframework.data.cassandra.convert.DataType = org.springframework.data.cassandra.convert.CassandraMappingContext ( ) . getDataType ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ; if ( org.springframework.data.cassandra.convert.DataType instanceof UserType ) { return org.springframework.data.cassandra.convert.CassandraPersistentProperty . getType ( ) ; } TypeCodec < java.lang.Object > org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> = CodecRegistry . DEFAULT_INSTANCE . codecFor ( org.springframework.data.cassandra.convert.CassandraMappingContext ( ) . getDataType ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ) ; return org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> . getJavaType ( ) . getRawType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.Optional<T> < T > java.util.Optional<T> ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty , ConvertingPropertyAccessor org.springframework.data.cassandra.convert.ConvertingPropertyAccessor ) { return java.util.Optional ( org.springframework.data.cassandra.convert.ConvertingPropertyAccessor . getProperty ( org.springframework.data.cassandra.convert.CassandraPersistentProperty , ( java.lang.Class<T> < T > ) java.lang.Class<?> ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ) , org.springframework.data.cassandra.convert.CassandraPersistentProperty . getTypeInformation ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < I , O > java.util.Optional<O> < O > java.util.Optional<O> ( java.util.Optional<I> < I > java.util.Optional<I> , TypeInformation < ? > org.springframework.data.cassandra.convert.TypeInformation<?> ) { if ( ! java.util.Optional<I> . boolean ( ) ) { return java.util.Optional . java.util.Optional<O> ( ) ; } I I = java.util.Optional<I> . I ( ) ; if ( getCustomConversions ( ) . isSimpleType ( I . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return java.util.Optional<O> ( java.util.Optional<I> , ( java.lang.Class<O> < O > ) org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) ) ; } if ( getCustomConversions ( ) . hasCustomWriteTarget ( I . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return java.util.Optional . java.util.Optional ( getConversionService ( ) . convert ( I , ( java.lang.Class<O> < O > ) getCustomConversions ( ) . getCustomWriteTarget ( I . java.lang.Class<? extends java.lang.Object> ( ) ) ) ) ; } TypeInformation < ? > org.springframework.data.cassandra.convert.TypeInformation<?> = ( org.springframework.data.cassandra.convert.TypeInformation<> != null ? org.springframework.data.cassandra.convert.TypeInformation<> : ClassTypeInformation . from ( I . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; TypeInformation < ? > org.springframework.data.cassandra.convert.TypeInformation<?> = org.springframework.data.cassandra.convert.TypeInformation<> . getActualType ( ) ; if ( I instanceof java.util.Collection ) { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) I ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = CollectionFactory . createCollection ( java.lang.Class<?> ( org.springframework.data.cassandra.convert.TypeInformation<> ) , java.util.Collection<java.lang.Object> . int ( ) ) ; java.util.Collection<java.lang.Object> . java.util.stream.Stream<java.lang.Object> ( ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Object -> java.util.Optional ( java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) , org.springframework.data.cassandra.convert.TypeInformation<> ) . orElse ( null ) ) . forEach ( java.util.Collection<java.lang.Object> :: boolean ) ; return java.util.Optional . java.util.Optional<O> ( ( O ) java.util.Collection<java.lang.Object> ) ; } java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> = org.springframework.data.cassandra.convert.CassandraMappingContext ( ) . getPersistentEntity ( org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) ) . filter ( CassandraPersistentEntity :: isUserDefinedType ) ; if ( java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> . isPresent ( ) ) { return java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> . map ( persistentEntity -> { UDTValue udtValue = persistentEntity . getUserType ( ) . newValue ( ) ; write ( value , udtValue , persistentEntity ) ; return ( O ) udtValue ; } ) ; } return ( java.util.Optional<O> < O > ) java.util.Optional<I> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < I , O > java.util.Optional<O> < O > java.util.Optional<O> ( java.util.Optional<I> < I > java.util.Optional<I> , java.lang.Class<O> < O > java.lang.Class<O> ) { if ( java.util.Optional<I> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.Optional<I> . I ( ) ; if ( getCustomConversions ( ) . hasCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<O> ) ) { return java.util.Optional . java.util.Optional<O> ( ( O ) getConversionService ( ) . convert ( java.lang.Object , getCustomConversions ( ) . getCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<O> ) ) ) ; } if ( java.lang.Enum .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { if ( java.lang.Class<O> != null && ! java.lang.Class<O> . boolean ( ) && getConversionService ( ) . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<O> ) ) { return java.util.Optional . java.util.Optional ( getConversionService ( ) . convert ( java.lang.Object , java.lang.Class<O> ) ) ; } return java.util.Optional . java.util.Optional<O> ( ( O ) ( ( java.lang.Enum<?> < ? > ) java.lang.Object ) . java.lang.String ( ) ) ; } } return ( java.util.Optional<O> < O > ) java.util.Optional<I> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Object == null || java.lang.Class<> == null || java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return java.lang.Object ; } if ( conversions . hasCustomReadTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } if ( java.lang.Enum .class . boolean ( java.lang.Class<> ) ) { return java.lang.Enum . java.lang.Enum ( ( java.lang.Class<java.lang.Enum> < java.lang.Enum > ) java.lang.Class<> , java.lang.Object . java.lang.String ( ) ) ; } return conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( TypeInformation < ? > org.springframework.data.cassandra.convert.TypeInformation<?> ) { if ( org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) . isInterface ( ) ) { return org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) ; } if ( ClassTypeInformation . LIST . isAssignableFrom ( org.springframework.data.cassandra.convert.TypeInformation<> ) ) { return ClassTypeInformation . LIST . getType ( ) ; } if ( ClassTypeInformation . SET . isAssignableFrom ( org.springframework.data.cassandra.convert.TypeInformation<> ) ) { return ClassTypeInformation . SET . getType ( ) ; } if ( ! org.springframework.data.cassandra.convert.TypeInformation<> . isCollectionLike ( ) ) { return ClassTypeInformation . LIST . getType ( ) ; } return org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.Optional<T> < T > java.util.Optional<T> ( PropertyValueProvider < CassandraPersistentProperty > org.springframework.data.cassandra.convert.PropertyValueProvider<org.springframework.data.cassandra.convert.CassandraPersistentProperty> , CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = org.springframework.data.cassandra.convert.PropertyValueProvider<org.springframework.data.cassandra.convert.CassandraPersistentProperty> . getPropertyValue ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ; if ( ! java.util.Optional<java.lang.Object> . boolean ( ) ) { return java.util.Optional . java.util.Optional<T> ( ) ; } if ( conversions . hasCustomWriteTarget ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getActualType ( ) ) && org.springframework.data.cassandra.convert.CassandraPersistentProperty . isCollectionLike ( ) ) { if ( java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> java.lang.Object instanceof java.util.Collection ) . boolean ( ) ) { return java.util.Optional<java.lang.Object> . java.util.Optional<T> ( java.lang.Object -> { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) java.lang.Object ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = CollectionFactory . createCollection ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getType ( ) , java.util.Collection<java.lang.Object> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<java.lang.Object> ) { java.util.Collection<java.lang.Object> . boolean ( getConversionService ( ) . convert ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentProperty . getActualType ( ) ) ) ; } return ( T ) java.util.Collection<java.lang.Object> ; } ) ; } } if ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . isCollectionLike ( ) && java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> java.lang.Object instanceof java.util.Collection ) . boolean ( ) ) { return java.util.Optional<java.lang.Object> . java.util.Optional<T> ( java.lang.Object -> ( T ) java.lang.Object ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getTypeInformation ( ) , ( java.util.Collection ) java.lang.Object ) ) ; } java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> = org.springframework.data.cassandra.convert.CassandraMappingContext ( ) . getPersistentEntity ( org.springframework.data.cassandra.convert.CassandraPersistentProperty . getActualType ( ) ) . filter ( CassandraPersistentEntity :: isUserDefinedType ) ; if ( java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> . isPresent ( ) && java.util.Optional<java.lang.Object> . java.util.Optional<java.lang.Object> ( java.lang.Object -> java.lang.Object instanceof UDTValue ) . boolean ( ) ) { return java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> . flatMap ( cassandraPersistentEntity -> obj . map ( it -> ( T ) readEntityFromUdt ( cassandraPersistentEntity , ( UDTValue ) it ) ) ) ; } return java.util.Optional<java.lang.Object> . java.util.Optional<T> ( java.lang.Object -> java.util.Optional . java.util.Optional<T> ( ( T ) java.lang.Object ( java.lang.Object , org.springframework.data.cassandra.convert.CassandraPersistentProperty . getType ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.lang.Object java.lang.Object ( TypeInformation < ? > org.springframework.data.cassandra.convert.TypeInformation<?> , java.util.Collection<?> < ? > java.util.Collection<?> ) { Assert . notNull ( org.springframework.data.cassandra.convert.TypeInformation<> , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) ; java.util.Optional<org.springframework.data.cassandra.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.cassandra.convert.TypeInformation<?>> = org.springframework.data.cassandra.convert.TypeInformation<> . getComponentType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Optional<org.springframework.data.cassandra.convert.TypeInformation<?>> . map ( TypeInformation :: getType ) . orElse ( ( java.lang.Class ) java.util.List .class ) ; java.lang.Class<?> = java.util.Collection .class . boolean ( java.lang.Class<> ) ? java.lang.Class<> : java.util.List .class ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) . isArray ( ) ? new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) : CollectionFactory . createCollection ( java.lang.Class<> , java.lang.Class<> , java.util.Collection<> . int ( ) ) ; if ( java.util.Collection<> . boolean ( ) ) { return java.lang.Object ( java.util.Collection<java.lang.Object> , java.lang.Class<> ) ; } java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> = java.util.Optional<org.springframework.data.cassandra.convert.TypeInformation<?>> . flatMap ( it -> getMappingContext ( ) . getPersistentEntity ( it ) ) . filter ( CassandraPersistentEntity :: isUserDefinedType ) ; if ( java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> . isPresent ( ) ) { java.util.Optional<org.springframework.data.cassandra.convert.CassandraPersistentEntity<?>> . ifPresent ( persistentEntity -> { for ( Object udtValue : sourceValue ) { items . add ( readEntityFromUdt ( persistentEntity , ( UDTValue ) udtValue ) ) ; } } ) ; } else { for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object , java.lang.Class<> ) ) ; } } return java.lang.Object ( java.util.Collection<java.lang.Object> , org.springframework.data.cassandra.convert.TypeInformation<> . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> < java.lang.Object > org.springframework.data.cassandra.convert.TypeCodec<java.lang.Object> ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { return CodecRegistry . DEFAULT_INSTANCE . codecFor ( org.springframework.data.cassandra.convert.CassandraMappingContext . getDataType ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { return org.springframework.data.cassandra.convert.CassandraValueProvider . hasProperty ( org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > java.util.Optional<T> < T > java.util.Optional<T> ( CassandraPersistentProperty org.springframework.data.cassandra.convert.CassandraPersistentProperty ) { return java.util.Optional ( org.springframework.data.cassandra.convert.CassandraValueProvider , org.springframework.data.cassandra.convert.CassandraPersistentProperty ) ; }  <METHOD_END>
