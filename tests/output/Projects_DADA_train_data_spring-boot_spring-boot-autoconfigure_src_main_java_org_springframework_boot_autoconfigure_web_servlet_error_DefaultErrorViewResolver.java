<METHOD_START> public void ( ApplicationContext org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext , ResourceProperties org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties ) { Assert . notNull ( org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties , STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext = org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext ; this . org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties = org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties ; this . org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProviders = new TemplateAvailabilityProviders ( org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> void ( ApplicationContext org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext , ResourceProperties org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties , TemplateAvailabilityProviders org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProviders ) { Assert . notNull ( org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties , STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext = org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext ; this . org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties = org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties ; this . org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProviders = org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProviders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView ( HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.error.HttpServletRequest , HttpStatus org.springframework.boot.autoconfigure.web.servlet.error.HttpStatus , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView = org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView ( java.lang.String . java.lang.String ( org.springframework.boot.autoconfigure.web.servlet.error.HttpStatus ) , java.util.Map<java.lang.String,java.lang.Object> ) ; if ( org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView == null && java.util.Map<org.springframework.boot.autoconfigure.web.servlet.error.Series,java.lang.String> . containsKey ( org.springframework.boot.autoconfigure.web.servlet.error.HttpStatus . series ( ) ) ) { org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView = org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView ( java.util.Map<org.springframework.boot.autoconfigure.web.servlet.error.Series,java.lang.String> . get ( org.springframework.boot.autoconfigure.web.servlet.error.HttpStatus . series ( ) ) , java.util.Map<java.lang.String,java.lang.Object> ) ; } return org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String java.lang.String = STRING + java.lang.String ; TemplateAvailabilityProvider org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProvider = this . org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProviders . getProvider ( java.lang.String , this . org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext ) ; if ( org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProvider != null ) { return new ModelAndView ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ; } return org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.ModelAndView ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { for ( java.lang.String java.lang.String : this . org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties . getStaticLocations ( ) ) { try { Resource org.springframework.boot.autoconfigure.web.servlet.error.Resource = this . org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext . getResource ( java.lang.String ) ; org.springframework.boot.autoconfigure.web.servlet.error.Resource = org.springframework.boot.autoconfigure.web.servlet.error.Resource . createRelative ( java.lang.String + STRING ) ; if ( org.springframework.boot.autoconfigure.web.servlet.error.Resource . exists ( ) ) { return new ModelAndView ( new org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver.HtmlResourceView ( org.springframework.boot.autoconfigure.web.servlet.error.Resource ) , java.util.Map<java.lang.String,java.lang.Object> ) ; } } catch ( java.lang.Exception java.lang.Exception ) {			} } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> void ( Resource org.springframework.boot.autoconfigure.web.servlet.error.Resource ) { this . org.springframework.boot.autoconfigure.web.servlet.error.Resource = org.springframework.boot.autoconfigure.web.servlet.error.Resource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return MediaType . TEXT_HTML_VALUE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.error.HttpServletRequest , HttpServletResponse org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse ) throws java.lang.Exception { org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse . setContentType ( java.lang.String ( ) ) ; FileCopyUtils . copy ( this . org.springframework.boot.autoconfigure.web.servlet.error.Resource . getInputStream ( ) , org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse . getOutputStream ( ) ) ; }  <METHOD_END>
