<METHOD_START> @ Bean ( name = CacheManagementConfigUtils . CACHE_ADVISOR_BEAN_NAME ) @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) public org.springframework.cache.annotation.BeanFactoryCacheOperationSourceAdvisor org.springframework.cache.annotation.BeanFactoryCacheOperationSourceAdvisor ( ) { BeanFactoryCacheOperationSourceAdvisor org.springframework.cache.annotation.BeanFactoryCacheOperationSourceAdvisor = new BeanFactoryCacheOperationSourceAdvisor ( ) ; org.springframework.cache.annotation.BeanFactoryCacheOperationSourceAdvisor . setCacheOperationSource ( org.springframework.cache.annotation.CacheOperationSource ( ) ) ; org.springframework.cache.annotation.BeanFactoryCacheOperationSourceAdvisor . setAdvice ( org.springframework.cache.annotation.CacheInterceptor ( ) ) ; org.springframework.cache.annotation.BeanFactoryCacheOperationSourceAdvisor . setOrder ( this . enableCaching .< java.lang.Integer > getNumber ( STRING ) ) ; return org.springframework.cache.annotation.BeanFactoryCacheOperationSourceAdvisor ; }  <METHOD_END>
<METHOD_START> @ Bean @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) public org.springframework.cache.annotation.CacheOperationSource org.springframework.cache.annotation.CacheOperationSource ( ) { return new AnnotationCacheOperationSource ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Role ( BeanDefinition . ROLE_INFRASTRUCTURE ) public org.springframework.cache.annotation.CacheInterceptor org.springframework.cache.annotation.CacheInterceptor ( ) { CacheInterceptor org.springframework.cache.annotation.CacheInterceptor = new CacheInterceptor ( ) ; org.springframework.cache.annotation.CacheInterceptor . setCacheOperationSources ( org.springframework.cache.annotation.CacheOperationSource ( ) ) ; if ( this . cacheResolver != null ) { org.springframework.cache.annotation.CacheInterceptor . setCacheResolver ( this . cacheResolver ) ; } else if ( this . cacheManager != null ) { org.springframework.cache.annotation.CacheInterceptor . setCacheManager ( this . cacheManager ) ; } if ( this . keyGenerator != null ) { org.springframework.cache.annotation.CacheInterceptor . setKeyGenerator ( this . keyGenerator ) ; } if ( this . errorHandler != null ) { org.springframework.cache.annotation.CacheInterceptor . setErrorHandler ( this . errorHandler ) ; } return org.springframework.cache.annotation.CacheInterceptor ; }  <METHOD_END>
