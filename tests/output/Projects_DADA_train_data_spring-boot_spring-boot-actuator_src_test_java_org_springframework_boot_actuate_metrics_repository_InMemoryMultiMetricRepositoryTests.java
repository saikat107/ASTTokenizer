<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( Metric < ? > org.springframework.boot.actuate.metrics.repository.Metric<?> : this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . findAll ( STRING ) ) { java.util.Set<java.lang.String> . boolean ( org.springframework.boot.actuate.metrics.repository.Metric<> . getName ( ) ) ; } assertThat ( java.util.Set<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( Metric < ? > org.springframework.boot.actuate.metrics.repository.Metric<?> : this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . findAll ( STRING ) ) { java.util.Set<java.lang.String> . boolean ( org.springframework.boot.actuate.metrics.repository.Metric<> . getName ( ) ) ; } assertThat ( java.util.Set<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( Metric < ? > org.springframework.boot.actuate.metrics.repository.Metric<?> : this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . findAll ( STRING ) ) { java.util.Set<java.lang.String> . boolean ( org.springframework.boot.actuate.metrics.repository.Metric<> . getName ( ) ) ; } assertThat ( java.util.Set<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( Metric < ? > org.springframework.boot.actuate.metrics.repository.Metric<?> : this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . findAll ( STRING ) ) { java.util.Set<java.lang.String> . boolean ( org.springframework.boot.actuate.metrics.repository.Metric<> . getName ( ) ) ; } assertThat ( java.util.Set<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . increment ( STRING , new Delta < java.lang.Number > ( STRING , NUMBER ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.repository.Metric<?>> < java.lang.String , Metric < ? > > java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.repository.Metric<?>> = new java.util.HashMap<java.lang.String,org.springframework.boot.actuate.metrics.repository.Metric<?>> <> ( ) ; for ( Metric < ? > org.springframework.boot.actuate.metrics.repository.Metric<?> : this . org.springframework.boot.actuate.metrics.repository.InMemoryMultiMetricRepository . findAll ( STRING ) ) { java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.repository.Metric<?>> . put ( org.springframework.boot.actuate.metrics.repository.Metric<> . getName ( ) , org.springframework.boot.actuate.metrics.repository.Metric<> ) ; } assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.repository.Metric<?>> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.repository.Metric<?>> ) . containsKeys ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.actuate.metrics.repository.Metric<?>> . get ( STRING ) . getValue ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
