<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ( ( EntityManagerFactoryInfo ) entityManagerFactory ) . getJpaDialect ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNotNull ( STRING , org.springframework.orm.jpa.AbstractEntityManagerFactoryBean . getJpaDialect ( ) ) ; void ( org.springframework.orm.jpa.AbstractEntityManagerFactoryBean ) ; }  <METHOD_END>
<METHOD_START> protected void void ( PersistenceExceptionTranslator org.springframework.orm.jpa.PersistenceExceptionTranslator ) throws java.lang.Exception { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; PersistenceException org.springframework.orm.jpa.PersistenceException = new PersistenceException ( ) ; assertNull ( STRING , org.springframework.orm.jpa.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) ) ; DataAccessException org.springframework.orm.jpa.DataAccessException = org.springframework.orm.jpa.PersistenceExceptionTranslator . translateExceptionIfPossible ( org.springframework.orm.jpa.PersistenceException ) ; assertNotNull ( org.springframework.orm.jpa.DataAccessException ) ; assertSame ( org.springframework.orm.jpa.PersistenceException , org.springframework.orm.jpa.DataAccessException . getCause ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EntityManager org.springframework.orm.jpa.EntityManager = createContainerManagedEntityManager ( ) ; assertTrue ( java.lang.reflect.Proxy . boolean ( org.springframework.orm.jpa.EntityManager . getClass ( ) ) ) ; Query org.springframework.orm.jpa.Query = org.springframework.orm.jpa.EntityManager . createQuery ( STRING ) ; java.util.List<org.springframework.orm.jpa.Person> < Person > java.util.List<org.springframework.orm.jpa.Person> = org.springframework.orm.jpa.Query . getResultList ( ) ; assertTrue ( java.util.List<org.springframework.orm.jpa.Person> . isEmpty ( ) ) ; assertTrue ( STRING , org.springframework.orm.jpa.EntityManager . isOpen ( ) ) ; try { org.springframework.orm.jpa.EntityManager . close ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } assertTrue ( org.springframework.orm.jpa.EntityManager . isOpen ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { createContainerManagedEntityManager ( ) . getTransaction ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { createContainerManagedEntityManager ( ) . joinTransaction ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { endTransaction ( ) ; try { createContainerManagedEntityManager ( ) . joinTransaction ( ) ; fail ( STRING ) ; } catch ( TransactionRequiredException org.springframework.orm.jpa.TransactionRequiredException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.EntityManager = createContainerManagedEntityManager ( ) ; void ( org.springframework.orm.jpa.EntityManager ) ; }  <METHOD_END>
<METHOD_START> protected void void ( EntityManager org.springframework.orm.jpa.EntityManager ) { assertEquals ( STRING , NUMBER , countRowsInTable ( org.springframework.orm.jpa.EntityManager , STRING ) ) ; Person org.springframework.orm.jpa.Person = new Person ( ) ; org.springframework.orm.jpa.Person . setFirstName ( STRING ) ; org.springframework.orm.jpa.Person . setLastName ( STRING ) ; org.springframework.orm.jpa.EntityManager . persist ( org.springframework.orm.jpa.Person ) ; org.springframework.orm.jpa.EntityManager . flush ( ) ; assertEquals ( STRING , NUMBER , countRowsInTable ( org.springframework.orm.jpa.EntityManager , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.EntityManager = createContainerManagedEntityManager ( ) ; void ( org.springframework.orm.jpa.EntityManager ) ; endTransaction ( ) ; startNewTransaction ( ) ; assertFalse ( org.springframework.orm.jpa.EntityManager . contains ( new Person ( ) ) ) ; void ( org.springframework.orm.jpa.EntityManager ) ; setComplete ( ) ; endTransaction ( ) ; assertEquals ( STRING , NUMBER , countRowsInTable ( org.springframework.orm.jpa.EntityManager , STRING ) ) ; deleteFromTables ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.EntityManager = createContainerManagedEntityManager ( ) ; void ( org.springframework.orm.jpa.EntityManager ) ; endTransaction ( ) ; assertEquals ( STRING , NUMBER , countRowsInTable ( org.springframework.orm.jpa.EntityManager , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.EntityManager = createContainerManagedEntityManager ( ) ; void ( org.springframework.orm.jpa.EntityManager ) ; setComplete ( ) ; endTransaction ( ) ; assertEquals ( STRING , NUMBER , countRowsInTable ( org.springframework.orm.jpa.EntityManager , STRING ) ) ; deleteFromTables ( STRING ) ; }  <METHOD_END>
