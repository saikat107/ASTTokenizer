<METHOD_START> public void ( SubscribableChannel org.springframework.messaging.simp.user.SubscribableChannel , SubscribableChannel org.springframework.messaging.simp.user.SubscribableChannel , UserDestinationResolver org.springframework.messaging.simp.user.UserDestinationResolver ) { Assert . notNull ( org.springframework.messaging.simp.user.SubscribableChannel , STRING ) ; Assert . notNull ( org.springframework.messaging.simp.user.SubscribableChannel , STRING ) ; Assert . notNull ( org.springframework.messaging.simp.user.UserDestinationResolver , STRING ) ; this . org.springframework.messaging.simp.user.SubscribableChannel = org.springframework.messaging.simp.user.SubscribableChannel ; this . org.springframework.messaging.simp.user.SubscribableChannel = org.springframework.messaging.simp.user.SubscribableChannel ; this . org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> = new SimpMessagingTemplate ( org.springframework.messaging.simp.user.SubscribableChannel ) ; this . org.springframework.messaging.simp.user.UserDestinationResolver = org.springframework.messaging.simp.user.UserDestinationResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.user.UserDestinationResolver org.springframework.messaging.simp.user.UserDestinationResolver ( ) { return this . org.springframework.messaging.simp.user.UserDestinationResolver ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.messaging.simp.user.UserDestinationMessageHandler.BroadcastHandler = ( StringUtils . hasText ( java.lang.String ) ? new org.springframework.messaging.simp.user.UserDestinationMessageHandler.BroadcastHandler ( this . org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> , java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . org.springframework.messaging.simp.user.UserDestinationMessageHandler.BroadcastHandler != null ? this . org.springframework.messaging.simp.user.UserDestinationMessageHandler.BroadcastHandler . java.lang.String ( ) : null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> < java.lang.String > org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> ( ) { return this . org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHeaderInitializer org.springframework.messaging.simp.user.MessageHeaderInitializer ) { this . org.springframework.messaging.simp.user.MessageHeaderInitializer = org.springframework.messaging.simp.user.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.user.MessageHeaderInitializer org.springframework.messaging.simp.user.MessageHeaderInitializer ( ) { return this . org.springframework.messaging.simp.user.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Integer . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { synchronized ( this . java.lang.Object ) { this . org.springframework.messaging.simp.user.SubscribableChannel . subscribe ( this ) ; this . org.springframework.messaging.simp.user.SubscribableChannel . subscribe ( this ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { synchronized ( this . java.lang.Object ) { this . boolean = false ; this . org.springframework.messaging.simp.user.SubscribableChannel . unsubscribe ( this ) ; this . org.springframework.messaging.simp.user.SubscribableChannel . unsubscribe ( this ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( java.lang.Runnable java.lang.Runnable ) { synchronized ( this . java.lang.Object ) { void ( ) ; java.lang.Runnable . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . boolean ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.simp.user.Message<?> ) throws org.springframework.messaging.simp.user.MessagingException { if ( this . org.springframework.messaging.simp.user.UserDestinationMessageHandler.BroadcastHandler != null ) { org.springframework.messaging.simp.user.Message<?> = this . org.springframework.messaging.simp.user.UserDestinationMessageHandler.BroadcastHandler . org.springframework.messaging.simp.user.Message<?> ( org.springframework.messaging.simp.user.Message<> ) ; if ( org.springframework.messaging.simp.user.Message<> == null ) { return; } } UserDestinationResult org.springframework.messaging.simp.user.UserDestinationResult = this . org.springframework.messaging.simp.user.UserDestinationResolver . resolveDestination ( org.springframework.messaging.simp.user.Message<> ) ; if ( org.springframework.messaging.simp.user.UserDestinationResult == null ) { return; } if ( org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) . isEmpty ( ) ) { if ( org.springframework.messaging.simp.user.Log . isTraceEnabled ( ) ) { org.springframework.messaging.simp.user.Log . trace ( STRING + org.springframework.messaging.simp.user.UserDestinationResult . getSourceDestination ( ) ) ; } if ( this . org.springframework.messaging.simp.user.UserDestinationMessageHandler.BroadcastHandler != null ) { this . org.springframework.messaging.simp.user.UserDestinationMessageHandler.BroadcastHandler . void ( org.springframework.messaging.simp.user.Message<> ) ; } return; } SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.user.Message<> ) ; void ( org.springframework.messaging.simp.user.SimpMessageHeaderAccessor ) ; org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setNativeHeader ( SimpMessageHeaderAccessor . ORIGINAL_DESTINATION , org.springframework.messaging.simp.user.UserDestinationResult . getSubscribeDestination ( ) ) ; org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; org.springframework.messaging.simp.user.Message<?> = MessageBuilder . createMessage ( org.springframework.messaging.simp.user.Message<> . getPayload ( ) , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; if ( org.springframework.messaging.simp.user.Log . isTraceEnabled ( ) ) { org.springframework.messaging.simp.user.Log . trace ( STRING + org.springframework.messaging.simp.user.UserDestinationResult . getSourceDestination ( ) + STRING + org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) ) ; } for ( java.lang.String java.lang.String : org.springframework.messaging.simp.user.UserDestinationResult . getTargetDestinations ( ) ) { this . org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> . send ( java.lang.String , org.springframework.messaging.simp.user.Message<> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor ) { if ( org.springframework.messaging.simp.user.MessageHeaderInitializer ( ) != null ) { org.springframework.messaging.simp.user.MessageHeaderInitializer ( ) . initHeaders ( org.springframework.messaging.simp.user.SimpMessageHeaderAccessor ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.messaging.simp.user.UserDestinationResolver + STRING ; }  <METHOD_END>
<METHOD_START> public void ( MessageSendingOperations < java.lang.String > org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> , java.lang.String java.lang.String ) { this . org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> = org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.user.Message<?> < ? > org.springframework.messaging.simp.user.Message<?> ( Message < ? > org.springframework.messaging.simp.user.Message<?> ) throws org.springframework.messaging.simp.user.MessagingException { java.lang.String java.lang.String = SimpMessageHeaderAccessor . getDestination ( org.springframework.messaging.simp.user.Message<> . getHeaders ( ) ) ; if ( ! java.lang.String ( ) . boolean ( java.lang.String ) ) { return org.springframework.messaging.simp.user.Message<> ; } SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.user.Message<> , SimpMessageHeaderAccessor .class ) ; if ( org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getSessionId ( ) == null ) { return null ; } java.lang.String = org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getFirstNativeHeader ( SimpMessageHeaderAccessor . ORIGINAL_DESTINATION ) ; if ( org.springframework.messaging.simp.user.Log . isTraceEnabled ( ) ) { org.springframework.messaging.simp.user.Log . trace ( STRING + java.lang.String ) ; } SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; for ( java.lang.String java.lang.String : org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . toNativeHeaderMap ( ) . keySet ( ) ) { if ( java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { continue; } org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setNativeHeader ( java.lang.String , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getFirstNativeHeader ( java.lang.String ) ) ; } org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . IGNORE_ERROR , true ) ; return MessageBuilder . createMessage ( org.springframework.messaging.simp.user.Message<> . getPayload ( ) , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.messaging.simp.user.Message<?> ) { MessageHeaders org.springframework.messaging.simp.user.MessageHeaders = org.springframework.messaging.simp.user.Message<> . getHeaders ( ) ; if ( SimpMessageHeaderAccessor . getFirstNativeHeader ( SimpMessageHeaderAccessor . ORIGINAL_DESTINATION , org.springframework.messaging.simp.user.MessageHeaders ) != null ) { return; } SimpMessageHeaderAccessor org.springframework.messaging.simp.user.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.user.Message<> ) ; java.lang.String java.lang.String = org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getDestination ( ) ; org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setNativeHeader ( SimpMessageHeaderAccessor . ORIGINAL_DESTINATION , java.lang.String ) ; org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; org.springframework.messaging.simp.user.Message<?> = MessageBuilder . createMessage ( org.springframework.messaging.simp.user.Message<> . getPayload ( ) , org.springframework.messaging.simp.user.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; if ( org.springframework.messaging.simp.user.Log . isTraceEnabled ( ) ) { org.springframework.messaging.simp.user.Log . trace ( STRING + java.lang.String + STRING + java.lang.String ( ) ) ; } this . org.springframework.messaging.simp.user.MessageSendingOperations<java.lang.String> . send ( java.lang.String ( ) , org.springframework.messaging.simp.user.Message<> ) ; }  <METHOD_END>
