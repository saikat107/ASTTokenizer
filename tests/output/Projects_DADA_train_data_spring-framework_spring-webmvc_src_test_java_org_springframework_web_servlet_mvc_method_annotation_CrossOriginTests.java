<METHOD_START> @ Before public void void ( ) { StaticWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) ; org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , PropertySourcesPlaceholderConfigurer .class ) ; org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . refresh ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . setRemoveSemicolonContent ( false ) ; org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . getAutowireCapableBeanFactory ( ) . initializeBean ( this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedHeaders ( ) . toArray ( ) ) ; assertTrue ( CollectionUtils . isEmpty ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getExposedHeaders ( ) ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getMaxAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedHeaders ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getExposedHeaders ( ) . toArray ( ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getMaxAge ( ) ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.web.servlet.mvc.method.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.web.servlet.mvc.method.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelControllerWithBogusAllowCredentialsValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.ClassLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.ClassLevelMappingWithComposedAnnotation ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelMappingWithComposedAnnotation ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , false ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , true ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedHeaders ( ) . toArray ( ) ) ; assertTrue ( CollectionUtils . isEmpty ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getExposedHeaders ( ) ) ) ; assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getMaxAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , true ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedHeaders ( ) . toArray ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; assertTrue ( CollectionUtils . isEmpty ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getExposedHeaders ( ) ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getMaxAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . void ( new org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.MethodLevelController ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setRequestURI ( STRING ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration = org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , true ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedMethods ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedOrigins ( ) . toArray ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowedHeaders ( ) . toArray ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getAllowCredentials ( ) ) ; assertTrue ( CollectionUtils . isEmpty ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getExposedHeaders ( ) ) ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration . getMaxAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; assertNull ( this . org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.TestRequestMappingInfoHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration org.springframework.web.servlet.mvc.method.annotation.CorsConfiguration ( HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain , boolean boolean ) { if ( boolean ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain . getHandler ( ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) . boolean ( STRING ) ) ; DirectFieldAccessor org.springframework.web.servlet.mvc.method.annotation.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; return ( CorsConfiguration ) org.springframework.web.servlet.mvc.method.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; } else { HandlerInterceptor [] org.springframework.web.servlet.mvc.method.annotation.HandlerInterceptor[] = org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain . getInterceptors ( ) ; if ( org.springframework.web.servlet.mvc.method.annotation.HandlerInterceptor[] != null ) { for ( HandlerInterceptor org.springframework.web.servlet.mvc.method.annotation.HandlerInterceptor : org.springframework.web.servlet.mvc.method.annotation.HandlerInterceptor[] ) { if ( org.springframework.web.servlet.mvc.method.annotation.HandlerInterceptor . getClass ( ) . getSimpleName ( ) . equals ( STRING ) ) { DirectFieldAccessor org.springframework.web.servlet.mvc.method.annotation.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.web.servlet.mvc.method.annotation.HandlerInterceptor ) ; return ( CorsConfiguration ) org.springframework.web.servlet.mvc.method.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; } } } } return null ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . POST ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ RequestMapping ( path = STRING , method = RequestMethod . GET , params = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ RequestMapping ( path = STRING , method = RequestMethod . GET , headers = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ RequestMapping ( path = STRING , method = RequestMethod . GET , headers = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ RequestMapping ( path = STRING , method = RequestMethod . GET , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin @ RequestMapping ( path = STRING , method = RequestMethod . GET , produces = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ CrossOrigin ( origins = { STRING , STRING } , allowedHeaders = { STRING , STRING } , exposedHeaders = { STRING , STRING } , methods = RequestMethod . DELETE , maxAge = NUMBER , allowCredentials = STRING ) @ RequestMapping ( path = STRING , method = { RequestMethod . GET , RequestMethod . POST } ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin ( STRING ) @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin ( STRING ) @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin ( allowCredentials = STRING ) @ RequestMapping ( STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ CrossOrigin ( allowCredentials = STRING ) @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping ( path = STRING , method = RequestMethod . GET ) @ org.springframework.web.servlet.mvc.method.annotation.CrossOriginTests.ComposedCrossOrigin ( java.lang.String[] = STRING , java.lang.String = STRING ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { super. detectHandlerMethods ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return AnnotationUtils . findAnnotation ( java.lang.Class<> , Controller .class ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo org.springframework.web.servlet.mvc.method.annotation.RequestMappingInfo ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { RequestMapping org.springframework.web.servlet.mvc.method.annotation.RequestMapping = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , RequestMapping .class ) ; if ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping != null ) { return new RequestMappingInfo ( new PatternsRequestCondition ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . value ( ) , getUrlPathHelper ( ) , getPathMatcher ( ) , true , true ) , new RequestMethodsRequestCondition ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . method ( ) ) , new ParamsRequestCondition ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . params ( ) ) , new HeadersRequestCondition ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . headers ( ) ) , new ConsumesRequestCondition ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . consumes ( ) , org.springframework.web.servlet.mvc.method.annotation.RequestMapping . headers ( ) ) , new ProducesRequestCondition ( org.springframework.web.servlet.mvc.method.annotation.RequestMapping . produces ( ) , org.springframework.web.servlet.mvc.method.annotation.RequestMapping . headers ( ) ) , null ) ; } else { return null ; } }  <METHOD_END>
