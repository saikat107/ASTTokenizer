<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.dispatcher.MessageChannel = ( MessageChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getRollbackCount ( ) ) ; org.springframework.integration.dispatcher.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.dispatcher.TestTransactionManager . waitForCompletion ( NUMBER ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getRollbackCount ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; PollingConsumer org.springframework.integration.dispatcher.PollingConsumer = org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING , PollingConsumer .class ) ; java.util.List<org.springframework.integration.dispatcher.Advice> < Advice > java.util.List<org.springframework.integration.dispatcher.Advice> = TestUtils . getPropertyValue ( org.springframework.integration.dispatcher.PollingConsumer , STRING , java.util.List .class ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.dispatcher.Advice> . size ( ) ) ; java.lang.Runnable java.lang.Runnable = TestUtils . getPropertyValue ( org.springframework.integration.dispatcher.PollingConsumer , STRING , java.lang.Runnable .class ) ; java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> = TestUtils . getPropertyValue ( java.lang.Runnable , STRING , java.util.concurrent.Callable .class ) ; assertTrue ( STRING , java.util.concurrent.Callable<> instanceof Advised ) ; Advisor [] org.springframework.integration.dispatcher.Advisor[] = ( ( Advised ) java.util.concurrent.Callable<> ) . getAdvisors ( ) ; assertEquals ( NUMBER , advisors . length ) ; assertTrue ( STRING , ( ( DefaultPointcutAdvisor ) org.springframework.integration.dispatcher.Advisor[] [ NUMBER ] ) . getAdvice ( ) instanceof TransactionInterceptor ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.dispatcher.MessageChannel = ( MessageChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getRollbackCount ( ) ) ; org.springframework.integration.dispatcher.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.dispatcher.TestTransactionManager . waitForCompletion ( NUMBER ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getRollbackCount ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; MessageChannel org.springframework.integration.dispatcher.MessageChannel = ( MessageChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getRollbackCount ( ) ) ; org.springframework.integration.dispatcher.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.dispatcher.TestTransactionManager . waitForCompletion ( NUMBER ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.dispatcher.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getRollbackCount ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; org.springframework.integration.dispatcher.TestTransactionManager . waitForCompletion ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertEquals ( Propagation . REQUIRED . value ( ) , org.springframework.integration.dispatcher.TestTransactionManager . getLastDefinition ( ) . getPropagationBehavior ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; org.springframework.integration.dispatcher.TestTransactionManager . waitForCompletion ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertEquals ( Propagation . REQUIRES_NEW . value ( ) , org.springframework.integration.dispatcher.TestTransactionManager . getLastDefinition ( ) . getPropagationBehavior ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertNull ( org.springframework.integration.dispatcher.TestTransactionManager . getLastDefinition ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; assertNull ( org.springframework.integration.dispatcher.TestTransactionManager . getLastDefinition ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.dispatcher.Message<> . getPayload ( ) ; assertEquals ( MessagingException .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; MessagingException org.springframework.integration.dispatcher.MessagingException = ( MessagingException ) java.lang.Object ; assertEquals ( IllegalTransactionStateException .class , org.springframework.integration.dispatcher.MessagingException . getCause ( ) . getClass ( ) ) ; assertNull ( org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.PollingTransactionTests> ( ) ) ; TestTransactionManager org.springframework.integration.dispatcher.TestTransactionManager = ( TestTransactionManager ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.dispatcher.PollableChannel = ( PollableChannel ) org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.PollableChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.dispatcher.Message<> . getPayload ( ) ; assertEquals ( MessagingException .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; MessagingException org.springframework.integration.dispatcher.MessagingException = ( MessagingException ) java.lang.Object ; assertEquals ( IllegalTransactionStateException .class , org.springframework.integration.dispatcher.MessagingException . getCause ( ) . getClass ( ) ) ; assertNotNull ( org.springframework.integration.dispatcher.MessagingException . getFailedMessage ( ) ) ; assertNotNull ( org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.PollableChannel . send ( new GenericMessage <> ( STRING ) ) ; org.springframework.integration.dispatcher.Message<?> = org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dispatcher.Message<> ) ; java.lang.Object = org.springframework.integration.dispatcher.Message<> . getPayload ( ) ; assertEquals ( MessageHandlingException .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.integration.dispatcher.MessagingException = ( MessageHandlingException ) java.lang.Object ; assertEquals ( java.lang.RuntimeException .class , org.springframework.integration.dispatcher.MessagingException . getCause ( ) . getClass ( ) ) ; assertNotNull ( org.springframework.integration.dispatcher.MessagingException . getFailedMessage ( ) ) ; assertNull ( org.springframework.integration.dispatcher.PollableChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.dispatcher.TestTransactionManager . getCommitCount ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.integration.dispatcher.MethodInvocation ) throws java.lang.Throwable { return org.springframework.integration.dispatcher.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.integration.dispatcher.DefaultTransactionStatus ) throws org.springframework.integration.dispatcher.TransactionException { throw new IllegalTransactionStateException ( STRING ) ; }  <METHOD_END>
