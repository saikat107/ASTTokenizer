<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this( java.lang.String[] , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { this( java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ( java.lang.String[] , java.lang.String[] ) ); }  <METHOD_END>
<METHOD_START> private void ( java.util.Collection<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> < org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression > java.util.Collection<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ) { this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> = new java.util.ArrayList<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> <> ( java.util.Collection<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ) ; java.util.Collections . void ( this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> < org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression > java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> < org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression > java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> = new java.util.LinkedHashSet<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> <> ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { HeaderExpression org.springframework.web.servlet.mvc.condition.HeaderExpression = new HeaderExpression ( java.lang.String ) ; if ( STRING . boolean ( expr . name ) ) { for ( MediaType org.springframework.web.servlet.mvc.condition.MediaType : MediaType . parseMediaTypes ( expr . value ) ) { java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( new org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression ( org.springframework.web.servlet.mvc.condition.MediaType , expr . isNegated ) ) ; } } } } if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( new org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression ( java.lang.String ) ) ; } } return java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.servlet.mvc.condition.MediaTypeExpression> < MediaTypeExpression > java.util.Set<org.springframework.web.servlet.mvc.condition.MediaTypeExpression> ( ) { return new java.util.LinkedHashSet <> ( this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.web.servlet.mvc.condition.MediaType> < MediaType > java.util.Set<org.springframework.web.servlet.mvc.condition.MediaType> ( ) { java.util.Set<org.springframework.web.servlet.mvc.condition.MediaType> < MediaType > java.util.Set<org.springframework.web.servlet.mvc.condition.MediaType> = new java.util.LinkedHashSet<org.springframework.web.servlet.mvc.condition.MediaType> <> ( ) ; for ( org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression : this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ) { if ( ! org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression . isNegated ( ) ) { java.util.Set<org.springframework.web.servlet.mvc.condition.MediaType> . add ( org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression . getMediaType ( ) ) ; } } return java.util.Set<org.springframework.web.servlet.mvc.condition.MediaType> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> < org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression > java.util.Collection<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ( ) { return this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition ( org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition ) { return ! org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( ) ? org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition : this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition ( HttpServletRequest org.springframework.web.servlet.mvc.condition.HttpServletRequest ) { if ( CorsUtils . isPreFlightRequest ( org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) { return org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition ; } if ( boolean ( ) ) { return this ; } MediaType org.springframework.web.servlet.mvc.condition.MediaType ; try { org.springframework.web.servlet.mvc.condition.MediaType = StringUtils . hasLength ( org.springframework.web.servlet.mvc.condition.HttpServletRequest . getContentType ( ) ) ? MediaType . parseMediaType ( org.springframework.web.servlet.mvc.condition.HttpServletRequest . getContentType ( ) ) : MediaType . APPLICATION_OCTET_STREAM ; } catch ( InvalidMediaTypeException org.springframework.web.servlet.mvc.condition.InvalidMediaTypeException ) { return null ; } java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> < org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression > java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> = new java.util.LinkedHashSet<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> <> ( this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ) ; for ( java.util.Iterator<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> < org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression > java.util.Iterator<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> = java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . java.util.Iterator<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ( ) ; java.util.Iterator<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( ) ;) { org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression = java.util.Iterator<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression ( ) ; if ( ! org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression . boolean ( org.springframework.web.servlet.mvc.condition.MediaType ) ) { java.util.Iterator<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . void ( ) ; } } return ( java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( ) ) ? null : new org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition ( java.util.Set<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition , HttpServletRequest org.springframework.web.servlet.mvc.condition.HttpServletRequest ) { if ( this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( ) && org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( ) ) { return NUMBER ; } else if ( this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( ) ) { return NUMBER ; } else if ( org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . boolean ( ) ) { return - NUMBER ; } else { return this . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression ( NUMBER ) . compareTo ( org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition . java.util.List<org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> . org.springframework.web.servlet.mvc.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> void ( MediaType org.springframework.web.servlet.mvc.condition.MediaType , boolean boolean ) { super( org.springframework.web.servlet.mvc.condition.MediaType , boolean ); }  <METHOD_END>
<METHOD_START> public final boolean boolean ( MediaType org.springframework.web.servlet.mvc.condition.MediaType ) { boolean boolean = getMediaType ( ) . includes ( org.springframework.web.servlet.mvc.condition.MediaType ) ; return ( ! isNegated ( ) ? boolean : ! boolean ) ; }  <METHOD_END>
