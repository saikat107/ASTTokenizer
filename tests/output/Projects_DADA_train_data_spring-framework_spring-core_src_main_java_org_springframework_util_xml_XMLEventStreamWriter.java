<METHOD_START> public void ( javax.xml.stream.XMLEventWriter javax.xml.stream.XMLEventWriter , javax.xml.stream.XMLEventFactory javax.xml.stream.XMLEventFactory ) { Assert . notNull ( javax.xml.stream.XMLEventWriter , STRING ) ; Assert . notNull ( javax.xml.stream.XMLEventFactory , STRING ) ; this . javax.xml.stream.XMLEventWriter = javax.xml.stream.XMLEventWriter ; this . javax.xml.stream.XMLEventFactory = javax.xml.stream.XMLEventFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax.xml.namespace.NamespaceContext javax.xml.namespace.NamespaceContext ) throws javax.xml.stream.XMLStreamException { this . javax.xml.stream.XMLEventWriter . void ( javax.xml.namespace.NamespaceContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.xml.namespace.NamespaceContext javax.xml.namespace.NamespaceContext ( ) { return this . javax.xml.stream.XMLEventWriter . javax.xml.namespace.NamespaceContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { this . javax.xml.stream.XMLEventWriter . void ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { return this . javax.xml.stream.XMLEventWriter . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { this . javax.xml.stream.XMLEventWriter . void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { throw new java.lang.IllegalArgumentException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.StartDocument ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.StartDocument ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.StartDocument ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.StartElement ( new javax.xml.namespace.QName ( java.lang.String ) , null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.StartElement ( new javax.xml.namespace.QName ( java.lang.String , java.lang.String ) , null , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.StartElement ( new javax.xml.namespace.QName ( java.lang.String , java.lang.String , java.lang.String ) , null , null ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.StartElement javax.xml.stream.events.StartElement ) throws javax.xml.stream.XMLStreamException { this . javax.xml.stream.XMLEventWriter . void ( javax.xml.stream.events.StartElement ) ; this . java.util.List<javax.xml.stream.events.EndElement> . boolean ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.EndElement ( javax.xml.stream.events.StartElement . javax.xml.namespace.QName ( ) , javax.xml.stream.events.StartElement . java.util.Iterator ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; void ( java.lang.String ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; void ( java.lang.String , java.lang.String ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; void ( java.lang.String , java.lang.String , java.lang.String ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> private void void ( ) javax.xml.stream.XMLStreamException { if ( this . boolean ) { this . boolean = false ; void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.xml.stream.XMLStreamException { void ( ) ; int int = this . java.util.List<javax.xml.stream.events.EndElement> . int ( ) - NUMBER ; javax.xml.stream.events.EndElement javax.xml.stream.events.EndElement = this . java.util.List<javax.xml.stream.events.EndElement> . javax.xml.stream.events.EndElement ( int ) ; this . javax.xml.stream.XMLEventWriter . void ( javax.xml.stream.events.EndElement ) ; this . java.util.List<javax.xml.stream.events.EndElement> . javax.xml.stream.events.EndElement ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Attribute ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Attribute ( new javax.xml.namespace.QName ( java.lang.String , java.lang.String ) , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String )			throws javax.xml.stream.XMLStreamException { this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Attribute ( java.lang.String , java.lang.String , java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Namespace ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Namespace ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( javax.xml.stream.events.Namespace javax.xml.stream.events.Namespace ) throws javax.xml.stream.XMLStreamException { int int = this . java.util.List<javax.xml.stream.events.EndElement> . int ( ) - NUMBER ; javax.xml.stream.events.EndElement javax.xml.stream.events.EndElement = this . java.util.List<javax.xml.stream.events.EndElement> . javax.xml.stream.events.EndElement ( int ) ; java.util.Iterator java.util.Iterator = javax.xml.stream.events.EndElement . java.util.Iterator ( ) ; java.util.List<javax.xml.stream.events.Namespace> < javax.xml.stream.events.Namespace > java.util.List<javax.xml.stream.events.Namespace> = new java.util.ArrayList<javax.xml.stream.events.Namespace> <> ( ) ; while ( java.util.Iterator . boolean ( ) ) { javax.xml.stream.events.Namespace javax.xml.stream.events.Namespace = ( javax.xml.stream.events.Namespace ) java.util.Iterator . java.lang.Object ( ) ; java.util.List<javax.xml.stream.events.Namespace> . boolean ( javax.xml.stream.events.Namespace ) ; } java.util.List<javax.xml.stream.events.Namespace> . boolean ( javax.xml.stream.events.Namespace ) ; javax.xml.stream.events.EndElement javax.xml.stream.events.EndElement = this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.EndElement ( javax.xml.stream.events.EndElement . javax.xml.namespace.QName ( ) , java.util.List<javax.xml.stream.events.Namespace> . java.util.Iterator<javax.xml.stream.events.Namespace> ( ) ) ; this . javax.xml.stream.XMLEventWriter . void ( javax.xml.stream.events.Namespace ) ; this . java.util.List<javax.xml.stream.events.EndElement> . javax.xml.stream.events.EndElement ( int , javax.xml.stream.events.EndElement ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Characters ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( char [] char[] , int int , int int ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Characters ( new java.lang.String ( char[] , int , int ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Characters ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.Comment ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.ProcessingInstruction ( java.lang.String , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.ProcessingInstruction ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.DTD ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.EntityReference ( java.lang.String , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( this . javax.xml.stream.XMLEventFactory . javax.xml.stream.events.EndDocument ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.xml.stream.XMLStreamException { this . javax.xml.stream.XMLEventWriter . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.xml.stream.XMLStreamException { void ( ) ; this . javax.xml.stream.XMLEventWriter . void ( ) ; }  <METHOD_END>
