<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.mail.config.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.mail.config.MessagingTemplate . setDefaultDestination ( org.springframework.integration.mail.config.MessageChannel ) ; Message < ? > org.springframework.integration.mail.config.Message<?> = org.springframework.integration.mail.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.mail.config.Message<> . getHeaders ( ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . TO ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . CC ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . BCC ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . FROM ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . REPLY_TO ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . SUBJECT ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . ATTACHMENT_FILENAME ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . MULTIPART_MODE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.mail.config.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.mail.config.MessagingTemplate . setDefaultDestination ( org.springframework.integration.mail.config.MessageChannel ) ; Message < ? > org.springframework.integration.mail.config.Message<?> = org.springframework.integration.mail.config.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.mail.config.Message<> . getHeaders ( ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . TO ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . CC ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . BCC ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . FROM ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . REPLY_TO ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . SUBJECT ) ) ; }  <METHOD_END>
