<METHOD_START> public void ( ConversionService org.springframework.core.convert.support.ConversionService ) { this . org.springframework.core.convert.support.ConversionService = org.springframework.core.convert.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( new ConvertiblePair ( java.lang.Object .class , java.util.Optional .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( org.springframework.core.convert.support.TypeDescriptor . getResolvableType ( ) != null ) { return this . org.springframework.core.convert.support.ConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , new org.springframework.core.convert.support.ObjectToOptionalConverter.GenericTypeDescriptor ( org.springframework.core.convert.support.TypeDescriptor ) ) ; } else { return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( java.lang.Object == null ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; } else if ( java.lang.Object instanceof java.util.Optional ) { return java.lang.Object ; } else if ( org.springframework.core.convert.support.TypeDescriptor . getResolvableType ( ) != null ) { java.lang.Object java.lang.Object = this . org.springframework.core.convert.support.ConversionService . convert ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , new org.springframework.core.convert.support.ObjectToOptionalConverter.GenericTypeDescriptor ( org.springframework.core.convert.support.TypeDescriptor ) ) ; return java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ; } else { return java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public void ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { super( org.springframework.core.convert.support.TypeDescriptor . getResolvableType ( ) . getGeneric ( NUMBER ) , null , org.springframework.core.convert.support.TypeDescriptor . getAnnotations ( ) ); }  <METHOD_END>
