<METHOD_START> @ Test public void void ( ) { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; long long = java.lang.System . long ( ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . ID , java.util.UUID ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . TIMESTAMP , long ) ; MutableMessage < java.lang.Object > org.springframework.integration.support.MutableMessage<java.lang.Object> = new MutableMessage <> ( java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> ) ; MutableMessageHeaders org.springframework.integration.support.MutableMessageHeaders = org.springframework.integration.support.MutableMessage<java.lang.Object> . getHeaders ( ) ; assertThat ( org.springframework.integration.support.MutableMessageHeaders . getRawHeaders ( ) , hasEntry ( MessageHeaders . ID , ( java.lang.Object ) java.util.UUID ) ) ; assertThat ( org.springframework.integration.support.MutableMessageHeaders . getRawHeaders ( ) , hasEntry ( MessageHeaders . TIMESTAMP , ( java.lang.Object ) long ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; MutableMessage < java.lang.Object > org.springframework.integration.support.MutableMessage<java.lang.Object> = new MutableMessage <> ( java.lang.Object , java.util.Map<java.lang.String,java.lang.Object> ) ; MutableMessageHeaders org.springframework.integration.support.MutableMessageHeaders = org.springframework.integration.support.MutableMessage<java.lang.Object> . getHeaders ( ) ; org.springframework.integration.support.MutableMessageHeaders . put ( STRING , STRING ) ; org.springframework.integration.support.MutableMessageHeaders . put ( STRING , STRING ) ; org.springframework.integration.support.MutableMessageHeaders . remove ( STRING ) ; org.springframework.integration.support.MutableMessageHeaders . putAll ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertThat ( org.springframework.integration.support.MutableMessageHeaders . getRawHeaders ( ) , hasEntry ( STRING , ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
