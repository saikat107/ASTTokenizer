<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.gateway.MessagingGatewaySupport = new MessagingGatewaySupport ( ) { } ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setRequestChannel ( org.springframework.integration.gateway.MessageChannel ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setReplyChannel ( org.springframework.integration.gateway.PollableChannel ) ; TestApplicationContext org.springframework.integration.gateway.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setBeanFactory ( org.springframework.integration.gateway.TestApplicationContext ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setCountsEnabled ( true ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . afterPropertiesSet ( ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . start ( ) ; org.springframework.integration.gateway.TestApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.integration.gateway.MessageChannel . send ( org.springframework.integration.gateway.Message , NUMBER ) ) . thenReturn ( true ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . send ( org.springframework.integration.gateway.Message ) ; Mockito . verify ( org.springframework.integration.gateway.MessageChannel ) . send ( org.springframework.integration.gateway.Message , NUMBER ) ; assertEquals ( NUMBER , this . org.springframework.integration.gateway.MessagingGatewaySupport . getMessageCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { Mockito . when ( org.springframework.integration.gateway.Message . getHeaders ( ) ) . thenReturn ( new MessageHeaders ( null ) ) ; Mockito . when ( org.springframework.integration.gateway.MessageChannel . send ( org.springframework.integration.gateway.Message , NUMBER ) ) . thenReturn ( false ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . send ( org.springframework.integration.gateway.Message ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . doAnswer ( invocation -> { assertEquals ( STRING , ( ( Message < ? > ) invocation . getArguments ( ) [ NUMBER ] ) . getPayload ( ) ) ; return true ; } ) . when ( org.springframework.integration.gateway.MessageChannel ) . send ( Mockito . any ( Message .class ) , Mockito . eq ( NUMBER ) ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . send ( STRING ) ; Mockito . verify ( org.springframework.integration.gateway.MessageChannel ) . send ( Mockito . any ( Message .class ) , Mockito . eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { Mockito . doAnswer ( invocation -> { assertEquals ( STRING , ( ( Message < ? > ) invocation . getArguments ( ) [ NUMBER ] ) . getPayload ( ) ) ; return false ; } ) . when ( org.springframework.integration.gateway.MessageChannel ) . send ( Mockito . any ( Message .class ) , Mockito . eq ( NUMBER ) ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . send ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { this . org.springframework.integration.gateway.MessagingGatewaySupport . send ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.integration.gateway.PollableChannel . receive ( NUMBER ) ) . thenReturn ( org.springframework.integration.gateway.Message ) ; Mockito . when ( org.springframework.integration.gateway.Message . getPayload ( ) ) . thenReturn ( STRING ) ; assertEquals ( STRING , this . org.springframework.integration.gateway.MessagingGatewaySupport . receive ( ) ) ; Mockito . verify ( org.springframework.integration.gateway.PollableChannel ) . receive ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.integration.gateway.PollableChannel . receive ( NUMBER ) ) . thenReturn ( null ) ; assertNull ( this . org.springframework.integration.gateway.MessagingGatewaySupport . receive ( ) ) ; Mockito . verify ( org.springframework.integration.gateway.PollableChannel ) . receive ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.integration.gateway.PollableChannel . receive ( NUMBER ) ) . thenReturn ( org.springframework.integration.gateway.Message ) ; Mockito . when ( org.springframework.integration.gateway.Message . getPayload ( ) ) . thenReturn ( STRING ) ; Mockito . doAnswer ( invocation -> { Message < ? > message = ( Message < ? > ) invocation . getArguments ( ) [ NUMBER ] ; MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( message ) ; return true ; } ) . when ( org.springframework.integration.gateway.MessageChannel ) . send ( Mockito . any ( Message .class ) , Mockito . anyLong ( ) ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setReplyTimeout ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.gateway.MessagingGatewaySupport . sendAndReceive ( STRING ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . ID , java.util.UUID . java.util.UUID ( ) ) ; MessageHeaders org.springframework.integration.gateway.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; Mockito . when ( org.springframework.integration.gateway.PollableChannel . receive ( NUMBER ) ) . thenReturn ( org.springframework.integration.gateway.Message ) ; Mockito . when ( org.springframework.integration.gateway.Message . getHeaders ( ) ) . thenReturn ( org.springframework.integration.gateway.MessageHeaders ) ; Mockito . when ( org.springframework.integration.gateway.Message . getPayload ( ) ) . thenReturn ( STRING ) ; Mockito . doAnswer ( invocation -> { Message < ? > message = ( Message < ? > ) invocation . getArguments ( ) [ NUMBER ] ; MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( message ) ; return true ; } ) . when ( org.springframework.integration.gateway.MessageChannel ) . send ( Mockito . any ( Message .class ) , Mockito . anyLong ( ) ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setReplyTimeout ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.gateway.MessagingGatewaySupport . sendAndReceive ( org.springframework.integration.gateway.Message ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { this . org.springframework.integration.gateway.MessagingGatewaySupport . sendAndReceive ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.integration.gateway.Message . getPayload ( ) ) . thenReturn ( STRING ) ; Mockito . when ( org.springframework.integration.gateway.PollableChannel . receive ( NUMBER ) ) . thenReturn ( org.springframework.integration.gateway.Message ) ; Mockito . doAnswer ( invocation -> { Message < ? > message = ( Message < ? > ) invocation . getArguments ( ) [ NUMBER ] ; MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( messageMock ) ; return true ; } ) . when ( org.springframework.integration.gateway.MessageChannel ) . send ( Mockito . any ( Message .class ) , Mockito . anyLong ( ) ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setReplyTimeout ( NUMBER ) ; Message < ? > org.springframework.integration.gateway.Message<?> = this . org.springframework.integration.gateway.MessagingGatewaySupport . sendAndReceiveMessage ( STRING ) ; assertSame ( org.springframework.integration.gateway.Message , org.springframework.integration.gateway.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . ID , java.util.UUID . java.util.UUID ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . REPLY_CHANNEL , org.springframework.integration.gateway.PollableChannel ) ; MessageHeaders org.springframework.integration.gateway.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; Mockito . when ( org.springframework.integration.gateway.PollableChannel . receive ( Mockito . anyLong ( ) ) ) . thenReturn ( org.springframework.integration.gateway.Message ) ; Mockito . when ( org.springframework.integration.gateway.Message . getHeaders ( ) ) . thenReturn ( org.springframework.integration.gateway.MessageHeaders ) ; Mockito . when ( org.springframework.integration.gateway.Message . getPayload ( ) ) . thenReturn ( STRING ) ; Mockito . doAnswer ( invocation -> { Message < ? > message = ( Message < ? > ) invocation . getArguments ( ) [ NUMBER ] ; MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( messageMock ) ; return true ; } ) . when ( org.springframework.integration.gateway.MessageChannel ) . send ( Mockito . any ( Message .class ) , Mockito . anyLong ( ) ) ; Message < ? > org.springframework.integration.gateway.Message<?> = this . org.springframework.integration.gateway.MessagingGatewaySupport . sendAndReceiveMessage ( org.springframework.integration.gateway.Message ) ; assertSame ( org.springframework.integration.gateway.Message , org.springframework.integration.gateway.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { this . org.springframework.integration.gateway.MessagingGatewaySupport . sendAndReceiveMessage ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { DirectChannel org.springframework.integration.gateway.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( message -> { throw new RuntimeException ( STRING ) ; } ) ; PublishSubscribeChannel org.springframework.integration.gateway.PublishSubscribeChannel = new PublishSubscribeChannel ( ) ; ServiceActivatingHandler org.springframework.integration.gateway.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.gateway.MessagingGatewayTests.MyErrorService ( ) ) ; org.springframework.integration.gateway.ServiceActivatingHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gateway.ServiceActivatingHandler . afterPropertiesSet ( ) ; org.springframework.integration.gateway.PublishSubscribeChannel . subscribe ( org.springframework.integration.gateway.ServiceActivatingHandler ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport = new MessagingGatewaySupport ( ) { } ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setRequestChannel ( org.springframework.integration.gateway.DirectChannel ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setErrorChannel ( org.springframework.integration.gateway.PublishSubscribeChannel ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setReplyChannel ( null ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setBeanFactory ( mock ( BeanFactory .class ) ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . afterPropertiesSet ( ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . start ( ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . sendAndReceiveMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestUtils . TestUtils TestUtils.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; TestUtils.TestApplicationContext . refresh ( ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( message -> { throw new RuntimeException ( STRING ) ; } ) ; PublishSubscribeChannel org.springframework.integration.gateway.PublishSubscribeChannel = new PublishSubscribeChannel ( ) ; ServiceActivatingHandler org.springframework.integration.gateway.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.gateway.MessagingGatewayTests.MyOneWayErrorService ( ) ) ; org.springframework.integration.gateway.ServiceActivatingHandler . setBeanFactory ( TestUtils.TestApplicationContext ) ; org.springframework.integration.gateway.ServiceActivatingHandler . afterPropertiesSet ( ) ; org.springframework.integration.gateway.PublishSubscribeChannel . subscribe ( org.springframework.integration.gateway.ServiceActivatingHandler ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport = new MessagingGatewaySupport ( ) { } ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setRequestChannel ( org.springframework.integration.gateway.DirectChannel ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setErrorChannel ( org.springframework.integration.gateway.PublishSubscribeChannel ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setReplyChannel ( null ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . setBeanFactory ( mock ( BeanFactory .class ) ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . afterPropertiesSet ( ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . start ( ) ; this . org.springframework.integration.gateway.MessagingGatewaySupport . send ( STRING ) ; TestUtils.TestApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( Message < ? > org.springframework.integration.gateway.Message<?> ) { return org.springframework.integration.gateway.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.gateway.Message<?> ) {		}  <METHOD_END>
