<METHOD_START> public void ( LockRepository org.springframework.integration.jdbc.lock.LockRepository ) { this . org.springframework.integration.jdbc.lock.LockRepository = org.springframework.integration.jdbc.lock.LockRepository ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object ) ; java.lang.String java.lang.String = java.lang.String ( ( java.lang.String ) java.lang.Object ) ; org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock = this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> . org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock ( java.lang.String ) ; if ( org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock == null ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> ) { org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock = this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> . org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock ( java.lang.String ) ; if ( org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock == null ) { org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock = new org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock ( this . org.springframework.integration.jdbc.lock.LockRepository , java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> . org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock ( java.lang.String , org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock ) ; } } } return org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String == null ? null : UUIDConverter . getUUID ( java.lang.String ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> < java.lang.String , org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock>> = this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock>> ( ) ; long long = java.lang.System . long ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock>> . boolean ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> < java.lang.String , org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock > java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock>> . java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> ( ) ; org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock = java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock> . org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock ( ) ; if ( long - org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock . long ( ) > long && ! org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock . boolean ( ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.lock.JdbcLockRegistry.JdbcLock>> . void ( ) ; } } } }  <METHOD_END>
<METHOD_START> void ( LockRepository org.springframework.integration.jdbc.lock.LockRepository , java.lang.String java.lang.String ) { this . org.springframework.integration.jdbc.lock.LockRepository = org.springframework.integration.jdbc.lock.LockRepository ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; while ( true ) { try { while ( ! boolean ( ) ) { java.lang.Thread . void ( NUMBER ) ; } break; } catch ( CannotSerializeTransactionException org.springframework.integration.jdbc.lock.CannotSerializeTransactionException ) { } catch ( TransactionTimedOutException org.springframework.integration.jdbc.lock.TransactionTimedOutException ) { } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } catch ( java.lang.Exception java.lang.Exception ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; void ( java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Exception java.lang.Exception ) { throw new CannotAcquireLockException ( STRING + this . java.lang.String , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.InterruptedException { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; while ( true ) { try { while ( ! boolean ( ) ) { java.lang.Thread . void ( NUMBER ) ; if ( java.lang.Thread . java.lang.Thread ( ) . boolean ( ) ) { throw new java.lang.InterruptedException ( ) ; } } break; } catch ( CannotSerializeTransactionException org.springframework.integration.jdbc.lock.CannotSerializeTransactionException ) { } catch ( TransactionTimedOutException org.springframework.integration.jdbc.lock.TransactionTimedOutException ) { } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw java.lang.InterruptedException ; } catch ( java.lang.Exception java.lang.Exception ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; void ( java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { try { return boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException { long long = java.lang.System . long ( ) ; if ( ! this . java.util.concurrent.locks.ReentrantLock . boolean ( long , java.util.concurrent.TimeUnit ) ) { return false ; } long long = long + java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( long , java.util.concurrent.TimeUnit ) ; boolean boolean ; while ( true ) { try { while ( ! ( boolean = boolean ( ) ) && java.lang.System . long ( ) < long ) { java.lang.Thread . void ( NUMBER ) ; } if ( ! boolean ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; } return boolean ; } catch ( CannotSerializeTransactionException org.springframework.integration.jdbc.lock.CannotSerializeTransactionException ) { } catch ( TransactionTimedOutException org.springframework.integration.jdbc.lock.TransactionTimedOutException ) { } catch ( java.lang.Exception java.lang.Exception ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; void ( java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { boolean boolean = this . org.springframework.integration.jdbc.lock.LockRepository . acquire ( this . java.lang.String ) ; if ( boolean ) { this . long = java.lang.System . long ( ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . java.util.concurrent.locks.ReentrantLock . boolean ( ) ) { throw new java.lang.IllegalMonitorStateException ( STRING + this . java.lang.String ) ; } if ( this . java.util.concurrent.locks.ReentrantLock . int ( ) > NUMBER ) { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; return; } try { this . org.springframework.integration.jdbc.lock.LockRepository . delete ( this . java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new DataAccessResourceFailureException ( STRING + this . java.lang.String , java.lang.Exception ) ; } finally { this . java.util.concurrent.locks.ReentrantLock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.locks.Condition java.util.concurrent.locks.Condition ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.integration.jdbc.lock.LockRepository . isAcquired ( this . java.lang.String ) ; }  <METHOD_END>
