<METHOD_START> public static void void ( ServletContext org.springframework.web.util.ServletContext ) throws java.lang.IllegalStateException { Assert . notNull ( org.springframework.web.util.ServletContext , STRING ) ; java.lang.String java.lang.String = org.springframework.web.util.ServletContext . getRealPath ( STRING ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.String java.lang.String = org.springframework.web.util.ServletContext . getInitParameter ( java.lang.String ) ; java.lang.String java.lang.String = ( java.lang.String != null ? java.lang.String : java.lang.String ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null && ! StringUtils . pathEquals ( java.lang.String , java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + java.lang.String + STRING + java.lang.String + STRING + STRING ) ; } java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; org.springframework.web.util.ServletContext . log ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ServletContext org.springframework.web.util.ServletContext ) { Assert . notNull ( org.springframework.web.util.ServletContext , STRING ) ; java.lang.String java.lang.String = org.springframework.web.util.ServletContext . getInitParameter ( java.lang.String ) ; java.lang.String java.lang.String = ( java.lang.String != null ? java.lang.String : java.lang.String ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Boolean java.lang.Boolean ( ServletContext org.springframework.web.util.ServletContext ) { if ( org.springframework.web.util.ServletContext == null ) { return null ; } java.lang.String java.lang.String = org.springframework.web.util.ServletContext . getInitParameter ( java.lang.String ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.Boolean . java.lang.Boolean ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Boolean java.lang.Boolean ( ServletContext org.springframework.web.util.ServletContext ) { if ( org.springframework.web.util.ServletContext == null ) { return null ; } java.lang.String java.lang.String = org.springframework.web.util.ServletContext . getInitParameter ( java.lang.String ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.Boolean . java.lang.Boolean ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> public static java.io.File java.io.File ( ServletContext org.springframework.web.util.ServletContext ) { Assert . notNull ( org.springframework.web.util.ServletContext , STRING ) ; return ( java.io.File ) org.springframework.web.util.ServletContext . getAttribute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ServletContext org.springframework.web.util.ServletContext , java.lang.String java.lang.String ) throws java.io.FileNotFoundException { Assert . notNull ( org.springframework.web.util.ServletContext , STRING ) ; if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } java.lang.String java.lang.String = org.springframework.web.util.ServletContext . getRealPath ( java.lang.String ) ; if ( java.lang.String == null ) { throw new java.io.FileNotFoundException ( STRING + java.lang.String + STRING + STRING ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( HttpServletRequest org.springframework.web.util.HttpServletRequest ) { Assert . notNull ( org.springframework.web.util.HttpServletRequest , STRING ) ; HttpSession org.springframework.web.util.HttpSession = org.springframework.web.util.HttpServletRequest . getSession ( false ) ; return ( org.springframework.web.util.HttpSession != null ? org.springframework.web.util.HttpSession . getId ( ) : null ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.web.util.HttpServletRequest , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.web.util.HttpServletRequest , STRING ) ; HttpSession org.springframework.web.util.HttpSession = org.springframework.web.util.HttpServletRequest . getSession ( false ) ; return ( org.springframework.web.util.HttpSession != null ? org.springframework.web.util.HttpSession . getAttribute ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( HttpServletRequest org.springframework.web.util.HttpServletRequest , java.lang.String java.lang.String )			throws java.lang.IllegalStateException { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.util.HttpServletRequest , java.lang.String ) ; if ( java.lang.Object == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static void void ( HttpServletRequest org.springframework.web.util.HttpServletRequest , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . notNull ( org.springframework.web.util.HttpServletRequest , STRING ) ; if ( java.lang.Object != null ) { org.springframework.web.util.HttpServletRequest . getSession ( ) . setAttribute ( java.lang.String , java.lang.Object ) ; } else { HttpSession org.springframework.web.util.HttpSession = org.springframework.web.util.HttpServletRequest . getSession ( false ) ; if ( org.springframework.web.util.HttpSession != null ) { org.springframework.web.util.HttpSession . removeAttribute ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( HttpSession org.springframework.web.util.HttpSession ) { Assert . notNull ( org.springframework.web.util.HttpSession , STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.util.HttpSession . getAttribute ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = org.springframework.web.util.HttpSession ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( ServletRequest org.springframework.web.util.ServletRequest , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( java.lang.Class<T> != null ) { if ( java.lang.Class<T> . boolean ( org.springframework.web.util.ServletRequest ) ) { return ( T ) org.springframework.web.util.ServletRequest ; } else if ( org.springframework.web.util.ServletRequest instanceof ServletRequestWrapper ) { return java.lang.Object ( ( ( ServletRequestWrapper ) org.springframework.web.util.ServletRequest ) . getRequest ( ) , java.lang.Class<T> ) ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( ServletResponse org.springframework.web.util.ServletResponse , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( java.lang.Class<T> != null ) { if ( java.lang.Class<T> . boolean ( org.springframework.web.util.ServletResponse ) ) { return ( T ) org.springframework.web.util.ServletResponse ; } else if ( org.springframework.web.util.ServletResponse instanceof ServletResponseWrapper ) { return java.lang.Object ( ( ( ServletResponseWrapper ) org.springframework.web.util.ServletResponse ) . getResponse ( ) , java.lang.Class<T> ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( ServletRequest org.springframework.web.util.ServletRequest ) { return ( org.springframework.web.util.ServletRequest . getAttribute ( java.lang.String ) != null ) ; }  <METHOD_END>
<METHOD_START> public static void void ( HttpServletRequest org.springframework.web.util.HttpServletRequest , java.lang.Throwable java.lang.Throwable , java.lang.String java.lang.String ) { void ( org.springframework.web.util.HttpServletRequest , java.lang.String , HttpServletResponse . SC_OK ) ; void ( org.springframework.web.util.HttpServletRequest , java.lang.String , java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; void ( org.springframework.web.util.HttpServletRequest , java.lang.String , java.lang.Throwable . java.lang.String ( ) ) ; void ( org.springframework.web.util.HttpServletRequest , java.lang.String , java.lang.Throwable ) ; void ( org.springframework.web.util.HttpServletRequest , java.lang.String , org.springframework.web.util.HttpServletRequest . getRequestURI ( ) ) ; void ( org.springframework.web.util.HttpServletRequest , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ServletRequest org.springframework.web.util.ServletRequest , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( org.springframework.web.util.ServletRequest . getAttribute ( java.lang.String ) == null ) { org.springframework.web.util.ServletRequest . setAttribute ( java.lang.String , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( HttpServletRequest org.springframework.web.util.HttpServletRequest ) { org.springframework.web.util.HttpServletRequest . removeAttribute ( java.lang.String ) ; org.springframework.web.util.HttpServletRequest . removeAttribute ( java.lang.String ) ; org.springframework.web.util.HttpServletRequest . removeAttribute ( java.lang.String ) ; org.springframework.web.util.HttpServletRequest . removeAttribute ( java.lang.String ) ; org.springframework.web.util.HttpServletRequest . removeAttribute ( java.lang.String ) ; org.springframework.web.util.HttpServletRequest . removeAttribute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.util.Cookie org.springframework.web.util.Cookie ( HttpServletRequest org.springframework.web.util.HttpServletRequest , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.web.util.HttpServletRequest , STRING ) ; Cookie org.springframework.web.util.Cookie[] [] = org.springframework.web.util.HttpServletRequest . getCookies ( ) ; if ( org.springframework.web.util.Cookie[] != null ) { for ( Cookie org.springframework.web.util.Cookie : org.springframework.web.util.Cookie[] ) { if ( java.lang.String . boolean ( org.springframework.web.util.Cookie . getName ( ) ) ) { return org.springframework.web.util.Cookie ; } } } return null ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( ServletRequest org.springframework.web.util.ServletRequest , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.web.util.ServletRequest , STRING ) ; if ( org.springframework.web.util.ServletRequest . getParameter ( java.lang.String ) != null ) { return true ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( org.springframework.web.util.ServletRequest . getParameter ( java.lang.String + java.lang.String ) != null ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ServletRequest org.springframework.web.util.ServletRequest , java.lang.String java.lang.String ) { return java.lang.String ( org.springframework.web.util.ServletRequest . getParameterMap ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( java.lang.String ) ; if ( java.lang.Object instanceof java.lang.String [] ) { java.lang.String [] java.lang.String[] = ( java.lang.String [] ) java.lang.Object ; return ( java.lang.String[] . int > NUMBER ? java.lang.String[] [ NUMBER ] : null ) ; } else if ( java.lang.Object != null ) { return java.lang.Object . java.lang.String ( ) ; } java.lang.String java.lang.String = java.lang.String + STRING ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String . java.lang.String ( java.lang.String . int ( ) , java.lang.String . int ( ) - java.lang.String . int ( ) ) ; } } return java.lang.String . java.lang.String ( java.lang.String . int ( ) ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ServletRequest org.springframework.web.util.ServletRequest , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.web.util.ServletRequest , STRING ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.util.ServletRequest . getParameterNames ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.TreeMap<java.lang.String,java.lang.Object> <> ( ) ; if ( java.lang.String == null ) { java.lang.String = STRING ; } while ( java.util.Enumeration<java.lang.String> != null && java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) || java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.web.util.ServletRequest . getParameterValues ( java.lang.String ) ; if ( java.lang.String[] == null || java.lang.String[] . int == NUMBER ) { } else if ( java.lang.String[] . int > NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String[] ) ; } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String[] [ NUMBER ] ) ; } } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.String java.lang.String ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> ; } java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String , STRING ) ; while ( java.util.StringTokenizer . boolean ( ) ) { java.lang.String java.lang.String = java.util.StringTokenizer . java.lang.String ( ) ; int int = java.lang.String . int ( '=' ) ; if ( int != - NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; for ( java.lang.String java.lang.String : StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) { org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; } } else { org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , STRING ) ; } } return org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( HttpRequest org.springframework.web.util.HttpRequest , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { Assert . notNull ( org.springframework.web.util.HttpRequest , STRING ) ; Assert . notNull ( java.util.Collection<java.lang.String> , STRING ) ; java.lang.String java.lang.String = org.springframework.web.util.HttpRequest . getHeaders ( ) . getOrigin ( ) ; if ( java.lang.String == null || java.util.Collection<java.lang.String> . boolean ( STRING ) ) { return true ; } else if ( CollectionUtils . isEmpty ( java.util.Collection<java.lang.String> ) ) { return boolean ( org.springframework.web.util.HttpRequest ) ; } else { return java.util.Collection<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( HttpRequest org.springframework.web.util.HttpRequest ) { java.lang.String java.lang.String = org.springframework.web.util.HttpRequest . getHeaders ( ) . getOrigin ( ) ; if ( java.lang.String == null ) { return true ; } UriComponentsBuilder org.springframework.web.util.UriComponentsBuilder ; if ( org.springframework.web.util.HttpRequest instanceof ServletServerHttpRequest ) { HttpServletRequest org.springframework.web.util.HttpServletRequest = ( ( ServletServerHttpRequest ) org.springframework.web.util.HttpRequest ) . getServletRequest ( ) ; org.springframework.web.util.UriComponentsBuilder = new UriComponentsBuilder ( ) . scheme ( org.springframework.web.util.HttpServletRequest . getScheme ( ) ) . host ( org.springframework.web.util.HttpServletRequest . getServerName ( ) ) . port ( org.springframework.web.util.HttpServletRequest . getServerPort ( ) ) . adaptFromForwardedHeaders ( org.springframework.web.util.HttpRequest . getHeaders ( ) ) ; } else { org.springframework.web.util.UriComponentsBuilder = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.util.HttpRequest ) ; } UriComponents org.springframework.web.util.UriComponents = org.springframework.web.util.UriComponentsBuilder . build ( ) ; UriComponents org.springframework.web.util.UriComponents = UriComponentsBuilder . fromOriginHeader ( java.lang.String ) . build ( ) ; return ( org.springframework.web.util.UriComponents . getHost ( ) . equals ( org.springframework.web.util.UriComponents . getHost ( ) ) && int ( org.springframework.web.util.UriComponents ) == int ( org.springframework.web.util.UriComponents ) ) ; }  <METHOD_END>
<METHOD_START> private static int int ( UriComponents org.springframework.web.util.UriComponents ) { int int = org.springframework.web.util.UriComponents . getPort ( ) ; if ( int == - NUMBER ) { if ( STRING . boolean ( org.springframework.web.util.UriComponents . getScheme ( ) ) || STRING . boolean ( org.springframework.web.util.UriComponents . getScheme ( ) ) ) { int = NUMBER ; } else if ( STRING . boolean ( org.springframework.web.util.UriComponents . getScheme ( ) ) || STRING . boolean ( org.springframework.web.util.UriComponents . getScheme ( ) ) ) { int = NUMBER ; } } return int ; }  <METHOD_END>
