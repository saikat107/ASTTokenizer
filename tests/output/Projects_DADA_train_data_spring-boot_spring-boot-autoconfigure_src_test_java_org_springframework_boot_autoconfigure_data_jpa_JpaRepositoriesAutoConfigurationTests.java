<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfigurationTests.TestConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . getBean ( PlatformTransactionManager .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . getBean ( EntityManagerFactory .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfigurationTests.CustomConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . getBean ( org . springframework . boot . autoconfigure . data . org.springframework.boot.autoconfigure.data.alt . org.springframework.boot.autoconfigure.data.alt . org.springframework.boot.autoconfigure.data.alt .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . getBean ( PlatformTransactionManager .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . getBean ( EntityManagerFactory .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { void ( org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfigurationTests.SortOfInvalidCustomConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , HibernateJpaAutoConfiguration .class , JpaRepositoriesAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.jpa.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
