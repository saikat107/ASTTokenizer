<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultListableBeanFactory org.springframework.beans.factory.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CustomEditorConfigurer org.springframework.beans.factory.config.CustomEditorConfigurer = new CustomEditorConfigurer ( ) ; final java.text.DateFormat java.text.DateFormat = java.text.DateFormat . java.text.DateFormat ( java.text.DateFormat . int , java.util.Locale . java.util.Locale ) ; org.springframework.beans.factory.config.CustomEditorConfigurer . setPropertyEditorRegistrars ( new PropertyEditorRegistrar [] { new PropertyEditorRegistrar ( ) { @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.config.PropertyEditorRegistry ) { org.springframework.beans.factory.config.PropertyEditorRegistry . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( java.text.DateFormat , true ) ) ; } } } ) ; org.springframework.beans.factory.config.CustomEditorConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.config.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.config.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.config.MutablePropertyValues ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.RootBeanDefinition ) ; org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , new TypedStringValue ( STRING , java.util.Date .class ) ) ; RootBeanDefinition org.springframework.beans.factory.config.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.config.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.config.MutablePropertyValues ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.text.DateFormat . java.util.Date ( STRING ) , org.springframework.beans.factory.config.TestBean . getDate ( ) ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.text.DateFormat . java.util.Date ( STRING ) , org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.config.PropertyEditorRegistry ) { org.springframework.beans.factory.config.PropertyEditorRegistry . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( java.text.DateFormat , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultListableBeanFactory org.springframework.beans.factory.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CustomEditorConfigurer org.springframework.beans.factory.config.CustomEditorConfigurer = new CustomEditorConfigurer ( ) ; java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> < java.lang.Class<?> < ? > , java.lang.Class<? extends java.beans.PropertyEditor> < ? extends java.beans.PropertyEditor > > java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> = new java.util.HashMap<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> <> ( ) ; java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> . java.lang.Class<? extends java.beans.PropertyEditor> ( java.util.Date .class , org.springframework.beans.factory.config.CustomEditorConfigurerTests.MyDateEditor .class ) ; org.springframework.beans.factory.config.CustomEditorConfigurer . setCustomEditors ( java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> ) ; org.springframework.beans.factory.config.CustomEditorConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.config.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.config.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.config.MutablePropertyValues ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; java.text.DateFormat java.text.DateFormat = java.text.DateFormat . java.text.DateFormat ( java.text.DateFormat . int , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.DateFormat . java.util.Date ( STRING ) , org.springframework.beans.factory.config.TestBean . getDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultListableBeanFactory org.springframework.beans.factory.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CustomEditorConfigurer org.springframework.beans.factory.config.CustomEditorConfigurer = new CustomEditorConfigurer ( ) ; java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> < java.lang.Class<?> < ? > , java.lang.Class<? extends java.beans.PropertyEditor> < ? extends java.beans.PropertyEditor > > java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> = new java.util.HashMap<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> <> ( ) ; java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> . java.lang.Class<? extends java.beans.PropertyEditor> ( java.lang.String [] .class , org.springframework.beans.factory.config.CustomEditorConfigurerTests.MyTestEditor .class ) ; org.springframework.beans.factory.config.CustomEditorConfigurer . setCustomEditors ( java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> ) ; org.springframework.beans.factory.config.CustomEditorConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.config.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.config.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.config.MutablePropertyValues ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.config.TestBean . getStringArray ( ) != null && org.springframework.beans.factory.config.TestBean . getStringArray ( ) . length == NUMBER ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getStringArray ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( java.text.DateFormat . java.text.DateFormat ( java.text.DateFormat . int , java.util.Locale . java.util.Locale ) , true ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
