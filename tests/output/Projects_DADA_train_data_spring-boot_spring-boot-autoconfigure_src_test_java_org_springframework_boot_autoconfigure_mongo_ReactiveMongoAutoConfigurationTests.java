<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( PropertyPlaceholderAutoConfiguration .class , ReactiveMongoAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBeanNamesForType ( MongoClient .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.mongo.ReactiveMongoAutoConfigurationTests.OptionsConfig .class , PropertyPlaceholderAutoConfiguration .class , ReactiveMongoAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBean ( MongoClient .class ) . getSettings ( ) . getSocketSettings ( ) . getReadTimeout ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.mongo.ReactiveMongoAutoConfigurationTests.OptionsConfig .class , PropertyPlaceholderAutoConfiguration .class , ReactiveMongoAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBean ( MongoClient .class ) . getSettings ( ) . getReadPreference ( ) ) . isEqualTo ( ReadPreference . nearest ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.mongo.ReactiveMongoAutoConfigurationTests.SslOptionsConfig .class , PropertyPlaceholderAutoConfiguration .class , ReactiveMongoAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . refresh ( ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBean ( MongoClient .class ) ; MongoClientSettings org.springframework.boot.autoconfigure.mongo.MongoClientSettings = org.springframework.boot.autoconfigure.mongo.MongoClient . getSettings ( ) ; assertThat ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings . getApplicationName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.mongo.MongoClientSettings . getStreamFactoryFactory ( ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.mongo.MongoClientSettings org.springframework.boot.autoconfigure.mongo.MongoClientSettings ( ) { return MongoClientSettings . builder ( ) . readPreference ( ReadPreference . nearest ( ) ) . socketSettings ( SocketSettings . builder ( ) . readTimeout ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . build ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.mongo.MongoClientSettings org.springframework.boot.autoconfigure.mongo.MongoClientSettings ( ) { return MongoClientSettings . builder ( ) . applicationName ( STRING ) . streamFactoryFactory ( org.springframework.boot.autoconfigure.mongo.StreamFactoryFactory ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.mongo.StreamFactoryFactory org.springframework.boot.autoconfigure.mongo.StreamFactoryFactory ( ) { StreamFactoryFactory org.springframework.boot.autoconfigure.mongo.StreamFactoryFactory = mock ( StreamFactoryFactory .class ) ; given ( org.springframework.boot.autoconfigure.mongo.StreamFactoryFactory . create ( any ( ) , any ( ) ) ) . willReturn ( mock ( StreamFactory .class ) ) ; return org.springframework.boot.autoconfigure.mongo.StreamFactoryFactory ; }  <METHOD_END>
