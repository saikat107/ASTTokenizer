<METHOD_START> @ Before public void void ( ) { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver = new ContentNegotiatingViewResolver ( ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( org.springframework.web.servlet.view.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { RequestContextHolder . resetRequestAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<org.springframework.web.servlet.view.MediaType> < MediaType > java.util.Set<org.springframework.web.servlet.view.MediaType> = java.util.Collections . java.util.Set ( MediaType . APPLICATION_XHTML_XML ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Set<org.springframework.web.servlet.view.MediaType> ) ; org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; java.util.List<org.springframework.web.servlet.view.MediaType> < MediaType > java.util.List<org.springframework.web.servlet.view.MediaType> = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . getMediaTypes ( org.springframework.web.servlet.view.MockHttpServletRequest ) ; assertEquals ( STRING , new MediaType ( STRING , STRING ) , java.util.List<org.springframework.web.servlet.view.MediaType> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . setRequestURI ( STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String + STRING , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . valueOf ( STRING ) ) ; MappingMediaTypeFileExtensionResolver org.springframework.web.servlet.view.MappingMediaTypeFileExtensionResolver = new MappingMediaTypeFileExtensionResolver ( java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> ) ; ContentNegotiationManager org.springframework.web.servlet.view.ContentNegotiationManager = new ContentNegotiationManager ( new HeaderContentNegotiationStrategy ( ) ) ; org.springframework.web.servlet.view.ContentNegotiationManager . addFileExtensionResolvers ( org.springframework.web.servlet.view.MappingMediaTypeFileExtensionResolver ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setContentNegotiationManager ( org.springframework.web.servlet.view.ContentNegotiationManager ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.view.ViewResolver ) ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String + STRING , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertNull ( org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addParameter ( STRING , STRING ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . valueOf ( STRING ) ) ; ParameterContentNegotiationStrategy org.springframework.web.servlet.view.ParameterContentNegotiationStrategy = new ParameterContentNegotiationStrategy ( java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setContentNegotiationManager ( new ContentNegotiationManager ( org.springframework.web.servlet.view.ParameterContentNegotiationStrategy ) ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String + STRING , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MediaType org.springframework.web.servlet.view.MediaType = new MediaType ( STRING , STRING ) ; FixedContentNegotiationStrategy org.springframework.web.servlet.view.FixedContentNegotiationStrategy = new FixedContentNegotiationStrategy ( org.springframework.web.servlet.view.MediaType ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setContentNegotiationManager ( new ContentNegotiationManager ( org.springframework.web.servlet.view.FixedContentNegotiationStrategy ) ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class , STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class , STRING ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.ViewResolver , org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.ViewResolver , org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setContentNegotiationManager ( new ContentNegotiationManager ( new HeaderContentNegotiationStrategy ( ) ) ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.ViewResolver , org.springframework.web.servlet.view.ViewResolver ) ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; assertEquals ( new MediaType ( STRING , STRING ) , org.springframework.web.servlet.view.MockHttpServletRequest . getAttribute ( View . SELECTED_CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.ViewResolver , org.springframework.web.servlet.view.ViewResolver ) ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.util.List<org.springframework.web.servlet.view.View> < View > java.util.List<org.springframework.web.servlet.view.View> = new java.util.ArrayList<org.springframework.web.servlet.view.View> <> ( ) ; java.util.List<org.springframework.web.servlet.view.View> . add ( org.springframework.web.servlet.view.View ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setDefaultViews ( java.util.List<org.springframework.web.servlet.view.View> ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . setRequestURI ( STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class , STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class , STRING ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.ViewResolver , org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String + STRING , java.util.Locale ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String + STRING , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . setRequestURI ( STRING ) ; java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> = java.util.Collections . java.util.Map ( STRING , MediaType . APPLICATION_JSON ) ; PathExtensionContentNegotiationStrategy org.springframework.web.servlet.view.PathExtensionContentNegotiationStrategy = new PathExtensionContentNegotiationStrategy ( java.util.Map<java.lang.String,org.springframework.web.servlet.view.MediaType> ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setContentNegotiationManager ( new ContentNegotiationManager ( org.springframework.web.servlet.view.PathExtensionContentNegotiationStrategy ) ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.ViewResolver , org.springframework.web.servlet.view.ViewResolver ) ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.util.List<org.springframework.web.servlet.view.View> < View > java.util.List<org.springframework.web.servlet.view.View> = new java.util.ArrayList<org.springframework.web.servlet.view.View> <> ( ) ; java.util.List<org.springframework.web.servlet.view.View> . add ( org.springframework.web.servlet.view.View ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setDefaultViews ( java.util.List<org.springframework.web.servlet.view.View> ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String + STRING , java.util.Locale ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String + STRING , java.util.Locale ) ) . willReturn ( null ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertSame ( STRING , org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( null ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertNull ( STRING , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.servlet.view.MockHttpServletRequest . setRequestURI ( STRING ) ; StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; UrlBasedViewResolver org.springframework.web.servlet.view.UrlBasedViewResolver = new InternalResourceViewResolver ( ) ; org.springframework.web.servlet.view.UrlBasedViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Arrays .< ViewResolver > java.util.List<org.springframework.web.servlet.view.ViewResolver> ( org.springframework.web.servlet.view.ViewResolver , org.springframework.web.servlet.view.UrlBasedViewResolver ) ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setDefaultViews ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.View ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertEquals ( STRING , RedirectView .class , org.springframework.web.servlet.view.View . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertNull ( STRING , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setUseNotAcceptableStatusCode ( true ) ; org.springframework.web.servlet.view.MockHttpServletRequest . addHeader ( STRING , STRING ) ; ViewResolver org.springframework.web.servlet.view.ViewResolver = mock ( ViewResolver .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.view.ViewResolver ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; View org.springframework.web.servlet.view.View = mock ( View .class , STRING ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; given ( org.springframework.web.servlet.view.ViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ) . willReturn ( org.springframework.web.servlet.view.View ) ; given ( org.springframework.web.servlet.view.View . getContentType ( ) ) . willReturn ( STRING ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertNotNull ( STRING , org.springframework.web.servlet.view.View ) ; MockHttpServletResponse org.springframework.web.servlet.view.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.View . render ( null , org.springframework.web.servlet.view.MockHttpServletRequest , org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.view.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.view.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; InternalResourceViewResolver org.springframework.web.servlet.view.InternalResourceViewResolver = new InternalResourceViewResolver ( ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.InternalResourceViewResolver . setViewClass ( InternalResourceView .class ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setViewResolvers ( new java.util.ArrayList <> ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.view.InternalResourceViewResolver ) ) ) ; FixedContentNegotiationStrategy org.springframework.web.servlet.view.FixedContentNegotiationStrategy = new FixedContentNegotiationStrategy ( MediaType . TEXT_HTML ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . setContentNegotiationManager ( new ContentNegotiationManager ( org.springframework.web.servlet.view.FixedContentNegotiationStrategy ) ) ; org.springframework.web.servlet.view.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ContentNegotiatingViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertNotNull ( STRING , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
