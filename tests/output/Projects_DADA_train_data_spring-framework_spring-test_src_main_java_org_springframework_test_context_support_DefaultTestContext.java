<METHOD_START> public void ( org.springframework.test.context.support.DefaultTestContext org.springframework.test.context.support.DefaultTestContext ) { this( org.springframework.test.context.support.DefaultTestContext . java.lang.Class<> , org.springframework.test.context.support.DefaultTestContext . org.springframework.test.context.support.MergedContextConfiguration , org.springframework.test.context.support.DefaultTestContext . org.springframework.test.context.support.CacheAwareContextLoaderDelegate ); this . java.util.Map<java.lang.String,java.lang.Object> . void ( org.springframework.test.context.support.DefaultTestContext . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration , CacheAwareContextLoaderDelegate org.springframework.test.context.support.CacheAwareContextLoaderDelegate ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.test.context.support.MergedContextConfiguration , STRING ) ; Assert . notNull ( org.springframework.test.context.support.CacheAwareContextLoaderDelegate , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.test.context.support.MergedContextConfiguration = org.springframework.test.context.support.MergedContextConfiguration ; this . org.springframework.test.context.support.CacheAwareContextLoaderDelegate = org.springframework.test.context.support.CacheAwareContextLoaderDelegate ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.context.support.ApplicationContext org.springframework.test.context.support.ApplicationContext ( ) { ApplicationContext org.springframework.test.context.support.ApplicationContext = this . org.springframework.test.context.support.CacheAwareContextLoaderDelegate . loadContext ( this . org.springframework.test.context.support.MergedContextConfiguration ) ; if ( org.springframework.test.context.support.ApplicationContext instanceof ConfigurableApplicationContext ) { @ java.lang.SuppressWarnings ( STRING ) ConfigurableApplicationContext org.springframework.test.context.support.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.test.context.support.ApplicationContext ; Assert . state ( org.springframework.test.context.support.ConfigurableApplicationContext . isActive ( ) , ( ) STRING + mergedContextConfiguration + STRING + STRING + STRING + STRING + STRING ) ; } return org.springframework.test.context.support.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( HierarchyMode org.springframework.test.context.support.HierarchyMode ) { this . org.springframework.test.context.support.CacheAwareContextLoaderDelegate . closeContext ( this . org.springframework.test.context.support.MergedContextConfiguration , org.springframework.test.context.support.HierarchyMode ) ; }  <METHOD_END>
<METHOD_START> public final java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public final java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public final java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public final java.lang.Throwable java.lang.Throwable ( ) { return this . java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Throwable java.lang.Throwable ) { this . java.lang.Object = java.lang.Object ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.String , STRING ) ; synchronized ( this . java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.lang.Object != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { synchronized ( this . java.util.Map<java.lang.String,java.lang.Object> ) { return this . java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) . java.util.stream.Stream<java.lang.String> ( ) . java.lang.String[] ( java.lang.String [] ::new ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return new ToStringCreator ( this ) . append ( STRING , this . java.lang.Class<> ) . append ( STRING , this . java.lang.Object ) . append ( STRING , this . java.lang.reflect.Method ) . append ( STRING , this . java.lang.Throwable ) . append ( STRING , this . org.springframework.test.context.support.MergedContextConfiguration ) . append ( STRING , this . java.util.Map<java.lang.String,java.lang.Object> ) . toString ( ) ; }  <METHOD_END>
