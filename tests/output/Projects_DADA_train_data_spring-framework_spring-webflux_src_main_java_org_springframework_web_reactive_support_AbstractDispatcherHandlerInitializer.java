<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.reactive.support.ServletContext ) throws org.springframework.web.reactive.support.ServletException { void ( org.springframework.web.reactive.support.ServletContext ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServletContext org.springframework.web.reactive.support.ServletContext ) { java.lang.String java.lang.String = java.lang.String ( ) ; Assert . hasLength ( java.lang.String , STRING ) ; ApplicationContext org.springframework.web.reactive.support.ApplicationContext = org.springframework.web.reactive.support.ApplicationContext ( ) ; Assert . notNull ( org.springframework.web.reactive.support.ApplicationContext , STRING + STRING + java.lang.String + STRING ) ; void ( org.springframework.web.reactive.support.ApplicationContext ) ; void ( org.springframework.web.reactive.support.ServletContext , org.springframework.web.reactive.support.ApplicationContext ) ; WebHandler org.springframework.web.reactive.support.WebHandler = org.springframework.web.reactive.support.WebHandler ( org.springframework.web.reactive.support.ApplicationContext ) ; Assert . notNull ( org.springframework.web.reactive.support.WebHandler , STRING + java.lang.String + STRING ) ; ServletHttpHandlerAdapter org.springframework.web.reactive.support.ServletHttpHandlerAdapter = org.springframework.web.reactive.support.ServletHttpHandlerAdapter ( org.springframework.web.reactive.support.WebHandler ) ; Assert . notNull ( org.springframework.web.reactive.support.ServletHttpHandlerAdapter , STRING + java.lang.String + STRING ) ; ServletRegistration . ServletRegistration ServletRegistration.Dynamic = org.springframework.web.reactive.support.ServletContext . addServlet ( java.lang.String , org.springframework.web.reactive.support.ServletHttpHandlerAdapter ) ; Assert . notNull ( ServletRegistration.Dynamic , STRING + java.lang.String + STRING + STRING ) ; ServletRegistration.Dynamic . setLoadOnStartup ( NUMBER ) ; ServletRegistration.Dynamic . addMapping ( java.lang.String ( ) ) ; ServletRegistration.Dynamic . setAsyncSupported ( true ) ; void ( ServletRegistration.Dynamic ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.reactive.support.ApplicationContext org.springframework.web.reactive.support.ApplicationContext ( )  <METHOD_END>
<METHOD_START> protected void void ( ApplicationContext org.springframework.web.reactive.support.ApplicationContext ) { if ( org.springframework.web.reactive.support.ApplicationContext instanceof ConfigurableApplicationContext ) { ConfigurableApplicationContext org.springframework.web.reactive.support.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.web.reactive.support.ApplicationContext ; if ( ! org.springframework.web.reactive.support.ConfigurableApplicationContext . isActive ( ) ) { org.springframework.web.reactive.support.ConfigurableApplicationContext . refresh ( ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.support.WebHandler org.springframework.web.reactive.support.WebHandler ( ApplicationContext org.springframework.web.reactive.support.ApplicationContext ) { return new DispatcherHandler ( org.springframework.web.reactive.support.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.support.ServletHttpHandlerAdapter org.springframework.web.reactive.support.ServletHttpHandlerAdapter ( WebHandler org.springframework.web.reactive.support.WebHandler ) { HttpHandler org.springframework.web.reactive.support.HttpHandler = new HttpWebHandlerAdapter ( org.springframework.web.reactive.support.WebHandler ) ; return new ServletHttpHandlerAdapter ( org.springframework.web.reactive.support.HttpHandler ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( ServletRegistration . ServletRegistration ServletRegistration.Dynamic ) {	}  <METHOD_END>
<METHOD_START> protected void void ( ServletContext org.springframework.web.reactive.support.ServletContext , ApplicationContext org.springframework.web.reactive.support.ApplicationContext ) { if ( org.springframework.web.reactive.support.ApplicationContext instanceof ConfigurableApplicationContext ) { ConfigurableApplicationContext org.springframework.web.reactive.support.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.web.reactive.support.ApplicationContext ; org.springframework.web.reactive.support.AbstractDispatcherHandlerInitializer.ServletContextDestroyedListener org.springframework.web.reactive.support.AbstractDispatcherHandlerInitializer.ServletContextDestroyedListener = new org.springframework.web.reactive.support.AbstractDispatcherHandlerInitializer.ServletContextDestroyedListener ( org.springframework.web.reactive.support.ConfigurableApplicationContext ) ; org.springframework.web.reactive.support.ServletContext . addListener ( org.springframework.web.reactive.support.AbstractDispatcherHandlerInitializer.ServletContextDestroyedListener ) ; } }  <METHOD_END>
<METHOD_START> public void ( ConfigurableApplicationContext org.springframework.web.reactive.support.ConfigurableApplicationContext ) { this . org.springframework.web.reactive.support.ConfigurableApplicationContext = org.springframework.web.reactive.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContextEvent org.springframework.web.reactive.support.ServletContextEvent ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContextEvent org.springframework.web.reactive.support.ServletContextEvent ) { this . org.springframework.web.reactive.support.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
