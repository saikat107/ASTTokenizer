<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.bind.support.TestBean = new TestBean ( ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder = new WebExchangeDataBinder ( this . org.springframework.web.bind.support.TestBean , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . registerCustomEditor ( ITestBean .class , new org.springframework.web.bind.support.WebExchangeDataBinderTests.TestBeanPropertyEditor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNotNull ( this . org.springframework.web.bind.support.TestBean . getSpouse ( ) ) ; assertEquals ( STRING , org.springframework.web.bind.support.TestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertTrue ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . remove ( STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertFalse ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.bind.support.WebExchangeDataBinder . setIgnoreUnknownFields ( false ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertTrue ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . remove ( STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertFalse ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertTrue ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . remove ( STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertFalse ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertTrue ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . remove ( STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertTrue ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . remove ( STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertFalse ( this . org.springframework.web.bind.support.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , this . org.springframework.web.bind.support.TestBean . getName ( ) ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . remove ( STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , this . org.springframework.web.bind.support.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , NUMBER , this . org.springframework.web.bind.support.TestBean . getStringArray ( ) . length ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . remove ( STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , NUMBER , this . org.springframework.web.bind.support.TestBean . getStringArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.ServerWebExchange ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNotNull ( this . org.springframework.web.bind.support.TestBean . getSpouse ( ) ) ; assertEquals ( STRING , this . org.springframework.web.bind.support.TestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockServerHttpRequest org.springframework.web.bind.support.MockServerHttpRequest = MockServerHttpRequest . post ( java.lang.String ) . build ( ) ; this . org.springframework.web.bind.support.WebExchangeDataBinder . bind ( org.springframework.web.bind.support.MockServerHttpRequest . toExchange ( ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertNotNull ( this . org.springframework.web.bind.support.TestBean . getSpouse ( ) ) ; assertEquals ( STRING , this . org.springframework.web.bind.support.TestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; try { for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) . iterator ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) . iterator ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.net.URLEncoder . java.lang.String ( java.lang.String , STRING ) ) ; if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( '=' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.net.URLEncoder . java.lang.String ( java.lang.String , STRING ) ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '&' ) ; } } } if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '&' ) ; } } } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalStateException ( java.io.UnsupportedEncodingException ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.bind.support.ServerWebExchange org.springframework.web.bind.support.ServerWebExchange ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) { return MockServerHttpRequest . post ( STRING ) . contentType ( MediaType . APPLICATION_FORM_URLENCODED ) . body ( java.lang.String ( org.springframework.web.bind.support.MultiValueMap<java.lang.String,java.lang.String> ) ) . toExchange ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( new TestBean ( ) ) ; }  <METHOD_END>
