<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return ( this . java.lang.ClassLoader != null ? this . java.lang.ClassLoader : this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = ( java.lang.ClassLoader != null ? java.lang.ClassLoader : ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = getBasenameSet ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.util.ResourceBundle java.util.ResourceBundle = java.util.ResourceBundle ( java.lang.String , java.util.Locale ) ; if ( java.util.ResourceBundle != null ) { java.lang.String java.lang.String = java.lang.String ( java.util.ResourceBundle , java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.text.MessageFormat java.text.MessageFormat ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = getBasenameSet ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.util.ResourceBundle java.util.ResourceBundle = java.util.ResourceBundle ( java.lang.String , java.util.Locale ) ; if ( java.util.ResourceBundle != null ) { java.text.MessageFormat java.text.MessageFormat = java.text.MessageFormat ( java.util.ResourceBundle , java.lang.String , java.util.Locale ) ; if ( java.text.MessageFormat != null ) { return java.text.MessageFormat ; } } } return null ; }  <METHOD_END>
<METHOD_START> protected java.util.ResourceBundle java.util.ResourceBundle ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { if ( getCacheMillis ( ) >= NUMBER ) { return java.util.ResourceBundle ( java.lang.String , java.util.Locale ) ; } else { synchronized ( this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.util.ResourceBundle>> ) { java.util.Map<java.util.Locale,java.util.ResourceBundle> < java.util.Locale , java.util.ResourceBundle > java.util.Map<java.util.Locale,java.util.ResourceBundle> = this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.util.ResourceBundle>> . java.util.Map<java.util.Locale,java.util.ResourceBundle> ( java.lang.String ) ; if ( java.util.Map<java.util.Locale,java.util.ResourceBundle> != null ) { java.util.ResourceBundle java.util.ResourceBundle = java.util.Map<java.util.Locale,java.util.ResourceBundle> . java.util.ResourceBundle ( java.util.Locale ) ; if ( java.util.ResourceBundle != null ) { return java.util.ResourceBundle ; } } try { java.util.ResourceBundle java.util.ResourceBundle = java.util.ResourceBundle ( java.lang.String , java.util.Locale ) ; if ( java.util.Map<java.util.Locale,java.util.ResourceBundle> == null ) { java.util.Map<java.util.Locale,java.util.ResourceBundle> = new java.util.HashMap<java.util.Locale,java.util.ResourceBundle> <> ( ) ; this . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.util.ResourceBundle>> . java.util.Map<java.util.Locale,java.util.ResourceBundle> ( java.lang.String , java.util.Map<java.util.Locale,java.util.ResourceBundle> ) ; } java.util.Map<java.util.Locale,java.util.ResourceBundle> . java.util.ResourceBundle ( java.util.Locale , java.util.ResourceBundle ) ; return java.util.ResourceBundle ; } catch ( java.util.MissingResourceException java.util.MissingResourceException ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.lang.String + STRING + java.util.MissingResourceException . java.lang.String ( ) ) ; } return null ; } } } }  <METHOD_END>
<METHOD_START> protected java.util.ResourceBundle java.util.ResourceBundle ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.util.MissingResourceException { return java.util.ResourceBundle . java.util.ResourceBundle ( java.lang.String , java.util.Locale , java.lang.ClassLoader ( ) , new org.springframework.context.support.ResourceBundleMessageSource.MessageSourceControl ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.ResourceBundle java.util.ResourceBundle ( java.io.Reader java.io.Reader ) throws java.io.IOException { return new java.util.PropertyResourceBundle ( java.io.Reader ) ; }  <METHOD_END>
<METHOD_START> protected java.text.MessageFormat java.text.MessageFormat ( java.util.ResourceBundle java.util.ResourceBundle , java.lang.String java.lang.String , java.util.Locale java.util.Locale )			throws java.util.MissingResourceException { synchronized ( this . java.util.Map<java.util.ResourceBundle,java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>>> ) { java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> < java.lang.String , java.util.Map<java.util.Locale,java.text.MessageFormat> < java.util.Locale , java.text.MessageFormat > > java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> = this . java.util.Map<java.util.ResourceBundle,java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>>> . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> ( java.util.ResourceBundle ) ; java.util.Map<java.util.Locale,java.text.MessageFormat> < java.util.Locale , java.text.MessageFormat > java.util.Map<java.util.Locale,java.text.MessageFormat> = null ; if ( java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> != null ) { java.util.Map<java.util.Locale,java.text.MessageFormat> = java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> . java.util.Map<java.util.Locale,java.text.MessageFormat> ( java.lang.String ) ; if ( java.util.Map<java.util.Locale,java.text.MessageFormat> != null ) { java.text.MessageFormat java.text.MessageFormat = java.util.Map<java.util.Locale,java.text.MessageFormat> . java.text.MessageFormat ( java.util.Locale ) ; if ( java.text.MessageFormat != null ) { return java.text.MessageFormat ; } } } java.lang.String java.lang.String = java.lang.String ( java.util.ResourceBundle , java.lang.String ) ; if ( java.lang.String != null ) { if ( java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> == null ) { java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> = new java.util.HashMap<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> <> ( ) ; this . java.util.Map<java.util.ResourceBundle,java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>>> . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> ( java.util.ResourceBundle , java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> ) ; } if ( java.util.Map<java.util.Locale,java.text.MessageFormat> == null ) { java.util.Map<java.util.Locale,java.text.MessageFormat> = new java.util.HashMap<java.util.Locale,java.text.MessageFormat> <> ( ) ; java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> . java.util.Map<java.util.Locale,java.text.MessageFormat> ( java.lang.String , java.util.Map<java.util.Locale,java.text.MessageFormat> ) ; } java.text.MessageFormat java.text.MessageFormat = createMessageFormat ( java.lang.String , java.util.Locale ) ; java.util.Map<java.util.Locale,java.text.MessageFormat> . java.text.MessageFormat ( java.util.Locale , java.text.MessageFormat ) ; return java.text.MessageFormat ; } return null ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.ResourceBundle java.util.ResourceBundle , java.lang.String java.lang.String ) { if ( java.util.ResourceBundle . boolean ( java.lang.String ) ) { try { return java.util.ResourceBundle . java.lang.String ( java.lang.String ) ; } catch ( java.util.MissingResourceException java.util.MissingResourceException ) { } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.context.support.ResourceBundleMessageSource> ( ) . java.lang.String ( ) + STRING + getBasenameSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.ResourceBundle java.util.ResourceBundle ( java.lang.String java.lang.String , java.util.Locale java.util.Locale , java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader , boolean boolean )				throws java.lang.IllegalAccessException , java.lang.InstantiationException , java.io.IOException { if ( java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.util.Locale ) ; final java.lang.String java.lang.String = java.lang.String ( java.lang.String , STRING ) ; final java.lang.ClassLoader java.lang.ClassLoader = java.lang.ClassLoader ; final boolean boolean = boolean ; java.io.InputStream java.io.InputStream ; try { java.io.InputStream = java.security.AccessController . java.io.InputStream ( new java.security.PrivilegedExceptionAction<java.io.InputStream> < java.io.InputStream > ( ) { @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { java.io.InputStream java.io.InputStream = null ; if ( boolean ) { java.net.URL java.net.URL = java.lang.ClassLoader . java.net.URL ( java.lang.String ) ; if ( java.net.URL != null ) { java.net.URLConnection java.net.URLConnection = java.net.URL . java.net.URLConnection ( ) ; if ( java.net.URLConnection != null ) { java.net.URLConnection . void ( false ) ; java.io.InputStream = java.net.URLConnection . java.io.InputStream ( ) ; } } } else { java.io.InputStream = java.lang.ClassLoader . java.io.InputStream ( java.lang.String ) ; } return java.io.InputStream ; } } ) ; } catch ( java.security.PrivilegedActionException java.security.PrivilegedActionException ) { throw ( java.io.IOException ) java.security.PrivilegedActionException . java.lang.Exception ( ) ; } if ( java.io.InputStream != null ) { java.lang.String java.lang.String = getDefaultEncoding ( ) ; if ( java.lang.String == null ) { java.lang.String = STRING ; } try { return java.util.ResourceBundle ( new java.io.InputStreamReader ( java.io.InputStream , java.lang.String ) ) ; } finally { java.io.InputStream . void ( ) ; } } else { return null ; } } else { return super. java.util.ResourceBundle ( java.lang.String , java.util.Locale , java.lang.String , java.lang.ClassLoader , boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { java.io.InputStream java.io.InputStream = null ; if ( boolean ) { java.net.URL java.net.URL = java.lang.ClassLoader . java.net.URL ( java.lang.String ) ; if ( java.net.URL != null ) { java.net.URLConnection java.net.URLConnection = java.net.URL . java.net.URLConnection ( ) ; if ( java.net.URLConnection != null ) { java.net.URLConnection . void ( false ) ; java.io.InputStream = java.net.URLConnection . java.io.InputStream ( ) ; } } } else { java.io.InputStream = java.lang.ClassLoader . java.io.InputStream ( java.lang.String ) ; } return java.io.InputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return ( isFallbackToSystemLocale ( ) ? super. java.util.Locale ( java.lang.String , java.util.Locale ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { long long = getCacheMillis ( ) ; return ( long >= NUMBER ? long : super. long ( java.lang.String , java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.util.Locale java.util.Locale , java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader , java.util.ResourceBundle java.util.ResourceBundle , long long ) { if ( super. boolean ( java.lang.String , java.util.Locale , java.lang.String , java.lang.ClassLoader , java.util.ResourceBundle , long ) ) { java.util.Map<java.util.ResourceBundle,java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>>> . java.util.Map<java.lang.String,java.util.Map<java.util.Locale,java.text.MessageFormat>> ( java.util.ResourceBundle ) ; return true ; } else { return false ; } }  <METHOD_END>
