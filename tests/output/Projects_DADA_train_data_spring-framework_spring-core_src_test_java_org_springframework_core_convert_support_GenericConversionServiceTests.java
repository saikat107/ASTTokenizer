<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.lang.Integer .class ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.lang.String .class ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.Integer .class , java.lang.Number .class ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( boolean .class , boolean .class ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( boolean .class , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . canConvert ( TypeDescriptor . valueOf ( java.lang.String .class ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( null , java.lang.Integer .class ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( null , TypeDescriptor . valueOf ( java.lang.Integer .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( null , org.springframework.core.convert.support.GenericConversionService . convert ( null , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . convert ( null , int .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . convert ( null , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( int .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . convert ( STRING , null , TypeDescriptor . valueOf ( int .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.core.convert.support.GenericConversionService . convert ( false , boolean .class ) ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.core.convert.support.GenericConversionService . convert ( false , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConverterNotFoundException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.UntypedConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( void .class , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , void .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.core.convert.support.GenericConversionService . convert ( null , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . convert ( STRING , ( java.lang.Class<?> < ? > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.Integer .class ) , TypeDescriptor . valueOf ( java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConversionFailedException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new Converter < java.lang.CharSequence , java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.CharSequence java.lang.CharSequence ) { return java.lang.Integer . java.lang.Integer ( java.lang.CharSequence . java.lang.String ( ) ) ; } } ) ; java.lang.Integer java.lang.Integer = org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.lang.Integer .class ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.CharSequence java.lang.CharSequence ) { return java.lang.Integer . java.lang.Integer ( java.lang.CharSequence . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConverterNotFoundException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.ColorConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.awt.SystemColor .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , boolean .class ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new StringToBooleanConverter ( ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , boolean .class ) ) ; java.lang.Boolean java.lang.Boolean = org.springframework.core.convert.support.GenericConversionService . convert ( STRING , boolean .class ) ; assertTrue ( java.lang.Boolean ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( boolean .class ) ) ) ; java.lang.Boolean = ( java.lang.Boolean ) org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( boolean .class ) ) ; assertTrue ( java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , int .class ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , int .class ) ) ; java.lang.Integer java.lang.Integer = org.springframework.core.convert.support.GenericConversionService . convert ( STRING , int .class ) ; assertEquals ( NUMBER , java.lang.Integer . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ConverterNotFoundException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new ObjectToArrayConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.lang.Integer [] .class ) ) ; org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.lang.Integer [] .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.Object> , java.lang.Iterable .class ) ; assertSame ( java.util.List<java.lang.Object> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.Object> , java.lang.Object .class ) ; assertSame ( java.util.List<java.lang.Object> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.lang.Object java.lang.Object = org.springframework.core.convert.support.GenericConversionService . convert ( java.util.Map<java.lang.Object,java.lang.Object> , java.lang.Object .class ) ; assertSame ( java.util.Map<java.lang.Object,java.lang.Object> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyBaseInterfaceToStringConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new ObjectToStringConverter ( ) ) ; java.lang.Object java.lang.Object = org.springframework.core.convert.support.GenericConversionService . convert ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyInterfaceImplementer ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyBaseInterfaceToStringConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new ArrayToArrayConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; java.lang.String [] java.lang.String[] = org.springframework.core.convert.support.GenericConversionService . convert ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyInterface [] { new org.springframework.core.convert.support.GenericConversionServiceTests.MyInterfaceImplementer ( ) } , java.lang.String [] .class ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyBaseInterfaceToStringConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new ArrayToArrayConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; java.lang.String [] java.lang.String[] = org.springframework.core.convert.support.GenericConversionService . convert ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyInterfaceImplementer [] { new org.springframework.core.convert.support.GenericConversionServiceTests.MyInterfaceImplementer ( ) } , java.lang.String [] .class ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringArrayToResourceArrayConverter ( ) ) ; Resource [] org.springframework.core.convert.support.Resource[] = org.springframework.core.convert.support.GenericConversionService . convert ( new java.lang.String [] { STRING , STRING } , Resource [] .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.stream.IntStream ( org.springframework.core.convert.support.Resource[] ) . map ( Resource :: getDescription ) . sorted ( java.util.Comparator<> ( ) ) . collect ( java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringArrayToIntegerArrayConverter ( ) ) ; java.lang.Integer [] java.lang.Integer[] = org.springframework.core.convert.support.GenericConversionService . convert ( new java.lang.String [] { STRING , STRING } , java.lang.Integer [] .class ) ; assertArrayEquals ( new java.lang.Integer [] { NUMBER , NUMBER } , java.lang.Integer[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringToIntegerArrayConverter ( ) ) ; java.lang.Integer [] java.lang.Integer[] = org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.lang.Integer [] .class ) ; assertArrayEquals ( new java.lang.Integer [] { NUMBER , NUMBER } , java.lang.Integer[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.lang.Object java.lang.Object = org.springframework.core.convert.support.GenericConversionService . convert ( java.util.Map<java.lang.String,java.lang.String> , TypeDescriptor . forObject ( java.util.Map<java.lang.String,java.lang.String> ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = org.springframework.core.convert.support.GenericConversionService . convert ( java.lang.String , java.lang.String .class ) ; assertSame ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = org.springframework.core.convert.support.GenericConversionService . convert ( java.lang.String , java.lang.Object .class ) ; assertSame ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionServiceTests.WithCopyConstructor org.springframework.core.convert.support.GenericConversionServiceTests.WithCopyConstructor = new org.springframework.core.convert.support.GenericConversionServiceTests.WithCopyConstructor ( ) ; java.lang.Object java.lang.Object = org.springframework.core.convert.support.GenericConversionService . convert ( org.springframework.core.convert.support.GenericConversionServiceTests.WithCopyConstructor , org.springframework.core.convert.support.GenericConversionServiceTests.WithCopyConstructor .class ) ; assertSame ( org.springframework.core.convert.support.GenericConversionServiceTests.WithCopyConstructor , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; StopWatch org.springframework.core.convert.support.StopWatch = new StopWatch ( STRING ) ; org.springframework.core.convert.support.StopWatch . start ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.LinkedList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , TypeDescriptor . forObject ( java.util.List<java.lang.String> ) , org.springframework.core.convert.support.TypeDescriptor ) ; } org.springframework.core.convert.support.StopWatch . stop ( ) ; org.springframework.core.convert.support.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( java.util.List<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<java.lang.Integer> . boolean ( java.lang.Integer . java.lang.Integer ( java.lang.String ) ) ; } } org.springframework.core.convert.support.StopWatch . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; StopWatch org.springframework.core.convert.support.StopWatch = new StopWatch ( STRING ) ; org.springframework.core.convert.support.StopWatch . start ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.core.convert.support.GenericConversionService . convert ( java.util.Map<java.lang.String,java.lang.String> , TypeDescriptor . forObject ( java.util.Map<java.lang.String,java.lang.String> ) , org.springframework.core.convert.support.TypeDescriptor ) ; } org.springframework.core.convert.support.StopWatch . stop ( ) ; org.springframework.core.convert.support.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.lang.Integer . java.lang.Integer ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ) ; } } org.springframework.core.convert.support.StopWatch . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToArrayConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<java.lang.String> ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.String [] .class ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; assertEquals ( NUMBER , ( ( java.lang.String [] ) org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new CollectionToObjectConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . forObject ( java.util.List<java.lang.String> ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.Integer .class ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; assertNull ( org.springframework.core.convert.support.GenericConversionService . convert ( java.util.List<java.lang.String> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new StringToArrayConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.lang.Integer [] .class ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.lang.Integer [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new StringToCollectionConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.util.Collection .class ) ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.core.convert.support.TypeDescriptor ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToNumberConverterFactory ( ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( TypeDescriptor . valueOf ( java.lang.String .class ) , org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<GenericConverter.ConvertiblePair> < GenericConverter . GenericConverter > java.util.Set<GenericConverter.ConvertiblePair> = new java.util.HashSet<GenericConverter.ConvertiblePair> <> ( ) ; java.util.Set<GenericConverter.ConvertiblePair> . add ( new GenericConverter . GenericConverter ( java.lang.Number .class , java.lang.String .class ) ) ; assert java.util.Set<GenericConverter.ConvertiblePair> . contains ( new GenericConverter . GenericConverter ( java.lang.Number .class , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericConverter . GenericConverter GenericConverter.ConvertiblePair = new GenericConverter . GenericConverter ( java.lang.Number .class , java.lang.String .class ) ; GenericConverter . GenericConverter GenericConverter.ConvertiblePair = new GenericConverter . GenericConverter ( java.lang.Number .class , java.lang.String .class ) ; assertEquals ( GenericConverter.ConvertiblePair , GenericConverter.ConvertiblePair ) ; assertEquals ( GenericConverter.ConvertiblePair . hashCode ( ) , GenericConverter.ConvertiblePair . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericConverter . GenericConverter GenericConverter.ConvertiblePair = new GenericConverter . GenericConverter ( java.lang.Number .class , java.lang.String .class ) ; GenericConverter . GenericConverter GenericConverter.ConvertiblePair = new GenericConverter . GenericConverter ( java.lang.String .class , java.lang.Number .class ) ; assertFalse ( GenericConverter.ConvertiblePair . equals ( GenericConverter.ConvertiblePair ) ) ; assertFalse ( GenericConverter.ConvertiblePair . hashCode ( ) == GenericConverter.ConvertiblePair . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.convert.support.GenericConversionService . canConvert ( TypeDescriptor . valueOf ( java.lang.String .class ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.ColorConverter ( ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.awt.Color .class ) ) ; org.springframework.core.convert.support.GenericConversionService . removeConvertible ( java.lang.String .class , java.awt.Color .class ) ; assertFalse ( org.springframework.core.convert.support.GenericConversionService . canConvert ( java.lang.String .class , java.awt.Color .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverter org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverter = new org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverter ( ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.ColorConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverter ) ; assertEquals ( java.awt.Color . java.awt.Color , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.awt.Color .class ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverter . int ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverterFactory org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverterFactory = new org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverterFactory ( ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.ColorConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverterFactory ) ; assertEquals ( java.awt.Color . java.awt.Color , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , java.awt.Color .class ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverterFactory . int ( ) > NUMBER ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverterFactory . int ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.ColorConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalColorConverter ( ) ) ; assertEquals ( java.awt.Color . java.awt.Color , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.awt.Color . java.awt.Color , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.awt.Color . java.awt.Color , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.awt.Color . java.awt.Color , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericConverter org.springframework.core.convert.support.GenericConverter = new org.springframework.core.convert.support.GenericConversionServiceTests.NonConditionalGenericConverter ( ) ; try { org.springframework.core.convert.support.GenericConversionService . addConverter ( org.springframework.core.convert.support.GenericConverter ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalGenericConverter org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalGenericConverter = new org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalGenericConverter ( ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalGenericConverter ) ; assertEquals ( ( java.lang.Integer ) NUMBER , org.springframework.core.convert.support.GenericConversionService . convert ( NUMBER , java.lang.Integer .class ) ) ; assertThat ( org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalGenericConverter . java.util.List<org.springframework.core.convert.support.TypeDescriptor> ( ) . size ( ) , greaterThan ( NUMBER ) ) ; assertTrue ( org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalGenericConverter . java.util.List<org.springframework.core.convert.support.TypeDescriptor> ( ) . stream ( ) . allMatch ( td -> Integer .class . equals ( td . getType ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER } ; byte [] byte[] = org.springframework.core.convert.support.GenericConversionService . convert ( byte[] , byte [] .class ) ; assertSame ( byte[] , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new EnumToStringConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; assertEquals ( STRING , org.springframework.core.convert.support.GenericConversionService . convert ( org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum . org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new EnumToStringConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; assertEquals ( STRING , org.springframework.core.convert.support.GenericConversionService . convert ( org.springframework.core.convert.support.GenericConversionServiceTests.EnumWithSubclass . org.springframework.core.convert.support.GenericConversionServiceTests.EnumWithSubclass , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverter ( new EnumToStringConverter ( org.springframework.core.convert.support.GenericConversionService ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyEnumInterfaceToStringConverter<org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum> < org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum > ( ) ) ; assertEquals ( STRING , org.springframework.core.convert.support.GenericConversionService . convert ( org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum . org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToEnumConverterFactory ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new org.springframework.core.convert.support.GenericConversionServiceTests.StringToMyEnumInterfaceConverterFactory ( ) ) ; assertEquals ( org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum . org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new StringToEnumConverterFactory ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverterFactory ( new org.springframework.core.convert.support.GenericConversionServiceTests.StringToMyEnumBaseInterfaceConverterFactory ( ) ) ; assertEquals ( org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum . org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , org.springframework.core.convert.support.GenericConversionServiceTests.MyEnum .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = null ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.String .class ) ; org.springframework.core.convert.support.GenericConversionService . convert ( java.lang.String , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringToRawCollectionConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringToGenericCollectionConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringToStringCollectionConverter ( ) ) ; org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringToIntegerCollectionConverter ( ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.Integer> ( NUMBER ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.Integer> ( NUMBER ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.Integer> ( NUMBER ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.Integer> ( NUMBER ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringToStringCollectionConverter ( ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; try { org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ; fail ( STRING ) ; } catch ( ConverterNotFoundException org.springframework.core.convert.support.ConverterNotFoundException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringToGenericCollectionConverter ( ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.convert.support.GenericConversionService . addConverter ( new org.springframework.core.convert.support.GenericConversionServiceTests.MyStringToRawCollectionConverter ( ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , org.springframework.core.convert.support.GenericConversionService . convert ( STRING , TypeDescriptor . valueOf ( java.lang.String .class ) , new TypeDescriptor ( java.lang.Class<? extends org.springframework.core.convert.support.GenericConversionServiceTests> ( ) . java.lang.reflect.Field ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.core.convert.support.GenericConversionServiceTests.MyBaseInterface org.springframework.core.convert.support.GenericConversionServiceTests.MyBaseInterface ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.convert.support.Resource [] org.springframework.core.convert.support.Resource[] ( java.lang.String [] java.lang.String[] ) { return java.util.Arrays . java.util.stream.Stream<java.lang.String> ( java.lang.String[] ) . java.util.stream.Stream<java.lang.String> ( java.lang.String -> java.lang.String . java.lang.String ( NUMBER ) ) . java.util.stream.Stream ( DescriptiveResource ::new ) . toArray ( Resource [] ::new ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer [] java.lang.Integer[] ( java.lang.String [] java.lang.String[] ) { return java.util.Arrays . java.util.stream.Stream<java.lang.String> ( java.lang.String[] ) . java.util.stream.Stream<java.lang.String> ( java.lang.String -> java.lang.String . java.lang.String ( NUMBER ) ) . java.util.stream.Stream<java.lang.Integer> ( java.lang.Integer :: java.lang.Integer ) . java.lang.Integer[] ( java.lang.Integer [] ::new ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer [] java.lang.Integer[] ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; return java.util.Arrays . java.util.stream.Stream<java.lang.String> ( java.lang.String[] ) . java.util.stream.Stream<java.lang.String> ( java.lang.String -> java.lang.String . java.lang.String ( NUMBER ) ) . java.util.stream.Stream<java.lang.Integer> ( java.lang.Integer :: java.lang.Integer ) . java.lang.Integer[] ( java.lang.Integer [] ::new ) ; }  <METHOD_END>
<METHOD_START> void ( ) {}  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( org.springframework.core.convert.support.GenericConversionServiceTests.WithCopyConstructor org.springframework.core.convert.support.GenericConversionServiceTests.WithCopyConstructor ) {}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { int ++ ; return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.awt.Color java.awt.Color ( java.lang.String java.lang.String ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { java.util.List<org.springframework.core.convert.support.TypeDescriptor> . add ( org.springframework.core.convert.support.TypeDescriptor ) ; return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return null ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.core.convert.support.TypeDescriptor> < TypeDescriptor > java.util.List<org.springframework.core.convert.support.TypeDescriptor> ( ) { return java.util.List<org.springframework.core.convert.support.TypeDescriptor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { int ++ ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T extends java.awt.Color > org.springframework.core.convert.support.Converter<java.lang.String,T> < java.lang.String , T > org.springframework.core.convert.support.Converter<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return ( Converter < java.lang.String , T > ) org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverter ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return org.springframework.core.convert.support.GenericConversionServiceTests.MyConditionalConverter . int ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection java.util.Collection ( java.lang.String java.lang.String ) { return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<?> < ? > java.util.Collection<?> ( java.lang.String java.lang.String ) { return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( T T ) { return T . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public < T extends org.springframework.core.convert.support.GenericConversionServiceTests.MyEnumInterface > org.springframework.core.convert.support.Converter<java.lang.String,T> < java.lang.String , T > org.springframework.core.convert.support.Converter<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.core.convert.support.GenericConversionServiceTests.StringToMyEnumInterfaceConverterFactory.StringToMyEnumInterfaceConverter ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> ) { this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> public T T ( java.lang.String java.lang.String ) { for ( T T : java.lang.Class<T> . T[] ( ) ) { if ( T . java.lang.String ( ) . boolean ( java.lang.String ) ) { return T ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public < T extends org.springframework.core.convert.support.GenericConversionServiceTests.MyEnumBaseInterface > org.springframework.core.convert.support.Converter<java.lang.String,T> < java.lang.String , T > org.springframework.core.convert.support.Converter<java.lang.String,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.core.convert.support.GenericConversionServiceTests.StringToMyEnumBaseInterfaceConverterFactory.StringToMyEnumBaseInterfaceConverter ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> ) { this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> public T T ( java.lang.String java.lang.String ) { for ( T T : java.lang.Class<T> . T[] ( ) ) { if ( T . java.lang.String ( ) . boolean ( java.lang.String ) ) { return T ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.lang.String java.lang.String ) { return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ( java.lang.String java.lang.String ) { return java.util.Collections . java.util.Set<java.lang.Integer> ( java.lang.String . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.awt.Color java.awt.Color ( java.lang.String java.lang.String ) { return java.awt.Color . java.awt.Color ( java.lang.String . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { org.springframework.core.convert.support.GenericConversionServiceTests.ExampleAnnotation org.springframework.core.convert.support.GenericConversionServiceTests.ExampleAnnotation = org.springframework.core.convert.support.TypeDescriptor . getAnnotation ( org.springframework.core.convert.support.GenericConversionServiceTests.ExampleAnnotation .class ) ; return ( org.springframework.core.convert.support.GenericConversionServiceTests.ExampleAnnotation != null && org.springframework.core.convert.support.GenericConversionServiceTests.ExampleAnnotation . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.awt.Color java.awt.Color ( java.lang.String java.lang.String ) { return java.awt.Color . java.awt.Color ( java.lang.String . java.lang.String ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
