<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.action.ActionAndTimerTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < TestStates , TestEvents > org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction = context . getBean ( org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction .class ) ; org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction = context . getBean ( org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction .class ) ; org.springframework.statemachine.action.ActionAndTimerTests.TestListener org.springframework.statemachine.action.ActionAndTimerTests.TestListener = new org.springframework.statemachine.action.ActionAndTimerTests.TestListener ( ) ; org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . addStateListener ( org.springframework.statemachine.action.ActionAndTimerTests.TestListener ) ; org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S1 ) ) ; org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.action.ActionAndTimerTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.action.StateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S3 ) ) ; assertThat ( org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction . java.lang.Exception , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction . java.lang.Exception , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.action.StateMachineStateConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineStateConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 , null , org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction ( ) ) . state ( TestStates . S3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.action.StateMachineTransitionConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineTransitionConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) . and ( ) . withInternal ( ) . source ( TestStates . S2 ) . action ( org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction ( ) ) . timerOnce ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction ( ) { return new org.springframework.statemachine.action.ActionAndTimerTests.TestExitAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction ( ) { return new org.springframework.statemachine.action.ActionAndTimerTests.TestTimerAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.action.State<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) { if ( org.springframework.statemachine.action.State<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . getId ( ) . equals ( TestStates . S3 ) ) { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.action.StateContext<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { this . java.lang.Exception = java.lang.InterruptedException ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.action.StateContext<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { this . java.lang.Exception = java.lang.InterruptedException ; } finally { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.action.AnnotationConfigApplicationContext org.springframework.statemachine.action.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
