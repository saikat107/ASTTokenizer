<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc = standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.resultmatchers.ContentAssertionTests.SimpleController ( ) ) . alwaysExpect ( status ( ) . isOk ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_PLAIN ) ) . andExpect ( content ( ) . contentType ( MediaType . valueOf ( STRING ) ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( STRING ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( MediaType . TEXT_PLAIN ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( content ( ) . contentType ( MediaType . valueOf ( STRING ) ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( STRING ) ) . andExpect ( content ( ) . contentTypeCompatibleWith ( MediaType . TEXT_PLAIN ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_PLAIN ) ) . andExpect ( content ( ) . string ( STRING ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( content ( ) . string ( STRING ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_PLAIN ) ) . andExpect ( content ( ) . string ( equalTo ( STRING ) ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( content ( ) . string ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_PLAIN ) ) . andExpect ( content ( ) . bytes ( STRING . byte[] ( STRING ) ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( content ( ) . bytes ( STRING . byte[] ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_PLAIN ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . accept ( MediaType . TEXT_PLAIN ) ) . andExpect ( content ( ) . encoding ( STRING ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( content ( ) . encoding ( STRING ) ) . andExpect ( content ( ) . bytes ( STRING . byte[] ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , produces = STRING ) @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , produces = STRING ) @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
