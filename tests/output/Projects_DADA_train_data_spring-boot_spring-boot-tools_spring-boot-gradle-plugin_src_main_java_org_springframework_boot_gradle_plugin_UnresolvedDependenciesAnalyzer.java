<METHOD_START> void void ( java.util.Set<org.springframework.boot.gradle.plugin.UnresolvedDependency> < UnresolvedDependency > java.util.Set<org.springframework.boot.gradle.plugin.UnresolvedDependency> ) { this . java.util.Set<org.springframework.boot.gradle.plugin.ModuleVersionSelector> = java.util.Set<org.springframework.boot.gradle.plugin.UnresolvedDependency> . stream ( ) . map ( unresolvedDependency -> unresolvedDependency . getSelector ( ) ) . filter ( this :: boolean ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.Set<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( Project org.springframework.boot.gradle.plugin.Project ) { if ( ! this . java.util.Set<org.springframework.boot.gradle.plugin.ModuleVersionSelector> . isEmpty ( ) && ! org.springframework.boot.gradle.plugin.Project . getPlugins ( ) . hasPlugin ( DependencyManagementPlugin .class ) ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING + STRING ) ; this . java.util.Set<org.springframework.boot.gradle.plugin.ModuleVersionSelector> . stream ( ) . forEach ( dependency -> message . append ( STRING + dependency + STRING ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING + STRING + org.springframework.boot.gradle.plugin.Project . getName ( ) + STRING ) ; org.slf4j.Logger . warn ( java.lang.StringBuilder . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ModuleVersionSelector org.springframework.boot.gradle.plugin.ModuleVersionSelector ) { java.lang.String java.lang.String = org.springframework.boot.gradle.plugin.ModuleVersionSelector . getVersion ( ) ; return java.lang.String == null || java.lang.String . java.lang.String ( ) . int ( ) == NUMBER ; }  <METHOD_END>
