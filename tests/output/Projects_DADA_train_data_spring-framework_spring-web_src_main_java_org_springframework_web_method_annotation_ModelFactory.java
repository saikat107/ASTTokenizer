<METHOD_START> public void ( java.util.List<org.springframework.web.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.method.annotation.InvocableHandlerMethod> , WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory , SessionAttributesHandler org.springframework.web.method.annotation.SessionAttributesHandler ) { if ( java.util.List<org.springframework.web.method.annotation.InvocableHandlerMethod> != null ) { for ( InvocableHandlerMethod org.springframework.web.method.annotation.InvocableHandlerMethod : java.util.List<org.springframework.web.method.annotation.InvocableHandlerMethod> ) { this . java.util.List<org.springframework.web.method.annotation.ModelFactory.ModelMethod> . boolean ( new org.springframework.web.method.annotation.ModelFactory.ModelMethod ( org.springframework.web.method.annotation.InvocableHandlerMethod ) ) ; } } this . org.springframework.web.method.annotation.WebDataBinderFactory = org.springframework.web.method.annotation.WebDataBinderFactory ; this . org.springframework.web.method.annotation.SessionAttributesHandler = org.springframework.web.method.annotation.SessionAttributesHandler ; }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest , ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer , HandlerMethod org.springframework.web.method.annotation.HandlerMethod ) throws java.lang.Exception { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = this . org.springframework.web.method.annotation.SessionAttributesHandler . retrieveAttributes ( org.springframework.web.method.annotation.NativeWebRequest ) ; org.springframework.web.method.annotation.ModelAndViewContainer . mergeAttributes ( java.util.Map<java.lang.String,> ) ; void ( org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.ModelAndViewContainer ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ( org.springframework.web.method.annotation.HandlerMethod ) ) { if ( ! org.springframework.web.method.annotation.ModelAndViewContainer . containsAttribute ( java.lang.String ) ) { java.lang.Object java.lang.Object = this . org.springframework.web.method.annotation.SessionAttributesHandler . retrieveAttribute ( org.springframework.web.method.annotation.NativeWebRequest , java.lang.String ) ; if ( java.lang.Object == null ) { throw new HttpSessionRequiredException ( STRING + java.lang.String + STRING , java.lang.String ) ; } org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( java.lang.String , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest , ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer )			throws java.lang.Exception { while ( ! this . java.util.List<org.springframework.web.method.annotation.ModelFactory.ModelMethod> . boolean ( ) ) { InvocableHandlerMethod org.springframework.web.method.annotation.InvocableHandlerMethod = org.springframework.web.method.annotation.ModelFactory.ModelMethod ( org.springframework.web.method.annotation.ModelAndViewContainer ) . getHandlerMethod ( ) ; ModelAttribute org.springframework.web.method.annotation.ModelAttribute = org.springframework.web.method.annotation.InvocableHandlerMethod . getMethodAnnotation ( ModelAttribute .class ) ; if ( org.springframework.web.method.annotation.ModelAndViewContainer . containsAttribute ( org.springframework.web.method.annotation.ModelAttribute . name ( ) ) ) { if ( ! org.springframework.web.method.annotation.ModelAttribute . binding ( ) ) { org.springframework.web.method.annotation.ModelAndViewContainer . setBindingDisabled ( org.springframework.web.method.annotation.ModelAttribute . name ( ) ) ; } continue; } java.lang.Object java.lang.Object = org.springframework.web.method.annotation.InvocableHandlerMethod . invokeForRequest ( org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.ModelAndViewContainer ) ; if ( ! org.springframework.web.method.annotation.InvocableHandlerMethod . isVoid ( ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.Object , org.springframework.web.method.annotation.InvocableHandlerMethod . getReturnType ( ) ) ; if ( ! org.springframework.web.method.annotation.ModelAttribute . binding ( ) ) { org.springframework.web.method.annotation.ModelAndViewContainer . setBindingDisabled ( java.lang.String ) ; } if ( ! org.springframework.web.method.annotation.ModelAndViewContainer . containsAttribute ( java.lang.String ) ) { org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( java.lang.String , java.lang.Object ) ; } } } }  <METHOD_END>
<METHOD_START> private org.springframework.web.method.annotation.ModelFactory.ModelMethod org.springframework.web.method.annotation.ModelFactory.ModelMethod ( ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer ) { for ( org.springframework.web.method.annotation.ModelFactory.ModelMethod org.springframework.web.method.annotation.ModelFactory.ModelMethod : this . java.util.List<org.springframework.web.method.annotation.ModelFactory.ModelMethod> ) { if ( org.springframework.web.method.annotation.ModelFactory.ModelMethod . boolean ( org.springframework.web.method.annotation.ModelAndViewContainer ) ) { if ( org.springframework.web.method.annotation.Log . isTraceEnabled ( ) ) { org.springframework.web.method.annotation.Log . trace ( STRING + org.springframework.web.method.annotation.ModelFactory.ModelMethod ) ; } this . java.util.List<org.springframework.web.method.annotation.ModelFactory.ModelMethod> . boolean ( org.springframework.web.method.annotation.ModelFactory.ModelMethod ) ; return org.springframework.web.method.annotation.ModelFactory.ModelMethod ; } } org.springframework.web.method.annotation.ModelFactory.ModelMethod org.springframework.web.method.annotation.ModelFactory.ModelMethod = this . java.util.List<org.springframework.web.method.annotation.ModelFactory.ModelMethod> . org.springframework.web.method.annotation.ModelFactory.ModelMethod ( NUMBER ) ; if ( org.springframework.web.method.annotation.Log . isTraceEnabled ( ) ) { org.springframework.web.method.annotation.Log . trace ( STRING + org.springframework.web.method.annotation.ModelFactory.ModelMethod . java.util.List<java.lang.String> ( org.springframework.web.method.annotation.ModelAndViewContainer ) + STRING + org.springframework.web.method.annotation.ModelFactory.ModelMethod ) ; } this . java.util.List<org.springframework.web.method.annotation.ModelFactory.ModelMethod> . boolean ( org.springframework.web.method.annotation.ModelFactory.ModelMethod ) ; return org.springframework.web.method.annotation.ModelFactory.ModelMethod ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( HandlerMethod org.springframework.web.method.annotation.HandlerMethod ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( MethodParameter org.springframework.web.method.annotation.MethodParameter : org.springframework.web.method.annotation.HandlerMethod . getMethodParameters ( ) ) { if ( org.springframework.web.method.annotation.MethodParameter . hasParameterAnnotation ( ModelAttribute .class ) ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.method.annotation.MethodParameter ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.method.annotation.MethodParameter . getParameterType ( ) ; if ( this . org.springframework.web.method.annotation.SessionAttributesHandler . isHandlerSessionAttribute ( java.lang.String , java.lang.Class<> ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest , ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer ) throws java.lang.Exception { ModelMap org.springframework.web.method.annotation.ModelMap = org.springframework.web.method.annotation.ModelAndViewContainer . getDefaultModel ( ) ; if ( org.springframework.web.method.annotation.ModelAndViewContainer . getSessionStatus ( ) . isComplete ( ) ) { this . org.springframework.web.method.annotation.SessionAttributesHandler . cleanupAttributes ( org.springframework.web.method.annotation.NativeWebRequest ) ; } else { this . org.springframework.web.method.annotation.SessionAttributesHandler . storeAttributes ( org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.ModelMap ) ; } if ( ! org.springframework.web.method.annotation.ModelAndViewContainer . isRequestHandled ( ) && org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) == org.springframework.web.method.annotation.ModelMap ) { void ( org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.ModelMap ) ; } }  <METHOD_END>
<METHOD_START> private void void ( NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest , ModelMap org.springframework.web.method.annotation.ModelMap ) throws java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( org.springframework.web.method.annotation.ModelMap . keySet ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.lang.Object java.lang.Object = org.springframework.web.method.annotation.ModelMap . get ( java.lang.String ) ; if ( boolean ( java.lang.String , java.lang.Object ) ) { java.lang.String java.lang.String = BindingResult . MODEL_KEY_PREFIX + java.lang.String ; if ( ! org.springframework.web.method.annotation.ModelMap . containsAttribute ( java.lang.String ) ) { WebDataBinder org.springframework.web.method.annotation.WebDataBinder = this . org.springframework.web.method.annotation.WebDataBinderFactory . createBinder ( org.springframework.web.method.annotation.NativeWebRequest , java.lang.Object , java.lang.String ) ; org.springframework.web.method.annotation.ModelMap . put ( java.lang.String , org.springframework.web.method.annotation.WebDataBinder . getBindingResult ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.String . boolean ( BindingResult . MODEL_KEY_PREFIX ) ) { return false ; } java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ) ; if ( this . org.springframework.web.method.annotation.SessionAttributesHandler . isHandlerSessionAttribute ( java.lang.String , java.lang.Class<> ) ) { return true ; } return ( java.lang.Object != null && ! java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) && ! ( java.lang.Object instanceof java.util.Collection ) && ! ( java.lang.Object instanceof java.util.Map ) && ! BeanUtils . isSimpleValueType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { ModelAttribute org.springframework.web.method.annotation.ModelAttribute = org.springframework.web.method.annotation.MethodParameter . getParameterAnnotation ( ModelAttribute .class ) ; java.lang.String java.lang.String = ( org.springframework.web.method.annotation.ModelAttribute != null ? org.springframework.web.method.annotation.ModelAttribute . value ( ) : null ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : Conventions . getVariableNameForParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.method.annotation.MethodParameter ) { ModelAttribute org.springframework.web.method.annotation.ModelAttribute = org.springframework.web.method.annotation.MethodParameter . getMethodAnnotation ( ModelAttribute .class ) ; if ( org.springframework.web.method.annotation.ModelAttribute != null && StringUtils . hasText ( org.springframework.web.method.annotation.ModelAttribute . value ( ) ) ) { return org.springframework.web.method.annotation.ModelAttribute . value ( ) ; } else { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.method.annotation.MethodParameter . getMethod ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.method.annotation.MethodParameter . getContainingClass ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveReturnType ( java.lang.reflect.Method , java.lang.Class<> ) ; return Conventions . getVariableNameForReturnType ( java.lang.reflect.Method , java.lang.Class<> , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public void ( InvocableHandlerMethod org.springframework.web.method.annotation.InvocableHandlerMethod ) { this . org.springframework.web.method.annotation.InvocableHandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ; for ( MethodParameter org.springframework.web.method.annotation.MethodParameter : org.springframework.web.method.annotation.InvocableHandlerMethod . getMethodParameters ( ) ) { if ( org.springframework.web.method.annotation.MethodParameter . hasParameterAnnotation ( ModelAttribute .class ) ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ( org.springframework.web.method.annotation.MethodParameter ) ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.web.method.annotation.InvocableHandlerMethod org.springframework.web.method.annotation.InvocableHandlerMethod ( ) { return this . org.springframework.web.method.annotation.InvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer ) { for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { if ( ! org.springframework.web.method.annotation.ModelAndViewContainer . containsAttribute ( java.lang.String ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( this . java.util.Set<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : this . java.util.Set<java.lang.String> ) { if ( ! org.springframework.web.method.annotation.ModelAndViewContainer . containsAttribute ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.method.annotation.InvocableHandlerMethod . getMethod ( ) . toGenericString ( ) ; }  <METHOD_END>
