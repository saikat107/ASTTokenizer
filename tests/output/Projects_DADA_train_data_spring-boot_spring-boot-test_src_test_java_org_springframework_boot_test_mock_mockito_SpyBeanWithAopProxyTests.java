<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Long java.lang.Long = this . org.springframework.boot.test.mock.mockito.SpyBeanWithAopProxyTests.DateService . java.lang.Long ( false ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Long java.lang.Long = this . org.springframework.boot.test.mock.mockito.SpyBeanWithAopProxyTests.DateService . java.lang.Long ( false ) ; assertThat ( java.lang.Long ) . isEqualTo ( java.lang.Long ) ; verify ( this . org.springframework.boot.test.mock.mockito.SpyBeanWithAopProxyTests.DateService , times ( NUMBER ) ) . getDate ( false ) ; verify ( this . org.springframework.boot.test.mock.mockito.SpyBeanWithAopProxyTests.DateService , times ( NUMBER ) ) . getDate ( boolean ( ) ) ; verify ( this . org.springframework.boot.test.mock.mockito.SpyBeanWithAopProxyTests.DateService , times ( NUMBER ) ) . getDate ( boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( boolean ( ) ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( ClassUtils . resolveClassName ( STRING , null ) , STRING , java.lang.Boolean . java.lang.Class<java.lang.Boolean> ) ; return ( boolean ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null , false ) ; } return ArgumentMatchers . eq ( false ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( boolean ( ) ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( ClassUtils . resolveClassName ( STRING , null ) , STRING ) ; return ( boolean ) ReflectionUtils . invokeMethod ( java.lang.reflect.Method , null ) ; } return ArgumentMatchers . anyBoolean ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ClassUtils . isPresent ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.CacheResolver org.springframework.boot.test.mock.mockito.CacheResolver ( CacheManager org.springframework.boot.test.mock.mockito.CacheManager ) { SimpleCacheResolver org.springframework.boot.test.mock.mockito.SimpleCacheResolver = new SimpleCacheResolver ( ) ; org.springframework.boot.test.mock.mockito.SimpleCacheResolver . setCacheManager ( org.springframework.boot.test.mock.mockito.CacheManager ) ; return org.springframework.boot.test.mock.mockito.SimpleCacheResolver ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.test.mock.mockito.ConcurrentMapCacheManager org.springframework.boot.test.mock.mockito.ConcurrentMapCacheManager ( ) { ConcurrentMapCacheManager org.springframework.boot.test.mock.mockito.ConcurrentMapCacheManager = new ConcurrentMapCacheManager ( ) ; org.springframework.boot.test.mock.mockito.ConcurrentMapCacheManager . setCacheNames ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; return org.springframework.boot.test.mock.mockito.ConcurrentMapCacheManager ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( cacheNames = STRING ) public java.lang.Long java.lang.Long ( boolean boolean ) { return java.lang.System . long ( ) ; }  <METHOD_END>
