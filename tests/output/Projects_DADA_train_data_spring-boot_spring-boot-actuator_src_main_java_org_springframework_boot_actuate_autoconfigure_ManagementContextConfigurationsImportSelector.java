<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.boot.actuate.autoconfigure.AnnotationMetadata ) { java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> < org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration > java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> = java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> ( ) ; OrderComparator . sort ( java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration : java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> ) { java.util.List<java.lang.String> . boolean ( org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> < org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration > java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> ( ) { SimpleMetadataReaderFactory org.springframework.boot.actuate.autoconfigure.SimpleMetadataReaderFactory = new SimpleMetadataReaderFactory ( this . java.lang.ClassLoader ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> < org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration > java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> = new java.util.ArrayList<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ( ) ) { void ( org.springframework.boot.actuate.autoconfigure.SimpleMetadataReaderFactory , java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> , java.lang.String ) ; } return java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> ; }  <METHOD_END>
<METHOD_START> private void void ( SimpleMetadataReaderFactory org.springframework.boot.actuate.autoconfigure.SimpleMetadataReaderFactory , java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> < org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration > java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> , java.lang.String java.lang.String ) { try { MetadataReader org.springframework.boot.actuate.autoconfigure.MetadataReader = org.springframework.boot.actuate.autoconfigure.SimpleMetadataReaderFactory . getMetadataReader ( java.lang.String ) ; java.util.List<org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration> . boolean ( new org.springframework.boot.actuate.autoconfigure.ManagementContextConfigurationsImportSelector.ManagementConfiguration ( org.springframework.boot.actuate.autoconfigure.MetadataReader ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( STRING + java.lang.String + STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return SpringFactoriesLoader . loadFactoryNames ( ManagementContextConfiguration .class , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> void ( MetadataReader org.springframework.boot.actuate.autoconfigure.MetadataReader ) { AnnotationMetadata org.springframework.boot.actuate.autoconfigure.AnnotationMetadata = org.springframework.boot.actuate.autoconfigure.MetadataReader . getAnnotationMetadata ( ) ; this . int = int ( org.springframework.boot.actuate.autoconfigure.AnnotationMetadata ) ; this . java.lang.String = org.springframework.boot.actuate.autoconfigure.MetadataReader . getClassMetadata ( ) . getClassName ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( AnnotationMetadata org.springframework.boot.actuate.autoconfigure.AnnotationMetadata ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.autoconfigure.AnnotationMetadata . getAnnotationAttributes ( Order .class . java.lang.String ( ) ) ; java.lang.Integer java.lang.Integer = ( java.util.Map<java.lang.String,java.lang.Object> == null ? null : ( java.lang.Integer ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; return ( java.lang.Integer == null ? Ordered . LOWEST_PRECEDENCE : java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
