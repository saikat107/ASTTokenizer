<METHOD_START> protected void ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.Class<T> = java.lang.Class<T> ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { try { Project org.springframework.boot.gradle.tasks.bundling.Project = ProjectBuilder . builder ( ) . withProjectDir ( this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFolder ( ) ) . build ( ) ; this . T = T ( org.springframework.boot.gradle.tasks.bundling.Project . getTasks ( ) . create ( STRING , this . java.lang.Class<T> ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . execute ( ) ; assertThat ( this . T . getArchivePath ( ) . exists ( ) ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( this . java.lang.String ) ; assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . classpath ( this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) , this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) ) ; this . T . execute ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) ) . isNotNull ( ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; java.io.File java.io.File = this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFolder ( ) ; java.io.File java.io.File = new java.io.File ( java.io.File , STRING ) ; java.io.File . java.io.File ( ) . boolean ( ) ; java.io.File . boolean ( ) ; this . T . classpath ( java.io.File ) ; this . T . execute ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . execute ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . execute ( ) ; this . T . getManifest ( ) . getAttributes ( ) . put ( STRING , STRING ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . classpath ( this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) , this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) ) ; this . T . requiresUnpack ( STRING ) ; this . T . execute ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) . java.lang.String ( ) ) . startsWith ( STRING ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) . java.lang.String ( ) ) . isNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . classpath ( this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) , this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) ) ; this . T . requiresUnpack ( ( element ) -> element . getName ( ) . endsWith ( STRING ) ) ; this . T . execute ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) . java.lang.String ( ) ) . startsWith ( STRING ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) . java.lang.String ( ) ) . isNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . getLaunchScript ( ) . setIncluded ( true ) ; this . T . execute ( ) ; assertThat ( java.nio.file.Files . byte[] ( this . T . getArchivePath ( ) . toPath ( ) ) ) . startsWith ( new DefaultLaunchScript ( null , null ) . toByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; LaunchScriptConfiguration org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration = this . T . getLaunchScript ( ) ; org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration . setIncluded ( true ) ; java.io.File java.io.File = this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) ; java.nio.file.Files . java.nio.file.Path ( java.io.File . java.nio.file.Path ( ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.nio.file.StandardOpenOption . java.nio.file.StandardOpenOption ) ; org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration . setScript ( java.io.File ) ; this . T . execute ( ) ; assertThat ( java.nio.file.Files . byte[] ( this . T . getArchivePath ( ) . toPath ( ) ) ) . startsWith ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; LaunchScriptConfiguration org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration = this . T . getLaunchScript ( ) ; org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration . setIncluded ( true ) ; org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration . getProperties ( ) . put ( STRING , STRING ) ; this . T . execute ( ) ; assertThat ( java.nio.file.Files . byte[] ( this . T . getArchivePath ( ) . toPath ( ) ) ) . containsSequence ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . getManifest ( ) . getAttributes ( ) . put ( STRING , STRING ) ; this . T . execute ( ) ; assertThat ( this . T . getArchivePath ( ) . exists ( ) ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . getManifest ( ) . getAttributes ( ) . put ( STRING , STRING ) ; this . T . execute ( ) ; assertThat ( this . T . getArchivePath ( ) . exists ( ) ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( this . java.lang.String ) ; assertThat ( java.util.jar.JarFile . java.util.jar.Manifest ( ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . setPreserveFileTimestamps ( false ) ; this . T . execute ( ) ; assertThat ( this . T . getArchivePath ( ) . exists ( ) ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { java.util.Enumeration<java.util.jar.JarEntry> < java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = java.util.jar.JarFile . java.util.Enumeration<java.util.jar.JarEntry> ( ) ; while ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) { java.util.jar.JarEntry java.util.jar.JarEntry = java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) ; assertThat ( java.util.jar.JarEntry . long ( ) ) . isEqualTo ( GUtil . CONSTANT_TIME_FOR_ZIP_ENTRIES ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . from ( this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) , this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) , this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) ) ; this . T . setReproducibleFileOrder ( true ) ; this . T . execute ( ) ; assertThat ( this . T . getArchivePath ( ) . exists ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { java.util.Enumeration<java.util.jar.JarEntry> < java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = java.util.jar.JarFile . java.util.Enumeration<java.util.jar.JarEntry> ( ) ; while ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) { java.util.jar.JarEntry java.util.jar.JarEntry = java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) ; if ( java.util.jar.JarEntry . java.lang.String ( ) . boolean ( STRING ) ) { java.util.List<java.lang.String> . boolean ( java.util.jar.JarEntry . java.lang.String ( ) ) ; } } } assertThat ( java.util.List<java.lang.String> ) . containsExactly ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . classpath ( this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) ) ; this . T . execute ( ) ; assertThat ( this . T . getArchivePath ( ) . exists ( ) ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) ) . isNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . T . setMainClass ( STRING ) ; this . T . classpath ( this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFile ( STRING ) ) ; this . T . setExcludeDevtools ( false ) ; this . T . execute ( ) ; assertThat ( this . T . getArchivePath ( ) . exists ( ) ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( this . T . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( this . java.lang.String + STRING ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> private T T ( T T ) throws java.io.IOException { AbstractArchiveTask org.springframework.boot.gradle.tasks.bundling.AbstractArchiveTask = T ; org.springframework.boot.gradle.tasks.bundling.AbstractArchiveTask . setBaseName ( STRING ) ; org.springframework.boot.gradle.tasks.bundling.AbstractArchiveTask . setDestinationDir ( this . org.springframework.boot.gradle.tasks.bundling.TemporaryFolder . newFolder ( ) ) ; return T ; }  <METHOD_END>
<METHOD_START> protected T T ( ) { return this . T ; }  <METHOD_END>
