<METHOD_START> @ Test public void void ( ) { assertEquals ( new ParamsRequestCondition ( STRING ) , new ParamsRequestCondition ( STRING ) ) ; assertFalse ( new ParamsRequestCondition ( STRING ) . equals ( new ParamsRequestCondition ( STRING ) ) ) ; assertFalse ( new ParamsRequestCondition ( STRING ) . equals ( new ParamsRequestCondition ( STRING ) ) ) ; assertEquals ( new ParamsRequestCondition ( STRING ) , new ParamsRequestCondition ( STRING ) ) ; assertFalse ( new ParamsRequestCondition ( STRING ) . equals ( new ParamsRequestCondition ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertNotNull ( new ParamsRequestCondition ( STRING ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertNull ( new ParamsRequestCondition ( STRING ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ParamsRequestCondition org.springframework.web.servlet.mvc.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; assertNotNull ( org.springframework.web.servlet.mvc.condition.ParamsRequestCondition . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertNotNull ( new ParamsRequestCondition ( STRING ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertNull ( new ParamsRequestCondition ( STRING ) . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ParamsRequestCondition org.springframework.web.servlet.mvc.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING , STRING , STRING ) ; ParamsRequestCondition org.springframework.web.servlet.mvc.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING , STRING ) ; int int = org.springframework.web.servlet.mvc.condition.ParamsRequestCondition . compareTo ( org.springframework.web.servlet.mvc.condition.ParamsRequestCondition , org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.servlet.mvc.condition.ParamsRequestCondition . compareTo ( org.springframework.web.servlet.mvc.condition.ParamsRequestCondition , org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ; assertTrue ( STRING + int , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ParamsRequestCondition org.springframework.web.servlet.mvc.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; ParamsRequestCondition org.springframework.web.servlet.mvc.condition.ParamsRequestCondition = new ParamsRequestCondition ( STRING ) ; ParamsRequestCondition org.springframework.web.servlet.mvc.condition.ParamsRequestCondition = org.springframework.web.servlet.mvc.condition.ParamsRequestCondition . combine ( org.springframework.web.servlet.mvc.condition.ParamsRequestCondition ) ; java.util.Collection<org.springframework.web.servlet.mvc.condition.ParamExpression> < ParamExpression > java.util.Collection<org.springframework.web.servlet.mvc.condition.ParamExpression> = org.springframework.web.servlet.mvc.condition.ParamsRequestCondition . getContent ( ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.web.servlet.mvc.condition.ParamExpression> . size ( ) ) ; }  <METHOD_END>
