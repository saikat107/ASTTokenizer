<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertNull ( org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( java.util.Collections .< Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ( ) , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> ) ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertNull ( org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING + STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertNull ( org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; int int = STRING . byte[] ( ) . int ; java.lang.String java.lang.String = STRING + int + STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertEquals ( int , ( int ) org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertEquals ( int , ( int ) org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertNull ( org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertNull ( org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertNull ( org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertNull ( org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( STRING , NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; assertEquals ( STRING , new java.lang.String ( java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . get ( NUMBER ) . getPayload ( ) ) ) ; assertEquals ( NUMBER , org.springframework.messaging.simp.stomp.BufferingStompDecoder . getBufferSize ( ) ) ; assertEquals ( NUMBER , ( int ) org.springframework.messaging.simp.stomp.BufferingStompDecoder . getExpectedContentLength ( ) ) ; try { java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; fail ( STRING ) ; } catch ( StompConversionException org.springframework.messaging.simp.stomp.StompConversionException ) { } }  <METHOD_END>
<METHOD_START> @ Test ( expected = StompConversionException .class ) public void void ( ) { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> = org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.stomp.Message<byte[]>> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = StompConversionException .class ) public void void ( ) { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = StompConversionException .class ) public void void ( ) { BufferingStompDecoder org.springframework.messaging.simp.stomp.BufferingStompDecoder = new BufferingStompDecoder ( org.springframework.messaging.simp.stomp.StompDecoder , NUMBER ) ; java.lang.String java.lang.String = STRING ; org.springframework.messaging.simp.stomp.BufferingStompDecoder . decode ( java.nio.ByteBuffer ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private java.nio.ByteBuffer java.nio.ByteBuffer ( java.lang.String java.lang.String ) { return java.nio.ByteBuffer . java.nio.ByteBuffer ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; }  <METHOD_END>
