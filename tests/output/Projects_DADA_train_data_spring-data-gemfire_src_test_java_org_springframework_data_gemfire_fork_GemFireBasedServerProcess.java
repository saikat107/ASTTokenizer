<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) throws java.lang.Throwable { org.springframework.data.gemfire.fork.ServerLauncher ( java.lang.String[] ) ; void ( ) ; ProcessUtils . writePid ( new java.io.File ( FileSystemUtils . WORKING_DIRECTORY , java.lang.String ( ) ) , ProcessUtils . currentPid ( ) ) ; ProcessUtils . waitForStopSignal ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.ServerLauncher org.springframework.data.gemfire.fork.ServerLauncher ( java.lang.String [] java.lang.String[] ) { ServerLauncher org.springframework.data.gemfire.fork.ServerLauncher = org.springframework.data.gemfire.fork.ServerLauncher ( java.lang.String[] ) ; org.springframework.data.gemfire.fork.ServerLauncher . start ( ) ; return org.springframework.data.gemfire.fork.ServerLauncher ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.gemfire.fork.ServerLauncher org.springframework.data.gemfire.fork.ServerLauncher ( java.lang.String [] java.lang.String[] ) { return new ServerLauncher . ServerLauncher ( java.lang.String[] ) . setMemberName ( java.lang.String ( STRING , java.lang.String ) ) . setCommand ( ServerLauncher . Command . START ) . setDisableDefaultServer ( true ) . setRedirectOutput ( false ) . set ( DistributionConfig . HTTP_SERVICE_PORT_NAME , java.lang.String ( STRING , java.lang.String ) ) . set ( DistributionConfig . JMX_MANAGER_NAME , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) . set ( DistributionConfig . JMX_MANAGER_START_NAME , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) . set ( DistributionConfig . LOG_LEVEL_NAME , java.lang.String ( STRING , java.lang.String ) ) . set ( DistributionConfig . USE_CLUSTER_CONFIGURATION_NAME , java.lang.String ( STRING , java.lang.String ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { java.lang.Runtime . java.lang.Runtime ( ) . void ( new java.lang.Thread ( ( ) { ServerLauncher org.springframework.data.gemfire.fork.ServerLauncher = ServerLauncher . getInstance ( ) ; if ( org.springframework.data.gemfire.fork.ServerLauncher != null ) { org.springframework.data.gemfire.fork.ServerLauncher . stop ( ) ; } } ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( ) { return org.springframework.data.gemfire.fork.GemFireBasedServerProcess .class . java.lang.String ( ) . java.lang.String ( ) . java.lang.String ( STRING ) ; }  <METHOD_END>
