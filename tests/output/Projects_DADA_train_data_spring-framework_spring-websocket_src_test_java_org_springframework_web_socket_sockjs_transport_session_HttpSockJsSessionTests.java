<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.transport.session.HttpSockJsSessionTests.TestAbstractHttpSockJsSession org.springframework.web.socket.sockjs.transport.session.HttpSockJsSessionTests.TestAbstractHttpSockJsSession ( ) { return new org.springframework.web.socket.sockjs.transport.session.HttpSockJsSessionTests.TestAbstractHttpSockJsSession ( this . sockJsConfig , this . webSocketHandler , null ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { super. setUp ( ) ; this . org.springframework.web.socket.sockjs.transport.session.SockJsFrameFormat = new DefaultSockJsFrameFormat ( STRING ) ; this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.socket.sockjs.transport.session.ServerHttpResponse = new ServletServerHttpResponse ( this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletResponse ) ; this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletRequest . setAsyncSupported ( true ) ; this . org.springframework.web.socket.sockjs.transport.session.ServerHttpRequest = new ServletServerHttpRequest ( this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . session . handleInitialRequest ( this . org.springframework.web.socket.sockjs.transport.session.ServerHttpRequest , this . org.springframework.web.socket.sockjs.transport.session.ServerHttpResponse , this . org.springframework.web.socket.sockjs.transport.session.SockJsFrameFormat ) ; assertEquals ( STRING , this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletResponse . getContentAsString ( ) ) ; assertTrue ( this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletRequest . isAsyncStarted ( ) ) ; verify ( this . webSocketHandler ) . afterConnectionEstablished ( this . session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . session . getMessageCache ( ) . add ( STRING ) ; this . session . handleSuccessiveRequest ( this . org.springframework.web.socket.sockjs.transport.session.ServerHttpRequest , this . org.springframework.web.socket.sockjs.transport.session.ServerHttpResponse , this . org.springframework.web.socket.sockjs.transport.session.SockJsFrameFormat ) ; assertTrue ( this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertTrue ( this . session . wasHeartbeatScheduled ( ) ) ; assertTrue ( this . session . wasCacheFlushed ( ) ) ; assertEquals ( STRING , this . org.springframework.web.socket.sockjs.transport.session.MockHttpServletResponse . getContentAsString ( ) ) ; verifyNoMoreInteractions ( this . webSocketHandler ) ; }  <METHOD_END>
<METHOD_START> public void ( SockJsServiceConfig org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , WebSocketHandler org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( STRING , org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected byte [] byte[] ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.session.ServerHttpRequest ) { return STRING . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.IOException java.io.IOException ) { this . java.io.IOException = java.io.IOException ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . boolean = true ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected synchronized void void ( SockJsFrame org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) throws java.io.IOException { if ( this . java.io.IOException != null ) { throw this . java.io.IOException ; } else { super. writeFrameInternal ( org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) ; } }  <METHOD_END>
