<METHOD_START> @ Before public void void ( ) java.lang.Exception { ContentNegotiationManagerFactoryBean org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean = new ContentNegotiationManagerFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . afterPropertiesSet ( ) ; ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager = org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManagerFactoryBean . getObject ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler = new ReactiveTypeHandler ( new ReactiveAdapterRegistry ( ) , new SyncTaskExecutor ( ) , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; AsyncWebRequest org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest = new StandardServletAsyncWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . setAsyncWebRequest ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAsyncSupported ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler . isReactiveType ( Mono .class ) ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler . isReactiveType ( Single .class ) ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler . isReactiveType ( io . io . io .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler . isReactiveType ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MonoProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> = MonoProcessor . create ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> , Mono .class , ( ) mono . onNext ( STRING ) , STRING ) ; MonoProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> = MonoProcessor . create ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> , Mono .class , org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> :: onComplete , null ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.web.servlet.mvc.method.annotation.SingleEmitter<java.lang.String>> < SingleEmitter < java.lang.String > > java.util.concurrent.atomic.AtomicReference<org.springframework.web.servlet.mvc.method.annotation.SingleEmitter<java.lang.String>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.web.servlet.mvc.method.annotation.SingleEmitter<java.lang.String>> <> ( ) ; Single < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.Single<java.lang.String> = Single . fromEmitter ( java.util.concurrent.atomic.AtomicReference<org.springframework.web.servlet.mvc.method.annotation.SingleEmitter<java.lang.String>> :: set ) ; void ( org.springframework.web.servlet.mvc.method.annotation.Single<java.lang.String> , Single .class , ( ) ref . get ( ) . onSuccess ( STRING ) , STRING ) ; java.util.concurrent.atomic.AtomicReference < io . io . io < java.lang.String > > ref2 = new java.util.concurrent.atomic.AtomicReference<java.lang.Object> <> ( ) ; io . io . io < java.lang.String > single2 = io . reactivex . Single . create ( ref2 :: set ) ; void ( single2 , io . io . io .class , ( ) ref2 . get ( ) . onSuccess ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MonoProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> = MonoProcessor . create ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> , Mono .class , org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> :: onComplete , null ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MonoProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> = MonoProcessor . create ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> , Mono .class , org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> :: onComplete , new java.util.ArrayList <> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; EmitterProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> = EmitterProcessor . create ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> , Flux .class , ( ) { emitter . connect ( ) ; emitter . onNext ( STRING ) ; emitter . onNext ( STRING ) ; emitter . onNext ( STRING ) ; emitter . onComplete ( ) ; } , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; MonoProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> = MonoProcessor . create ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> , Mono .class , ( ) mono . onError ( ex ) , java.lang.IllegalStateException ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.web.servlet.mvc.method.annotation.SingleEmitter<java.lang.String>> < SingleEmitter < java.lang.String > > java.util.concurrent.atomic.AtomicReference<org.springframework.web.servlet.mvc.method.annotation.SingleEmitter<java.lang.String>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.web.servlet.mvc.method.annotation.SingleEmitter<java.lang.String>> <> ( ) ; Single < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.Single<java.lang.String> = Single . fromEmitter ( java.util.concurrent.atomic.AtomicReference<org.springframework.web.servlet.mvc.method.annotation.SingleEmitter<java.lang.String>> :: set ) ; void ( org.springframework.web.servlet.mvc.method.annotation.Single<java.lang.String> , Single .class , ( ) ref . get ( ) . onError ( ex ) , java.lang.IllegalStateException ) ; java.util.concurrent.atomic.AtomicReference < io . io . io < java.lang.String > > ref2 = new java.util.concurrent.atomic.AtomicReference<java.lang.Object> <> ( ) ; io . io . io < java.lang.String > single2 = io . reactivex . Single . create ( ref2 :: set ) ; void ( single2 , io . io . io .class , ( ) ref2 . get ( ) . onError ( ex ) , java.lang.IllegalStateException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , null ) ; void ( STRING , null ) ; void ( STRING , null ) ; void ( STRING , null ) ; void ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; void ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; void ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; void ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws java.lang.Exception { void ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; MonoProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> = MonoProcessor . create ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> , Mono .class , org.springframework.web.servlet.mvc.method.annotation.MonoProcessor<java.lang.String> :: onComplete , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; void ( true ) ; java.util.Set<org.springframework.web.servlet.mvc.method.annotation.MediaType> < MediaType > java.util.Set<org.springframework.web.servlet.mvc.method.annotation.MediaType> = java.util.Collections . java.util.Set ( MediaType . TEXT_EVENT_STREAM ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( HandlerMapping . PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Set<org.springframework.web.servlet.mvc.method.annotation.MediaType> ) ; void ( true ) ; void ( false ) ; void ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; void ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Exception { ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( Flux . empty ( ) , Flux .class ) ; assertEquals ( boolean , org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter instanceof SseEmitter ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; EmitterProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> = EmitterProcessor . create ( ) ; SseEmitter org.springframework.web.servlet.mvc.method.annotation.SseEmitter = ( SseEmitter ) org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> , Flux .class ) ; org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler = new org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler ( ) ; org.springframework.web.servlet.mvc.method.annotation.SseEmitter . initialize ( org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . connect ( ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onNext ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onNext ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onNext ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onComplete ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.web.servlet.mvc.method.annotation.ResolvableType = ResolvableType . forClassWithGenerics ( ServerSentEvent .class , java.lang.String .class ) ; EmitterProcessor < ServerSentEvent < ? > > org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<?>> = EmitterProcessor . create ( ) ; SseEmitter org.springframework.web.servlet.mvc.method.annotation.SseEmitter = ( SseEmitter ) org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<?>> , Flux .class , org.springframework.web.servlet.mvc.method.annotation.ResolvableType ) ; org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler = new org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler ( ) ; org.springframework.web.servlet.mvc.method.annotation.SseEmitter . initialize ( org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<?>> . connect ( ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<?>> . onNext ( ServerSentEvent . builder ( STRING ) . id ( STRING ) . build ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<?>> . onNext ( ServerSentEvent . builder ( STRING ) . id ( STRING ) . build ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<?>> . onNext ( ServerSentEvent . builder ( STRING ) . id ( STRING ) . build ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<?>> . onComplete ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; EmitterProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> = EmitterProcessor . create ( ) ; ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> , Flux .class ) ; org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler = new org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler ( ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler ) ; ServletServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse = new ServletServerHttpResponse ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . extendResponse ( org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . connect ( ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onNext ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onNext ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onComplete ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse . getHeaders ( ) . getContentType ( ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EmitterProcessor < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> = EmitterProcessor . create ( ) ; ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> , Flux .class ) ; org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler = new org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler ( ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . connect ( ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onNext ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onNext ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onNext ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.EmitterProcessor<java.lang.String> . onComplete ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.EmitterHandler . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; void ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; void ( STRING ) ; void ( STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { ServletServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse = new ServletServerHttpResponse ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( Flux . empty ( ) , Flux .class ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . extendResponse ( org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse ) ; assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse . getHeaders ( ) . getContentType ( ) . toString ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Runnable java.lang.Runnable , java.lang.Object java.lang.Object ) throws java.lang.Exception { ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( java.lang.Object , java.lang.Class<> ) ; assertNull ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertFalse ( WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . hasConcurrentResult ( ) ) ; java.lang.Runnable . void ( ) ; assertTrue ( WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . hasConcurrentResult ( ) ) ; assertEquals ( java.lang.Object , WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . getConcurrentResult ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.lang.Exception { return org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( java.lang.Object , java.lang.Class<> , ResolvableType . forClass ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.web.servlet.mvc.method.annotation.ResolvableType ) throws java.lang.Exception { ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = on ( org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandlerTests.TestController .class ) . resolveReturnType ( java.lang.Class<> , org.springframework.web.servlet.mvc.method.annotation.ResolvableType ) ; return this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler . handleValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.Mono<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.Mono<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.Single<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.Single<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> io . io . io < java.lang.String > handleSingleRxJava2 ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.Flux<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.Flux<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.Flux<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<java.lang.String>> < ServerSentEvent < java.lang.String > > org.springframework.web.servlet.mvc.method.annotation.Flux<org.springframework.web.servlet.mvc.method.annotation.ServerSentEvent<java.lang.String>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) throws java.io.IOException { this . java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) {		}  <METHOD_END>
