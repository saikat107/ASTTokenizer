<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver = new SimpleMappingExceptionResolver ( ) ; java.lang.Object = new java.lang.String ( ) ; java.lang.Object = new java.lang.Object ( ) ; org.springframework.web.servlet.handler.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.handler.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . setMethod ( STRING ) ; java.lang.Exception = new java.lang.Exception ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setOrder ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; assertEquals ( java.lang.Exception , org.springframework.web.servlet.handler.ModelAndView . getModel ( ) . get ( SimpleMappingExceptionResolver . DEFAULT_EXCEPTION_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlers ( java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertNull ( org.springframework.web.servlet.handler.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlerClasses ( new java.lang.Class [] { java.lang.String .class } ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertNull ( org.springframework.web.servlet.handler.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionAttribute ( null ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; assertNull ( org.springframework.web.servlet.handler.ModelAndView . getModel ( ) . get ( SimpleMappingExceptionResolver . DEFAULT_EXCEPTION_ATTRIBUTE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( null ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( HttpServletResponse . SC_OK , org.springframework.web.servlet.handler.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultStatusCode ( HttpServletResponse . SC_BAD_REQUEST ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( HttpServletResponse . SC_BAD_REQUEST , org.springframework.web.servlet.handler.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultStatusCode ( HttpServletResponse . SC_BAD_REQUEST ) ; org.springframework.web.servlet.handler.MockHttpServletRequest . setAttribute ( WebUtils . INCLUDE_REQUEST_URI_ATTRIBUTE , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( HttpServletResponse . SC_OK , org.springframework.web.servlet.handler.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultErrorView ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setDefaultStatusCode ( HttpServletResponse . SC_BAD_REQUEST ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setStatusCodes ( java.util.Properties ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( HttpServletResponse . SC_NOT_ACCEPTABLE , org.springframework.web.servlet.handler.MockHttpServletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setWarnLogCategory ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlers ( java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlerClasses ( new java.lang.Class [] { java.lang.String .class } ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlerClasses ( new java.lang.Class [] { java.lang.Comparable .class } ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlers ( java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertNull ( org.springframework.web.servlet.handler.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlerClasses ( new java.lang.Class [] { java.lang.String .class } ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertNull ( org.springframework.web.servlet.handler.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExcludedExceptions ( java.lang.IllegalArgumentException .class ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , new java.lang.IllegalArgumentException ( ) ) ; assertNull ( org.springframework.web.servlet.handler.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setWarnLogCategory ( STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertNull ( org.springframework.web.servlet.handler.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlers ( java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlers ( java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests.SomeOddException ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlers ( java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests.SomeOddException ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlers ( java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new org.springframework.web.servlet.handler.SimpleMappingExceptionResolverTests.AnotherOddException ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setMappedHandlers ( java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ) ; org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . setExceptionMappings ( java.util.Properties ) ; ModelAndView org.springframework.web.servlet.handler.ModelAndView = org.springframework.web.servlet.handler.SimpleMappingExceptionResolver . resolveException ( org.springframework.web.servlet.handler.MockHttpServletRequest , org.springframework.web.servlet.handler.MockHttpServletResponse , java.lang.Object , java.lang.Exception ) ; assertEquals ( STRING , org.springframework.web.servlet.handler.ModelAndView . getViewName ( ) ) ; }  <METHOD_END>
