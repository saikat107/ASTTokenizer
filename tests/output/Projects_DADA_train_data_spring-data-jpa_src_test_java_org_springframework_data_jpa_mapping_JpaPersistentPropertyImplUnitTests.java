<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.mapping.JpaMetamodelMappingContext = new JpaMetamodelMappingContext ( java.util.Collections . java.util.Set ( org.springframework.data.jpa.mapping.Metamodel ) ) ; org.springframework.data.jpa.mapping.JpaPersistentEntity<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.Sample .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty = org.springframework.data.jpa.mapping.JpaPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty . isAssociation ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntity<> . getPersistentProperty ( STRING ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getPersistentEntity ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.SampleEmbeddable .class ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntity<> . getRequiredPersistentProperty ( STRING ) . isAssociation ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntity<> . getRequiredPersistentProperty ( STRING ) . isAssociation ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.PropertyLevelPropertyAccess .class , STRING ) . usePropertyAccess ( ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.PropertyLevelPropertyAccess .class , STRING ) . usePropertyAccess ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.PropertyLevelDefinitionTrumpsTypeLevelOne .class , STRING ) . usePropertyAccess ( ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.PropertyLevelDefinitionTrumpsTypeLevelOne .class , STRING ) . usePropertyAccess ( ) , is ( true ) ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.PropertyLevelDefinitionTrumpsTypeLevelOne2 .class , STRING ) . usePropertyAccess ( ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.PropertyLevelDefinitionTrumpsTypeLevelOne2 .class , STRING ) . usePropertyAccess ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.TypeLevelPropertyAccess .class , STRING ) . usePropertyAccess ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.CompetingTypeLevelAnnotations .class , STRING ) . usePropertyAccess ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.CompetingPropertyLevelAnnotations .class , STRING ) . usePropertyAccess ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.JpaVersioned .class , STRING ) . isVersionProperty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty = org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.SpecializedAssociation .class , STRING ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty . getType ( ) , is ( typeCompatibleWith ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.Api .class ) ) ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty . getActualType ( ) , is ( typeCompatibleWith ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.Implementation .class ) ) ) ; java.lang.Iterable<? extends org.springframework.data.jpa.mapping.TypeInformation<?>> < ? extends TypeInformation < ? > > java.lang.Iterable<? extends org.springframework.data.jpa.mapping.TypeInformation<?>> = org.springframework.data.jpa.mapping.JpaPersistentProperty . getPersistentEntityType ( ) ; assertThat ( java.lang.Iterable<> . java.util.Iterator<> ( ) . boolean ( ) , is ( true ) ) ; assertThat ( java.lang.Iterable<> . java.util.Iterator<> ( ) . next ( ) , is ( ( TypeInformation ) ClassTypeInformation . from ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.Implementation .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.WithReadOnly .class , STRING ) . isWritable ( ) , is ( false ) ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.WithReadOnly .class , STRING ) . isWritable ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagedType < ? > org.springframework.data.jpa.mapping.ManagedType<?> = mock ( ManagedType .class ) ; doReturn ( java.util.Collections . java.util.Set ( org.springframework.data.jpa.mapping.ManagedType<> ) ) . when ( org.springframework.data.jpa.mapping.Metamodel ) . getManagedTypes ( ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.Sample .class , STRING ) . isEntity ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaPersistentEntityImpl < ? > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( org.springframework.data.jpa.mapping.JpaPersistentPropertyImplUnitTests.WithReadOnly .class ) ; JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty = org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty . isAssociation ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.mapping.JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { JpaPersistentEntity < ? > org.springframework.data.jpa.mapping.JpaPersistentEntity<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; return org.springframework.data.jpa.mapping.JpaPersistentEntity<> . getRequiredPersistentProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ org . springframework . data . org.springframework.data.annotation . org.springframework.data.annotation ( Type . PROPERTY ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ org . springframework . data . org.springframework.data.annotation . org.springframework.data.annotation ( Type . PROPERTY ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ org . springframework . data . org.springframework.data.annotation . org.springframework.data.annotation ( Type . FIELD ) @ Access ( AccessType . PROPERTY ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
