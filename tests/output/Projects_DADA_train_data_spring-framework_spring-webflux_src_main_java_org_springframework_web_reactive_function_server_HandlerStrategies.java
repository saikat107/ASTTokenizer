<METHOD_START> java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> ( )  <METHOD_END>
<METHOD_START> java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> ( )  <METHOD_END>
<METHOD_START> java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> < ViewResolver > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver>> ( )  <METHOD_END>
<METHOD_START> java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> < ServerRequest , java.util.Optional<java.util.Locale> < java.util.Locale > > java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ( )  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.server.HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ( ) { return org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( ) . org.springframework.web.reactive.function.server.HandlerStrategies ( ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.server.HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ( ApplicationContext org.springframework.web.reactive.function.server.ApplicationContext ) { return org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( org.springframework.web.reactive.function.server.ApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.server.HandlerStrategies.Builder org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( ) { DefaultHandlerStrategiesBuilder org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder = new DefaultHandlerStrategiesBuilder ( ) ; org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder . defaultConfiguration ( ) ; return org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.server.HandlerStrategies.Builder org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( ApplicationContext org.springframework.web.reactive.function.server.ApplicationContext ) { Assert . notNull ( org.springframework.web.reactive.function.server.ApplicationContext , STRING ) ; DefaultHandlerStrategiesBuilder org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder = new DefaultHandlerStrategiesBuilder ( ) ; org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder . applicationContext ( org.springframework.web.reactive.function.server.ApplicationContext ) ; return org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder ; }  <METHOD_END>
<METHOD_START> static org.springframework.web.reactive.function.server.HandlerStrategies.Builder org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( ) { return new DefaultHandlerStrategiesBuilder ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.HandlerStrategies.Builder org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( HttpMessageReader < ? > org.springframework.web.reactive.function.server.HttpMessageReader<?> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.HandlerStrategies.Builder org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( HttpMessageWriter < ? > org.springframework.web.reactive.function.server.HttpMessageWriter<?> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.HandlerStrategies.Builder org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( ViewResolver org.springframework.web.reactive.function.server.ViewResolver );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.HandlerStrategies.Builder org.springframework.web.reactive.function.server.HandlerStrategies.Builder ( java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> < ServerRequest , java.util.Optional<java.util.Locale> < java.util.Locale > > java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> );  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.function.server.HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ( )  <METHOD_END>
