<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<java.lang.Integer> . boolean ( this . org.springframework.integration.endpoint.ProducerAndConsumerAutoStartupTests.Consumer . java.lang.Integer ( NUMBER ) ) ; } this . org.springframework.integration.endpoint.AbstractApplicationContext . stop ( ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) java.lang.InterruptedException { if ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) > NUMBER ) { return null ; } return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.util.concurrent.BlockingQueue<java.lang.Integer> . boolean ( java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( long long ) throws java.lang.InterruptedException { return this . java.util.concurrent.BlockingQueue<java.lang.Integer> . java.lang.Integer ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
