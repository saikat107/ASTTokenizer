<METHOD_START> protected org.springframework.data.gemfire.IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean ( ) { IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) { @ java.lang.Override org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( ) { return org.springframework.data.gemfire.QueryService ; } } ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; return org.springframework.data.gemfire.IndexFactoryBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( ) { return org.springframework.data.gemfire.QueryService ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.gemfire.IndexFactoryBean . setBeanFactory ( null ) ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( null ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.data.gemfire.BeanFactory = mock ( BeanFactory .class , STRING ) ; Cache org.springframework.data.gemfire.Cache = mock ( Cache .class , STRING ) ; Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.BeanFactory . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.Cache . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; when ( org.springframework.data.gemfire.QueryService . createKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setBeanFactory ( org.springframework.data.gemfire.BeanFactory ) ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( false ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . afterPropertiesSet ( ) ; assertEquals ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.IndexFactoryBean . getObject ( ) ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.IndexFactoryBean . getObject ( ) ) ; assertTrue ( Index .class . boolean ( org.springframework.data.gemfire.IndexFactoryBean . getObjectType ( ) ) ) ; assertTrue ( org.springframework.data.gemfire.IndexFactoryBean . isSingleton ( ) ) ; verify ( org.springframework.data.gemfire.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { new IndexFactoryBean ( ) . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) { @ java.lang.Override org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( ) { return null ; } } ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.IndexFactoryBean . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { org.springframework.data.gemfire.IndexFactoryBean ( ) . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.ExpectedException . expectMessage ( STRING ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = org.springframework.data.gemfire.IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = org.springframework.data.gemfire.IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { try { IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = org.springframework.data.gemfire.IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setImports ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; Cache org.springframework.data.gemfire.Cache = mock ( Cache .class , STRING ) ; when ( org.springframework.data.gemfire.Cache . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.IndexFactoryBean . setQueryService ( org.springframework.data.gemfire.QueryService ) ; assertSame ( org.springframework.data.gemfire.QueryService , org.springframework.data.gemfire.IndexFactoryBean . doLookupQueryService ( ) ) ; verify ( org.springframework.data.gemfire.Cache , never ( ) ) . getQueryService ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClientCache org.springframework.data.gemfire.ClientCache = mock ( ClientCache .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.ClientCache . getLocalQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( org.springframework.data.gemfire.ClientCache ) ; org.springframework.data.gemfire.IndexFactoryBean . setQueryService ( null ) ; assertSame ( org.springframework.data.gemfire.QueryService , org.springframework.data.gemfire.IndexFactoryBean . doLookupQueryService ( ) ) ; verify ( org.springframework.data.gemfire.ClientCache , times ( NUMBER ) ) . getLocalQueryService ( ) ; verify ( org.springframework.data.gemfire.ClientCache , never ( ) ) . getQueryService ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.data.gemfire.Cache = mock ( Cache .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.Cache . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.IndexFactoryBean . setQueryService ( null ) ; assertSame ( org.springframework.data.gemfire.QueryService , org.springframework.data.gemfire.IndexFactoryBean . doLookupQueryService ( ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . getQueryService ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.BeanFactory = mock ( BeanFactory .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.BeanFactory . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.BeanFactory . getBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , eq ( QueryService .class ) ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setBeanFactory ( org.springframework.data.gemfire.BeanFactory ) ; QueryService org.springframework.data.gemfire.QueryService = org.springframework.data.gemfire.IndexFactoryBean . lookupQueryService ( ) ; assertSame ( org.springframework.data.gemfire.QueryService , org.springframework.data.gemfire.QueryService ) ; verify ( org.springframework.data.gemfire.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) ) ; verify ( org.springframework.data.gemfire.BeanFactory , times ( NUMBER ) ) . getBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , eq ( QueryService .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.BeanFactory = mock ( BeanFactory .class , STRING ) ; when ( org.springframework.data.gemfire.BeanFactory . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) ) ) . thenReturn ( false ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setBeanFactory ( org.springframework.data.gemfire.BeanFactory ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( false ) ; org.springframework.data.gemfire.IndexFactoryBean . setQueryService ( org.springframework.data.gemfire.QueryService ) ; QueryService org.springframework.data.gemfire.QueryService = org.springframework.data.gemfire.IndexFactoryBean . lookupQueryService ( ) ; assertSame ( org.springframework.data.gemfire.QueryService , org.springframework.data.gemfire.QueryService ) ; verify ( org.springframework.data.gemfire.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) ) ; verify ( org.springframework.data.gemfire.BeanFactory , never ( ) ) . getBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , eq ( QueryService .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableBeanFactory org.springframework.data.gemfire.ConfigurableBeanFactory = mock ( ConfigurableBeanFactory .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setBeanFactory ( org.springframework.data.gemfire.ConfigurableBeanFactory ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( false ) ; assertSame ( org.springframework.data.gemfire.QueryService , org.springframework.data.gemfire.IndexFactoryBean . registerQueryServiceBean ( org.springframework.data.gemfire.QueryService ) ) ; verify ( org.springframework.data.gemfire.ConfigurableBeanFactory , never ( ) ) . registerSingleton ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , same ( org.springframework.data.gemfire.QueryService ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableBeanFactory org.springframework.data.gemfire.ConfigurableBeanFactory = mock ( ConfigurableBeanFactory .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setBeanFactory ( org.springframework.data.gemfire.ConfigurableBeanFactory ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( true ) ; assertSame ( org.springframework.data.gemfire.QueryService , org.springframework.data.gemfire.IndexFactoryBean . registerQueryServiceBean ( org.springframework.data.gemfire.QueryService ) ) ; verify ( org.springframework.data.gemfire.ConfigurableBeanFactory , times ( NUMBER ) ) . registerSingleton ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , same ( org.springframework.data.gemfire.QueryService ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Collections .< Index > java.util.List<org.springframework.data.gemfire.Index> ( ) ) ; when ( org.springframework.data.gemfire.QueryService . createKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setOverride ( false ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Collections .< Index > java.util.List<org.springframework.data.gemfire.Index> ( ) ) ; when ( org.springframework.data.gemfire.QueryService . createHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setImports ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setOverride ( false ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Collections .< Index > java.util.List<org.springframework.data.gemfire.Index> ( ) ) ; when ( org.springframework.data.gemfire.QueryService . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setImports ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setOverride ( false ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( ( java.lang.String ) null ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.Index ) ) ; when ( org.springframework.data.gemfire.QueryService . createHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setImports ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verifyZeroInteractions ( org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.Index , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . removeIndex ( same ( org.springframework.data.gemfire.Index ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setOverride ( false ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.Index , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.Index , never ( ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . getIndexes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.Index ) ) ; when ( org.springframework.data.gemfire.QueryService . createIndex ( any ( java.lang.String .class ) , any ( java.lang.String .class ) , any ( java.lang.String .class ) ) ) . thenThrow ( new IndexNameConflictException ( STRING ) ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; try { org.springframework.data.gemfire.ExpectedException . expect ( GemfireIndexException .class ) ; org.springframework.data.gemfire.ExpectedException . expectCause ( isA ( IndexNameConflictException .class ) ) ; org.springframework.data.gemfire.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; } finally { verify ( org.springframework.data.gemfire.Index , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . getIndexes ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.QueryService . createKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenThrow ( new IndexExistsException ( STRING ) ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setOverride ( true ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; try { org.springframework.data.gemfire.ExpectedException . expect ( GemfireIndexException .class ) ; org.springframework.data.gemfire.ExpectedException . expectCause ( isA ( IndexExistsException .class ) ) ; org.springframework.data.gemfire.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; } finally { verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . getIndexes ( ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . removeIndex ( any ( Index .class ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; final Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; final java.util.List<org.springframework.data.gemfire.Index> < Index > java.util.List<org.springframework.data.gemfire.Index> = new java.util.ArrayList<org.springframework.data.gemfire.Index> < Index > ( NUMBER ) ; java.util.List<org.springframework.data.gemfire.Index> . add ( org.springframework.data.gemfire.Index ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . then ( new Answer < java.util.Collection<org.springframework.data.gemfire.Index> < Index > > ( ) { private boolean boolean = false ; private synchronized boolean boolean ( ) { boolean boolean = this . boolean ; this . boolean = true ; return boolean ; } @ java.lang.Override public java.util.Collection<org.springframework.data.gemfire.Index> < Index > java.util.Collection<org.springframework.data.gemfire.Index> ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return ( boolean ( ) ? java.util.List<org.springframework.data.gemfire.Index> : java.util.Collections . java.util.List ( org.springframework.data.gemfire.Index ) ) ; } } ) ; when ( org.springframework.data.gemfire.QueryService . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenThrow ( new java.lang.RuntimeException ( STRING ) ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setOverride ( true ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.gemfire.Index> . size ( ) ) ; assertFalse ( java.util.List<org.springframework.data.gemfire.Index> . contains ( org.springframework.data.gemfire.Index ) ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; assertThat ( org.springframework.data.gemfire.Index , is ( sameInstance ( org.springframework.data.gemfire.Index ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.Index> . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.Index> . contains ( org.springframework.data.gemfire.Index ) , is ( true ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.Index> . contains ( org.springframework.data.gemfire.Index ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . getIndexes ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . removeIndex ( same ( org.springframework.data.gemfire.Index ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private synchronized boolean boolean ( ) { boolean boolean = this . boolean ; this . boolean = true ; return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.gemfire.Index> < Index > java.util.Collection<org.springframework.data.gemfire.Index> ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return ( boolean ( ) ? java.util.List<org.springframework.data.gemfire.Index> : java.util.Collections . java.util.List ( org.springframework.data.gemfire.Index ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.RuntimeException .class ) public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.Index ) ) ; when ( org.springframework.data.gemfire.QueryService . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenThrow ( new java.lang.RuntimeException ( STRING ) ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; try { org.springframework.data.gemfire.IndexFactoryBean . createIndex ( org.springframework.data.gemfire.QueryService , STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertEquals ( STRING , java.lang.RuntimeException . java.lang.String ( ) ) ; throw java.lang.RuntimeException ; } finally { verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . getIndexes ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . removeIndex ( same ( org.springframework.data.gemfire.Index ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createFunctionalIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING , null ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createFunctionalIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineIndex ( anyString ( ) , anyString ( ) , anyString ( ) , anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; doAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return null ; } } ) . when ( org.springframework.data.gemfire.QueryService ) . defineIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( true ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createFunctionalIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING , null ) ; assertTrue ( org.springframework.data.gemfire.Index instanceof IndexFactoryBean . IndexFactoryBean ) ; assertSame ( org.springframework.data.gemfire.QueryService , ( ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ) . getQueryService ( ) ) ; assertEquals ( STRING , ( ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ) . getIndexName ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . createIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . defineIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; doAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return null ; } } ) . when ( org.springframework.data.gemfire.QueryService ) . defineIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( true ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createFunctionalIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING , STRING ) ; assertTrue ( org.springframework.data.gemfire.Index instanceof IndexFactoryBean . IndexFactoryBean ) ; assertSame ( org.springframework.data.gemfire.QueryService , ( ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ) . getQueryService ( ) ) ; assertEquals ( STRING , ( ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ) . getIndexName ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . createIndex ( anyString ( ) , anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . defineIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . createHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createHashIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . createHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createHashIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) , anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; doAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return null ; } } ) . when ( org.springframework.data.gemfire.QueryService ) . defineHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( true ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createHashIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING , STRING ) ; assertTrue ( org.springframework.data.gemfire.Index instanceof IndexFactoryBean . IndexFactoryBean ) ; assertSame ( org.springframework.data.gemfire.QueryService , ( ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ) . getQueryService ( ) ) ; assertEquals ( STRING , ( ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ) . getIndexName ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . createHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . defineHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; doAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return null ; } } ) . when ( org.springframework.data.gemfire.QueryService ) . defineHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( true ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createHashIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING , STRING ) ; assertTrue ( org.springframework.data.gemfire.Index instanceof IndexFactoryBean . IndexFactoryBean ) ; assertSame ( org.springframework.data.gemfire.QueryService , ( ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ) . getQueryService ( ) ) ; assertEquals ( STRING , ( ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ) . getIndexName ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . createHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . defineHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . createKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.Index ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( false ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createKeyIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . createKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineKeyIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( true ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . createKeyIndex ( org.springframework.data.gemfire.QueryService , STRING , STRING , STRING ) ; assertTrue ( org.springframework.data.gemfire.Index instanceof IndexFactoryBean . IndexFactoryBean ) ; IndexFactoryBean . IndexFactoryBean IndexFactoryBean.IndexWrapper = ( IndexFactoryBean . IndexFactoryBean ) org.springframework.data.gemfire.Index ; assertSame ( org.springframework.data.gemfire.QueryService , IndexFactoryBean.IndexWrapper . getQueryService ( ) ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getIndexName ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . createKeyIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . defineKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ) ; assertNull ( org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , null ) ) ; assertNull ( org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , STRING ) ) ; assertNull ( org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , STRING ) ) ; assertNull ( org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , STRING ) ) ; assertNull ( org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , STRING ) ) ; assertNull ( org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , STRING ) ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , STRING ) ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , STRING ) ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.IndexFactoryBean . getExistingIndex ( org.springframework.data.gemfire.QueryService , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . then ( new Answer < java.util.Collection<org.springframework.data.gemfire.Index> < Index > > ( ) { private final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; @ java.lang.Override public java.util.Collection<org.springframework.data.gemfire.Index> < Index > java.util.Collection<org.springframework.data.gemfire.Index> ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; return java.util.Collections . java.util.List ( org.springframework.data.gemfire.Index ) ; } } ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setQueryService ( org.springframework.data.gemfire.QueryService ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; ReflectionUtils . setField ( IndexFactoryBean .class . java.lang.reflect.Field ( STRING ) , org.springframework.data.gemfire.IndexFactoryBean , STRING ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.Index ) ; assertEquals ( STRING , org.springframework.data.gemfire.Index . getName ( ) ) ; Index org.springframework.data.gemfire.Index = org.springframework.data.gemfire.IndexFactoryBean . getObject ( ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.gemfire.Index> < Index > java.util.Collection<org.springframework.data.gemfire.Index> ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; return java.util.Collections . java.util.List ( org.springframework.data.gemfire.Index ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.data.gemfire.IndexFactoryBean . isSingleton ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableBeanFactory org.springframework.data.gemfire.ConfigurableBeanFactory = mock ( ConfigurableBeanFactory .class , STRING ) ; Cache org.springframework.data.gemfire.Cache = mock ( Cache .class , STRING ) ; Cache org.springframework.data.gemfire.Cache = mock ( Cache .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> < QueryService > java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> = new java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> < QueryService > ( null ) ; doAnswer ( new Answer < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> . get ( ) != null ) ; } } ) . when ( org.springframework.data.gemfire.ConfigurableBeanFactory ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) ) ; doAnswer ( new Answer < QueryService > ( ) { @ java.lang.Override public org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> . get ( ) ; } } ) . when ( org.springframework.data.gemfire.ConfigurableBeanFactory ) . getBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , eq ( QueryService .class ) ) ; doAnswer ( new Answer < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { assertEquals ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE , org.springframework.data.gemfire.InvocationOnMock . getArgument ( NUMBER ) ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> . compareAndSet ( null , org.springframework.data.gemfire.InvocationOnMock . getArgument ( NUMBER ) ) ; return null ; } } ) . when ( org.springframework.data.gemfire.ConfigurableBeanFactory ) . registerSingleton ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , any ( QueryService .class ) ) ; when ( org.springframework.data.gemfire.Cache . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; when ( org.springframework.data.gemfire.Cache . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.QueryService ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setBeanFactory ( org.springframework.data.gemfire.ConfigurableBeanFactory ) ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( true ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . afterPropertiesSet ( ) ; IndexFactoryBean org.springframework.data.gemfire.IndexFactoryBean = new IndexFactoryBean ( ) ; org.springframework.data.gemfire.IndexFactoryBean . setBeanFactory ( org.springframework.data.gemfire.ConfigurableBeanFactory ) ; org.springframework.data.gemfire.IndexFactoryBean . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.IndexFactoryBean . setDefine ( true ) ; org.springframework.data.gemfire.IndexFactoryBean . setExpression ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setFrom ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setImports ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setName ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . setType ( STRING ) ; org.springframework.data.gemfire.IndexFactoryBean . afterPropertiesSet ( ) ; verify ( org.springframework.data.gemfire.ConfigurableBeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) ) ; verify ( org.springframework.data.gemfire.ConfigurableBeanFactory , times ( NUMBER ) ) . getBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , eq ( QueryService .class ) ) ; verify ( org.springframework.data.gemfire.ConfigurableBeanFactory , times ( NUMBER ) ) . registerSingleton ( eq ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE ) , same ( org.springframework.data.gemfire.QueryService ) ) ; verify ( org.springframework.data.gemfire.Cache , times ( NUMBER ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.Cache , never ( ) ) . getQueryService ( ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . defineKeyIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.QueryService , times ( NUMBER ) ) . defineHashIndex ( eq ( STRING ) , eq ( STRING ) , eq ( STRING ) , eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineHashIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineIndex ( anyString ( ) , anyString ( ) , anyString ( ) , anyString ( ) ) ; verify ( org.springframework.data.gemfire.QueryService , never ( ) ) . defineKeyIndex ( anyString ( ) , anyString ( ) , anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> . get ( ) != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { return java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( final InvocationOnMock org.springframework.data.gemfire.InvocationOnMock ) throws java.lang.Throwable { assertEquals ( GemfireConstants . DEFAULT_GEMFIRE_INDEX_DEFINITION_QUERY_SERVICE , org.springframework.data.gemfire.InvocationOnMock . getArgument ( NUMBER ) ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.QueryService> . compareAndSet ( null , org.springframework.data.gemfire.InvocationOnMock . getArgument ( NUMBER ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Index org.springframework.data.gemfire.Index = mock ( Index .class , STRING ) ; IndexStatistics org.springframework.data.gemfire.IndexStatistics = mock ( IndexStatistics .class , STRING ) ; QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.Index . getCanonicalizedFromClause ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getCanonicalizedIndexedExpression ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getCanonicalizedProjectionAttributes ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getFromClause ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getIndexedExpression ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getProjectionAttributes ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.Index . getStatistics ( ) ) . thenReturn ( org.springframework.data.gemfire.IndexStatistics ) ; when ( org.springframework.data.gemfire.Index . getType ( ) ) . thenReturn ( org . apache . geode . cache . query . IndexType . HASH ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.Index ) ) ; IndexFactoryBean . IndexFactoryBean IndexFactoryBean.IndexWrapper = new IndexFactoryBean . IndexFactoryBean ( org.springframework.data.gemfire.QueryService , STRING ) ; assertNotNull ( IndexFactoryBean.IndexWrapper ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getIndexName ( ) ) ; assertSame ( org.springframework.data.gemfire.QueryService , IndexFactoryBean.IndexWrapper . getQueryService ( ) ) ; Index org.springframework.data.gemfire.Index = IndexFactoryBean.IndexWrapper . getIndex ( ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getCanonicalizedFromClause ( ) ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getCanonicalizedIndexedExpression ( ) ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getCanonicalizedProjectionAttributes ( ) ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getFromClause ( ) ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getIndexedExpression ( ) ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getName ( ) ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getProjectionAttributes ( ) ) ; assertSame ( org.springframework.data.gemfire.IndexStatistics , IndexFactoryBean.IndexWrapper . getStatistics ( ) ) ; assertEquals ( org . apache . geode . cache . query . IndexType . HASH , IndexFactoryBean.IndexWrapper . getType ( ) ) ; Index org.springframework.data.gemfire.Index = IndexFactoryBean.IndexWrapper . getIndex ( ) ; assertSame ( org.springframework.data.gemfire.Index , org.springframework.data.gemfire.Index ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { new IndexFactoryBean . IndexFactoryBean ( null , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { new IndexFactoryBean . IndexFactoryBean ( mock ( QueryService .class ) , STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = GemfireIndexException .class ) public void void ( ) { QueryService org.springframework.data.gemfire.QueryService = mock ( QueryService .class , STRING ) ; when ( org.springframework.data.gemfire.QueryService . getIndexes ( ) ) . thenReturn ( java.util.Collections .< Index > java.util.List<org.springframework.data.gemfire.Index> ( ) ) ; IndexFactoryBean . IndexFactoryBean IndexFactoryBean.IndexWrapper = new IndexFactoryBean . IndexFactoryBean ( org.springframework.data.gemfire.QueryService , STRING ) ; assertNotNull ( IndexFactoryBean.IndexWrapper ) ; assertEquals ( STRING , IndexFactoryBean.IndexWrapper . getIndexName ( ) ) ; assertSame ( org.springframework.data.gemfire.QueryService , IndexFactoryBean.IndexWrapper . getQueryService ( ) ) ; try { IndexFactoryBean.IndexWrapper . getIndex ( ) ; } catch ( GemfireIndexException org.springframework.data.gemfire.GemfireIndexException ) { assertThat ( org.springframework.data.gemfire.GemfireIndexException . getMessage ( ) , startsWith ( STRING ) ) ; assertTrue ( org.springframework.data.gemfire.GemfireIndexException . getCause ( ) instanceof IndexInvalidException ) ; throw org.springframework.data.gemfire.GemfireIndexException ; } }  <METHOD_END>
