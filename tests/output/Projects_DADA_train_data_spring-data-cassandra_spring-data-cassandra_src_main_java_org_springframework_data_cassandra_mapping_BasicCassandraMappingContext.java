<METHOD_START> public void ( ) { void ( new CustomConversions ( java.util.Collections . java.util.List ) ) ; setSimpleTypeHolder ( CassandraSimpleTypeHolder . HOLDER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. initialize ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( ) { org.springframework.data.cassandra.mapping.Mapping . getEntityMappings ( ) . stream ( ) . filter ( entityMapping -> entityMapping != null ) . forEach ( entityMapping -> { String entityClassName = entityMapping . getEntityClassName ( ) ; try { Class < ? > entityClass = ClassUtils . forName ( entityClassName , beanClassLoader ) ; CassandraPersistentEntity < ? > entity = getRequiredPersistentEntity ( entityClass ) ; String entityTableName = entityMapping . getTableName ( ) ; if ( StringUtils . hasText ( entityTableName ) ) { entity . setTableName ( cqlId ( entityTableName , Boolean . valueOf ( entityMapping . getForceQuote ( ) ) ) ) ; } processMappingOverrides ( entity , entityMapping ) ; } catch ( ClassNotFoundException e ) { throw new IllegalStateException ( String . format ( STRING , entityClassName ) , e ) ; } } ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , EntityMapping org.springframework.data.cassandra.mapping.EntityMapping ) { org.springframework.data.cassandra.mapping.EntityMapping . getPropertyMappings ( ) . forEach ( ( key , propertyMapping ) -> processMappingOverride ( entity , propertyMapping ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , PropertyMapping org.springframework.data.cassandra.mapping.PropertyMapping ) { CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( org.springframework.data.cassandra.mapping.PropertyMapping . getPropertyName ( ) ) ; boolean boolean = java.lang.Boolean . java.lang.Boolean ( org.springframework.data.cassandra.mapping.PropertyMapping . getForceQuote ( ) ) ; org.springframework.data.cassandra.mapping.CassandraPersistentProperty . setForceQuote ( boolean ) ; if ( StringUtils . hasText ( org.springframework.data.cassandra.mapping.PropertyMapping . getColumnName ( ) ) ) { org.springframework.data.cassandra.mapping.CassandraPersistentProperty . setColumnName ( cqlId ( org.springframework.data.cassandra.mapping.PropertyMapping . getColumnName ( ) , boolean ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.cassandra.mapping.ApplicationContext ) throws org.springframework.data.cassandra.mapping.BeansException { this . org.springframework.data.cassandra.mapping.ApplicationContext = org.springframework.data.cassandra.mapping.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public void void ( CustomConversions org.springframework.data.cassandra.mapping.CustomConversions ) { Assert . notNull ( org.springframework.data.cassandra.mapping.CustomConversions , STRING ) ; this . org.springframework.data.cassandra.mapping.CustomConversions = org.springframework.data.cassandra.mapping.CustomConversions ; }  <METHOD_END>
<METHOD_START> public void void ( Mapping org.springframework.data.cassandra.mapping.Mapping ) { Assert . notNull ( org.springframework.data.cassandra.mapping.Mapping , STRING ) ; this . org.springframework.data.cassandra.mapping.Mapping = org.springframework.data.cassandra.mapping.Mapping ; }  <METHOD_END>
<METHOD_START> public void void ( UserTypeResolver org.springframework.data.cassandra.mapping.UserTypeResolver ) { Assert . notNull ( org.springframework.data.cassandra.mapping.UserTypeResolver , STRING ) ; this . org.springframework.data.cassandra.mapping.UserTypeResolver = org.springframework.data.cassandra.mapping.UserTypeResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CassandraPersistentEntityMetadataVerifier org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ) { this . org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier = org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ( ) { return org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( ) { return java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( ) { return java.util.Collections . java.util.Set ( java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( ) { return java.util.Collections . java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( ) { return java.util.Collections . java.util.Set ( java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( boolean boolean ) { if ( boolean ) { return super. getPersistentEntities ( ) ; } return java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> < T > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> ( TypeInformation < T > org.springframework.data.cassandra.mapping.TypeInformation<T> ) { UserDefinedType org.springframework.data.cassandra.mapping.UserDefinedType = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.data.cassandra.mapping.TypeInformation<T> . getType ( ) , UserDefinedType .class ) ; CassandraPersistentEntity < T > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> ; if ( org.springframework.data.cassandra.mapping.UserDefinedType != null ) { org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> = new CassandraUserTypePersistentEntity <> ( org.springframework.data.cassandra.mapping.TypeInformation<T> , this , org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier , org.springframework.data.cassandra.mapping.UserTypeResolver ) ; java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> ) ; } else { org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> = new BasicCassandraPersistentEntity <> ( org.springframework.data.cassandra.mapping.TypeInformation<T> , this , org.springframework.data.cassandra.mapping.CassandraPersistentEntityMetadataVerifier ) ; } if ( org.springframework.data.cassandra.mapping.ApplicationContext != null ) { org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> . setApplicationContext ( org.springframework.data.cassandra.mapping.ApplicationContext ) ; } java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> = java.util.Map<org.springframework.data.cassandra.mapping.CqlIdentifier,java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>>> . computeIfAbsent ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> . getTableName ( ) , cqlIdentifier -> new HashSet <> ( ) ) ; java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> ) ; if ( ! org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> . isUserDefinedType ( ) ) { if ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> . isCompositePrimaryKey ( ) ) { java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . add ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> ) ; } org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> . findAnnotation ( Table .class ) . ifPresent ( table -> tableEntities . add ( entity ) ) ; } java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . put ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> . getType ( ) , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> ) ; return org.springframework.data.cassandra.mapping.CassandraPersistentEntity<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.cassandra.mapping.CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( Property org.springframework.data.cassandra.mapping.Property , CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , SimpleTypeHolder org.springframework.data.cassandra.mapping.SimpleTypeHolder ) { return org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( org.springframework.data.cassandra.mapping.Property , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , ( CassandraSimpleTypeHolder ) org.springframework.data.cassandra.mapping.SimpleTypeHolder ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.mapping.CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty ( Property org.springframework.data.cassandra.mapping.Property , CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , CassandraSimpleTypeHolder org.springframework.data.cassandra.mapping.CassandraSimpleTypeHolder ) { return new BasicCassandraPersistentProperty ( org.springframework.data.cassandra.mapping.Property , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , org.springframework.data.cassandra.mapping.CassandraSimpleTypeHolder , org.springframework.data.cassandra.mapping.UserTypeResolver ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TableMetadata org.springframework.data.cassandra.mapping.TableMetadata ) { return java.util.Map<org.springframework.data.cassandra.mapping.CqlIdentifier,java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>>> . containsKey ( cqlId ( org.springframework.data.cassandra.mapping.TableMetadata . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final UserType org.springframework.data.cassandra.mapping.UserType ) { CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier = CqlIdentifier . cqlId ( org.springframework.data.cassandra.mapping.UserType . getTypeName ( ) ) ; return ( boolean ( org.springframework.data.cassandra.mapping.CqlIdentifier ) || boolean ( org.springframework.data.cassandra.mapping.CqlIdentifier ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( final CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ) { return java.util.Collection<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( ) . stream ( ) . flatMap ( PersistentEntity :: getPersistentProperties ) . map ( it -> it . findAnnotation ( CassandraType .class ) ) . filter ( java.util.Optional :: isPresent ) . flatMap ( Optionals :: toStream ) . anyMatch ( it -> { return StringUtils . hasText ( it . userTypeName ( ) ) && CqlIdentifier . cqlId ( it . userTypeName ( ) ) . equals ( identifier ) ; } ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ) { return java.util.Set<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . stream ( ) . map ( CassandraPersistentEntity :: getTableName ) . anyMatch ( org.springframework.data.cassandra.mapping.CqlIdentifier :: equals ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ) { Assert . notNull ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , STRING ) ; final CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = createTable ( ) . name ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getTableName ( ) ) ; org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getPersistentProperties ( ) . filter ( CassandraPersistentProperty :: isCompositePrimaryKey ) . forEach ( property -> { CassandraPersistentEntity < ? > primaryKeyEntity = getRequiredPersistentEntity ( property . getRawType ( ) ) ; primaryKeyEntity . getPersistentProperties ( ) . forEach ( primaryKeyProperty -> { if ( primaryKeyProperty . isPartitionKeyColumn ( ) ) { specification . partitionKeyColumn ( primaryKeyProperty . getColumnName ( ) , getDataType ( primaryKeyProperty ) ) ; } else { specification . clusteredKeyColumn ( primaryKeyProperty . getColumnName ( ) , getDataType ( primaryKeyProperty ) , primaryKeyProperty . getPrimaryKeyOrdering ( ) ) ; } } ) ; } ) ; org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getPersistentProperties ( ) . filter ( ( property ) -> ! property . isCompositePrimaryKey ( ) ) . forEach ( property -> { if ( property . isIdProperty ( ) || property . isPartitionKeyColumn ( ) ) { specification . partitionKeyColumn ( property . getColumnName ( ) , getDataType ( property ) ) ; } else if ( property . isClusterKeyColumn ( ) ) { specification . clusteredKeyColumn ( property . getColumnName ( ) , getDataType ( property ) , property . getPrimaryKeyOrdering ( ) ) ; } else { specification . column ( property . getColumnName ( ) , getDataType ( property ) ) ; } } ) ; if ( org.springframework.data.cassandra.mapping.CreateTableSpecification . getPartitionKeyColumns ( ) . isEmpty ( ) ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getType ( ) ) ) ; } return org.springframework.data.cassandra.mapping.CreateTableSpecification ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.CreateUserTypeSpecification org.springframework.data.cassandra.mapping.CreateUserTypeSpecification ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ) { Assert . notNull ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , STRING ) ; final CreateUserTypeSpecification org.springframework.data.cassandra.mapping.CreateUserTypeSpecification = CreateUserTypeSpecification . createType ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getTableName ( ) ) ; org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . doWithProperties ( ( PropertyHandler < CassandraPersistentProperty > ) property -> { specification . field ( property . getColumnName ( ) , getDataTypeWithUserTypeFactory ( property , DataTypeProvider . FrozenLiteral ) ) ; } ) ; if ( org.springframework.data.cassandra.mapping.CreateUserTypeSpecification . getFields ( ) . isEmpty ( ) ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getType ( ) ) ) ; } return org.springframework.data.cassandra.mapping.CreateUserTypeSpecification ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( TypeInformation < ? > org.springframework.data.cassandra.mapping.TypeInformation<?> ) { return ( ! org.springframework.data.cassandra.mapping.CustomConversions . hasCustomWriteTarget ( org.springframework.data.cassandra.mapping.TypeInformation<> . getType ( ) ) && super. shouldCreatePersistentEntityFor ( org.springframework.data.cassandra.mapping.TypeInformation<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( TypeInformation < ? > org.springframework.data.cassandra.mapping.TypeInformation<?> ) { return ( boolean ( org.springframework.data.cassandra.mapping.TypeInformation<> ) ? super. addPersistentEntity ( org.springframework.data.cassandra.mapping.TypeInformation<> ) : java.util.Optional . java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty ) { return org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.BasicCassandraMappingContext.DataTypeProvider . org.springframework.data.cassandra.mapping.BasicCassandraMappingContext.DataTypeProvider ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.BasicCassandraMappingContext.DataTypeProvider org.springframework.data.cassandra.mapping.BasicCassandraMappingContext.DataTypeProvider ) { if ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) { return org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getDataType ( ) ; } if ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . findAnnotation ( CassandraType .class ) . isPresent ( ) ) { return org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getDataType ( ) ; } java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> = getPersistentEntity ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getActualType ( ) ) ; if ( java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . filter ( CassandraPersistentEntity :: isUserDefinedType ) . isPresent ( ) ) { java.util.Optional<org.springframework.data.cassandra.mapping.DataType> < DataType > java.util.Optional<org.springframework.data.cassandra.mapping.DataType> = java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . map ( it -> getUserDataType ( property , dataTypeProvider , it ) ) ; if ( java.util.Optional<org.springframework.data.cassandra.mapping.DataType> . isPresent ( ) ) { return java.util.Optional<org.springframework.data.cassandra.mapping.DataType> . get ( ) ; } } if ( org.springframework.data.cassandra.mapping.CustomConversions . hasCustomWriteTarget ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getType ( ) ) ) { return getDataTypeFor ( org.springframework.data.cassandra.mapping.CustomConversions . getCustomWriteTarget ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getType ( ) ) ) ; } if ( org.springframework.data.cassandra.mapping.CustomConversions . hasCustomWriteTarget ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getActualType ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.cassandra.mapping.CustomConversions . getCustomWriteTarget ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getActualType ( ) ) ; if ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCollectionLike ( ) ) { if ( java.util.List .class . boolean ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getType ( ) ) ) { return DataType . list ( getDataTypeFor ( java.lang.Class<> ) ) ; } if ( java.util.Set .class . boolean ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getType ( ) ) ) { return DataType . set ( getDataTypeFor ( java.lang.Class<> ) ) ; } } return getDataTypeFor ( java.lang.Class<> ) ; } return org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getDataType ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty , org.springframework.data.cassandra.mapping.BasicCassandraMappingContext.DataTypeProvider org.springframework.data.cassandra.mapping.BasicCassandraMappingContext.DataTypeProvider , CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ) { DataType org.springframework.data.cassandra.mapping.DataType = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext.DataTypeProvider . org.springframework.data.cassandra.mapping.DataType ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; if ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCollectionLike ( ) ) { if ( java.util.Set .class . boolean ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getType ( ) ) ) { return DataType . set ( org.springframework.data.cassandra.mapping.DataType ) ; } if ( java.util.List .class . boolean ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getType ( ) ) ) { return DataType . list ( org.springframework.data.cassandra.mapping.DataType ) ; } } if ( ! org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCollectionLike ( ) && ! org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isMapLike ( ) ) { return org.springframework.data.cassandra.mapping.DataType ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( org.springframework.data.cassandra.mapping.CustomConversions . hasCustomWriteTarget ( java.lang.Class<> ) ? getDataTypeFor ( org.springframework.data.cassandra.mapping.CustomConversions . getCustomWriteTarget ( java.lang.Class<> ) ) : getDataTypeFor ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . get ( java.lang.Class<> ) ; Assert . notNull ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) ) ) ; return org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.Class<?>,org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?>> . containsKey ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ) { return org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getUserType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ) { return new org.springframework.data.cassandra.mapping.BasicCassandraMappingContext.FrozenLiteralDataType ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getTableName ( ) ) ; }  <METHOD_END>
<METHOD_START> abstract org.springframework.data.cassandra.mapping.DataType org.springframework.data.cassandra.mapping.DataType ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> );  <METHOD_END>
<METHOD_START> protected void ( CqlIdentifier org.springframework.data.cassandra.mapping.CqlIdentifier ) { super( Name . UDT ); this . org.springframework.data.cassandra.mapping.CqlIdentifier = org.springframework.data.cassandra.mapping.CqlIdentifier ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.cassandra.mapping.CqlIdentifier . toCql ( ) ) ; }  <METHOD_END>
