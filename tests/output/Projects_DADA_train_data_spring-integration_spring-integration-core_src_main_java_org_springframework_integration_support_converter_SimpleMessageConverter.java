<METHOD_START> public void ( ) { this( null , null ); }  <METHOD_END>
<METHOD_START> public void ( InboundMessageMapper < ? > org.springframework.integration.support.converter.InboundMessageMapper<?> ) { this( org.springframework.integration.support.converter.InboundMessageMapper<> , ( org.springframework.integration.support.converter.InboundMessageMapper<> instanceof OutboundMessageMapper ? ( OutboundMessageMapper < ? > ) org.springframework.integration.support.converter.InboundMessageMapper<> : null ) ); }  <METHOD_END>
<METHOD_START> public void ( OutboundMessageMapper < ? > org.springframework.integration.support.converter.OutboundMessageMapper<?> ) { this( org.springframework.integration.support.converter.OutboundMessageMapper<> instanceof InboundMessageMapper ? ( InboundMessageMapper < ? > ) org.springframework.integration.support.converter.OutboundMessageMapper<> : null , org.springframework.integration.support.converter.OutboundMessageMapper<> ); }  <METHOD_END>
<METHOD_START> public void ( InboundMessageMapper < ? > org.springframework.integration.support.converter.InboundMessageMapper<?> , OutboundMessageMapper < ? > org.springframework.integration.support.converter.OutboundMessageMapper<?> ) { this . void ( org.springframework.integration.support.converter.InboundMessageMapper<> ) ; this . void ( org.springframework.integration.support.converter.OutboundMessageMapper<> ) ; }  <METHOD_END>
<METHOD_START> public final void void ( InboundMessageMapper < ? > org.springframework.integration.support.converter.InboundMessageMapper<?> ) { this . org.springframework.integration.support.converter.InboundMessageMapper = ( org.springframework.integration.support.converter.InboundMessageMapper<> != null ) ? org.springframework.integration.support.converter.InboundMessageMapper<> : new org.springframework.integration.support.converter.SimpleMessageConverter.DefaultInboundMessageMapper ( ) ; }  <METHOD_END>
<METHOD_START> public final void void ( OutboundMessageMapper < ? > org.springframework.integration.support.converter.OutboundMessageMapper<?> ) { this . org.springframework.integration.support.converter.OutboundMessageMapper = ( org.springframework.integration.support.converter.OutboundMessageMapper<> != null ? org.springframework.integration.support.converter.OutboundMessageMapper<> : new org.springframework.integration.support.converter.SimpleMessageConverter.DefaultOutboundMessageMapper ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.support.converter.BeanFactory ) throws org.springframework.integration.support.converter.BeansException { this . org.springframework.integration.support.converter.BeanFactory = org.springframework.integration.support.converter.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.support.converter.MessageBuilderFactory org.springframework.integration.support.converter.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.support.converter.BeanFactory != null ) { this . org.springframework.integration.support.converter.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.support.converter.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.support.converter.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.converter.Message<?> < ? > org.springframework.integration.support.converter.Message<?> ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.integration.support.converter.MessageHeaders ) { try { return this . org.springframework.integration.support.converter.InboundMessageMapper . toMessage ( java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageConversionException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.support.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { try { return this . org.springframework.integration.support.converter.OutboundMessageMapper . fromMessage ( org.springframework.integration.support.converter.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageConversionException ( org.springframework.integration.support.converter.Message<> , STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.converter.Message<?> < ? > org.springframework.integration.support.converter.Message<?> ( java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( java.lang.Object == null ) { return null ; } if ( java.lang.Object instanceof Message < ? > ) { return ( Message < ? > ) java.lang.Object ; } return org.springframework.integration.support.converter.MessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . build ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.support.converter.Message<?> ) throws java.lang.Exception { return ( org.springframework.integration.support.converter.Message<> != null ) ? org.springframework.integration.support.converter.Message<> . getPayload ( ) : null ; }  <METHOD_END>
