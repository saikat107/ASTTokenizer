<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.mongodb.core.query.Criteria = new Criteria ( STRING ) . is ( STRING ) ; assertEquals ( Document . parse ( STRING ) , org.springframework.data.mongodb.core.query.Criteria . getCriteriaObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.mongodb.core.query.Criteria = new Criteria ( STRING ) . ne ( STRING ) ; assertEquals ( Document . parse ( STRING ) , org.springframework.data.mongodb.core.query.Criteria . getCriteriaObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( STRING , null ) ; Criteria org.springframework.data.mongodb.core.query.Criteria = new Criteria ( STRING ) . is ( null ) ; assertThat ( org.springframework.data.mongodb.core.query.Criteria . getCriteriaObject ( ) , is ( org.springframework.data.mongodb.core.query.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.mongodb.core.query.Criteria = new Criteria ( STRING ) . is ( STRING ) . and ( STRING ) . lt ( NUMBER ) ; assertEquals ( Document . parse ( STRING ) , org.springframework.data.mongodb.core.query.Criteria . getCriteriaObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidMongoDbApiUsageException .class ) public void void ( ) { Criteria org.springframework.data.mongodb.core.query.Criteria = new Criteria ( STRING ) . gte ( STRING ) . and ( STRING ) . ne ( STRING ) ; org.springframework.data.mongodb.core.query.Criteria . getCriteriaObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.mongodb.core.query.Criteria = new Criteria ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.mongodb.core.query.Criteria = new Criteria ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Criteria , is ( not ( org.springframework.data.mongodb.core.query.Criteria ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Criteria , is ( not ( org.springframework.data.mongodb.core.query.Criteria ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Criteria ( ) . not ( ) . andOperator ( Criteria . where ( STRING ) . is ( true ) . and ( STRING ) . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Criteria ( ) . not ( ) . orOperator ( Criteria . where ( STRING ) . is ( true ) . and ( STRING ) . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Criteria ( ) . not ( ) . norOperator ( Criteria . where ( STRING ) . is ( true ) . and ( STRING ) . is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.mongodb.core.query.Criteria = Criteria . where ( STRING ) . not ( ) . gt ( NUMBER ) . and ( STRING ) . is ( STRING ) ; Document org.springframework.data.mongodb.core.query.Document = org.springframework.data.mongodb.core.query.Criteria . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , equalTo ( new Document ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( ) . lt ( STRING ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , equalTo ( new Document ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( ) . lt ( STRING ) . gt ( STRING ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , equalTo ( new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( ) . lt ( STRING ) . not ( ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( STRING ) . near ( new GeoJsonPoint ( NUMBER , NUMBER ) ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . containing ( STRING , new GeoJsonPoint ( NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( STRING ) . near ( new Point ( NUMBER , NUMBER ) ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( STRING ) . near ( new GeoJsonPoint ( NUMBER , NUMBER ) ) . maxDistance ( NUMBER ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( STRING ) . nearSphere ( new GeoJsonPoint ( NUMBER , NUMBER ) ) . maxDistance ( NUMBER ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( STRING ) . near ( new GeoJsonPoint ( NUMBER , NUMBER ) ) . minDistance ( NUMBER ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( STRING ) . nearSphere ( new GeoJsonPoint ( NUMBER , NUMBER ) ) . minDistance ( NUMBER ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.query.Document = new Criteria ( STRING ) . nearSphere ( new GeoJsonPoint ( NUMBER , NUMBER ) ) . minDistance ( NUMBER ) . maxDistance ( NUMBER ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Criteria ( STRING ) . intersects ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GeoJsonLineString org.springframework.data.mongodb.core.query.GeoJsonLineString = new GeoJsonLineString ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; Document org.springframework.data.mongodb.core.query.Document = new Criteria ( STRING ) . intersects ( org.springframework.data.mongodb.core.query.GeoJsonLineString ) . getCriteriaObject ( ) ; assertThat ( org.springframework.data.mongodb.core.query.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.query.GeoJsonLineString ) ) ; }  <METHOD_END>
