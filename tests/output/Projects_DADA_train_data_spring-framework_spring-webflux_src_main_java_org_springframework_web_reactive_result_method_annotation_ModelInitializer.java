<METHOD_START> public void ( ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { this . org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ( ) { return this . org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> ( BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> < InvocableHandlerMethod > java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.util.List<org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult>> < Mono < HandlerResult > > java.util.List<org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult>> = new java.util.ArrayList<org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult>> <> ( ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.InvocableHandlerMethod> . forEach ( invocable -> resultList . add ( invocable . invoke ( exchange , bindingContext ) ) ) ; return Mono . when ( java.util.List<org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.HandlerResult>> , objectArray -> { return Arrays . stream ( objectArray ) . map ( object -> ( HandlerResult ) object ) . map ( handlerResult -> handleResult ( handlerResult , bindingContext ) ) . collect ( Collectors . toList ( ) ) ; } ) . then ( completionList -> Mono . when ( completionList ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> ( HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext ) { return org.springframework.web.reactive.result.method.annotation.HandlerResult . getReturnValue ( ) . map ( value -> { ResolvableType type = handlerResult . getReturnType ( ) ; ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( type . getRawClass ( ) , value ) ; Class < ? > attributeType ; if ( adapter != null ) { attributeType = adapter . isNoValue ( ) ? Void .class : type . resolveGeneric ( NUMBER ) ; if ( attributeType . equals ( Void .class ) ) { return Mono .< Void > from ( adapter . toPublisher ( value ) ) ; } } else { attributeType = type . resolve ( ) ; } String name = getAttributeName ( attributeType , handlerResult . getReturnTypeSource ( ) ) ; bindingContext . getModel ( ) . asMap ( ) . putIfAbsent ( name , value ) ; return Mono .< Void > empty ( ) ; } ) . orElse ( Mono . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.web.reactive.result.method.annotation.MethodParameter . getMethod ( ) ; ModelAttribute org.springframework.web.reactive.result.method.annotation.ModelAttribute = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , ModelAttribute .class ) ; if ( org.springframework.web.reactive.result.method.annotation.ModelAttribute != null && StringUtils . hasText ( org.springframework.web.reactive.result.method.annotation.ModelAttribute . value ( ) ) ) { return org.springframework.web.reactive.result.method.annotation.ModelAttribute . value ( ) ; } return ClassUtils . getShortNameAsProperty ( java.lang.Class<> ) ; }  <METHOD_END>
