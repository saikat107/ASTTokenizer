<METHOD_START> public void ( ) { setTransactionSynchronization ( SYNCHRONIZATION_NEVER ) ; }  <METHOD_END>
<METHOD_START> public void ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory ) { this(); void ( org.springframework.jms.connection.ConnectionFactory ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ConnectionFactory org.springframework.jms.connection.ConnectionFactory ) { if ( org.springframework.jms.connection.ConnectionFactory instanceof TransactionAwareConnectionFactoryProxy ) { this . org.springframework.jms.connection.ConnectionFactory = ( ( TransactionAwareConnectionFactoryProxy ) org.springframework.jms.connection.ConnectionFactory ) . getTargetConnectionFactory ( ) ; } else { this . org.springframework.jms.connection.ConnectionFactory = org.springframework.jms.connection.ConnectionFactory ; } }  <METHOD_END>
<METHOD_START> public org.springframework.jms.connection.ConnectionFactory org.springframework.jms.connection.ConnectionFactory ( ) { return this . org.springframework.jms.connection.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.jms.connection.ConnectionFactory ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.jms.connection.ConnectionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject = new org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ( ) ; org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . void ( ( JmsResourceHolder ) TransactionSynchronizationManager . getResource ( org.springframework.jms.connection.ConnectionFactory ( ) ) ) ; return org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object ) { org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject = ( org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ) java.lang.Object ; return ( org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.jms.connection.TransactionDefinition ) { if ( org.springframework.jms.connection.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT ) { throw new InvalidIsolationLevelException ( STRING ) ; } org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject = ( org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ) java.lang.Object ; Connection org.springframework.jms.connection.Connection = null ; Session org.springframework.jms.connection.Session = null ; try { org.springframework.jms.connection.Connection = org.springframework.jms.connection.Connection ( ) ; org.springframework.jms.connection.Session = org.springframework.jms.connection.Session ( org.springframework.jms.connection.Connection ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.connection.Session + STRING + org.springframework.jms.connection.Connection + STRING ) ; } org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . void ( new JmsResourceHolder ( org.springframework.jms.connection.ConnectionFactory ( ) , org.springframework.jms.connection.Connection , org.springframework.jms.connection.Session ) ) ; org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) . setSynchronizedWithTransaction ( true ) ; int int = determineTimeout ( org.springframework.jms.connection.TransactionDefinition ) ; if ( int != TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) . setTimeoutInSeconds ( int ) ; } TransactionSynchronizationManager . bindResource ( org.springframework.jms.connection.ConnectionFactory ( ) , org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.jms.connection.Session != null ) { try { org.springframework.jms.connection.Session . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } } if ( org.springframework.jms.connection.Connection != null ) { try { org.springframework.jms.connection.Connection . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } } throw new CannotCreateTransactionException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject = ( org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ) java.lang.Object ; org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . void ( null ) ; return TransactionSynchronizationManager . unbindResource ( org.springframework.jms.connection.ConnectionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { TransactionSynchronizationManager . bindResource ( org.springframework.jms.connection.ConnectionFactory ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jms.connection.DefaultTransactionStatus ) { org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject = ( org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ) org.springframework.jms.connection.DefaultTransactionStatus . getTransaction ( ) ; Session org.springframework.jms.connection.Session = org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) . getSession ( ) ; try { if ( org.springframework.jms.connection.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.jms.connection.Session + STRING ) ; } org.springframework.jms.connection.Session . commit ( ) ; } catch ( TransactionRolledBackException org.springframework.jms.connection.TransactionRolledBackException ) { throw new UnexpectedRollbackException ( STRING , org.springframework.jms.connection.TransactionRolledBackException ) ; } catch ( JMSException org.springframework.jms.connection.JMSException ) { throw new TransactionSystemException ( STRING , org.springframework.jms.connection.JMSException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jms.connection.DefaultTransactionStatus ) { org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject = ( org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ) org.springframework.jms.connection.DefaultTransactionStatus . getTransaction ( ) ; Session org.springframework.jms.connection.Session = org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) . getSession ( ) ; try { if ( org.springframework.jms.connection.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.jms.connection.Session + STRING ) ; } org.springframework.jms.connection.Session . rollback ( ) ; } catch ( JMSException org.springframework.jms.connection.JMSException ) { throw new TransactionSystemException ( STRING , org.springframework.jms.connection.JMSException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.jms.connection.DefaultTransactionStatus ) { org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject = ( org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ) org.springframework.jms.connection.DefaultTransactionStatus . getTransaction ( ) ; org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) . setRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject = ( org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject ) java.lang.Object ; TransactionSynchronizationManager . unbindResource ( org.springframework.jms.connection.ConnectionFactory ( ) ) ; org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) . closeAll ( ) ; org.springframework.jms.connection.JmsTransactionManager.JmsTransactionObject . org.springframework.jms.connection.JmsResourceHolder ( ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.connection.Connection org.springframework.jms.connection.Connection ( ) org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.ConnectionFactory ( ) . createConnection ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.connection.Session org.springframework.jms.connection.Session ( Connection org.springframework.jms.connection.Connection ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ; }  <METHOD_END>
<METHOD_START> public void void ( JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ) { this . org.springframework.jms.connection.JmsResourceHolder = org.springframework.jms.connection.JmsResourceHolder ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.connection.JmsResourceHolder org.springframework.jms.connection.JmsResourceHolder ( ) { return this . org.springframework.jms.connection.JmsResourceHolder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.jms.connection.JmsResourceHolder . isRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
