<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.security.AnnotationConfigApplicationContext org.springframework.statemachine.security.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.security.SecurityConfigTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; StateMachineInterceptorList < ? , ? > org.springframework.statemachine.security.StateMachineInterceptorList<?,?> = TestUtils . readField ( STRING , org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> < StateMachineInterceptor < ? , ? > > java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> = TestUtils . readField ( STRING , org.springframework.statemachine.security.StateMachineInterceptorList<,> ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> , notNullValue ( ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . get ( NUMBER ) , instanceOf ( StateMachineSecurityInterceptor .class ) ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . get ( NUMBER ) ) ; assertThat ( java.lang.Object , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.security.SecurityConfigTests.Config2 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; StateMachineInterceptorList < ? , ? > org.springframework.statemachine.security.StateMachineInterceptorList<?,?> = TestUtils . readField ( STRING , org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> < StateMachineInterceptor < ? , ? > > java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> = TestUtils . readField ( STRING , org.springframework.statemachine.security.StateMachineInterceptorList<,> ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> , notNullValue ( ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.security.SecurityConfigTests.Config3 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; StateMachineInterceptorList < ? , ? > org.springframework.statemachine.security.StateMachineInterceptorList<?,?> = TestUtils . readField ( STRING , org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> < StateMachineInterceptor < ? , ? > > java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> = TestUtils . readField ( STRING , org.springframework.statemachine.security.StateMachineInterceptorList<,> ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . get ( NUMBER ) , instanceOf ( StateMachineSecurityInterceptor .class ) ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . get ( NUMBER ) ) ; assertThat ( java.lang.Object , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.security.SecurityConfigTests.Config4 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; StateMachineInterceptorList < ? , ? > org.springframework.statemachine.security.StateMachineInterceptorList<?,?> = TestUtils . readField ( STRING , org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> < StateMachineInterceptor < ? , ? > > java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> = TestUtils . readField ( STRING , org.springframework.statemachine.security.StateMachineInterceptorList<,> ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> , notNullValue ( ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.security.SecurityConfigTests.Config5 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; StateMachineInterceptorList < ? , ? > org.springframework.statemachine.security.StateMachineInterceptorList<?,?> = TestUtils . readField ( STRING , org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> < StateMachineInterceptor < ? , ? > > java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> = TestUtils . readField ( STRING , org.springframework.statemachine.security.StateMachineInterceptorList<,> ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> , notNullValue ( ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . get ( NUMBER ) , instanceOf ( StateMachineSecurityInterceptor .class ) ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . get ( NUMBER ) ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; assertThat ( java.lang.Object , instanceOf ( org.springframework.statemachine.security.SecurityConfigTests.MockAccessDecisionManager .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.security.SecurityConfigTests.Config6 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.security.Transition<java.lang.String,java.lang.String> = org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> . getTransitions ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.statemachine.security.Transition<java.lang.String,java.lang.String> . getSecurityRule ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.security.SecurityConfigTests.Config8 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; Transition < java.lang.String , java.lang.String > org.springframework.statemachine.security.Transition<java.lang.String,java.lang.String> = org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> . getTransitions ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.statemachine.security.Transition<java.lang.String,java.lang.String> . getSecurityRule ( ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.security.SecurityConfigTests.Config7 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; StateMachineInterceptorList < ? , ? > org.springframework.statemachine.security.StateMachineInterceptorList<?,?> = TestUtils . readField ( STRING , org.springframework.statemachine.security.ObjectStateMachine<java.lang.String,java.lang.String> ) ; java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> < StateMachineInterceptor < ? , ? > > java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> = TestUtils . readField ( STRING , org.springframework.statemachine.security.StateMachineInterceptorList<,> ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> , notNullValue ( ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . get ( NUMBER ) , instanceOf ( StateMachineSecurityInterceptor .class ) ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.util.List<org.springframework.statemachine.security.StateMachineInterceptor<?,?>> . get ( NUMBER ) ) ; assertThat ( java.lang.Object , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withSecurity ( ) . enabled ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withSecurity ( ) . enabled ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withSecurity ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withSecurity ( ) . eventAccessDecisionManager ( new org.springframework.statemachine.security.SecurityConfigTests.MockAccessDecisionManager ( ) ) . transitionAccessDecisionManager ( new org.springframework.statemachine.security.SecurityConfigTests.MockAccessDecisionManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withSecurity ( ) . enabled ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . secured ( STRING ) . secured ( STRING , ComparisonType . ALL ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withSecurity ( ) . enabled ( true ) . event ( STRING ) . event ( STRING , ComparisonType . ALL ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withSecurity ( ) . enabled ( true ) . transition ( STRING ) . transition ( STRING , ComparisonType . ALL ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Authentication org.springframework.statemachine.security.Authentication , java.lang.Object java.lang.Object , java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> < ConfigAttribute > java.util.Collection<org.springframework.statemachine.security.ConfigAttribute> )				throws org.springframework.statemachine.security.AccessDeniedException , org.springframework.statemachine.security.InsufficientAuthenticationException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConfigAttribute org.springframework.statemachine.security.ConfigAttribute ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return false ; }  <METHOD_END>
