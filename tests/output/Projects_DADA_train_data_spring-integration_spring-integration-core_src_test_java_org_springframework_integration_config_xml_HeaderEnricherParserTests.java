<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; long long = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Long .class ) ; assertEquals ( - NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; long long = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Long .class ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; java.lang.Boolean java.lang.Boolean = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; java.lang.Boolean java.lang.Boolean = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; java.lang.Boolean java.lang.Boolean = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageTransformationException .class ) public void void ( ) { MessageHandler org.springframework.integration.config.xml.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING , MessageHandler .class ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.config.xml.MessageHandler . handleMessage ( org.springframework.integration.config.xml.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHandler org.springframework.integration.config.xml.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , STRING , MessageHandler .class ) ; QueueChannel org.springframework.integration.config.xml.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.config.xml.QueueChannel ) . build ( ) ; org.springframework.integration.config.xml.MessageHandler . handleMessage ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.xml.Message<> . getHeaders ( ) . get ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof java.lang.Integer ) ; }  <METHOD_END>
