<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.boot.liquibase.Log = org.springframework.boot.liquibase.Log ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.liquibase.Log org.springframework.boot.liquibase.Log ( java.lang.String java.lang.String ) { return LogFactory . getLog ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super. setLogLevel ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( boolean ( LogLevel . SEVERE ) ) { this . org.springframework.boot.liquibase.Log . error ( buildMessage ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { if ( boolean ( LogLevel . SEVERE ) ) { this . org.springframework.boot.liquibase.Log . error ( buildMessage ( java.lang.String ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( boolean ( LogLevel . WARNING ) ) { this . org.springframework.boot.liquibase.Log . warn ( buildMessage ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { if ( boolean ( LogLevel . WARNING ) ) { this . org.springframework.boot.liquibase.Log . warn ( buildMessage ( java.lang.String ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( boolean ( LogLevel . INFO ) ) { this . org.springframework.boot.liquibase.Log . info ( buildMessage ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { if ( boolean ( LogLevel . INFO ) ) { this . org.springframework.boot.liquibase.Log . info ( buildMessage ( java.lang.String ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( boolean ( LogLevel . DEBUG ) ) { this . org.springframework.boot.liquibase.Log . debug ( buildMessage ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { if ( boolean ( LogLevel . DEBUG ) ) { this . org.springframework.boot.liquibase.Log . debug ( buildMessage ( java.lang.String ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( LogLevel org.springframework.boot.liquibase.LogLevel ) { if ( this . org.springframework.boot.liquibase.Log != null ) { switch ( org.springframework.boot.liquibase.LogLevel ) { case DEBUG : return this . org.springframework.boot.liquibase.Log . isDebugEnabled ( ) ; case INFO : return this . org.springframework.boot.liquibase.Log . isInfoEnabled ( ) ; case WARNING : return this . org.springframework.boot.liquibase.Log . isWarnEnabled ( ) ; case SEVERE : return this . org.springframework.boot.liquibase.Log . isErrorEnabled ( ) ; } } return false ; }  <METHOD_END>
