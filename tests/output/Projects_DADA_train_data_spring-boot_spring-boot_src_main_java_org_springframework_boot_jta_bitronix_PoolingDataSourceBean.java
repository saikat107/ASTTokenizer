<METHOD_START> public void ( ) { super(); setMaxPoolSize ( NUMBER ) ; setAllowLocalTransactions ( true ) ; setEnableJdbc4ConnectionTest ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { java.lang.ThreadLocal<org.springframework.boot.jta.bitronix.PoolingDataSourceBean> . void ( this ) ; try { super. init ( ) ; } finally { java.lang.ThreadLocal<org.springframework.boot.jta.bitronix.PoolingDataSourceBean> . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( ! StringUtils . hasLength ( getUniqueName ( ) ) ) { setUniqueName ( this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.XADataSource javax.sql.XADataSource ) { this . javax.sql.XADataSource = javax.sql.XADataSource ; setClassName ( org.springframework.boot.jta.bitronix.PoolingDataSourceBean.DirectXADataSource .class . java.lang.String ( ) ) ; setDriverProperties ( new java.util.Properties ( ) ) ; }  <METHOD_END>
<METHOD_START> protected final javax.sql.XADataSource javax.sql.XADataSource ( ) { return this . javax.sql.XADataSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.jta.bitronix.XAStatefulHolder org.springframework.boot.jta.bitronix.XAStatefulHolder ( java.lang.Object java.lang.Object , ResourceBean org.springframework.boot.jta.bitronix.ResourceBean )			throws java.lang.Exception { if ( java.lang.Object instanceof org.springframework.boot.jta.bitronix.PoolingDataSourceBean.DirectXADataSource ) { java.lang.Object = ( ( org.springframework.boot.jta.bitronix.PoolingDataSourceBean.DirectXADataSource ) java.lang.Object ) . javax.sql.XADataSource ( ) ; } return super. createPooledConnection ( java.lang.Object , org.springframework.boot.jta.bitronix.ResourceBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.logging.Logger java.util.logging.Logger ( ) java.sql.SQLFeatureNotSupportedException { try { return ( ( javax.sql.DataSource ) this ) . java.util.logging.Logger ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return java.util.logging.Logger . java.util.logging.Logger ( java.util.logging.Logger . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void ( ) { this . javax.sql.XADataSource = java.lang.ThreadLocal<org.springframework.boot.jta.bitronix.PoolingDataSourceBean> . org.springframework.boot.jta.bitronix.PoolingDataSourceBean ( ) . javax.sql.XADataSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.PrintWriter java.io.PrintWriter ( ) java.sql.SQLException { return this . javax.sql.XADataSource . java.io.PrintWriter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.sql.XAConnection javax.sql.XAConnection ( ) java.sql.SQLException { return this . javax.sql.XADataSource . javax.sql.XAConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.sql.XAConnection javax.sql.XAConnection ( java.lang.String java.lang.String , java.lang.String java.lang.String )				throws java.sql.SQLException { return this . javax.sql.XADataSource . javax.sql.XAConnection ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.PrintWriter java.io.PrintWriter ) throws java.sql.SQLException { this . javax.sql.XADataSource . void ( java.io.PrintWriter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws java.sql.SQLException { this . javax.sql.XADataSource . void ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.sql.SQLException { return this . javax.sql.XADataSource . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.logging.Logger java.util.logging.Logger ( ) java.sql.SQLFeatureNotSupportedException { return this . javax.sql.XADataSource . java.util.logging.Logger ( ) ; }  <METHOD_END>
<METHOD_START> public javax.sql.XADataSource javax.sql.XADataSource ( ) { return this . javax.sql.XADataSource ; }  <METHOD_END>
