<METHOD_START> @ Before public void void ( ) { ClassPathResource org.springframework.web.reactive.resource.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.AppCacheManifestTransformerTests> ( ) ) ; ResourceWebHandler org.springframework.web.reactive.resource.ResourceWebHandler = new ResourceWebHandler ( ) ; ResourceUrlProvider org.springframework.web.reactive.resource.ResourceUrlProvider = new ResourceUrlProvider ( ) ; org.springframework.web.reactive.resource.ResourceUrlProvider . setHandlerMap ( java.util.Collections . java.util.Map ( STRING , org.springframework.web.reactive.resource.ResourceWebHandler ) ) ; VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , new ContentVersionStrategy ( ) ) ) ; PathResourceResolver org.springframework.web.reactive.resource.PathResourceResolver = new PathResourceResolver ( ) ; org.springframework.web.reactive.resource.PathResourceResolver . setAllowedLocations ( org.springframework.web.reactive.resource.ClassPathResource ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> = java.util.Arrays . java.util.List ( org.springframework.web.reactive.resource.VersionResourceResolver , org.springframework.web.reactive.resource.PathResourceResolver ) ; ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain = new DefaultResourceResolverChain ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; CssLinkResourceTransformer org.springframework.web.reactive.resource.CssLinkResourceTransformer = new CssLinkResourceTransformer ( ) ; org.springframework.web.reactive.resource.CssLinkResourceTransformer . setResourceUrlProvider ( org.springframework.web.reactive.resource.ResourceUrlProvider ) ; java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> = java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.CssLinkResourceTransformer ) ; this . org.springframework.web.reactive.resource.ResourceTransformerChain = new DefaultResourceTransformerChain ( org.springframework.web.reactive.resource.ResourceResolverChain , java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ) ; this . org.springframework.web.reactive.resource.AppCacheManifestTransformer = new AppCacheManifestTransformer ( ) ; this . org.springframework.web.reactive.resource.AppCacheManifestTransformer . setResourceUrlProvider ( org.springframework.web.reactive.resource.ResourceUrlProvider ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setResourceResolvers ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setResourceTransformers ( java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ) ; org.springframework.web.reactive.resource.ResourceWebHandler . setLocations ( java.util.Collections . java.util.List ( org.springframework.web.reactive.resource.ClassPathResource ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; this . org.springframework.web.reactive.resource.ResourceTransformerChain = mock ( ResourceTransformerChain .class ) ; Resource org.springframework.web.reactive.resource.Resource = mock ( Resource .class ) ; given ( org.springframework.web.reactive.resource.Resource . getFilename ( ) ) . willReturn ( STRING ) ; given ( this . org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.ServerWebExchange , org.springframework.web.reactive.resource.Resource ) ) . willReturn ( Mono . just ( org.springframework.web.reactive.resource.Resource ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.AppCacheManifestTransformer . transform ( org.springframework.web.reactive.resource.ServerWebExchange , org.springframework.web.reactive.resource.Resource , this . org.springframework.web.reactive.resource.ResourceTransformerChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; this . org.springframework.web.reactive.resource.ResourceTransformerChain = mock ( ResourceTransformerChain .class ) ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.AppCacheManifestTransformerTests> ( ) ) ; given ( this . org.springframework.web.reactive.resource.ResourceTransformerChain . transform ( org.springframework.web.reactive.resource.ServerWebExchange , org.springframework.web.reactive.resource.Resource ) ) . willReturn ( Mono . just ( org.springframework.web.reactive.resource.Resource ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.AppCacheManifestTransformer . transform ( org.springframework.web.reactive.resource.ServerWebExchange , org.springframework.web.reactive.resource.Resource , this . org.springframework.web.reactive.resource.ResourceTransformerChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Collections . java.util.Map ( STRING , new ContentVersionStrategy ( ) ) ) ; PathResourceResolver org.springframework.web.reactive.resource.PathResourceResolver = new PathResourceResolver ( ) ; org.springframework.web.reactive.resource.PathResourceResolver . setAllowedLocations ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.AppCacheManifestTransformerTests> ( ) ) ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> = java.util.Arrays . java.util.List ( org.springframework.web.reactive.resource.VersionResourceResolver , org.springframework.web.reactive.resource.PathResourceResolver ) ; ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain = new DefaultResourceResolverChain ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> = new java.util.ArrayList<org.springframework.web.reactive.resource.ResourceTransformer> <> ( ) ; java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> . add ( new CssLinkResourceTransformer ( ) ) ; this . org.springframework.web.reactive.resource.ResourceTransformerChain = new DefaultResourceTransformerChain ( org.springframework.web.reactive.resource.ResourceResolverChain , java.util.List<org.springframework.web.reactive.resource.ResourceTransformer> ) ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.AppCacheManifestTransformerTests> ( ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.AppCacheManifestTransformer . transform ( org.springframework.web.reactive.resource.ServerWebExchange , org.springframework.web.reactive.resource.Resource , this . org.springframework.web.reactive.resource.ResourceTransformerChain ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( org.springframework.web.reactive.resource.Resource . getInputStream ( ) ) ; java.lang.String java.lang.String = new java.lang.String ( byte[] , STRING ) ; assertThat ( STRING , java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( STRING , java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( STRING , java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( STRING , java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( STRING , java.lang.String , Matchers . containsString ( STRING ) ) ; assertThat ( STRING , java.lang.String , Matchers . containsString ( STRING ) ) ; }  <METHOD_END>
