<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.AllNestedConditionsTests.Config .class ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.AllNestedConditionsTests.Config .class , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.AllNestedConditionsTests.Config .class , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.AllNestedConditionsTests.Config .class , STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . PARSE_CONFIGURATION ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { return true ; }  <METHOD_END>
