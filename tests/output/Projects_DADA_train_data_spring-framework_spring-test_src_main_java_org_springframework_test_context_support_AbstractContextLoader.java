<METHOD_START> @ java.lang.Override public void void ( ContextConfigurationAttributes org.springframework.test.context.support.ContextConfigurationAttributes ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( org.springframework.test.context.support.ContextConfigurationAttributes . getDeclaringClass ( ) , org.springframework.test.context.support.ContextConfigurationAttributes . getLocations ( ) ) ; org.springframework.test.context.support.ContextConfigurationAttributes . setLocations ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableApplicationContext org.springframework.test.context.support.ConfigurableApplicationContext , MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) { org.springframework.test.context.support.ConfigurableApplicationContext . getEnvironment ( ) . setActiveProfiles ( org.springframework.test.context.support.MergedContextConfiguration . getActiveProfiles ( ) ) ; TestPropertySourceUtils . addPropertiesFilesToEnvironment ( org.springframework.test.context.support.ConfigurableApplicationContext , org.springframework.test.context.support.MergedContextConfiguration . getPropertySourceLocations ( ) ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.test.context.support.ConfigurableApplicationContext , org.springframework.test.context.support.MergedContextConfiguration . getPropertySourceProperties ( ) ) ; void ( org.springframework.test.context.support.ConfigurableApplicationContext , org.springframework.test.context.support.MergedContextConfiguration ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( ConfigurableApplicationContext org.springframework.test.context.support.ConfigurableApplicationContext , MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) { java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.ApplicationContextInitializer<? extends org.springframework.test.context.support.ConfigurableApplicationContext>>> < java.lang.Class<? extends org.springframework.test.context.support.ApplicationContextInitializer<? extends org.springframework.test.context.support.ConfigurableApplicationContext>> < ? extends ApplicationContextInitializer < ? extends ConfigurableApplicationContext > > > java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.ApplicationContextInitializer<? extends org.springframework.test.context.support.ConfigurableApplicationContext>>> = org.springframework.test.context.support.MergedContextConfiguration . getContextInitializerClasses ( ) ; if ( java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.ApplicationContextInitializer<? extends org.springframework.test.context.support.ConfigurableApplicationContext>>> . isEmpty ( ) ) { return; } java.util.List<org.springframework.test.context.support.ApplicationContextInitializer<org.springframework.test.context.support.ConfigurableApplicationContext>> < ApplicationContextInitializer < ConfigurableApplicationContext > > java.util.List<org.springframework.test.context.support.ApplicationContextInitializer<org.springframework.test.context.support.ConfigurableApplicationContext>> = new java.util.ArrayList<org.springframework.test.context.support.ApplicationContextInitializer<org.springframework.test.context.support.ConfigurableApplicationContext>> <> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.ConfigurableApplicationContext . getClass ( ) ; for ( java.lang.Class<? extends org.springframework.test.context.support.ApplicationContextInitializer<? extends org.springframework.test.context.support.ConfigurableApplicationContext>> < ? extends ApplicationContextInitializer < ? extends ConfigurableApplicationContext > > java.lang.Class<? extends org.springframework.test.context.support.ApplicationContextInitializer<? extends org.springframework.test.context.support.ConfigurableApplicationContext>> : java.util.Set<java.lang.Class<? extends org.springframework.test.context.support.ApplicationContextInitializer<? extends org.springframework.test.context.support.ConfigurableApplicationContext>>> ) { java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveTypeArgument ( java.lang.Class<> , ApplicationContextInitializer .class ) ; if ( java.lang.Class<> != null && ! java.lang.Class<> . boolean ( org.springframework.test.context.support.ConfigurableApplicationContext ) ) { throw new ApplicationContextException ( java.lang.String . java.lang.String ( STRING + STRING + STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; } java.util.List<org.springframework.test.context.support.ApplicationContextInitializer<org.springframework.test.context.support.ConfigurableApplicationContext>> . add ( ( ApplicationContextInitializer < ConfigurableApplicationContext > ) BeanUtils . instantiateClass ( java.lang.Class<> ) ) ; } AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.test.context.support.ApplicationContextInitializer<org.springframework.test.context.support.ConfigurableApplicationContext>> ) ; for ( ApplicationContextInitializer < ConfigurableApplicationContext > org.springframework.test.context.support.ApplicationContextInitializer<org.springframework.test.context.support.ConfigurableApplicationContext> : java.util.List<org.springframework.test.context.support.ApplicationContextInitializer<org.springframework.test.context.support.ConfigurableApplicationContext>> ) { org.springframework.test.context.support.ApplicationContextInitializer<org.springframework.test.context.support.ConfigurableApplicationContext> . initialize ( org.springframework.test.context.support.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableApplicationContext org.springframework.test.context.support.ConfigurableApplicationContext , MergedContextConfiguration org.springframework.test.context.support.MergedContextConfiguration ) { for ( ContextCustomizer org.springframework.test.context.support.ContextCustomizer : org.springframework.test.context.support.MergedContextConfiguration . getContextCustomizers ( ) ) { org.springframework.test.context.support.ContextCustomizer . customizeContext ( org.springframework.test.context.support.ConfigurableApplicationContext , org.springframework.test.context.support.MergedContextConfiguration ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { return ( ObjectUtils . isEmpty ( java.lang.String[] ) && boolean ( ) ) ? java.lang.String[] ( java.lang.Class<> ) : java.lang.String[] ( java.lang.Class<> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { Assert . hasText ( java.lang.String , STRING ) ; java.lang.String java.lang.String = ClassUtils . convertClassNameToResourcePath ( java.lang.Class<> . java.lang.String ( ) ) + java.lang.String ; java.lang.String java.lang.String = ResourceUtils . CLASSPATH_URL_PREFIX + java.lang.String ; ClassPathResource org.springframework.test.context.support.ClassPathResource = new ClassPathResource ( java.lang.String ) ; if ( org.springframework.test.context.support.ClassPathResource . exists ( ) ) { if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Class<> . java.lang.String ( ) ) ) ; } return new java.lang.String [] { java.lang.String } ; } else if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<> . java.lang.String ( ) , org.springframework.test.context.support.ClassPathResource ) ) ; } } if ( org.springframework.test.context.support.Log . isInfoEnabled ( ) ) { org.springframework.test.context.support.Log . info ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<> . java.lang.String ( ) , ObjectUtils . nullSafeToString ( java.lang.String[] ) ) ) ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { return TestContextResourceUtils . convertToClasspathResourcePaths ( java.lang.Class<> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
