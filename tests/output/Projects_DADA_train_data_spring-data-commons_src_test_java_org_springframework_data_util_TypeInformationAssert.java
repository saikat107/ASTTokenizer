<METHOD_START> public void ( TypeInformation < ? > org.springframework.data.util.TypeInformation<?> ) { super( org.springframework.data.util.TypeInformation<> , org.springframework.data.util.TypeInformationAssert .class ); }  <METHOD_END>
<METHOD_START> public static org.springframework.data.util.TypeInformationAssert org.springframework.data.util.TypeInformationAssert ( TypeInformation < ? > org.springframework.data.util.TypeInformation<?> ) { return new org.springframework.data.util.TypeInformationAssert ( org.springframework.data.util.TypeInformation<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.util.TypeInformationAssert org.springframework.data.util.TypeInformationAssert ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assertions . assertThat ( actual . getComponentType ( ) ) . hasValueSatisfying ( it -> Assertions . assertThat ( it . getType ( ) ) . isEqualTo ( type ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.util.AbstractObjectAssert<?,org.springframework.data.util.TypeInformation<?>> < ? , TypeInformation < ? > > org.springframework.data.util.AbstractObjectAssert<?,org.springframework.data.util.TypeInformation<?>> ( java.lang.String java.lang.String ) { java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = actual . getProperty ( java.lang.String ) ; return Assertions . assertThat ( java.util.Optional<org.springframework.data.util.TypeInformation<?>> . orElseGet ( ( ) { failWithMessage ( STRING , property ) ; return null ; } ) ) ; }  <METHOD_END>
