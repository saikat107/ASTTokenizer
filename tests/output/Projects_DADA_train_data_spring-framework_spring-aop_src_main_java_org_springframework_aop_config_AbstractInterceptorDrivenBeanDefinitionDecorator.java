<METHOD_START> @ java.lang.Override public final org.springframework.aop.config.BeanDefinitionHolder org.springframework.aop.config.BeanDefinitionHolder ( org.w3c.dom.Node org.w3c.dom.Node , BeanDefinitionHolder org.springframework.aop.config.BeanDefinitionHolder , ParserContext org.springframework.aop.config.ParserContext ) { BeanDefinitionRegistry org.springframework.aop.config.BeanDefinitionRegistry = org.springframework.aop.config.ParserContext . getRegistry ( ) ; java.lang.String java.lang.String = org.springframework.aop.config.BeanDefinitionHolder . getBeanName ( ) ; BeanDefinition org.springframework.aop.config.BeanDefinition = org.springframework.aop.config.BeanDefinitionHolder . getBeanDefinition ( ) ; BeanDefinitionHolder org.springframework.aop.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.aop.config.BeanDefinition , java.lang.String + STRING ) ; BeanDefinition org.springframework.aop.config.BeanDefinition = org.springframework.aop.config.BeanDefinition ( org.w3c.dom.Node ) ; java.lang.String java.lang.String = java.lang.String + '.' + java.lang.String ( org.springframework.aop.config.BeanDefinition ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( new BeanDefinitionHolder ( org.springframework.aop.config.BeanDefinition , java.lang.String ) , org.springframework.aop.config.BeanDefinitionRegistry ) ; BeanDefinitionHolder org.springframework.aop.config.BeanDefinitionHolder = org.springframework.aop.config.BeanDefinitionHolder ; if ( ! boolean ( org.springframework.aop.config.BeanDefinition ) ) { RootBeanDefinition org.springframework.aop.config.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.aop.config.RootBeanDefinition . setBeanClass ( ProxyFactoryBean .class ) ; org.springframework.aop.config.RootBeanDefinition . setScope ( org.springframework.aop.config.BeanDefinition . getScope ( ) ) ; org.springframework.aop.config.RootBeanDefinition . setLazyInit ( org.springframework.aop.config.BeanDefinition . isLazyInit ( ) ) ; org.springframework.aop.config.RootBeanDefinition . setDecoratedDefinition ( org.springframework.aop.config.BeanDefinitionHolder ) ; org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.aop.config.BeanDefinitionHolder ) ; org.springframework.aop.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new ManagedList < java.lang.String > ( ) ) ; org.springframework.aop.config.RootBeanDefinition . setAutowireCandidate ( org.springframework.aop.config.BeanDefinition . isAutowireCandidate ( ) ) ; org.springframework.aop.config.RootBeanDefinition . setPrimary ( org.springframework.aop.config.BeanDefinition . isPrimary ( ) ) ; if ( org.springframework.aop.config.BeanDefinition instanceof AbstractBeanDefinition ) { org.springframework.aop.config.RootBeanDefinition . copyQualifiersFrom ( ( AbstractBeanDefinition ) org.springframework.aop.config.BeanDefinition ) ; } org.springframework.aop.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.aop.config.RootBeanDefinition , java.lang.String ) ; } void ( java.lang.String , org.springframework.aop.config.BeanDefinitionHolder . getBeanDefinition ( ) ) ; return org.springframework.aop.config.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.String java.lang.String , BeanDefinition org.springframework.aop.config.BeanDefinition ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) org.springframework.aop.config.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( STRING ) . getValue ( ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( BeanDefinition org.springframework.aop.config.BeanDefinition ) { return ProxyFactoryBean .class . java.lang.String ( ) . boolean ( org.springframework.aop.config.BeanDefinition . getBeanClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( BeanDefinition org.springframework.aop.config.BeanDefinition ) { return StringUtils . uncapitalize ( ClassUtils . getShortName ( org.springframework.aop.config.BeanDefinition . getBeanClassName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.aop.config.BeanDefinition org.springframework.aop.config.BeanDefinition ( org.w3c.dom.Node org.w3c.dom.Node );  <METHOD_END>
