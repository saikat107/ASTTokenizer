<METHOD_START> public void ( PartTree org.springframework.data.jpa.repository.query.PartTree , ReturnedType org.springframework.data.jpa.repository.query.ReturnedType , CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , ParameterMetadataProvider org.springframework.data.jpa.repository.query.ParameterMetadataProvider ) { super( org.springframework.data.jpa.repository.query.PartTree , org.springframework.data.jpa.repository.query.ReturnedType , org.springframework.data.jpa.repository.query.CriteriaBuilder , org.springframework.data.jpa.repository.query.ParameterMetadataProvider ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> ( CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , ReturnedType org.springframework.data.jpa.repository.query.ReturnedType ) { return org.springframework.data.jpa.repository.query.CriteriaBuilder . createQuery ( org.springframework.data.jpa.repository.query.ReturnedType . getDomainType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> ( Predicate org.springframework.data.jpa.repository.query.Predicate , Sort org.springframework.data.jpa.repository.query.Sort , CriteriaQuery < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> , CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , Root < ? > org.springframework.data.jpa.repository.query.Root<?> ) { CriteriaQuery < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> = org.springframework.data.jpa.repository.query.CriteriaQuery<> . select ( org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.CriteriaQuery<> , org.springframework.data.jpa.repository.query.CriteriaBuilder , org.springframework.data.jpa.repository.query.Root<> ) ) ; return org.springframework.data.jpa.repository.query.Predicate == null ? org.springframework.data.jpa.repository.query.CriteriaQuery<> : org.springframework.data.jpa.repository.query.CriteriaQuery<> . where ( org.springframework.data.jpa.repository.query.Predicate ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static org.springframework.data.jpa.repository.query.Expression org.springframework.data.jpa.repository.query.Expression ( CriteriaQuery < ? > org.springframework.data.jpa.repository.query.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , Root < ? > org.springframework.data.jpa.repository.query.Root<?> ) { return org.springframework.data.jpa.repository.query.CriteriaQuery<> . isDistinct ( ) ? org.springframework.data.jpa.repository.query.CriteriaBuilder . countDistinct ( org.springframework.data.jpa.repository.query.Root<> ) : org.springframework.data.jpa.repository.query.CriteriaBuilder . count ( org.springframework.data.jpa.repository.query.Root<> ) ; }  <METHOD_END>
