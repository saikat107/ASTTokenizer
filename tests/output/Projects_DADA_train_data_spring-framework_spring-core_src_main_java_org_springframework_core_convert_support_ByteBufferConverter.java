<METHOD_START> public void ( ConversionService org.springframework.core.convert.support.ConversionService ) { this . org.springframework.core.convert.support.ConversionService = org.springframework.core.convert.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { boolean boolean = org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ; if ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ) { return ( boolean || boolean ( org.springframework.core.convert.support.TypeDescriptor ) ) ; } return ( boolean && boolean ( org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) || this . org.springframework.core.convert.support.ConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) || this . org.springframework.core.convert.support.ConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { boolean boolean = org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ; if ( java.lang.Object instanceof java.nio.ByteBuffer ) { java.nio.ByteBuffer java.nio.ByteBuffer = ( java.nio.ByteBuffer ) java.lang.Object ; return ( boolean ? java.nio.ByteBuffer . java.nio.ByteBuffer ( ) : java.lang.Object ( java.nio.ByteBuffer , org.springframework.core.convert.support.TypeDescriptor ) ) ; } if ( boolean ) { return java.lang.Object ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.nio.ByteBuffer java.nio.ByteBuffer , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { byte [] byte[] = new byte [ java.nio.ByteBuffer . int ( ) ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; if ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ) { return byte[] ; } return this . org.springframework.core.convert.support.ConversionService . convert ( byte[] , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { byte [] byte[] = ( byte [] ) ( java.lang.Object instanceof byte [] ? java.lang.Object : this . org.springframework.core.convert.support.ConversionService . convert ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] . int ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; return ( ( java.nio.Buffer ) java.nio.ByteBuffer ) . java.nio.Buffer ( ) ; }  <METHOD_END>
