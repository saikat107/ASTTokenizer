<METHOD_START> @ Before public void void ( ) java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { org.springframework.data.solr.core.SolrTemplate = new SolrTemplate ( server ) ; org.springframework.data.solr.core.SolrTemplate . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.solr.core.SolrTemplate . delete ( org.springframework.data.solr.core.Query ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) , ExampleSolrBean .class ) ; Assert . assertFalse ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . isPresent ( ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) , ExampleSolrBean .class ) ; Assert . assertTrue ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . isPresent ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getId ( ) ) ; org.springframework.data.solr.core.SolrTemplate . deleteById ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) , ExampleSolrBean .class ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getId ( ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) , ExampleSolrBean .class ) ; Assert . assertFalse ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . add ( STRING , STRING ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.SolrTemplate . count ( org.springframework.data.solr.core.Query ) ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getId ( ) ) ; Assert . assertEquals ( STRING , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getName ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getPopularity ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setCategory ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . add ( new SimpleUpdateField ( STRING , STRING , UpdateAction . ADD ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.SolrTemplate . count ( org.springframework.data.solr.core.Query ) ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getId ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getName ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getName ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getPopularity ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . add ( new SimpleUpdateField ( STRING , NUMBER , UpdateAction . INC ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.SolrTemplate . count ( org.springframework.data.solr.core.Query ) ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertTrue ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . isPresent ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getId ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getName ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getName ( ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.SolrTemplate . count ( org.springframework.data.solr.core.Query ) ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertTrue ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . isPresent ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getId ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getName ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getName ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getPopularity ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.ExampleSolrBean . setCategory ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.SolrTemplate . count ( org.springframework.data.solr.core.Query ) ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertTrue ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . isPresent ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getId ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getName ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getName ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getPopularity ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . addValueToField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.SolrTemplate . count ( org.springframework.data.solr.core.Query ) ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getId ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean . getCategory ( ) . get ( NUMBER ) , STRING , STRING , STRING ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getName ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getName ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getPopularity ( ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( org.springframework.data.solr.core.ExampleSolrBean ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; java.util.List<org.springframework.data.solr.core.Update> < Update > java.util.List<org.springframework.data.solr.core.Update> = new java.util.ArrayList<org.springframework.data.solr.core.Update> <> ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , java.lang.Integer . java.lang.String ( int ) ) ; org.springframework.data.solr.core.PartialUpdate . add ( STRING , NUMBER ) ; java.util.List<org.springframework.data.solr.core.Update> . add ( org.springframework.data.solr.core.PartialUpdate ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.Update> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.SolrTemplate . count ( org.springframework.data.solr.core.Query ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getNumberOfElements ( ) ) ; for ( ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> ) { Assert . assertEquals ( STRING , STRING + org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , org.springframework.data.solr.core.ExampleSolrBean . getCategory ( ) . get ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setCategory ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , NUMBER ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , null ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; Assert . assertNull ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setCategory ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , NUMBER ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , null ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; Assert . assertNull ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getCategory ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . setVersion ( NUMBER ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . get ( ) . getPopularity ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = UncategorizedSolrException .class ) public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; PartialUpdate org.springframework.data.solr.core.PartialUpdate = new PartialUpdate ( STRING , DEFAULT_BEAN_ID ) ; org.springframework.data.solr.core.PartialUpdate . setVersion ( NUMBER ) ; org.springframework.data.solr.core.PartialUpdate . setValueOfField ( STRING , NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.PartialUpdate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.core.SolrServerException , java.io.IOException { org.springframework.data.solr.core.SolrTemplate . ping ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createDefaultExampleBean ( ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) , ExampleSolrBean .class ) ; Assert . assertFalse ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . isPresent ( ) ) ; org.springframework.data.solr.core.SolrTemplate . rollback ( ) ; java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) , ExampleSolrBean .class ) ; Assert . assertFalse ( java.util.Optional<org.springframework.data.solr.core.ExampleSolrBean> . isPresent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( Criteria . WILDCARD ) . expression ( Criteria . WILDCARD ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetOnField ( STRING ) . addFacetOnField ( STRING ) . setFacetLimit ( NUMBER ) ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > page = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.FacetQuery , ExampleSolrBean .class ) ; for ( Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> : page . getFacetResultPages ( ) ) { Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getNumberOfElements ( ) ) ; } Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertNotNull ( org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertNotNull ( org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { final ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ; org.springframework.data.solr.core.ExampleSolrBean . setLastModified ( new java.util.GregorianCalendar ( NUMBER , java.util.Calendar . int , ( int + NUMBER ) / NUMBER ) . java.util.Date ( ) ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( org.springframework.data.solr.core.ExampleSolrBean ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; final FieldWithDateRangeParameters org.springframework.data.solr.core.FieldWithDateRangeParameters = new FieldWithDateRangeParameters ( STRING , new java.util.GregorianCalendar ( NUMBER , int , NUMBER ) . java.util.Date ( ) , new java.util.GregorianCalendar ( NUMBER , int , NUMBER ) . java.util.Date ( ) , STRING ) . setOther ( FacetRangeOther . ALL ) . setInclude ( FacetRangeInclude . LOWER ) ; FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetByRange ( org.springframework.data.solr.core.FieldWithDateRangeParameters ) . setFacetLimit ( NUMBER ) . setFacetMinCount ( NUMBER ) . setFacetSort ( FacetSort . COUNT ) . setPageable ( new PageRequest ( NUMBER , NUMBER ) ) ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > page = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.FacetQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( FacetRangeInclude . LOWER , org.springframework.data.solr.core.FieldWithDateRangeParameters . getQueryParameterValue ( FACET_RANGE_INCLUDE ) ) ; for ( Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> : page . getFacetResultPages ( ) ) { Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getNumberOfElements ( ) ) ; } Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertNotNull ( org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { final ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( ( int + NUMBER ) * NUMBER ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( org.springframework.data.solr.core.ExampleSolrBean ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; final FieldWithNumericRangeParameters org.springframework.data.solr.core.FieldWithNumericRangeParameters = new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) . setOther ( FacetParams . FacetRangeOther . ALL ) . setHardEnd ( false ) . setInclude ( FacetRangeInclude . LOWER ) ; FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetByRange ( org.springframework.data.solr.core.FieldWithNumericRangeParameters ) . setFacetLimit ( NUMBER ) . setFacetMinCount ( NUMBER ) . setFacetSort ( FacetSort . COUNT ) ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > page = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.FacetQuery , ExampleSolrBean .class ) ; for ( Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> : page . getFacetResultPages ( ) ) { Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getNumberOfElements ( ) ) ; } Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertNotNull ( org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( Criteria . WILDCARD ) . expression ( Criteria . WILDCARD ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetOnPivot ( STRING , STRING ) ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > page = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.FacetQuery , ExampleSolrBean .class ) ; java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> = page . getPivot ( STRING ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . size ( ) ) ; for ( FacetPivotFieldEntry org.springframework.data.solr.core.FacetPivotFieldEntry : java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> ) { Assert . assertNotNull ( org.springframework.data.solr.core.FacetPivotFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetPivotFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetPivotFieldEntry . getValueCount ( ) ) ; for ( FacetPivotFieldEntry org.springframework.data.solr.core.FacetPivotFieldEntry : org.springframework.data.solr.core.FacetPivotFieldEntry . getPivot ( ) ) { Assert . assertNotNull ( org.springframework.data.solr.core.FacetPivotFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetPivotFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetPivotFieldEntry . getValueCount ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ; org.springframework.data.solr.core.ExampleSolrBean . setInStock ( int % NUMBER == NUMBER ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( org.springframework.data.solr.core.ExampleSolrBean ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( new FacetOptions ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) , new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > page = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.FacetQuery , ExampleSolrBean .class ) ; Page < FacetQueryEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetQueryEntry> = page . getFacetQueryResult ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetQueryEntry> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetQueryEntry> . getContent ( ) . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( NUMBER , page . getAllFacets ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , STRING ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , STRING ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , STRING ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , STRING ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( Criteria . WILDCARD ) . expression ( Criteria . WILDCARD ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetOnField ( STRING ) . setFacetLimit ( NUMBER ) . setFacetPrefix ( STRING ) ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > page = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.FacetQuery , ExampleSolrBean .class ) ; Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , STRING ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , STRING ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , STRING ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , STRING ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( Criteria . WILDCARD ) . expression ( Criteria . WILDCARD ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetOnField ( new FieldWithFacetParameters ( STRING ) . setPrefix ( STRING ) ) . addFacetOnField ( STRING ) . setFacetPrefix ( STRING ) . setFacetLimit ( NUMBER ) ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > page = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.FacetQuery , ExampleSolrBean .class ) ; Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; FacetAndHighlightQuery org.springframework.data.solr.core.FacetAndHighlightQuery = new SimpleFacetAndHighlightQuery ( new Criteria ( Criteria . WILDCARD ) . expression ( Criteria . WILDCARD ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetOnField ( STRING ) . addFacetOnField ( STRING ) . setFacetLimit ( NUMBER ) ) ; org.springframework.data.solr.core.FacetAndHighlightQuery . setHighlightOptions ( new HighlightOptions ( ) . addField ( STRING ) ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > page = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.FacetAndHighlightQuery , ExampleSolrBean .class ) ; for ( Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> : page . getFacetResultPages ( ) ) { Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getNumberOfElements ( ) ) ; } Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertNotNull ( org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = page . getFacetResultPage ( new SimpleField ( STRING ) ) ; for ( FacetFieldEntry org.springframework.data.solr.core.FacetFieldEntry : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> ) { Assert . assertNotNull ( org.springframework.data.solr.core.FacetFieldEntry . getValue ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FacetFieldEntry . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FacetFieldEntry . getValueCount ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) . addSort ( new Sort ( Sort . Direction . DESC , STRING ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) ; for ( int int = NUMBER ; int < org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ; int ++ ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( int ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) < java.lang.Long . java.lang.Long ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ) ; org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.ExampleSolrBean ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ; org.springframework.data.solr.core.ExampleSolrBean . setInStock ( int % NUMBER == NUMBER ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( org.springframework.data.solr.core.ExampleSolrBean ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) . addSort ( new Sort ( Sort . Direction . DESC , STRING ) ) . addSort ( new Sort ( Sort . Direction . ASC , STRING ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( int ) ; Assert . assertTrue ( org.springframework.data.solr.core.ExampleSolrBean . isInStock ( ) ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) > java.lang.Long . java.lang.Long ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ) ; org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.ExampleSolrBean ; } org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) ; for ( int int = NUMBER ; int < org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ; int ++ ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( int ) ; Assert . assertFalse ( org.springframework.data.solr.core.ExampleSolrBean . isInStock ( ) ) ; Assert . assertTrue ( java.lang.Long . java.lang.Long ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) > java.lang.Long . java.lang.Long ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ) ; org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.ExampleSolrBean ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList<org.springframework.data.solr.core.ExampleSolrBean> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = createExampleBeanWithId ( java.lang.Integer . java.lang.String ( int ) ) ; org.springframework.data.solr.core.ExampleSolrBean . setInStock ( int % NUMBER == NUMBER ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . add ( org.springframework.data.solr.core.ExampleSolrBean ) ; } org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefaultOperator ( Operator . AND ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefaultOperator ( Operator . OR ) ; org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = createBeansWithIdAndPrefix ( NUMBER , STRING ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new Criteria ( STRING ) . in ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefType ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setDefaultOperator ( Operator . OR ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = createBeansWithIdAndPrefix ( NUMBER , STRING ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . get ( NUMBER ) . setInStock ( false ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . get ( NUMBER ) . setInStock ( true ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.List<org.springframework.data.solr.core.ExampleSolrBean> ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new Criteria ( STRING ) . in ( STRING , STRING ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ) ; org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new Criteria ( STRING ) . in ( STRING , STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setRequestHandler ( STRING ) ; org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setManufacturerId ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setJoin ( Join . from ( STRING ) . to ( STRING ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setManufacturerId ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setJoin ( Join . from ( STRING ) . fromIndex ( STRING ) . to ( STRING ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleHighlightQuery . setHighlightOptions ( new HighlightOptions ( ) ) ; HighlightQueryResult < ExampleSolrBean > org.springframework.data.solr.core.HighlightQueryResult<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForHighlightPage ( org.springframework.data.solr.core.SimpleHighlightQuery , ExampleSolrBean .class ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.HighlightQueryResult<org.springframework.data.solr.core.ExampleSolrBean> . getHighlighted ( ) . size ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.HighlightQueryResult<org.springframework.data.solr.core.ExampleSolrBean> . getHighlighted ( ) . get ( NUMBER ) . getHighlights ( ) . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.HighlightQueryResult<org.springframework.data.solr.core.ExampleSolrBean> . getHighlighted ( ) . get ( NUMBER ) . getHighlights ( ) . get ( NUMBER ) . getSnipplets ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsQuery org.springframework.data.solr.core.TermsQuery = SimpleTermsQuery . queryBuilder ( ) . fields ( STRING ) . build ( ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; TermsPage org.springframework.data.solr.core.TermsPage = org.springframework.data.solr.core.SolrTemplate . queryForTermsPage ( org.springframework.data.solr.core.TermsQuery ) ; java.util.ArrayList<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > java.util.ArrayList<org.springframework.data.solr.core.TermsFieldEntry> = Lists . newArrayList ( org.springframework.data.solr.core.TermsPage . getTermsForField ( STRING ) ) ; Assert . assertEquals ( STRING , java.util.ArrayList<org.springframework.data.solr.core.TermsFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , java.util.ArrayList<org.springframework.data.solr.core.TermsFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.ArrayList<org.springframework.data.solr.core.TermsFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , java.util.ArrayList<org.springframework.data.solr.core.TermsFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.ArrayList<org.springframework.data.solr.core.TermsFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , java.util.ArrayList<org.springframework.data.solr.core.TermsFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( STRING ) . addFilterQuery ( new SimpleFilterQuery ( new Criteria ( QueryFunction . query ( STRING ) ) ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertThat ( org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) . getId ( ) , equalTo ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( new Criteria ( QueryFunction . query ( STRING ) ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; Assert . assertThat ( org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> . getContent ( ) . get ( NUMBER ) . getId ( ) , is ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setStore ( STRING ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setStore ( STRING ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.Query . addProjectionOnField ( new DistanceField ( STRING , STRING , new Point ( NUMBER , - NUMBER ) ) ) ; Page < ExampleSolrBean > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForPage ( org.springframework.data.solr.core.Query , ExampleSolrBean .class ) ; for ( ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean : org.springframework.data.solr.core.Page<org.springframework.data.solr.core.ExampleSolrBean> ) { Assert . assertThat ( org.springframework.data.solr.core.ExampleSolrBean . getDistance ( ) , notNullValue ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { org.springframework.data.solr.core.SolrTemplate . saveBeans ( createBeansWithId ( NUMBER ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Cursor < ExampleSolrBean > org.springframework.data.solr.core.Cursor<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForCursor ( new SimpleQuery ( STRING ) . addSort ( new Sort ( Direction . DESC , STRING ) ) , ExampleSolrBean .class ) ; int int = NUMBER ; while ( org.springframework.data.solr.core.Cursor<org.springframework.data.solr.core.ExampleSolrBean> . hasNext ( ) ) { org.springframework.data.solr.core.Cursor<org.springframework.data.solr.core.ExampleSolrBean> . next ( ) ; int ++ ; } org.springframework.data.solr.core.Cursor<org.springframework.data.solr.core.ExampleSolrBean> . close ( ) ; Assert . assertThat ( int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING , NUMBER , true ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING , NUMBER , true ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; Function org.springframework.data.solr.core.Function = IfFunction . when ( STRING ) . then ( STRING ) . otherwise ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( STRING ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; GroupOptions org.springframework.data.solr.core.GroupOptions = new GroupOptions ( ) ; org.springframework.data.solr.core.SimpleQuery . setGroupOptions ( org.springframework.data.solr.core.GroupOptions ) ; org.springframework.data.solr.core.GroupOptions . addSort ( new Sort ( STRING , STRING ) ) ; org.springframework.data.solr.core.GroupOptions . addGroupByField ( STRING ) ; org.springframework.data.solr.core.GroupOptions . addGroupByFunction ( org.springframework.data.solr.core.Function ) ; org.springframework.data.solr.core.GroupOptions . addGroupByQuery ( org.springframework.data.solr.core.Query ) ; org.springframework.data.solr.core.GroupOptions . addGroupByQuery ( org.springframework.data.solr.core.Query ) ; org.springframework.data.solr.core.GroupOptions . setLimit ( NUMBER ) ; GroupPage < ExampleSolrBean > org.springframework.data.solr.core.GroupPage<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForGroupPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; GroupResult < ExampleSolrBean > org.springframework.data.solr.core.GroupResult<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.GroupPage<org.springframework.data.solr.core.ExampleSolrBean> . getGroupResult ( STRING ) ; GroupResult < ExampleSolrBean > org.springframework.data.solr.core.GroupResult<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.GroupPage<org.springframework.data.solr.core.ExampleSolrBean> . getGroupResult ( org.springframework.data.solr.core.Function ) ; GroupResult < ExampleSolrBean > org.springframework.data.solr.core.GroupResult<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.GroupPage<org.springframework.data.solr.core.ExampleSolrBean> . getGroupResult ( org.springframework.data.solr.core.Query ) ; GroupResult < ExampleSolrBean > org.springframework.data.solr.core.GroupResult<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.GroupPage<org.springframework.data.solr.core.ExampleSolrBean> . getGroupResult ( org.springframework.data.solr.core.Query ) ; Page < GroupEntry < ExampleSolrBean > > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> = org.springframework.data.solr.core.GroupResult<org.springframework.data.solr.core.ExampleSolrBean> . getGroupEntries ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . getTotalElements ( ) ) ; java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> < GroupEntry < ExampleSolrBean > > java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . getContent ( ) ; void ( java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . get ( NUMBER ) , NUMBER , STRING , NUMBER , STRING , STRING ) ; void ( java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . get ( NUMBER ) , NUMBER , STRING , NUMBER , STRING ) ; void ( java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . get ( NUMBER ) , NUMBER , STRING , NUMBER , STRING ) ; Page < GroupEntry < ExampleSolrBean > > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> = org.springframework.data.solr.core.GroupResult<org.springframework.data.solr.core.ExampleSolrBean> . getGroupEntries ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . getNumberOfElements ( ) ) ; java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> < GroupEntry < ExampleSolrBean > > java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . getContent ( ) ; void ( java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . get ( NUMBER ) , NUMBER , STRING , NUMBER , STRING , STRING ) ; void ( java.util.List<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . get ( NUMBER ) , NUMBER , STRING , NUMBER , STRING , STRING ) ; Page < GroupEntry < ExampleSolrBean > > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> = org.springframework.data.solr.core.GroupResult<org.springframework.data.solr.core.ExampleSolrBean> . getGroupEntries ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . getNumberOfElements ( ) ) ; GroupEntry < ExampleSolrBean > org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . getContent ( ) . get ( NUMBER ) ; void ( org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> , NUMBER , STRING , NUMBER , STRING , STRING ) ; assertTrue ( org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> . getResult ( ) . hasNext ( ) ) ; Page < GroupEntry < ExampleSolrBean > > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> = org.springframework.data.solr.core.GroupResult<org.springframework.data.solr.core.ExampleSolrBean> . getGroupEntries ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . getNumberOfElements ( ) ) ; GroupEntry < ExampleSolrBean > org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean>> . getContent ( ) . get ( NUMBER ) ; void ( org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> , NUMBER , STRING , NUMBER , STRING ) ; assertFalse ( org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> . getResult ( ) . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING , NUMBER , true ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING , NUMBER , true ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING , NUMBER , true ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING , NUMBER , false ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING , NUMBER , false ) ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( new ExampleSolrBean ( STRING , STRING , STRING , NUMBER , true ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleFacetQuery org.springframework.data.solr.core.SimpleFacetQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) ; GroupOptions org.springframework.data.solr.core.GroupOptions = new GroupOptions ( ) ; org.springframework.data.solr.core.SimpleFacetQuery . setGroupOptions ( org.springframework.data.solr.core.GroupOptions ) ; org.springframework.data.solr.core.SimpleFacetQuery . setFacetOptions ( new FacetOptions ( STRING ) ) ; org.springframework.data.solr.core.GroupOptions . addGroupByField ( STRING ) ; org.springframework.data.solr.core.GroupOptions . setGroupFacets ( true ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > groupResultPage = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.SimpleFacetQuery , ExampleSolrBean .class ) ; Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = groupResultPage . getFacetResultPage ( STRING ) ; java.util.List<org.springframework.data.solr.core.FacetFieldEntry> < FacetFieldEntry > java.util.List<org.springframework.data.solr.core.FacetFieldEntry> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getContent ( ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( GroupEntry < ExampleSolrBean > org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> , java.lang.String ... java.lang.String[] ) { for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { Assert . assertEquals ( java.lang.String[] [ int ] , org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> . getResult ( ) . getContent ( ) . get ( int ) . getId ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( GroupEntry < ExampleSolrBean > org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> , long long , java.lang.String java.lang.String , int int , java.lang.String ... java.lang.String[] ) { Assert . assertEquals ( long , org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> . getResult ( ) . getTotalElements ( ) ) ; Assert . assertEquals ( java.lang.String , org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> . getGroupValue ( ) ) ; Assert . assertEquals ( int , org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> . getResult ( ) . getContent ( ) . size ( ) ) ; void ( org.springframework.data.solr.core.GroupEntry<org.springframework.data.solr.core.ExampleSolrBean> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = org.springframework.data.solr.core.SolrTemplate . getById ( STRING , ExampleSolrBean .class ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , org.springframework.data.solr.core.ExampleSolrBean . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays .< java.lang.String > java.util.List<java.lang.String> ( STRING , STRING ) ; java.util.Collection<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.Collection<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . getById ( java.util.List<java.lang.String> , ExampleSolrBean .class ) ; java.util.List<org.springframework.data.solr.core.ExampleSolrBean> < ExampleSolrBean > java.util.List<org.springframework.data.solr.core.ExampleSolrBean> = new java.util.ArrayList <> ( java.util.Collection<org.springframework.data.solr.core.ExampleSolrBean> ) ; Assert . assertEquals ( NUMBER , java.util.Collection<org.springframework.data.solr.core.ExampleSolrBean> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . get ( NUMBER ) . getId ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ExampleSolrBean . getId ( ) , java.util.List<org.springframework.data.solr.core.ExampleSolrBean> . get ( NUMBER ) . getId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( STRING ) . addFacet ( STRING ) ; void ( org.springframework.data.solr.core.StatsOptions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( STRING ) . addSelectiveFacet ( STRING ) ; void ( org.springframework.data.solr.core.StatsOptions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setPrice ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setPrice ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setPrice ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( STRING ) . addField ( STRING ) . setSelectiveCalcDistinct ( true ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; StatsPage < ExampleSolrBean > org.springframework.data.solr.core.StatsPage<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForStatsPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; FieldStatsResult org.springframework.data.solr.core.FieldStatsResult = org.springframework.data.solr.core.StatsPage<org.springframework.data.solr.core.ExampleSolrBean> . getFieldStatsResult ( STRING ) ; FieldStatsResult org.springframework.data.solr.core.FieldStatsResult = org.springframework.data.solr.core.StatsPage<org.springframework.data.solr.core.ExampleSolrBean> . getFieldStatsResult ( STRING ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getDistinctCount ( ) ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = org.springframework.data.solr.core.FieldStatsResult . getDistinctValues ( ) ; Assert . assertEquals ( NUMBER , java.util.Collection<java.lang.Object> . int ( ) ) ; Assert . assertTrue ( java.util.Collection<java.lang.Object> . boolean ( NUMBER ) ) ; Assert . assertTrue ( java.util.Collection<java.lang.Object> . boolean ( NUMBER ) ) ; Assert . assertEquals ( null , org.springframework.data.solr.core.FieldStatsResult . getDistinctCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setPrice ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setPrice ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setPrice ( NUMBER ) ; org.springframework.data.solr.core.ExampleSolrBean . setPopularity ( NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( ) . addFacetByRange ( new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) . setInclude ( FacetRangeInclude . ALL ) ) ; org.springframework.data.solr.core.FacetOptions . setFacetMinCount ( NUMBER ) ; SimpleFacetQuery org.springframework.data.solr.core.SimpleFacetQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleFacetQuery . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; org . springframework . data . solr . core . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query . org.springframework.data.solr.core.query < ExampleSolrBean > statResultPage = org.springframework.data.solr.core.SolrTemplate . queryForFacetPage ( org.springframework.data.solr.core.SimpleFacetQuery , ExampleSolrBean .class ) ; Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = statResultPage . getRangeFacetResultPage ( STRING ) ; java.util.List<org.springframework.data.solr.core.FacetFieldEntry> < FacetFieldEntry > java.util.List<org.springframework.data.solr.core.FacetFieldEntry> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getContent ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getTotalElements ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.SolrTemplate . execute ( ( SolrCallback < java.lang.Object > ) solrClient -> { SolrInputDocument sid = new SolrInputDocument ( ) ; sid . addField ( STRING , STRING ) ; sid . addField ( STRING , STRING ) ; solrClient . add ( sid ) . getStatus ( ) ; return solrClient . commit ( ) ; } ) ; java.util.Optional<org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc> < org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc > java.util.Optional<org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( STRING ) , org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc .class ) ; assertThat ( java.util.Optional<org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc> . org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc ( ) . java.lang.String , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.SolrTemplate . execute ( ( SolrCallback < java.lang.Object > ) solrClient -> { SolrInputDocument sid = new SolrInputDocument ( ) ; sid . addField ( STRING , STRING ) ; sid . addField ( STRING , new String [] { STRING , STRING } ) ; solrClient . add ( sid ) . getStatus ( ) ; return solrClient . commit ( ) ; } ) ; org.springframework.data.solr.core.ExpectedException . expect ( MappingException .class ) ; org.springframework.data.solr.core.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.solr.core.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( STRING ) , org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.SolrTemplate . execute ( ( SolrCallback < java.lang.Object > ) solrClient -> { SolrInputDocument sid = new SolrInputDocument ( ) ; sid . addField ( STRING , STRING ) ; solrClient . add ( sid ) . getStatus ( ) ; return solrClient . commit ( ) ; } ) ; java.util.Optional<org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc> < org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc > java.util.Optional<org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc> = org.springframework.data.solr.core.SolrTemplate . queryForObject ( new SimpleQuery ( STRING ) , org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc .class ) ; assertThat ( java.util.Optional<org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc> . org.springframework.data.solr.core.ITestSolrTemplate.SomeDoc ( ) . java.lang.String , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.SolrTemplate . saveBean ( org.springframework.data.solr.core.ExampleSolrBean ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setSpellcheckOptions ( SpellcheckOptions . spellcheck ( ) ) ; org.springframework.data.solr.core.SimpleQuery . setRequestHandler ( STRING ) ; SpellcheckedPage < ExampleSolrBean > org.springframework.data.solr.core.SpellcheckedPage<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . query ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; Assert . assertThat ( org.springframework.data.solr.core.SpellcheckedPage<org.springframework.data.solr.core.ExampleSolrBean> . hasContent ( ) , Is . is ( false ) ) ; Assert . assertThat ( org.springframework.data.solr.core.SpellcheckedPage<org.springframework.data.solr.core.ExampleSolrBean> . getSuggestions ( ) . size ( ) , Is . is ( Matchers . greaterThan ( NUMBER ) ) ) ; Assert . assertThat ( org.springframework.data.solr.core.SpellcheckedPage<org.springframework.data.solr.core.ExampleSolrBean> . getSuggestions ( ) , Matchers . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final HttpSolrClient org.springframework.data.solr.core.HttpSolrClient = new HttpSolrClient ( STRING ) ; SolrTemplate org.springframework.data.solr.core.SolrTemplate = new SolrTemplate ( new HttpSolrClientFactory ( org.springframework.data.solr.core.HttpSolrClient ) ) ; org.springframework.data.solr.core.SolrTemplate . execute ( solrClient -> { Assert . assertThat ( ( ( HttpSolrClient ) solrClient ) . getBaseURL ( ) , is ( STRING ) ) ; return null ; } ) ; }  <METHOD_END>
<METHOD_START> private void void ( StatsOptions org.springframework.data.solr.core.StatsOptions ) { ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setPrice ( NUMBER ) ; ExampleSolrBean org.springframework.data.solr.core.ExampleSolrBean = new ExampleSolrBean ( STRING , STRING , null ) ; org.springframework.data.solr.core.ExampleSolrBean . setPrice ( NUMBER ) ; org.springframework.data.solr.core.SolrTemplate . saveBeans ( java.util.Arrays . java.util.List ( org.springframework.data.solr.core.ExampleSolrBean , org.springframework.data.solr.core.ExampleSolrBean ) ) ; org.springframework.data.solr.core.SolrTemplate . commit ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; StatsPage < ExampleSolrBean > org.springframework.data.solr.core.StatsPage<org.springframework.data.solr.core.ExampleSolrBean> = org.springframework.data.solr.core.SolrTemplate . queryForStatsPage ( org.springframework.data.solr.core.SimpleQuery , ExampleSolrBean .class ) ; FieldStatsResult org.springframework.data.solr.core.FieldStatsResult = org.springframework.data.solr.core.StatsPage<org.springframework.data.solr.core.ExampleSolrBean> . getFieldStatsResult ( STRING ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getCount ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FieldStatsResult . getMin ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FieldStatsResult . getMax ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getMinAsDouble ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getMaxAsDouble ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FieldStatsResult . getMinAsString ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FieldStatsResult . getMaxAsString ( ) ) ; Assert . assertNull ( org.springframework.data.solr.core.FieldStatsResult . getMinAsDate ( ) ) ; Assert . assertNull ( org.springframework.data.solr.core.FieldStatsResult . getMaxAsDate ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FieldStatsResult . getMean ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FieldStatsResult . getSum ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getMissing ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getStddev ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getSumOfSquares ( ) ) ; java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> < java.lang.String , StatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> = org.springframework.data.solr.core.FieldStatsResult . getFacetStatsResult ( new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> . size ( ) ) ; { StatsResult org.springframework.data.solr.core.StatsResult = java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> . get ( STRING ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.StatsResult . getCount ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.StatsResult . getMin ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.StatsResult . getMax ( ) ) ; } { StatsResult org.springframework.data.solr.core.StatsResult = java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> . get ( STRING ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.StatsResult . getCount ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.StatsResult . getMin ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.StatsResult . getMax ( ) ) ; } }  <METHOD_END>
