<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( HttpMessageConvertersAutoConfiguration .class , org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.RestTemplateConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBeansOfType ( RestTemplate .class ) ) . hasSize ( NUMBER ) ; RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate = this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBean ( RestTemplate .class ) ; java.util.List<org.springframework.boot.autoconfigure.web.client.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.boot.autoconfigure.web.client.HttpMessageConverter<?>> = this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBean ( HttpMessageConverters .class ) . getConverters ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.client.RestTemplate . getMessageConverters ( ) ) . containsExactlyElementsOf ( java.util.List<org.springframework.boot.autoconfigure.web.client.HttpMessageConverter<?>> ) ; assertThat ( org.springframework.boot.autoconfigure.web.client.RestTemplate . getRequestFactory ( ) ) . isInstanceOf ( HttpComponentsClientHttpRequestFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.RestTemplateConfig .class ) ; RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate = this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBean ( RestTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.client.RestTemplate . getMessageConverters ( ) . size ( ) ) . isEqualTo ( new RestTemplate ( ) . getMessageConverters ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.CustomHttpMessageConverter .class , HttpMessageConvertersAutoConfiguration .class , org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.RestTemplateConfig .class ) ; RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate = this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBean ( RestTemplate .class ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; for ( HttpMessageConverter < ? > org.springframework.boot.autoconfigure.web.client.HttpMessageConverter<?> : org.springframework.boot.autoconfigure.web.client.RestTemplate . getMessageConverters ( ) ) { java.util.List<java.lang.Class<?>> . boolean ( org.springframework.boot.autoconfigure.web.client.HttpMessageConverter<> . getClass ( ) ) ; } assertThat ( java.util.List<java.lang.Class<?>> ) . contains ( org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.CustomHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.RestTemplateConfig .class , org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.CustomRestTemplateBuilderConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBeansOfType ( RestTemplate .class ) ) . hasSize ( NUMBER ) ; RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate = this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBean ( RestTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.client.RestTemplate . getMessageConverters ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.web.client.RestTemplate . getMessageConverters ( ) . get ( NUMBER ) ) . isInstanceOf ( org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.CustomHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.RestTemplateCustomizerConfig .class , org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.RestTemplateConfig .class ) ; RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate = this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBean ( RestTemplate .class ) ; RestTemplateCustomizer org.springframework.boot.autoconfigure.web.client.RestTemplateCustomizer = this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . getBean ( RestTemplateCustomizer .class ) ; verify ( org.springframework.boot.autoconfigure.web.client.RestTemplateCustomizer ) . customize ( org.springframework.boot.autoconfigure.web.client.RestTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.DirtyRestTemplateConfig .class ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . register ( RestTemplateAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.web.client.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.client.RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate ( RestTemplateBuilder org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder ) { return org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.client.RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate ( RestTemplateBuilder org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder ) { try { return org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder . build ( ) ; } finally { void ( org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.client.RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate ( RestTemplateBuilder org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder ) { try { return org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder . build ( ) ; } finally { void ( org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder ) ; } }  <METHOD_END>
<METHOD_START> private void void ( RestTemplateBuilder org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder ) { org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder . additionalCustomizers ( new RestTemplateCustomizer ( ) { @ java.lang.Override public void void ( RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate ) { throw new java.lang.IllegalStateException ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RestTemplate org.springframework.boot.autoconfigure.web.client.RestTemplate ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder org.springframework.boot.autoconfigure.web.client.RestTemplateBuilder ( ) { return new RestTemplateBuilder ( ) . messageConverters ( new org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfigurationTests.CustomHttpMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.client.RestTemplateCustomizer org.springframework.boot.autoconfigure.web.client.RestTemplateCustomizer ( ) { return mock ( RestTemplateCustomizer .class ) ; }  <METHOD_END>
