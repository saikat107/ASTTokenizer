<METHOD_START> @ java.lang.Override public javax.naming.Context javax.naming.Context ( java.util.Hashtable<?,?> < ? , ? > java.util.Hashtable<?,?> ) throws javax.naming.NamingException { return org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { try { org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext ( ) . void ( java.lang.String , java.lang.Object ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new java.lang.IllegalStateException ( javax.naming.NamingException ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( ) { org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext ( ) { if ( org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext == null ) { try { org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext = new org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext ( ) ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new java.lang.IllegalStateException ( javax.naming.NamingException ) ; } } return org.springframework.boot.autoconfigure.jndi.TestableInitialContextFactory.TestableContext ; }  <METHOD_END>
<METHOD_START> private void ( ) javax.naming.NamingException { super( true ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws javax.naming.NamingException { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { return this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Hashtable<?,?> < ? , ? > java.util.Hashtable<?,?> ( ) javax.naming.NamingException { return new java.util.Hashtable<java.lang.Object,java.lang.Object> <> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( ) ; }  <METHOD_END>
