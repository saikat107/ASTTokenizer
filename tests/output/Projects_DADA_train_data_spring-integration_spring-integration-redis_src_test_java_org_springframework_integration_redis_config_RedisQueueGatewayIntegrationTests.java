<METHOD_START> public void void ( ) { RedisConnectionFactory org.springframework.integration.redis.config.RedisConnectionFactory = getConnectionFactoryForTest ( ) ; org.springframework.integration.redis.config.RedisConnectionFactory . getConnection ( ) . del ( this . byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.redis.config.DirectChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; Message < ? > org.springframework.integration.redis.config.Message<?> = this . org.springframework.integration.redis.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.config.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { java.lang.Long java.lang.Long = TestUtils . getPropertyValue ( this . org.springframework.integration.redis.config.RedisQueueInboundGateway , STRING , java.lang.Long .class ) ; this . org.springframework.integration.redis.config.RedisQueueInboundGateway . setReceiveTimeout ( NUMBER ) ; this . org.springframework.integration.redis.config.RedisQueueInboundGateway . stop ( ) ; try { this . org.springframework.integration.redis.config.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } finally { this . org.springframework.integration.redis.config.RedisQueueInboundGateway . setReceiveTimeout ( java.lang.Long ) ; this . org.springframework.integration.redis.config.RedisQueueInboundGateway . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.redis.config.RedisQueueInboundGateway . setSerializer ( null ) ; try { this . org.springframework.integration.redis.config.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } finally { this . org.springframework.integration.redis.config.RedisQueueInboundGateway . setSerializer ( new StringRedisSerializer ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { this . org.springframework.integration.redis.config.RedisQueueInboundGateway . setSerializer ( new JdkSerializationRedisSerializer ( ) ) ; this . org.springframework.integration.redis.config.RedisQueueInboundGateway . setExtractPayload ( false ) ; this . org.springframework.integration.redis.config.RedisQueueOutboundGateway . setSerializer ( new JdkSerializationRedisSerializer ( ) ) ; this . org.springframework.integration.redis.config.RedisQueueOutboundGateway . setExtractPayload ( false ) ; this . org.springframework.integration.redis.config.DirectChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; Message < ? > org.springframework.integration.redis.config.Message<?> = this . org.springframework.integration.redis.config.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.config.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.config.Message<> . getPayload ( ) ) ; this . org.springframework.integration.redis.config.RedisQueueInboundGateway . setSerializer ( new StringRedisSerializer ( ) ) ; this . org.springframework.integration.redis.config.RedisQueueInboundGateway . setExtractPayload ( true ) ; this . org.springframework.integration.redis.config.RedisQueueOutboundGateway . setSerializer ( new StringRedisSerializer ( ) ) ; this . org.springframework.integration.redis.config.RedisQueueOutboundGateway . setExtractPayload ( true ) ; }  <METHOD_END>
