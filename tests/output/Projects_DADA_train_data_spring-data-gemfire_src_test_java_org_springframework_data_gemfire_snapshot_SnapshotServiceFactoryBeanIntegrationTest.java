<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.io.File ... java.io.File[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.io.File[] . int ) ; for ( java.io.File java.io.File : java.io.File[] ) { java.util.List<java.lang.String> . boolean ( java.io.File . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.io.File java.io.File = new java.io.File ( STRING ) ; java.io.File [] java.io.File[] = org.springframework.data.gemfire.snapshot.SnapshotServiceAdapterSupport . handleFileLocation ( java.io.File ) ; assertThat ( java.io.File[] , is ( notNullValue ( ) ) ) ; assertThat ( java.io.File[] . int , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.io.File[] [ NUMBER ] , is ( equalTo ( java.io.File ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = null ; try { java.io.File java.io.File = new ClassPathResource ( STRING ) . getFile ( ) ; java.io.File [] java.io.File[] = org.springframework.data.gemfire.snapshot.SnapshotServiceAdapterSupport . handleFileLocation ( java.io.File ) ; assertThat ( java.io.File[] , is ( notNullValue ( ) ) ) ; assertThat ( java.io.File[] . int , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.List<java.lang.String> ( java.io.File[] ) . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) , is ( true ) ) ; java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) , java.io.File . java.lang.String ( ) . java.lang.String ( STRING , STRING ) ) ; assertThat ( java.io.File . boolean ( ) , is ( true ) ) ; assertThat ( java.io.File . java.io.File[] ( FileSystemUtils . FileOnlyFilter . INSTANCE ) , is ( equalTo ( java.io.File[] ) ) ) ; } finally { if ( java.io.File != null && java.io.File . boolean ( ) ) { FileSystemUtils . deleteRecursive ( java.io.File ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.File [] handleLocation ( final SnapshotServiceFactoryBean . SnapshotServiceFactoryBean < K , V > configuration ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
