<METHOD_START> public void void ( Resource ... org.springframework.web.reactive.resource.Resource[] ) { this . org.springframework.web.reactive.resource.Resource[] = org.springframework.web.reactive.resource.Resource[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.Resource [] org.springframework.web.reactive.resource.Resource[] ( ) { return this . org.springframework.web.reactive.resource.Resource[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String java.lang.String , java.util.List<? extends org.springframework.web.reactive.resource.Resource> < ? extends Resource > java.util.List<? extends org.springframework.web.reactive.resource.Resource> , ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ) { return org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( java.lang.String , java.util.List<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.resource.Mono<java.lang.String> < java.lang.String > org.springframework.web.reactive.resource.Mono<java.lang.String> ( java.lang.String java.lang.String , java.util.List<? extends org.springframework.web.reactive.resource.Resource> < ? extends Resource > java.util.List<? extends org.springframework.web.reactive.resource.Resource> , ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ) { if ( StringUtils . hasText ( java.lang.String ) ) { return org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( java.lang.String , java.util.List<> ) . map ( resource -> path ) ; } else { return Mono . empty ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( java.lang.String java.lang.String , java.util.List<? extends org.springframework.web.reactive.resource.Resource> < ? extends Resource > java.util.List<? extends org.springframework.web.reactive.resource.Resource> ) { return Flux . fromIterable ( java.util.List<> ) . concatMap ( location -> getResource ( resourcePath , location ) ) . next ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( java.lang.String java.lang.String , Resource org.springframework.web.reactive.resource.Resource ) { try { Resource org.springframework.web.reactive.resource.Resource = org.springframework.web.reactive.resource.Resource . createRelative ( java.lang.String ) ; if ( org.springframework.web.reactive.resource.Resource . exists ( ) && org.springframework.web.reactive.resource.Resource . isReadable ( ) ) { if ( boolean ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.reactive.resource.Resource ) ; } return Mono . just ( org.springframework.web.reactive.resource.Resource ) ; } else if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING + STRING + org.springframework.web.reactive.resource.Resource . getURL ( ) + STRING + STRING + org.springframework.web.reactive.resource.Resource . getURL ( ) + STRING + STRING + java.util.Arrays . java.util.List ( org.springframework.web.reactive.resource.Resource[] ( ) ) ) ; } } else if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.reactive.resource.Resource ) ; } return Mono . empty ( ) ; } catch ( java.io.IOException java.io.IOException ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.reactive.resource.Resource , java.io.IOException ) ; } return Mono . error ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Resource org.springframework.web.reactive.resource.Resource , Resource org.springframework.web.reactive.resource.Resource ) throws java.io.IOException { if ( boolean ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ) { return true ; } if ( org.springframework.web.reactive.resource.Resource[] ( ) != null ) { for ( Resource org.springframework.web.reactive.resource.Resource : org.springframework.web.reactive.resource.Resource[] ( ) ) { if ( boolean ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Resource org.springframework.web.reactive.resource.Resource , Resource org.springframework.web.reactive.resource.Resource ) throws java.io.IOException { if ( org.springframework.web.reactive.resource.Resource . getClass ( ) != org.springframework.web.reactive.resource.Resource . getClass ( ) ) { return false ; } java.lang.String java.lang.String ; java.lang.String java.lang.String ; if ( org.springframework.web.reactive.resource.Resource instanceof UrlResource ) { java.lang.String = org.springframework.web.reactive.resource.Resource . getURL ( ) . toExternalForm ( ) ; java.lang.String = StringUtils . cleanPath ( org.springframework.web.reactive.resource.Resource . getURL ( ) . toString ( ) ) ; } else if ( org.springframework.web.reactive.resource.Resource instanceof ClassPathResource ) { java.lang.String = ( ( ClassPathResource ) org.springframework.web.reactive.resource.Resource ) . getPath ( ) ; java.lang.String = StringUtils . cleanPath ( ( ( ClassPathResource ) org.springframework.web.reactive.resource.Resource ) . getPath ( ) ) ; } else { java.lang.String = org.springframework.web.reactive.resource.Resource . getURL ( ) . getPath ( ) ; java.lang.String = StringUtils . cleanPath ( org.springframework.web.reactive.resource.Resource . getURL ( ) . getPath ( ) ) ; } if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } java.lang.String = ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( ) ? java.lang.String : java.lang.String + STRING ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { return false ; } if ( java.lang.String . boolean ( STRING ) ) { if ( java.net.URLDecoder . java.lang.String ( java.lang.String , STRING ) . boolean ( STRING ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String ) ; } return false ; } } return true ; }  <METHOD_END>
