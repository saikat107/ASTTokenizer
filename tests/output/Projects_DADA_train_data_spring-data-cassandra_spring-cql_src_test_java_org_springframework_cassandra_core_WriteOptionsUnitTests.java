<METHOD_START> @ Test public void void ( ) { WriteOptions org.springframework.cassandra.core.WriteOptions = WriteOptions . builder ( ) . consistencyLevel ( com . datastax . driver . core . ConsistencyLevel . ANY ) . ttl ( NUMBER ) . retryPolicy ( RetryPolicy . DEFAULT ) . readTimeout ( NUMBER ) . fetchSize ( NUMBER ) . withTracing ( ) . build ( ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getTtl ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getRetryPolicy ( ) ) . isEqualTo ( RetryPolicy . DEFAULT ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getConsistencyLevel ( ) ) . isNull ( ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getDriverConsistencyLevel ( ) ) . isEqualTo ( com . datastax . driver . core . ConsistencyLevel . ANY ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getReadTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getFetchSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getTracing ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WriteOptions org.springframework.cassandra.core.WriteOptions = WriteOptions . builder ( ) . readTimeout ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) . build ( ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getReadTimeout ( ) ) . isEqualTo ( NUMBER * NUMBER ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getFetchSize ( ) ) . isNull ( ) ; assertThat ( org.springframework.cassandra.core.WriteOptions . getTracing ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) . build ( ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) ) . isNull ( ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getDriverRetryPolicy ( ) ) . isEqualTo ( FallthroughRetryPolicy . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryOptions org.springframework.cassandra.core.QueryOptions = QueryOptions . builder ( ) . retryPolicy ( RetryPolicy . DOWNGRADING_CONSISTENCY ) . build ( ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getRetryPolicy ( ) ) . isEqualTo ( RetryPolicy . DOWNGRADING_CONSISTENCY ) ; assertThat ( org.springframework.cassandra.core.QueryOptions . getDriverRetryPolicy ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { WriteOptions . builder ( ) . retryPolicy ( RetryPolicy . DEFAULT ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { WriteOptions . builder ( ) . retryPolicy ( FallthroughRetryPolicy . INSTANCE ) . retryPolicy ( RetryPolicy . DEFAULT ) ; }  <METHOD_END>
