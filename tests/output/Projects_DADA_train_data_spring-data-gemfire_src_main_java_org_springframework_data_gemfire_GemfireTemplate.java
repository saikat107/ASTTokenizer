<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public < K , V > void ( Region < K , V > org.springframework.data.gemfire.Region<K,V> ) { setRegion ( org.springframework.data.gemfire.Region<K,V> ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. afterPropertiesSet ( ) ; org.springframework.data.gemfire.Region<?,?> = org.springframework.data.gemfire.Region ( getRegion ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return getRegion ( ) . containsKey ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return getRegion ( ) . containsKeyOnServer ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return getRegion ( ) . containsValue ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return getRegion ( ) . containsValueForKey ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > void void ( K K , V V ) { try { getRegion ( ) . create ( K , V ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > V V ( K K ) { try { return this .< K , V > getRegion ( ) . get ( K ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > java.util.Map<K,V> < K , V > java.util.Map<K,V> ( java.util.Collection<?> < ? > java.util.Collection<?> ) { try { return this .< K , V > getRegion ( ) . getAll ( java.util.Collection<> ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > V V ( K K , V V ) { try { return this .< K , V > getRegion ( ) . put ( K , V ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > void void ( java.util.Map<? extends K,? extends V> < ? extends K , ? extends V > java.util.Map<? extends K,? extends V> ) { try { this .< K , V > getRegion ( ) . putAll ( java.util.Map<,> ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > V V ( K K , V V ) { try { return this .< K , V > getRegion ( ) . putIfAbsent ( K , V ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > V V ( K K ) { try { return this .< K , V > getRegion ( ) . remove ( K ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > V V ( K K , V V ) { try { return this .< K , V > getRegion ( ) . replace ( K , V ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > boolean boolean ( K K , V V , V V ) { try { return this .< K , V > getRegion ( ) . replace ( K , V , V ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < E > org.springframework.data.gemfire.SelectResults<E> < E > org.springframework.data.gemfire.SelectResults<E> ( java.lang.String java.lang.String ) { try { return this . getRegion ( ) . query ( java.lang.String ) ; } catch ( IndexInvalidException org.springframework.data.gemfire.IndexInvalidException ) { throw convertGemFireQueryException ( org.springframework.data.gemfire.IndexInvalidException ) ; } catch ( QueryInvalidException org.springframework.data.gemfire.QueryInvalidException ) { throw convertGemFireQueryException ( org.springframework.data.gemfire.QueryInvalidException ) ; } catch ( GemFireCheckedException org.springframework.data.gemfire.GemFireCheckedException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireCheckedException ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( GemfireCacheUtils . isCqInvalidException ( java.lang.RuntimeException ) ) { throw GemfireCacheUtils . convertCqInvalidException ( java.lang.RuntimeException ) ; } throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < E > org.springframework.data.gemfire.SelectResults<E> < E > org.springframework.data.gemfire.SelectResults<E> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.data.gemfire.InvalidDataAccessApiUsageException { try { QueryService org.springframework.data.gemfire.QueryService = org.springframework.data.gemfire.QueryService ( getRegion ( ) ) ; Query org.springframework.data.gemfire.Query = org.springframework.data.gemfire.QueryService . newQuery ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.data.gemfire.Query . execute ( java.lang.Object[] ) ; if ( java.lang.Object instanceof SelectResults ) { return ( SelectResults < E > ) java.lang.Object ; } else { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Object ) ) ; } } catch ( IndexInvalidException | QueryInvalidException java.lang.Object ) { throw convertGemFireQueryException ( java.lang.Object ) ; } catch ( GemFireCheckedException org.springframework.data.gemfire.GemFireCheckedException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireCheckedException ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( GemfireCacheUtils . isCqInvalidException ( java.lang.RuntimeException ) ) { throw GemfireCacheUtils . convertCqInvalidException ( java.lang.RuntimeException ) ; } throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.data.gemfire.InvalidDataAccessApiUsageException { try { QueryService org.springframework.data.gemfire.QueryService = org.springframework.data.gemfire.QueryService ( getRegion ( ) ) ; Query org.springframework.data.gemfire.Query = org.springframework.data.gemfire.QueryService . newQuery ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.data.gemfire.Query . execute ( java.lang.Object[] ) ; if ( java.lang.Object instanceof SelectResults ) { SelectResults < T > org.springframework.data.gemfire.SelectResults<T> = ( SelectResults < T > ) java.lang.Object ; java.util.List<T> < T > java.util.List<T> = org.springframework.data.gemfire.SelectResults<T> . asList ( ) ; if ( java.util.List<T> . int ( ) == NUMBER ) { java.lang.Object = java.util.List<T> . T ( NUMBER ) ; } else { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Object ) ) ; } } return ( T ) java.lang.Object ; } catch ( IndexInvalidException org.springframework.data.gemfire.IndexInvalidException ) { throw convertGemFireQueryException ( org.springframework.data.gemfire.IndexInvalidException ) ; } catch ( QueryInvalidException org.springframework.data.gemfire.QueryInvalidException ) { throw convertGemFireQueryException ( org.springframework.data.gemfire.QueryInvalidException ) ; } catch ( GemFireCheckedException org.springframework.data.gemfire.GemFireCheckedException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireCheckedException ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( GemfireCacheUtils . isCqInvalidException ( java.lang.RuntimeException ) ) { throw GemfireCacheUtils . convertCqInvalidException ( java.lang.RuntimeException ) ; } throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return ( org.springframework.data.gemfire.Region<,> . getRegionService ( ) instanceof ClientCache ? org.springframework.data.gemfire.QueryService ( org.springframework.data.gemfire.Region<,> ) : org.springframework.data.gemfire.QueryService ( org.springframework.data.gemfire.Region<,> ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { ClientCache org.springframework.data.gemfire.ClientCache = ( ClientCache ) org.springframework.data.gemfire.Region<,> . getRegionService ( ) ; return ( boolean ( org.springframework.data.gemfire.Region<,> ) ? org.springframework.data.gemfire.ClientCache . getLocalQueryService ( ) : ( boolean ( org.springframework.data.gemfire.Region<,> ) ? org.springframework.data.gemfire.ClientCache . getQueryService ( java.lang.String ( org.springframework.data.gemfire.Region<,> ) ) : org.springframework.data.gemfire.QueryService ( org.springframework.data.gemfire.Region<,> ) ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return ( Scope . LOCAL . equals ( org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getScope ( ) ) && boolean ( org.springframework.data.gemfire.Region<,> ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return ( org.springframework.data.gemfire.Region<,> instanceof LocalRegion && ! ( ( LocalRegion ) org.springframework.data.gemfire.Region<,> ) . hasServerProxy ( ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return StringUtils . hasText ( java.lang.String ( org.springframework.data.gemfire.Region<,> ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.QueryService org.springframework.data.gemfire.QueryService ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return org.springframework.data.gemfire.Region<,> . getRegionService ( ) . getQueryService ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { return org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getPoolName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( GemfireCallback < T > org.springframework.data.gemfire.GemfireCallback<T> ) throws org.springframework.data.gemfire.DataAccessException { return java.lang.Object ( org.springframework.data.gemfire.GemfireCallback<T> , boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( GemfireCallback < T > org.springframework.data.gemfire.GemfireCallback<T> , boolean boolean ) throws org.springframework.data.gemfire.DataAccessException { Assert . notNull ( org.springframework.data.gemfire.GemfireCallback<T> , STRING ) ; try { Region < ? , ? > org.springframework.data.gemfire.Region<?,?> = ( boolean ? getRegion ( ) : org.springframework.data.gemfire.Region<,> ) ; return org.springframework.data.gemfire.GemfireCallback<T> . doInGemfire ( org.springframework.data.gemfire.Region<,> ) ; } catch ( IndexInvalidException org.springframework.data.gemfire.IndexInvalidException ) { throw convertGemFireQueryException ( org.springframework.data.gemfire.IndexInvalidException ) ; } catch ( QueryInvalidException org.springframework.data.gemfire.QueryInvalidException ) { throw convertGemFireQueryException ( org.springframework.data.gemfire.QueryInvalidException ) ; } catch ( GemFireCheckedException org.springframework.data.gemfire.GemFireCheckedException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireCheckedException ) ; } catch ( GemFireException org.springframework.data.gemfire.GemFireException ) { throw convertGemFireAccessException ( org.springframework.data.gemfire.GemFireException ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( GemfireCacheUtils . isCqInvalidException ( java.lang.RuntimeException ) ) { throw GemfireCacheUtils . convertCqInvalidException ( java.lang.RuntimeException ) ; } throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < K , V > org.springframework.data.gemfire.Region<K,V> < K , V > org.springframework.data.gemfire.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.Region<K,V> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.gemfire.Region<K,V> . getClass ( ) ; return ( Region < K , V > ) java.lang.reflect.Proxy . java.lang.Object ( java.lang.Class<> . java.lang.ClassLoader ( ) , ClassUtils . getAllInterfacesForClass ( java.lang.Class<> , java.lang.Class<? extends org.springframework.data.gemfire.GemfireTemplate> ( ) . java.lang.ClassLoader ( ) ) , new org.springframework.data.gemfire.GemfireTemplate.RegionCloseSuppressingInvocationHandler ( org.springframework.data.gemfire.Region<K,V> ) ) ; }  <METHOD_END>
<METHOD_START> public void ( final Region < ? , ? > org.springframework.data.gemfire.Region<?,?> ) { Assert . notNull ( org.springframework.data.gemfire.Region<,> , STRING ) ; this . org.springframework.data.gemfire.Region<?,?> = org.springframework.data.gemfire.Region<,> ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } else { try { return java.lang.reflect.Method . java.lang.Object ( this . org.springframework.data.gemfire.Region<,> , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } } }  <METHOD_END>
