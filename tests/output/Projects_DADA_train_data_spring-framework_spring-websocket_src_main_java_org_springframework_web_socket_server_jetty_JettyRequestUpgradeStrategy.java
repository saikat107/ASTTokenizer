<METHOD_START> public void ( ) { this . org.springframework.web.socket.server.jetty.WebSocketPolicy = WebSocketPolicy . newServerPolicy ( ) ; }  <METHOD_END>
<METHOD_START> public void ( WebSocketPolicy org.springframework.web.socket.server.jetty.WebSocketPolicy ) { Assert . notNull ( org.springframework.web.socket.server.jetty.WebSocketPolicy , STRING ) ; this . org.springframework.web.socket.server.jetty.WebSocketPolicy = org.springframework.web.socket.server.jetty.WebSocketPolicy ; }  <METHOD_END>
<METHOD_START> public void ( WebSocketServerFactory org.springframework.web.socket.server.jetty.WebSocketServerFactory ) { Assert . notNull ( org.springframework.web.socket.server.jetty.WebSocketServerFactory , STRING ) ; this . org.springframework.web.socket.server.jetty.WebSocketServerFactory = org.springframework.web.socket.server.jetty.WebSocketServerFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.socket.server.jetty.ServletContext ) { this . org.springframework.web.socket.server.jetty.ServletContext = org.springframework.web.socket.server.jetty.ServletContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! boolean ( ) ) { this . boolean = true ; try { if ( this . org.springframework.web.socket.server.jetty.WebSocketServerFactory == null ) { this . org.springframework.web.socket.server.jetty.WebSocketServerFactory = new WebSocketServerFactory ( org.springframework.web.socket.server.jetty.ServletContext , this . org.springframework.web.socket.server.jetty.WebSocketPolicy ) ; } this . org.springframework.web.socket.server.jetty.WebSocketServerFactory . setCreator ( new WebSocketCreator ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ServletUpgradeRequest org.springframework.web.socket.server.jetty.ServletUpgradeRequest , ServletUpgradeResponse org.springframework.web.socket.server.jetty.ServletUpgradeResponse ) { org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer = java.lang.ThreadLocal<org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer> . org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer ( ) ; Assert . state ( org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer != null , STRING ) ; org.springframework.web.socket.server.jetty.ServletUpgradeResponse . setAcceptedSubProtocol ( org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer . java.lang.String ( ) ) ; org.springframework.web.socket.server.jetty.ServletUpgradeResponse . setExtensions ( org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer . java.util.List<org.springframework.web.socket.server.jetty.ExtensionConfig> ( ) ) ; return org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer . org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter ( ) ; } } ) ; this . org.springframework.web.socket.server.jetty.WebSocketServerFactory . start ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ServletUpgradeRequest org.springframework.web.socket.server.jetty.ServletUpgradeRequest , ServletUpgradeResponse org.springframework.web.socket.server.jetty.ServletUpgradeResponse ) { org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer = java.lang.ThreadLocal<org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer> . org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer ( ) ; Assert . state ( org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer != null , STRING ) ; org.springframework.web.socket.server.jetty.ServletUpgradeResponse . setAcceptedSubProtocol ( org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer . java.lang.String ( ) ) ; org.springframework.web.socket.server.jetty.ServletUpgradeResponse . setExtensions ( org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer . java.util.List<org.springframework.web.socket.server.jetty.ExtensionConfig> ( ) ) ; return org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer . org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( boolean ( ) ) { this . boolean = false ; if ( this . org.springframework.web.socket.server.jetty.WebSocketServerFactory != null ) { try { this . org.springframework.web.socket.server.jetty.WebSocketServerFactory . stop ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { java.lang.String . java.lang.String ( HandshakeRFC6455 . VERSION ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ( ServerHttpRequest org.springframework.web.socket.server.jetty.ServerHttpRequest ) { if ( this . java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> == null ) { this . java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> = java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ( ) ; } return this . java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = this . org.springframework.web.socket.server.jetty.WebSocketServerFactory . getExtensionFactory ( ) . getExtensionNames ( ) ; java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> = new java.util.ArrayList<org.springframework.web.socket.server.jetty.WebSocketExtension> <> ( java.util.Set<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> . add ( new WebSocketExtension ( java.lang.String ) ) ; } return java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerHttpRequest org.springframework.web.socket.server.jetty.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.jetty.ServerHttpResponse , java.lang.String java.lang.String , java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> , java.security.Principal java.security.Principal , WebSocketHandler org.springframework.web.socket.server.jetty.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws org.springframework.web.socket.server.jetty.HandshakeFailureException { Assert . isInstanceOf ( ServletServerHttpRequest .class , org.springframework.web.socket.server.jetty.ServerHttpRequest , STRING ) ; HttpServletRequest org.springframework.web.socket.server.jetty.HttpServletRequest = ( ( ServletServerHttpRequest ) org.springframework.web.socket.server.jetty.ServerHttpRequest ) . getServletRequest ( ) ; Assert . isInstanceOf ( ServletServerHttpResponse .class , org.springframework.web.socket.server.jetty.ServerHttpResponse , STRING ) ; HttpServletResponse org.springframework.web.socket.server.jetty.HttpServletResponse = ( ( ServletServerHttpResponse ) org.springframework.web.socket.server.jetty.ServerHttpResponse ) . getServletResponse ( ) ; Assert . isTrue ( this . org.springframework.web.socket.server.jetty.WebSocketServerFactory . isUpgradeRequest ( org.springframework.web.socket.server.jetty.HttpServletRequest , org.springframework.web.socket.server.jetty.HttpServletResponse ) , STRING ) ; JettyWebSocketSession org.springframework.web.socket.server.jetty.JettyWebSocketSession = new JettyWebSocketSession ( java.util.Map<java.lang.String,java.lang.Object> , java.security.Principal ) ; JettyWebSocketHandlerAdapter org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter = new JettyWebSocketHandlerAdapter ( org.springframework.web.socket.server.jetty.WebSocketHandler , org.springframework.web.socket.server.jetty.JettyWebSocketSession ) ; org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer = new org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer ( org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter , java.lang.String , java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ) ; try { java.lang.ThreadLocal<org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer> . void ( org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer ) ; this . org.springframework.web.socket.server.jetty.WebSocketServerFactory . acceptWebSocket ( org.springframework.web.socket.server.jetty.HttpServletRequest , org.springframework.web.socket.server.jetty.HttpServletResponse ) ; } catch ( java.io.IOException java.io.IOException ) { throw new HandshakeFailureException ( STRING + org.springframework.web.socket.server.jetty.ServerHttpRequest . getURI ( ) , java.io.IOException ) ; } finally { java.lang.ThreadLocal<org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy.WebSocketHandlerContainer> . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( JettyWebSocketHandlerAdapter org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter , java.lang.String java.lang.String , java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ) { this . org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter = org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter ; this . java.lang.String = java.lang.String ; if ( CollectionUtils . isEmpty ( java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ) ) { this . java.util.List<org.springframework.web.socket.server.jetty.ExtensionConfig> = new java.util.ArrayList <> ( NUMBER ) ; } else { this . java.util.List<org.springframework.web.socket.server.jetty.ExtensionConfig> = new java.util.ArrayList <> ( java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> . size ( ) ) ; for ( WebSocketExtension org.springframework.web.socket.server.jetty.WebSocketExtension : java.util.List<org.springframework.web.socket.server.jetty.WebSocketExtension> ) { this . java.util.List<org.springframework.web.socket.server.jetty.ExtensionConfig> . add ( new WebSocketToJettyExtensionConfigAdapter ( org.springframework.web.socket.server.jetty.WebSocketExtension ) ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter ( ) { return this . org.springframework.web.socket.server.jetty.JettyWebSocketHandlerAdapter ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.socket.server.jetty.ExtensionConfig> < ExtensionConfig > java.util.List<org.springframework.web.socket.server.jetty.ExtensionConfig> ( ) { return this . java.util.List<org.springframework.web.socket.server.jetty.ExtensionConfig> ; }  <METHOD_END>
