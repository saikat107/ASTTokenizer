<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , WebMvcAutoConfiguration .class , ManagementWebSecurityAutoConfiguration .class , JacksonAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointWebMvcAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , AuditAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManagerBuilder .class ) ) . isNotNull ( ) ; FilterChainProxy org.springframework.boot.actuate.autoconfigure.FilterChainProxy = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( FilterChainProxy .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.FilterChainProxy . getFilterChains ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.FilterChainProxy . getFilters ( STRING ) ) . isNotEmpty ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.FilterChainProxy . getFilters ( STRING ) ) . isNotEmpty ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.FilterChainProxy . getFilters ( STRING ) ) . isNotEmpty ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.FilterChainProxy . getFilters ( STRING ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertThat ( StringUtils . cleanPath ( java.lang.String ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfigurationTests.WebConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; UserDetails org.springframework.boot.actuate.autoconfigure.UserDetails = org.springframework.boot.actuate.autoconfigure.UserDetails ( ) ; java.util.ArrayList<org.springframework.boot.actuate.autoconfigure.GrantedAuthority> < GrantedAuthority > java.util.ArrayList<org.springframework.boot.actuate.autoconfigure.GrantedAuthority> = new java.util.ArrayList <> ( org.springframework.boot.actuate.autoconfigure.UserDetails . getAuthorities ( ) ) ; assertThat ( java.util.ArrayList<org.springframework.boot.actuate.autoconfigure.GrantedAuthority> ) . containsAll ( AuthorityUtils . commaSeparatedStringToAuthorityList ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.UserDetails org.springframework.boot.actuate.autoconfigure.UserDetails ( ) { ProviderManager org.springframework.boot.actuate.autoconfigure.ProviderManager = ( ProviderManager ) this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ; DaoAuthenticationProvider org.springframework.boot.actuate.autoconfigure.DaoAuthenticationProvider = ( DaoAuthenticationProvider ) org.springframework.boot.actuate.autoconfigure.ProviderManager . getProviders ( ) . get ( NUMBER ) ; UserDetailsService org.springframework.boot.actuate.autoconfigure.UserDetailsService = ( UserDetailsService ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.DaoAuthenticationProvider , STRING ) ; UserDetails org.springframework.boot.actuate.autoconfigure.UserDetails = org.springframework.boot.actuate.autoconfigure.UserDetailsService . loadUserByUsername ( STRING ) ; return org.springframework.boot.actuate.autoconfigure.UserDetails ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( SecurityAutoConfiguration .class , ManagementWebSecurityAutoConfiguration .class , EndpointAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( FilterChainProxy .class ) . getFilterChains ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfigurationTests.WebConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( FilterChainProxy .class ) . getFilterChains ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfigurationTests.TestConfiguration .class , SecurityAutoConfiguration .class , ManagementWebSecurityAutoConfiguration .class , EndpointAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ) . isEqualTo ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfigurationTests.TestConfiguration .class ) . authenticationManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfigurationTests.TestConfiguration .class , SecurityAutoConfiguration .class , ManagementWebSecurityAutoConfiguration .class , EndpointAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( AuthenticationManager .class ) ) . isEqualTo ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfigurationTests.TestConfiguration .class ) . authenticationManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfigurationTests.AuthenticationConfig .class , SecurityAutoConfiguration .class , ManagementWebSecurityAutoConfiguration .class , JacksonAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , EndpointAutoConfiguration .class , EndpointWebMvcAutoConfiguration .class , WebMvcAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class , AuditAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; Filter org.springframework.boot.actuate.autoconfigure.Filter = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . getBean ( STRING , Filter .class ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext ) . addFilters ( org.springframework.boot.actuate.autoconfigure.Filter ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isUnauthorized ( ) ) . andExpect ( org.springframework.boot.actuate.autoconfigure.ResultMatcher ( ) ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) . header ( STRING , STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isUnauthorized ( ) ) . andExpect ( org.springframework.boot.actuate.autoconfigure.ResultMatcher ( ) ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isUnauthorized ( ) ) . andExpect ( org.springframework.boot.actuate.autoconfigure.ResultMatcher ( ) ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) . header ( STRING , STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isUnauthorized ( ) ) . andExpect ( org.springframework.boot.actuate.autoconfigure.ResultMatcher ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfigurationTests.WebConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext . refresh ( ) ; MockMvc org.springframework.boot.actuate.autoconfigure.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigWebApplicationContext ) . apply ( springSecurity ( ) ) . build ( ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; org.springframework.boot.actuate.autoconfigure.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.ResultMatcher org.springframework.boot.actuate.autoconfigure.ResultMatcher ( ) { return MockMvcResultMatchers . header ( ) . string ( STRING , Matchers . containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( AuthenticationManagerBuilder org.springframework.boot.actuate.autoconfigure.AuthenticationManagerBuilder ) throws java.lang.Exception { org.springframework.boot.actuate.autoconfigure.AuthenticationManagerBuilder . inMemoryAuthentication ( ) . withUser ( STRING ) . password ( STRING ) . roles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.AuthenticationManager org.springframework.boot.actuate.autoconfigure.AuthenticationManager ( ) { this . org.springframework.boot.actuate.autoconfigure.AuthenticationManager = new AuthenticationManager ( ) { @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.Authentication org.springframework.boot.actuate.autoconfigure.Authentication ( Authentication org.springframework.boot.actuate.autoconfigure.Authentication )						throws org.springframework.boot.actuate.autoconfigure.AuthenticationException { return new TestingAuthenticationToken ( STRING , STRING ) ; } } ; return this . org.springframework.boot.actuate.autoconfigure.AuthenticationManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.Authentication org.springframework.boot.actuate.autoconfigure.Authentication ( Authentication org.springframework.boot.actuate.autoconfigure.Authentication )						throws org.springframework.boot.actuate.autoconfigure.AuthenticationException { return new TestingAuthenticationToken ( STRING , STRING ) ; }  <METHOD_END>
