<METHOD_START> @ Before public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; DefaultListableBeanFactory org.springframework.beans.factory.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.Resource ) ; org.springframework.beans.factory.DefaultListableBeanFactory . addPropertyEditorRegistrar ( new PropertyEditorRegistrar ( ) { @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.PropertyEditorRegistry ) { org.springframework.beans.factory.PropertyEditorRegistry . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( ( java.text.DateFormat ) java.text.SimpleDateFormat . java.lang.Object ( ) , false ) ) ; } } ) ; this . org.springframework.beans.factory.BeanFactory = org.springframework.beans.factory.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.PropertyEditorRegistry ) { org.springframework.beans.factory.PropertyEditorRegistry . registerCustomEditor ( java.util.Date .class , new CustomDateEditor ( ( java.text.DateFormat ) java.text.SimpleDateFormat . java.lang.Object ( ) , false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun = new org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun ( ) ; org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun . void ( true ) ; java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . boolean ( org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun ) ; } for ( java.util.Iterator<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> < org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun > java.util.Iterator<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> = new java.util.HashSet<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> <> ( java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> ) . java.util.Iterator<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> ( ) ; java.util.Iterator<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . boolean ( ) ;) { org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun = java.util.Iterator<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun ( ) ; org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun . void ( ) ; } org.springframework.beans.factory.Log . info ( STRING + java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . int ( ) + STRING ) ; synchronized ( java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> ) { while ( ! java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . boolean ( ) && java.lang.Throwable == null ) { try { java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { org.springframework.beans.factory.Log . info ( java.lang.InterruptedException . java.lang.String ( ) ) ; } org.springframework.beans.factory.Log . info ( java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . int ( ) + STRING ) ; } } if ( java.lang.Throwable != null ) { fail ( java.lang.Throwable . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.beans.factory.ConcurrentBeanFactoryTests.ConcurrentBean org.springframework.beans.factory.ConcurrentBeanFactoryTests.ConcurrentBean = ( org.springframework.beans.factory.ConcurrentBeanFactoryTests.ConcurrentBean ) org.springframework.beans.factory.BeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.ConcurrentBeanFactoryTests.ConcurrentBean org.springframework.beans.factory.ConcurrentBeanFactoryTests.ConcurrentBean = ( org.springframework.beans.factory.ConcurrentBeanFactoryTests.ConcurrentBean ) org.springframework.beans.factory.BeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.ConcurrentBeanFactoryTests.ConcurrentBean . java.util.Date ( ) , java.util.Date ) ; assertEquals ( org.springframework.beans.factory.ConcurrentBeanFactoryTests.ConcurrentBean . java.util.Date ( ) , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { void ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable = java.lang.Throwable ; } finally { synchronized ( java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> ) { java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . boolean ( this ) ; java.util.Set<org.springframework.beans.factory.ConcurrentBeanFactoryTests.TestRun> . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public java.util.Date java.util.Date ( ) { return java.util.Date ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Date java.util.Date ) { this . java.util.Date = java.util.Date ; }  <METHOD_END>
