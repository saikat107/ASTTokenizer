<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.Map . java.util.Map.Entry<java.lang.Integer,org.springframework.boot.loader.jar.FileHeader> < java.lang.Integer , FileHeader > java.util.Map.Entry<java.lang.Integer,org.springframework.boot.loader.jar.FileHeader> ) { if ( org.springframework.boot.loader.jar.JarFileEntries .this . org.springframework.boot.loader.jar.JarFile . isSigned ( ) ) { return false ; } return int ( ) >= int ; }  <METHOD_END>
<METHOD_START> void ( JarFile org.springframework.boot.loader.jar.JarFile , JarEntryFilter org.springframework.boot.loader.jar.JarEntryFilter ) { this . org.springframework.boot.loader.jar.JarFile = org.springframework.boot.loader.jar.JarFile ; this . org.springframework.boot.loader.jar.JarEntryFilter = org.springframework.boot.loader.jar.JarEntryFilter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CentralDirectoryEndRecord org.springframework.boot.loader.jar.CentralDirectoryEndRecord , RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ) { int int = org.springframework.boot.loader.jar.CentralDirectoryEndRecord . getNumberOfRecords ( ) ; this . org.springframework.boot.loader.jar.RandomAccessData = org.springframework.boot.loader.jar.RandomAccessData ; this . int[] = new int [ int ] ; this . int[] = new int [ int ] ; this . int[] = new int [ int ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CentralDirectoryFileHeader org.springframework.boot.loader.jar.CentralDirectoryFileHeader , int int ) { AsciiBytes org.springframework.boot.loader.jar.AsciiBytes = org.springframework.boot.loader.jar.AsciiBytes ( org.springframework.boot.loader.jar.CentralDirectoryFileHeader . getName ( ) ) ; if ( org.springframework.boot.loader.jar.AsciiBytes != null ) { void ( org.springframework.boot.loader.jar.AsciiBytes , org.springframework.boot.loader.jar.CentralDirectoryFileHeader , int ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AsciiBytes org.springframework.boot.loader.jar.AsciiBytes , CentralDirectoryFileHeader org.springframework.boot.loader.jar.CentralDirectoryFileHeader , int int ) { this . int[] [ this . int ] = org.springframework.boot.loader.jar.AsciiBytes . hashCode ( ) ; this . int[] [ this . int ] = int ; this . int[] [ this . int ] = this . int ; this . int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( NUMBER , this . int - NUMBER ) ; int [] int[] = this . int[] ; this . int[] = new int [ int[] . int ] ; for ( int int = NUMBER ; int < this . int ; int ++ ) { this . int[] [ int[] [ int ] ] = int ; } }  <METHOD_END>
<METHOD_START> private void void ( int int , int int ) { if ( int < int ) { int int = this . int[] [ int + ( int - int ) / NUMBER ] ; int int = int ; int int = int ; while ( int <= int ) { while ( this . int[] [ int ] < int ) { int ++ ; } while ( this . int[] [ int ] > int ) { int -- ; } if ( int <= int ) { void ( int , int ) ; int ++ ; int -- ; } } if ( int < int ) { void ( int , int ) ; } if ( int > int ) { void ( int , int ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( int int , int int ) { void ( this . int[] , int , int ) ; void ( this . int[] , int , int ) ; void ( this . int[] , int , int ) ; }  <METHOD_END>
<METHOD_START> private void void ( int [] int[] , int int , int int ) { int int = int[] [ int ] ; int[] [ int ] = int[] [ int ] ; int[] [ int ] = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.boot.loader.jar.JarEntry> < JarEntry > java.util.Iterator<org.springframework.boot.loader.jar.JarEntry> ( ) { return new org.springframework.boot.loader.jar.JarFileEntries.EntryIterator ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return T ( java.lang.String , FileHeader .class , true ) != null ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.JarEntry org.springframework.boot.loader.jar.JarEntry ( java.lang.String java.lang.String ) { return T ( java.lang.String , JarEntry .class , true ) ; }  <METHOD_END>
<METHOD_START> public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String , ResourceAccess org.springframework.boot.loader.jar.ResourceAccess )			throws java.io.IOException { FileHeader org.springframework.boot.loader.jar.FileHeader = T ( java.lang.String , FileHeader .class , false ) ; return java.io.InputStream ( org.springframework.boot.loader.jar.FileHeader , org.springframework.boot.loader.jar.ResourceAccess ) ; }  <METHOD_END>
<METHOD_START> public java.io.InputStream java.io.InputStream ( FileHeader org.springframework.boot.loader.jar.FileHeader , ResourceAccess org.springframework.boot.loader.jar.ResourceAccess )			throws java.io.IOException { if ( org.springframework.boot.loader.jar.FileHeader == null ) { return null ; } java.io.InputStream java.io.InputStream = org.springframework.boot.loader.jar.RandomAccessData ( org.springframework.boot.loader.jar.FileHeader ) . getInputStream ( org.springframework.boot.loader.jar.ResourceAccess ) ; if ( org.springframework.boot.loader.jar.FileHeader . getMethod ( ) == java.util.zip.ZipEntry . int ) { java.io.InputStream = new ZipInflaterInputStream ( java.io.InputStream , ( int ) org.springframework.boot.loader.jar.FileHeader . getSize ( ) ) ; } return java.io.InputStream ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.loader.jar.RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ( java.lang.String java.lang.String ) throws java.io.IOException { FileHeader org.springframework.boot.loader.jar.FileHeader = T ( java.lang.String , FileHeader .class , false ) ; if ( org.springframework.boot.loader.jar.FileHeader == null ) { return null ; } return org.springframework.boot.loader.jar.RandomAccessData ( org.springframework.boot.loader.jar.FileHeader ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.loader.jar.RandomAccessData org.springframework.boot.loader.jar.RandomAccessData ( FileHeader org.springframework.boot.loader.jar.FileHeader ) throws java.io.IOException { RandomAccessData org.springframework.boot.loader.jar.RandomAccessData = this . org.springframework.boot.loader.jar.JarFile . getData ( ) ; byte [] byte[] = Bytes . get ( org.springframework.boot.loader.jar.RandomAccessData . getSubsection ( org.springframework.boot.loader.jar.FileHeader . getLocalHeaderOffset ( ) , long ) ) ; long long = Bytes . littleEndianValue ( byte[] , NUMBER , NUMBER ) ; long long = Bytes . littleEndianValue ( byte[] , NUMBER , NUMBER ) ; return org.springframework.boot.loader.jar.RandomAccessData . getSubsection ( org.springframework.boot.loader.jar.FileHeader . getLocalHeaderOffset ( ) + long + long + long , org.springframework.boot.loader.jar.FileHeader . getCompressedSize ( ) ) ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.boot.loader.jar.FileHeader > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , boolean boolean ) { int int = AsciiBytes . hashCode ( java.lang.String ) ; T T = T ( int , java.lang.String , java.lang.String , java.lang.Class<T> , boolean ) ; if ( T == null ) { int = AsciiBytes . hashCode ( int , java.lang.String ) ; T = T ( int , java.lang.String , java.lang.String , java.lang.Class<T> , boolean ) ; } return T ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.boot.loader.jar.FileHeader > T T ( int int , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , boolean boolean ) { int int = int ( int ) ; while ( int >= NUMBER && int < this . int && this . int[] [ int ] == int ) { T T = T ( int , java.lang.Class<T> , boolean ) ; if ( T . hasName ( java.lang.String , java.lang.String ) ) { return T ; } int ++ ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T extends org.springframework.boot.loader.jar.FileHeader > T T ( int int , java.lang.Class<T> < T > java.lang.Class<T> , boolean boolean ) { try { FileHeader org.springframework.boot.loader.jar.FileHeader = this . java.util.Map<java.lang.Integer,org.springframework.boot.loader.jar.FileHeader> . get ( int ) ; FileHeader org.springframework.boot.loader.jar.FileHeader = ( org.springframework.boot.loader.jar.FileHeader != null ? org.springframework.boot.loader.jar.FileHeader : CentralDirectoryFileHeader . fromRandomAccessData ( this . org.springframework.boot.loader.jar.RandomAccessData , this . int[] [ int ] , this . org.springframework.boot.loader.jar.JarEntryFilter ) ) ; if ( CentralDirectoryFileHeader .class . boolean ( org.springframework.boot.loader.jar.FileHeader . getClass ( ) ) && java.lang.Class<T> . boolean ( JarEntry .class ) ) { org.springframework.boot.loader.jar.FileHeader = new JarEntry ( this . org.springframework.boot.loader.jar.JarFile , ( CentralDirectoryFileHeader ) org.springframework.boot.loader.jar.FileHeader ) ; } if ( boolean && org.springframework.boot.loader.jar.FileHeader != org.springframework.boot.loader.jar.FileHeader ) { this . java.util.Map<java.lang.Integer,org.springframework.boot.loader.jar.FileHeader> . put ( int , org.springframework.boot.loader.jar.FileHeader ) ; } return ( T ) org.springframework.boot.loader.jar.FileHeader ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private int int ( int int ) { int int = java.util.Arrays . int ( this . int[] , NUMBER , this . int , int ) ; if ( int < NUMBER ) { return - NUMBER ; } while ( int > NUMBER && this . int[] [ int - NUMBER ] == int ) { int -- ; } return int ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.Map<java.lang.Integer,org.springframework.boot.loader.jar.FileHeader> . clear ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.loader.jar.AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ( AsciiBytes org.springframework.boot.loader.jar.AsciiBytes ) { return ( this . org.springframework.boot.loader.jar.JarEntryFilter == null ? org.springframework.boot.loader.jar.AsciiBytes : this . org.springframework.boot.loader.jar.JarEntryFilter . apply ( org.springframework.boot.loader.jar.AsciiBytes ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . int < org.springframework.boot.loader.jar.JarFileEntries .this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.loader.jar.JarEntry org.springframework.boot.loader.jar.JarEntry ( ) { if ( ! boolean ( ) ) { throw new java.util.NoSuchElementException ( ) ; } int int = org.springframework.boot.loader.jar.JarFileEntries .this . int[] [ this . int ] ; this . int ++ ; return T ( int , JarEntry .class , false ) ; }  <METHOD_END>
