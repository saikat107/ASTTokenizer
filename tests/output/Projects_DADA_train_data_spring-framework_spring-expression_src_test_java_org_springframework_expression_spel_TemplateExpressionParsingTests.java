<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.Object = org.springframework.expression.spel.Expression . getValue ( ( java.lang.Object ) null ) ; assertEquals ( STRING , java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( java.lang.String .class ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( ( java.lang.Object ) null , java.lang.String .class ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) , java.lang.String .class ) ) ; EvaluationContext org.springframework.expression.spel.EvaluationContext = new StandardEvaluationContext ( ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext , java.lang.String .class ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext , null , java.lang.String .class ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext , new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext , new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) , java.lang.String .class ) ) ; void ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.EvaluationContext , new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) , java.lang.String .class ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getExpressionString ( ) ) ; assertFalse ( org.springframework.expression.spel.Expression . isWritable ( new StandardEvaluationContext ( ) ) ) ; assertFalse ( org.springframework.expression.spel.Expression . isWritable ( new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) ) ) ; assertFalse ( org.springframework.expression.spel.Expression . isWritable ( new StandardEvaluationContext ( ) , new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValueType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValueType ( org.springframework.expression.spel.EvaluationContext ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( org.springframework.expression.spel.EvaluationContext ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValueType ( new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValueType ( org.springframework.expression.spel.EvaluationContext , new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) ) . getType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( org.springframework.expression.spel.EvaluationContext , new org.springframework.expression.spel.TemplateExpressionParsingTests.Rooty ( ) ) . getType ( ) ) ; try { org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.EvaluationContext , null ) ; fail ( ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { } try { org.springframework.expression.spel.Expression . setValue ( ( java.lang.Object ) null , null ) ; fail ( ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { } try { org.springframework.expression.spel.Expression . setValue ( org.springframework.expression.spel.EvaluationContext , null , null ) ; fail ( ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( TestScenarioCreator . getTestEvaluationContext ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; assertEquals ( CompositeStringExpression .class , org.springframework.expression.spel.Expression . getClass ( ) ) ; CompositeStringExpression org.springframework.expression.spel.CompositeStringExpression = ( CompositeStringExpression ) org.springframework.expression.spel.Expression ; Expression [] org.springframework.expression.spel.Expression[] = org.springframework.expression.spel.CompositeStringExpression . getExpressions ( ) ; assertEquals ( NUMBER , exprs . length ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression[] [ NUMBER ] . getExpressionString ( ) ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( TestScenarioCreator . getTestEvaluationContext ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( TestScenarioCreator . getTestEvaluationContext ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; try { org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; fail ( STRING ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { assertEquals ( STRING , org.springframework.expression.spel.ParseException . getSimpleMessage ( ) ) ; } try { org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; fail ( STRING ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { assertEquals ( STRING , org.springframework.expression.spel.ParseException . getSimpleMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.String java.lang.String = org.springframework.expression.spel.Expression . getValue ( TestScenarioCreator . getTestEvaluationContext ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( TestScenarioCreator . getTestEvaluationContext ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; java.lang.String = org.springframework.expression.spel.Expression . getValue ( TestScenarioCreator . getTestEvaluationContext ( ) , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Expression org.springframework.expression.spel.Expression = parser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; org.springframework.expression.spel.Expression = parser . parseExpression ( STRING , null ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { parser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; fail ( STRING ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { assertEquals ( STRING , org.springframework.expression.spel.ParseException . getSimpleMessage ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ParseException . getExpressionString ( ) ) ; } try { parser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; fail ( STRING ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { assertEquals ( STRING , org.springframework.expression.spel.ParseException . getSimpleMessage ( ) ) ; } try { parser . parseExpression ( STRING , org.springframework.expression.spel.ParserContext ) ; fail ( STRING ) ; } catch ( ParseException org.springframework.expression.spel.ParseException ) { assertEquals ( STRING , org.springframework.expression.spel.ParseException . getSimpleMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TemplateParserContext org.springframework.expression.spel.TemplateParserContext = new TemplateParserContext ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.TemplateParserContext . getExpressionPrefix ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.TemplateParserContext . getExpressionSuffix ( ) ) ; assertTrue ( org.springframework.expression.spel.TemplateParserContext . isTemplate ( ) ) ; org.springframework.expression.spel.TemplateParserContext = new TemplateParserContext ( ) ; assertEquals ( STRING , org.springframework.expression.spel.TemplateParserContext . getExpressionPrefix ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.TemplateParserContext . getExpressionSuffix ( ) ) ; assertTrue ( org.springframework.expression.spel.TemplateParserContext . isTemplate ( ) ) ; ParserContext org.springframework.expression.spel.ParserContext = ParserContext . TEMPLATE_EXPRESSION ; assertEquals ( STRING , org.springframework.expression.spel.ParserContext . getExpressionPrefix ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ParserContext . getExpressionSuffix ( ) ) ; assertTrue ( org.springframework.expression.spel.ParserContext . isTemplate ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof java.lang.String ) ) { fail ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING + java.lang.Object + STRING ) ; } if ( ! java.lang.Object . boolean ( java.lang.String ) ) { fail ( STRING + java.lang.String + STRING + java.lang.Object + STRING ) ; } }  <METHOD_END>
