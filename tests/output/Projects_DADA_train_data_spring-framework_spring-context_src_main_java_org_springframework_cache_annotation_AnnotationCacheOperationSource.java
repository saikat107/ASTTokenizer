<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; this . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> = new java.util.LinkedHashSet <> ( NUMBER ) ; this . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> . add ( new SpringCacheAnnotationParser ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( CacheAnnotationParser org.springframework.cache.annotation.CacheAnnotationParser ) { this . boolean = true ; Assert . notNull ( org.springframework.cache.annotation.CacheAnnotationParser , STRING ) ; this . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> = java.util.Collections . java.util.Set ( org.springframework.cache.annotation.CacheAnnotationParser ) ; }  <METHOD_END>
<METHOD_START> public void ( CacheAnnotationParser ... org.springframework.cache.annotation.CacheAnnotationParser[] ) { this . boolean = true ; Assert . notEmpty ( org.springframework.cache.annotation.CacheAnnotationParser[] , STRING ) ; java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> < CacheAnnotationParser > java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> = new java.util.LinkedHashSet <> ( annotationParsers . length ) ; java.util.Collections . boolean ( java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> , org.springframework.cache.annotation.CacheAnnotationParser[] ) ; this . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> = java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> < CacheAnnotationParser > java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> ) { this . boolean = true ; Assert . notEmpty ( java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> , STRING ) ; this . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> = java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( new org.springframework.cache.annotation.AnnotationCacheOperationSource.CacheOperationProvider ( ) { @ java.lang.Override public java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( CacheAnnotationParser org.springframework.cache.annotation.CacheAnnotationParser ) { return org.springframework.cache.annotation.CacheAnnotationParser . parseCacheAnnotations ( java.lang.Class<> ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( CacheAnnotationParser org.springframework.cache.annotation.CacheAnnotationParser ) { return org.springframework.cache.annotation.CacheAnnotationParser . parseCacheAnnotations ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( final java.lang.reflect.Method java.lang.reflect.Method ) { return java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( new org.springframework.cache.annotation.AnnotationCacheOperationSource.CacheOperationProvider ( ) { @ java.lang.Override public java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( CacheAnnotationParser org.springframework.cache.annotation.CacheAnnotationParser ) { return org.springframework.cache.annotation.CacheAnnotationParser . parseCacheAnnotations ( java.lang.reflect.Method ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( CacheAnnotationParser org.springframework.cache.annotation.CacheAnnotationParser ) { return org.springframework.cache.annotation.CacheAnnotationParser . parseCacheAnnotations ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.AnnotationCacheOperationSource.CacheOperationProvider org.springframework.cache.annotation.AnnotationCacheOperationSource.CacheOperationProvider ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = null ; for ( CacheAnnotationParser org.springframework.cache.annotation.CacheAnnotationParser : this . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> = org.springframework.cache.annotation.AnnotationCacheOperationSource.CacheOperationProvider . java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( org.springframework.cache.annotation.CacheAnnotationParser ) ; if ( java.util.Collection<org.springframework.cache.annotation.CacheOperation> != null ) { if ( java.util.Collection<org.springframework.cache.annotation.CacheOperation> == null ) { java.util.Collection<org.springframework.cache.annotation.CacheOperation> = new java.util.ArrayList <> ( ) ; } java.util.Collection<org.springframework.cache.annotation.CacheOperation> . addAll ( java.util.Collection<org.springframework.cache.annotation.CacheOperation> ) ; } } return java.util.Collection<org.springframework.cache.annotation.CacheOperation> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.cache.annotation.AnnotationCacheOperationSource ) ) { return false ; } org.springframework.cache.annotation.AnnotationCacheOperationSource org.springframework.cache.annotation.AnnotationCacheOperationSource = ( org.springframework.cache.annotation.AnnotationCacheOperationSource ) java.lang.Object ; return ( this . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> . equals ( org.springframework.cache.annotation.AnnotationCacheOperationSource . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> ) && this . boolean == org.springframework.cache.annotation.AnnotationCacheOperationSource . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Set<org.springframework.cache.annotation.CacheAnnotationParser> . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> java.util.Collection<org.springframework.cache.annotation.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.annotation.CacheOperation> ( CacheAnnotationParser org.springframework.cache.annotation.CacheAnnotationParser );  <METHOD_END>
