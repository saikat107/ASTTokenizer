<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , WebSocketHandler org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { RxNettyServerHttpResponse org.springframework.web.reactive.socket.server.upgrade.RxNettyServerHttpResponse = ( RxNettyServerHttpResponse ) org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getResponse ( ) ; HttpServerResponse < ? > org.springframework.web.reactive.socket.server.upgrade.HttpServerResponse<?> = org.springframework.web.reactive.socket.server.upgrade.RxNettyServerHttpResponse . getRxNettyResponse ( ) ; HandshakeInfo org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo = org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo ( org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , java.util.Optional<java.lang.String> ) ; NettyDataBufferFactory org.springframework.web.reactive.socket.server.upgrade.NettyDataBufferFactory = ( NettyDataBufferFactory ) org.springframework.web.reactive.socket.server.upgrade.RxNettyServerHttpResponse . bufferFactory ( ) ; WebSocketHandshaker org.springframework.web.reactive.socket.server.upgrade.WebSocketHandshaker = org.springframework.web.reactive.socket.server.upgrade.HttpServerResponse<> . acceptWebSocketUpgrade ( conn -> { RxNettyWebSocketSession session = new RxNettyWebSocketSession ( conn , info , factory ) ; String name = HttpHandlerNames . WsServerDecoder . getName ( ) ; session . aggregateFrames ( rxNettyResponse . unsafeNettyChannel ( ) , name ) ; return RxReactiveStreams . toObservable ( handler . handle ( session ) ) ; } ) ; if ( java.util.Optional<java.lang.String> . boolean ( ) ) { org.springframework.web.reactive.socket.server.upgrade.WebSocketHandshaker = org.springframework.web.reactive.socket.server.upgrade.WebSocketHandshaker . subprotocol ( java.util.Optional<java.lang.String> . java.lang.String ( ) ) ; } else { org.springframework.web.reactive.socket.server.upgrade.WebSocketHandshaker = org.springframework.web.reactive.socket.server.upgrade.WebSocketHandshaker . subprotocol ( new java.lang.String [ NUMBER ] ) ; } return Mono . from ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.socket.server.upgrade.WebSocketHandshaker ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getRequest ( ) ; Mono < java.security.Principal > org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getPrincipal ( ) ; return new HandshakeInfo ( org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getURI ( ) , org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getHeaders ( ) , org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> , java.util.Optional<java.lang.String> ) ; }  <METHOD_END>
