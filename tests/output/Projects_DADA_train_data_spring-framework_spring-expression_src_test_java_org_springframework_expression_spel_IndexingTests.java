<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; this . java.lang.Object = java.util.Map<java.lang.String,java.lang.String> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.expression.spel.Expression . getValue ( this , java.util.Map .class ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> < java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> . java.util.Map<java.lang.String,java.lang.String> ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . addPropertyAccessor ( new org.springframework.expression.spel.IndexingTests.MapAccessor ( ) ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( org.springframework.expression.spel.StandardEvaluationContext ) . toString ( ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.util.Map .class ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.TypedValue org.springframework.expression.spel.TypedValue ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return new TypedValue ( ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ) . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.expression.spel.AccessException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( EvaluationContext org.springframework.expression.spel.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object )				throws org.springframework.expression.spel.AccessException { ( ( java.util.Map ) java.lang.Object ) . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class [] { java.util.Map .class } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; this . java.lang.Object = java.util.Map<java.lang.String,java.lang.String> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression . setValue ( this , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.Integer,java.lang.Integer> < java.lang.Integer , java.lang.Integer > java.util.Map<java.lang.Integer,java.lang.Integer> = new java.util.HashMap<java.lang.Integer,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.Integer,java.lang.Integer> . java.lang.Integer ( NUMBER , NUMBER ) ; this . java.util.Map<java.lang.Integer,java.lang.Integer> = java.util.Map<java.lang.Integer,java.lang.Integer> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.Map<java.lang.Integer,java.lang.Integer> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression . setValue ( this , STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , false ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.lang.Object , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( null , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression . setValue ( this , STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; this . java.lang.Object = java.util.List<java.lang.String> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.List<java.lang.String> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; this . java.lang.Object = java.util.List<java.lang.Integer> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.List<java.lang.Integer> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression . setValue ( this , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; this . java.lang.Object = java.util.List<java.lang.Integer> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( new SpelParserConfiguration ( true , true ) ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.List<java.lang.Integer> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; try { org.springframework.expression.spel.Expression . setValue ( this , STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { assertTrue ( org.springframework.expression.spel.EvaluationException . getMessage ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; this . java.util.List<java.lang.Integer> = java.util.List<java.lang.Integer> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.List<java.lang.Integer> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.util.List<java.lang.Integer>> < java.util.List<java.lang.Integer> < java.lang.Integer > > java.util.List<java.util.List<java.lang.Integer>> = new java.util.ArrayList<java.util.List<java.lang.Integer>> <> ( ) ; java.util.List<java.util.List<java.lang.Integer>> . boolean ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER ) ) ; this . java.util.List<java.util.List<java.lang.Integer>> = java.util.List<java.util.List<java.lang.Integer>> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.List<java.util.List<java.lang.Integer>> . java.util.List<java.lang.Integer> ( NUMBER ) , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( NUMBER ) ; this . java.util.List<java.lang.Integer> = java.util.List<java.lang.Integer> ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.List<java.lang.Integer> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression . setValue ( this , STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( true , true ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.lang.Object , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; try { assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { assertTrue ( org.springframework.expression.spel.EvaluationException . getMessage ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; this . java.lang.Object = java.util.List<java.lang.String> ; SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( true , true ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.List<java.lang.String> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; try { assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { assertTrue ( org.springframework.expression.spel.EvaluationException . getMessage ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; this . java.util.List = java.util.List<java.lang.String> ; SpelParserConfiguration org.springframework.expression.spel.SpelParserConfiguration = new SpelParserConfiguration ( true , true ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( org.springframework.expression.spel.SpelParserConfiguration ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.util.List<java.lang.String> , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; try { assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { assertTrue ( org.springframework.expression.spel.EvaluationException . getMessage ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; this . java.lang.Object = java.lang.String[] ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( java.lang.String[] , org.springframework.expression.spel.Expression . getValue ( this ) ) ; org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List = new java.util.ArrayList ( ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { java.util.List = new java.util.ArrayList ( NUMBER ) ; java.util.List . boolean ( NUMBER ) ; java.util.List . boolean ( NUMBER ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , NUMBER ) ; java.util.Map . java.lang.Object ( STRING , NUMBER ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValueTypeDescriptor ( this ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { java.util.List = new java.util.ArrayList ( NUMBER ) ; java.util.List . boolean ( STRING ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.expression.spel.Expression . getValue ( this , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { java.util.List = new java.util.ArrayList ( ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; java.util.List . boolean ( java.util.Map ) ; SpelExpressionParser org.springframework.expression.spel.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.Expression . getValue ( this , java.lang.String .class ) ) ; }  <METHOD_END>
