<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { boolean boolean = true ; for ( int int = NUMBER , int = getChildCount ( ) ; int < int ; int ++ ) { SpelNode org.springframework.expression.spel.ast.SpelNode = getChild ( int ) ; if ( ! ( org.springframework.expression.spel.ast.SpelNode instanceof Literal ) ) { if ( org.springframework.expression.spel.ast.SpelNode instanceof org.springframework.expression.spel.ast.InlineList ) { org.springframework.expression.spel.ast.InlineList org.springframework.expression.spel.ast.InlineList = ( org.springframework.expression.spel.ast.InlineList ) org.springframework.expression.spel.ast.SpelNode ; if ( ! org.springframework.expression.spel.ast.InlineList . boolean ( ) ) { boolean = false ; } } else { boolean = false ; } } } if ( boolean ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; int int = getChildCount ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { SpelNode org.springframework.expression.spel.ast.SpelNode = getChild ( int ) ; if ( ( org.springframework.expression.spel.ast.SpelNode instanceof Literal ) ) { java.util.List<java.lang.Object> . boolean ( ( ( Literal ) org.springframework.expression.spel.ast.SpelNode ) . getLiteralValue ( ) . getValue ( ) ) ; } else if ( org.springframework.expression.spel.ast.SpelNode instanceof org.springframework.expression.spel.ast.InlineList ) { java.util.List<java.lang.Object> . boolean ( ( ( org.springframework.expression.spel.ast.InlineList ) org.springframework.expression.spel.ast.SpelNode ) . java.util.List<java.lang.Object> ( ) ) ; } } this . org.springframework.expression.spel.ast.TypedValue = new TypedValue ( java.util.Collections . java.util.List<java.lang.Object> ( java.util.List<java.lang.Object> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { if ( this . org.springframework.expression.spel.ast.TypedValue != null ) { return this . org.springframework.expression.spel.ast.TypedValue ; } else { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; int int = getChildCount ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.List<java.lang.Object> . boolean ( getChild ( int ) . getValue ( org.springframework.expression.spel.ast.ExpressionState ) ) ; } return new TypedValue ( java.util.List<java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; int int = getChildCount ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( int ) . toStringAST ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.expression.spel.ast.TypedValue != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { return ( java.util.List<java.lang.Object> < java.lang.Object > ) this . org.springframework.expression.spel.ast.TypedValue . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { final java.lang.String java.lang.String = STRING + org.springframework.expression.spel.ast.CodeFlow . nextFieldId ( ) ; final java.lang.String java.lang.String = org.springframework.expression.spel.ast.CodeFlow . getClassName ( ) ; org.springframework.expression.spel.ast.CodeFlow . registerNewField ( new CodeFlow . CodeFlow ( ) { public void void ( ClassWriter org.springframework.expression.spel.ast.ClassWriter , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { org.springframework.expression.spel.ast.ClassWriter . visitField ( ACC_PRIVATE | ACC_STATIC | ACC_FINAL , java.lang.String , STRING , null , null ) ; } } ) ; org.springframework.expression.spel.ast.CodeFlow . registerNewClinit ( new CodeFlow . CodeFlow ( ) { public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { void ( java.lang.String , java.lang.String , org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , false ) ; } } ) ; org.springframework.expression.spel.ast.MethodVisitor . visitFieldInsn ( GETSTATIC , java.lang.String , java.lang.String , STRING ) ; org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ClassWriter org.springframework.expression.spel.ast.ClassWriter , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { org.springframework.expression.spel.ast.ClassWriter . visitField ( ACC_PRIVATE | ACC_STATIC | ACC_FINAL , java.lang.String , STRING , null , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { void ( java.lang.String , java.lang.String , org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , false ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow , boolean boolean ) { org.springframework.expression.spel.ast.MethodVisitor . visitTypeInsn ( NEW , STRING ) ; org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( DUP ) ; org.springframework.expression.spel.ast.MethodVisitor . visitMethodInsn ( INVOKESPECIAL , STRING , STRING , STRING , false ) ; if ( ! boolean ) { org.springframework.expression.spel.ast.MethodVisitor . visitFieldInsn ( PUTSTATIC , java.lang.String , java.lang.String , STRING ) ; } int int = getChildCount ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { if ( ! boolean ) { org.springframework.expression.spel.ast.MethodVisitor . visitFieldInsn ( GETSTATIC , java.lang.String , java.lang.String , STRING ) ; } else { org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( DUP ) ; } if ( children [ int ] instanceof org.springframework.expression.spel.ast.InlineList ) { ( ( org.springframework.expression.spel.ast.InlineList ) children [ int ] ) . void ( java.lang.String , java.lang.String , org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , true ) ; } else { children [ int ] . generateCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow ) ; if ( CodeFlow . isPrimitive ( org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) ) ) { CodeFlow . insertBoxIfNecessary ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow . lastDescriptor ( ) . charAt ( NUMBER ) ) ; } } org.springframework.expression.spel.ast.MethodVisitor . visitMethodInsn ( INVOKEINTERFACE , STRING , STRING , STRING , true ) ; org.springframework.expression.spel.ast.MethodVisitor . visitInsn ( POP ) ; } }  <METHOD_END>
