<METHOD_START> public void ( ) { this . org.springframework.data.solr.core.convert.MappingContext<? extends org.springframework.data.solr.core.convert.SolrPersistentEntity<?>,org.springframework.data.solr.core.convert.SolrPersistentProperty> = new SimpleSolrMappingContext ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.convert.MappingContext<? extends org.springframework.data.solr.core.convert.SolrPersistentEntity<?>,org.springframework.data.solr.core.convert.SolrPersistentProperty> < ? extends SolrPersistentEntity < ? > , SolrPersistentProperty > org.springframework.data.solr.core.convert.MappingContext<? extends org.springframework.data.solr.core.convert.SolrPersistentEntity<?>,org.springframework.data.solr.core.convert.SolrPersistentProperty> ( ) { return org.springframework.data.solr.core.convert.MappingContext<,org.springframework.data.solr.core.convert.SolrPersistentProperty> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S , R > java.util.List<R> < R > java.util.List<R> ( SolrDocumentList org.springframework.data.solr.core.convert.SolrDocumentList , java.lang.Class<R> < R > java.lang.Class<R> ) { if ( org.springframework.data.solr.core.convert.SolrDocumentList == null ) { return java.util.Collections . java.util.List<R> ( ) ; } java.util.List<R> < R > java.util.List<R> = new java.util.ArrayList <> ( org.springframework.data.solr.core.convert.SolrDocumentList . size ( ) ) ; for ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> : org.springframework.data.solr.core.convert.SolrDocumentList ) { java.util.List<R> . boolean ( R ( java.lang.Class<R> , java.util.Map<java.lang.String,> ) ) ; } return java.util.List<R> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < R > R R ( java.lang.Class<R> < R > java.lang.Class<R> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( ! canConvert ( SolrDocument .class , java.lang.Class<R> ) ) { void ( java.util.Map<java.lang.String,> , java.lang.Class<R> ) ; } return convert ( java.util.Map<java.lang.String,> , java.lang.Class<R> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.util.Map java.util.Map ) { if ( java.lang.Object == null ) { return; } SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = convert ( java.lang.Object , SolrInputDocument .class ) ; java.util.Map . void ( org.springframework.data.solr.core.convert.SolrInputDocument ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! canConvert ( Update .class , SolrInputDocument .class ) ) { getConversionService ( ) . addConverter ( new SolrjConverters . SolrjConverters ( ) ) ; } if ( ! canConvert ( java.lang.Object .class , SolrInputDocument .class ) ) { getConversionService ( ) . addConverter ( new SolrjConverters . SolrjConverters ( new DocumentObjectBinder ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private < S > void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , java.lang.Class<? extends S> < ? extends S > java.lang.Class<? extends S> ) { getConversionService ( ) . addConverter ( ( java.lang.Class ) java.util.Map<java.lang.String,> . java.lang.Class<? extends java.util.Map> ( ) , ( java.lang.Class ) java.lang.Class<> , new SolrjConverters . SolrjConverters <> ( ( Class < S > ) rawType ) ) ; }  <METHOD_END>
