<METHOD_START> @ Before public void void ( ) { this . org.springframework.mock.web.ServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.mock.web.ServletResponse = new MockHttpServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MockFilterChain ( ( Servlet ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new MockFilterChain ( mock ( Servlet .class ) , ( Filter ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { MockFilterChain org.springframework.mock.web.MockFilterChain = new MockFilterChain ( ) ; org.springframework.mock.web.MockFilterChain . doFilter ( null , this . org.springframework.mock.web.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { MockFilterChain org.springframework.mock.web.MockFilterChain = new MockFilterChain ( ) ; org.springframework.mock.web.MockFilterChain . doFilter ( this . org.springframework.mock.web.ServletRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockFilterChain org.springframework.mock.web.MockFilterChain = new MockFilterChain ( ) ; org.springframework.mock.web.MockFilterChain . doFilter ( this . org.springframework.mock.web.ServletRequest , this . org.springframework.mock.web.ServletResponse ) ; assertThat ( org.springframework.mock.web.MockFilterChain . getRequest ( ) , is ( org.springframework.mock.web.ServletRequest ) ) ; assertThat ( org.springframework.mock.web.MockFilterChain . getResponse ( ) , is ( org.springframework.mock.web.ServletResponse ) ) ; try { org.springframework.mock.web.MockFilterChain . doFilter ( this . org.springframework.mock.web.ServletRequest , this . org.springframework.mock.web.ServletResponse ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Servlet org.springframework.mock.web.Servlet = mock ( Servlet .class ) ; MockFilterChain org.springframework.mock.web.MockFilterChain = new MockFilterChain ( org.springframework.mock.web.Servlet ) ; org.springframework.mock.web.MockFilterChain . doFilter ( this . org.springframework.mock.web.ServletRequest , this . org.springframework.mock.web.ServletResponse ) ; verify ( org.springframework.mock.web.Servlet ) . service ( this . org.springframework.mock.web.ServletRequest , this . org.springframework.mock.web.ServletResponse ) ; try { org.springframework.mock.web.MockFilterChain . doFilter ( this . org.springframework.mock.web.ServletRequest , this . org.springframework.mock.web.ServletResponse ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Servlet org.springframework.mock.web.Servlet = mock ( Servlet .class ) ; org.springframework.mock.web.MockFilterChainTests.MockFilter org.springframework.mock.web.MockFilterChainTests.MockFilter = new org.springframework.mock.web.MockFilterChainTests.MockFilter ( org.springframework.mock.web.Servlet ) ; org.springframework.mock.web.MockFilterChainTests.MockFilter org.springframework.mock.web.MockFilterChainTests.MockFilter = new org.springframework.mock.web.MockFilterChainTests.MockFilter ( null ) ; MockFilterChain org.springframework.mock.web.MockFilterChain = new MockFilterChain ( org.springframework.mock.web.Servlet , org.springframework.mock.web.MockFilterChainTests.MockFilter , org.springframework.mock.web.MockFilterChainTests.MockFilter ) ; org.springframework.mock.web.MockFilterChain . doFilter ( this . org.springframework.mock.web.ServletRequest , this . org.springframework.mock.web.ServletResponse ) ; assertTrue ( org.springframework.mock.web.MockFilterChainTests.MockFilter . boolean ) ; assertTrue ( org.springframework.mock.web.MockFilterChainTests.MockFilter . boolean ) ; verify ( org.springframework.mock.web.Servlet ) . service ( this . org.springframework.mock.web.ServletRequest , this . org.springframework.mock.web.ServletResponse ) ; try { org.springframework.mock.web.MockFilterChain . doFilter ( this . org.springframework.mock.web.ServletRequest , this . org.springframework.mock.web.ServletResponse ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertEquals ( STRING , java.lang.IllegalStateException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( Servlet org.springframework.mock.web.Servlet ) { this . org.springframework.mock.web.Servlet = org.springframework.mock.web.Servlet ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.mock.web.ServletRequest , ServletResponse org.springframework.mock.web.ServletResponse , FilterChain org.springframework.mock.web.FilterChain )				throws java.io.IOException , org.springframework.mock.web.ServletException { this . boolean = true ; if ( this . org.springframework.mock.web.Servlet != null ) { this . org.springframework.mock.web.Servlet . service ( org.springframework.mock.web.ServletRequest , org.springframework.mock.web.ServletResponse ) ; } else { org.springframework.mock.web.FilterChain . doFilter ( org.springframework.mock.web.ServletRequest , org.springframework.mock.web.ServletResponse ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FilterConfig org.springframework.mock.web.FilterConfig ) throws org.springframework.mock.web.ServletException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
