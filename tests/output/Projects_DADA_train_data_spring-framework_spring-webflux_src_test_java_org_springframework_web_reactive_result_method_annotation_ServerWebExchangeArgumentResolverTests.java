<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ServerWebExchangeArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( ServerWebExchange .class ) ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ServerWebExchangeArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( ServerHttpRequest .class ) ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ServerWebExchangeArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( ServerHttpResponse .class ) ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ServerWebExchangeArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( HttpMethod .class ) ) ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.ServerWebExchangeArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( java.lang.String .class ) ) ) ; try { this . org.springframework.web.reactive.result.method.annotation.ServerWebExchangeArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( Mono .class , ServerWebExchange .class ) ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( ServerWebExchange .class ) , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; void ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( ServerHttpRequest .class ) , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getRequest ( ) ) ; void ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( ServerHttpResponse .class ) , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) ) ; void ( this . org.springframework.web.reactive.result.method.annotation.ResolvableMethod . arg ( HttpMethod .class ) , HttpMethod . GET ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , java.lang.Object java.lang.Object ) { Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.ServerWebExchangeArgumentResolver . resolveArgument ( org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; assertSame ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange , ServerHttpRequest org.springframework.web.reactive.result.method.annotation.ServerHttpRequest , ServerHttpResponse org.springframework.web.reactive.result.method.annotation.ServerHttpResponse , WebSession org.springframework.web.reactive.result.method.annotation.WebSession , HttpMethod org.springframework.web.reactive.result.method.annotation.HttpMethod , java.lang.String java.lang.String , Mono < ServerWebExchange > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ServerWebExchange> ) {	}  <METHOD_END>
