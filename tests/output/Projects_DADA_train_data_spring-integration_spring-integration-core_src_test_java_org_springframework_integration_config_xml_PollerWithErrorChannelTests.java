<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.config.xml.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.PollerWithErrorChannelTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.config.xml.SourcePollingChannelAdapter = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; SubscribableChannel org.springframework.integration.config.xml.SubscribableChannel = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; MessageHandler org.springframework.integration.config.xml.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.config.xml.SubscribableChannel . subscribe ( org.springframework.integration.config.xml.MessageHandler ) ; org.springframework.integration.config.xml.SourcePollingChannelAdapter . start ( ) ; java.lang.Thread . void ( NUMBER ) ; verify ( org.springframework.integration.config.xml.MessageHandler , atLeastOnce ( ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.config.xml.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.config.xml.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.config.xml.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.PollerWithErrorChannelTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.config.xml.SourcePollingChannelAdapter = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.config.xml.SourcePollingChannelAdapter . start ( ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.config.xml.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.config.xml.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.config.xml.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.PollerWithErrorChannelTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.config.xml.SourcePollingChannelAdapter = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.config.xml.SourcePollingChannelAdapter . start ( ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.config.xml.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.config.xml.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.config.xml.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.PollerWithErrorChannelTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.config.xml.SourcePollingChannelAdapter = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.config.xml.SourcePollingChannelAdapter . start ( ) ; PollableChannel org.springframework.integration.config.xml.PollableChannel = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; assertNotNull ( org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.config.xml.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.config.xml.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.config.xml.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.xml.PollerWithErrorChannelTests> ( ) ) ; MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; QueueChannel org.springframework.integration.config.xml.QueueChannel = org.springframework.integration.config.xml.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.config.xml.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
