<METHOD_START> @ Before public void void ( ) { java.util.List<org.springframework.integration.aggregator.Message<?>> . clear ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( MessageBuilder . withPayload ( int + NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor = new ExpressionEvaluatingMessageGroupProcessor ( STRING ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertEquals ( NUMBER , org.springframework.integration.aggregator.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor = new ExpressionEvaluatingMessageGroupProcessor ( STRING ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor = new ExpressionEvaluatingMessageGroupProcessor ( STRING ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertTrue ( org.springframework.integration.aggregator.Message<> . getPayload ( ) instanceof java.util.Collection<?> < ? > ) ; java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) org.springframework.integration.aggregator.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.Collection<> . int ( ) ) ; assertTrue ( java.util.Collection<> . boolean ( NUMBER ) ) ; assertTrue ( java.util.Collection<> . boolean ( NUMBER ) ) ; assertTrue ( java.util.Collection<> . boolean ( NUMBER ) ) ; assertTrue ( java.util.Collection<> . boolean ( NUMBER ) ) ; assertTrue ( java.util.Collection<> . boolean ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor = new ExpressionEvaluatingMessageGroupProcessor ( STRING ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertTrue ( org.springframework.integration.aggregator.Message<> . getPayload ( ) instanceof java.util.Collection<?> < ? > ) ; java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) org.springframework.integration.aggregator.Message<> . getPayload ( ) ; assertEquals ( NUMBER , java.util.Collection<> . int ( ) ) ; assertTrue ( java.util.Collection<> . boolean ( NUMBER ) ) ; assertTrue ( java.util.Collection<> . boolean ( NUMBER ) ) ; assertTrue ( java.util.Collection<> . boolean ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) . thenReturn ( java.util.List<org.springframework.integration.aggregator.Message<?>> ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor = new ExpressionEvaluatingMessageGroupProcessor ( java.lang.String . java.lang.String ( STRING , java.lang.Class<? extends org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessorTests> ( ) . java.lang.String ( ) ) ) ; org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . setBeanFactory ( mock ( BeanFactory .class ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.aggregator.ExpressionEvaluatingMessageGroupProcessor . processMessageGroup ( org.springframework.integration.aggregator.MessageGroup ) ; assertTrue ( java.lang.Object instanceof Message < ? > ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = ( Message < ? > ) java.lang.Object ; assertEquals ( NUMBER + NUMBER + NUMBER , org.springframework.integration.aggregator.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Integer java.lang.Integer ( java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ) { int int = NUMBER ; for ( java.lang.Integer java.lang.Integer : java.util.Collection<java.lang.Integer> ) { int += java.lang.Integer ; } return int ; }  <METHOD_END>
