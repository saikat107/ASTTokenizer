<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; Regions org.springframework.data.gemfire.repository.support.Regions = new Regions ( this . java.util.List<org.springframework.data.gemfire.repository.support.Region<?,?>> , new GemfireMappingContext ( ) ) ; GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate = new GemfireTemplate ( org.springframework.data.gemfire.repository.support.Regions . getRegion ( Person .class ) ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . id , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . id , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . id , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . id , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . id , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . id , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . id , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.PersonRepository = org.springframework.data.gemfire.repository.support.PersonRepository ( org.springframework.data.gemfire.repository.support.Regions ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.gemfire.repository.support.PersonRepository org.springframework.data.gemfire.repository.support.PersonRepository ( Regions org.springframework.data.gemfire.repository.support.Regions );  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameAnnotated ( STRING ) , org.springframework.data.gemfire.repository.support.Person ) ; void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnamesAnnotated ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) , org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) , org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstname ( STRING ) , org.springframework.data.gemfire.repository.support.Person ) ; void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) , org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ; void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameIn ( STRING ) , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameAndLastname ( STRING , STRING ) , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameOrLastname ( STRING , STRING ) , org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.support.PersonRepository . deleteAll ( ) ; void ( org.springframework.data.gemfire.repository.support.PersonRepository . findAll ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.repository.support.PersonRepository . findByLastname ( STRING ) , is ( org.springframework.data.gemfire.repository.support.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.repository.support.PersonRepository . findByLastname ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.gemfire.repository.support.PersonRepository . findByLastname ( STRING ) ; fail ( STRING ) ; } catch ( IncorrectResultSizeDataAccessException org.springframework.data.gemfire.repository.support.IncorrectResultSizeDataAccessException ) { assertThat ( org.springframework.data.gemfire.repository.support.IncorrectResultSizeDataAccessException . getExpectedSize ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.IncorrectResultSizeDataAccessException . getActualSize ( ) , is ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameStartingWith ( STRING ) , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByLastnameEndingWith ( STRING ) , org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameContaining ( STRING ) , org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.repository.support.PersonRepository . findByFirstnameLike ( STRING ) , org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs private static < T > void void ( java.lang.Iterable<T> < T > java.lang.Iterable<T> , T ... T[] ) { assertThat ( java.lang.Iterable<T> , is ( notNullValue ( ) ) ) ; assertThat ( java.lang.Iterable<T> , is ( Matchers . iterableWithSize ( T[] . int ) ) ) ; for ( T T : T[] ) { assertThat ( java.lang.Iterable<T> , hasItem ( T ) ) ; } }  <METHOD_END>
