<METHOD_START> public void void ( InvocableHandlerMethod org.springframework.jms.listener.adapter.InvocableHandlerMethod ) { this . org.springframework.jms.listener.adapter.InvocableHandlerMethod = org.springframework.jms.listener.adapter.InvocableHandlerMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax . javax.jms . javax.jms javax.jms.Message , Session org.springframework.jms.listener.adapter.Session ) throws org.springframework.jms.listener.adapter.JMSException { Message < ? > org.springframework.jms.listener.adapter.Message<?> = org.springframework.jms.listener.adapter.Message<?> ( javax.jms.Message ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.listener.adapter.Message<> + STRING ) ; } java.lang.Object java.lang.Object = java.lang.Object ( javax.jms.Message , org.springframework.jms.listener.adapter.Session , org.springframework.jms.listener.adapter.Message<> ) ; if ( java.lang.Object != null ) { handleResult ( java.lang.Object , javax.jms.Message , org.springframework.jms.listener.adapter.Session ) ; } else { logger . trace ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { MethodParameter org.springframework.jms.listener.adapter.MethodParameter = this . org.springframework.jms.listener.adapter.InvocableHandlerMethod . getReturnType ( ) ; if ( java.lang.Object instanceof Message ) { return MessageBuilder . fromMessage ( ( Message < ? > ) java.lang.Object ) . setHeader ( AbstractMessageSendingTemplate . CONVERSION_HINT_HEADER , org.springframework.jms.listener.adapter.MethodParameter ) . build ( ) ; } return MessageBuilder . withPayload ( java.lang.Object ) . setHeader ( AbstractMessageSendingTemplate . CONVERSION_HINT_HEADER , org.springframework.jms.listener.adapter.MethodParameter ) . build ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.adapter.Message<?> < ? > org.springframework.jms.listener.adapter.Message<?> ( javax . javax.jms . javax.jms javax.jms.Message ) { try { return ( Message < ? > ) getMessagingMessageConverter ( ) . fromMessage ( javax.jms.Message ) ; } catch ( JMSException org.springframework.jms.listener.adapter.JMSException ) { throw new MessageConversionException ( STRING , org.springframework.jms.listener.adapter.JMSException ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message , Session org.springframework.jms.listener.adapter.Session , Message < ? > org.springframework.jms.listener.adapter.Message<?> ) { try { return this . org.springframework.jms.listener.adapter.InvocableHandlerMethod . invoke ( org.springframework.jms.listener.adapter.Message<> , javax.jms.Message , org.springframework.jms.listener.adapter.Session ) ; } catch ( MessagingException org.springframework.jms.listener.adapter.MessagingException ) { throw new ListenerExecutionFailedException ( java.lang.String ( STRING ) , org.springframework.jms.listener.adapter.MessagingException ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new ListenerExecutionFailedException ( STRING + this . org.springframework.jms.listener.adapter.InvocableHandlerMethod . getMethod ( ) . toGenericString ( ) + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . org.springframework.jms.listener.adapter.InvocableHandlerMethod . getMethod ( ) ) . append ( STRING ) . append ( STRING ) . append ( this . org.springframework.jms.listener.adapter.InvocableHandlerMethod . getBean ( ) ) . append ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
