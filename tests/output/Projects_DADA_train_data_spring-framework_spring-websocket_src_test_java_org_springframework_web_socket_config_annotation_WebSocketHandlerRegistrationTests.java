<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.socket.config.annotation.TaskScheduler = Mockito . mock ( TaskScheduler .class ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration = new org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration ( org.springframework.web.socket.config.annotation.TaskScheduler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = new TextWebSocketHandler ( ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . addHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING , STRING ) ; java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> = this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . getMappings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . int ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping = java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( NUMBER ) ; assertEquals ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . java.lang.String ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] . length ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] [ NUMBER ] . getClass ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping = java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( NUMBER ) ; assertEquals ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . java.lang.String ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] . length ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] [ NUMBER ] . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = new TextWebSocketHandler ( ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . addHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) . addInterceptors ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor ) ; java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> = this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . getMappings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . int ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping = java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( NUMBER ) ; assertEquals ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . java.lang.String ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] . length ) ; assertEquals ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] [ NUMBER ] ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] [ NUMBER ] . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = new TextWebSocketHandler ( ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . addHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) . addInterceptors ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor ) . setAllowedOrigins ( ) ; java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> = this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . getMappings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . int ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping = java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( NUMBER ) ; assertEquals ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . java.lang.String ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] . length ) ; assertEquals ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] [ NUMBER ] ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] [ NUMBER ] . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = new TextWebSocketHandler ( ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . addHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) . addInterceptors ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor ) . setAllowedOrigins ( STRING ) ; java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> = this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . getMappings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . int ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping = java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( NUMBER ) ; assertEquals ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . java.lang.String ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] . length ) ; assertEquals ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] [ NUMBER ] ) ; assertEquals ( OriginHandshakeInterceptor .class , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] [ NUMBER ] . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = new TextWebSocketHandler ( ) ; HttpSessionHandshakeInterceptor org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor = new HttpSessionHandshakeInterceptor ( ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . addHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) . addInterceptors ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor ) . setAllowedOrigins ( STRING ) . withSockJS ( ) ; java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> = this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . getMappings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . int ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping = java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( NUMBER ) ; assertEquals ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . java.lang.String ) ; assertNotNull ( org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.DefaultSockJsService ) ; assertTrue ( org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.DefaultSockJsService . getAllowedOrigins ( ) . contains ( STRING ) ) ; java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> = org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.DefaultSockJsService . getHandshakeInterceptors ( ) ; assertEquals ( org.springframework.web.socket.config.annotation.HttpSessionHandshakeInterceptor , java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . get ( NUMBER ) ) ; assertEquals ( OriginHandshakeInterceptor .class , java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . get ( NUMBER ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = new TextWebSocketHandler ( ) ; HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler = new DefaultHandshakeHandler ( ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . addHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) . setHandshakeHandler ( org.springframework.web.socket.config.annotation.HandshakeHandler ) ; java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> = this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . getMappings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . int ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping = java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( NUMBER ) ; assertEquals ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . java.lang.String ) ; assertSame ( org.springframework.web.socket.config.annotation.HandshakeHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.HandshakeHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = new TextWebSocketHandler ( ) ; HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler = new DefaultHandshakeHandler ( ) ; this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . addHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) . setHandshakeHandler ( org.springframework.web.socket.config.annotation.HandshakeHandler ) . withSockJS ( ) ; java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> = this . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.TestWebSocketHandlerRegistration . getMappings ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . int ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping = java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( NUMBER ) ; assertEquals ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; assertEquals ( STRING , org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . java.lang.String ) ; assertNotNull ( org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.DefaultSockJsService ) ; WebSocketTransportHandler org.springframework.web.socket.config.annotation.WebSocketTransportHandler = ( WebSocketTransportHandler ) org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping . org.springframework.web.socket.config.annotation.DefaultSockJsService . getTransportHandlers ( ) . get ( TransportType . WEBSOCKET ) ; assertSame ( org.springframework.web.socket.config.annotation.HandshakeHandler , org.springframework.web.socket.config.annotation.WebSocketTransportHandler . getHandshakeHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.config.annotation.TaskScheduler ) { super( org.springframework.web.socket.config.annotation.TaskScheduler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> ( ) { return new java.util.ArrayList<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> , SockJsService org.springframework.web.socket.config.annotation.SockJsService , WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String java.lang.String ) { java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . boolean ( new org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String , org.springframework.web.socket.config.annotation.SockJsService ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> < org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping > java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> , WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler , HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] , java.lang.String java.lang.String ) { java.util.List<org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping> . boolean ( new org.springframework.web.socket.config.annotation.WebSocketHandlerRegistrationTests.Mapping ( org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String , org.springframework.web.socket.config.annotation.HandshakeHandler , org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) ; }  <METHOD_END>
<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String java.lang.String , SockJsService org.springframework.web.socket.config.annotation.SockJsService ) { this . org.springframework.web.socket.config.annotation.WebSocketHandler = org.springframework.web.socket.config.annotation.WebSocketHandler ; this . java.lang.String = java.lang.String ; this . org.springframework.web.socket.config.annotation.HandshakeHandler = null ; this . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] = null ; this . org.springframework.web.socket.config.annotation.DefaultSockJsService = ( DefaultSockJsService ) org.springframework.web.socket.config.annotation.SockJsService ; }  <METHOD_END>
<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , java.lang.String java.lang.String , HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler , HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) { this . org.springframework.web.socket.config.annotation.WebSocketHandler = org.springframework.web.socket.config.annotation.WebSocketHandler ; this . java.lang.String = java.lang.String ; this . org.springframework.web.socket.config.annotation.HandshakeHandler = org.springframework.web.socket.config.annotation.HandshakeHandler ; this . org.springframework.web.socket.config.annotation.HandshakeInterceptor[] = org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ; this . org.springframework.web.socket.config.annotation.DefaultSockJsService = null ; }  <METHOD_END>
