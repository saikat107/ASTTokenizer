<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSourcePoolMetadata = new HikariDataSourcePoolMetadata ( org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSourcePoolMetadata org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSourcePoolMetadata ( ) { return this . org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSourcePoolMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { HikariDataSource org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource = org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource ( NUMBER , NUMBER ) ; org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource . setConnectionTestQuery ( STRING ) ; assertThat ( new HikariDataSourcePoolMetadata ( org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource ) . getValidationQuery ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource ( int int , int int ) { HikariDataSource org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource = ( HikariDataSource ) initializeBuilder ( ) . type ( HikariDataSource .class ) . build ( ) ; org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource . setMinimumIdle ( int ) ; org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource . setMaximumPoolSize ( int ) ; return org.springframework.boot.autoconfigure.jdbc.metadata.HikariDataSource ; }  <METHOD_END>
