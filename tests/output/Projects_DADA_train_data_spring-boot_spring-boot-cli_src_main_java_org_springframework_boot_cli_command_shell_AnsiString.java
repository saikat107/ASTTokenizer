<METHOD_START> void ( Terminal org.springframework.boot.cli.command.shell.Terminal ) { this . org.springframework.boot.cli.command.shell.Terminal = org.springframework.boot.cli.command.shell.Terminal ; }  <METHOD_END>
<METHOD_START> org.springframework.boot.cli.command.shell.AnsiString org.springframework.boot.cli.command.shell.AnsiString ( java.lang.String java.lang.String , Code ... org.springframework.boot.cli.command.shell.Code[] ) { if ( codes . length == NUMBER || ! boolean ( ) ) { this . java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; return this ; } Ansi org.springframework.boot.cli.command.shell.Ansi = Ansi . ansi ( ) ; for ( Code org.springframework.boot.cli.command.shell.Code : org.springframework.boot.cli.command.shell.Code[] ) { org.springframework.boot.cli.command.shell.Ansi = org.springframework.boot.cli.command.shell.Ansi ( org.springframework.boot.cli.command.shell.Ansi , org.springframework.boot.cli.command.shell.Code ) ; } this . java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.boot.cli.command.shell.Ansi . a ( java.lang.String ) . reset ( ) . toString ( ) ) ; return this ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.command.shell.Ansi org.springframework.boot.cli.command.shell.Ansi ( Ansi org.springframework.boot.cli.command.shell.Ansi , Code org.springframework.boot.cli.command.shell.Code ) { if ( org.springframework.boot.cli.command.shell.Code . isColor ( ) ) { if ( org.springframework.boot.cli.command.shell.Code . isBackground ( ) ) { return org.springframework.boot.cli.command.shell.Ansi . bg ( org.springframework.boot.cli.command.shell.Code . getColor ( ) ) ; } return org.springframework.boot.cli.command.shell.Ansi . fg ( org.springframework.boot.cli.command.shell.Code . getColor ( ) ) ; } return org.springframework.boot.cli.command.shell.Ansi . a ( org.springframework.boot.cli.command.shell.Code . getAttribute ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . org.springframework.boot.cli.command.shell.Terminal . isAnsiSupported ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
