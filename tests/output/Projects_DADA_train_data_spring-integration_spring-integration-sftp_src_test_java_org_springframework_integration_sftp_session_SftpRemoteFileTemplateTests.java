<METHOD_START> @ Test public void void ( ) { SftpRemoteFileTemplate org.springframework.integration.sftp.session.SftpRemoteFileTemplate = new SftpRemoteFileTemplate ( org.springframework.integration.sftp.session.CachingSessionFactory<org.springframework.integration.sftp.session.LsEntry> ) ; DefaultFileNameGenerator org.springframework.integration.sftp.session.DefaultFileNameGenerator = new DefaultFileNameGenerator ( ) ; org.springframework.integration.sftp.session.DefaultFileNameGenerator . setExpression ( STRING ) ; org.springframework.integration.sftp.session.SftpRemoteFileTemplate . setFileNameGenerator ( org.springframework.integration.sftp.session.DefaultFileNameGenerator ) ; org.springframework.integration.sftp.session.SftpRemoteFileTemplate . setRemoteDirectoryExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.sftp.session.SftpRemoteFileTemplate . setUseTemporaryFileName ( false ) ; org.springframework.integration.sftp.session.SftpRemoteFileTemplate . execute ( session -> { session . mkdir ( STRING ) ; return session . mkdir ( STRING ) ; } ) ; org.springframework.integration.sftp.session.SftpRemoteFileTemplate . append ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.sftp.session.SftpRemoteFileTemplate . append ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( org.springframework.integration.sftp.session.SftpRemoteFileTemplate . exists ( STRING ) ) ; org.springframework.integration.sftp.session.SftpRemoteFileTemplate . executeWithClient ( ( ClientCallbackWithoutResult < ChannelSftp > ) client -> { try { SftpATTRS file = client . lstat ( STRING ) ; assertEquals ( NUMBER , file . getSize ( ) ) ; } catch ( SftpException e ) { throw new RuntimeException ( e ) ; } } ) ; org.springframework.integration.sftp.session.SftpRemoteFileTemplate . execute ( ( SessionCallbackWithoutResult < LsEntry > ) session -> { LsEntry [] files = session . list ( STRING ) ; assertEquals ( NUMBER , files . length ) ; assertTrue ( session . remove ( STRING ) ) ; assertTrue ( session . rmdir ( STRING ) ) ; files = session . list ( STRING ) ; assertEquals ( NUMBER , files . length ) ; List < LsEntry > list = Arrays . asList ( files ) ; assertThat ( list . stream ( ) . map ( l -> l . getFilename ( ) ) . collect ( Collectors . toList ( ) ) , containsInAnyOrder ( STRING , STRING ) ) ; assertTrue ( session . rmdir ( STRING ) ) ; } ) ; assertFalse ( org.springframework.integration.sftp.session.SftpRemoteFileTemplate . exists ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.sftp.session.SessionFactory<org.springframework.integration.sftp.session.LsEntry> < LsEntry > org.springframework.integration.sftp.session.SessionFactory<org.springframework.integration.sftp.session.LsEntry> ( ) { return org.springframework.integration.sftp.session.SftpRemoteFileTemplateTests . sessionFactory ( ) ; }  <METHOD_END>
