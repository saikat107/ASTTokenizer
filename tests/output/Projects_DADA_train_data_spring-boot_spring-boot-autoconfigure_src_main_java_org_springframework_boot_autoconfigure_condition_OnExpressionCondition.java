<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . getAnnotationAttributes ( ConditionalOnExpression .class . java.lang.String ( ) ) . get ( STRING ) ; java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String ; java.lang.String = org.springframework.boot.autoconfigure.condition.ConditionContext . getEnvironment ( ) . resolvePlaceholders ( java.lang.String ) ; ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory = org.springframework.boot.autoconfigure.condition.ConditionContext . getBeanFactory ( ) ; BeanExpressionResolver org.springframework.boot.autoconfigure.condition.BeanExpressionResolver = ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory != null ) ? org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory . getBeanExpressionResolver ( ) : null ; BeanExpressionContext org.springframework.boot.autoconfigure.condition.BeanExpressionContext = ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory != null ) ? new BeanExpressionContext ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , null ) : null ; if ( org.springframework.boot.autoconfigure.condition.BeanExpressionResolver == null ) { org.springframework.boot.autoconfigure.condition.BeanExpressionResolver = new StandardBeanExpressionResolver ( ) ; } boolean boolean = ( java.lang.Boolean ) org.springframework.boot.autoconfigure.condition.BeanExpressionResolver . evaluate ( java.lang.String , org.springframework.boot.autoconfigure.condition.BeanExpressionContext ) ; return new ConditionOutcome ( boolean , ConditionMessage . forCondition ( ConditionalOnExpression .class , STRING + java.lang.String + STRING ) . resultedIn ( boolean ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( STRING ) ) { return STRING + java.lang.String + STRING ; } return java.lang.String ; }  <METHOD_END>
