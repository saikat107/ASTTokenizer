<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices = new UserInfoTokenServices ( STRING + this . int + STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . loadAuthentication ( STRING ) . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OAuth2ProtectedResourceDetails org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ProtectedResourceDetails = new AuthorizationCodeResourceDetails ( ) ; OAuth2ClientContext org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext = new DefaultOAuth2ClientContext ( ) ; DefaultOAuth2AccessToken org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultOAuth2AccessToken = new DefaultOAuth2AccessToken ( STRING ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultOAuth2AccessToken . setRefreshToken ( new DefaultExpiringOAuth2RefreshToken ( STRING , new java.util.Date ( NUMBER ) ) ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext . setAccessToken ( org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultOAuth2AccessToken ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setRestTemplate ( new OAuth2RestTemplate ( org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ProtectedResourceDetails , org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . loadAuthentication ( STRING ) . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext . getAccessToken ( ) . getValue ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext . getAccessToken ( ) . getRefreshToken ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultOAuth2AccessToken . getRefreshToken ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OAuth2ProtectedResourceDetails org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ProtectedResourceDetails = new AuthorizationCodeResourceDetails ( ) ; OAuth2ClientContext org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext = new DefaultOAuth2ClientContext ( ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext . setAccessToken ( new DefaultOAuth2AccessToken ( STRING ) ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setRestTemplate ( new OAuth2RestTemplate ( org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ProtectedResourceDetails , org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . loadAuthentication ( STRING ) . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext . getAccessToken ( ) . getValue ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServicesRefreshTokenTests.User org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServicesRefreshTokenTests.User ( @ RequestHeader ( STRING ) java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { throw new InvalidTokenException ( STRING ) ; } return new org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServicesRefreshTokenTests.User ( ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( InvalidTokenException .class ) @ ResponseStatus ( HttpStatus . UNAUTHORIZED ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
