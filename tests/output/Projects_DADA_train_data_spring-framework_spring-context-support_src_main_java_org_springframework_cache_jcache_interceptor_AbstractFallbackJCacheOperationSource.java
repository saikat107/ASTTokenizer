<METHOD_START> @ java.lang.Override public org.springframework.cache.jcache.interceptor.JCacheOperation<?> < ? > org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { MethodClassKey org.springframework.cache.jcache.interceptor.MethodClassKey = new MethodClassKey ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.Object java.lang.Object = this . java.util.Map<org.springframework.cache.jcache.interceptor.MethodClassKey,java.lang.Object> . get ( org.springframework.cache.jcache.interceptor.MethodClassKey ) ; if ( java.lang.Object != null ) { return ( java.lang.Object != java.lang.Object ? ( JCacheOperation < ? > ) java.lang.Object : null ) ; } else { JCacheOperation < ? > org.springframework.cache.jcache.interceptor.JCacheOperation<?> = org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( org.springframework.cache.jcache.interceptor.JCacheOperation<> != null ) { if ( org.springframework.cache.jcache.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.cache.jcache.interceptor.Log . debug ( STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING + org.springframework.cache.jcache.interceptor.JCacheOperation<> ) ; } this . java.util.Map<org.springframework.cache.jcache.interceptor.MethodClassKey,java.lang.Object> . put ( org.springframework.cache.jcache.interceptor.MethodClassKey , org.springframework.cache.jcache.interceptor.JCacheOperation<> ) ; } else { this . java.util.Map<org.springframework.cache.jcache.interceptor.MethodClassKey,java.lang.Object> . put ( org.springframework.cache.jcache.interceptor.MethodClassKey , java.lang.Object ) ; } return org.springframework.cache.jcache.interceptor.JCacheOperation<> ; } }  <METHOD_END>
<METHOD_START> private org.springframework.cache.jcache.interceptor.JCacheOperation<?> < ? > org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( boolean ( ) && ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { return null ; } java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; JCacheOperation < ? > org.springframework.cache.jcache.interceptor.JCacheOperation<?> = org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( org.springframework.cache.jcache.interceptor.JCacheOperation<> != null ) { return org.springframework.cache.jcache.interceptor.JCacheOperation<> ; } if ( java.lang.reflect.Method != java.lang.reflect.Method ) { org.springframework.cache.jcache.interceptor.JCacheOperation<?> = org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( org.springframework.cache.jcache.interceptor.JCacheOperation<> != null ) { return org.springframework.cache.jcache.interceptor.JCacheOperation<> ; } } return null ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.cache.jcache.interceptor.JCacheOperation<?> < ? > org.springframework.cache.jcache.interceptor.JCacheOperation<?> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
