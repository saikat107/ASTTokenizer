<METHOD_START> public void ( MailReceiver org.springframework.integration.mail.MailReceiver ) { Assert . notNull ( org.springframework.integration.mail.MailReceiver , STRING ) ; this . org.springframework.integration.mail.MailReceiver = org.springframework.integration.mail.MailReceiver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( BeanFactory org.springframework.integration.mail.BeanFactory ) { this . org.springframework.integration.mail.BeanFactory = org.springframework.integration.mail.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.mail.BeanFactory org.springframework.integration.mail.BeanFactory ( ) { return this . org.springframework.integration.mail.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.mail.MessageBuilderFactory org.springframework.integration.mail.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.mail.BeanFactory != null ) { this . org.springframework.integration.mail.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.mail.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.mail.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.integration.mail.Message<java.lang.Object> < java.lang.Object > org.springframework.integration.mail.Message<java.lang.Object> ( ) { try { java.lang.Object java.lang.Object = this . java.util.Queue<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object == null ) { java.lang.Object [] java.lang.Object[] = this . org.springframework.integration.mail.MailReceiver . receive ( ) ; if ( java.lang.Object[] != null ) { this . java.util.Queue<java.lang.Object> . boolean ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ; } java.lang.Object = this . java.util.Queue<java.lang.Object> . java.lang.Object ( ) ; } if ( java.lang.Object != null ) { if ( this . org.springframework.integration.mail.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.mail.Log . debug ( STRING + java.lang.Object + STRING ) ; } if ( java.lang.Object instanceof Message ) { return ( Message < java.lang.Object > ) java.lang.Object ; } else { return org.springframework.integration.mail.MessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . build ( ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } return null ; }  <METHOD_END>
