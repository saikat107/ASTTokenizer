<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; new java.lang.Thread ( ( ) { Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( ) ; if ( org.springframework.integration.channel.Message<> != null ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; java.util.concurrent.CountDownLatch . void ( ) ; } } ) . void ( ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; java.lang.Runnable java.lang.Runnable = ( ) { Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ; if ( org.springframework.integration.channel.Message<> != null ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } java.util.concurrent.CountDownLatch . void ( ) ; } ; java.lang.Runnable java.lang.Runnable = ( ) org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.Executor . void ( java.lang.Runnable ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.util.concurrent.Executor . void ( java.lang.Runnable ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.lang.Runnable java.lang.Runnable = ( ) { Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ; if ( org.springframework.integration.channel.Message<> != null ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } java.util.concurrent.CountDownLatch . void ( ) ; } ; java.util.concurrent.Executor . void ( java.lang.Runnable ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; assertTrue ( org.springframework.integration.channel.Message<> == null ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; java.lang.Thread . void ( ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.lang.Thread . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.QueueChannel . receive ( NUMBER ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; assertTrue ( org.springframework.integration.channel.Message<> == null ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; java.lang.Thread . void ( ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.lang.Thread . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( NUMBER ) ; boolean boolean = org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; boolean boolean = org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ; assertTrue ( boolean ) ; boolean boolean = org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ; assertTrue ( boolean ) ; boolean boolean = org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ; assertFalse ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( NUMBER ) ; boolean boolean = org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; java.lang.Thread . void ( ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.lang.Thread . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( NUMBER ) ; boolean boolean = org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( boolean ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; java.lang.Thread . void ( ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.lang.Thread . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( NUMBER ) ; GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; GenericMessage < java.lang.String > org.springframework.integration.channel.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ) ; assertFalse ( org.springframework.integration.channel.QueueChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> , NUMBER ) ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.QueueChannel . clear ( ) ; assertNotNull ( java.util.List<org.springframework.integration.channel.Message<?>> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( org.springframework.integration.channel.GenericMessage<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.QueueChannel . clear ( ) ; assertNotNull ( java.util.List<org.springframework.integration.channel.Message<?>> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.channel.QueueChannel = new QueueChannel ( NUMBER ) ; long long = NUMBER * NUMBER ; long long = java.lang.System . long ( ) ; long long = long - long ; long long = long + long ; Message < java.lang.String > org.springframework.integration.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setExpirationDate ( long ) . build ( ) ; Message < java.lang.String > org.springframework.integration.channel.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setExpirationDate ( long ) . build ( ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( org.springframework.integration.channel.Message<java.lang.String> , NUMBER ) ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( org.springframework.integration.channel.Message<java.lang.String> , NUMBER ) ) ; assertFalse ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ; java.util.List<org.springframework.integration.channel.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.Message<?>> = org.springframework.integration.channel.QueueChannel . purge ( new UnexpiredMessageSelector ( ) ) ; assertNotNull ( java.util.List<org.springframework.integration.channel.Message<?>> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.Message<?>> . size ( ) ) ; assertTrue ( org.springframework.integration.channel.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ; }  <METHOD_END>
