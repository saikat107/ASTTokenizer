<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.String .class , resolveTypeArgument ( org.springframework.core.GenericTypeResolverTests.MySimpleInterfaceType .class , org.springframework.core.GenericTypeResolverTests.MyInterfaceType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.util.Collection .class , resolveTypeArgument ( org.springframework.core.GenericTypeResolverTests.MyCollectionInterfaceType .class , org.springframework.core.GenericTypeResolverTests.MyInterfaceType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.String .class , resolveTypeArgument ( org.springframework.core.GenericTypeResolverTests.MySimpleSuperclassType .class , org.springframework.core.GenericTypeResolverTests.MySuperclassType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.util.Collection .class , resolveTypeArgument ( org.springframework.core.GenericTypeResolverTests.MyCollectionSuperclassType .class , org.springframework.core.GenericTypeResolverTests.MySuperclassType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.GenericTypeResolverTests.GenericClass<java.lang.String> < java.lang.String > org.springframework.core.GenericTypeResolverTests.GenericClass<java.lang.String> = new org.springframework.core.GenericTypeResolverTests.GenericClass<java.lang.String> <> ( ) ; assertNull ( resolveTypeArgument ( org.springframework.core.GenericTypeResolverTests.GenericClass<java.lang.String> . java.lang.Class<? extends org.springframework.core.GenericTypeResolverTests.GenericClass> ( ) , org.springframework.core.GenericTypeResolverTests.GenericClass .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Integer .class , resolveReturnTypeArgument ( findMethod ( org.springframework.core.GenericTypeResolverTests.MyTypeWithMethods .class , STRING ) , org.springframework.core.GenericTypeResolverTests.MyInterfaceType .class ) ) ; assertEquals ( java.lang.String .class , resolveReturnTypeArgument ( findMethod ( org.springframework.core.GenericTypeResolverTests.MyTypeWithMethods .class , STRING ) , org.springframework.core.GenericTypeResolverTests.MyInterfaceType .class ) ) ; assertEquals ( null , resolveReturnTypeArgument ( findMethod ( org.springframework.core.GenericTypeResolverTests.MyTypeWithMethods .class , STRING ) , org.springframework.core.GenericTypeResolverTests.MyInterfaceType .class ) ) ; assertEquals ( null , resolveReturnTypeArgument ( findMethod ( org.springframework.core.GenericTypeResolverTests.MyTypeWithMethods .class , STRING ) , org.springframework.core.GenericTypeResolverTests.MyInterfaceType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( org.springframework.core.GenericTypeResolverTests.B .class , resolveTypeArgument ( org.springframework.core.GenericTypeResolverTests.TestImpl .class , org.springframework.core.GenericTypeResolverTests.TestIfc .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = GenericTypeResolver . resolveTypeArguments ( java.util.List .class , java.lang.Iterable .class ) ; assertNull ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = GenericTypeResolver . resolveTypeArguments ( java.util.Map .class , java.util.Map .class ) ; assertNull ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.core.MethodParameter = MethodParameter . forExecutable ( org.springframework.core.GenericTypeResolverTests.WithArrayBase .class . java.lang.reflect.Method ( STRING , java.lang.Object [] .class ) , NUMBER ) ; java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveParameterType ( org.springframework.core.MethodParameter , org.springframework.core.GenericTypeResolverTests.WithArray .class ) ; assertThat ( java.lang.Class<> , equalTo ( ( java.lang.Class<?> < ? > ) java.lang.Object [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = GenericTypeResolver . resolveReturnType ( org.springframework.core.GenericTypeResolverTests.WithArrayBase .class . java.lang.reflect.Method ( STRING , java.lang.Object [] .class ) , org.springframework.core.GenericTypeResolverTests.WithArray .class ) ; assertThat ( java.lang.Class<> , equalTo ( ( java.lang.Class<?> < ? > ) java.lang.Object [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = GenericTypeResolver . resolveTypeArguments ( org.springframework.core.GenericTypeResolverTests.IdFixingRepository .class , org.springframework.core.GenericTypeResolverTests.Repository .class ) ; assertNotNull ( java.lang.Class<?>[] ) ; assertEquals ( NUMBER , java.lang.Class<?>[] . int ) ; assertEquals ( java.lang.Object .class , java.lang.Class<?>[] [ NUMBER ] ) ; assertEquals ( java.lang.Long .class , java.lang.Class<?>[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.GenericTypeResolverTests.MyInterfaceType<java.lang.Integer> < java.lang.Integer > org.springframework.core.GenericTypeResolverTests.MyInterfaceType<java.lang.Integer> ( ) { return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.GenericTypeResolverTests.MySimpleInterfaceType org.springframework.core.GenericTypeResolverTests.MySimpleInterfaceType ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.GenericTypeResolverTests.MyInterfaceType org.springframework.core.GenericTypeResolverTests.MyInterfaceType ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer , java.lang.Boolean java.lang.Boolean ) { return null ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( T T ) { return null ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( java.lang.String java.lang.String , T T ) { return null ; }  <METHOD_END>
<METHOD_START> public static < MOCK > MOCK MOCK ( java.lang.Class<MOCK> < MOCK > java.lang.Class<MOCK> ) { return null ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return null ; }  <METHOD_END>
<METHOD_START> public static < V extends java.lang.Object , T > T T ( V V , java.lang.Class<T> < T > java.lang.Class<T> ) { return null ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( org.springframework.core.GenericTypeResolverTests.MyInterfaceType<T> < T > org.springframework.core.GenericTypeResolverTests.MyInterfaceType<T> ) { return null ; }  <METHOD_END>
<METHOD_START> public static < K , V > V V ( java.util.Map<K,V> < K , V > java.util.Map<K,V> ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.core.GenericTypeResolverTests.MyInterfaceType<java.lang.Integer> < java.lang.Integer > org.springframework.core.GenericTypeResolverTests.MyInterfaceType<java.lang.Integer> ) {		}  <METHOD_END>
<METHOD_START> public void void ( org.springframework.core.GenericTypeResolverTests.MyInterfaceType<java.lang.Integer> < java.lang.Integer > [] org.springframework.core.GenericTypeResolverTests.MyInterfaceType<java.lang.Integer>[] ) {		}  <METHOD_END>
<METHOD_START> public void void ( T [] T[] ) {		}  <METHOD_END>
<METHOD_START> public abstract T [] T[] ( T ... T[] );  <METHOD_END>
