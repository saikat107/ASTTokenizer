<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.EmptyConfiguration .class ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( CacheManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CustomCacheManagerConfiguration .class ) ; ConcurrentMapCacheManager org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager = T ( ConcurrentMapCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager . getCacheNames ( ) ) . containsOnly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CustomCacheManagerFromSupportConfiguration .class ) ; ConcurrentMapCacheManager org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager = T ( ConcurrentMapCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager . getCacheNames ( ) ) . containsOnly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CustomCacheResolverFromSupportConfiguration .class ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( CacheManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.SpecificCacheResolverConfiguration .class , STRING ) ; T ( ConcurrentMapCacheManager .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBeansOfType ( CacheResolver .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.cache.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( STRING ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING ) ; ConcurrentMapCacheManager org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager = T ( ConcurrentMapCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager . getCacheNames ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheAndCustomizersConfiguration .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING , STRING ) ; ConcurrentMapCacheManager org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager = T ( ConcurrentMapCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.GenericCacheConfiguration .class ) ; SimpleCacheManager org.springframework.boot.autoconfigure.cache.SimpleCacheManager = T ( SimpleCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SimpleCacheManager . getCache ( STRING ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SimpleCacheManager . getCache ( STRING ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SimpleCacheManager . getCacheNames ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.cache.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( STRING ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.GenericCacheAndCustomizersConfiguration .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.GenericCacheConfiguration .class , STRING ) ; SimpleCacheManager org.springframework.boot.autoconfigure.cache.SimpleCacheManager = T ( SimpleCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SimpleCacheManager . getCache ( STRING ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SimpleCacheManager . getCache ( STRING ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SimpleCacheManager . getCacheNames ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CouchbaseCacheConfiguration .class , STRING ) ; CouchbaseCacheManager org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager = T ( CouchbaseCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager . getCacheNames ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CouchbaseCacheAndCustomizersConfiguration .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CouchbaseCacheConfiguration .class , STRING , STRING , STRING ) ; CouchbaseCacheManager org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager = T ( CouchbaseCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; Cache org.springframework.boot.autoconfigure.cache.Cache = org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager . getCache ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.cache.Cache ) . isInstanceOf ( CouchbaseCache .class ) ; assertThat ( ( ( CouchbaseCache ) org.springframework.boot.autoconfigure.cache.Cache ) . getTtl ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( ( ( CouchbaseCache ) org.springframework.boot.autoconfigure.cache.Cache ) . getNativeCache ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CouchbaseCacheConfiguration .class , STRING , STRING , STRING ) ; CouchbaseCacheManager org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager = T ( CouchbaseCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; Cache org.springframework.boot.autoconfigure.cache.Cache = org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager . getCache ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.cache.Cache ) . isInstanceOf ( CouchbaseCache .class ) ; assertThat ( ( ( CouchbaseCache ) org.springframework.boot.autoconfigure.cache.Cache ) . getTtl ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( ( ( CouchbaseCache ) org.springframework.boot.autoconfigure.cache.Cache ) . getNativeCache ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.RedisCacheConfiguration .class , STRING ) ; RedisCacheManager org.springframework.boot.autoconfigure.cache.RedisCacheManager = T ( RedisCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.RedisCacheManager . getCacheNames ( ) ) . isEmpty ( ) ; assertThat ( ( java.lang.Boolean ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.cache.RedisCacheManager ) . getPropertyValue ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.RedisCacheAndCustomizersConfiguration .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.RedisCacheConfiguration .class , STRING , STRING , STRING ) ; RedisCacheManager org.springframework.boot.autoconfigure.cache.RedisCacheManager = T ( RedisCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.RedisCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING ) ; NoOpCacheManager org.springframework.boot.autoconfigure.cache.NoOpCacheManager = T ( NoOpCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.NoOpCacheManager . getCacheNames ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.cache.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( STRING ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = MockCachingProvider .class . java.lang.String ( ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheNames ( ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( javax . javax.cache . javax.cache .class ) ) . isEqualTo ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = MockCachingProvider .class . java.lang.String ( ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String , STRING , STRING ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = MockCachingProvider .class . java.lang.String ( ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.JCacheCustomConfiguration .class , STRING , STRING + java.lang.String , STRING , STRING ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; CompleteConfiguration < ? , ? > org.springframework.boot.autoconfigure.cache.CompleteConfiguration<?,?> = this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( CompleteConfiguration .class ) ; verify ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) ) . createCache ( STRING , org.springframework.boot.autoconfigure.cache.CompleteConfiguration<,> ) ; verify ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) ) . createCache ( STRING , org.springframework.boot.autoconfigure.cache.CompleteConfiguration<,> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.JCacheCustomCacheManager .class , STRING ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( java.lang.String ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = MockCachingProvider .class . java.lang.String ( ) ; java.lang.String java.lang.String = STRING ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.JCacheCustomConfiguration .class , STRING , STRING + java.lang.String , STRING + java.lang.String ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; Resource org.springframework.boot.autoconfigure.cache.Resource = new ClassPathResource ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) . getURI ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.cache.Resource . getURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = MockCachingProvider .class . java.lang.String ( ) ; java.lang.String java.lang.String = STRING ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.cache.ExpectedException . expectMessage ( java.lang.String ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.JCacheCustomConfiguration .class , STRING , STRING + java.lang.String , STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING ) ; EhCacheCacheManager org.springframework.boot.autoconfigure.cache.EhCacheCacheManager = T ( EhCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.EhCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( net . net . net . net .class ) ) . isEqualTo ( org.springframework.boot.autoconfigure.cache.EhCacheCacheManager . getCacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheAndCustomizersConfiguration .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING ) ; EhCacheCacheManager org.springframework.boot.autoconfigure.cache.EhCacheCacheManager = T ( EhCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.EhCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.EhCacheCustomCacheManager .class , STRING ) ; EhCacheCacheManager org.springframework.boot.autoconfigure.cache.EhCacheCacheManager = T ( EhCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.EhCacheCacheManager . getCacheManager ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = EhcacheCachingProvider .class . java.lang.String ( ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String , STRING , STRING ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = EhcacheCachingProvider .class . java.lang.String ( ) ; java.lang.String java.lang.String = STRING ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String , STRING + java.lang.String ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; Resource org.springframework.boot.autoconfigure.cache.Resource = new ClassPathResource ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) . getURI ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.cache.Resource . getURI ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.lang.Class [] { HazelcastAutoConfiguration .class , org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class } , STRING ) ; HazelcastCacheManager org.springframework.boot.autoconfigure.cache.HazelcastCacheManager = T ( HazelcastCacheManager .class ) ; org.springframework.boot.autoconfigure.cache.HazelcastCacheManager . getCache ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.cache.HazelcastCacheManager . getCacheNames ( ) ) . containsOnly ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( HazelcastInstance .class ) ) . isEqualTo ( org.springframework.boot.autoconfigure.cache.HazelcastCacheManager . getHazelcastInstance ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.HazelcastCacheAndCustomizersConfiguration .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.HazelcastCustomHazelcastInstance .class , STRING ) ; HazelcastCacheManager org.springframework.boot.autoconfigure.cache.HazelcastCacheManager = T ( HazelcastCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.HazelcastCacheManager . getHazelcastInstance ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; void ( new java.lang.Class [] { HazelcastAutoConfiguration .class , org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class } , STRING , STRING + java.lang.String ) ; HazelcastCacheManager org.springframework.boot.autoconfigure.cache.HazelcastCacheManager = T ( HazelcastCacheManager .class ) ; HazelcastInstance org.springframework.boot.autoconfigure.cache.HazelcastInstance = this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( HazelcastInstance .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.HazelcastCacheManager . getHazelcastInstance ( ) ) . isSameAs ( org.springframework.boot.autoconfigure.cache.HazelcastInstance ) ; assertThat ( org.springframework.boot.autoconfigure.cache.HazelcastInstance . getConfig ( ) . getConfigurationFile ( ) ) . isEqualTo ( new ClassPathResource ( java.lang.String ) . getFile ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.cache.HazelcastCacheManager . getCache ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.cache.HazelcastCacheManager . getCacheNames ( ) ) . containsOnly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = HazelcastCachingProvider .class . java.lang.String ( ) ; try { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String , STRING , STRING ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; assertThat ( Hazelcast . getAllHazelcastInstances ( ) ) . hasSize ( NUMBER ) ; } finally { Caching . getCachingProvider ( java.lang.String ) . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = HazelcastCachingProvider .class . java.lang.String ( ) ; try { java.lang.String java.lang.String = STRING ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String , STRING + java.lang.String ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; Resource org.springframework.boot.autoconfigure.cache.Resource = new ClassPathResource ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) . getURI ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.cache.Resource . getURI ( ) ) ; assertThat ( Hazelcast . getAllHazelcastInstances ( ) ) . hasSize ( NUMBER ) ; } finally { Caching . getCachingProvider ( java.lang.String ) . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = HazelcastCachingProvider .class . java.lang.String ( ) ; void ( new java.lang.Class [] { HazelcastAutoConfiguration .class , org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class } , STRING , STRING + java.lang.String ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; javax . javax.cache . javax.cache javax.cache.CacheManager = org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) ; assertThat ( javax.cache.CacheManager ) . isInstanceOf ( com . com.hazelcast . com.hazelcast . com.hazelcast .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBeansOfType ( HazelcastInstance .class ) ) . hasSize ( NUMBER ) ; HazelcastInstance org.springframework.boot.autoconfigure.cache.HazelcastInstance = this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( HazelcastInstance .class ) ; assertThat ( ( ( com . com.hazelcast . com.hazelcast . com.hazelcast ) javax.cache.CacheManager ) . getHazelcastInstance ( ) ) . isSameAs ( org.springframework.boot.autoconfigure.cache.HazelcastInstance ) ; assertThat ( org.springframework.boot.autoconfigure.cache.HazelcastInstance . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( Hazelcast . getAllHazelcastInstances ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING ) ; SpringEmbeddedCacheManager org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager = T ( SpringEmbeddedCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager . getCacheNames ( ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheAndCustomizersConfiguration .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING , STRING ) ; SpringEmbeddedCacheManager org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager = T ( SpringEmbeddedCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.InfinispanCustomConfiguration .class , STRING , STRING , STRING ) ; SpringEmbeddedCacheManager org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager = T ( SpringEmbeddedCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; ConfigurationBuilder org.springframework.boot.autoconfigure.cache.ConfigurationBuilder = this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( ConfigurationBuilder .class ) ; verify ( org.springframework.boot.autoconfigure.cache.ConfigurationBuilder , times ( NUMBER ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = JCachingProvider .class . java.lang.String ( ) ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String , STRING , STRING ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = JCachingProvider .class . java.lang.String ( ) ; java.lang.String java.lang.String = STRING ; void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING + java.lang.String , STRING + java.lang.String ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; Resource org.springframework.boot.autoconfigure.cache.Resource = new ClassPathResource ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheManager ( ) . getURI ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.cache.Resource . getURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = HazelcastCachingProvider .class . java.lang.String ( ) ; try { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.JCacheWithCustomizerConfiguration .class , STRING , STRING + java.lang.String , STRING , STRING ) ; JCacheCacheManager org.springframework.boot.autoconfigure.cache.JCacheCacheManager = T ( JCacheCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.JCacheCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; } finally { Caching . getCachingProvider ( java.lang.String ) . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING ) ; CaffeineCacheManager org.springframework.boot.autoconfigure.cache.CaffeineCacheManager = T ( CaffeineCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.CaffeineCacheManager . getCacheNames ( ) ) . containsOnly ( STRING ) ; Cache org.springframework.boot.autoconfigure.cache.Cache = org.springframework.boot.autoconfigure.cache.CaffeineCacheManager . getCache ( STRING ) ; org.springframework.boot.autoconfigure.cache.Cache . get ( STRING ) ; assertThat ( ( ( CaffeineCache ) org.springframework.boot.autoconfigure.cache.Cache ) . getNativeCache ( ) . stats ( ) . missCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheAndCustomizersConfiguration .class , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CaffeineCacheBuilderConfiguration .class , STRING , STRING ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CaffeineCacheSpecConfiguration .class , STRING , STRING , STRING ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.DefaultCacheConfiguration .class , STRING , STRING , STRING , STRING ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { CaffeineCacheManager org.springframework.boot.autoconfigure.cache.CaffeineCacheManager = T ( CaffeineCacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.CaffeineCacheManager . getCacheNames ( ) ) . containsOnly ( STRING , STRING ) ; Cache org.springframework.boot.autoconfigure.cache.Cache = org.springframework.boot.autoconfigure.cache.CaffeineCacheManager . getCache ( STRING ) ; org.springframework.boot.autoconfigure.cache.Cache . get ( STRING ) ; assertThat ( ( ( CaffeineCache ) org.springframework.boot.autoconfigure.cache.Cache ) . getNativeCache ( ) . stats ( ) . missCount ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.boot.autoconfigure.cache.CacheManager > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { CacheManager org.springframework.boot.autoconfigure.cache.CacheManager = this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBean ( CacheManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.cache.CacheManager ) . as ( STRING ) . isInstanceOf ( java.lang.Class<T> ) ; return java.lang.Class<T> . T ( org.springframework.boot.autoconfigure.cache.CacheManager ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { void ( java.lang.Class<> , STRING + java.lang.String ) ; CacheManager org.springframework.boot.autoconfigure.cache.CacheManager = T ( CacheManager .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> < java.lang.String , org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> = this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . getBeansOfType ( org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer .class ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> < java.lang.String , org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer > java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> : java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer>> ( ) ) { if ( java.util.List<java.lang.String> . boolean ( java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> . java.lang.String ( ) ) ) { java.util.List<java.lang.String> . boolean ( java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> . java.lang.String ( ) ) ; assertThat ( java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> . org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer ( ) . org.springframework.boot.autoconfigure.cache.CacheManager ) . isSameAs ( org.springframework.boot.autoconfigure.cache.CacheManager ) ; } else { assertThat ( java.util.Map.Entry<java.lang.String,org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer> . org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer ( ) . org.springframework.boot.autoconfigure.cache.CacheManager ) . isNull ( ) ; } } assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { void ( new java.lang.Class [] { java.lang.Class<> } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . register ( CacheAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.cache.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.Cache org.springframework.boot.autoconfigure.cache.Cache ( ) { return new ConcurrentMapCache ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.Cache org.springframework.boot.autoconfigure.cache.Cache ( ) { return new ConcurrentMapCache ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.Bucket org.springframework.boot.autoconfigure.cache.Bucket ( ) { BucketManager org.springframework.boot.autoconfigure.cache.BucketManager = mock ( BucketManager .class ) ; Bucket org.springframework.boot.autoconfigure.cache.Bucket = mock ( Bucket .class ) ; given ( org.springframework.boot.autoconfigure.cache.Bucket . bucketManager ( ) ) . willReturn ( org.springframework.boot.autoconfigure.cache.BucketManager ) ; return org.springframework.boot.autoconfigure.cache.Bucket ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.RedisTemplate<?,?> < ? , ? > org.springframework.boot.autoconfigure.cache.RedisTemplate<?,?> ( ) { return mock ( RedisTemplate .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CompleteConfiguration<?,?> < ? , ? > org.springframework.boot.autoconfigure.cache.CompleteConfiguration<?,?> ( ) { return mock ( CompleteConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax . javax.cache . javax.cache.CacheManager javax.cache.CacheManager ( ) { javax . javax.cache . javax.cache javax.cache.CacheManager = mock ( javax . javax.cache . javax.cache .class ) ; given ( javax.cache.CacheManager . getCacheNames ( ) ) . willReturn ( java.util.Collections .< java.lang.String > java.util.List<java.lang.String> ( ) ) ; return javax.cache.CacheManager ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer ( ) { return new JCacheManagerCustomizer ( ) { @ java.lang.Override public void void ( javax . javax.cache . javax.cache javax.cache.CacheManager ) { MutableConfiguration < ? , ? > org.springframework.boot.autoconfigure.cache.MutableConfiguration<?,?> = new MutableConfiguration <> ( ) ; org.springframework.boot.autoconfigure.cache.MutableConfiguration<,> . setExpiryPolicyFactory ( CreatedExpiryPolicy . factoryOf ( Duration . TEN_MINUTES ) ) ; org.springframework.boot.autoconfigure.cache.MutableConfiguration<,> . setStatisticsEnabled ( true ) ; javax.cache.CacheManager . createCache ( STRING , org.springframework.boot.autoconfigure.cache.MutableConfiguration<,> ) ; javax.cache.CacheManager . destroyCache ( STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax . javax.cache . javax.cache javax.cache.CacheManager ) { MutableConfiguration < ? , ? > org.springframework.boot.autoconfigure.cache.MutableConfiguration<?,?> = new MutableConfiguration <> ( ) ; org.springframework.boot.autoconfigure.cache.MutableConfiguration<,> . setExpiryPolicyFactory ( CreatedExpiryPolicy . factoryOf ( Duration . TEN_MINUTES ) ) ; org.springframework.boot.autoconfigure.cache.MutableConfiguration<,> . setStatisticsEnabled ( true ) ; javax.cache.CacheManager . createCache ( STRING , org.springframework.boot.autoconfigure.cache.MutableConfiguration<,> ) ; javax.cache.CacheManager . destroyCache ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public net . net . net . net.sf.ehcache.CacheManager net.sf.ehcache.CacheManager ( ) { net . net . net . net net.sf.ehcache.CacheManager = mock ( net . net . net . net .class ) ; given ( net.sf.ehcache.CacheManager . getStatus ( ) ) . willReturn ( Status . STATUS_ALIVE ) ; given ( net.sf.ehcache.CacheManager . getCacheNames ( ) ) . willReturn ( new java.lang.String [ NUMBER ] ) ; return net.sf.ehcache.CacheManager ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.HazelcastInstance org.springframework.boot.autoconfigure.cache.HazelcastInstance ( ) { return mock ( HazelcastInstance .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.ConfigurationBuilder org.springframework.boot.autoconfigure.cache.ConfigurationBuilder ( ) { ConfigurationBuilder org.springframework.boot.autoconfigure.cache.ConfigurationBuilder = mock ( ConfigurationBuilder .class ) ; given ( org.springframework.boot.autoconfigure.cache.ConfigurationBuilder . build ( ) ) . willReturn ( new ConfigurationBuilder ( ) . build ( ) ) ; return org.springframework.boot.autoconfigure.cache.ConfigurationBuilder ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManager org.springframework.boot.autoconfigure.cache.CacheManager ( ) { return new ConcurrentMapCacheManager ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.boot.autoconfigure.cache.CacheManager org.springframework.boot.autoconfigure.cache.CacheManager ( ) { return new ConcurrentMapCacheManager ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.boot.autoconfigure.cache.CacheResolver org.springframework.boot.autoconfigure.cache.CacheResolver ( ) { return new CacheResolver ( ) { @ java.lang.Override public java.util.Collection<? extends org.springframework.boot.autoconfigure.cache.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.boot.autoconfigure.cache.Cache> ( CacheOperationInvocationContext < ? > org.springframework.boot.autoconfigure.cache.CacheOperationInvocationContext<?> ) { return java.util.Collections . java.util.Set ( mock ( Cache .class ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<? extends org.springframework.boot.autoconfigure.cache.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.boot.autoconfigure.cache.Cache> ( CacheOperationInvocationContext < ? > org.springframework.boot.autoconfigure.cache.CacheOperationInvocationContext<?> ) { return java.util.Collections . java.util.Set ( mock ( Cache .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheResolver org.springframework.boot.autoconfigure.cache.CacheResolver ( ) { return mock ( CacheResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.cache.Caffeine<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.boot.autoconfigure.cache.Caffeine<java.lang.Object,java.lang.Object> ( ) { return Caffeine . newBuilder ( ) . recordStats ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.cache.CaffeineSpec org.springframework.boot.autoconfigure.cache.CaffeineSpec ( ) { return CaffeineSpec . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.CacheManager> < CacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.CacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.CacheManager> < CacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager> < ConcurrentMapCacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.ConcurrentMapCacheManager> < ConcurrentMapCacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.SimpleCacheManager> < SimpleCacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.SimpleCacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.SimpleCacheManager> < SimpleCacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager> < CouchbaseCacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.CouchbaseCacheManager> < CouchbaseCacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.RedisCacheManager> < RedisCacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.RedisCacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.RedisCacheManager> < RedisCacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.EhCacheCacheManager> < EhCacheCacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.EhCacheCacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.EhCacheCacheManager> < EhCacheCacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.HazelcastCacheManager> < HazelcastCacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.HazelcastCacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.HazelcastCacheManager> < HazelcastCacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager> < SpringEmbeddedCacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.SpringEmbeddedCacheManager> < SpringEmbeddedCacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.CaffeineCacheManager> < CaffeineCacheManager > org.springframework.boot.autoconfigure.cache.CacheManagerCustomizer<org.springframework.boot.autoconfigure.cache.CaffeineCacheManager> ( ) { return new org.springframework.boot.autoconfigure.cache.CacheAutoConfigurationTests.CacheManagerTestCustomizer<org.springframework.boot.autoconfigure.cache.CaffeineCacheManager> < CaffeineCacheManager > ( ) {			} ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( T T ) { if ( this . T != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . T = T ; }  <METHOD_END>
