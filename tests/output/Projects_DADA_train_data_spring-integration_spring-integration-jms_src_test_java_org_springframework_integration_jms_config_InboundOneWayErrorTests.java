<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.jms.config.InboundOneWayErrorTests> ( ) ) ; JmsTemplate org.springframework.integration.jms.config.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , ConnectionFactory .class ) ) ; Destination org.springframework.integration.jms.config.Destination = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; org.springframework.integration.jms.config.JmsTemplate . send ( org.springframework.integration.jms.config.Destination , ( MessageCreator ) session -> session . createTextMessage ( STRING ) ) ; org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler .class ) ; org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler . java.lang.Throwable ) ; assertNotNull ( org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler . java.lang.Throwable . java.lang.Throwable ( ) ) ; assertEquals ( STRING , org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler . java.lang.Throwable . java.lang.Throwable ( ) . java.lang.String ( ) ) ; PollableChannel org.springframework.integration.jms.config.PollableChannel = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; assertNull ( org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.jms.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.jms.config.InboundOneWayErrorTests> ( ) ) ; JmsTemplate org.springframework.integration.jms.config.JmsTemplate = new JmsTemplate ( org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , ConnectionFactory .class ) ) ; Destination org.springframework.integration.jms.config.Destination = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , Destination .class ) ; org.springframework.integration.jms.config.JmsTemplate . send ( org.springframework.integration.jms.config.Destination , ( MessageCreator ) session -> session . createTextMessage ( STRING ) ) ; PollableChannel org.springframework.integration.jms.config.PollableChannel = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.jms.config.Message<?> = org.springframework.integration.jms.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.config.Message<> ) ; assertEquals ( MessageHandlingException .class , org.springframework.integration.jms.config.Message<> . getPayload ( ) . getClass ( ) ) ; MessageHandlingException org.springframework.integration.jms.config.MessageHandlingException = ( MessageHandlingException ) org.springframework.integration.jms.config.Message<> . getPayload ( ) ; assertNotNull ( org.springframework.integration.jms.config.MessageHandlingException . getCause ( ) ) ; assertEquals ( org.springframework.integration.jms.config.InboundOneWayErrorTests.TestException .class , org.springframework.integration.jms.config.MessageHandlingException . getCause ( ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.integration.jms.config.MessageHandlingException . getCause ( ) . getMessage ( ) ) ; org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler = org.springframework.integration.jms.config.ClassPathXmlApplicationContext . getBean ( STRING , org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler .class ) ; assertNull ( org.springframework.integration.jms.config.InboundOneWayErrorTests.TestErrorHandler . java.lang.Throwable ) ; org.springframework.integration.jms.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { throw new org.springframework.integration.jms.config.InboundOneWayErrorTests.TestException ( STRING + java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
