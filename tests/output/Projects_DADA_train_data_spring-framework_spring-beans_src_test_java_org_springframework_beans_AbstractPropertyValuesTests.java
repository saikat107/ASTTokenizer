<METHOD_START> protected void void ( PropertyValues org.springframework.beans.PropertyValues ) throws java.lang.Exception { assertTrue ( STRING , org.springframework.beans.PropertyValues . getPropertyValues ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.PropertyValues . contains ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.PropertyValues . contains ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.PropertyValues . contains ( STRING ) ) ; assertTrue ( STRING , ! org.springframework.beans.PropertyValues . contains ( STRING ) ) ; PropertyValue [] org.springframework.beans.PropertyValue[] = org.springframework.beans.PropertyValues . getPropertyValues ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; for ( int int = NUMBER ; int < ps . length ; int ++ ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.beans.PropertyValue[] [ int ] . getName ( ) ) ; assertTrue ( STRING , java.lang.Object != null ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.String ) ; assertTrue ( STRING , java.lang.Object . boolean ( org.springframework.beans.PropertyValue[] [ int ] . getValue ( ) ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.beans.PropertyValue[] [ int ] . getName ( ) ) ; } assertTrue ( STRING , java.util.Map<java.lang.String,java.lang.String> . int ( ) == NUMBER ) ; }  <METHOD_END>
