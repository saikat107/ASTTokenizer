<METHOD_START> @ ExceptionHandler ( { HttpRequestMethodNotSupportedException .class , HttpMediaTypeNotSupportedException .class , HttpMediaTypeNotAcceptableException .class , MissingPathVariableException .class , MissingServletRequestParameterException .class , ServletRequestBindingException .class , ConversionNotSupportedException .class , TypeMismatchException .class , HttpMessageNotReadableException .class , HttpMessageNotWritableException .class , MethodArgumentNotValidException .class , MissingServletRequestPartException .class , BindException .class , NoHandlerFoundException .class , AsyncRequestTimeoutException .class } ) public final org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception java.lang.Exception , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders = new HttpHeaders ( ) ; if ( java.lang.Exception instanceof HttpRequestMethodNotSupportedException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . METHOD_NOT_ALLOWED ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( HttpRequestMethodNotSupportedException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof HttpMediaTypeNotSupportedException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . UNSUPPORTED_MEDIA_TYPE ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( HttpMediaTypeNotSupportedException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof HttpMediaTypeNotAcceptableException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . NOT_ACCEPTABLE ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( HttpMediaTypeNotAcceptableException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof MissingPathVariableException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . INTERNAL_SERVER_ERROR ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( MissingPathVariableException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof MissingServletRequestParameterException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . BAD_REQUEST ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( MissingServletRequestParameterException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof ServletRequestBindingException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . BAD_REQUEST ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( ServletRequestBindingException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof ConversionNotSupportedException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . INTERNAL_SERVER_ERROR ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( ConversionNotSupportedException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof TypeMismatchException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . BAD_REQUEST ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( TypeMismatchException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof HttpMessageNotReadableException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . BAD_REQUEST ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( HttpMessageNotReadableException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof HttpMessageNotWritableException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . INTERNAL_SERVER_ERROR ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( HttpMessageNotWritableException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof MethodArgumentNotValidException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . BAD_REQUEST ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( MethodArgumentNotValidException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof MissingServletRequestPartException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . BAD_REQUEST ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( MissingServletRequestPartException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof BindException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . BAD_REQUEST ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( BindException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof NoHandlerFoundException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . NOT_FOUND ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( NoHandlerFoundException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else if ( java.lang.Exception instanceof AsyncRequestTimeoutException ) { HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . SERVICE_UNAVAILABLE ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ( AsyncRequestTimeoutException ) java.lang.Exception , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } else { if ( org.springframework.web.servlet.mvc.method.annotation.Log . isWarnEnabled ( ) ) { org.springframework.web.servlet.mvc.method.annotation.Log . warn ( STRING + java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) . java.lang.String ( ) ) ; } HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus = HttpStatus . INTERNAL_SERVER_ERROR ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception java.lang.Exception , java.lang.Object java.lang.Object , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { if ( HttpStatus . INTERNAL_SERVER_ERROR . equals ( org.springframework.web.servlet.mvc.method.annotation.HttpStatus ) ) { org.springframework.web.servlet.mvc.method.annotation.WebRequest . setAttribute ( WebUtils . ERROR_EXCEPTION_ATTRIBUTE , java.lang.Exception , WebRequest . SCOPE_REQUEST ) ; } return new ResponseEntity <> ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( HttpRequestMethodNotSupportedException org.springframework.web.servlet.mvc.method.annotation.HttpRequestMethodNotSupportedException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { org.springframework.web.servlet.mvc.method.annotation.Log . warn ( org.springframework.web.servlet.mvc.method.annotation.HttpRequestMethodNotSupportedException . getMessage ( ) ) ; java.util.Set<org.springframework.web.servlet.mvc.method.annotation.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.servlet.mvc.method.annotation.HttpMethod> = org.springframework.web.servlet.mvc.method.annotation.HttpRequestMethodNotSupportedException . getSupportedHttpMethods ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.Set<org.springframework.web.servlet.mvc.method.annotation.HttpMethod> ) ) { org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . setAllow ( java.util.Set<org.springframework.web.servlet.mvc.method.annotation.HttpMethod> ) ; } return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.HttpRequestMethodNotSupportedException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( HttpMediaTypeNotSupportedException org.springframework.web.servlet.mvc.method.annotation.HttpMediaTypeNotSupportedException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> < MediaType > java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> = org.springframework.web.servlet.mvc.method.annotation.HttpMediaTypeNotSupportedException . getSupportedMediaTypes ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> ) ) { org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . setAccept ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> ) ; } return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.HttpMediaTypeNotSupportedException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( HttpMediaTypeNotAcceptableException org.springframework.web.servlet.mvc.method.annotation.HttpMediaTypeNotAcceptableException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.HttpMediaTypeNotAcceptableException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( MissingPathVariableException org.springframework.web.servlet.mvc.method.annotation.MissingPathVariableException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.MissingPathVariableException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( MissingServletRequestParameterException org.springframework.web.servlet.mvc.method.annotation.MissingServletRequestParameterException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.MissingServletRequestParameterException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ServletRequestBindingException org.springframework.web.servlet.mvc.method.annotation.ServletRequestBindingException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.ServletRequestBindingException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ConversionNotSupportedException org.springframework.web.servlet.mvc.method.annotation.ConversionNotSupportedException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.ConversionNotSupportedException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( TypeMismatchException org.springframework.web.servlet.mvc.method.annotation.TypeMismatchException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.TypeMismatchException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( HttpMessageNotReadableException org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotReadableException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotReadableException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( HttpMessageNotWritableException org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotWritableException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotWritableException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( MethodArgumentNotValidException org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( MissingServletRequestPartException org.springframework.web.servlet.mvc.method.annotation.MissingServletRequestPartException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.MissingServletRequestPartException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( BindException org.springframework.web.servlet.mvc.method.annotation.BindException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.BindException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( NoHandlerFoundException org.springframework.web.servlet.mvc.method.annotation.NoHandlerFoundException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.NoHandlerFoundException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( AsyncRequestTimeoutException org.springframework.web.servlet.mvc.method.annotation.AsyncRequestTimeoutException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { if ( org.springframework.web.servlet.mvc.method.annotation.WebRequest instanceof ServletWebRequest ) { ServletWebRequest org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest = ( ServletWebRequest ) org.springframework.web.servlet.mvc.method.annotation.WebRequest ; HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest = org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getNativeRequest ( HttpServletRequest .class ) ; HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse = org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest . getNativeResponse ( HttpServletResponse .class ) ; if ( org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . isCommitted ( ) ) { if ( org.springframework.web.servlet.mvc.method.annotation.Log . isErrorEnabled ( ) ) { org.springframework.web.servlet.mvc.method.annotation.Log . error ( STRING + org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getMethod ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest . getRequestURI ( ) + STRING ) ; } return null ; } } return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( org.springframework.web.servlet.mvc.method.annotation.AsyncRequestTimeoutException , null , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
