<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClientHttpRequest org.springframework.test.web.reactive.server.ClientHttpRequest = new MockClientHttpRequest ( HttpMethod . GET , STRING ) ; ClientHttpResponse org.springframework.test.web.reactive.server.ClientHttpResponse = new MockClientHttpResponse ( HttpStatus . OK ) ; ClientHttpConnector org.springframework.test.web.reactive.server.ClientHttpConnector = ( method , uri , fn ) -> fn . apply ( request ) . then ( Mono . just ( response ) ) ; ClientRequest org.springframework.test.web.reactive.server.ClientRequest = ClientRequest . method ( HttpMethod . GET , java.net.URI . java.net.URI ( STRING ) ) . header ( WiretapConnector . REQUEST_ID_HEADER_NAME , STRING ) . build ( ) ; WiretapConnector org.springframework.test.web.reactive.server.WiretapConnector = new WiretapConnector ( org.springframework.test.web.reactive.server.ClientHttpConnector ) ; ExchangeFunction org.springframework.test.web.reactive.server.ExchangeFunction = ExchangeFunctions . create ( org.springframework.test.web.reactive.server.WiretapConnector ) ; org.springframework.test.web.reactive.server.ExchangeFunction . exchange ( org.springframework.test.web.reactive.server.ClientRequest ) . block ( java.time.Duration ( NUMBER ) ) ; ExchangeResult org.springframework.test.web.reactive.server.ExchangeResult = org.springframework.test.web.reactive.server.WiretapConnector . claimRequest ( STRING ) ; assertNotNull ( org.springframework.test.web.reactive.server.ExchangeResult ) ; assertEquals ( HttpMethod . GET , org.springframework.test.web.reactive.server.ExchangeResult . getMethod ( ) ) ; assertEquals ( STRING , org.springframework.test.web.reactive.server.ExchangeResult . getUrl ( ) . toString ( ) ) ; }  <METHOD_END>
