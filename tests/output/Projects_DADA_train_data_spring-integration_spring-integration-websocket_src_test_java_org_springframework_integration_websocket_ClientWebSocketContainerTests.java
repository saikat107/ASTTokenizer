<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.websocket.TomcatWebSocketTestServer . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.integration.websocket.TomcatWebSocketTestServer . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; StandardWebSocketClient org.springframework.integration.websocket.StandardWebSocketClient = new StandardWebSocketClient ( ) { @ java.lang.Override protected org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> < WebSocketSession > org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> ( WebSocketHandler org.springframework.integration.websocket.WebSocketHandler , HttpHeaders org.springframework.integration.websocket.HttpHeaders , java.net.URI java.net.URI , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<org.springframework.integration.websocket.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.integration.websocket.WebSocketExtension> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { ListenableFuture < WebSocketSession > org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> = super. doHandshakeInternal ( org.springframework.integration.websocket.WebSocketHandler , org.springframework.integration.websocket.HttpHeaders , java.net.URI , java.util.List<java.lang.String> , java.util.List<org.springframework.integration.websocket.WebSocketExtension> , java.util.Map<java.lang.String,java.lang.Object> ) ; if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> . cancel ( true ) ; } return org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> ; } } ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( Constants . IO_TIMEOUT_MS_PROPERTY , STRING + ( Constants . IO_TIMEOUT_MS_DEFAULT * NUMBER ) ) ; org.springframework.integration.websocket.StandardWebSocketClient . setUserProperties ( java.util.Map<java.lang.String,java.lang.Object> ) ; ClientWebSocketContainer org.springframework.integration.websocket.ClientWebSocketContainer = new ClientWebSocketContainer ( org.springframework.integration.websocket.StandardWebSocketClient , org.springframework.integration.websocket.TomcatWebSocketTestServer . getWsBaseUrl ( ) + STRING ) ; org.springframework.integration.websocket.ClientWebSocketContainerTests.TestWebSocketListener org.springframework.integration.websocket.ClientWebSocketContainerTests.TestWebSocketListener = new org.springframework.integration.websocket.ClientWebSocketContainerTests.TestWebSocketListener ( ) ; org.springframework.integration.websocket.ClientWebSocketContainer . setMessageListener ( org.springframework.integration.websocket.ClientWebSocketContainerTests.TestWebSocketListener ) ; org.springframework.integration.websocket.ClientWebSocketContainer . setConnectionTimeout ( NUMBER ) ; org.springframework.integration.websocket.ClientWebSocketContainer . start ( ) ; WebSocketSession org.springframework.integration.websocket.WebSocketSession = org.springframework.integration.websocket.ClientWebSocketContainer . getSession ( null ) ; assertNotNull ( org.springframework.integration.websocket.WebSocketSession ) ; assertTrue ( org.springframework.integration.websocket.WebSocketSession . isOpen ( ) ) ; assertEquals ( STRING , org.springframework.integration.websocket.WebSocketSession . getAcceptedProtocol ( ) ) ; org.springframework.integration.websocket.WebSocketSession . sendMessage ( new PingMessage ( ) ) ; assertTrue ( org.springframework.integration.websocket.ClientWebSocketContainerTests.TestWebSocketListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.websocket.ClientWebSocketContainer . stop ( ) ; try { org.springframework.integration.websocket.ClientWebSocketContainer . getSession ( null ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertEquals ( java.lang.Exception . java.lang.String ( ) , STRING ) ; } assertTrue ( org.springframework.integration.websocket.ClientWebSocketContainerTests.TestWebSocketListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertFalse ( org.springframework.integration.websocket.WebSocketSession . isOpen ( ) ) ; assertTrue ( org.springframework.integration.websocket.ClientWebSocketContainerTests.TestWebSocketListener . boolean ) ; assertThat ( org.springframework.integration.websocket.ClientWebSocketContainerTests.TestWebSocketListener . org.springframework.integration.websocket.WebSocketMessage<> , instanceOf ( PongMessage .class ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; org.springframework.integration.websocket.ClientWebSocketContainer . start ( ) ; try { org.springframework.integration.websocket.ClientWebSocketContainer . getSession ( null ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( java.util.concurrent.CancellationException .class ) ) ; } java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; org.springframework.integration.websocket.ClientWebSocketContainer . start ( ) ; org.springframework.integration.websocket.WebSocketSession = org.springframework.integration.websocket.ClientWebSocketContainer . getSession ( null ) ; assertNotNull ( org.springframework.integration.websocket.WebSocketSession ) ; assertTrue ( org.springframework.integration.websocket.WebSocketSession . isOpen ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> < WebSocketSession > org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> ( WebSocketHandler org.springframework.integration.websocket.WebSocketHandler , HttpHeaders org.springframework.integration.websocket.HttpHeaders , java.net.URI java.net.URI , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<org.springframework.integration.websocket.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.integration.websocket.WebSocketExtension> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { ListenableFuture < WebSocketSession > org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> = super. doHandshakeInternal ( org.springframework.integration.websocket.WebSocketHandler , org.springframework.integration.websocket.HttpHeaders , java.net.URI , java.util.List<java.lang.String> , java.util.List<org.springframework.integration.websocket.WebSocketExtension> , java.util.Map<java.lang.String,java.lang.Object> ) ; if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> . cancel ( true ) ; } return org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession , WebSocketMessage < ? > org.springframework.integration.websocket.WebSocketMessage<?> ) throws java.lang.Exception { this . org.springframework.integration.websocket.WebSocketMessage<?> = org.springframework.integration.websocket.WebSocketMessage<> ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession ) throws java.lang.Exception { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession , CloseStatus org.springframework.integration.websocket.CloseStatus ) throws java.lang.Exception { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; }  <METHOD_END>
