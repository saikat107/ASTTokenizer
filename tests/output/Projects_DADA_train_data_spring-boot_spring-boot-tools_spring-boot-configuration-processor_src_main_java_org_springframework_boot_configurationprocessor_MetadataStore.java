<METHOD_START> public void ( javax.annotation.processing.ProcessingEnvironment javax.annotation.processing.ProcessingEnvironment ) { this . javax.annotation.processing.ProcessingEnvironment = javax.annotation.processing.ProcessingEnvironment ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.configurationprocessor.ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata ( ) { try { return org.springframework.boot.configurationprocessor.ConfigurationMetadata ( javax.tools.FileObject ( ) . java.io.InputStream ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { return null ; } }  <METHOD_END>
<METHOD_START> public void void ( ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata ) throws java.io.IOException { if ( ! org.springframework.boot.configurationprocessor.ConfigurationMetadata . getItems ( ) . isEmpty ( ) ) { java.io.OutputStream java.io.OutputStream = javax.tools.FileObject ( ) . java.io.OutputStream ( ) ; try { new JsonMarshaller ( ) . write ( org.springframework.boot.configurationprocessor.ConfigurationMetadata , java.io.OutputStream ) ; } finally { java.io.OutputStream . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.configurationprocessor.ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata ( ) java.io.IOException { return org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.io.InputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.configurationprocessor.ConfigurationMetadata org.springframework.boot.configurationprocessor.ConfigurationMetadata ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { try { return new JsonMarshaller ( ) . read ( java.io.InputStream ) ; } catch ( java.io.IOException java.io.IOException ) { return null ; } catch ( java.lang.Exception java.lang.Exception ) { throw new InvalidConfigurationMetadataException ( STRING + java.lang.String + STRING + java.lang.Exception . java.lang.String ( ) , javax.tools.Diagnostic . javax.tools.Diagnostic.Kind . javax.tools.Diagnostic.Kind ) ; } finally { java.io.InputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> private javax.tools.FileObject javax.tools.FileObject ( ) java.io.IOException { javax.tools.FileObject javax.tools.FileObject = this . javax.annotation.processing.ProcessingEnvironment . javax.annotation.processing.Filer ( ) . javax.tools.FileObject ( javax.tools.StandardLocation . javax.tools.StandardLocation , STRING , java.lang.String ) ; return javax.tools.FileObject ; }  <METHOD_END>
<METHOD_START> private javax.tools.FileObject javax.tools.FileObject ( ) java.io.IOException { javax.tools.FileObject javax.tools.FileObject = this . javax.annotation.processing.ProcessingEnvironment . javax.annotation.processing.Filer ( ) . javax.tools.FileObject ( javax.tools.StandardLocation . javax.tools.StandardLocation , STRING , java.lang.String ) ; return javax.tools.FileObject ; }  <METHOD_END>
<METHOD_START> private java.io.InputStream java.io.InputStream ( ) java.io.IOException { javax.tools.FileObject javax.tools.FileObject = this . javax.annotation.processing.ProcessingEnvironment . javax.annotation.processing.Filer ( ) . javax.tools.FileObject ( javax.tools.StandardLocation . javax.tools.StandardLocation , STRING , java.lang.String ) ; java.io.File java.io.File = new java.io.File ( javax.tools.FileObject . java.net.URI ( ) ) ; if ( ! java.io.File . boolean ( ) ) { java.lang.String java.lang.String = java.io.File . java.lang.String ( ) ; int int = java.lang.String . int ( java.lang.String ) ; if ( int >= NUMBER ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) + java.lang.String + java.lang.String . java.lang.String ( int + java.lang.String . int ( ) ) ; java.io.File = new java.io.File ( java.lang.String ) ; } } return ( java.io.File . boolean ( ) ? new java.io.FileInputStream ( java.io.File ) : javax.tools.FileObject . java.net.URI ( ) . java.net.URL ( ) . java.io.InputStream ( ) ) ; }  <METHOD_END>
