<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.config.IdGeneratorConfigurerTests.MyIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; MessageHeaders org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertNotEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertNotEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHeaders , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( JdkIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( SimpleIncrementingIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; MessageHeaders org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHeaders , STRING ) ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; MessageHeaders org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHeaders , STRING ) ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.config.IdGeneratorConfigurerTests.MyIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; MessageHeaders org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.config.IdGeneratorConfigurerTests.MyIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertNotEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertNotEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHeaders , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.config.IdGeneratorConfigurerTests.MyIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; MessageHeaders org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.config.IdGeneratorConfigurerTests.MyIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertNotEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertNotEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHeaders , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.config.IdGeneratorConfigurerTests.MyIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; MessageHeaders org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.config.IdGeneratorConfigurerTests.MyIdGenerator2 .class ) ) ; try { org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.integration.config.BeanDefinitionStoreException ) { assertEquals ( STRING , org.springframework.integration.config.BeanDefinitionStoreException . getMessage ( ) ) ; } org.springframework.integration.config.GenericApplicationContext . close ( ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( JdkIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; MessageHeaders org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertSame ( org.springframework.integration.config.GenericApplicationContext . getBean ( IdGenerator .class ) , TestUtils . getPropertyValue ( org.springframework.integration.config.MessageHeaders , STRING ) ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.config.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( DefaultConfiguringBeanFactoryPostProcessor .class ) ) ; org.springframework.integration.config.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( SimpleIncrementingIdGenerator .class ) ) ; org.springframework.integration.config.GenericApplicationContext . refresh ( ) ; IdGenerator org.springframework.integration.config.IdGenerator = org.springframework.integration.config.GenericApplicationContext . getBean ( IdGenerator .class ) ; MessageHeaders org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = TestUtils . getPropertyValue ( org.springframework.integration.config.IdGenerator , STRING , java.util.concurrent.atomic.AtomicLong .class ) ; java.util.concurrent.atomic.AtomicLong . void ( NUMBER ) ; org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; org.springframework.integration.config.MessageHeaders = new MessageHeaders ( null ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getMostSignificantBits ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.MessageHeaders . getId ( ) . getLeastSignificantBits ( ) ) ; org.springframework.integration.config.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.UUID java.util.UUID ( ) { return new java.util.UUID ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.UUID java.util.UUID ( ) { return new java.util.UUID ( NUMBER , NUMBER ) ; }  <METHOD_END>
