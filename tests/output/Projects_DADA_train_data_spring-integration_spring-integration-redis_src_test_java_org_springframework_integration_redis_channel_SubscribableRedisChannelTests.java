<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.channel.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; SubscribableRedisChannel org.springframework.integration.redis.channel.SubscribableRedisChannel = new SubscribableRedisChannel ( org.springframework.integration.redis.channel.RedisConnectionFactory , STRING ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . afterPropertiesSet ( ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . start ( ) ; this . awaitContainerSubscribed ( TestUtils . getPropertyValue ( org.springframework.integration.redis.channel.SubscribableRedisChannel , STRING , RedisMessageListenerContainer .class ) ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; MessageHandler org.springframework.integration.redis.channel.MessageHandler = message -> latch . countDown ( ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . subscribe ( org.springframework.integration.redis.channel.MessageHandler ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.channel.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; SubscribableRedisChannel org.springframework.integration.redis.channel.SubscribableRedisChannel = new SubscribableRedisChannel ( org.springframework.integration.redis.channel.RedisConnectionFactory , STRING ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . setBeanName ( STRING ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.redis.channel.SubscribableRedisChannel . afterPropertiesSet ( ) ; RedisMessageListenerContainer org.springframework.integration.redis.channel.RedisMessageListenerContainer = TestUtils . getPropertyValue ( org.springframework.integration.redis.channel.SubscribableRedisChannel , STRING , RedisMessageListenerContainer .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<?,java.util.Set<org.springframework.integration.redis.channel.MessageListenerAdapter>> < ? , java.util.Set<org.springframework.integration.redis.channel.MessageListenerAdapter> < MessageListenerAdapter > > java.util.Map<?,java.util.Set<org.springframework.integration.redis.channel.MessageListenerAdapter>> = ( java.util.Map<?,java.util.Set<org.springframework.integration.redis.channel.MessageListenerAdapter>> < ? , java.util.Set<org.springframework.integration.redis.channel.MessageListenerAdapter> < MessageListenerAdapter > > ) TestUtils . getPropertyValue ( org.springframework.integration.redis.channel.RedisMessageListenerContainer , STRING ) ; MessageListenerAdapter org.springframework.integration.redis.channel.MessageListenerAdapter = java.util.Map<,java.util.Set<org.springframework.integration.redis.channel.MessageListenerAdapter>> . entrySet ( ) . iterator ( ) . next ( ) . getValue ( ) . iterator ( ) . next ( ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.redis.channel.MessageListenerAdapter , STRING ) ; try { ReflectionUtils . findMethod ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , STRING , java.lang.Object .class ) . invoke ( java.lang.Object , STRING ) ; fail ( STRING ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; assertNotNull ( java.lang.Throwable ) ; assertThat ( java.lang.Throwable . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
