<METHOD_START> @ Bean java.lang.String java.lang.String ( ) { return org.springframework.data.rest.webmvc.solr.TemporaryFolder . getRoot ( ) . getAbsolutePath ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { super. setUp ( ) ; org.springframework.data.rest.webmvc.solr.ProductRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.rest.webmvc.solr.Product , org.springframework.data.rest.webmvc.solr.Product , org.springframework.data.rest.webmvc.solr.Product ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.rest.webmvc.solr.ProductRepository . deleteAll ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.solr.MockHttpServletResponse = client . request ( STRING ) ; Link org.springframework.data.rest.webmvc.solr.Link = client . assertHasLinkWithRel ( Link . REL_NEXT , org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ) ; assertDoesNotHaveLinkWithRel ( Link . REL_PREVIOUS , org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ) ; org.springframework.data.rest.webmvc.solr.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.solr.Link ) ; client . assertHasLinkWithRel ( Link . REL_PREVIOUS , org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ) ; org.springframework.data.rest.webmvc.solr.Link = client . assertHasLinkWithRel ( Link . REL_NEXT , org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ) ; org.springframework.data.rest.webmvc.solr.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.solr.Link ) ; client . assertHasLinkWithRel ( Link . REL_PREVIOUS , org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ) ; assertDoesNotHaveLinkWithRel ( Link . REL_NEXT , org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ( org.springframework.data.rest.webmvc.solr.Product ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Product org.springframework.data.rest.webmvc.solr.Product = new Product ( STRING , STRING , STRING , STRING ) ; mvc . perform ( put ( STRING , NUMBER ) . content ( org.springframework.data.rest.webmvc.solr.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.solr.Product ) ) . contentType ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isCreated ( ) ) . andReturn ( ) . getResponse ( ) ; void ( org.springframework.data.rest.webmvc.solr.Product ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { deleteAndVerify ( new Link ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( ) { return java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( Product org.springframework.data.rest.webmvc.solr.Product ) throws java.lang.Exception { org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ( org.springframework.data.rest.webmvc.solr.Product ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.solr.MockHttpServletResponse org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ( Product org.springframework.data.rest.webmvc.solr.Product ) throws java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.solr.MockHttpServletResponse = client . request ( STRING + org.springframework.data.rest.webmvc.solr.Product . getId ( ) ) ; assertJsonPathEquals ( STRING , org.springframework.data.rest.webmvc.solr.Product . getName ( ) , org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ) ; assertJsonPathEquals ( STRING , org.springframework.data.rest.webmvc.solr.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.solr.Product . getCategories ( ) ) , org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ) ; return org.springframework.data.rest.webmvc.solr.MockHttpServletResponse ; }  <METHOD_END>
