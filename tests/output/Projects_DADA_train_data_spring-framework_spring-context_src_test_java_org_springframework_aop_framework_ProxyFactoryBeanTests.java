<METHOD_START> @ Before public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.aop.framework.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestListener .class ) ) ; this . org.springframework.aop.framework.BeanFactory = new DefaultListableBeanFactory ( org.springframework.aop.framework.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( ( BeanDefinitionRegistry ) this . org.springframework.aop.framework.BeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.aop.framework.ProxyFactoryBeanTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertTrue ( STRING , java.lang.reflect.Proxy . boolean ( org.springframework.aop.framework.ITestBean . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertTrue ( STRING , java.lang.reflect.Proxy . boolean ( org.springframework.aop.framework.ITestBean . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertTrue ( STRING , java.lang.reflect.Proxy . boolean ( org.springframework.aop.framework.ITestBean . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertTrue ( STRING , java.lang.reflect.Proxy . boolean ( org.springframework.aop.framework.ITestBean . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { try { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( java.lang.String ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.aop.framework.BeanCreationException ) { AopConfigException org.springframework.aop.framework.AopConfigException = ( AopConfigException ) org.springframework.aop.framework.BeanCreationException . getCause ( ) ; assertTrue ( org.springframework.aop.framework.AopConfigException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.aop.framework.BeanCreationException ) { AopConfigException org.springframework.aop.framework.AopConfigException = ( AopConfigException ) org.springframework.aop.framework.BeanCreationException . getCause ( ) ; assertTrue ( org.springframework.aop.framework.AopConfigException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; CountingBeforeAdvice org.springframework.aop.framework.CountingBeforeAdvice = ( CountingBeforeAdvice ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.aop.framework.ITestBean . getName ( ) . equals ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; ProxyFactoryBean org.springframework.aop.framework.ProxyFactoryBean = ( ProxyFactoryBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , TestBean .class . boolean ( org.springframework.aop.framework.ProxyFactoryBean . getObjectType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.aop.framework.ITestBean . getName ( ) . equals ( STRING ) ) ; ProxyFactoryBean org.springframework.aop.framework.ProxyFactoryBean = ( ProxyFactoryBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , TestBean .class . boolean ( org.springframework.aop.framework.ProxyFactoryBean . getObjectType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; try { org.springframework.aop.framework.ITestBean . getName ( ) ; fail ( ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { assertEquals ( STRING , java.lang.UnsupportedOperationException . java.lang.String ( ) ) ; } FactoryBean < ? > org.springframework.aop.framework.FactoryBean<?> = ( ProxyFactoryBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , ITestBean .class . boolean ( org.springframework.aop.framework.FactoryBean<> . getObjectType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.aop.framework.ITestBean , org.springframework.aop.framework.ITestBean ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( org.springframework.aop.framework.ITestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( org.springframework.aop.framework.ITestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.ITestBean ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.ITestBean ; assertArrayEquals ( org.springframework.aop.framework.Advised . getAdvisors ( ) , org.springframework.aop.framework.Advised . getAdvisors ( ) ) ; int int = org.springframework.aop.framework.Advised . getAdvisors ( ) . length ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.Advised . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; assertArrayEquals ( org.springframework.aop.framework.Advised . getAdvisors ( ) , org.springframework.aop.framework.Advised . getAdvisors ( ) ) ; assertEquals ( STRING , int + NUMBER , org.springframework.aop.framework.Advised . getAdvisors ( ) . length ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( org.springframework.aop.framework.ITestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , ITestBean .class . boolean ( org.springframework.aop.framework.BeanFactory . getType ( STRING ) ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.aop.framework.ITestBean != org.springframework.aop.framework.ITestBean ) ; assertTrue ( STRING , org.springframework.aop.framework.ITestBean . equals ( org.springframework.aop.framework.ITestBean ) ) ; assertTrue ( STRING , ITestBean .class . boolean ( org.springframework.aop.framework.BeanFactory . getType ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { int int = NUMBER ; DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; SideEffectBean org.springframework.aop.framework.SideEffectBean = ( SideEffectBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.framework.SideEffectBean . getCount ( ) ) ; org.springframework.aop.framework.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.framework.SideEffectBean . getCount ( ) ) ; org.springframework.aop.framework.SideEffectBean = ( SideEffectBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( int , org.springframework.aop.framework.SideEffectBean . getCount ( ) ) ; SideEffectBean org.springframework.aop.framework.SideEffectBean = ( SideEffectBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertEquals ( int , org.springframework.aop.framework.SideEffectBean . getCount ( ) ) ; org.springframework.aop.framework.SideEffectBean . doWork ( ) ; assertEquals ( int + NUMBER , org.springframework.aop.framework.SideEffectBean . getCount ( ) ) ; SideEffectBean org.springframework.aop.framework.SideEffectBean = ( SideEffectBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertFalse ( STRING , org.springframework.aop.framework.SideEffectBean == org.springframework.aop.framework.SideEffectBean ) ; assertEquals ( int , org.springframework.aop.framework.SideEffectBean . getCount ( ) ) ; assertEquals ( int + NUMBER , org.springframework.aop.framework.SideEffectBean . getCount ( ) ) ; return org.springframework.aop.framework.SideEffectBean ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = java.lang.Object ( STRING ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( java.lang.Object ) ) ; assertFalse ( STRING , AopUtils . isJdkDynamicProxy ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; TestBean org.springframework.aop.framework.TestBean = ( TestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.TestBean . setName ( java.lang.String ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.aop.framework.ITestBean . getName ( ) . equals ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProxyFactoryBean org.springframework.aop.framework.ProxyFactoryBean = ( ProxyFactoryBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertTrue ( STRING , ITestBean .class . boolean ( org.springframework.aop.framework.ProxyFactoryBean . getObjectType ( ) ) ) ; assertTrue ( STRING , ITestBean .class . boolean ( org.springframework.aop.framework.BeanFactory . getType ( STRING ) ) ) ; org.springframework.aop.framework.ProxyFactoryBean . getObject ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.ProxyFactoryBean . getAdvisors ( ) . length ) ; assertTrue ( STRING , ITestBean .class . boolean ( org.springframework.aop.framework.ProxyFactoryBean . getObjectType ( ) ) ) ; assertTrue ( STRING , ITestBean .class . boolean ( org.springframework.aop.framework.BeanFactory . getType ( STRING ) ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.ITestBean . hashCode ( ) ; final java.lang.Exception java.lang.Exception = new java.lang.UnsupportedOperationException ( STRING ) ; org.springframework.aop.framework.ProxyFactoryBean . addAdvice ( NUMBER , new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw java.lang.Exception ; } } ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.ProxyFactoryBean . getAdvisors ( ) . length ) ; org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; try { org.springframework.aop.framework.ITestBean . toString ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception == java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.aop.framework.ITestBean . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.DefaultListableBeanFactory . getBeanDefinitionCount ( ) ) ; org.springframework.aop.framework.ProxyFactoryBeanTests.DependsOnITestBean org.springframework.aop.framework.ProxyFactoryBeanTests.DependsOnITestBean = ( org.springframework.aop.framework.ProxyFactoryBeanTests.DependsOnITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.aop.framework.ITestBean , org.springframework.aop.framework.ProxyFactoryBeanTests.DependsOnITestBean . org.springframework.aop.framework.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( STRING , org.springframework.aop.framework.BeanFactory . getBean ( STRING ) , not ( instanceOf ( TimeStamped .class ) ) ) ; ProxyFactoryBean org.springframework.aop.framework.ProxyFactoryBean = ( ProxyFactoryBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; long long = NUMBER ; TimestampIntroductionInterceptor org.springframework.aop.framework.TimestampIntroductionInterceptor = new TimestampIntroductionInterceptor ( ) ; org.springframework.aop.framework.TimestampIntroductionInterceptor . setTime ( long ) ; int int = org.springframework.aop.framework.ProxyFactoryBean . getAdvisors ( ) . length ; org.springframework.aop.framework.ProxyFactoryBean . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( org.springframework.aop.framework.TimestampIntroductionInterceptor , TimeStamped .class ) ) ; assertTrue ( org.springframework.aop.framework.ProxyFactoryBean . getAdvisors ( ) . length == int + NUMBER ) ; TimeStamped org.springframework.aop.framework.TimeStamped = ( TimeStamped ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertEquals ( long , org.springframework.aop.framework.TimeStamped . getTimeStamp ( ) ) ; org.springframework.aop.framework.ProxyFactoryBean . removeAdvice ( org.springframework.aop.framework.TimestampIntroductionInterceptor ) ; assertTrue ( org.springframework.aop.framework.ProxyFactoryBean . getAdvisors ( ) . length == int ) ; assertTrue ( org.springframework.aop.framework.TimeStamped . getTimeStamp ( ) == long ) ; assertThat ( STRING , org.springframework.aop.framework.BeanFactory . getBean ( STRING ) , not ( instanceOf ( TimeStamped .class ) ) ) ; org.springframework.aop.framework.ProxyFactoryBean . removeAdvice ( new DebugInterceptor ( ) ) ; assertTrue ( org.springframework.aop.framework.ProxyFactoryBean . getAdvisors ( ) . length == int ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.TimeStamped ; DebugInterceptor org.springframework.aop.framework.DebugInterceptor = new DebugInterceptor ( ) ; org.springframework.aop.framework.ProxyFactoryBean . addAdvice ( NUMBER , org.springframework.aop.framework.DebugInterceptor ) ; org.springframework.aop.framework.ITestBean . getSpouse ( ) ; assertTrue ( org.springframework.aop.framework.DebugInterceptor . getCount ( ) == NUMBER ) ; org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.ITestBean . getSpouse ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.DebugInterceptor . getCount ( ) ) ; org.springframework.aop.framework.ProxyFactoryBean . removeAdvice ( org.springframework.aop.framework.DebugInterceptor ) ; org.springframework.aop.framework.ITestBean . getSpouse ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.DebugInterceptor . getCount ( ) ) ; org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.ITestBean . getSpouse ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.DebugInterceptor . getCount ( ) ) ; assertEquals ( long , org.springframework.aop.framework.TimeStamped . getTimeStamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.ITestBean ; org.springframework.aop.framework.ITestBean . getAge ( ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.Advised . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.ProxyFactoryBeanTests.PointcutForVoid . void ( ) ; assertTrue ( STRING , org.springframework.aop.framework.ProxyFactoryBeanTests.PointcutForVoid . java.util.List<java.lang.String> . boolean ( ) ) ; org.springframework.aop.framework.ITestBean . getAge ( ) ; assertTrue ( STRING , org.springframework.aop.framework.ProxyFactoryBeanTests.PointcutForVoid . java.util.List<java.lang.String> . boolean ( ) ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; org.springframework.aop.framework.ITestBean . getAge ( ) ; org.springframework.aop.framework.ITestBean . setName ( STRING ) ; org.springframework.aop.framework.ITestBean . toString ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.ProxyFactoryBeanTests.PointcutForVoid . java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( org.springframework.aop.framework.ProxyFactoryBeanTests.PointcutForVoid . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) . boolean ( STRING ) ) ; assertTrue ( org.springframework.aop.framework.ProxyFactoryBeanTests.PointcutForVoid . java.util.List<java.lang.String> . java.lang.String ( NUMBER ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; MyThrowsHandler org.springframework.aop.framework.MyThrowsHandler = ( MyThrowsHandler ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; CountingBeforeAdvice org.springframework.aop.framework.CountingBeforeAdvice = ( CountingBeforeAdvice ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( ) ) ; IEcho org.springframework.aop.framework.IEcho = ( IEcho ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; int int = NUMBER ; org.springframework.aop.framework.IEcho . setA ( int ) ; assertEquals ( int , org.springframework.aop.framework.IEcho . getA ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( ) ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; try { org.springframework.aop.framework.IEcho . echoException ( NUMBER , java.lang.Exception ) ; fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( java.lang.Exception , java.lang.Exception ) ; } assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( ) ) ; java.lang.Exception = new java.io.FileNotFoundException ( ) ; try { org.springframework.aop.framework.IEcho . echoException ( NUMBER , java.lang.Exception ) ; fail ( ) ; } catch ( java.io.IOException java.io.IOException ) { assertEquals ( java.lang.Exception , java.io.IOException ) ; } assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; try { org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.aop.framework.BeanCreationException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; try { org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.aop.framework.BeanCreationException ) { assertTrue ( org.springframework.aop.framework.BeanCreationException . getCause ( ) instanceof AopConfigException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface = ( org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface . int ( ) == - NUMBER ) ; ProxyFactoryBean org.springframework.aop.framework.ProxyFactoryBean = ( ProxyFactoryBean ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.ProxyFactoryBean . getObject ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.ProxyFactoryBean . getAdvisors ( ) . length ) ; ApplicationListener < ? > org.springframework.aop.framework.ApplicationListener<?> = ( ApplicationListener < ? > ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface = ( org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface ) org.springframework.aop.framework.ApplicationListener<> ; assertTrue ( org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface . int ( ) == - NUMBER ) ; try { org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface = ( org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface ) org.springframework.aop.framework.BeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.ClassCastException java.lang.ClassCastException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; Person org.springframework.aop.framework.Person = ( Person ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( STRING , org.springframework.aop.framework.Person , org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ) ; Person org.springframework.aop.framework.Person = ( Person ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.framework.Person ) ; assertEquals ( org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; assertNotSame ( org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; assertEquals ( STRING , org.springframework.aop.framework.Person . getName ( ) ) ; Advice org.springframework.aop.framework.Advice = new NopInterceptor ( ) ; ( ( Advised ) org.springframework.aop.framework.Person ) . addAdvice ( org.springframework.aop.framework.Advice ) ; assertEquals ( org.springframework.aop.framework.Person . getName ( ) , org.springframework.aop.framework.Person . getName ( ) ) ; assertFalse ( STRING , SerializationTestUtils . isSerializable ( org.springframework.aop.framework.Person ) ) ; assertTrue ( ( ( Advised ) org.springframework.aop.framework.Person ) . removeAdvice ( org.springframework.aop.framework.Advice ) ) ; assertTrue ( STRING , SerializationTestUtils . isSerializable ( org.springframework.aop.framework.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; Person org.springframework.aop.framework.Person = ( Person ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( STRING , org.springframework.aop.framework.Person , org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ) ; Person org.springframework.aop.framework.Person = ( Person ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.framework.Person ) ; assertEquals ( org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; assertNotSame ( org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; assertEquals ( STRING , org.springframework.aop.framework.Person . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; Person org.springframework.aop.framework.Person = ( Person ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; ProxyFactoryBean org.springframework.aop.framework.ProxyFactoryBean = ( ProxyFactoryBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; ProxyFactoryBean org.springframework.aop.framework.ProxyFactoryBean = ( ProxyFactoryBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.framework.ProxyFactoryBean ) ; Person org.springframework.aop.framework.Person = ( Person ) org.springframework.aop.framework.ProxyFactoryBean . getObject ( ) ; assertEquals ( org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; assertNotSame ( org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; assertEquals ( STRING , org.springframework.aop.framework.Person . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; Person org.springframework.aop.framework.Person = ( Person ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( STRING , SerializationTestUtils . isSerializable ( org.springframework.aop.framework.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; ( ( Lockable ) org.springframework.aop.framework.ITestBean ) . lock ( ) ; try { org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; fail ( STRING ) ; } catch ( LockedException org.springframework.aop.framework.LockedException ) { } try { org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; } catch ( LockedException org.springframework.aop.framework.LockedException ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; ( ( Lockable ) org.springframework.aop.framework.ITestBean ) . lock ( ) ; try { org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; fail ( STRING ) ; } catch ( LockedException org.springframework.aop.framework.LockedException ) { } try { org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; } catch ( LockedException org.springframework.aop.framework.LockedException ) { fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.framework.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.framework.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.aop.framework.Advised . isFrozen ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProxyFactoryBean org.springframework.aop.framework.ProxyFactoryBean = new ProxyFactoryBean ( ) ; org.springframework.aop.framework.ProxyFactoryBean . setTarget ( new TestBean ( ) ) ; org.springframework.aop.framework.ProxyFactoryBean . addAdvice ( new DebugInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactoryBean . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.ProxyFactoryBean . getObject ( ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.aop.framework.ITestBean ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { java.util.List<java.lang.String> . void ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { setAdvice ( new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { java.util.List<java.lang.String> . boolean ( org.springframework.aop.framework.MethodInvocation . getMethod ( ) . getName ( ) ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; } } ) ; setPointcut ( new DynamicMethodMatcherPointcut ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { return java.lang.reflect.Method . java.lang.Class<?> ( ) == java.lang.Void . java.lang.Class<java.lang.Void> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { java.util.List<java.lang.String> . boolean ( org.springframework.aop.framework.MethodInvocation . getMethod ( ) . getName ( ) ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { return java.lang.reflect.Method . java.lang.Class<?> ( ) == java.lang.Void . java.lang.Class<java.lang.Void> ; }  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.aop.framework.ITestBean ) { this . org.springframework.aop.framework.ITestBean = org.springframework.aop.framework.ITestBean ; }  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . boolean ( org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { if ( org.springframework.aop.framework.MethodInvocation . getMethod ( ) . getDeclaringClass ( ) . equals ( org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface .class ) ) { return new java.lang.Integer ( - NUMBER ) ; } return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.ClassFilter org.springframework.aop.framework.ClassFilter ( ) { return ClassFilter . TRUE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.Advice org.springframework.aop.framework.Advice ( ) { return this . org.springframework.aop.framework.IntroductionInterceptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { org.springframework.aop.framework.ProxyFactoryBeanTests.AddedGlobalInterface .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
