<METHOD_START> public void ( ) { this( ClassUtils . getDefaultClassLoader ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { Assert . notNull ( java.lang.ClassLoader , STRING ) ; this . java.lang.ClassLoader = java.lang.ClassLoader ; this . java.lang.instrument.Instrumentation = java.lang.instrument.Instrumentation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { Assert . notNull ( java.lang.instrument.ClassFileTransformer , STRING ) ; org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.FilteringClassFileTransformer org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.FilteringClassFileTransformer = new org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.FilteringClassFileTransformer ( java.lang.instrument.ClassFileTransformer , this . java.lang.ClassLoader ) ; synchronized ( this . java.util.List<java.lang.instrument.ClassFileTransformer> ) { if ( this . java.lang.instrument.Instrumentation == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . java.lang.instrument.Instrumentation . void ( org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.FilteringClassFileTransformer ) ; this . java.util.List<java.lang.instrument.ClassFileTransformer> . boolean ( org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.FilteringClassFileTransformer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return new SimpleThrowawayClassLoader ( java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( this . java.util.List<java.lang.instrument.ClassFileTransformer> ) { if ( ! this . java.util.List<java.lang.instrument.ClassFileTransformer> . boolean ( ) ) { for ( int int = this . java.util.List<java.lang.instrument.ClassFileTransformer> . int ( ) - NUMBER ; int >= NUMBER ; int -- ) { this . java.lang.instrument.Instrumentation . boolean ( this . java.util.List<java.lang.instrument.ClassFileTransformer> . java.lang.instrument.ClassFileTransformer ( int ) ) ; } this . java.util.List<java.lang.instrument.ClassFileTransformer> . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( ) { return ( java.lang.instrument.Instrumentation ( ) != null ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.instrument.Instrumentation java.lang.instrument.Instrumentation ( ) { if ( boolean ) { return org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver.InstrumentationAccessor . java.lang.instrument.Instrumentation ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> public static java.lang.instrument.Instrumentation java.lang.instrument.Instrumentation ( ) { return InstrumentationSavingAgent . getInstrumentation ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer , java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.instrument.ClassFileTransformer = java.lang.instrument.ClassFileTransformer ; this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.security.ProtectionDomain java.security.ProtectionDomain , byte [] byte[] ) throws java.lang.instrument.IllegalClassFormatException { if ( ! this . java.lang.ClassLoader . boolean ( java.lang.ClassLoader ) ) { return null ; } return this . java.lang.instrument.ClassFileTransformer . byte[] ( java.lang.ClassLoader , java.lang.String , java.lang.Class<> , java.security.ProtectionDomain , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.instrument.ClassFileTransformer . java.lang.String ( ) ; }  <METHOD_END>
