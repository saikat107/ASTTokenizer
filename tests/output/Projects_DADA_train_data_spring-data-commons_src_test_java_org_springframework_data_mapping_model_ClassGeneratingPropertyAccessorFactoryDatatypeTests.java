<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.Object ; this . java.lang.String = java.lang.String ; this . java.util.Optional<java.lang.Object> = java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Parameters ( name = STRING ) public static java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> ( ) java.lang.Exception { java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> = new java.util.ArrayList<java.lang.Object[]> <> ( ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.Arrays . java.util.List<java.lang.Class<?>> ( org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactoryDatatypeTests.FieldAccess .class , org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactoryDatatypeTests.PropertyAccess .class , org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactoryDatatypeTests.PrivateFinalFieldAccess .class , org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactoryDatatypeTests.PrivateFinalPropertyAccess .class ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Integer . java.lang.Integer ( NUMBER ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new int [] { NUMBER , NUMBER , NUMBER } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Integer . java.lang.Integer ( NUMBER ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.Integer [] { java.lang.Integer . java.lang.Integer ( NUMBER ) } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Short . java.lang.Short ( STRING ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new short [] { NUMBER , NUMBER , NUMBER } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Short . java.lang.Short ( STRING ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.Short [] { java.lang.Short . java.lang.Short ( STRING ) } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Byte . java.lang.Byte ( STRING ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new byte [] { NUMBER , NUMBER , NUMBER } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Byte . java.lang.Byte ( STRING ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.Byte [] { java.lang.Byte . java.lang.Byte ( STRING ) } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Character . java.lang.Character ( 'c' ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new char [] { 'a' , 'b' , 'c' } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Character . java.lang.Character ( 'c' ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.Character [] { java.lang.Character . java.lang.Character ( 'c' ) } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Boolean . java.lang.Boolean ( true ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new boolean [] { true , false } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Boolean . java.lang.Boolean ( true ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.Boolean [] { java.lang.Boolean . java.lang.Boolean ( true ) } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Float . java.lang.Float ( NUMBER ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new float [] { NUMBER , NUMBER } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Float . java.lang.Float ( NUMBER ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.Float [] { java.lang.Float . java.lang.Float ( NUMBER ) } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Double . java.lang.Double ( NUMBER ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new double [] { NUMBER , NUMBER } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Double . java.lang.Double ( NUMBER ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.Double [] { java.lang.Double . java.lang.Double ( NUMBER ) } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Long . java.lang.Long ( NUMBER ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new long [] { NUMBER , NUMBER } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , java.lang.Long . java.lang.Long ( NUMBER ) ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.Long [] { java.lang.Long . java.lang.Long ( NUMBER ) } ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , STRING ) ) ; java.util.List<java.lang.Object[]> . boolean ( java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> , STRING , new java.lang.String [] { STRING , STRING } ) ) ; return java.util.List<java.lang.Object[]> ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> ( java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws java.lang.Exception { java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> = new java.util.ArrayList<java.lang.Object[]> <> ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<?>> ) { java.lang.reflect.Constructor<?> < ? > [] java.lang.reflect.Constructor<?>[] = java.lang.Class<> . java.lang.reflect.Constructor<?>[] ( ) ; java.lang.reflect.Constructor<?>[] [ NUMBER ] . void ( true ) ; java.util.List<java.lang.Object[]> . boolean ( new java.lang.Object [] { java.lang.reflect.Constructor<?>[] [ NUMBER ] . newInstance ( ) , java.lang.String , java.lang.Object , java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.String } ) ; } return java.util.List<java.lang.Object[]> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( java.util.Optional<? extends org.springframework.data.mapping.model.PersistentProperty<?>> ( java.lang.Object , java.lang.String ) ) . hasValueSatisfying ( property -> { PersistentPropertyAccessor persistentPropertyAccessor = getPersistentPropertyAccessor ( bean ) ; persistentPropertyAccessor . setProperty ( property , value ) ; assertThat ( persistentPropertyAccessor . getProperty ( property ) ) . isEqualTo ( value ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BasicPersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.BasicPersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.data.mapping.model.BasicPersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> , STRING ) ) . isInstanceOf ( ClassGeneratingPropertyAccessorFactory .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mapping.model.PersistentPropertyAccessor org.springframework.data.mapping.model.PersistentPropertyAccessor ( java.lang.Object java.lang.Object ) { return org.springframework.data.mapping.model.ClassGeneratingPropertyAccessorFactory . getPropertyAccessor ( org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<? extends org.springframework.data.mapping.model.PersistentProperty<?>> < ? extends PersistentProperty < ? > > java.util.Optional<? extends org.springframework.data.mapping.model.PersistentProperty<?>> ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { BasicPersistentEntity < java.lang.Object , SamplePersistentProperty > org.springframework.data.mapping.model.BasicPersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> = org.springframework.data.mapping.model.SampleMappingContext . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; return org.springframework.data.mapping.model.BasicPersistentEntity<java.lang.Object,org.springframework.data.mapping.model.SamplePersistentProperty> . getPersistentProperty ( java.lang.String ) ; }  <METHOD_END>
