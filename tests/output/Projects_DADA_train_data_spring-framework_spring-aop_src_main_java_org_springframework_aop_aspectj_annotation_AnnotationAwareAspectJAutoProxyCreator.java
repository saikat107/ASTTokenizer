<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { this . java.util.List<java.util.regex.Pattern> = new java.util.ArrayList<java.util.regex.Pattern> <> ( java.util.List<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { this . java.util.List<java.util.regex.Pattern> . boolean ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AspectJAdvisorFactory org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ) { Assert . notNull ( org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory , STRING ) ; this . org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory = org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ConfigurableListableBeanFactory org.springframework.aop.aspectj.annotation.ConfigurableListableBeanFactory ) { super. initBeanFactory ( org.springframework.aop.aspectj.annotation.ConfigurableListableBeanFactory ) ; if ( this . org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory == null ) { this . org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory = new ReflectiveAspectJAdvisorFactory ( org.springframework.aop.aspectj.annotation.ConfigurableListableBeanFactory ) ; } this . org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder = new org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator.BeanFactoryAspectJAdvisorsBuilderAdapter ( org.springframework.aop.aspectj.annotation.ConfigurableListableBeanFactory , this . org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> ( ) { java.util.List<org.springframework.aop.aspectj.annotation.Advisor> < Advisor > java.util.List<org.springframework.aop.aspectj.annotation.Advisor> = super. findCandidateAdvisors ( ) ; java.util.List<org.springframework.aop.aspectj.annotation.Advisor> . addAll ( this . org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder . buildAspectJAdvisors ( ) ) ; return java.util.List<org.springframework.aop.aspectj.annotation.Advisor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( super. isInfrastructureClass ( java.lang.Class<> ) || this . org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory . isAspect ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { if ( this . java.util.List<java.util.regex.Pattern> == null ) { return true ; } else { for ( java.util.regex.Pattern java.util.regex.Pattern : this . java.util.List<java.util.regex.Pattern> ) { if ( java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ) { return true ; } } return false ; } }  <METHOD_END>
<METHOD_START> public void ( ListableBeanFactory org.springframework.aop.aspectj.annotation.ListableBeanFactory , AspectJAdvisorFactory org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ) { super( org.springframework.aop.aspectj.annotation.ListableBeanFactory , org.springframework.aop.aspectj.annotation.AspectJAdvisorFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.String java.lang.String ) { return org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator .this . boolean ( java.lang.String ) ; }  <METHOD_END>
