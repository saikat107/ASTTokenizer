<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.core.io.support.DummyFactory> < DummyFactory > java.util.List<org.springframework.core.io.support.DummyFactory> = SpringFactoriesLoader . loadFactories ( DummyFactory .class , null ) ; assertEquals ( NUMBER , java.util.List<org.springframework.core.io.support.DummyFactory> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.core.io.support.DummyFactory> . get ( NUMBER ) instanceof MyDummyFactory1 ) ; assertTrue ( java.util.List<org.springframework.core.io.support.DummyFactory> . get ( NUMBER ) instanceof MyDummyFactory2 ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SpringFactoriesLoader . loadFactories ( java.lang.String .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.core.io.support.DummyPackagePrivateFactory> < DummyPackagePrivateFactory > java.util.List<org.springframework.core.io.support.DummyPackagePrivateFactory> = SpringFactoriesLoader . loadFactories ( DummyPackagePrivateFactory .class , null ) ; assertEquals ( NUMBER , java.util.List<org.springframework.core.io.support.DummyPackagePrivateFactory> . size ( ) ) ; assertTrue ( ( java.util.List<org.springframework.core.io.support.DummyPackagePrivateFactory> . get ( NUMBER ) . getClass ( ) . getModifiers ( ) & java.lang.reflect.Modifier . int ) == NUMBER ) ; }  <METHOD_END>
