<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNull ( this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception . java.lang.Throwable ( ) instanceof DestinationResolutionException ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) { this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.integration.router.config.MessageHandler instanceof MethodInvokingRouter ) ; MessagingTemplate org.springframework.integration.router.config.MessagingTemplate = TestUtils . getPropertyValue ( this . org.springframework.integration.router.config.MessageHandler , STRING , MessagingTemplate .class ) ; java.lang.Long java.lang.Long = TestUtils . getPropertyValue ( org.springframework.integration.router.config.MessagingTemplate , STRING , java.lang.Long .class ) ; assertEquals ( new java.lang.Long ( NUMBER ) , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.router.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; this . org.springframework.integration.router.config.MessageChannel . send ( org.springframework.integration.router.config.Message<> ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.router.config.Message<> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getCorrelationId ( ) ) ; assertEquals ( org.springframework.integration.router.config.Message<> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getCorrelationId ( ) ) ; assertEquals ( org.springframework.integration.router.config.Message<> . getHeaders ( ) . getId ( ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getCorrelationId ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getSequenceSize ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getSequenceSize ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.router.config.Message<> ) . getSequenceSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.router.config.Message<?> = this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.router.config.Message<> . getPayload ( ) ) ; assertNull ( this . org.springframework.integration.router.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHandler org.springframework.integration.router.config.MessageHandler = mock ( MessageHandler .class ) ; this . org.springframework.integration.router.config.SubscribableChannel . subscribe ( org.springframework.integration.router.config.MessageHandler ) ; this . org.springframework.integration.router.config.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; verify ( org.springframework.integration.router.config.MessageHandler , times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.router.config.RouterParserTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void ( MessageChannel org.springframework.integration.router.config.MessageChannel ) { this . org.springframework.integration.router.config.MessageChannel = org.springframework.integration.router.config.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.config.Message<?> ) { return java.util.Collections . java.util.List<java.lang.Object> ( ( java.lang.Object ) this . org.springframework.integration.router.config.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> public void ( MessageChannel org.springframework.integration.router.config.MessageChannel ) { this . org.springframework.integration.router.config.MessageChannel = org.springframework.integration.router.config.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ Router public org.springframework.integration.router.config.MessageChannel org.springframework.integration.router.config.MessageChannel ( java.lang.String java.lang.String ) { return this . org.springframework.integration.router.config.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ Router public java.lang.String java.lang.String ( Message < ? > org.springframework.integration.router.config.Message<?> ) { return ( java.lang.String ) org.springframework.integration.router.config.Message<> . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.router.config.MessageChannel org.springframework.integration.router.config.MessageChannel ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
