<METHOD_START> @ java.lang.Override protected void void ( DefaultListableBeanFactory org.springframework.web.context.support.DefaultListableBeanFactory ) throws org.springframework.web.context.support.BeansException , java.io.IOException { XmlBeanDefinitionReader org.springframework.web.context.support.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.web.context.support.DefaultListableBeanFactory ) ; org.springframework.web.context.support.XmlBeanDefinitionReader . setEnvironment ( getEnvironment ( ) ) ; org.springframework.web.context.support.XmlBeanDefinitionReader . setResourceLoader ( this ) ; org.springframework.web.context.support.XmlBeanDefinitionReader . setEntityResolver ( new ResourceEntityResolver ( this ) ) ; void ( org.springframework.web.context.support.XmlBeanDefinitionReader ) ; void ( org.springframework.web.context.support.XmlBeanDefinitionReader ) ; }  <METHOD_END>
<METHOD_START> protected void void ( XmlBeanDefinitionReader org.springframework.web.context.support.XmlBeanDefinitionReader ) {	}  <METHOD_END>
<METHOD_START> protected void void ( XmlBeanDefinitionReader org.springframework.web.context.support.XmlBeanDefinitionReader ) throws java.io.IOException { java.lang.String [] java.lang.String[] = getConfigLocations ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.web.context.support.XmlBeanDefinitionReader . loadBeanDefinitions ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { if ( getNamespace ( ) != null ) { return new java.lang.String [] { java.lang.String + getNamespace ( ) + java.lang.String } ; } else { return new java.lang.String [] { java.lang.String } ; } }  <METHOD_END>
