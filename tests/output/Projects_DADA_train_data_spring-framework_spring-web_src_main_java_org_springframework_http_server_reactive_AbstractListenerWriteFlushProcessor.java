<METHOD_START> @ java.lang.Override public final void void ( Subscription org.springframework.http.server.reactive.Subscription ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> + STRING + org.springframework.http.server.reactive.Subscription ) ; } this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State ( ) . void ( this , org.springframework.http.server.reactive.Subscription ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( Publisher < ? extends T > org.springframework.http.server.reactive.Publisher<? extends T> ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> + STRING + org.springframework.http.server.reactive.Publisher<> ) ; } this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State ( ) . void ( this , org.springframework.http.server.reactive.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> + STRING + java.lang.Throwable ) ; } this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State ( ) . void ( this , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> + STRING ) ; } this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State ( ) . void ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( Subscriber < ? super java.lang.Void > org.springframework.http.server.reactive.Subscriber<? super java.lang.Void> ) { this . org.springframework.http.server.reactive.WriteResultPublisher . subscribe ( org.springframework.http.server.reactive.Subscriber<> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . org.springframework.http.server.reactive.Subscription != null ) { this . org.springframework.http.server.reactive.Subscription . cancel ( ) ; } }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.http.server.reactive.Processor<? super T,java.lang.Void> < ? super T , java.lang.Void > org.springframework.http.server.reactive.Processor<? super T,java.lang.Void> ( )  <METHOD_END>
<METHOD_START> protected abstract void void ( ) java.io.IOException ;  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State , org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State ) { return this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> . boolean ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State , org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> + STRING ) ; } this . java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State> . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State ( ) . void ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> , Subscription org.springframework.http.server.reactive.Subscription ) { Assert . notNull ( org.springframework.http.server.reactive.Subscription , STRING ) ; if ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . boolean ( this , org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>.State ) ) { org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . org.springframework.http.server.reactive.Subscription = org.springframework.http.server.reactive.Subscription ; org.springframework.http.server.reactive.Subscription . request ( NUMBER ) ; } else { super. void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> , org.springframework.http.server.reactive.Subscription ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> , Publisher < ? extends T > org.springframework.http.server.reactive.Publisher<? extends T> ) { if ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . boolean ( this , org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>.State ) ) { Processor < ? super T , java.lang.Void > org.springframework.http.server.reactive.Processor<? super T,java.lang.Void> = org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . org.springframework.http.server.reactive.Processor<? super T,java.lang.Void> ( ) ; org.springframework.http.server.reactive.Publisher<> . subscribe ( org.springframework.http.server.reactive.Processor<,java.lang.Void> ) ; org.springframework.http.server.reactive.Processor<,java.lang.Void> . subscribe ( new org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State.WriteSubscriber ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> ) { if ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . boolean ( this , org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>.State ) ) { org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . org.springframework.http.server.reactive.WriteResultPublisher . publishComplete ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> ) { try { org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . void ( ) ; org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . void ( java.io.IOException ) ; } if ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . boolean ) { if ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . boolean ( this , org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>.State ) ) { org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . org.springframework.http.server.reactive.WriteResultPublisher . publishComplete ( ) ; } } else { if ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . boolean ( this , org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T>.State ) ) { org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . org.springframework.http.server.reactive.Subscription . request ( NUMBER ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> ) { org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> , Publisher < ? extends T > org.springframework.http.server.reactive.Publisher<? extends T> ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> , java.lang.Throwable java.lang.Throwable ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> ) { }  <METHOD_END>
<METHOD_START> public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> , Subscription org.springframework.http.server.reactive.Subscription ) { org.springframework.http.server.reactive.Subscription . cancel ( ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> , Publisher < ? extends T > org.springframework.http.server.reactive.Publisher<? extends T> ) { throw new java.lang.IllegalStateException ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> , java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . boolean ( this , org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor.State ) ) { org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> . org.springframework.http.server.reactive.WriteResultPublisher . publishError ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> ) { throw new java.lang.IllegalStateException ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> < T > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<T> ) { }  <METHOD_END>
<METHOD_START> public void ( org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<?> < ? > org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<?> ) { this . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<?> = org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Subscription org.springframework.http.server.reactive.Subscription ) { org.springframework.http.server.reactive.Subscription . request ( java.lang.Long . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Void java.lang.Void ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { this . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<> . void ( ) ; this . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<> . void ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.http.server.reactive.AbstractListenerWriteFlushProcessor<> . void ( ) ; }  <METHOD_END>
