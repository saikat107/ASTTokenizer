<METHOD_START> public void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , RequestedContentTypeResolver org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver ) { this( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver , new ReactiveAdapterRegistry ( ) ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , RequestedContentTypeResolver org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); setOrder ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult ) { MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = org.springframework.web.reactive.result.method.annotation.HandlerResult . getReturnTypeSource ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.reactive.result.method.annotation.MethodParameter . getContainingClass ( ) ; return ( AnnotationUtils . findAnnotation ( java.lang.Class<> , ResponseBody .class ) != null || org.springframework.web.reactive.result.method.annotation.MethodParameter . getMethodAnnotation ( ResponseBody .class ) != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange , HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult ) { java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.HandlerResult . getReturnValue ( ) . orElse ( null ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = org.springframework.web.reactive.result.method.annotation.HandlerResult . getReturnTypeSource ( ) ; return writeBody ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; }  <METHOD_END>
