<METHOD_START> protected < A extends java.lang.annotation.Annotation > org.springframework.test.context.junit.jupiter.ConditionEvaluationResult org.springframework.test.context.junit.jupiter.ConditionEvaluationResult ( java.lang.Class<A> < A > java.lang.Class<A> , java.util.function.Function<A,java.lang.String> < A , java.lang.String > java.util.function.Function<A,java.lang.String> , java.util.function.Function<A,java.lang.String> < A , java.lang.String > java.util.function.Function<A,java.lang.String> , java.util.function.Function<A,java.lang.Boolean> < A , java.lang.Boolean > java.util.function.Function<A,java.lang.Boolean> , boolean boolean , ExtensionContext org.springframework.test.context.junit.jupiter.ExtensionContext ) { java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement = org.springframework.test.context.junit.jupiter.ExtensionContext . getElement ( ) . get ( ) ; java.util.Optional<A> < A > java.util.Optional<A> = java.util.Optional<A> ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> ) ; if ( ! java.util.Optional<A> . boolean ( ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.reflect.AnnotatedElement , java.lang.Class<A> . java.lang.String ( ) ) ; if ( org.springframework.test.context.junit.jupiter.Log . isDebugEnabled ( ) ) { org.springframework.test.context.junit.jupiter.Log . debug ( java.lang.String ) ; } return ConditionEvaluationResult . enabled ( java.lang.String ) ; } java.lang.String java.lang.String = java.util.Optional<A> . java.util.Optional<java.lang.String> ( java.util.function.Function<A,java.lang.String> ) . java.util.Optional<java.lang.String> ( java.lang.String :: java.lang.String ) . java.util.Optional<java.lang.String> ( StringUtils :: hasLength ) . orElseThrow ( ( ) new IllegalStateException ( String . format ( STRING , annotationType . getSimpleName ( ) , element ) ) ) ; boolean boolean = java.util.Optional<A> . java.util.Optional<java.lang.Boolean> ( java.util.function.Function<A,java.lang.Boolean> ) . java.lang.Boolean ( ) ; boolean boolean = boolean ( java.lang.String , boolean , java.lang.Class<A> , org.springframework.test.context.junit.jupiter.ExtensionContext ) ; if ( boolean ) { java.lang.String java.lang.String = ( boolean ? STRING : STRING ) ; java.lang.String java.lang.String = java.util.Optional<A> . java.util.Optional<java.lang.String> ( java.util.function.Function<A,java.lang.String> ) . java.util.Optional<java.lang.String> ( StringUtils :: hasText ) . orElseGet ( ( ) String . format ( STRING , element , adjective , annotationType . getSimpleName ( ) , expression ) ) ; if ( org.springframework.test.context.junit.jupiter.Log . isInfoEnabled ( ) ) { org.springframework.test.context.junit.jupiter.Log . info ( java.lang.String ) ; } return ( boolean ? ConditionEvaluationResult . enabled ( java.lang.String ) : ConditionEvaluationResult . disabled ( java.lang.String ) ) ; } else { java.lang.String java.lang.String = ( boolean ? STRING : STRING ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.reflect.AnnotatedElement , java.lang.String , java.lang.Class<A> . java.lang.String ( ) , java.lang.String ) ; if ( org.springframework.test.context.junit.jupiter.Log . isDebugEnabled ( ) ) { org.springframework.test.context.junit.jupiter.Log . debug ( java.lang.String ) ; } return ( boolean ? ConditionEvaluationResult . disabled ( java.lang.String ) : ConditionEvaluationResult . enabled ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private < A extends java.lang.annotation.Annotation > boolean boolean ( java.lang.String java.lang.String , boolean boolean , java.lang.Class<A> < A > java.lang.Class<A> , ExtensionContext org.springframework.test.context.junit.jupiter.ExtensionContext ) { java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement = org.springframework.test.context.junit.jupiter.ExtensionContext . getElement ( ) . get ( ) ; GenericApplicationContext org.springframework.test.context.junit.jupiter.GenericApplicationContext = null ; ApplicationContext org.springframework.test.context.junit.jupiter.ApplicationContext ; if ( boolean ) { org.springframework.test.context.junit.jupiter.ApplicationContext = SpringExtension . getApplicationContext ( org.springframework.test.context.junit.jupiter.ExtensionContext ) ; } else { org.springframework.test.context.junit.jupiter.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.test.context.junit.jupiter.GenericApplicationContext . refresh ( ) ; org.springframework.test.context.junit.jupiter.ApplicationContext = org.springframework.test.context.junit.jupiter.GenericApplicationContext ; } if ( ! ( org.springframework.test.context.junit.jupiter.ApplicationContext instanceof ConfigurableApplicationContext ) ) { if ( org.springframework.test.context.junit.jupiter.Log . isWarnEnabled ( ) ) { java.lang.String java.lang.String = ( org.springframework.test.context.junit.jupiter.ApplicationContext != null ? org.springframework.test.context.junit.jupiter.ApplicationContext . getClass ( ) . getName ( ) : STRING ) ; org.springframework.test.context.junit.jupiter.Log . warn ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<A> . java.lang.String ( ) , java.lang.String , java.lang.reflect.AnnotatedElement , java.lang.String ) ) ; } return false ; } ConfigurableBeanFactory org.springframework.test.context.junit.jupiter.ConfigurableBeanFactory = ( ( ConfigurableApplicationContext ) org.springframework.test.context.junit.jupiter.ApplicationContext ) . getBeanFactory ( ) ; BeanExpressionResolver org.springframework.test.context.junit.jupiter.BeanExpressionResolver = org.springframework.test.context.junit.jupiter.ConfigurableBeanFactory . getBeanExpressionResolver ( ) ; BeanExpressionContext org.springframework.test.context.junit.jupiter.BeanExpressionContext = new BeanExpressionContext ( org.springframework.test.context.junit.jupiter.ConfigurableBeanFactory , null ) ; java.lang.Object java.lang.Object = org.springframework.test.context.junit.jupiter.BeanExpressionResolver . evaluate ( org.springframework.test.context.junit.jupiter.ConfigurableBeanFactory . resolveEmbeddedValue ( java.lang.String ) , org.springframework.test.context.junit.jupiter.BeanExpressionContext ) ; if ( org.springframework.test.context.junit.jupiter.GenericApplicationContext != null ) { org.springframework.test.context.junit.jupiter.GenericApplicationContext . close ( ) ; } if ( java.lang.Object instanceof java.lang.Boolean ) { return ( ( java.lang.Boolean ) java.lang.Object ) . boolean ( ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( ( java.lang.String ) java.lang.Object ) . java.lang.String ( ) . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { return true ; } Assert . state ( STRING . boolean ( java.lang.String ) , ( ) String . format ( STRING , annotationType . getSimpleName ( ) , expression , element , result ) ) ; return false ; } else { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.Class<A> . java.lang.String ( ) , java.lang.String , java.lang.reflect.AnnotatedElement , ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) : STRING ) ) ; throw new java.lang.IllegalStateException ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private static < A extends java.lang.annotation.Annotation > java.util.Optional<A> < A > java.util.Optional<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { return java.util.Optional . java.util.Optional ( AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> ) ) ; }  <METHOD_END>
