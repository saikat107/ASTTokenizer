<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( PropertyPlaceholderAutoConfiguration .class , RedisAutoConfiguration .class , EndpointAutoConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . getBeanNamesForType ( RedisConnectionFactory .class ) ) . hasSize ( NUMBER ) ; RedisHealthIndicator org.springframework.boot.actuate.health.RedisHealthIndicator = this . org.springframework.boot.actuate.health.AnnotationConfigApplicationContext . getBean ( RedisHealthIndicator .class ) ; assertThat ( org.springframework.boot.actuate.health.RedisHealthIndicator ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; RedisConnection org.springframework.boot.actuate.health.RedisConnection = mock ( RedisConnection .class ) ; RedisConnectionFactory org.springframework.boot.actuate.health.RedisConnectionFactory = mock ( RedisConnectionFactory .class ) ; given ( org.springframework.boot.actuate.health.RedisConnectionFactory . getConnection ( ) ) . willReturn ( org.springframework.boot.actuate.health.RedisConnection ) ; given ( org.springframework.boot.actuate.health.RedisConnection . info ( ) ) . willReturn ( java.util.Properties ) ; RedisHealthIndicator org.springframework.boot.actuate.health.RedisHealthIndicator = new RedisHealthIndicator ( org.springframework.boot.actuate.health.RedisConnectionFactory ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.RedisHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.boot.actuate.health.RedisConnectionFactory ) . getConnection ( ) ; verify ( org.springframework.boot.actuate.health.RedisConnection ) . info ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RedisConnection org.springframework.boot.actuate.health.RedisConnection = mock ( RedisConnection .class ) ; RedisConnectionFactory org.springframework.boot.actuate.health.RedisConnectionFactory = mock ( RedisConnectionFactory .class ) ; given ( org.springframework.boot.actuate.health.RedisConnectionFactory . getConnection ( ) ) . willReturn ( org.springframework.boot.actuate.health.RedisConnection ) ; given ( org.springframework.boot.actuate.health.RedisConnection . info ( ) ) . willThrow ( new RedisConnectionFailureException ( STRING ) ) ; RedisHealthIndicator org.springframework.boot.actuate.health.RedisHealthIndicator = new RedisHealthIndicator ( org.springframework.boot.actuate.health.RedisConnectionFactory ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.RedisHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( ( ( java.lang.String ) org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . boolean ( STRING ) ) ; verify ( org.springframework.boot.actuate.health.RedisConnectionFactory ) . getConnection ( ) ; verify ( org.springframework.boot.actuate.health.RedisConnection ) . info ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.List<org.springframework.boot.actuate.health.RedisClusterNode> < RedisClusterNode > java.util.List<org.springframework.boot.actuate.health.RedisClusterNode> = java.util.Arrays . java.util.List ( new RedisClusterNode ( STRING , NUMBER ) , new RedisClusterNode ( STRING , NUMBER ) ) ; RedisClusterConnection org.springframework.boot.actuate.health.RedisClusterConnection = mock ( RedisClusterConnection .class ) ; given ( org.springframework.boot.actuate.health.RedisClusterConnection . clusterGetNodes ( ) ) . willReturn ( java.util.List<org.springframework.boot.actuate.health.RedisClusterNode> ) ; given ( org.springframework.boot.actuate.health.RedisClusterConnection . clusterGetClusterInfo ( ) ) . willReturn ( new ClusterInfo ( java.util.Properties ) ) ; RedisConnectionFactory org.springframework.boot.actuate.health.RedisConnectionFactory = mock ( RedisConnectionFactory .class ) ; given ( org.springframework.boot.actuate.health.RedisConnectionFactory . getConnection ( ) ) . willReturn ( org.springframework.boot.actuate.health.RedisClusterConnection ) ; RedisHealthIndicator org.springframework.boot.actuate.health.RedisHealthIndicator = new RedisHealthIndicator ( org.springframework.boot.actuate.health.RedisConnectionFactory ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.RedisHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.boot.actuate.health.RedisConnectionFactory , atLeastOnce ( ) ) . getConnection ( ) ; }  <METHOD_END>
