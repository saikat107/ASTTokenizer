<METHOD_START> @ After public void void ( ) { if ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext != null ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( DiskStore org.springframework.data.gemfire.config.annotation.DiskStore , java.lang.String java.lang.String , boolean boolean , boolean boolean , int int , float float , float float , long long , int int , long long , int int ) { assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getAllowForceCompaction ( ) ) . isEqualTo ( boolean ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getAutoCompact ( ) ) . isEqualTo ( boolean ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getCompactionThreshold ( ) ) . isEqualTo ( int ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskUsageCriticalPercentage ( ) ) . isEqualTo ( float ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskUsageWarningPercentage ( ) ) . isEqualTo ( float ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getMaxOplogSize ( ) ) . isEqualTo ( long ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getQueueSize ( ) ) . isEqualTo ( int ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getTimeInterval ( ) ) . isEqualTo ( long ) ; assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore . getWriteBufferSize ( ) ) . isEqualTo ( int ) ; }  <METHOD_END>
<METHOD_START> protected void void ( DiskStore org.springframework.data.gemfire.config.annotation.DiskStore , java.io.File ... java.io.File[] ) { assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore ) . isNotNull ( ) ; java.io.File [] java.io.File[] = org.springframework.data.gemfire.config.annotation.DiskStore . getDiskDirs ( ) ; assertThat ( java.io.File[] ) . isNotNull ( ) ; assertThat ( java.io.File[] . int ) . isEqualTo ( java.io.File[] . int ) ; int int = NUMBER ; for ( java.io.File java.io.File : java.io.File[] ) { assertThat ( java.io.File[] [ int ++ ] ) . isEqualTo ( java.io.File ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( DiskStore org.springframework.data.gemfire.config.annotation.DiskStore , int ... int[] ) { assertThat ( org.springframework.data.gemfire.config.annotation.DiskStore ) . isNotNull ( ) ; int [] int[] = org.springframework.data.gemfire.config.annotation.DiskStore . getDiskDirSizes ( ) ; assertThat ( int[] ) . isNotNull ( ) ; assertThat ( int[] . int ) . isEqualTo ( int[] . int ) ; int int = NUMBER ; for ( int int : int[] ) { assertThat ( int[] [ int ++ ] ) . isEqualTo ( int ) ; } }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( java.lang.String java.lang.String ) { return new java.io.File ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { ConfigurableApplicationContext org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . registerShutdownHook ( ) ; return org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableDiskStoresConfigurationUnitTests.SingleDiskStoreConfiguration .class ) ; DiskStore org.springframework.data.gemfire.config.annotation.DiskStore = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , DiskStore .class ) ; void ( org.springframework.data.gemfire.config.annotation.DiskStore , STRING , true , true , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; void ( org.springframework.data.gemfire.config.annotation.DiskStore , java.io.File ( STRING ) , java.io.File ( STRING ) ) ; void ( org.springframework.data.gemfire.config.annotation.DiskStore , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableDiskStoresConfigurationUnitTests.MultipleDiskStoresConfiguration .class ) ; DiskStore org.springframework.data.gemfire.config.annotation.DiskStore = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , DiskStore .class ) ; void ( org.springframework.data.gemfire.config.annotation.DiskStore , STRING , false , true , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; DiskStore org.springframework.data.gemfire.config.annotation.DiskStore = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , DiskStore .class ) ; void ( org.springframework.data.gemfire.config.annotation.DiskStore , STRING , true , true , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( STRING , java.lang.String , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> protected static < R > org.springframework.data.gemfire.config.annotation.Answer<R> < R > org.springframework.data.gemfire.config.annotation.Answer<R> ( java.util.concurrent.atomic.AtomicReference<R> < R > java.util.concurrent.atomic.AtomicReference<R> ) { return invocation -> returnValue . get ( ) ; }  <METHOD_END>
<METHOD_START> protected static < T , R > org.springframework.data.gemfire.config.annotation.Answer<R> < R > org.springframework.data.gemfire.config.annotation.Answer<R> ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.concurrent.atomic.AtomicReference<T> < T > java.util.concurrent.atomic.AtomicReference<T> , R R ) { return invocation -> { argument . set ( invocation . getArgument ( NUMBER ) ) ; return returnValue ; } ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.config.annotation.Cache org.springframework.data.gemfire.config.annotation.Cache ( ) { Cache org.springframework.data.gemfire.config.annotation.Cache = mock ( Cache .class ) ; when ( org.springframework.data.gemfire.config.annotation.Cache . createDiskStoreFactory ( ) ) . thenAnswer ( new Answer < DiskStoreFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.DiskStoreFactory org.springframework.data.gemfire.config.annotation.DiskStoreFactory ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { final DiskStoreFactory org.springframework.data.gemfire.config.annotation.DiskStoreFactory = mock ( DiskStoreFactory .class , java.lang.String ( STRING ) ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> <> ( false ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> <> ( false ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Integer> < java.lang.Integer > java.util.concurrent.atomic.AtomicReference<java.lang.Integer> = new java.util.concurrent.atomic.AtomicReference<java.lang.Integer> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.io.File[]> < java.io.File [] > java.util.concurrent.atomic.AtomicReference<java.io.File[]> = new java.util.concurrent.atomic.AtomicReference<java.io.File[]> <> ( new java.io.File [ NUMBER ] ) ; final java.util.concurrent.atomic.AtomicReference<int[]> < int [] > java.util.concurrent.atomic.AtomicReference<int[]> = new java.util.concurrent.atomic.AtomicReference<int[]> <> ( new int [ NUMBER ] ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Float> < java.lang.Float > java.util.concurrent.atomic.AtomicReference<java.lang.Float> = new java.util.concurrent.atomic.AtomicReference<java.lang.Float> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Float> < java.lang.Float > java.util.concurrent.atomic.AtomicReference<java.lang.Float> = new java.util.concurrent.atomic.AtomicReference<java.lang.Float> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Long> < java.lang.Long > java.util.concurrent.atomic.AtomicReference<java.lang.Long> = new java.util.concurrent.atomic.AtomicReference<java.lang.Long> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Integer> < java.lang.Integer > java.util.concurrent.atomic.AtomicReference<java.lang.Integer> = new java.util.concurrent.atomic.AtomicReference<java.lang.Integer> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Long> < java.lang.Long > java.util.concurrent.atomic.AtomicReference<java.lang.Long> = new java.util.concurrent.atomic.AtomicReference<java.lang.Long> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Integer> < java.lang.Integer > java.util.concurrent.atomic.AtomicReference<java.lang.Integer> = new java.util.concurrent.atomic.AtomicReference<java.lang.Integer> <> ( NUMBER ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setAllowForceCompaction ( anyBoolean ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setAutoCompact ( anyBoolean ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setCompactionThreshold ( anyInt ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Integer . java.lang.Class<java.lang.Integer> , java.util.concurrent.atomic.AtomicReference<java.lang.Integer> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setDiskDirsAndSizes ( any ( java.io.File [] .class ) , any ( int [] .class ) ) ) . thenAnswer ( new Answer < DiskStoreFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.DiskStoreFactory org.springframework.data.gemfire.config.annotation.DiskStoreFactory ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.io.File [] java.io.File[] = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; int [] int[] = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.util.concurrent.atomic.AtomicReference<java.io.File[]> . void ( java.io.File[] ) ; java.util.concurrent.atomic.AtomicReference<int[]> . void ( int[] ) ; return org.springframework.data.gemfire.config.annotation.DiskStoreFactory ; } } ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setDiskUsageCriticalPercentage ( anyFloat ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Float . java.lang.Class<java.lang.Float> , java.util.concurrent.atomic.AtomicReference<java.lang.Float> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setDiskUsageWarningPercentage ( anyFloat ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Float . java.lang.Class<java.lang.Float> , java.util.concurrent.atomic.AtomicReference<java.lang.Float> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setMaxOplogSize ( anyLong ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Long . java.lang.Class<java.lang.Long> , java.util.concurrent.atomic.AtomicReference<java.lang.Long> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setQueueSize ( anyInt ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Integer . java.lang.Class<java.lang.Integer> , java.util.concurrent.atomic.AtomicReference<java.lang.Integer> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setTimeInterval ( anyLong ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Long . java.lang.Class<java.lang.Long> , java.util.concurrent.atomic.AtomicReference<java.lang.Long> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setWriteBufferSize ( anyInt ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Integer . java.lang.Class<java.lang.Integer> , java.util.concurrent.atomic.AtomicReference<java.lang.Integer> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . create ( anyString ( ) ) ) . thenAnswer ( new Answer < DiskStore > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.DiskStore org.springframework.data.gemfire.config.annotation.DiskStore ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; DiskStore org.springframework.data.gemfire.config.annotation.DiskStore = mock ( DiskStore .class , java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getAllowForceCompaction ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getAutoCompact ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getCompactionThreshold ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskDirs ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.io.File[]> ( java.util.concurrent.atomic.AtomicReference<java.io.File[]> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskDirSizes ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<int[]> ( java.util.concurrent.atomic.AtomicReference<int[]> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskUsageCriticalPercentage ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Float> ( java.util.concurrent.atomic.AtomicReference<java.lang.Float> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskUsageWarningPercentage ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Float> ( java.util.concurrent.atomic.AtomicReference<java.lang.Float> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getMaxOplogSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Long> ( java.util.concurrent.atomic.AtomicReference<java.lang.Long> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getQueueSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getTimeInterval ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Long> ( java.util.concurrent.atomic.AtomicReference<java.lang.Long> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getWriteBufferSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; return org.springframework.data.gemfire.config.annotation.DiskStore ; } } ) ; return org.springframework.data.gemfire.config.annotation.DiskStoreFactory ; } } ) ; return org.springframework.data.gemfire.config.annotation.Cache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.DiskStoreFactory org.springframework.data.gemfire.config.annotation.DiskStoreFactory ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { final DiskStoreFactory org.springframework.data.gemfire.config.annotation.DiskStoreFactory = mock ( DiskStoreFactory .class , java.lang.String ( STRING ) ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> <> ( false ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> = new java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> <> ( false ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Integer> < java.lang.Integer > java.util.concurrent.atomic.AtomicReference<java.lang.Integer> = new java.util.concurrent.atomic.AtomicReference<java.lang.Integer> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.io.File[]> < java.io.File [] > java.util.concurrent.atomic.AtomicReference<java.io.File[]> = new java.util.concurrent.atomic.AtomicReference<java.io.File[]> <> ( new java.io.File [ NUMBER ] ) ; final java.util.concurrent.atomic.AtomicReference<int[]> < int [] > java.util.concurrent.atomic.AtomicReference<int[]> = new java.util.concurrent.atomic.AtomicReference<int[]> <> ( new int [ NUMBER ] ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Float> < java.lang.Float > java.util.concurrent.atomic.AtomicReference<java.lang.Float> = new java.util.concurrent.atomic.AtomicReference<java.lang.Float> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Float> < java.lang.Float > java.util.concurrent.atomic.AtomicReference<java.lang.Float> = new java.util.concurrent.atomic.AtomicReference<java.lang.Float> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Long> < java.lang.Long > java.util.concurrent.atomic.AtomicReference<java.lang.Long> = new java.util.concurrent.atomic.AtomicReference<java.lang.Long> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Integer> < java.lang.Integer > java.util.concurrent.atomic.AtomicReference<java.lang.Integer> = new java.util.concurrent.atomic.AtomicReference<java.lang.Integer> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Long> < java.lang.Long > java.util.concurrent.atomic.AtomicReference<java.lang.Long> = new java.util.concurrent.atomic.AtomicReference<java.lang.Long> <> ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Integer> < java.lang.Integer > java.util.concurrent.atomic.AtomicReference<java.lang.Integer> = new java.util.concurrent.atomic.AtomicReference<java.lang.Integer> <> ( NUMBER ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setAllowForceCompaction ( anyBoolean ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setAutoCompact ( anyBoolean ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Boolean . java.lang.Class<java.lang.Boolean> , java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setCompactionThreshold ( anyInt ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Integer . java.lang.Class<java.lang.Integer> , java.util.concurrent.atomic.AtomicReference<java.lang.Integer> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setDiskDirsAndSizes ( any ( java.io.File [] .class ) , any ( int [] .class ) ) ) . thenAnswer ( new Answer < DiskStoreFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.DiskStoreFactory org.springframework.data.gemfire.config.annotation.DiskStoreFactory ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.io.File [] java.io.File[] = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; int [] int[] = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.util.concurrent.atomic.AtomicReference<java.io.File[]> . void ( java.io.File[] ) ; java.util.concurrent.atomic.AtomicReference<int[]> . void ( int[] ) ; return org.springframework.data.gemfire.config.annotation.DiskStoreFactory ; } } ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setDiskUsageCriticalPercentage ( anyFloat ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Float . java.lang.Class<java.lang.Float> , java.util.concurrent.atomic.AtomicReference<java.lang.Float> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setDiskUsageWarningPercentage ( anyFloat ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Float . java.lang.Class<java.lang.Float> , java.util.concurrent.atomic.AtomicReference<java.lang.Float> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setMaxOplogSize ( anyLong ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Long . java.lang.Class<java.lang.Long> , java.util.concurrent.atomic.AtomicReference<java.lang.Long> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setQueueSize ( anyInt ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Integer . java.lang.Class<java.lang.Integer> , java.util.concurrent.atomic.AtomicReference<java.lang.Integer> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setTimeInterval ( anyLong ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Long . java.lang.Class<java.lang.Long> , java.util.concurrent.atomic.AtomicReference<java.lang.Long> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . setWriteBufferSize ( anyInt ( ) ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer ( java.lang.Integer . java.lang.Class<java.lang.Integer> , java.util.concurrent.atomic.AtomicReference<java.lang.Integer> , org.springframework.data.gemfire.config.annotation.DiskStoreFactory ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStoreFactory . create ( anyString ( ) ) ) . thenAnswer ( new Answer < DiskStore > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.DiskStore org.springframework.data.gemfire.config.annotation.DiskStore ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; DiskStore org.springframework.data.gemfire.config.annotation.DiskStore = mock ( DiskStore .class , java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getAllowForceCompaction ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getAutoCompact ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getCompactionThreshold ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskDirs ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.io.File[]> ( java.util.concurrent.atomic.AtomicReference<java.io.File[]> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskDirSizes ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<int[]> ( java.util.concurrent.atomic.AtomicReference<int[]> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskUsageCriticalPercentage ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Float> ( java.util.concurrent.atomic.AtomicReference<java.lang.Float> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskUsageWarningPercentage ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Float> ( java.util.concurrent.atomic.AtomicReference<java.lang.Float> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getMaxOplogSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Long> ( java.util.concurrent.atomic.AtomicReference<java.lang.Long> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getQueueSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getTimeInterval ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Long> ( java.util.concurrent.atomic.AtomicReference<java.lang.Long> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getWriteBufferSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; return org.springframework.data.gemfire.config.annotation.DiskStore ; } } ) ; return org.springframework.data.gemfire.config.annotation.DiskStoreFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.DiskStoreFactory org.springframework.data.gemfire.config.annotation.DiskStoreFactory ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.io.File [] java.io.File[] = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; int [] int[] = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.util.concurrent.atomic.AtomicReference<java.io.File[]> . void ( java.io.File[] ) ; java.util.concurrent.atomic.AtomicReference<int[]> . void ( int[] ) ; return org.springframework.data.gemfire.config.annotation.DiskStoreFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.DiskStore org.springframework.data.gemfire.config.annotation.DiskStore ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; DiskStore org.springframework.data.gemfire.config.annotation.DiskStore = mock ( DiskStore .class , java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getAllowForceCompaction ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getAutoCompact ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Boolean> ( java.util.concurrent.atomic.AtomicReference<java.lang.Boolean> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getCompactionThreshold ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskDirs ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.io.File[]> ( java.util.concurrent.atomic.AtomicReference<java.io.File[]> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskDirSizes ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<int[]> ( java.util.concurrent.atomic.AtomicReference<int[]> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskUsageCriticalPercentage ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Float> ( java.util.concurrent.atomic.AtomicReference<java.lang.Float> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getDiskUsageWarningPercentage ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Float> ( java.util.concurrent.atomic.AtomicReference<java.lang.Float> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getMaxOplogSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Long> ( java.util.concurrent.atomic.AtomicReference<java.lang.Long> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getQueueSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getTimeInterval ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Long> ( java.util.concurrent.atomic.AtomicReference<java.lang.Long> ) ) ; when ( org.springframework.data.gemfire.config.annotation.DiskStore . getWriteBufferSize ( ) ) . thenAnswer ( org.springframework.data.gemfire.config.annotation.Answer<java.lang.Integer> ( java.util.concurrent.atomic.AtomicReference<java.lang.Integer> ) ) ; return org.springframework.data.gemfire.config.annotation.DiskStore ; }  <METHOD_END>
