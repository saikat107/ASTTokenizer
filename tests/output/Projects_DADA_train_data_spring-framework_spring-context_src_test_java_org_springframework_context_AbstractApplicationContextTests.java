<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.context.ConfigurableApplicationContext = org.springframework.context.ConfigurableApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.context.BeanFactory org.springframework.context.BeanFactory ( ) { return org.springframework.context.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> protected org.springframework.context.ApplicationContext org.springframework.context.ApplicationContext ( ) { return org.springframework.context.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.context.ConfigurableApplicationContext org.springframework.context.ConfigurableApplicationContext ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ACATester org.springframework.context.ACATester = ( ACATester ) org.springframework.context.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.context.ACATester . getApplicationContext ( ) == org.springframework.context.ConfigurableApplicationContext ) ; java.lang.Object java.lang.Object = org.springframework.context.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.context.ACATester == java.lang.Object ) ; assertTrue ( STRING , org.springframework.context.ConfigurableApplicationContext . isSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ACATester org.springframework.context.ACATester = ( ACATester ) org.springframework.context.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.context.ACATester . getApplicationContext ( ) == org.springframework.context.ConfigurableApplicationContext ) ; java.lang.Object java.lang.Object = org.springframework.context.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.context.ACATester != java.lang.Object ) ; assertTrue ( STRING , ! org.springframework.context.ConfigurableApplicationContext . isSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.context.ConfigurableApplicationContext . getParent ( ) != null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.context.ConfigurableApplicationContext . getParent ( ) . getParent ( ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.context.TestBean = ( TestBean ) org.springframework.context.ConfigurableApplicationContext . getParent ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.context.TestBean . getName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.context.TestBean = ( TestBean ) org.springframework.context.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.context.TestBean . getName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.context.TestBean = org.springframework.context.ConfigurableApplicationContext . getBean ( STRING , TestBean .class ) ; assertTrue ( STRING , org.springframework.context.TestBean . getName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LifecycleBean org.springframework.context.LifecycleBean = ( LifecycleBean ) org.springframework.context.ConfigurableApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , ! org.springframework.context.LifecycleBean . isDestroyed ( ) ) ; org.springframework.context.ConfigurableApplicationContext . close ( ) ; if ( org.springframework.context.ConfigurableApplicationContext . getParent ( ) != null ) { ( ( ConfigurableApplicationContext ) org.springframework.context.ConfigurableApplicationContext . getParent ( ) ) . close ( ) ; } assertTrue ( STRING , org.springframework.context.LifecycleBean . isDestroyed ( ) ) ; org.springframework.context.ConfigurableApplicationContext . close ( ) ; if ( org.springframework.context.ConfigurableApplicationContext . getParent ( ) != null ) { ( ( ConfigurableApplicationContext ) org.springframework.context.ConfigurableApplicationContext . getParent ( ) ) . close ( ) ; } assertTrue ( STRING , org.springframework.context.LifecycleBean . isDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchMessageException .class ) public void void ( ) org.springframework.context.NoSuchMessageException { assertEquals ( STRING , org.springframework.context.ConfigurableApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ( ) ) ) ; assertEquals ( STRING , org.springframework.context.ConfigurableApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ( ) ) ) ; org.springframework.context.ConfigurableApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( this . org.springframework.context.TestListener , this . org.springframework.context.TestListener , new org.springframework.context.AbstractApplicationContextTests.MyEvent ( this ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.context.AbstractApplicationContextTests.MyEvent org.springframework.context.AbstractApplicationContextTests.MyEvent = new org.springframework.context.AbstractApplicationContextTests.MyEvent ( this ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( org.springframework.context.AbstractApplicationContextTests.MyEvent ) ; java.io.ObjectOutputStream . void ( ) ; org.springframework.context.AbstractApplicationContextTests.MyEvent = ( org.springframework.context.AbstractApplicationContextTests.MyEvent ) new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) . java.lang.Object ( ) ; void ( this . org.springframework.context.TestListener , this . org.springframework.context.TestListener , org.springframework.context.AbstractApplicationContextTests.MyEvent ) ; }  <METHOD_END>
<METHOD_START> protected void void ( TestListener org.springframework.context.TestListener , TestListener org.springframework.context.TestListener , org.springframework.context.AbstractApplicationContextTests.MyEvent org.springframework.context.AbstractApplicationContextTests.MyEvent ) { org.springframework.context.TestListener . zeroCounter ( ) ; org.springframework.context.TestListener . zeroCounter ( ) ; assertTrue ( STRING , org.springframework.context.TestListener . getEventCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.context.TestListener . getEventCount ( ) == NUMBER ) ; this . org.springframework.context.ConfigurableApplicationContext . publishEvent ( org.springframework.context.AbstractApplicationContextTests.MyEvent ) ; assertTrue ( STRING + org.springframework.context.TestListener . getEventCount ( ) , org.springframework.context.TestListener . getEventCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.context.TestListener . getEventCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanThatListens org.springframework.context.BeanThatListens = ( BeanThatListens ) org.springframework.context.ConfigurableApplicationContext . getBean ( STRING ) ; org.springframework.context.BeanThatListens . zero ( ) ; assertTrue ( STRING , org.springframework.context.BeanThatListens . getEventCount ( ) == NUMBER ) ; this . org.springframework.context.ConfigurableApplicationContext . publishEvent ( new org.springframework.context.AbstractApplicationContextTests.MyEvent ( this ) ) ; assertTrue ( STRING + org.springframework.context.BeanThatListens . getEventCount ( ) , org.springframework.context.BeanThatListens . getEventCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
