<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.PTCTrue .class , org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface .class ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface ) ) ; assertThat ( org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface , instanceOf ( org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.PTCFalse .class , org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface .class ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface ) ) ; assertThat ( org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface , instanceOf ( org.springframework.transaction.annotation.AnnotatedServiceWithoutInterface .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.PTCTrue .class , org.springframework.transaction.annotation.AnnotatedServiceImpl .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.transaction.annotation.NonAnnotatedService org.springframework.transaction.annotation.NonAnnotatedService = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.NonAnnotatedService .class ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.transaction.annotation.NonAnnotatedService ) ) ; assertThat ( org.springframework.transaction.annotation.NonAnnotatedService , instanceOf ( org.springframework.transaction.annotation.AnnotatedServiceImpl .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.PTCFalse .class , org.springframework.transaction.annotation.AnnotatedServiceImpl .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.transaction.annotation.NonAnnotatedService org.springframework.transaction.annotation.NonAnnotatedService = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.NonAnnotatedService .class ) ; assertTrue ( STRING , AopUtils . isJdkDynamicProxy ( org.springframework.transaction.annotation.NonAnnotatedService ) ) ; assertThat ( org.springframework.transaction.annotation.NonAnnotatedService , not ( instanceOf ( org.springframework.transaction.annotation.AnnotatedServiceImpl .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.PTCTrue .class , org.springframework.transaction.annotation.NonAnnotatedServiceImpl .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.transaction.annotation.AnnotatedService org.springframework.transaction.annotation.AnnotatedService = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.AnnotatedService .class ) ; assertTrue ( STRING , AopUtils . isCglibProxy ( org.springframework.transaction.annotation.AnnotatedService ) ) ; assertThat ( org.springframework.transaction.annotation.AnnotatedService , instanceOf ( org.springframework.transaction.annotation.NonAnnotatedServiceImpl .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.transaction.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . register ( org.springframework.transaction.annotation.PTCFalse .class , org.springframework.transaction.annotation.NonAnnotatedServiceImpl .class ) ; org.springframework.transaction.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.transaction.annotation.AnnotatedService org.springframework.transaction.annotation.AnnotatedService = org.springframework.transaction.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.transaction.annotation.AnnotatedService .class ) ; assertTrue ( STRING , AopUtils . isJdkDynamicProxy ( org.springframework.transaction.annotation.AnnotatedService ) ) ; assertThat ( org.springframework.transaction.annotation.AnnotatedService , not ( instanceOf ( org.springframework.transaction.annotation.NonAnnotatedServiceImpl .class ) ) ) ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ Transactional void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional public void void ( ) { }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { }  <METHOD_END>
