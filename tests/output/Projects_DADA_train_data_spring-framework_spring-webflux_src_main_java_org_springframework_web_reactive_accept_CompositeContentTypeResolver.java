<METHOD_START> public void ( java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> < RequestedContentTypeResolver > java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ) { Assert . notEmpty ( java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> , STRING ) ; this . java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> . addAll ( java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> < RequestedContentTypeResolver > java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ( ) { return java.util.Collections . java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ( this . java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T extends org.springframework.web.reactive.accept.RequestedContentTypeResolver > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { for ( RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver : this . java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ) { if ( java.lang.Class<T> . boolean ( org.springframework.web.reactive.accept.RequestedContentTypeResolver ) ) { return ( T ) org.springframework.web.reactive.accept.RequestedContentTypeResolver ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> ( ServerWebExchange org.springframework.web.reactive.accept.ServerWebExchange ) throws org.springframework.web.reactive.accept.NotAcceptableStatusException { for ( RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver : this . java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ) { java.util.List<org.springframework.web.reactive.accept.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.accept.MediaType> = org.springframework.web.reactive.accept.RequestedContentTypeResolver . resolveMediaTypes ( org.springframework.web.reactive.accept.ServerWebExchange ) ; if ( java.util.List<org.springframework.web.reactive.accept.MediaType> . isEmpty ( ) || ( java.util.List<org.springframework.web.reactive.accept.MediaType> . size ( ) == NUMBER && java.util.List<org.springframework.web.reactive.accept.MediaType> . contains ( MediaType . ALL ) ) ) { continue; } return java.util.List<org.springframework.web.reactive.accept.MediaType> ; } return java.util.Collections . java.util.List<org.springframework.web.reactive.accept.MediaType> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( MediaType org.springframework.web.reactive.accept.MediaType ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver : this . java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ) { if ( org.springframework.web.reactive.accept.RequestedContentTypeResolver instanceof MappingContentTypeResolver ) java.util.Set<java.lang.String> . boolean ( ( ( MappingContentTypeResolver ) org.springframework.web.reactive.accept.RequestedContentTypeResolver ) . getKeysFor ( org.springframework.web.reactive.accept.MediaType ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver : this . java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ) { if ( org.springframework.web.reactive.accept.RequestedContentTypeResolver instanceof MappingContentTypeResolver ) java.util.Set<java.lang.String> . boolean ( ( ( MappingContentTypeResolver ) org.springframework.web.reactive.accept.RequestedContentTypeResolver ) . getKeys ( ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
