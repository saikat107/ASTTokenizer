<METHOD_START> @ Test public void void ( ) { ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING , STRING ) ; org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) . addLast ( new MockPropertySource ( STRING ) . withProperty ( STRING , STRING ) . withProperty ( STRING , STRING ) ) ; ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING , STRING ) ; org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) . addLast ( new MockPropertySource ( STRING ) . withProperty ( STRING , STRING ) . withProperty ( STRING , STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , nullValue ( ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , nullValue ( ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) , equalTo ( new java.lang.String [] { STRING , STRING } ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) , equalTo ( new java.lang.String [] { STRING , STRING } ) ) ; org.springframework.core.env.ConfigurableEnvironment . merge ( org.springframework.core.env.ConfigurableEnvironment ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , nullValue ( ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) , equalTo ( new java.lang.String [] { STRING , STRING , STRING , STRING } ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) , equalTo ( new java.lang.String [] { STRING , STRING } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = new StandardEnvironment ( ) ; MutablePropertySources org.springframework.core.env.MutablePropertySources = org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ) ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . precedenceOf ( PropertySource . named ( StandardEnvironment . SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME ) ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.env.MutablePropertySources . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = new StandardEnvironment ( ) ; MutablePropertySources org.springframework.core.env.MutablePropertySources = org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) ; assertThat ( org.springframework.core.env.MutablePropertySources . get ( StandardEnvironment . SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME ) , instanceOf ( SystemEnvironmentPropertySource .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) . length , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) . length , is ( NUMBER ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) [ NUMBER ] , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING , STRING ) ; java.lang.String [] java.lang.String[] = org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) ; assertThat ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) , hasItems ( STRING , STRING ) ) ; assertThat ( java.lang.String[] . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) . length , is ( NUMBER ) ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING , STRING ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) ) , hasItems ( STRING , STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) . length , is ( NUMBER ) ) ; org.springframework.core.env.ConfigurableEnvironment . addActiveProfile ( STRING ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) ) , hasItems ( STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) . length , is ( NUMBER ) ) ; org.springframework.core.env.ConfigurableEnvironment . addActiveProfile ( STRING ) ; org.springframework.core.env.ConfigurableEnvironment . addActiveProfile ( STRING ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) ) , hasItems ( STRING , STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) . length , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = new StandardEnvironment ( ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( ACTIVE_PROFILES_PROPERTY_NAME ) , nullValue ( ) ) ; org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( new MockPropertySource ( ) . withProperty ( ACTIVE_PROFILES_PROPERTY_NAME , STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getProperty ( ACTIVE_PROFILES_PROPERTY_NAME ) , equalTo ( STRING ) ) ; org.springframework.core.env.ConfigurableEnvironment . addActiveProfile ( STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) , arrayContaining ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) , equalTo ( new java.lang.String [] { RESERVED_DEFAULT_PROFILE_NAME } ) ) ; java.lang.System . java.lang.String ( DEFAULT_PROFILES_PROPERTY_NAME , STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) , equalTo ( new java.lang.String [] { STRING } ) ) ; org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( STRING , STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) , equalTo ( new java.lang.String [] { STRING , STRING } ) ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( DEFAULT_PROFILES_PROPERTY_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.System . java.lang.String ( DEFAULT_PROFILES_PROPERTY_NAME , STRING ) ; try { org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) ; } finally { java.lang.System . java.util.Properties ( ) . java.lang.Object ( DEFAULT_PROFILES_PROPERTY_NAME ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) . length , is ( NUMBER ) ) ; java.lang.System . java.lang.String ( ACTIVE_PROFILES_PROPERTY_NAME , STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) . length , is ( NUMBER ) ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( ACTIVE_PROFILES_PROPERTY_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( ACTIVE_PROFILES_PROPERTY_NAME , STRING ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) ) , hasItem ( STRING ) ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( ACTIVE_PROFILES_PROPERTY_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( ACTIVE_PROFILES_PROPERTY_NAME , STRING ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) ) , hasItems ( STRING , STRING ) ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( ACTIVE_PROFILES_PROPERTY_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( ACTIVE_PROFILES_PROPERTY_NAME , STRING ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getActiveProfiles ( ) ) , hasItems ( STRING , STRING ) ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( ACTIVE_PROFILES_PROPERTY_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) , equalTo ( new java.lang.String [] { RESERVED_DEFAULT_PROFILE_NAME } ) ) ; org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( new MockPropertySource ( ) . withProperty ( DEFAULT_PROFILES_PROPERTY_NAME , STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) . length , is ( NUMBER ) ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) ) , hasItem ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) . length , is ( NUMBER ) ) ; org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( STRING ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) ) , hasItem ( STRING ) ) ; org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( STRING , STRING ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) ) , not ( hasItem ( STRING ) ) ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.core.env.ConfigurableEnvironment . getDefaultProfiles ( ) ) , hasItems ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( ( java.lang.String ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING , STRING ) , is ( false ) ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING , STRING ) , is ( true ) ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING , STRING ) , is ( true ) ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING , STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING , STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( false ) ) ; org.springframework.core.env.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( new MockPropertySource ( ) . withProperty ( ACTIVE_PROFILES_PROPERTY_NAME , STRING ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( false ) ) ; org.springframework.core.env.ConfigurableEnvironment . setDefaultProfiles ( STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( true ) ) ; org.springframework.core.env.ConfigurableEnvironment . setActiveProfiles ( STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( true ) ) ; org.springframework.core.env.ConfigurableEnvironment . addActiveProfile ( STRING ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.core.env.ConfigurableEnvironment . acceptsProfiles ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableEnvironment org.springframework.core.env.ConfigurableEnvironment = new AbstractEnvironment ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { super. validateProfile ( java.lang.String ) ; if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } } } ; org.springframework.core.env.ConfigurableEnvironment . addActiveProfile ( STRING ) ; try { org.springframework.core.env.ConfigurableEnvironment . addActiveProfile ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) , equalTo ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { super. validateProfile ( java.lang.String ) ; if ( java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( STRING , STRING ) ; assertTrue ( org.springframework.core.env.ConfigurableEnvironment . getSystemEnvironment ( ) . isEmpty ( ) ) ; java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpringProperties . setProperty ( STRING , STRING ) ; assertTrue ( org.springframework.core.env.ConfigurableEnvironment . getSystemEnvironment ( ) . isEmpty ( ) ) ; SpringProperties . setProperty ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpringProperties . setFlag ( STRING ) ; assertTrue ( org.springframework.core.env.ConfigurableEnvironment . getSystemEnvironment ( ) . isEmpty ( ) ) ; SpringProperties . setProperty ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( java.lang.String , java.lang.Object ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( java.lang.Object , java.lang.String ) ; { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.core.env.ConfigurableEnvironment . getSystemProperties ( ) ; assertThat ( java.util.Map<,> , notNullValue ( ) ) ; assertSame ( java.util.Map<,> , java.lang.System . java.util.Properties ( ) ) ; assertThat ( java.util.Map<,> . get ( java.lang.String ) , equalTo ( ( java.lang.Object ) java.lang.String ) ) ; assertThat ( java.util.Map<,> . get ( java.lang.String ) , equalTo ( ( java.lang.Object ) java.lang.String ) ) ; assertThat ( java.util.Map<,> . get ( java.lang.String ) , equalTo ( java.lang.Object ) ) ; assertThat ( java.util.Map<,> . get ( java.lang.Object ) , equalTo ( ( java.lang.Object ) java.lang.String ) ) ; } java.lang.SecurityManager java.lang.SecurityManager = java.lang.System . java.lang.SecurityManager ( ) ; java.lang.SecurityManager java.lang.SecurityManager = new java.lang.SecurityManager ( ) { @ java.lang.Override public void void ( ) { throw new java.security.AccessControlException ( STRING ) ; } @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.security.AccessControlException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } } @ java.lang.Override public void void ( java.security.Permission java.security.Permission ) { } } ; java.lang.System . void ( java.lang.SecurityManager ) ; { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.core.env.ConfigurableEnvironment . getSystemProperties ( ) ; assertThat ( java.util.Map<,> , notNullValue ( ) ) ; assertThat ( java.util.Map<,> , instanceOf ( ReadOnlySystemAttributesMap .class ) ) ; assertThat ( ( java.lang.String ) java.util.Map<,> . get ( java.lang.String ) , equalTo ( java.lang.String ) ) ; assertThat ( java.util.Map<,> . get ( java.lang.String ) , equalTo ( null ) ) ; assertThat ( java.util.Map<,> . get ( java.lang.String ) , nullValue ( ) ) ; try { java.util.Map<,> . get ( java.lang.Object ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } } java.lang.System . void ( java.lang.SecurityManager ) ; java.lang.System . java.lang.String ( java.lang.String ) ; java.lang.System . java.lang.String ( java.lang.String ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( java.lang.String ) ; java.lang.System . java.util.Properties ( ) . java.lang.Object ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.security.AccessControlException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.security.AccessControlException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.security.Permission java.security.Permission ) { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( java.lang.String , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( java.lang.String , java.lang.String ) ; { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.core.env.ConfigurableEnvironment . getSystemEnvironment ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> , notNullValue ( ) ) ; assertSame ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.System . java.util.Map<java.lang.String,java.lang.String> ( ) ) ; } java.lang.SecurityManager java.lang.SecurityManager = java.lang.System . java.lang.SecurityManager ( ) ; java.lang.SecurityManager java.lang.SecurityManager = new java.lang.SecurityManager ( ) { @ java.lang.Override public void void ( java.security.Permission java.security.Permission ) { if ( STRING . boolean ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( STRING ) ; } if ( ( STRING + java.lang.String ) . boolean ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } } } ; java.lang.System . void ( java.lang.SecurityManager ) ; { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.core.env.ConfigurableEnvironment . getSystemEnvironment ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> , notNullValue ( ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> , instanceOf ( ReadOnlySystemAttributesMap .class ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , equalTo ( ( java.lang.Object ) java.lang.String ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , nullValue ( ) ) ; } java.lang.System . void ( java.lang.SecurityManager ) ; java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> ( ) . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.security.Permission java.security.Permission ) { if ( STRING . boolean ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( STRING ) ; } if ( ( STRING + java.lang.String ) . boolean ( java.security.Permission . java.lang.String ( ) ) ) { throw new java.security.AccessControlException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.util.Collections .class . java.lang.Class<?>[] ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.lang.System . java.util.Map<java.lang.String,java.lang.String> ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( STRING . boolean ( java.lang.Class<> . java.lang.String ( ) ) ) { try { java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.Object java.lang.Object = java.lang.reflect.Field . java.lang.Object ( java.util.Map<java.lang.String,java.lang.String> ) ; if ( java.lang.Object != null && java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) java.lang.Object ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } } java.lang.Class<?> < ? > java.lang.Class<?> ; try { java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } try { java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.Object java.lang.Object = java.lang.reflect.Field . java.lang.Object ( null ) ; return ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) java.lang.Object ; } catch ( java.lang.NoSuchFieldException java.lang.NoSuchFieldException ) { } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } try { java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; java.lang.Object java.lang.Object = java.lang.reflect.Field . java.lang.Object ( null ) ; return ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) java.lang.Object ; } catch ( java.lang.NoSuchFieldException java.lang.NoSuchFieldException ) { } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
