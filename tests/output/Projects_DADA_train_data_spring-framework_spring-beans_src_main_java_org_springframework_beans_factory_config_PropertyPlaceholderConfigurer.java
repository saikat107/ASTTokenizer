<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { this . int = org.springframework.beans.factory.config.Constants . asNumber ( java.lang.String ) . intValue ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Properties java.util.Properties , int int ) { java.lang.String java.lang.String = null ; if ( int == int ) { java.lang.String = java.lang.String ( java.lang.String ) ; } if ( java.lang.String == null ) { java.lang.String = java.lang.String ( java.lang.String , java.util.Properties ) ; } if ( java.lang.String == null && int == int ) { java.lang.String = java.lang.String ( java.lang.String ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) { return java.util.Properties . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; if ( java.lang.String == null && this . boolean ) { java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; } return java.lang.String ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.Throwable ) ; } return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ConfigurableListableBeanFactory org.springframework.beans.factory.config.ConfigurableListableBeanFactory , java.util.Properties java.util.Properties )			throws org.springframework.beans.factory.config.BeansException { StringValueResolver org.springframework.beans.factory.config.StringValueResolver = new org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.PlaceholderResolvingStringValueResolver ( java.util.Properties ) ; doProcessProperties ( org.springframework.beans.factory.config.ConfigurableListableBeanFactory , org.springframework.beans.factory.config.StringValueResolver ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Properties java.util.Properties ) { this . org.springframework.beans.factory.config.PropertyPlaceholderHelper = new PropertyPlaceholderHelper ( placeholderPrefix , placeholderSuffix , valueSeparator , ignoreUnresolvablePlaceholders ) ; this . org.springframework.beans.factory.config.PlaceholderResolver = new org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.PropertyPlaceholderConfigurerResolver ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.config.BeansException { java.lang.String java.lang.String = this . org.springframework.beans.factory.config.PropertyPlaceholderHelper . replacePlaceholders ( java.lang.String , this . org.springframework.beans.factory.config.PlaceholderResolver ) ; if ( trimValues ) { java.lang.String = java.lang.String . java.lang.String ( ) ; } return ( java.lang.String . boolean ( nullValue ) ? null : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return org.springframework.beans.factory.config.PropertyPlaceholderConfigurer .this . java.lang.String ( java.lang.String , java.util.Properties , int ) ; }  <METHOD_END>
