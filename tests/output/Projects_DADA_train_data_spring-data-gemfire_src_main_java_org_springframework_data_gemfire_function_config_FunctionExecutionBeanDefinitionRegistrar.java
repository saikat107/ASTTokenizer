<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.data.gemfire.function.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) { AbstractFunctionExecutionConfigurationSource org.springframework.data.gemfire.function.config.AbstractFunctionExecutionConfigurationSource = new AnnotationFunctionExecutionConfigurationSource ( org.springframework.data.gemfire.function.config.AnnotationMetadata ) ; void ( org.springframework.data.gemfire.function.config.AbstractFunctionExecutionConfigurationSource , org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> void void ( AbstractFunctionExecutionConfigurationSource org.springframework.data.gemfire.function.config.AbstractFunctionExecutionConfigurationSource , BeanDefinitionRegistry org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) { for ( ScannedGenericBeanDefinition org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition : org.springframework.data.gemfire.function.config.AbstractFunctionExecutionConfigurationSource . getCandidates ( new DefaultResourceLoader ( ) ) ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition , AnnotationFunctionExecutionConfigurationSource . getFunctionExecutionAnnotationTypeNames ( ) ) ; Assert . notNull ( java.lang.String ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition . getMetadata ( ) . getAnnotationAttributes ( java.lang.String ) . get ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = BeanDefinitionReaderUtils . generateBeanName ( org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition , org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) ; } AbstractFunctionExecutionBeanDefinitionBuilder org.springframework.data.gemfire.function.config.AbstractFunctionExecutionBeanDefinitionBuilder = FunctionExecutionBeanDefinitionBuilderFactory . newInstance ( new FunctionExecutionConfiguration ( org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition , java.lang.String ) ) ; org.springframework.data.gemfire.function.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.data.gemfire.function.config.AbstractFunctionExecutionBeanDefinitionBuilder . build ( org.springframework.data.gemfire.function.config.BeanDefinitionRegistry ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ScannedGenericBeanDefinition org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition . getMetadata ( ) . getAnnotationTypes ( ) ; java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { Assert . isNull ( java.lang.String , java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition . getBeanClassName ( ) , java.lang.String , java.lang.String ) ) ; java.lang.String = java.lang.String ; } } return java.lang.String ; }  <METHOD_END>
