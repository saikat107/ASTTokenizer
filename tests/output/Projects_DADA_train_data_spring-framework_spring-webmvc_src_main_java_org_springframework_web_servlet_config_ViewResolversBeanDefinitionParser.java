<METHOD_START> public org.springframework.web.servlet.config.BeanDefinition org.springframework.web.servlet.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ; org.springframework.web.servlet.config.ParserContext . pushContainingComponent ( new CompositeComponentDefinition ( org.w3c.dom.Element . java.lang.String ( ) , java.lang.Object ) ) ; ManagedList < java.lang.Object > org.springframework.web.servlet.config.ManagedList<java.lang.Object> = new ManagedList <> ( NUMBER ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . setSource ( org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING } ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , java.lang.String[] ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ) ; continue; } RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( InternalResourceViewResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; void ( org.w3c.dom.Element , org.springframework.web.servlet.config.RootBeanDefinition ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( TilesViewResolver .class ) ; void ( org.w3c.dom.Element , org.springframework.web.servlet.config.RootBeanDefinition ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( FreeMarkerViewResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; void ( org.w3c.dom.Element , org.springframework.web.servlet.config.RootBeanDefinition ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( GroovyMarkupViewResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; void ( org.w3c.dom.Element , org.springframework.web.servlet.config.RootBeanDefinition ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ScriptTemplateViewResolver .class ) ; void ( org.w3c.dom.Element , org.springframework.web.servlet.config.RootBeanDefinition ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( BeanNameViewResolver .class ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.String ) ; } org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } java.lang.String java.lang.String = java.lang.String ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ViewResolverComposite .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; java.lang.String[] = new java.lang.String [] { STRING } ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , java.lang.String[] ) ; if ( java.util.List<org.w3c.dom.Element> . boolean ( ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<java.lang.Object> ) ; } else if ( java.util.List<org.w3c.dom.Element> . int ( ) == NUMBER ) { BeanDefinition org.springframework.web.servlet.config.BeanDefinition = org.springframework.web.servlet.config.BeanDefinition ( java.util.List<org.w3c.dom.Element> . org.w3c.dom.Element ( NUMBER ) , org.springframework.web.servlet.config.ParserContext ) ; org.springframework.web.servlet.config.BeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<java.lang.Object> ) ; ManagedList < java.lang.Object > org.springframework.web.servlet.config.ManagedList<java.lang.Object> = new ManagedList <> ( NUMBER ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.BeanDefinition ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , Ordered . HIGHEST_PRECEDENCE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<java.lang.Object> ) ; } else if ( java.util.List<org.w3c.dom.Element> . int ( ) > NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; org.springframework.web.servlet.config.ParserContext . popAndRegisterContainingComponent ( ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition ) { if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.BeanDefinition org.springframework.web.servlet.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ContentNegotiatingViewResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; MutablePropertyValues org.springframework.web.servlet.config.MutablePropertyValues = org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , new java.lang.String [] { STRING } ) ; if ( ! java.util.List<org.w3c.dom.Element> . boolean ( ) ) { ManagedList < java.lang.Object > org.springframework.web.servlet.config.ManagedList<java.lang.Object> = new ManagedList <> ( ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( java.util.List<org.w3c.dom.Element> . org.w3c.dom.Element ( NUMBER ) , STRING , STRING ) ) { org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ) ; } org.springframework.web.servlet.config.MutablePropertyValues . add ( STRING , org.springframework.web.servlet.config.ManagedList<java.lang.Object> ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; } java.lang.Object java.lang.Object = MvcNamespaceUtils . getContentNegotiationManager ( org.springframework.web.servlet.config.ParserContext ) ; if ( java.lang.Object != null ) { org.springframework.web.servlet.config.MutablePropertyValues . add ( STRING , java.lang.Object ) ; } return org.springframework.web.servlet.config.RootBeanDefinition ; }  <METHOD_END>
