<METHOD_START> public void ( Cache org.springframework.integration.gemfire.util.Cache ) { Assert . notNull ( org.springframework.integration.gemfire.util.Cache , STRING ) ; this . org.springframework.integration.gemfire.util.Region<?,?> = org.springframework.integration.gemfire.util.Cache . createRegionFactory ( ) . setScope ( Scope . GLOBAL ) . create ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( Region < ? , ? > org.springframework.integration.gemfire.util.Region<?,?> ) { Assert . notNull ( org.springframework.integration.gemfire.util.Region<,> , STRING ) ; this . org.springframework.integration.gemfire.util.Region<?,?> = org.springframework.integration.gemfire.util.Region<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ( java.lang.Object java.lang.Object ) { return this . org.springframework.integration.gemfire.util.Region<,> . getDistributedLock ( java.lang.Object ) ; }  <METHOD_END>
