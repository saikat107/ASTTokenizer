<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { java.lang.Class<> } ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.jndi.BeanFactory ) { if ( org.springframework.jndi.BeanFactory instanceof ConfigurableBeanFactory ) { this . org.springframework.jndi.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.jndi.BeanFactory ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.IllegalArgumentException , javax.naming.NamingException { super. afterPropertiesSet ( ) ; if ( this . java.lang.Class<?>[] != null || ! this . boolean || ! this . boolean || this . boolean ) { if ( this . java.lang.Object != null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.Object = org.springframework.jndi.JndiObjectFactoryBean.JndiObjectProxyFactory . java.lang.Object ( this ) ; } else { if ( this . java.lang.Object != null && getExpectedType ( ) != null && ! getExpectedType ( ) . isInstance ( this . java.lang.Object ) ) { TypeConverter org.springframework.jndi.TypeConverter = ( this . org.springframework.jndi.ConfigurableBeanFactory != null ? this . org.springframework.jndi.ConfigurableBeanFactory . getTypeConverter ( ) : new SimpleTypeConverter ( ) ) ; try { this . java.lang.Object = org.springframework.jndi.TypeConverter . convertIfNecessary ( this . java.lang.Object , getExpectedType ( ) ) ; } catch ( TypeMismatchException org.springframework.jndi.TypeMismatchException ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.Object + STRING + this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + getExpectedType ( ) . getName ( ) + STRING , org.springframework.jndi.TypeMismatchException ) ; } } this . java.lang.Object = java.lang.Object ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) javax.naming.NamingException { java.lang.ClassLoader java.lang.ClassLoader = ClassUtils . overrideThreadContextClassLoader ( this . java.lang.ClassLoader ) ; try { return lookup ( ) ; } catch ( TypeMismatchNamingException org.springframework.jndi.TypeMismatchNamingException ) { throw org.springframework.jndi.TypeMismatchNamingException ; } catch ( javax.naming.NamingException javax.naming.NamingException ) { if ( this . java.lang.Object != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , javax.naming.NamingException ) ; } else if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + javax.naming.NamingException ) ; } return this . java.lang.Object ; } throw javax.naming.NamingException ; } finally { if ( java.lang.ClassLoader != null ) { java.lang.Thread . java.lang.Thread ( ) . void ( java.lang.ClassLoader ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.Class<?>[] != null ) { if ( this . java.lang.Class<?>[] . int == NUMBER ) { return this . java.lang.Class<?>[] [ NUMBER ] ; } else if ( this . java.lang.Class<?>[] . int > NUMBER ) { return java.lang.Class<?> ( this . java.lang.Class<?>[] ) ; } } if ( this . java.lang.Object != null ) { return this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } else { return getExpectedType ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { return ClassUtils . createCompositeInterface ( java.lang.Class<?>[] , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( org.springframework.jndi.JndiObjectFactoryBean org.springframework.jndi.JndiObjectFactoryBean ) throws javax.naming.NamingException { JndiObjectTargetSource org.springframework.jndi.JndiObjectTargetSource = new JndiObjectTargetSource ( ) ; org.springframework.jndi.JndiObjectTargetSource . setJndiTemplate ( org.springframework.jndi.JndiObjectFactoryBean . getJndiTemplate ( ) ) ; org.springframework.jndi.JndiObjectTargetSource . setJndiName ( org.springframework.jndi.JndiObjectFactoryBean . getJndiName ( ) ) ; org.springframework.jndi.JndiObjectTargetSource . setExpectedType ( org.springframework.jndi.JndiObjectFactoryBean . getExpectedType ( ) ) ; org.springframework.jndi.JndiObjectTargetSource . setResourceRef ( org.springframework.jndi.JndiObjectFactoryBean . isResourceRef ( ) ) ; org.springframework.jndi.JndiObjectTargetSource . setLookupOnStartup ( org.springframework.jndi.JndiObjectFactoryBean . boolean ) ; org.springframework.jndi.JndiObjectTargetSource . setCache ( org.springframework.jndi.JndiObjectFactoryBean . boolean ) ; org.springframework.jndi.JndiObjectTargetSource . afterPropertiesSet ( ) ; ProxyFactory org.springframework.jndi.ProxyFactory = new ProxyFactory ( ) ; if ( org.springframework.jndi.JndiObjectFactoryBean . java.lang.Class<?>[] != null ) { org.springframework.jndi.ProxyFactory . setInterfaces ( org.springframework.jndi.JndiObjectFactoryBean . java.lang.Class<?>[] ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.jndi.JndiObjectTargetSource . getTargetClass ( ) ; if ( java.lang.Class<> == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ClassUtils . getAllInterfacesForClass ( java.lang.Class<> , org.springframework.jndi.JndiObjectFactoryBean . java.lang.ClassLoader ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) ) { org.springframework.jndi.ProxyFactory . addInterface ( java.lang.Class<> ) ; } } } if ( org.springframework.jndi.JndiObjectFactoryBean . boolean ) { org.springframework.jndi.ProxyFactory . addAdvice ( new org.springframework.jndi.JndiObjectFactoryBean.JndiContextExposingInterceptor ( org.springframework.jndi.JndiObjectFactoryBean . getJndiTemplate ( ) ) ) ; } org.springframework.jndi.ProxyFactory . setTargetSource ( org.springframework.jndi.JndiObjectTargetSource ) ; return org.springframework.jndi.ProxyFactory . getProxy ( org.springframework.jndi.JndiObjectFactoryBean . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> public void ( JndiTemplate org.springframework.jndi.JndiTemplate ) { this . org.springframework.jndi.JndiTemplate = org.springframework.jndi.JndiTemplate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.jndi.MethodInvocation ) throws java.lang.Throwable { javax.naming.Context javax.naming.Context = ( boolean ( org.springframework.jndi.MethodInvocation . getMethod ( ) ) ? this . org.springframework.jndi.JndiTemplate . getContext ( ) : null ) ; try { return org.springframework.jndi.MethodInvocation . proceed ( ) ; } finally { this . org.springframework.jndi.JndiTemplate . releaseContext ( javax.naming.Context ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( java.lang.Object .class != java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; }  <METHOD_END>
