<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.context.MessageSource org.springframework.boot.autoconfigure.context.MessageSource ( ) { ResourceBundleMessageSource org.springframework.boot.autoconfigure.context.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.boot.autoconfigure.context.ResourceBundleMessageSource . setBasenames ( StringUtils . commaDelimitedListToStringArray ( StringUtils . trimAllWhitespace ( this . java.lang.String ) ) ) ; } if ( this . java.nio.charset.Charset != null ) { org.springframework.boot.autoconfigure.context.ResourceBundleMessageSource . setDefaultEncoding ( this . java.nio.charset.Charset . java.lang.String ( ) ) ; } org.springframework.boot.autoconfigure.context.ResourceBundleMessageSource . setFallbackToSystemLocale ( this . boolean ) ; org.springframework.boot.autoconfigure.context.ResourceBundleMessageSource . setCacheSeconds ( this . int ) ; org.springframework.boot.autoconfigure.context.ResourceBundleMessageSource . setAlwaysUseMessageFormat ( this . boolean ) ; return org.springframework.boot.autoconfigure.context.ResourceBundleMessageSource ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.nio.charset.Charset java.nio.charset.Charset ( ) { return this . java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> public void void ( java.nio.charset.Charset java.nio.charset.Charset ) { this . java.nio.charset.Charset = java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.context.ConditionOutcome org.springframework.boot.autoconfigure.context.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.context.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.context.AnnotatedTypeMetadata ) { java.lang.String java.lang.String = org.springframework.boot.autoconfigure.context.ConditionContext . getEnvironment ( ) . getProperty ( STRING , STRING ) ; ConditionOutcome org.springframework.boot.autoconfigure.context.ConditionOutcome = org.springframework.boot.autoconfigure.context.ConcurrentReferenceHashMap<java.lang.String,org.springframework.boot.autoconfigure.context.ConditionOutcome> . get ( java.lang.String ) ; if ( org.springframework.boot.autoconfigure.context.ConditionOutcome == null ) { org.springframework.boot.autoconfigure.context.ConditionOutcome = org.springframework.boot.autoconfigure.context.ConditionOutcome ( org.springframework.boot.autoconfigure.context.ConditionContext , java.lang.String ) ; org.springframework.boot.autoconfigure.context.ConcurrentReferenceHashMap<java.lang.String,org.springframework.boot.autoconfigure.context.ConditionOutcome> . put ( java.lang.String , org.springframework.boot.autoconfigure.context.ConditionOutcome ) ; } return org.springframework.boot.autoconfigure.context.ConditionOutcome ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.context.ConditionOutcome org.springframework.boot.autoconfigure.context.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.context.ConditionContext , java.lang.String java.lang.String ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; for ( java.lang.String java.lang.String : StringUtils . commaDelimitedListToStringArray ( StringUtils . trimAllWhitespace ( java.lang.String ) ) ) { for ( Resource org.springframework.boot.autoconfigure.context.Resource : org.springframework.boot.autoconfigure.context.Resource[] ( org.springframework.boot.autoconfigure.context.ConditionContext . getClassLoader ( ) , java.lang.String ) ) { if ( org.springframework.boot.autoconfigure.context.Resource . exists ( ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( org.springframework.boot.autoconfigure.context.Resource ) ) ; } } } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING + java.lang.String ) . atAll ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.context.Resource [] org.springframework.boot.autoconfigure.context.Resource[] ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String ) { try { return new PathMatchingResourcePatternResolver ( java.lang.ClassLoader ) . getResources ( STRING + java.lang.String + STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { return org.springframework.boot.autoconfigure.context.Resource[] ; } }  <METHOD_END>
