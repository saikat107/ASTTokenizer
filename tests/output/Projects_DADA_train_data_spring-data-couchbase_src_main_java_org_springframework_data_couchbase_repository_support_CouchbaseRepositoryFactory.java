<METHOD_START> public void ( final RepositoryOperationsMapping org.springframework.data.couchbase.repository.support.RepositoryOperationsMapping , final IndexManager org.springframework.data.couchbase.repository.support.IndexManager ) { Assert . notNull ( org.springframework.data.couchbase.repository.support.RepositoryOperationsMapping , STRING ) ; Assert . notNull ( org.springframework.data.couchbase.repository.support.IndexManager , STRING ) ; this . org.springframework.data.couchbase.repository.support.RepositoryOperationsMapping = org.springframework.data.couchbase.repository.support.RepositoryOperationsMapping ; this . org.springframework.data.couchbase.repository.support.IndexManager = org.springframework.data.couchbase.repository.support.IndexManager ; org.springframework.data.couchbase.repository.support.MappingContext<? extends org.springframework.data.couchbase.repository.support.CouchbasePersistentEntity<?>,org.springframework.data.couchbase.repository.support.CouchbasePersistentProperty> = this . org.springframework.data.couchbase.repository.support.RepositoryOperationsMapping . getMappingContext ( ) ; org.springframework.data.couchbase.repository.support.ViewPostProcessor = ViewPostProcessor . INSTANCE ; addRepositoryProxyPostProcessor ( org.springframework.data.couchbase.repository.support.ViewPostProcessor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , ID extends java.io.Serializable > org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,ID> < T , ID > org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,ID> ( final java.lang.Class<T> < T > java.lang.Class<T> ) { CouchbasePersistentEntity < ? > org.springframework.data.couchbase.repository.support.CouchbasePersistentEntity<?> = org.springframework.data.couchbase.repository.support.MappingContext<,org.springframework.data.couchbase.repository.support.CouchbasePersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<T> ) ; return new MappingCouchbaseEntityInformation < T , ID > ( ( CouchbasePersistentEntity < T > ) org.springframework.data.couchbase.repository.support.CouchbasePersistentEntity<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final java.lang.Object java.lang.Object ( final RepositoryInformation org.springframework.data.couchbase.repository.support.RepositoryInformation ) { CouchbaseOperations org.springframework.data.couchbase.repository.support.CouchbaseOperations = org.springframework.data.couchbase.repository.support.RepositoryOperationsMapping . resolve ( org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) , org.springframework.data.couchbase.repository.support.RepositoryInformation . getDomainType ( ) ) ; boolean boolean = org.springframework.data.couchbase.repository.support.CouchbaseOperations . getCouchbaseClusterInfo ( ) . checkAvailable ( CouchbaseFeature . N1QL ) ; ViewIndexed org.springframework.data.couchbase.repository.support.ViewIndexed = AnnotationUtils . findAnnotation ( org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) , ViewIndexed .class ) ; N1qlPrimaryIndexed org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed = AnnotationUtils . findAnnotation ( org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) , N1qlPrimaryIndexed .class ) ; N1qlSecondaryIndexed org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed = AnnotationUtils . findAnnotation ( org.springframework.data.couchbase.repository.support.RepositoryInformation . getRepositoryInterface ( ) , N1qlSecondaryIndexed .class ) ; void ( org.springframework.data.couchbase.repository.support.RepositoryInformation , boolean , org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed , org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed ) ; org.springframework.data.couchbase.repository.support.IndexManager . buildIndexes ( org.springframework.data.couchbase.repository.support.RepositoryInformation , org.springframework.data.couchbase.repository.support.ViewIndexed , org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed , org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed , org.springframework.data.couchbase.repository.support.CouchbaseOperations ) ; CouchbaseEntityInformation < ? , java.io.Serializable > org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<?,java.io.Serializable> = org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation ( org.springframework.data.couchbase.repository.support.RepositoryInformation . getDomainType ( ) ) ; SimpleCouchbaseRepository org.springframework.data.couchbase.repository.support.SimpleCouchbaseRepository = getTargetRepositoryViaReflection ( org.springframework.data.couchbase.repository.support.RepositoryInformation , org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<,java.io.Serializable> , org.springframework.data.couchbase.repository.support.CouchbaseOperations ) ; org.springframework.data.couchbase.repository.support.SimpleCouchbaseRepository . setViewMetadataProvider ( org.springframework.data.couchbase.repository.support.ViewPostProcessor . getViewMetadataProvider ( ) ) ; return org.springframework.data.couchbase.repository.support.SimpleCouchbaseRepository ; }  <METHOD_END>
<METHOD_START> private void void ( RepositoryInformation org.springframework.data.couchbase.repository.support.RepositoryInformation , boolean boolean , N1qlPrimaryIndexed org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed , N1qlSecondaryIndexed org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed ) { boolean boolean = org.springframework.data.couchbase.repository.support.RepositoryInformation . isPagingRepository ( ) || org.springframework.data.couchbase.repository.support.N1qlPrimaryIndexed != null || org.springframework.data.couchbase.repository.support.N1qlSecondaryIndexed != null ; if ( ! boolean ) { for ( java.lang.reflect.Method java.lang.reflect.Method : org.springframework.data.couchbase.repository.support.RepositoryInformation . getQueryMethods ( ) ) { boolean boolean = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , Query .class ) != null ; boolean boolean = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , View .class ) != null ; if ( boolean || ! boolean ) { boolean = true ; break; } } } if ( boolean && ! boolean ) { throw new UnsupportedCouchbaseFeatureException ( STRING , CouchbaseFeature . N1QL ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final java.lang.Class<?> < ? > java.lang.Class<?> ( final RepositoryMetadata org.springframework.data.couchbase.repository.support.RepositoryMetadata ) { CouchbaseOperations org.springframework.data.couchbase.repository.support.CouchbaseOperations = org.springframework.data.couchbase.repository.support.RepositoryOperationsMapping . resolve ( org.springframework.data.couchbase.repository.support.RepositoryMetadata . getRepositoryInterface ( ) , org.springframework.data.couchbase.repository.support.RepositoryMetadata . getDomainType ( ) ) ; boolean boolean = org.springframework.data.couchbase.repository.support.CouchbaseOperations . getCouchbaseClusterInfo ( ) . checkAvailable ( CouchbaseFeature . N1QL ) ; if ( boolean ) { return java.lang.Class<? extends org.springframework.data.couchbase.repository.support.N1qlCouchbaseRepository> ( org.springframework.data.couchbase.repository.support.RepositoryMetadata ) ; } return java.lang.Class<? extends org.springframework.data.couchbase.repository.support.SimpleCouchbaseRepository> ( org.springframework.data.couchbase.repository.support.RepositoryMetadata ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<? extends org.springframework.data.couchbase.repository.support.N1qlCouchbaseRepository> < ? extends N1qlCouchbaseRepository > java.lang.Class<? extends org.springframework.data.couchbase.repository.support.N1qlCouchbaseRepository> ( final RepositoryMetadata org.springframework.data.couchbase.repository.support.RepositoryMetadata ) { return N1qlCouchbaseRepository .class ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<? extends org.springframework.data.couchbase.repository.support.SimpleCouchbaseRepository> < ? extends SimpleCouchbaseRepository > java.lang.Class<? extends org.springframework.data.couchbase.repository.support.SimpleCouchbaseRepository> ( final RepositoryMetadata org.springframework.data.couchbase.repository.support.RepositoryMetadata ) { return SimpleCouchbaseRepository .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.couchbase.repository.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.couchbase.repository.support.QueryLookupStrategy> ( QueryLookupStrategy . QueryLookupStrategy QueryLookupStrategy.Key , EvaluationContextProvider org.springframework.data.couchbase.repository.support.EvaluationContextProvider ) { return java.util.Optional . java.util.Optional<T> ( new org.springframework.data.couchbase.repository.support.CouchbaseRepositoryFactory.CouchbaseQueryLookupStrategy ( org.springframework.data.couchbase.repository.support.EvaluationContextProvider ) ) ; }  <METHOD_END>
<METHOD_START> public void ( EvaluationContextProvider org.springframework.data.couchbase.repository.support.EvaluationContextProvider ) { this . org.springframework.data.couchbase.repository.support.EvaluationContextProvider = org.springframework.data.couchbase.repository.support.EvaluationContextProvider ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.RepositoryQuery org.springframework.data.couchbase.repository.support.RepositoryQuery ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.couchbase.repository.support.RepositoryMetadata , ProjectionFactory org.springframework.data.couchbase.repository.support.ProjectionFactory , NamedQueries org.springframework.data.couchbase.repository.support.NamedQueries ) { CouchbaseOperations org.springframework.data.couchbase.repository.support.CouchbaseOperations = org.springframework.data.couchbase.repository.support.RepositoryOperationsMapping . resolve ( org.springframework.data.couchbase.repository.support.RepositoryMetadata . getRepositoryInterface ( ) , org.springframework.data.couchbase.repository.support.RepositoryMetadata . getDomainType ( ) ) ; CouchbaseQueryMethod org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod = new CouchbaseQueryMethod ( java.lang.reflect.Method , org.springframework.data.couchbase.repository.support.RepositoryMetadata , org.springframework.data.couchbase.repository.support.ProjectionFactory , org.springframework.data.couchbase.repository.support.MappingContext<,org.springframework.data.couchbase.repository.support.CouchbasePersistentProperty> ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod . getNamedQueryName ( ) ; if ( org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod . hasDimensionalAnnotation ( ) ) { return new SpatialViewBasedQuery ( org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.support.CouchbaseOperations ) ; } else if ( org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod . hasViewAnnotation ( ) ) { return new ViewBasedCouchbaseQuery ( org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.support.CouchbaseOperations ) ; } else if ( org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod . hasN1qlAnnotation ( ) ) { if ( org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod . hasInlineN1qlQuery ( ) ) { return new StringN1qlBasedQuery ( org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod . getInlineN1qlQuery ( ) , org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.support.CouchbaseOperations , org.springframework.data.couchbase.repository.support.SpelExpressionParser , org.springframework.data.couchbase.repository.support.EvaluationContextProvider ) ; } else if ( org.springframework.data.couchbase.repository.support.NamedQueries . hasQuery ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.data.couchbase.repository.support.NamedQueries . getQuery ( java.lang.String ) ; return new StringN1qlBasedQuery ( java.lang.String , org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.support.CouchbaseOperations , org.springframework.data.couchbase.repository.support.SpelExpressionParser , org.springframework.data.couchbase.repository.support.EvaluationContextProvider ) ; } } return new PartTreeN1qlBasedQuery ( org.springframework.data.couchbase.repository.support.CouchbaseQueryMethod , org.springframework.data.couchbase.repository.support.CouchbaseOperations ) ; }  <METHOD_END>
