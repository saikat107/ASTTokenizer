<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.classpath.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.classpath.ExpectedException . expectMessage ( STRING ) ; new ClassPathChangedEvent ( this . java.lang.Object , null , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> = new java.util.LinkedHashSet<org.springframework.boot.devtools.classpath.ChangedFiles> <> ( ) ; ClassPathChangedEvent org.springframework.boot.devtools.classpath.ClassPathChangedEvent = new ClassPathChangedEvent ( this . java.lang.Object , java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> , false ) ; assertThat ( org.springframework.boot.devtools.classpath.ClassPathChangedEvent . getChangeSet ( ) ) . isSameAs ( java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> = new java.util.LinkedHashSet<org.springframework.boot.devtools.classpath.ChangedFiles> <> ( ) ; ClassPathChangedEvent org.springframework.boot.devtools.classpath.ClassPathChangedEvent ; org.springframework.boot.devtools.classpath.ClassPathChangedEvent = new ClassPathChangedEvent ( this . java.lang.Object , java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> , false ) ; assertThat ( org.springframework.boot.devtools.classpath.ClassPathChangedEvent . isRestartRequired ( ) ) . isFalse ( ) ; org.springframework.boot.devtools.classpath.ClassPathChangedEvent = new ClassPathChangedEvent ( this . java.lang.Object , java.util.Set<org.springframework.boot.devtools.classpath.ChangedFiles> , true ) ; assertThat ( org.springframework.boot.devtools.classpath.ClassPathChangedEvent . isRestartRequired ( ) ) . isTrue ( ) ; }  <METHOD_END>
