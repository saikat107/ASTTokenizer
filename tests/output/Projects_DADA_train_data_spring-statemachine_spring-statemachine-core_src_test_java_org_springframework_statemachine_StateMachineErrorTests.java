<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.AnnotationConfigApplicationContext org.springframework.statemachine.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.StateMachineErrorTests.EventListenerConfig1 .class , org.springframework.statemachine.StateMachineErrorTests.Config1 .class ) ; context . refresh ( ) ; org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 = context . getBean ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 .class ) ; org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener2 org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener2 = context . getBean ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener2 .class ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . hasStateMachineError ( ) , is ( false ) ) ; org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener = new org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setStateMachineError ( new java.lang.RuntimeException ( STRING ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener2 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . hasStateMachineError ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.StateMachineErrorTests.EventListenerConfig1 .class , org.springframework.statemachine.StateMachineErrorTests.Config1 .class ) ; context . refresh ( ) ; org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 = context . getBean ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 .class ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . hasStateMachineError ( ) , is ( false ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < TestStates , TestEvents > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < TestStates , TestEvents > org.springframework.statemachine.StateMachineAccess<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { org.springframework.statemachine.StateMachineAccess<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateMachineInterceptor ( new StateMachineInterceptorAdapter < TestStates , TestEvents > ( ) { @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , java.lang.Exception java.lang.Exception ) { return null ; } } ) ; } } ) ; org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener = new org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setStateMachineError ( new java.lang.RuntimeException ( STRING ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.TestStateMachineListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . hasStateMachineError ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < TestStates , TestEvents > org.springframework.statemachine.StateMachineAccess<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { org.springframework.statemachine.StateMachineAccess<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateMachineInterceptor ( new StateMachineInterceptorAdapter < TestStates , TestEvents > ( ) { @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , java.lang.Exception java.lang.Exception ) { return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , java.lang.Exception java.lang.Exception ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.StateMachineErrorTests.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . hasStateMachineError ( ) , is ( false ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . setStateMachineError ( new java.lang.RuntimeException ( STRING ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . hasStateMachineError ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S1 ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S1 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.StateMachineErrorTests.EventListenerConfig2 .class , org.springframework.statemachine.StateMachineErrorTests.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener = new org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener ( ) ; org.springframework.statemachine.StateMachineErrorTests.ErroringStateMachineListener org.springframework.statemachine.StateMachineErrorTests.ErroringStateMachineListener = new org.springframework.statemachine.StateMachineErrorTests.ErroringStateMachineListener ( ) ; org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener = new org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineErrorTests.ErroringStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.StateMachineErrorTests.EventListenerConfig2 .class , org.springframework.statemachine.StateMachineErrorTests.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener = new org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener ( ) ; org.springframework.statemachine.StateMachineErrorTests.ErroringStateMachineListener2 org.springframework.statemachine.StateMachineErrorTests.ErroringStateMachineListener2 = new org.springframework.statemachine.StateMachineErrorTests.ErroringStateMachineListener2 ( ) ; org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener = new org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineErrorTests.ErroringStateMachineListener2 ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.StartedStateMachineListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.StateMachineErrorTests.StateChangedStateMachineListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) . state ( TestStates . S3 ) . state ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . event ( TestEvents . E3 ) . and ( ) . withExternal ( ) . source ( TestStates . S4 ) . target ( TestStates . S3 ) . event ( TestEvents . E4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) . state ( TestStates . S3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 ( ) { return new org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener1 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener2 org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener2 ( ) { return new org.springframework.statemachine.StateMachineErrorTests.TestApplicationEventListener2 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.StateMachineErrorTests.ErroringApplicationEventListener1 org.springframework.statemachine.StateMachineErrorTests.ErroringApplicationEventListener1 ( ) { return new org.springframework.statemachine.StateMachineErrorTests.ErroringApplicationEventListener1 ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , java.lang.Exception java.lang.Exception ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEvent org.springframework.statemachine.StateMachineEvent ) { if ( org.springframework.statemachine.StateMachineEvent instanceof OnStateMachineError ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( OnStateMachineError org.springframework.statemachine.OnStateMachineError ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEvent org.springframework.statemachine.StateMachineEvent ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < TestEvents > org.springframework.statemachine.Message<org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.StateContext<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < TestEvents > org.springframework.statemachine.Message<org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , java.lang.Exception java.lang.Exception ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.StateContext<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { throw new java.lang.Error ( ) ; }  <METHOD_END>
