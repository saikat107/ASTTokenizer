<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.gemfire.config.annotation.ProcessWrapper ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.gemfire.config.annotation.ProcessWrapper org.springframework.data.gemfire.config.annotation.ProcessWrapper ( java.lang.String java.lang.String ) throws java.io.IOException { Assert . hasText ( java.lang.String , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; org.springframework.data.gemfire.config.annotation.ProcessWrapper = run ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.GeodeServerConfiguration .class , java.lang.String . java.lang.String ( STRING , logFile ( ) ) , java.lang.String . java.lang.String ( STRING , logLevel ( TEST_GEMFIRE_LOG_LEVEL ) ) , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; waitForServerToStart ( java.lang.String , int ) ; return org.springframework.data.gemfire.config.annotation.ProcessWrapper ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.lang.System . java.lang.String ( java.lang.String ) ; stop ( org.springframework.data.gemfire.config.annotation.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) { assertThat ( org.springframework.data.gemfire.config.annotation.Region<java.lang.String,java.lang.String> . get ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region<java.lang.String,java.lang.String> . put ( STRING , STRING ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region<java.lang.String,java.lang.String> . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.config.annotation.Region<java.lang.String,java.lang.String> . get ( STRING ) ) . isEqualTo ( STRING ) ; org.springframework.data.gemfire.config.annotation.ExpectedException . expect ( ServerOperationException .class ) ; org.springframework.data.gemfire.config.annotation.ExpectedException . expectCause ( is ( instanceOf ( NotAuthorizedException .class ) ) ) ; org.springframework.data.gemfire.config.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.Region<java.lang.String,java.lang.String> . put ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LogWriter org.springframework.data.gemfire.config.annotation.LogWriter , LogWriter org.springframework.data.gemfire.config.annotation.LogWriter ) throws org.springframework.data.gemfire.config.annotation.AuthenticationFailedException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Properties java.util.Properties ( java.util.Properties java.util.Properties , DistributedMember org.springframework.data.gemfire.config.annotation.DistributedMember , boolean boolean )				throws org.springframework.data.gemfire.config.annotation.AuthenticationFailedException { return java.util.Properties ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> public static org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.GeodeClientAuthInitialize org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.GeodeClientAuthInitialize ( ) { return new org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.GeodeClientAuthInitialize ( java.util.concurrent.atomic.AtomicInteger . int ( ) < NUMBER ? org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User : org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ) { Assert . notNull ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User , STRING ) ; this . org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User = org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Properties java.util.Properties ( java.util.Properties java.util.Properties ) { org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User = org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ( ) ; return new PropertiesBuilder ( ) . setProperty ( java.lang.String , org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User . java.lang.String ( ) ) . setProperty ( java.lang.String , org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User . getCredentials ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ( ) { return this . org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User = org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ( ) ; return java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User . java.lang.String ( ) , org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User . getCredentials ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> ( GemFireCache org.springframework.data.gemfire.config.annotation.GemFireCache ) { ClientRegionFactoryBean < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> = new ClientRegionFactoryBean <> ( ) ; org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> . setCache ( org.springframework.data.gemfire.config.annotation.GemFireCache ) ; org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> . setClose ( false ) ; org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> . setShortcut ( ClientRegionShortcut . PROXY ) ; return org.springframework.data.gemfire.config.annotation.ClientRegionFactoryBean<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) { runSpringApplication ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.GeodeServerConfiguration .class , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) org.springframework.data.gemfire.config.annotation.LocalRegionFactoryBean<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.LocalRegionFactoryBean<java.lang.String,java.lang.String> ( GemFireCache org.springframework.data.gemfire.config.annotation.GemFireCache ) { LocalRegionFactoryBean < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.LocalRegionFactoryBean<java.lang.String,java.lang.String> = new LocalRegionFactoryBean <> ( ) ; org.springframework.data.gemfire.config.annotation.LocalRegionFactoryBean<java.lang.String,java.lang.String> . setCache ( org.springframework.data.gemfire.config.annotation.GemFireCache ) ; org.springframework.data.gemfire.config.annotation.LocalRegionFactoryBean<java.lang.String,java.lang.String> . setCacheLoader ( org.springframework.data.gemfire.config.annotation.CacheLoader<java.lang.String,java.lang.String> ( ) ) ; org.springframework.data.gemfire.config.annotation.LocalRegionFactoryBean<java.lang.String,java.lang.String> . setClose ( false ) ; org.springframework.data.gemfire.config.annotation.LocalRegionFactoryBean<java.lang.String,java.lang.String> . setPersistent ( false ) ; return org.springframework.data.gemfire.config.annotation.LocalRegionFactoryBean<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.config.annotation.CacheLoader<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.CacheLoader<java.lang.String,java.lang.String> ( ) { return new CacheLoader < java.lang.String , java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( LoaderHelper < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.LoaderHelper<java.lang.String,java.lang.String> ) throws org.springframework.data.gemfire.config.annotation.CacheLoaderException { return org.springframework.data.gemfire.config.annotation.LoaderHelper<java.lang.String,java.lang.String> . getKey ( ) ; } @ java.lang.Override public void void ( ) {				} } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( LoaderHelper < java.lang.String , java.lang.String > org.springframework.data.gemfire.config.annotation.LoaderHelper<java.lang.String,java.lang.String> ) throws org.springframework.data.gemfire.config.annotation.CacheLoaderException { return org.springframework.data.gemfire.config.annotation.LoaderHelper<java.lang.String,java.lang.String> . getKey ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {				}  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( org.springframework.data.gemfire.config.annotation.Logger . isInfoEnabled ( ) ) { org.springframework.data.gemfire.config.annotation.Logger . info ( STRING , CollectionUtils . toString ( org.springframework.data.gemfire.config.annotation.GemFireCache . getDistributedSystem ( ) . getProperties ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ResourcePermission org.springframework.data.gemfire.config.annotation.ResourcePermission ) { for ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role : this ) { if ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role . boolean ( org.springframework.data.gemfire.config.annotation.ResourcePermission ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role ) { return this . java.util.Set<org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role> . boolean ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role> < org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role > java.util.Iterator<org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role> ( ) { return java.util.Collections . java.util.Set<org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role> ( this . java.util.Set<org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role> ) . java.util.Iterator<org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.User ( org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role ... org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role[] ) { java.util.Collections . boolean ( this . java.util.Set<org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role> , org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ResourcePermission org.springframework.data.gemfire.config.annotation.ResourcePermission ) { for ( ResourcePermission org.springframework.data.gemfire.config.annotation.ResourcePermission : this ) { if ( org.springframework.data.gemfire.config.annotation.ResourcePermission . implies ( org.springframework.data.gemfire.config.annotation.ResourcePermission ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.data.gemfire.config.annotation.ResourcePermission> < ResourcePermission > java.util.Iterator<org.springframework.data.gemfire.config.annotation.ResourcePermission> ( ) { return java.util.Collections . java.util.Set<org.springframework.data.gemfire.config.annotation.ResourcePermission> ( this . java.util.Set<org.springframework.data.gemfire.config.annotation.ResourcePermission> ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return getName ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role org.springframework.data.gemfire.config.annotation.AbstractGeodeSecurityIntegrationTests.Role ( ResourcePermission ... org.springframework.data.gemfire.config.annotation.ResourcePermission[] ) { java.util.Collections . boolean ( this . java.util.Set<org.springframework.data.gemfire.config.annotation.ResourcePermission> , org.springframework.data.gemfire.config.annotation.ResourcePermission[] ) ; return this ; }  <METHOD_END>
