<METHOD_START> @ Test public void void ( ) { assertThat ( new DefaultPropertyNamePatternsMatcher ( char[] , STRING , STRING ) . matches ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new DefaultPropertyNamePatternsMatcher ( char[] , STRING , STRING , STRING ) . matches ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new DefaultPropertyNamePatternsMatcher ( char[] , STRING , STRING , STRING ) . matches ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new DefaultPropertyNamePatternsMatcher ( char[] , STRING , STRING , STRING ) . matches ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new DefaultPropertyNamePatternsMatcher ( char[] , STRING , STRING , STRING ) . matches ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new DefaultPropertyNamePatternsMatcher ( char[] , STRING , STRING , STRING ) . matches ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { char [] char[] = STRING . char[] ( ) ; PropertyNamePatternsMatcher org.springframework.boot.bind.PropertyNamePatternsMatcher = new DefaultPropertyNamePatternsMatcher ( char[] , STRING , STRING , STRING ) ; assertThat ( org.springframework.boot.bind.PropertyNamePatternsMatcher . matches ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.bind.PropertyNamePatternsMatcher . matches ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.bind.PropertyNamePatternsMatcher . matches ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
