<METHOD_START> public void ( ) { super( null ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { if ( ! org.springframework.web.servlet.mvc.method.annotation.MethodParameter . hasParameterAnnotation ( MatrixVariable .class ) ) { return false ; } if ( java.util.Map .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . nestedIfOptional ( ) . getNestedParameterType ( ) ) ) { java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( MatrixVariable .class ) . name ( ) ; return StringUtils . hasText ( java.lang.String ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.NamedValueInfo org.springframework.web.servlet.mvc.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { MatrixVariable org.springframework.web.servlet.mvc.method.annotation.MatrixVariable = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( MatrixVariable .class ) ; return new org.springframework.web.servlet.mvc.method.annotation.MatrixVariableMethodArgumentResolver.MatrixVariableNamedValueInfo ( org.springframework.web.servlet.mvc.method.annotation.MatrixVariable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> = ( java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > ) org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getAttribute ( HandlerMapping . MATRIX_VARIABLES_ATTRIBUTE , RequestAttributes . SCOPE_REQUEST ) ; if ( CollectionUtils . isEmpty ( java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> ) ) { return null ; } java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( MatrixVariable .class ) . pathVar ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = null ; if ( ! java.lang.String . boolean ( ValueConstants . DEFAULT_NONE ) ) { if ( java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> . containsKey ( java.lang.String ) ) { java.util.List<java.lang.String> = java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> . get ( java.lang.String ) . get ( java.lang.String ) ; } } else { boolean boolean = false ; java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String>> . values ( ) ) { if ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . containsKey ( java.lang.String ) ) { if ( boolean ) { java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getNestedParameterType ( ) . getName ( ) ; throw new ServletRequestBindingException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } java.util.List<java.lang.String> . boolean ( org.springframework.web.servlet.mvc.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) ; boolean = true ; } } } if ( CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ) { return null ; } else if ( java.util.List<java.lang.String> . int ( ) == NUMBER ) { return java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; } else { return java.util.List<java.lang.String> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) throws org.springframework.web.servlet.mvc.method.annotation.ServletRequestBindingException { throw new ServletRequestBindingException ( STRING + java.lang.String + STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getNestedParameterType ( ) . getSimpleName ( ) ) ; }  <METHOD_END>
<METHOD_START> private void ( MatrixVariable org.springframework.web.servlet.mvc.method.annotation.MatrixVariable ) { super( org.springframework.web.servlet.mvc.method.annotation.MatrixVariable . name ( ) , org.springframework.web.servlet.mvc.method.annotation.MatrixVariable . required ( ) , org.springframework.web.servlet.mvc.method.annotation.MatrixVariable . defaultValue ( ) ); }  <METHOD_END>
