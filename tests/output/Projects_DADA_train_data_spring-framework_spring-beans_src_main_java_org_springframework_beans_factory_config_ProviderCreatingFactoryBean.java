<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { Assert . hasText ( this . java.lang.String , STRING ) ; super. afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return Provider .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.beans.factory.config.Provider<java.lang.Object> < java.lang.Object > org.springframework.beans.factory.config.Provider<java.lang.Object> ( ) { return new org.springframework.beans.factory.config.ProviderCreatingFactoryBean.TargetBeanProvider ( getBeanFactory ( ) , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.beans.factory.config.BeanFactory , java.lang.String java.lang.String ) { this . org.springframework.beans.factory.config.BeanFactory = org.springframework.beans.factory.config.BeanFactory ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.config.BeansException { return this . org.springframework.beans.factory.config.BeanFactory . getBean ( this . java.lang.String ) ; }  <METHOD_END>
