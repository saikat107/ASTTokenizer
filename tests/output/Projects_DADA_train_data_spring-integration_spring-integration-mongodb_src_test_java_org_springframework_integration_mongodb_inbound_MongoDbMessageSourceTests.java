<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Expression org.springframework.integration.mongodb.inbound.Expression = mock ( Expression .class ) ; new MongoDbMessageSource ( ( MongoDbFactory ) null , org.springframework.integration.mongodb.inbound.Expression ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Expression org.springframework.integration.mongodb.inbound.Expression = mock ( Expression .class ) ; new MongoDbMessageSource ( ( MongoOperations ) null , org.springframework.integration.mongodb.inbound.Expression ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = mock ( MongoDbFactory .class ) ; new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( ) , STRING ) ; Expression org.springframework.integration.mongodb.inbound.Expression = new LiteralExpression ( STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.Expression ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.mongodb.inbound.Document> < Document > java.util.List<org.springframework.integration.mongodb.inbound.Document> = ( ( java.util.List<org.springframework.integration.mongodb.inbound.Document> < Document > ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.inbound.Document> . size ( ) ) ; Document org.springframework.integration.mongodb.inbound.Document = java.util.List<org.springframework.integration.mongodb.inbound.Document> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.mongodb.inbound.Document . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( ) , STRING ) ; Expression org.springframework.integration.mongodb.inbound.Expression = new LiteralExpression ( STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.Expression ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setEntityClass ( java.lang.Object .class ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.inbound.Person> = ( ( java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.inbound.Person> . size ( ) ) ; Person org.springframework.integration.mongodb.inbound.Person = java.util.List<org.springframework.integration.mongodb.inbound.Person> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.mongodb.inbound.Person . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.mongodb.inbound.Person . getAddress ( ) . getState ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( ) , STRING ) ; Expression org.springframework.integration.mongodb.inbound.Expression = new LiteralExpression ( STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.Expression ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setEntityClass ( java.lang.Object .class ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setExpectSingleResult ( true ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; Person org.springframework.integration.mongodb.inbound.Person = ( Person ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.mongodb.inbound.Person . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.mongodb.inbound.Person . getAddress ( ) . getState ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( ) , STRING ) ; Expression org.springframework.integration.mongodb.inbound.Expression = new LiteralExpression ( STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.Expression ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setEntityClass ( java.lang.Object .class ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.inbound.Person> = ( ( java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ) ; Person org.springframework.integration.mongodb.inbound.Person = java.util.List<org.springframework.integration.mongodb.inbound.Person> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.mongodb.inbound.Person . getName ( ) ) ; assertEquals ( STRING , org.springframework.integration.mongodb.inbound.Person . getAddress ( ) . getState ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.inbound.Person> = java.util.List<org.springframework.integration.mongodb.inbound.Person> ( new LiteralExpression ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.inbound.Person> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.inbound.Person> = java.util.List<org.springframework.integration.mongodb.inbound.Person> ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.inbound.Person> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.inbound.Person> = java.util.List<org.springframework.integration.mongodb.inbound.Person> ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.inbound.Person> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.inbound.Person> ( Expression org.springframework.integration.mongodb.inbound.Expression ) throws java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.Expression ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; return ( java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; Expression org.springframework.integration.mongodb.inbound.Expression = new LiteralExpression ( STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.Expression ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; assertNull ( org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; Expression org.springframework.integration.mongodb.inbound.Expression = new LiteralExpression ( STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.Expression ) ; MappingMongoConverter org.springframework.integration.mongodb.inbound.MappingMongoConverter = new TestMongoConverter ( org.springframework.integration.mongodb.inbound.MongoDbFactory , new MongoMappingContext ( ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MappingMongoConverter . afterPropertiesSet ( ) ; org.springframework.integration.mongodb.inbound.MappingMongoConverter = spy ( org.springframework.integration.mongodb.inbound.MappingMongoConverter ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setMongoConverter ( org.springframework.integration.mongodb.inbound.MappingMongoConverter ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.inbound.Person> = ( java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.inbound.Person> . size ( ) ) ; verify ( org.springframework.integration.mongodb.inbound.MappingMongoConverter , times ( NUMBER ) ) . read ( ( java.lang.Class<org.springframework.integration.mongodb.inbound.Person> < Person > ) Mockito . any ( ) , Mockito . any ( Bson .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MappingMongoConverter org.springframework.integration.mongodb.inbound.MappingMongoConverter = new TestMongoConverter ( org.springframework.integration.mongodb.inbound.MongoDbFactory , new MongoMappingContext ( ) ) ; org.springframework.integration.mongodb.inbound.MappingMongoConverter . afterPropertiesSet ( ) ; org.springframework.integration.mongodb.inbound.MappingMongoConverter = spy ( org.springframework.integration.mongodb.inbound.MappingMongoConverter ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.MappingMongoConverter ) ; Expression org.springframework.integration.mongodb.inbound.Expression = new LiteralExpression ( STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoTemplate , org.springframework.integration.mongodb.inbound.Expression ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.MappingMongoConverter ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( this . createPerson ( STRING ) , STRING ) ; java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > java.util.List<org.springframework.integration.mongodb.inbound.Person> = ( java.util.List<org.springframework.integration.mongodb.inbound.Person> < Person > ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.mongodb.inbound.Person> . size ( ) ) ; verify ( org.springframework.integration.mongodb.inbound.MappingMongoConverter , times ( NUMBER ) ) . read ( ( java.lang.Class<org.springframework.integration.mongodb.inbound.Person> < Person > ) Mockito . any ( ) , Mockito . any ( Bson .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ MongoDbAvailable public void void ( ) java.lang.Exception { MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory = this . prepareMongoFactory ( ) ; MongoTemplate org.springframework.integration.mongodb.inbound.MongoTemplate = new MongoTemplate ( org.springframework.integration.mongodb.inbound.MongoDbFactory ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( JSON . parse ( STRING ) , STRING ) ; Expression org.springframework.integration.mongodb.inbound.Expression = new LiteralExpression ( STRING ) ; MongoDbMessageSource org.springframework.integration.mongodb.inbound.MongoDbMessageSource = new MongoDbMessageSource ( org.springframework.integration.mongodb.inbound.MongoDbFactory , org.springframework.integration.mongodb.inbound.Expression ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setExpectSingleResult ( true ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.mongodb.inbound.MongoDbMessageSource . afterPropertiesSet ( ) ; Document org.springframework.integration.mongodb.inbound.Document = ( Document ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.mongodb.inbound.Document . get ( STRING ) ; org.springframework.integration.mongodb.inbound.Document . put ( STRING , STRING ) ; org.springframework.integration.mongodb.inbound.MongoTemplate . save ( org.springframework.integration.mongodb.inbound.Document , STRING ) ; org.springframework.integration.mongodb.inbound.Document = ( Document ) org.springframework.integration.mongodb.inbound.MongoDbMessageSource . receive ( ) . getPayload ( ) ; assertEquals ( java.lang.Object , org.springframework.integration.mongodb.inbound.Document . get ( STRING ) ) ; }  <METHOD_END>
