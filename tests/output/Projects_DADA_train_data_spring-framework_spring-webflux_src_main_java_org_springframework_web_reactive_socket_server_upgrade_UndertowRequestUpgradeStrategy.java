<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.server.upgrade.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange , WebSocketHandler org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { ServerHttpRequest org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getRequest ( ) ; Assert . isInstanceOf ( UndertowServerHttpRequest .class , org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest , STRING ) ; HttpServerExchange org.springframework.web.reactive.socket.server.upgrade.HttpServerExchange = ( ( UndertowServerHttpRequest ) org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest ) . getUndertowExchange ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Optional<java.lang.String> . java.util.Optional<java.util.Set<java.lang.String>> ( java.util.Collections :: java.util.Set<java.lang.String> ) . java.util.Set<java.lang.String> ( java.util.Collections . java.util.Set<java.lang.String> ( ) ) ; Hybi13Handshake org.springframework.web.reactive.socket.server.upgrade.Hybi13Handshake = new Hybi13Handshake ( java.util.Set<java.lang.String> , false ) ; java.util.List<org.springframework.web.reactive.socket.server.upgrade.Handshake> < Handshake > java.util.List<org.springframework.web.reactive.socket.server.upgrade.Handshake> = java.util.Collections . java.util.List ( org.springframework.web.reactive.socket.server.upgrade.Hybi13Handshake ) ; java.net.URI java.net.URI = org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getURI ( ) ; HttpHeaders org.springframework.web.reactive.socket.server.upgrade.HttpHeaders = org.springframework.web.reactive.socket.server.upgrade.ServerHttpRequest . getHeaders ( ) ; Mono < java.security.Principal > org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getPrincipal ( ) ; HandshakeInfo org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo = new HandshakeInfo ( java.net.URI , org.springframework.web.reactive.socket.server.upgrade.HttpHeaders , org.springframework.web.reactive.socket.server.upgrade.Mono<java.security.Principal> , java.util.Optional<java.lang.String> ) ; DataBufferFactory org.springframework.web.reactive.socket.server.upgrade.DataBufferFactory = org.springframework.web.reactive.socket.server.upgrade.ServerWebExchange . getResponse ( ) . bufferFactory ( ) ; try { org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy.DefaultCallback org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy.DefaultCallback = new org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy.DefaultCallback ( org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo , org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , org.springframework.web.reactive.socket.server.upgrade.DataBufferFactory ) ; new WebSocketProtocolHandshakeHandler ( java.util.List<org.springframework.web.reactive.socket.server.upgrade.Handshake> , org.springframework.web.reactive.socket.server.upgrade.UndertowRequestUpgradeStrategy.DefaultCallback ) . handleRequest ( org.springframework.web.reactive.socket.server.upgrade.HttpServerExchange ) ; } catch ( java.lang.Exception java.lang.Exception ) { return Mono . error ( java.lang.Exception ) ; } return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> public void ( HandshakeInfo org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo , WebSocketHandler org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler , DataBufferFactory org.springframework.web.reactive.socket.server.upgrade.DataBufferFactory ) { this . org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo = org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo ; this . org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler = org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler ; this . org.springframework.web.reactive.socket.server.upgrade.DataBufferFactory = org.springframework.web.reactive.socket.server.upgrade.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketHttpExchange org.springframework.web.reactive.socket.server.upgrade.WebSocketHttpExchange , WebSocketChannel org.springframework.web.reactive.socket.server.upgrade.WebSocketChannel ) { UndertowWebSocketSession org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketSession = org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketSession ( org.springframework.web.reactive.socket.server.upgrade.WebSocketChannel ) ; UndertowWebSocketHandlerAdapter org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketHandlerAdapter = new UndertowWebSocketHandlerAdapter ( org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketSession ) ; org.springframework.web.reactive.socket.server.upgrade.WebSocketChannel . getReceiveSetter ( ) . set ( org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketHandlerAdapter ) ; org.springframework.web.reactive.socket.server.upgrade.WebSocketChannel . resumeReceives ( ) ; this . org.springframework.web.reactive.socket.server.upgrade.WebSocketHandler . handle ( org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketSession ) . subscribe ( org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketSession org.springframework.web.reactive.socket.server.upgrade.UndertowWebSocketSession ( WebSocketChannel org.springframework.web.reactive.socket.server.upgrade.WebSocketChannel ) { return new UndertowWebSocketSession ( org.springframework.web.reactive.socket.server.upgrade.WebSocketChannel , this . org.springframework.web.reactive.socket.server.upgrade.HandshakeInfo , this . org.springframework.web.reactive.socket.server.upgrade.DataBufferFactory ) ; }  <METHOD_END>
