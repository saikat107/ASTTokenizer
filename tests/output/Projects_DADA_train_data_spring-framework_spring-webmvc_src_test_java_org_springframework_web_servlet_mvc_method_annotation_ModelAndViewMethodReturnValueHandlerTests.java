<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler = new ModelAndViewMethodReturnValueHandler ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . supportsReturnType ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( STRING , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getView ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( new RedirectView ( ) , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; assertEquals ( RedirectView .class , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getView ( ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . handleReturnValue ( null , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RedirectAttributesModelMap org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap = new RedirectAttributesModelMap ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRedirectModel ( org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( new RedirectView ( ) , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; assertEquals ( RedirectView .class , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getView ( ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; assertSame ( STRING , org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RedirectAttributesModelMap org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap = new RedirectAttributesModelMap ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRedirectModel ( org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( STRING , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getViewName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap , org.springframework.web.servlet.mvc.method.annotation.ModelMap ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RedirectAttributesModelMap org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap = new RedirectAttributesModelMap ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRedirectModel ( org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( STRING , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . setRedirectPatterns ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getViewName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap , org.springframework.web.servlet.mvc.method.annotation.ModelMap ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RedirectAttributesModelMap org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap = new RedirectAttributesModelMap ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRedirectModel ( org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ; assertEquals ( null , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getView ( ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) . isEmpty ( ) ) ; assertNotSame ( STRING , org.springframework.web.servlet.mvc.method.annotation.RedirectAttributesModelMap , org.springframework.web.servlet.mvc.method.annotation.ModelMap ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setIgnoreDefaultModelOnRedirect ( true ) ; RedirectView org.springframework.web.servlet.mvc.method.annotation.RedirectView = new RedirectView ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = new ModelAndView ( org.springframework.web.servlet.mvc.method.annotation.RedirectView , STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandler . handleReturnValue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.ServletWebRequest ) ; ModelMap org.springframework.web.servlet.mvc.method.annotation.ModelMap = org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getModel ( ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.RedirectView , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . getView ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.ModelMap . size ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelMap . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ( java.lang.String java.lang.String ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.ModelAndViewMethodReturnValueHandlerTests> ( ) . java.lang.reflect.Method ( java.lang.String ) ; return new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
