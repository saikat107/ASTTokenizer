<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String + STRING : STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Iterable<org.springframework.boot.cli.command.Command> < Command > java.lang.Iterable<org.springframework.boot.cli.command.Command> ) { Assert . notNull ( java.lang.Iterable<org.springframework.boot.cli.command.Command> , STRING ) ; for ( Command org.springframework.boot.cli.command.Command : java.lang.Iterable<org.springframework.boot.cli.command.Command> ) { void ( org.springframework.boot.cli.command.Command ) ; } }  <METHOD_END>
<METHOD_START> public void void ( Command org.springframework.boot.cli.command.Command ) { Assert . notNull ( org.springframework.boot.cli.command.Command , STRING ) ; this . java.util.List<org.springframework.boot.cli.command.Command> . add ( org.springframework.boot.cli.command.Command ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( java.lang.Class<?>[] , STRING ) ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( java.lang.Class<?>[] , STRING ) ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Command org.springframework.boot.cli.command.Command ) { return boolean ( org.springframework.boot.cli.command.Command , this . java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Command org.springframework.boot.cli.command.Command ) { return boolean ( org.springframework.boot.cli.command.Command , this . java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Command org.springframework.boot.cli.command.Command , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( java.lang.Class<> . boolean ( org.springframework.boot.cli.command.Command ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.boot.cli.command.Command> < Command > java.util.Iterator<org.springframework.boot.cli.command.Command> ( ) { return java.util.List<org.springframework.boot.cli.command.Command> ( ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> protected final java.util.List<org.springframework.boot.cli.command.Command> < Command > java.util.List<org.springframework.boot.cli.command.Command> ( ) { return java.util.Collections . java.util.List<org.springframework.boot.cli.command.Command> ( this . java.util.List<org.springframework.boot.cli.command.Command> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.cli.command.Command org.springframework.boot.cli.command.Command ( java.lang.String java.lang.String ) { for ( Command org.springframework.boot.cli.command.Command : this . java.util.List<org.springframework.boot.cli.command.Command> ) { java.lang.String java.lang.String = org.springframework.boot.cli.command.Command . getName ( ) ; if ( java.lang.String . boolean ( java.lang.String ) || ( boolean ( org.springframework.boot.cli.command.Command ) && ( STRING + java.lang.String ) . boolean ( java.lang.String ) ) ) { return org.springframework.boot.cli.command.Command ; } } return null ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String ... java.lang.String[] ) { java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String[] ) ; boolean boolean = java.lang.String[] . int != java.lang.String[] . int ; if ( boolean ) { java.lang.System . java.lang.String ( STRING , STRING ) ; } try { ExitStatus org.springframework.boot.cli.command.ExitStatus = org.springframework.boot.cli.command.ExitStatus ( java.lang.String[] ) ; if ( org.springframework.boot.cli.command.ExitStatus != null && org.springframework.boot.cli.command.ExitStatus . isHangup ( ) ) { return ( org.springframework.boot.cli.command.ExitStatus . getCode ( ) > NUMBER ? org.springframework.boot.cli.command.ExitStatus . getCode ( ) : NUMBER ) ; } return NUMBER ; } catch ( NoArgumentsException org.springframework.boot.cli.command.NoArgumentsException ) { void ( ) ; return NUMBER ; } catch ( java.lang.Exception java.lang.Exception ) { return int ( boolean , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( java.lang.String [] java.lang.String[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.lang.String[] . int ) ; boolean boolean = false ; for ( java.lang.String java.lang.String : java.lang.String[] ) { boolean |= STRING . boolean ( java.lang.String ) ; if ( ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) && ! boolean ) { continue; } java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.cli.command.ExitStatus org.springframework.boot.cli.command.ExitStatus ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { if ( java.lang.String[] . int == NUMBER ) { throw new NoArgumentsException ( ) ; } java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; java.lang.String [] java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , NUMBER , java.lang.String[] . int ) ; Command org.springframework.boot.cli.command.Command = org.springframework.boot.cli.command.Command ( java.lang.String ) ; if ( org.springframework.boot.cli.command.Command == null ) { throw new NoSuchCommandException ( java.lang.String ) ; } void ( org.springframework.boot.cli.command.Command ) ; try { return org.springframework.boot.cli.command.Command . run ( java.lang.String[] ) ; } finally { void ( org.springframework.boot.cli.command.Command ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Command org.springframework.boot.cli.command.Command ) {	}  <METHOD_END>
<METHOD_START> protected void void ( Command org.springframework.boot.cli.command.Command ) {	}  <METHOD_END>
<METHOD_START> private int int ( boolean boolean , java.lang.Exception java.lang.Exception ) { java.util.Set<CommandException.Option> < CommandException . CommandException > java.util.Set<CommandException.Option> = java.util.Set<CommandException.Option> ; if ( java.lang.Exception instanceof CommandException ) { java.util.Set<CommandException.Option> = ( ( CommandException ) java.lang.Exception ) . getOptions ( ) ; if ( java.util.Set<CommandException.Option> . contains ( CommandException . Option . RETHROW ) ) { throw ( CommandException ) java.lang.Exception ; } } boolean boolean = false ; if ( ! java.util.Set<CommandException.Option> . contains ( CommandException . Option . HIDE_MESSAGE ) ) { boolean = ! boolean ( java.lang.Exception . java.lang.String ( ) ) ; } if ( java.util.Set<CommandException.Option> . contains ( CommandException . Option . SHOW_USAGE ) ) { void ( ) ; } if ( boolean || boolean || java.util.Set<CommandException.Option> . contains ( CommandException . Option . STACK_TRACE ) ) { void ( java.lang.Exception ) ; } return NUMBER ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { Log . error ( java.lang.String == null ? STRING : java.lang.String ) ; return java.lang.String != null ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { Log . infoPrint ( STRING + this . java.lang.String ) ; for ( Command org.springframework.boot.cli.command.Command : this . java.util.List<org.springframework.boot.cli.command.Command> ) { if ( boolean ( org.springframework.boot.cli.command.Command ) ) { Log . infoPrint ( STRING + org.springframework.boot.cli.command.Command . getName ( ) + STRING ) ; } } Log . info ( STRING ) ; Log . info ( STRING ) ; Log . info ( STRING ) ; Log . info ( STRING ) ; for ( Command org.springframework.boot.cli.command.Command : this . java.util.List<org.springframework.boot.cli.command.Command> ) { if ( ! boolean ( org.springframework.boot.cli.command.Command ) && ! boolean ( org.springframework.boot.cli.command.Command ) ) { java.lang.String java.lang.String = org.springframework.boot.cli.command.Command . getUsageHelp ( ) ; java.lang.String java.lang.String = org.springframework.boot.cli.command.Command . getDescription ( ) ; Log . info ( java.lang.String . java.lang.String ( STRING , org.springframework.boot.cli.command.Command . getName ( ) , ( java.lang.String == null ? STRING : java.lang.String ) , ( java.lang.String == null ? STRING : java.lang.String ) ) ) ; } } Log . info ( STRING ) ; Log . info ( STRING ) ; Log . info ( java.lang.String . java.lang.String ( STRING , STRING , STRING , STRING ) ) ; Log . info ( STRING ) ; Log . info ( STRING ) ; Log . info ( STRING + this . java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Exception java.lang.Exception ) { Log . error ( STRING ) ; Log . error ( java.lang.Exception ) ; Log . error ( STRING ) ; }  <METHOD_END>
