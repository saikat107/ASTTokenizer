<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( Layouts . forFile ( new java.io.File ( STRING ) ) ) . isInstanceOf ( Layouts . Layouts .class ) ; assertThat ( Layouts . forFile ( new java.io.File ( STRING ) ) ) . isInstanceOf ( Layouts . Layouts .class ) ; assertThat ( Layouts . forFile ( new java.io.File ( STRING ) ) ) . isInstanceOf ( Layouts . Layouts .class ) ; assertThat ( Layouts . forFile ( new java.io.File ( STRING ) ) ) . isInstanceOf ( Layouts . Layouts .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( Layouts . forFile ( new java.io.File ( STRING ) ) ) . isInstanceOf ( Layouts . Layouts .class ) ; assertThat ( Layouts . forFile ( new java.io.File ( STRING ) ) ) . isInstanceOf ( Layouts . Layouts .class ) ; assertThat ( Layouts . forFile ( new java.io.File ( STRING ) ) ) . isInstanceOf ( Layouts . Layouts .class ) ; assertThat ( Layouts . forFile ( new java.io.File ( STRING ) ) ) . isInstanceOf ( Layouts . Layouts .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING ) ; Layouts . forFile ( new java.io.File ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Layout org.springframework.boot.loader.tools.Layout = new Layouts . Layouts ( ) ; assertThat ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . COMPILE ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . CUSTOM ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . PROVIDED ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . RUNTIME ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Layout org.springframework.boot.loader.tools.Layout = new Layouts . Layouts ( ) ; assertThat ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . COMPILE ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . CUSTOM ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . PROVIDED ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( STRING , LibraryScope . RUNTIME ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
