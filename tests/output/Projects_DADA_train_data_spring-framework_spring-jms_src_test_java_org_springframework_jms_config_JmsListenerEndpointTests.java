<METHOD_START> @ Test public void void ( ) { DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = new DefaultMessageListenerContainer ( ) ; MessageListener org.springframework.jms.config.MessageListener = new MessageListenerAdapter ( ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setSelector ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setSubscription ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setConcurrency ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.config.MessageListener ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setupListenerContainer ( org.springframework.jms.config.DefaultMessageListenerContainer ) ; assertEquals ( STRING , org.springframework.jms.config.DefaultMessageListenerContainer . getDestinationName ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.DefaultMessageListenerContainer . getMessageSelector ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.DefaultMessageListenerContainer . getSubscriptionName ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getConcurrentConsumers ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.config.DefaultMessageListenerContainer . getMaxConcurrentConsumers ( ) ) ; assertEquals ( org.springframework.jms.config.MessageListener , org.springframework.jms.config.DefaultMessageListenerContainer . getMessageListener ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JmsMessageEndpointManager org.springframework.jms.config.JmsMessageEndpointManager = new JmsMessageEndpointManager ( ) ; MessageListener org.springframework.jms.config.MessageListener = new MessageListenerAdapter ( ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setSelector ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setSubscription ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setConcurrency ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.config.MessageListener ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setupListenerContainer ( org.springframework.jms.config.JmsMessageEndpointManager ) ; JmsActivationSpecConfig org.springframework.jms.config.JmsActivationSpecConfig = org.springframework.jms.config.JmsMessageEndpointManager . getActivationSpecConfig ( ) ; assertEquals ( STRING , org.springframework.jms.config.JmsActivationSpecConfig . getDestinationName ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsActivationSpecConfig . getMessageSelector ( ) ) ; assertEquals ( STRING , org.springframework.jms.config.JmsActivationSpecConfig . getSubscriptionName ( ) ) ; assertEquals ( NUMBER , org.springframework.jms.config.JmsActivationSpecConfig . getMaxConcurrency ( ) ) ; assertEquals ( org.springframework.jms.config.MessageListener , org.springframework.jms.config.JmsMessageEndpointManager . getMessageListener ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleMessageListenerContainer org.springframework.jms.config.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; MessageListener org.springframework.jms.config.MessageListener = new MessageListenerAdapter ( ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setConcurrency ( STRING ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.config.MessageListener ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setupListenerContainer ( org.springframework.jms.config.SimpleMessageListenerContainer ) ; assertEquals ( NUMBER , new DirectFieldAccessor ( org.springframework.jms.config.SimpleMessageListenerContainer ) . getPropertyValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer = new DefaultMessageListenerContainer ( ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setupListenerContainer ( org.springframework.jms.config.DefaultMessageListenerContainer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageListenerContainer org.springframework.jms.config.MessageListenerContainer = mock ( MessageListenerContainer .class ) ; SimpleJmsListenerEndpoint org.springframework.jms.config.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setMessageListener ( new MessageListenerAdapter ( ) ) ; org.springframework.jms.config.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.jms.config.SimpleJmsListenerEndpoint . setupListenerContainer ( org.springframework.jms.config.MessageListenerContainer ) ; }  <METHOD_END>
