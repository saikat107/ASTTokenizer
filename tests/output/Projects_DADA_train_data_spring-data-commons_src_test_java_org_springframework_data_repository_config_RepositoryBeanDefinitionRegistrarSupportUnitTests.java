<METHOD_START> @ Before public void void ( ) { org.springframework.data.repository.config.StandardEnvironment = new StandardEnvironment ( ) ; org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar = new org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar ( ) ; org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar . setEnvironment ( org.springframework.data.repository.config.StandardEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.data.repository.config.AnnotationMetadata = new StandardAnnotationMetadata ( SampleConfiguration .class , true ) ; org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar . registerBeanDefinitions ( org.springframework.data.repository.config.AnnotationMetadata , org.springframework.data.repository.config.BeanDefinitionRegistry ) ; void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardAnnotationMetadata org.springframework.data.repository.config.StandardAnnotationMetadata = new StandardAnnotationMetadata ( SampleConfiguration .class , true ) ; org.springframework.data.repository.config.StandardEnvironment . setActiveProfiles ( STRING ) ; org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar = new org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar ( ) ; org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar . setEnvironment ( org.springframework.data.repository.config.StandardEnvironment ) ; org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyRegistrar . registerBeanDefinitions ( org.springframework.data.repository.config.StandardAnnotationMetadata , org.springframework.data.repository.config.BeanDefinitionRegistry ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { verify ( org.springframework.data.repository.config.BeanDefinitionRegistry , times ( NUMBER ) ) . registerBeanDefinition ( eq ( java.lang.String ) , any ( BeanDefinition .class ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { verify ( org.springframework.data.repository.config.BeanDefinitionRegistry , times ( NUMBER ) ) . registerBeanDefinition ( eq ( java.lang.String ) , any ( BeanDefinition .class ) ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { setResourceLoader ( new DefaultResourceLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return EnableRepositories .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.repository.config.RepositoryConfigurationExtension org.springframework.data.repository.config.RepositoryConfigurationExtension ( ) { return new org.springframework.data.repository.config.RepositoryBeanDefinitionRegistrarSupportUnitTests.DummyConfigurationExtension ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return DummyRepositoryFactoryBean .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
