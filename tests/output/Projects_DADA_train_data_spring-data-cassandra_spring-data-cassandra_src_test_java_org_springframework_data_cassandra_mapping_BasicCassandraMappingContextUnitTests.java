<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setUserTypeResolver ( typeName -> null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.Transient .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.X .class ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . contains ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.X .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getExistingPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.X .class ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . contains ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.Y .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.PrimaryKeyOnProperty .class ) ; java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getIdProperty ( ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> ) . hasValueSatisfying ( actual -> { assertThat ( actual . getColumnName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; List < CqlIdentifier > columnNames = actual . getColumnNames ( ) ; assertThat ( columnNames ) . hasSize ( NUMBER ) ; assertThat ( columnNames . get ( NUMBER ) . toCql ( ) ) . isEqualTo ( STRING ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ PrimaryKey ( value = STRING ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.PrimaryKeyColumnsOnProperty .class ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . isCompositePrimaryKey ( ) ) . isFalse ( ) ; CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isCompositePrimaryKey ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPartitionKeyColumn ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isClusterKeyColumn ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ PrimaryKeyColumn ( ordinal = NUMBER , type = PrimaryKeyType . PARTITIONED ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ PrimaryKeyColumn ( name = STRING , ordinal = NUMBER , type = PrimaryKeyType . CLUSTERED ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.PrimaryKeyOnPropertyWithPrimaryKeyClass .class ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.CompositePrimaryKeyClassWithProperties .class ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . isCompositePrimaryKey ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getPersistentProperty ( STRING ) . map ( CassandraPersistentProperty :: isCompositePrimaryKey ) . get ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . isCompositePrimaryKey ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getCompositePrimaryKeyProperties ( ) ) . hasSize ( NUMBER ) ; CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPartitionKeyColumn ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isClusterKeyColumn ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; CassandraPersistentProperty org.springframework.data.cassandra.mapping.CassandraPersistentProperty = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPrimaryKeyColumn ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isPartitionKeyColumn ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . isClusterKeyColumn ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentProperty . getColumnName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.EntityWithOrderedClusteredColumns .class ) ; CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; assertThat ( org.springframework.data.cassandra.mapping.CreateTableSpecification . getPartitionKeyColumns ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) ) . hasSize ( NUMBER ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getOrdering ( ) ) . isEqualTo ( Ordering . ASCENDING ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getOrdering ( ) ) . isEqualTo ( Ordering . DESCENDING ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getOrdering ( ) ) . isEqualTo ( Ordering . ASCENDING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.EntityWithPrimaryKeyWithOrderedClusteredColumns .class ) ; CreateTableSpecification org.springframework.data.cassandra.mapping.CreateTableSpecification = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; assertThat ( org.springframework.data.cassandra.mapping.CreateTableSpecification . getPartitionKeyColumns ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) ) . hasSize ( NUMBER ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getOrdering ( ) ) . isEqualTo ( Ordering . ASCENDING ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getOrdering ( ) ) . isEqualTo ( Ordering . DESCENDING ) ; ColumnSpecification org.springframework.data.cassandra.mapping.ColumnSpecification = org.springframework.data.cassandra.mapping.CreateTableSpecification . getClusteredKeyColumns ( ) . get ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getName ( ) . toCql ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.ColumnSpecification . getOrdering ( ) ) . isEqualTo ( Ordering . ASCENDING ) ; }  <METHOD_END>
<METHOD_START> @ PrimaryKey public org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.CompositePrimaryKeyClassWithProperties org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.CompositePrimaryKeyClassWithProperties ( ) { return org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.CompositePrimaryKeyClassWithProperties ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.CompositePrimaryKeyClassWithProperties org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.CompositePrimaryKeyClassWithProperties ) { this . org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.CompositePrimaryKeyClassWithProperties = org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.CompositePrimaryKeyClassWithProperties ; }  <METHOD_END>
<METHOD_START> @ PrimaryKeyColumn ( ordinal = NUMBER , type = PrimaryKeyType . PARTITIONED ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ PrimaryKeyColumn ( name = STRING , ordinal = NUMBER , type = PrimaryKeyType . CLUSTERED ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setCustomConversions ( new CustomConversions ( java.util.Collections . java.util.List ) ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . shouldCreatePersistentEntityFor ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.Human .class ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setCustomConversions ( new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.HumanToStringConverter> ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.HumanToStringConverter . org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.HumanToStringConverter ) ) ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . shouldCreatePersistentEntityFor ( ClassTypeInformation . from ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.Human .class ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setCustomConversions ( new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.StringMapToStringConverter> ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.StringMapToStringConverter . org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.StringMapToStringConverter ) ) ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.TypeWithCustomConvertedMap .class ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getDataType ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ) . isEqualTo ( DataType . varchar ( ) ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getDataType ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ) . isEqualTo ( DataType . ascii ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setCustomConversions ( new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.HumanToStringConverter> ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.HumanToStringConverter . org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.HumanToStringConverter ) ) ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.TypeWithListOfHumans .class ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getDataType ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getRequiredPersistentProperty ( STRING ) ) ) . isEqualTo ( DataType . list ( DataType . varchar ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.MappedUdt .class ) ; assertThat ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . isUserDefinedType ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.MappedUdt .class ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getTableEntities ( ) ) . doesNotContain ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> = org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.MappedUdt .class ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getPersistentEntities ( true ) ) . contains ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getUserDefinedTypeEntities ( ) ) . contains ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getPersistentEntities ( false ) ) . doesNotContain ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getTableEntities ( ) ) . doesNotContain ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UserType org.springframework.data.cassandra.mapping.UserType = mock ( UserType .class , STRING ) ; when ( org.springframework.data.cassandra.mapping.UserType . getTypeName ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . usesUserType ( org.springframework.data.cassandra.mapping.UserType ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final UserType org.springframework.data.cassandra.mapping.UserType = mock ( UserType .class , STRING ) ; when ( org.springframework.data.cassandra.mapping.UserType . getTypeName ( ) ) . thenReturn ( STRING ) ; org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setUserTypeResolver ( typeName -> myTypeMock ) ; org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.WithUdt .class ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . usesUserType ( org.springframework.data.cassandra.mapping.UserType ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final UserType org.springframework.data.cassandra.mapping.UserType = mock ( UserType .class , STRING ) ; when ( org.springframework.data.cassandra.mapping.UserType . getTypeName ( ) ) . thenReturn ( STRING ) ; org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . setUserTypeResolver ( typeName -> myTypeMock ) ; org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.MappedUdt .class ) ; assertThat ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . usesUserType ( org.springframework.data.cassandra.mapping.UserType ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.EntityWithComplexPrimaryKeyColumn .class ) ) ; fail ( STRING ) ; } catch ( InvalidDataAccessApiUsageException org.springframework.data.cassandra.mapping.InvalidDataAccessApiUsageException ) { assertThat ( org.springframework.data.cassandra.mapping.InvalidDataAccessApiUsageException ) . hasMessageContaining ( STRING ) ; } try { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.EntityWithComplexId .class ) ) ; fail ( STRING ) ; } catch ( InvalidDataAccessApiUsageException org.springframework.data.cassandra.mapping.InvalidDataAccessApiUsageException ) { assertThat ( org.springframework.data.cassandra.mapping.InvalidDataAccessApiUsageException ) . hasMessageContaining ( STRING ) ; } try { org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getCreateTableSpecificationFor ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContext . getRequiredPersistentEntity ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.EntityWithPrimaryKeyClassWithComplexId .class ) ) ; fail ( STRING ) ; } catch ( InvalidDataAccessApiUsageException org.springframework.data.cassandra.mapping.InvalidDataAccessApiUsageException ) { assertThat ( org.springframework.data.cassandra.mapping.InvalidDataAccessApiUsageException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.Human org.springframework.data.cassandra.mapping.BasicCassandraMappingContextUnitTests.Human ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> < java.lang.String , java.util.Collection<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> ) { return STRING ; }  <METHOD_END>
