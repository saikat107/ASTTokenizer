<METHOD_START> @ Before public void void ( ) { this . org.springframework.context.annotation.jsr330.ServletRequestAttributes = new ServletRequestAttributes ( new MockHttpServletRequest ( ) ) ; this . org.springframework.context.annotation.jsr330.ServletRequestAttributes = new ServletRequestAttributes ( new MockHttpServletRequest ( ) ) ; MockHttpServletRequest org.springframework.context.annotation.jsr330.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.context.annotation.jsr330.MockHttpServletRequest . setSession ( new MockHttpSession ( ) ) ; this . org.springframework.context.annotation.jsr330.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.context.annotation.jsr330.MockHttpServletRequest ) ; MockHttpServletRequest org.springframework.context.annotation.jsr330.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.context.annotation.jsr330.MockHttpServletRequest . setSession ( new MockHttpSession ( ) ) ; this . org.springframework.context.annotation.jsr330.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.context.annotation.jsr330.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { RequestContextHolder . setRequestAttributes ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . NO ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) ; assertTrue ( org.springframework.context.annotation.jsr330.ApplicationContext . isPrototype ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.jsr330.ApplicationContext . isSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . NO ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.jsr330.ApplicationContext . isSingleton ( STRING ) ) ; assertFalse ( org.springframework.context.annotation.jsr330.ApplicationContext . isPrototype ( STRING ) ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . INTERFACES ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . TARGET_CLASS ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . NO ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . INTERFACES ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) ) ; assertTrue ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.AnotherScopeTestInterface ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . TARGET_CLASS ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) ) ; assertTrue ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.RequestScopedTestBean ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . NO ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . INTERFACES ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) ) ; assertTrue ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.AnotherScopeTestInterface ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext = org.springframework.context.annotation.jsr330.ApplicationContext ( ScopedProxyMode . TARGET_CLASS ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) ) ; assertTrue ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.ScopedTestBean ) ; assertTrue ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean instanceof org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.SessionScopedTestBean ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean = ( org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean ) org.springframework.context.annotation.jsr330.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . void ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; RequestContextHolder . setRequestAttributes ( org.springframework.context.annotation.jsr330.ServletRequestAttributes ) ; assertEquals ( java.lang.String , org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests.IScopedTestBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.jsr330.ApplicationContext org.springframework.context.annotation.jsr330.ApplicationContext ( final ScopedProxyMode org.springframework.context.annotation.jsr330.ScopedProxyMode ) { GenericWebApplicationContext org.springframework.context.annotation.jsr330.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; ClassPathBeanDefinitionScanner org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScanner = new ClassPathBeanDefinitionScanner ( org.springframework.context.annotation.jsr330.GenericWebApplicationContext ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScanner . setIncludeAnnotationConfig ( false ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScanner . setScopeMetadataResolver ( new ScopeMetadataResolver ( ) { @ java.lang.Override public org.springframework.context.annotation.jsr330.ScopeMetadata org.springframework.context.annotation.jsr330.ScopeMetadata ( BeanDefinition org.springframework.context.annotation.jsr330.BeanDefinition ) { ScopeMetadata org.springframework.context.annotation.jsr330.ScopeMetadata = new ScopeMetadata ( ) ; if ( org.springframework.context.annotation.jsr330.BeanDefinition instanceof AnnotatedBeanDefinition ) { AnnotatedBeanDefinition org.springframework.context.annotation.jsr330.AnnotatedBeanDefinition = ( AnnotatedBeanDefinition ) org.springframework.context.annotation.jsr330.BeanDefinition ; for ( java.lang.String java.lang.String : org.springframework.context.annotation.jsr330.AnnotatedBeanDefinition . getMetadata ( ) . getAnnotationTypes ( ) ) { if ( java.lang.String . boolean ( javax . javax.inject . javax.inject .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.jsr330.ScopeMetadata . setScopeName ( BeanDefinition . SCOPE_SINGLETON ) ; break; } else if ( org.springframework.context.annotation.jsr330.AnnotatedBeanDefinition . getMetadata ( ) . getMetaAnnotationTypes ( java.lang.String ) . contains ( javax . javax.inject . javax.inject .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.jsr330.ScopeMetadata . setScopeName ( java.lang.String . java.lang.String ( java.lang.String . int ( ) - NUMBER , java.lang.String . int ( ) - NUMBER ) . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ScopeMetadata . setScopedProxyMode ( org.springframework.context.annotation.jsr330.ScopedProxyMode ) ; break; } else if ( java.lang.String . boolean ( STRING ) ) { org.springframework.context.annotation.jsr330.ScopeMetadata . setScopeName ( BeanDefinition . SCOPE_PROTOTYPE ) ; } } } return org.springframework.context.annotation.jsr330.ScopeMetadata ; } } ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScanner . scan ( java.lang.Class<? extends org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests> ( ) . java.lang.Package ( ) . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScanner . scan ( java.lang.Class<? extends org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests> ( ) . java.lang.Package ( ) . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.GenericWebApplicationContext . registerAlias ( STRING , STRING ) ; org.springframework.context.annotation.jsr330.GenericWebApplicationContext . refresh ( ) ; return org.springframework.context.annotation.jsr330.GenericWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.jsr330.ScopeMetadata org.springframework.context.annotation.jsr330.ScopeMetadata ( BeanDefinition org.springframework.context.annotation.jsr330.BeanDefinition ) { ScopeMetadata org.springframework.context.annotation.jsr330.ScopeMetadata = new ScopeMetadata ( ) ; if ( org.springframework.context.annotation.jsr330.BeanDefinition instanceof AnnotatedBeanDefinition ) { AnnotatedBeanDefinition org.springframework.context.annotation.jsr330.AnnotatedBeanDefinition = ( AnnotatedBeanDefinition ) org.springframework.context.annotation.jsr330.BeanDefinition ; for ( java.lang.String java.lang.String : org.springframework.context.annotation.jsr330.AnnotatedBeanDefinition . getMetadata ( ) . getAnnotationTypes ( ) ) { if ( java.lang.String . boolean ( javax . javax.inject . javax.inject .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.jsr330.ScopeMetadata . setScopeName ( BeanDefinition . SCOPE_SINGLETON ) ; break; } else if ( org.springframework.context.annotation.jsr330.AnnotatedBeanDefinition . getMetadata ( ) . getMetaAnnotationTypes ( java.lang.String ) . contains ( javax . javax.inject . javax.inject .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.jsr330.ScopeMetadata . setScopeName ( java.lang.String . java.lang.String ( java.lang.String . int ( ) - NUMBER , java.lang.String . int ( ) - NUMBER ) . java.lang.String ( ) ) ; org.springframework.context.annotation.jsr330.ScopeMetadata . setScopedProxyMode ( org.springframework.context.annotation.jsr330.ScopedProxyMode ) ; break; } else if ( java.lang.String . boolean ( STRING ) ) { org.springframework.context.annotation.jsr330.ScopeMetadata . setScopeName ( BeanDefinition . SCOPE_PROTOTYPE ) ; } } } return org.springframework.context.annotation.jsr330.ScopeMetadata ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
