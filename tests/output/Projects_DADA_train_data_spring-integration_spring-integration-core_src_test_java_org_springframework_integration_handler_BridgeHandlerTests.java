<METHOD_START> @ Factory public static org.springframework.integration.handler.Matcher<org.springframework.integration.handler.Message<?>> < Message < ? > > org.springframework.integration.handler.Matcher<org.springframework.integration.handler.Message<?>> ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new MessageMatcher ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.handler.BridgeHandler . setOutputChannel ( org.springframework.integration.handler.QueueChannel ) ; Message < ? > org.springframework.integration.handler.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.handler.BridgeHandler . handleMessage ( org.springframework.integration.handler.Message<> ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertThat ( org.springframework.integration.handler.Message<> , org.springframework.integration.handler.Matcher<org.springframework.integration.handler.Message<?>> ( org.springframework.integration.handler.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DestinationResolutionException .class ) public void void ( ) { Message < ? > org.springframework.integration.handler.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.handler.BridgeHandler . handleMessage ( org.springframework.integration.handler.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( timeout = NUMBER ) public void void ( ) java.lang.Exception { PollableChannel org.springframework.integration.handler.PollableChannel = new QueueChannel ( ) ; Message < java.lang.String > org.springframework.integration.handler.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.handler.PollableChannel ) . build ( ) ; org.springframework.integration.handler.BridgeHandler . handleMessage ( org.springframework.integration.handler.Message<java.lang.String> ) ; assertThat ( org.springframework.integration.handler.PollableChannel . receive ( ) , org.springframework.integration.handler.Matcher<org.springframework.integration.handler.Message<?>> ( org.springframework.integration.handler.Message<java.lang.String> ) ) ; }  <METHOD_END>
