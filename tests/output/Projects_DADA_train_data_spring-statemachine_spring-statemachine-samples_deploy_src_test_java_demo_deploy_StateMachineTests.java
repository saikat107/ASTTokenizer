<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > demo.deploy.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , true ) . setHeader ( STRING , true ) . setHeader ( STRING , true ) . build ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.deploy.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( demo.deploy.Message<java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStateEntered ( STRING , STRING , STRING , STRING , STRING , STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > demo.deploy.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , true ) . setHeader ( STRING , true ) . build ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.deploy.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( demo.deploy.Message<java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStateEntered ( STRING , STRING , STRING , STRING , STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > demo.deploy.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , true ) . build ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.deploy.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( demo.deploy.Message<java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStateEntered ( STRING , STRING , STRING , STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > demo.deploy.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.deploy.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( demo.deploy.Message<java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStateEntered ( STRING , STRING , STRING ) . expectStateExited ( STRING , STRING , STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > demo.deploy.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , true ) . setHeader ( STRING , true ) . build ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.deploy.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( demo.deploy.Message<java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStateEntered ( STRING , STRING , STRING , STRING , STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > demo.deploy.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; StateMachineTestPlan < java.lang.String , java.lang.String > demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> = StateMachineTestPlanBuilder .< java.lang.String , java.lang.String > builder ( ) . stateMachine ( demo.deploy.StateMachine<java.lang.String,java.lang.String> ) . step ( ) . expectState ( STRING ) . and ( ) . step ( ) . sendEvent ( demo.deploy.Message<java.lang.String> ) . expectStateChanged ( NUMBER ) . expectStateEntered ( STRING , STRING , STRING ) . expectStates ( STRING ) . and ( ) . build ( ) ; demo.deploy.StateMachineTestPlan<java.lang.String,java.lang.String> . test ( ) ; }  <METHOD_END>
