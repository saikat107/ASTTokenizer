<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.socket.server.standard.MockServletContext = new MockServletContext ( ) ; this . org.springframework.web.socket.server.standard.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.web.socket.server.standard.AnnotationConfigWebApplicationContext . register ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.Config .class ) ; this . org.springframework.web.socket.server.standard.ContextLoader = new ContextLoader ( this . org.springframework.web.socket.server.standard.AnnotationConfigWebApplicationContext ) ; this . org.springframework.web.socket.server.standard.ContextLoader . initWebApplicationContext ( this . org.springframework.web.socket.server.standard.MockServletContext ) ; this . org.springframework.web.socket.server.standard.SpringConfigurator = new SpringConfigurator ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.web.socket.server.standard.ContextLoader . closeWebApplicationContext ( this . org.springframework.web.socket.server.standard.MockServletContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.server.standard.SpringConfiguratorTests.PerConnectionEchoEndpoint org.springframework.web.socket.server.standard.SpringConfiguratorTests.PerConnectionEchoEndpoint = this . org.springframework.web.socket.server.standard.SpringConfigurator . getEndpointInstance ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.PerConnectionEchoEndpoint .class ) ; assertNotNull ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.PerConnectionEchoEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint = this . org.springframework.web.socket.server.standard.AnnotationConfigWebApplicationContext . getBean ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint .class ) ; org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint = this . org.springframework.web.socket.server.standard.SpringConfigurator . getEndpointInstance ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint .class ) ; assertSame ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint , org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.socket.server.standard.SpringConfiguratorTests.ComponentEchoEndpoint org.springframework.web.socket.server.standard.SpringConfiguratorTests.ComponentEchoEndpoint = this . org.springframework.web.socket.server.standard.AnnotationConfigWebApplicationContext . getBean ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.ComponentEchoEndpoint .class ) ; org.springframework.web.socket.server.standard.SpringConfiguratorTests.ComponentEchoEndpoint org.springframework.web.socket.server.standard.SpringConfiguratorTests.ComponentEchoEndpoint = this . org.springframework.web.socket.server.standard.SpringConfigurator . getEndpointInstance ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.ComponentEchoEndpoint .class ) ; assertSame ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.ComponentEchoEndpoint , org.springframework.web.socket.server.standard.SpringConfiguratorTests.ComponentEchoEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint ( ) { return new org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoEndpoint ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ( ) { return new org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ( ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ) { this . org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService = org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ) { this . org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService = org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ) { this . org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService = org.springframework.web.socket.server.standard.SpringConfiguratorTests.EchoService ; }  <METHOD_END>
