<METHOD_START> private void ( ) { }  <METHOD_END>
<METHOD_START> public static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Message org.springframework.integration.mail.support.Message ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; try { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . FROM , java.lang.String ( org.springframework.integration.mail.support.Message . getFrom ( ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . BCC , java.lang.String[] ( org.springframework.integration.mail.support.Message . getRecipients ( RecipientType . BCC ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . CC , java.lang.String[] ( org.springframework.integration.mail.support.Message . getRecipients ( RecipientType . CC ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . TO , java.lang.String[] ( org.springframework.integration.mail.support.Message . getRecipients ( RecipientType . TO ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . REPLY_TO , java.lang.String ( org.springframework.integration.mail.support.Message . getReplyTo ( ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MailHeaders . SUBJECT , org.springframework.integration.mail.support.Message . getSubject ( ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( Address [] org.springframework.integration.mail.support.Address[] ) { if ( org.springframework.integration.mail.support.Address[] == null || addresses . length == NUMBER ) { return null ; } Assert . state ( addresses . length == NUMBER , STRING ) ; return org.springframework.integration.mail.support.Address[] [ NUMBER ] . toString ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( Address [] org.springframework.integration.mail.support.Address[] ) { if ( org.springframework.integration.mail.support.Address[] != null ) { java.lang.String [] java.lang.String[] = new java.lang.String [ addresses . length ] ; for ( int int = NUMBER ; int < addresses . length ; int ++ ) { java.lang.String[] [ int ] = org.springframework.integration.mail.support.Address[] [ int ] . toString ( ) ; } return java.lang.String[] ; } return new java.lang.String [ NUMBER ] ; }  <METHOD_END>
