<METHOD_START> @ Before public void void ( ) java.lang.Exception { GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setServiceInterface ( org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway .class ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setDefaultRequestChannel ( org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanName ( STRING ) ; GenericApplicationContext org.springframework.integration.gateway.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.gateway.GenericApplicationContext . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , new RootBeanDefinition ( IntegrationEvaluationContextFactoryBean .class ) ) ; org.springframework.integration.gateway.GenericApplicationContext . refresh ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( org.springframework.integration.gateway.GenericApplicationContext ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; this . org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway = ( org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway ) org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING , STRING , STRING ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertNull ( org.springframework.integration.gateway.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING , STRING ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.integration.gateway.GenericApplicationContext = new GenericApplicationContext ( ) ; RootBeanDefinition org.springframework.integration.gateway.RootBeanDefinition = new RootBeanDefinition ( GatewayProxyFactoryBean .class ) ; org.springframework.integration.gateway.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway .class ) ; org.springframework.integration.gateway.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.gateway.RootBeanDefinition ) ; org.springframework.integration.gateway.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestBean .class ) ) ; org.springframework.integration.gateway.GenericApplicationContext . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , new RootBeanDefinition ( IntegrationEvaluationContextFactoryBean .class ) ) ; org.springframework.integration.gateway.GenericApplicationContext . refresh ( ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway = org.springframework.integration.gateway.GenericApplicationContext . getBean ( STRING , org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway .class ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; org.springframework.integration.gateway.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( STRING , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.integration.gateway.GenericApplicationContext = new GenericApplicationContext ( ) ; RootBeanDefinition org.springframework.integration.gateway.RootBeanDefinition = new RootBeanDefinition ( GatewayProxyFactoryBean .class ) ; org.springframework.integration.gateway.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.integration.gateway.QueueChannel ) ; org.springframework.integration.gateway.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway .class ) ; org.springframework.integration.gateway.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.integration.gateway.RootBeanDefinition ) ; org.springframework.integration.gateway.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestBean .class ) ) ; org.springframework.integration.gateway.GenericApplicationContext . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , new RootBeanDefinition ( IntegrationEvaluationContextFactoryBean .class ) ) ; org.springframework.integration.gateway.GenericApplicationContext . refresh ( ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway = org.springframework.integration.gateway.GenericApplicationContext . getBean ( STRING , org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway .class ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.gateway.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.gateway.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.gateway.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.gateway.GatewayProxyMessageMappingTests.TestGateway . void ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> void void ( @ Payload java.lang.String java.lang.String , @ Headers java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> void void ( @ Header ( STRING ) java.lang.String java.lang.String , @ Payload java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> void void ( @ Payload java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> @ Payload ( STRING ) void void ( java.lang.String java.lang.String , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Payload ( STRING ) void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( @ Payload ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( @ Payload ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> void void ( @ Payload java.lang.String java.lang.String , @ Payload java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( @ Payload @ Header ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( @ Payload @ Headers java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String ) { int int = NUMBER ; for ( byte byte : java.lang.String . byte[] ( ) ) { int += byte ; } return int ; }  <METHOD_END>
