<METHOD_START> void ( ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction , UriBuilderFactory org.springframework.web.reactive.function.client.UriBuilderFactory , HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders , MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) { this . org.springframework.web.reactive.function.client.ExchangeFunction = org.springframework.web.reactive.function.client.ExchangeFunction ; this . org.springframework.web.reactive.function.client.UriBuilderFactory = ( org.springframework.web.reactive.function.client.UriBuilderFactory != null ? org.springframework.web.reactive.function.client.UriBuilderFactory : new DefaultUriBuilderFactory ( ) ) ; this . org.springframework.web.reactive.function.client.HttpHeaders = ( org.springframework.web.reactive.function.client.HttpHeaders != null ? HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.reactive.function.client.HttpHeaders ) : null ) ; this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> = ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> != null ? CollectionUtils . unmodifiableMultiValueMap ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestHeadersSpec<?>> < RequestHeadersSpec < ? > > org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestHeadersSpec<?>> ( ) { return org.springframework.web.reactive.function.client.UriSpec ( HttpMethod . GET ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestHeadersSpec<?>> < RequestHeadersSpec < ? > > org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestHeadersSpec<?>> ( ) { return org.springframework.web.reactive.function.client.UriSpec ( HttpMethod . HEAD ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestBodySpec> < RequestBodySpec > org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestBodySpec> ( ) { return org.springframework.web.reactive.function.client.UriSpec ( HttpMethod . POST ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestBodySpec> < RequestBodySpec > org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestBodySpec> ( ) { return org.springframework.web.reactive.function.client.UriSpec ( HttpMethod . PUT ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestBodySpec> < RequestBodySpec > org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestBodySpec> ( ) { return org.springframework.web.reactive.function.client.UriSpec ( HttpMethod . PATCH ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestHeadersSpec<?>> < RequestHeadersSpec < ? > > org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestHeadersSpec<?>> ( ) { return org.springframework.web.reactive.function.client.UriSpec ( HttpMethod . DELETE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestHeadersSpec<?>> < RequestHeadersSpec < ? > > org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestHeadersSpec<?>> ( ) { return org.springframework.web.reactive.function.client.UriSpec ( HttpMethod . OPTIONS ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestBodySpec> < RequestBodySpec > org.springframework.web.reactive.function.client.UriSpec<org.springframework.web.reactive.function.client.RequestBodySpec> ( HttpMethod org.springframework.web.reactive.function.client.HttpMethod ) { return org.springframework.web.reactive.function.client.UriSpec ( org.springframework.web.reactive.function.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < S extends org.springframework.web.reactive.function.client.RequestHeadersSpec<?> < ? > > org.springframework.web.reactive.function.client.UriSpec<S> < S > org.springframework.web.reactive.function.client.UriSpec<S> ( HttpMethod org.springframework.web.reactive.function.client.HttpMethod ) { return new org.springframework.web.reactive.function.client.DefaultWebClient.DefaultUriSpec <> ( org.springframework.web.reactive.function.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.WebClient org.springframework.web.reactive.function.client.WebClient ( ExchangeFilterFunction org.springframework.web.reactive.function.client.ExchangeFilterFunction ) { ExchangeFunction org.springframework.web.reactive.function.client.ExchangeFunction = this . org.springframework.web.reactive.function.client.ExchangeFunction . filter ( org.springframework.web.reactive.function.client.ExchangeFilterFunction ) ; return new org.springframework.web.reactive.function.client.DefaultWebClient ( org.springframework.web.reactive.function.client.ExchangeFunction , this . org.springframework.web.reactive.function.client.UriBuilderFactory , this . org.springframework.web.reactive.function.client.HttpHeaders , this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> void ( HttpMethod org.springframework.web.reactive.function.client.HttpMethod ) { this . org.springframework.web.reactive.function.client.HttpMethod = org.springframework.web.reactive.function.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return S ( org.springframework.web.reactive.function.client.UriBuilderFactory . expand ( java.lang.String , java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return S ( org.springframework.web.reactive.function.client.UriBuilderFactory . expand ( java.lang.String , java.util.Map<java.lang.String,> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( java.util.function.Function<org.springframework.web.reactive.function.client.UriBuilder,java.net.URI> < UriBuilder , java.net.URI > java.util.function.Function<org.springframework.web.reactive.function.client.UriBuilder,java.net.URI> ) { return S ( java.util.function.Function<org.springframework.web.reactive.function.client.UriBuilder,java.net.URI> . apply ( org.springframework.web.reactive.function.client.UriBuilderFactory . builder ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public S S ( java.net.URI java.net.URI ) { return ( S ) new org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( this . org.springframework.web.reactive.function.client.HttpMethod , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> void ( HttpMethod org.springframework.web.reactive.function.client.HttpMethod , java.net.URI java.net.URI ) { this . org.springframework.web.reactive.function.client.HttpMethod = org.springframework.web.reactive.function.client.HttpMethod ; this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.client.HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders ( ) { if ( this . org.springframework.web.reactive.function.client.HttpHeaders == null ) { this . org.springframework.web.reactive.function.client.HttpHeaders = new HttpHeaders ( ) ; } return this . org.springframework.web.reactive.function.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ( ) { if ( this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> == null ) { this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( NUMBER ) ; } return this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.web.reactive.function.client.HttpHeaders ( ) . add ( java.lang.String , java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders ) { if ( org.springframework.web.reactive.function.client.HttpHeaders != null ) { org.springframework.web.reactive.function.client.HttpHeaders ( ) . putAll ( org.springframework.web.reactive.function.client.HttpHeaders ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( MediaType ... org.springframework.web.reactive.function.client.MediaType[] ) { org.springframework.web.reactive.function.client.HttpHeaders ( ) . setAccept ( java.util.Arrays . java.util.List ( org.springframework.web.reactive.function.client.MediaType[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( java.nio.charset.Charset ... java.nio.charset.Charset[] ) { org.springframework.web.reactive.function.client.HttpHeaders ( ) . setAcceptCharset ( java.util.Arrays . java.util.List<java.nio.charset.Charset> ( java.nio.charset.Charset[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( MediaType org.springframework.web.reactive.function.client.MediaType ) { org.springframework.web.reactive.function.client.HttpHeaders ( ) . setContentType ( org.springframework.web.reactive.function.client.MediaType ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( long long ) { org.springframework.web.reactive.function.client.HttpHeaders ( ) . setContentLength ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ( ) . add ( java.lang.String , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) { if ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> != null ) { org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ( ) . putAll ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( java.time.ZonedDateTime java.time.ZonedDateTime ) { java.time.ZonedDateTime java.time.ZonedDateTime = java.time.ZonedDateTime . java.time.ZonedDateTime ( java.time.ZoneId . java.time.ZoneId ( STRING ) ) ; java.lang.String java.lang.String = java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter . java.lang.String ( java.time.ZonedDateTime ) ; org.springframework.web.reactive.function.client.HttpHeaders ( ) . set ( HttpHeaders . IF_MODIFIED_SINCE , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec org.springframework.web.reactive.function.client.DefaultWebClient.DefaultRequestBodySpec ( java.lang.String ... java.lang.String[] ) { org.springframework.web.reactive.function.client.HttpHeaders ( ) . setIfNoneMatch ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.client.RequestHeadersSpec<?> < ? > org.springframework.web.reactive.function.client.RequestHeadersSpec<?> ( BodyInserter < T , ? super ClientHttpRequest > org.springframework.web.reactive.function.client.BodyInserter<T,? super org.springframework.web.reactive.function.client.ClientHttpRequest> ) { this . org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> = org.springframework.web.reactive.function.client.BodyInserter<T,> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , S extends org.springframework.web.reactive.function.client.Publisher<T> < T > > org.springframework.web.reactive.function.client.RequestHeadersSpec<?> < ? > org.springframework.web.reactive.function.client.RequestHeadersSpec<?> ( S S , java.lang.Class<T> < T > java.lang.Class<T> ) { this . org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> = BodyInserters . fromPublisher ( S , java.lang.Class<T> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.client.RequestHeadersSpec<?> < ? > org.springframework.web.reactive.function.client.RequestHeadersSpec<?> ( T T ) { this . org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> = BodyInserters . fromObject ( T ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> < ClientResponse > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> ( ) { ClientRequest org.springframework.web.reactive.function.client.ClientRequest = this . org.springframework.web.reactive.function.client.BodyInserter<,> != null ? ClientRequest.Builder ( ) . body ( this . org.springframework.web.reactive.function.client.BodyInserter<,> ) . build ( ) : ClientRequest.Builder ( ) . build ( ) ; return org.springframework.web.reactive.function.client.ExchangeFunction . exchange ( org.springframework.web.reactive.function.client.ClientRequest ) ; }  <METHOD_END>
<METHOD_START> private ClientRequest . ClientRequest.Builder ClientRequest.Builder ( ) { return ClientRequest . method ( this . org.springframework.web.reactive.function.client.HttpMethod , this . java.net.URI ) . headers ( org.springframework.web.reactive.function.client.HttpHeaders ( ) ) . cookies ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.client.HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders ( ) { if ( CollectionUtils . isEmpty ( org.springframework.web.reactive.function.client.HttpHeaders ) && CollectionUtils . isEmpty ( this . org.springframework.web.reactive.function.client.HttpHeaders ) ) { return null ; } else if ( CollectionUtils . isEmpty ( org.springframework.web.reactive.function.client.HttpHeaders ) ) { return this . org.springframework.web.reactive.function.client.HttpHeaders ; } else if ( CollectionUtils . isEmpty ( this . org.springframework.web.reactive.function.client.HttpHeaders ) ) { return org.springframework.web.reactive.function.client.HttpHeaders ; } else { HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.function.client.HttpHeaders . putAll ( this . org.springframework.web.reactive.function.client.HttpHeaders ) ; org.springframework.web.reactive.function.client.HttpHeaders . forEach ( ( name , values ) -> { if ( ! this . headers . containsKey ( name ) ) { values . forEach ( value -> result . add ( name , value ) ) ; } } ) ; return org.springframework.web.reactive.function.client.HttpHeaders ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ( ) { if ( CollectionUtils . isEmpty ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) && CollectionUtils . isEmpty ( this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) ) { return null ; } else if ( CollectionUtils . isEmpty ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) ) { return this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ; } else if ( CollectionUtils . isEmpty ( this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) ) { return org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ; } else { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> . putAll ( this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) ; org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> . forEach ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> :: putIfAbsent ) ; return org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.ResponseSpec org.springframework.web.reactive.function.client.ResponseSpec ( ) { return new org.springframework.web.reactive.function.client.DefaultWebClient.DefaultResponseSpec ( org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( Mono < ClientResponse > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> ) { this . org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> = org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.client.Mono<T> < T > org.springframework.web.reactive.function.client.Mono<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return this . org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> . then ( clientResponse -> clientResponse . bodyToMono ( bodyType ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.client.Flux<T> < T > org.springframework.web.reactive.function.client.Flux<T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return this . org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> . flatMap ( clientResponse -> clientResponse . bodyToFlux ( elementType ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ResponseEntity<T>> < ResponseEntity < T > > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ResponseEntity<T>> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return this . org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> . then ( response -> response . bodyToMono ( bodyType ) . map ( body -> { HttpHeaders headers = response . headers ( ) . asHttpHeaders ( ) ; return new ResponseEntity <> ( body , headers , response . statusCode ( ) ) ; } ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ResponseEntity<java.util.List<T>>> < ResponseEntity < java.util.List<T> < T > > > org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ResponseEntity<java.util.List<T>>> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return this . org.springframework.web.reactive.function.client.Mono<org.springframework.web.reactive.function.client.ClientResponse> . then ( response -> response . bodyToFlux ( responseType ) . collectList ( ) . map ( body -> { HttpHeaders headers = response . headers ( ) . asHttpHeaders ( ) ; return new ResponseEntity <> ( body , headers , response . statusCode ( ) ) ; } ) ) ; }  <METHOD_END>
