<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . canRead ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . canRead ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . canRead ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . canWrite ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . canWrite ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . canWrite ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean = ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean ) org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . read ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . int ( ) ) ; assertEquals ( NUMBER , org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . float ( ) , NUMBER ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . java.lang.String[] ( ) ) ; assertTrue ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . boolean ( ) ) ; assertArrayEquals ( new byte [] { NUMBER , NUMBER } , org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpOutputMessage org.springframework.http.converter.xml.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean = new org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean ( ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . void ( STRING ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . void ( NUMBER ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . void ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . void ( true ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean . void ( new byte [] { NUMBER , NUMBER } ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . write ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean , null , org.springframework.http.converter.xml.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.xml.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.xml.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = HttpMessageNotReadableException .class ) public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . read ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . read ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpOutputMessage org.springframework.http.converter.xml.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.JacksonViewBean org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.JacksonViewBean = new org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.JacksonViewBean ( ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.JacksonViewBean . void ( STRING ) ; MappingJacksonValue org.springframework.http.converter.xml.MappingJacksonValue = new MappingJacksonValue ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.JacksonViewBean ) ; org.springframework.http.converter.xml.MappingJacksonValue . setSerializationView ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyJacksonView1 .class ) ; this . void ( org.springframework.http.converter.xml.MappingJacksonValue , org.springframework.http.converter.xml.MockHttpOutputMessage ) ; java.lang.String java.lang.String = org.springframework.http.converter.xml.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertThat ( java.lang.String , containsString ( STRING ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; assertThat ( java.lang.String , not ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new MappingJackson2XmlHttpMessageConverter ( new org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyXmlMapper ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING + STRING + STRING + new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests> ( ) ) . getURI ( ) + STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; this . org.springframework.http.converter.xml.ExpectedException . expect ( HttpMessageNotReadableException .class ) ; this . org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . read ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; org.springframework.http.converter.xml.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING ) ) ; this . org.springframework.http.converter.xml.ExpectedException . expect ( HttpMessageNotReadableException .class ) ; this . org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter . read ( org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverterTests.MyBean .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , HttpOutputMessage org.springframework.http.converter.xml.HttpOutputMessage ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = AbstractHttpMessageConverter .class . java.lang.reflect.Method ( STRING , java.lang.Object .class , HttpOutputMessage .class ) ; java.lang.reflect.Method . void ( true ) ; java.lang.reflect.Method . java.lang.Object ( this . org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter , java.lang.Object , org.springframework.http.converter.xml.HttpOutputMessage ) ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public float float ( ) { return float ; }  <METHOD_END>
<METHOD_START> public void void ( float float ) { this . float = float ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
