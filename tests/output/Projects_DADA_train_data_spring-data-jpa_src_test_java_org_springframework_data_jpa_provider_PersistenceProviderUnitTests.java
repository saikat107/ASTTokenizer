<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.jpa.provider.ShadowingClassLoader = new ShadowingClassLoader ( java.lang.Class<? extends org.springframework.data.jpa.provider.PersistenceProviderUnitTests> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.jpa.provider.ShadowingClassLoader . excludePackage ( STRING ) ; EntityManager org.springframework.data.jpa.provider.EntityManager = org.springframework.data.jpa.provider.EntityManager ( OPENJPA_ENTITY_MANAGER_INTERFACE ) ; assertThat ( fromEntityManager ( org.springframework.data.jpa.provider.EntityManager ) , is ( OPEN_JPA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.jpa.provider.ShadowingClassLoader . excludePackage ( STRING ) ; EntityManager org.springframework.data.jpa.provider.EntityManager = org.springframework.data.jpa.provider.EntityManager ( ECLIPSELINK_ENTITY_MANAGER_INTERFACE ) ; assertThat ( fromEntityManager ( org.springframework.data.jpa.provider.EntityManager ) , is ( ECLIPSELINK ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EntityManager org.springframework.data.jpa.provider.EntityManager = org.springframework.data.jpa.provider.EntityManager ( STRING ) ; assertThat ( fromEntityManager ( org.springframework.data.jpa.provider.EntityManager ) , is ( GENERIC_JPA ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . assumeThat ( Version . getVersionString ( ) , startsWith ( STRING ) ) ; org.springframework.data.jpa.provider.ShadowingClassLoader . excludePackage ( STRING ) ; EntityManager org.springframework.data.jpa.provider.EntityManager = org.springframework.data.jpa.provider.EntityManager ( HIBERNATE_ENTITY_MANAGER_INTERFACE ) ; assertThat ( fromEntityManager ( org.springframework.data.jpa.provider.EntityManager ) , is ( HIBERNATE ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.provider.EntityManager org.springframework.data.jpa.provider.EntityManager ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.provider.PersistenceProviderUnitTests.InterfaceGenerator . java.lang.Class<?> ( java.lang.String , org.springframework.data.jpa.provider.ShadowingClassLoader , EntityManager .class ) ; EntityManager org.springframework.data.jpa.provider.EntityManager = EntityManager .class . org.springframework.data.jpa.provider.EntityManager ( Mockito . mock ( java.lang.Class<> ) ) ; Mockito . when ( org.springframework.data.jpa.provider.EntityManager . getDelegate ( ) ) . thenReturn ( org.springframework.data.jpa.provider.EntityManager ) ; return org.springframework.data.jpa.provider.EntityManager ; }  <METHOD_END>
<METHOD_START> public static java.lang.Class<?> < ? > java.lang.Class<?> ( final java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader , final java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.ClassNotFoundException { class CustomClassLoader extends java.lang.ClassLoader { public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); } @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { if ( java.lang.String . boolean ( java.lang.String ) ) { byte [] byte[] = byte[] ( java.lang.String , java.lang.Class<?>[] ) ; return java.lang.Class<?> ( java.lang.String , byte[] , NUMBER , byte[] . int ) ; } return super. java.lang.Class<?> ( java.lang.String ) ; } } return new CustomClassLoader ( java.lang.ClassLoader ) . java.lang.Class<?> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { if ( java.lang.String . boolean ( java.lang.String ) ) { byte [] byte[] = byte[] ( java.lang.String , java.lang.Class<?>[] ) ; return java.lang.Class<?> ( java.lang.String , byte[] , NUMBER , byte[] . int ) ; } return super. java.lang.Class<?> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static byte [] byte[] ( final java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.String java.lang.String = ClassUtils . convertClassNameToResourcePath ( java.lang.String ) ; ClassWriter org.springframework.data.jpa.provider.ClassWriter = new ClassWriter ( NUMBER ) ; org.springframework.data.jpa.provider.ClassWriter . visit ( V1_6 , ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE , java.lang.String , null , STRING , java.lang.String[] ( java.lang.Class<?>[] ) ) ; org.springframework.data.jpa.provider.ClassWriter . visitSource ( java.lang.String + STRING , null ) ; org.springframework.data.jpa.provider.ClassWriter . visitEnd ( ) ; return org.springframework.data.jpa.provider.ClassWriter . toByteArray ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.lang.Class<?>[] . int ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.List<java.lang.String> . boolean ( ClassUtils . convertClassNameToResourcePath ( java.lang.Class<> . java.lang.String ( ) ) ) ; } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
