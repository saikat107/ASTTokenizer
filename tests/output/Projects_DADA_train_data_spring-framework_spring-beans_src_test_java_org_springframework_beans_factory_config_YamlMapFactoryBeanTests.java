<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResolutionMethod ( YamlMapFactoryBean . ResolutionMethod . OVERRIDE_AND_IGNORE ) ; this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResources ( new FileSystemResource ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResources ( new FileSystemResource ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; assertEquals ( NUMBER , this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) , new ByteArrayResource ( STRING . byte[] ( ) ) ) ; assertEquals ( NUMBER , this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) . size ( ) ) ; assertEquals ( NUMBER , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) . get ( STRING ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResolutionMethod ( YamlProcessor . ResolutionMethod . FIRST_FOUND ) ; this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResources ( new AbstractResource ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { throw new java.io.IOException ( STRING ) ; } } , new ByteArrayResource ( STRING . byte[] ( ) ) ) ; assertEquals ( NUMBER , this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { throw new java.io.IOException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertTrue ( java.lang.Object instanceof java.util.LinkedHashMap ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertTrue ( java.lang.Object instanceof java.util.LinkedHashMap ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.beans.factory.config.YamlMapFactoryBean . setResources ( new ByteArrayResource ( STRING . byte[] ( ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.beans.factory.config.YamlMapFactoryBean . getObject ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertTrue ( java.lang.Object instanceof java.util.LinkedHashMap ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
