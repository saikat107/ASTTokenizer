<METHOD_START> protected void void ( GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod , java.lang.String ... java.lang.String[] ) { assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasHint ( ) , is ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) ) ; java.lang.String [] java.lang.String[] = org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getHints ( ) ; assertThat ( java.lang.String[] , is ( not ( nullValue ( ) ) ) ) ; assertThat ( java.lang.String[] . int , is ( equalTo ( java.lang.String[] . int ) ) ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { assertThat ( java.lang.String[] [ int ] , is ( equalTo ( java.lang.String[] [ int ] ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod ) { void ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod ) ; }  <METHOD_END>
<METHOD_START> protected void void ( GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasImport ( ) , is ( java.lang.String != null ) ) ; if ( java.lang.String != null ) { assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getImport ( ) , is ( equalTo ( java.lang.String ) ) ) ; } else { assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getImport ( ) , is ( nullValue ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod ) { void ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , null ) ; }  <METHOD_END>
<METHOD_START> protected void void ( GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod , java.lang.Integer java.lang.Integer ) { assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasLimit ( ) , is ( java.lang.Integer != null ) ) ; if ( java.lang.Integer != null ) { assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getLimit ( ) , is ( equalTo ( java.lang.Integer ) ) ) ; } else { assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getLimit ( ) , is ( equalTo ( java.lang.Integer . int ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod ) { void ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod , null ) ; }  <METHOD_END>
<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.gemfire.repository.query.RepositoryMetadata . getDomainType ( ) ) . thenReturn ( ( java.lang.Class ) Person .class ) ; when ( org.springframework.data.gemfire.repository.query.RepositoryMetadata . getReturnedDomainClass ( Mockito . any ( java.lang.reflect.Method .class ) ) ) . thenReturn ( ( java.lang.Class ) Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod = new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.Sample .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasAnnotatedQuery ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getAnnotatedQuery ( ) , is ( STRING ) ) ; org.springframework.data.gemfire.repository.query.GemfireQueryMethod = new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.Sample .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasAnnotatedQuery ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getAnnotatedQuery ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.repository.query.GemfireQueryMethod = new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.Sample .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . hasAnnotatedQuery ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getAnnotatedQuery ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.repository.query.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.repository.query.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.query.ExpectedException . expectMessage ( Matchers . startsWith ( STRING ) ) ; new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.Invalid .class . java.lang.reflect.Method ( STRING , Pageable .class ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasHint ( ) , is ( true ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasHint ( ) , is ( false ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasHint ( ) , is ( true ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasHint ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasImport ( ) , is ( false ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasImport ( ) , is ( true ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasImport ( ) , is ( true ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasImport ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasLimit ( ) , is ( false ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasLimit ( ) , is ( false ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasLimit ( ) , is ( true ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasLimit ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasTrace ( ) , is ( true ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasTrace ( ) , is ( false ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasTrace ( ) , is ( false ) ) ; assertThat ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) . hasTrace ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) , STRING , STRING ) ; void ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) , STRING ) ; void ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new GemfireQueryMethod ( org.springframework.data.gemfire.repository.query.GemfireQueryMethodUnitTests.AnnotatedQueryMethods .class . java.lang.reflect.Method ( STRING ) , org.springframework.data.gemfire.repository.query.RepositoryMetadata , org.springframework.data.gemfire.repository.query.ProjectionFactory , org.springframework.data.gemfire.repository.query.GemfireMappingContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Query ( STRING ) void void ( )  <METHOD_END>
<METHOD_START> @ Query ( STRING ) void void ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.repository.query.Page<?> < ? > org.springframework.data.gemfire.repository.query.Page<?> ( Pageable org.springframework.data.gemfire.repository.query.Pageable );  <METHOD_END>
<METHOD_START> @ Trace @ Hint ( { STRING , STRING } ) void void ( )  <METHOD_END>
<METHOD_START> @ Import ( STRING ) void void ( )  <METHOD_END>
<METHOD_START> @ Hint ( STRING ) @ Import ( STRING ) @ Limit ( NUMBER ) void void ( )  <METHOD_END>
<METHOD_START> @ Trace void void ( )  <METHOD_END>
