<METHOD_START> public void ( MetricRegistry org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry ) { this( org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry , null ); }  <METHOD_END>
<METHOD_START> public void ( MetricRegistry org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry , ReservoirFactory org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory ) { this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry = org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry ; this . org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory = ( org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory == null ? ReservoirFactory . NONE : org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( java.lang.String , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , long long ) { if ( java.lang.String . boolean ( STRING ) ) { Meter org.springframework.boot.actuate.metrics.dropwizard.Meter = this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . meter ( java.lang.String ) ; org.springframework.boot.actuate.metrics.dropwizard.Meter . mark ( long ) ; } else { java.lang.String = java.lang.String ( java.lang.String ) ; Counter org.springframework.boot.actuate.metrics.dropwizard.Counter = this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . counter ( java.lang.String ) ; org.springframework.boot.actuate.metrics.dropwizard.Counter . inc ( long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , double double ) { if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String , double ) ; } else if ( java.lang.String . boolean ( STRING ) ) { void ( java.lang.String , double ) ; } else { java.lang.String = java.lang.String ( java.lang.String ) ; void ( java.lang.String , double ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , double double ) { long long = ( long ) double ; Timer org.springframework.boot.actuate.metrics.dropwizard.Timer = T ( java.lang.String , new org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.TimerMetricRegistrar ( ) ) ; org.springframework.boot.actuate.metrics.dropwizard.Timer . update ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , double double ) { long long = ( long ) double ; Histogram org.springframework.boot.actuate.metrics.dropwizard.Histogram = T ( java.lang.String , new org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.HistogramMetricRegistrar ( ) ) ; org.springframework.boot.actuate.metrics.dropwizard.Histogram . update ( long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T extends org.springframework.boot.actuate.metrics.dropwizard.Metric > T T ( java.lang.String java.lang.String , org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.MetricRegistrar<T> < T > org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.MetricRegistrar<T> ) { Reservoir org.springframework.boot.actuate.metrics.dropwizard.Reservoir = this . org.springframework.boot.actuate.metrics.dropwizard.ReservoirFactory . getReservoir ( java.lang.String ) ; if ( org.springframework.boot.actuate.metrics.dropwizard.Reservoir == null ) { return org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.MetricRegistrar<T> . T ( this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry , java.lang.String ) ; } Metric org.springframework.boot.actuate.metrics.dropwizard.Metric = this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . getMetrics ( ) . get ( java.lang.String ) ; if ( org.springframework.boot.actuate.metrics.dropwizard.Metric != null ) { org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.MetricRegistrar<T> . void ( org.springframework.boot.actuate.metrics.dropwizard.Metric ) ; return ( T ) org.springframework.boot.actuate.metrics.dropwizard.Metric ; } try { return this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . register ( java.lang.String , org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.MetricRegistrar<T> . T ( org.springframework.boot.actuate.metrics.dropwizard.Reservoir ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { Metric org.springframework.boot.actuate.metrics.dropwizard.Metric = this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . getMetrics ( ) . get ( java.lang.String ) ; org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.MetricRegistrar<T> . void ( org.springframework.boot.actuate.metrics.dropwizard.Metric ) ; return ( T ) org.springframework.boot.actuate.metrics.dropwizard.Metric ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , double double ) { org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge> . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge ( java.lang.String ) ; if ( org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge == null ) { org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge = new org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge ( double ) ; org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge> . org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge ( java.lang.String , org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge ) ; if ( org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge == null ) { this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . register ( java.lang.String , org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge ) ; return; } } org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.SimpleGauge . void ( double ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = this . java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } if ( java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String ; } java.lang.String java.lang.String = java.lang.String + java.lang.String ; this . java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ( java.lang.String ) ; } this . org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void ( double double ) { this . double = double ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Double java.lang.Double ( ) { return this . double ; }  <METHOD_END>
<METHOD_START> public void void ( double double ) { this . double = double ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( ) { this . java.lang.Class<T> = ( java.lang.Class<T> < T > ) ResolvableType . forClass ( org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.MetricRegistrar .class , java.lang.Class<? extends org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices.MetricRegistrar> ( ) ) . resolveGeneric ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( Metric org.springframework.boot.actuate.metrics.dropwizard.Metric ) { Assert . isInstanceOf ( this . java.lang.Class<T> , org.springframework.boot.actuate.metrics.dropwizard.Metric , STRING ) ; }  <METHOD_END>
<METHOD_START> protected abstract T T ( MetricRegistry org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> protected abstract T T ( Reservoir org.springframework.boot.actuate.metrics.dropwizard.Reservoir );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.metrics.dropwizard.Timer org.springframework.boot.actuate.metrics.dropwizard.Timer ( MetricRegistry org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry , java.lang.String java.lang.String ) { return org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . timer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.metrics.dropwizard.Timer org.springframework.boot.actuate.metrics.dropwizard.Timer ( Reservoir org.springframework.boot.actuate.metrics.dropwizard.Reservoir ) { return new Timer ( org.springframework.boot.actuate.metrics.dropwizard.Reservoir ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.metrics.dropwizard.Histogram org.springframework.boot.actuate.metrics.dropwizard.Histogram ( MetricRegistry org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry , java.lang.String java.lang.String ) { return org.springframework.boot.actuate.metrics.dropwizard.MetricRegistry . histogram ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.metrics.dropwizard.Histogram org.springframework.boot.actuate.metrics.dropwizard.Histogram ( Reservoir org.springframework.boot.actuate.metrics.dropwizard.Reservoir ) { return new Histogram ( org.springframework.boot.actuate.metrics.dropwizard.Reservoir ) ; }  <METHOD_END>
