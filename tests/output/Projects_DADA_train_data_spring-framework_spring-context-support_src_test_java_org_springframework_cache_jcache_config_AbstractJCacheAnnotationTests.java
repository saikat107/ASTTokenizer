<METHOD_START> protected abstract org.springframework.cache.jcache.config.ApplicationContext org.springframework.cache.jcache.config.ApplicationContext ( )  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.cache.jcache.config.ApplicationContext = org.springframework.cache.jcache.config.ApplicationContext ( ) ; org.springframework.cache.jcache.config.JCacheableService<?> = org.springframework.cache.jcache.config.ApplicationContext . getBean ( JCacheableService .class ) ; org.springframework.cache.jcache.config.CacheManager = org.springframework.cache.jcache.config.ApplicationContext . getBean ( STRING , CacheManager .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.config.JCacheableService<> . cache ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.config.JCacheableService<> . cache ( java.lang.String ) ; assertSame ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.String ) ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.config.JCacheableService<> . cacheNull ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.config.JCacheableService<> . cacheNull ( java.lang.String ) ; assertSame ( java.lang.Object , java.lang.Object ) ; Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.String ) ; assertNotNull ( Cache.ValueWrapper ) ; assertSame ( java.lang.Object , Cache.ValueWrapper . get ( ) ) ; assertNull ( STRING , Cache.ValueWrapper . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . cacheWithException ( java.lang.String , true ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ; assertNotNull ( Cache.ValueWrapper ) ; assertEquals ( java.lang.UnsupportedOperationException .class , Cache.ValueWrapper . get ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . cacheWithException ( java.lang.String , false ) ; fail ( STRING ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { } assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . cacheWithCheckedException ( java.lang.String , true ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { } Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ; assertNotNull ( Cache.ValueWrapper ) ; assertEquals ( java.io.IOException .class , Cache.ValueWrapper . get ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { final java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException = null ; long long = org.springframework.cache.jcache.config.JCacheableService<> . exceptionInvocations ( ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . cacheWithException ( java.lang.String , true ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { java.lang.UnsupportedOperationException = java.lang.UnsupportedOperationException ; } assertEquals ( STRING , long + NUMBER , org.springframework.cache.jcache.config.JCacheableService<> . exceptionInvocations ( ) ) ; java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException = java.lang.UnsupportedOperationException ( java.lang.String ) ; assertEquals ( STRING , long + NUMBER , org.springframework.cache.jcache.config.JCacheableService<> . exceptionInvocations ( ) ) ; assertEquals ( java.lang.UnsupportedOperationException . java.lang.Throwable ( ) , java.lang.UnsupportedOperationException . java.lang.Throwable ( ) ) ; assertEquals ( java.lang.UnsupportedOperationException . java.lang.String ( ) , java.lang.UnsupportedOperationException . java.lang.String ( ) ) ; assertFalse ( STRING , boolean ( java.lang.UnsupportedOperationException , org.springframework.cache.jcache.config.AbstractJCacheAnnotationTests .class . java.lang.String ( ) , STRING ) ) ; assertTrue ( STRING , boolean ( java.lang.UnsupportedOperationException , org.springframework.cache.jcache.config.AbstractJCacheAnnotationTests .class . java.lang.String ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.config.JCacheableService<> . cacheAlwaysInvoke ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.config.JCacheableService<> . cacheAlwaysInvoke ( java.lang.String ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.config.JCacheableService<> . cacheWithPartialKey ( java.lang.String , true ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.config.JCacheableService<> . cacheWithPartialKey ( java.lang.String , false ) ; assertSame ( java.lang.Object , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; org.springframework.cache.jcache.config.JCacheableService<> . cacheWithCustomCacheResolver ( java.lang.String ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; org.springframework.cache.jcache.config.JCacheableService<> . cacheWithCustomKeyGenerator ( java.lang.String , STRING ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; org.springframework.cache.jcache.config.JCacheableService<> . put ( java.lang.String , java.lang.Object ) ; Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ; assertNotNull ( Cache.ValueWrapper ) ; assertEquals ( java.lang.Object , Cache.ValueWrapper . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . putWithException ( java.lang.String , java.lang.Object , true ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ; assertNotNull ( Cache.ValueWrapper ) ; assertEquals ( java.lang.Object , Cache.ValueWrapper . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . putWithException ( java.lang.String , java.lang.Object , false ) ; fail ( STRING ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { } assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; org.springframework.cache.jcache.config.JCacheableService<> . earlyPut ( java.lang.String , java.lang.Object ) ; Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ; assertNotNull ( Cache.ValueWrapper ) ; assertEquals ( java.lang.Object , Cache.ValueWrapper . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . earlyPutWithException ( java.lang.String , java.lang.Object , true ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ; assertNotNull ( Cache.ValueWrapper ) ; assertEquals ( java.lang.Object , Cache.ValueWrapper . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . earlyPutWithException ( java.lang.String , java.lang.Object , false ) ; fail ( STRING ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { } Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ; assertNotNull ( Cache.ValueWrapper ) ; assertEquals ( java.lang.Object , Cache.ValueWrapper . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , java.lang.Object ) ; org.springframework.cache.jcache.config.JCacheableService<> . remove ( java.lang.String ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , java.lang.Object ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . removeWithException ( java.lang.String , true ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , java.lang.Object ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . removeWithException ( java.lang.String , false ) ; fail ( STRING ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { } Cache . Cache Cache.ValueWrapper = org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ; assertNotNull ( Cache.ValueWrapper ) ; assertEquals ( java.lang.Object , Cache.ValueWrapper . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , java.lang.Object ) ; org.springframework.cache.jcache.config.JCacheableService<> . earlyRemove ( java.lang.String ) ; assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , java.lang.Object ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . earlyRemoveWithException ( java.lang.String , true ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.cache.jcache.config.TestName . getMethodName ( ) ; Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , java.lang.Object ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . earlyRemoveWithException ( java.lang.String , false ) ; fail ( STRING ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { } assertNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.jcache.config.TestName . getMethodName ( ) ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , new java.lang.Object ( ) ) ; org.springframework.cache.jcache.config.JCacheableService<> . removeAll ( ) ; assertTrue ( boolean ( org.springframework.cache.jcache.config.Cache ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.jcache.config.TestName . getMethodName ( ) ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , new java.lang.Object ( ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . removeAllWithException ( true ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } assertTrue ( boolean ( org.springframework.cache.jcache.config.Cache ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.jcache.config.TestName . getMethodName ( ) ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , new java.lang.Object ( ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . removeAllWithException ( false ) ; fail ( STRING ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { } assertNotNull ( org.springframework.cache.jcache.config.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.jcache.config.TestName . getMethodName ( ) ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , new java.lang.Object ( ) ) ; org.springframework.cache.jcache.config.JCacheableService<> . earlyRemoveAll ( ) ; assertTrue ( boolean ( org.springframework.cache.jcache.config.Cache ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.jcache.config.TestName . getMethodName ( ) ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , new java.lang.Object ( ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . earlyRemoveAllWithException ( true ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } assertTrue ( boolean ( org.springframework.cache.jcache.config.Cache ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.Cache ( java.lang.String ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.jcache.config.TestName . getMethodName ( ) ) ; org.springframework.cache.jcache.config.Cache . put ( java.lang.Object , new java.lang.Object ( ) ) ; try { org.springframework.cache.jcache.config.JCacheableService<> . earlyRemoveAllWithException ( false ) ; fail ( STRING ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { } assertTrue ( boolean ( org.springframework.cache.jcache.config.Cache ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Cache org.springframework.cache.jcache.config.Cache ) { java.util.concurrent.ConcurrentHashMap<?,?> < ? , ? > java.util.concurrent.ConcurrentHashMap<?,?> = ( java.util.concurrent.ConcurrentHashMap<?,?> < ? , ? > ) org.springframework.cache.jcache.config.Cache . getNativeCache ( ) ; return java.util.concurrent.ConcurrentHashMap<,> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object ... java.lang.Object[] ) { return SimpleKeyGenerator . generateKey ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.jcache.config.Cache org.springframework.cache.jcache.config.Cache ( java.lang.String java.lang.String ) { Cache org.springframework.cache.jcache.config.Cache = org.springframework.cache.jcache.config.CacheManager . getCache ( java.lang.String ) ; assertNotNull ( STRING + java.lang.String + STRING , org.springframework.cache.jcache.config.Cache ) ; return org.springframework.cache.jcache.config.Cache ; }  <METHOD_END>
<METHOD_START> private java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ( java.lang.String java.lang.String ) { try { org.springframework.cache.jcache.config.JCacheableService<> . cacheWithException ( java.lang.String , true ) ; throw new java.lang.IllegalStateException ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { return java.lang.UnsupportedOperationException ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Throwable java.lang.Throwable , java.lang.String java.lang.String , java.lang.String java.lang.String ) { for ( java.lang.StackTraceElement java.lang.StackTraceElement : java.lang.Throwable . java.lang.StackTraceElement[] ( ) ) { if ( java.lang.String . boolean ( java.lang.StackTraceElement . java.lang.String ( ) ) && java.lang.String . boolean ( java.lang.StackTraceElement . java.lang.String ( ) ) ) { return true ; } } return false ; }  <METHOD_END>
