<METHOD_START> @ Before public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; Assume . notLogging ( org.springframework.context.annotation.Log ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.AnnotationProcessorPerformanceTests.ResourceAnnotatedTestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; StopWatch org.springframework.context.annotation.StopWatch = new StopWatch ( ) ; org.springframework.context.annotation.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.TestBean . getSpouse ( ) ) ; } org.springframework.context.annotation.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.context.annotation.StopWatch . getTotalTimeMillis ( ) , org.springframework.context.annotation.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.AnnotationProcessorPerformanceTests.ResourceAnnotatedTestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RuntimeBeanReference ( STRING ) ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; StopWatch org.springframework.context.annotation.StopWatch = new StopWatch ( ) ; org.springframework.context.annotation.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.TestBean . getSpouse ( ) ) ; } org.springframework.context.annotation.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.context.annotation.StopWatch . getTotalTimeMillis ( ) , org.springframework.context.annotation.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.AnnotationProcessorPerformanceTests.AutowiredAnnotatedTestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; StopWatch org.springframework.context.annotation.StopWatch = new StopWatch ( ) ; org.springframework.context.annotation.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.TestBean . getSpouse ( ) ) ; } org.springframework.context.annotation.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.context.annotation.StopWatch . getTotalTimeMillis ( ) , org.springframework.context.annotation.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.context.annotation.GenericApplicationContext ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.AnnotationProcessorPerformanceTests.AutowiredAnnotatedTestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , new RuntimeBeanReference ( STRING ) ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; StopWatch org.springframework.context.annotation.StopWatch = new StopWatch ( ) ; org.springframework.context.annotation.StopWatch . start ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.TestBean . getSpouse ( ) ) ; } org.springframework.context.annotation.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.context.annotation.StopWatch . getTotalTimeMillis ( ) , org.springframework.context.annotation.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax.annotation.Resource @ Required public void void ( ITestBean org.springframework.context.annotation.ITestBean ) { super. setSpouse ( org.springframework.context.annotation.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Autowired @ Required public void void ( ITestBean org.springframework.context.annotation.ITestBean ) { super. setSpouse ( org.springframework.context.annotation.ITestBean ) ; }  <METHOD_END>
