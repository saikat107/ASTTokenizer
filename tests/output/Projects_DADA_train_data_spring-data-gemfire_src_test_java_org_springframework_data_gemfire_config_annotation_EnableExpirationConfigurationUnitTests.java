<METHOD_START> @ After public void void ( ) { if ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext != null ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected < K , V > void void ( ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes , Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> , V ... V[] ) { void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region<K,V> , V[] ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region<K,V> , V[] ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > void void ( ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes , Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> , V ... V[] ) { void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region<K,V> . getAttributes ( ) . getCustomEntryIdleTimeout ( ) , V[] ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > void void ( Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ) { assertThat ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getAttributes ( ) . getCustomEntryIdleTimeout ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > void void ( ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes , Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> , V ... V[] ) { void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region<K,V> . getAttributes ( ) . getCustomEntryTimeToLive ( ) , V[] ) ; }  <METHOD_END>
<METHOD_START> protected < K , V > void void ( Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ) { assertThat ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getAttributes ( ) . getCustomEntryTimeToLive ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < K , V > void void ( ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes , CustomExpiry < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> , V ... V[] ) { Region . Region < K , V > regionEntry = mockRegionEntry ( ArrayUtils . getFirst ( V[] ) ) ; void ( org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> . getExpiry ( regionEntry ) , org.springframework.data.gemfire.config.annotation.ExpirationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected < K , V > void void ( ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes , ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes ) { assertThat ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ( java.lang.String java.lang.String ) { return org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( java.lang.String , Region .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( int int , ExpirationActionType org.springframework.data.gemfire.config.annotation.ExpirationActionType ) { return org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( int , org.springframework.data.gemfire.config.annotation.ExpirationActionType . getExpirationAction ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( int int , ExpirationAction org.springframework.data.gemfire.config.annotation.ExpirationAction ) { return new ExpirationAttributes ( int , org.springframework.data.gemfire.config.annotation.ExpirationAction ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableExpirationConfigurationUnitTests.DefaultExpirationPolicyConfiguration .class ) ; ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes = org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( NUMBER , ExpirationActionType . INVALIDATE ) ; Region org.springframework.data.gemfire.config.annotation.Region = org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; Region org.springframework.data.gemfire.config.annotation.Region = org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.Region ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableExpirationConfigurationUnitTests.CustomExpirationPolicyConfiguration .class ) ; ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes = org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( NUMBER , ExpirationActionType . LOCAL_DESTROY ) ; Region org.springframework.data.gemfire.config.annotation.Region = org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; Region org.springframework.data.gemfire.config.annotation.Region = org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.Region ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableExpirationConfigurationUnitTests.RegionSpecificExpirationPolicyConfiguration .class ) ; ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes = org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( NUMBER , ExpirationActionType . INVALIDATE ) ; ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes = org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( NUMBER , ExpirationActionType . DESTROY ) ; Region org.springframework.data.gemfire.config.annotation.Region = org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; Region org.springframework.data.gemfire.config.annotation.Region = org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableExpirationConfigurationUnitTests.MixedExpirationPolicyConfiguration .class ) ; ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes = org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( NUMBER , ExpirationActionType . LOCAL_INVALIDATE ) ; ExpirationAttributes org.springframework.data.gemfire.config.annotation.ExpirationAttributes = org.springframework.data.gemfire.config.annotation.ExpirationAttributes ( NUMBER , ExpirationActionType . DESTROY ) ; Region org.springframework.data.gemfire.config.annotation.Region = org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; Region org.springframework.data.gemfire.config.annotation.Region = org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; void ( org.springframework.data.gemfire.config.annotation.ExpirationAttributes , org.springframework.data.gemfire.config.annotation.Region ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ( java.lang.String java.lang.String ) { Region < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> = mock ( Region .class ) ; when ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getFullPath ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> < CustomExpiry < K , V > > java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> < CustomExpiry < K , V > > ( null ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> < CustomExpiry < K , V > > java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> < CustomExpiry < K , V > > ( null ) ; AttributesMutator < K , V > org.springframework.data.gemfire.config.annotation.AttributesMutator<K,V> = mock ( AttributesMutator .class ) ; when ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getAttributesMutator ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.AttributesMutator<K,V> ) ; doAnswer ( new Answer < CustomExpiry < K , V > > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> . set ( org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ) ; return org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ; } } ) . when ( org.springframework.data.gemfire.config.annotation.AttributesMutator<K,V> ) . setCustomEntryIdleTimeout ( any ( CustomExpiry .class ) ) ; doAnswer ( new Answer < CustomExpiry < K , V > > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> . set ( org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ) ; return org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ; } } ) . when ( org.springframework.data.gemfire.config.annotation.AttributesMutator<K,V> ) . setCustomEntryTimeToLive ( any ( CustomExpiry .class ) ) ; RegionAttributes < K , V > org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> = mock ( RegionAttributes .class ) ; when ( org.springframework.data.gemfire.config.annotation.Region<K,V> . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getCustomEntryIdleTimeout ( ) ) . thenAnswer ( new Answer < CustomExpiry < K , V > > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { return java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> . get ( ) ; } } ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes<K,V> . getCustomEntryTimeToLive ( ) ) . thenAnswer ( new Answer < CustomExpiry < K , V > > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { return java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> . get ( ) ; } } ) ; return org.springframework.data.gemfire.config.annotation.Region<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> . set ( org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ) ; return org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { CustomExpiry < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> . set ( org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ) ; return org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { return java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> < K , V > org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V> ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { return java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.CustomExpiry<K,V>> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static < K , V > Region . Region < K , V > mockRegionEntry ( V V ) { Region . Region < K , V > mockRegionEntry = mock ( Region . Region .class ) ; when ( mockRegionEntry . getValue ( ) ) . thenReturn ( V ) ; return mockRegionEntry ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( ) { return org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( ) { return org.springframework.data.gemfire.config.annotation.Region<java.lang.Object,java.lang.Object> ( STRING ) ; }  <METHOD_END>
