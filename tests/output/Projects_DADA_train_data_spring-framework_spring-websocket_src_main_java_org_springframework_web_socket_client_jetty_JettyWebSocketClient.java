<METHOD_START> public void ( ) { this . org.eclipse.jetty.websocket.client.WebSocketClient = new org . org.eclipse . org.eclipse . org.eclipse . org.eclipse . org.eclipse ( ) ; }  <METHOD_END>
<METHOD_START> public void ( WebSocketClient org.springframework.web.socket.client.jetty.WebSocketClient ) { this . org.eclipse.jetty.websocket.client.WebSocketClient = org.springframework.web.socket.client.jetty.WebSocketClient ; }  <METHOD_END>
<METHOD_START> public void void ( AsyncListenableTaskExecutor org.springframework.web.socket.client.jetty.AsyncListenableTaskExecutor ) { this . org.springframework.web.socket.client.jetty.AsyncListenableTaskExecutor = org.springframework.web.socket.client.jetty.AsyncListenableTaskExecutor ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.client.jetty.AsyncListenableTaskExecutor org.springframework.web.socket.client.jetty.AsyncListenableTaskExecutor ( ) { return this . org.springframework.web.socket.client.jetty.AsyncListenableTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . org.eclipse.jetty.websocket.client.WebSocketClient . isStarted ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( ! boolean ( ) ) { try { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING ) ; } this . org.eclipse.jetty.websocket.client.WebSocketClient . start ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( boolean ( ) ) { try { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING ) ; } this . org.eclipse.jetty.websocket.client.WebSocketClient . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.client.jetty.ListenableFuture<org.springframework.web.socket.client.jetty.WebSocketSession> < WebSocketSession > org.springframework.web.socket.client.jetty.ListenableFuture<org.springframework.web.socket.client.jetty.WebSocketSession> ( WebSocketHandler org.springframework.web.socket.client.jetty.WebSocketHandler , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { UriComponents org.springframework.web.socket.client.jetty.UriComponents = UriComponentsBuilder . fromUriString ( java.lang.String ) . buildAndExpand ( java.lang.Object[] ) . encode ( ) ; return org.springframework.web.socket.client.jetty.ListenableFuture<org.springframework.web.socket.client.jetty.WebSocketSession> ( org.springframework.web.socket.client.jetty.WebSocketHandler , null , org.springframework.web.socket.client.jetty.UriComponents . toUri ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.client.jetty.ListenableFuture<org.springframework.web.socket.client.jetty.WebSocketSession> < WebSocketSession > org.springframework.web.socket.client.jetty.ListenableFuture<org.springframework.web.socket.client.jetty.WebSocketSession> ( WebSocketHandler org.springframework.web.socket.client.jetty.WebSocketHandler , HttpHeaders org.springframework.web.socket.client.jetty.HttpHeaders , final java.net.URI java.net.URI , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<org.springframework.web.socket.client.jetty.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.client.jetty.WebSocketExtension> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { final ClientUpgradeRequest org.springframework.web.socket.client.jetty.ClientUpgradeRequest = new ClientUpgradeRequest ( ) ; org.springframework.web.socket.client.jetty.ClientUpgradeRequest . setSubProtocols ( java.util.List<java.lang.String> ) ; for ( WebSocketExtension org.springframework.web.socket.client.jetty.WebSocketExtension : java.util.List<org.springframework.web.socket.client.jetty.WebSocketExtension> ) { org.springframework.web.socket.client.jetty.ClientUpgradeRequest . addExtensions ( new WebSocketToJettyExtensionConfigAdapter ( org.springframework.web.socket.client.jetty.WebSocketExtension ) ) ; } for ( java.lang.String java.lang.String : org.springframework.web.socket.client.jetty.HttpHeaders . keySet ( ) ) { org.springframework.web.socket.client.jetty.ClientUpgradeRequest . setHeader ( java.lang.String , org.springframework.web.socket.client.jetty.HttpHeaders . get ( java.lang.String ) ) ; } java.security.Principal java.security.Principal = java.security.Principal ( ) ; final JettyWebSocketSession org.springframework.web.socket.client.jetty.JettyWebSocketSession = new JettyWebSocketSession ( java.util.Map<java.lang.String,java.lang.Object> , java.security.Principal ) ; final JettyWebSocketHandlerAdapter org.springframework.web.socket.client.jetty.JettyWebSocketHandlerAdapter = new JettyWebSocketHandlerAdapter ( org.springframework.web.socket.client.jetty.WebSocketHandler , org.springframework.web.socket.client.jetty.JettyWebSocketSession ) ; java.util.concurrent.Callable<org.springframework.web.socket.client.jetty.WebSocketSession> < WebSocketSession > java.util.concurrent.Callable<org.springframework.web.socket.client.jetty.WebSocketSession> = new java.util.concurrent.Callable<org.springframework.web.socket.client.jetty.WebSocketSession> < WebSocketSession > ( ) { @ java.lang.Override public org.springframework.web.socket.client.jetty.WebSocketSession org.springframework.web.socket.client.jetty.WebSocketSession ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.socket.client.jetty.Session> < Session > java.util.concurrent.Future<org.springframework.web.socket.client.jetty.Session> = org.eclipse.jetty.websocket.client.WebSocketClient . connect ( org.springframework.web.socket.client.jetty.JettyWebSocketHandlerAdapter , java.net.URI , org.springframework.web.socket.client.jetty.ClientUpgradeRequest ) ; java.util.concurrent.Future<org.springframework.web.socket.client.jetty.Session> . get ( ) ; return org.springframework.web.socket.client.jetty.JettyWebSocketSession ; } } ; if ( this . org.springframework.web.socket.client.jetty.AsyncListenableTaskExecutor != null ) { return this . org.springframework.web.socket.client.jetty.AsyncListenableTaskExecutor . submitListenable ( java.util.concurrent.Callable<org.springframework.web.socket.client.jetty.WebSocketSession> ) ; } else { ListenableFutureTask < WebSocketSession > org.springframework.web.socket.client.jetty.ListenableFutureTask<org.springframework.web.socket.client.jetty.WebSocketSession> = new ListenableFutureTask <> ( java.util.concurrent.Callable<org.springframework.web.socket.client.jetty.WebSocketSession> ) ; org.springframework.web.socket.client.jetty.ListenableFutureTask<org.springframework.web.socket.client.jetty.WebSocketSession> . run ( ) ; return org.springframework.web.socket.client.jetty.ListenableFutureTask<org.springframework.web.socket.client.jetty.WebSocketSession> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.client.jetty.WebSocketSession org.springframework.web.socket.client.jetty.WebSocketSession ( ) java.lang.Exception { java.util.concurrent.Future<org.springframework.web.socket.client.jetty.Session> < Session > java.util.concurrent.Future<org.springframework.web.socket.client.jetty.Session> = org.eclipse.jetty.websocket.client.WebSocketClient . connect ( org.springframework.web.socket.client.jetty.JettyWebSocketHandlerAdapter , java.net.URI , org.springframework.web.socket.client.jetty.ClientUpgradeRequest ) ; java.util.concurrent.Future<org.springframework.web.socket.client.jetty.Session> . get ( ) ; return org.springframework.web.socket.client.jetty.JettyWebSocketSession ; }  <METHOD_END>
<METHOD_START> protected java.security.Principal java.security.Principal ( ) { return null ; }  <METHOD_END>
