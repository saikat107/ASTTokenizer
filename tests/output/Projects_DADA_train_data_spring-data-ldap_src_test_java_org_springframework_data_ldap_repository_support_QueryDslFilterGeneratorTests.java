<METHOD_START> @ Before public void void ( ) { ObjectDirectoryMapper org.springframework.data.ldap.repository.support.ObjectDirectoryMapper = new DefaultObjectDirectoryMapper ( ) ; org.springframework.data.ldap.repository.support.LdapSerializer = new LdapSerializer ( org.springframework.data.ldap.repository.support.ObjectDirectoryMapper , UnitTestPerson .class ) ; org.springframework.data.ldap.repository.support.QPerson = QPerson . person ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . eq ( STRING ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . eq ( STRING ) . and ( org.springframework.data.ldap.repository.support.QPerson . lastName . eq ( STRING ) ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . eq ( STRING ) . or ( org.springframework.data.ldap.repository.support.QPerson . lastName . eq ( STRING ) ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . eq ( STRING ) . and ( org.springframework.data.ldap.repository.support.QPerson . lastName . eq ( STRING ) . or ( org.springframework.data.ldap.repository.support.QPerson . lastName . eq ( STRING ) ) ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . eq ( STRING ) . not ( ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . like ( STRING ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . startsWith ( STRING ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . endsWith ( STRING ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . contains ( STRING ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . isNotNull ( ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> = org.springframework.data.ldap.repository.support.QPerson . fullName . isNull ( ) ; Filter org.springframework.data.ldap.repository.support.Filter = org.springframework.data.ldap.repository.support.LdapSerializer . handle ( org.springframework.data.ldap.repository.support.Expression<> ) ; assertThat ( org.springframework.data.ldap.repository.support.Filter . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
