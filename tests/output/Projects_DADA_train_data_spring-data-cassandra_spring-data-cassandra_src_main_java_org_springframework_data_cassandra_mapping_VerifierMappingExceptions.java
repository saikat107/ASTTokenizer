<METHOD_START> public void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> < MappingException > java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> ) { super( java.lang.String . java.lang.String ( STRING , org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getName ( ) ) ); Assert . notNull ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , STRING ) ; this . java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> = java.util.Collections . java.util.Collection<java.lang.Object> ( new java.util.LinkedList <> ( java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> ) ) ; this . java.lang.String = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getType ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> public void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , java.lang.String java.lang.String ) { super( java.lang.String ); Assert . notNull ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , STRING ) ; this . java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> = new java.util.LinkedList <> ( ) ; this . java.lang.String = org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getType ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void void ( MappingException org.springframework.data.cassandra.mapping.MappingException ) { Assert . notNull ( org.springframework.data.cassandra.mapping.MappingException , STRING ) ; java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> . add ( org.springframework.data.cassandra.mapping.MappingException ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> < MappingException > java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> ( ) { return java.util.Collections . java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> ( java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> . stream ( ) . map ( java.lang.Throwable :: java.lang.String ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; for ( MappingException org.springframework.data.cassandra.mapping.MappingException : java.util.Collection<org.springframework.data.cassandra.mapping.MappingException> ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.data.cassandra.mapping.MappingException . getMessage ( ) ) . append ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
