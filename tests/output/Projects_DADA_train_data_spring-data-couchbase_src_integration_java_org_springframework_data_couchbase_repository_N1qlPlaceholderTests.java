<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.couchbase.repository.CouchbaseRepositoryFactory = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) ; org.springframework.data.couchbase.repository.PartyRepository = org.springframework.data.couchbase.repository.CouchbaseRepositoryFactory . getRepository ( PartyRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; int int = NUMBER ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findAllWithNamedParams ( java.lang.String , java.lang.String , int ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . contains ( java.lang.String ) ) ; assertFalse ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . contains ( java.lang.String ) ) ; assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) >= int ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; int int = NUMBER ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findAllWithPositionalParams ( java.lang.String , java.lang.String , int ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . contains ( java.lang.String ) ) ; assertFalse ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . contains ( java.lang.String ) ) ; assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) >= int ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; int int = NUMBER ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findAllWithPositionalParamsAndQuotedNamedParams ( java.lang.String , java.lang.String , int ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assertTrue ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . contains ( java.lang.String ) ) ; assertFalse ( org.springframework.data.couchbase.repository.Party . getDescription ( ) . contains ( java.lang.String ) ) ; assertTrue ( org.springframework.data.couchbase.repository.Party . getAttendees ( ) >= int ) ; } }  <METHOD_END>
<METHOD_START> @ Query ( STRING + STRING ) java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> ( @ Param ( STRING ) java.lang.String java.lang.String , @ Param ( STRING ) java.lang.String java.lang.String , @ Param ( STRING ) long long );  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.couchbase.repository.CouchbaseRepositoryFactory . getRepository ( org.springframework.data.couchbase.repository.N1qlPlaceholderTests.BadRepository .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( java.lang.IllegalArgumentException . java.lang.String ( ) , STRING + STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
