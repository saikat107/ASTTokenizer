<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { void ( STRING , STRING ) ; InMemoryDirectoryServer org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( InMemoryDirectoryServer .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer . getListenPort ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { void ( STRING ) ; InMemoryDirectoryServer org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( InMemoryDirectoryServer .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer . getListenPort ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . register ( EmbeddedLdapAutoConfiguration .class , org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfigurationTests.LdapClientConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . refresh ( ) ; LDAPConnection org.springframework.boot.autoconfigure.ldap.embedded.LDAPConnection = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( LDAPConnection .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.LDAPConnection . getConnectedPort ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getEnvironment ( ) . getProperty ( STRING , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { void ( STRING , STRING , STRING ) ; InMemoryDirectoryServer org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( InMemoryDirectoryServer .class ) ; BindResult org.springframework.boot.autoconfigure.ldap.embedded.BindResult = org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer . bind ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.BindResult ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { void ( STRING ) ; InMemoryDirectoryServer org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( InMemoryDirectoryServer .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer . getBaseDNs ( ) ) . containsExactly ( new DN ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { void ( STRING ) ; InMemoryDirectoryServer org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( InMemoryDirectoryServer .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer . countEntriesBelow ( STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . register ( EmbeddedLdapAutoConfiguration .class , LdapAutoConfiguration .class , LdapDataAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBeanNamesForType ( LdapTemplate .class ) . length ) . isEqualTo ( NUMBER ) ; LdapTemplate org.springframework.boot.autoconfigure.ldap.embedded.LdapTemplate = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( LdapTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.LdapTemplate . list ( STRING ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { void ( STRING , STRING ) ; InMemoryDirectoryServer org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( InMemoryDirectoryServer .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer . getSchema ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { void ( STRING , STRING , STRING ) ; InMemoryDirectoryServer org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer = this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . getBean ( InMemoryDirectoryServer .class ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer . getSchema ( ) . getObjectClass ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.ldap.embedded.InMemoryDirectoryServer . getSchema ( ) . getAttributeType ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . register ( EmbeddedLdapAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.ldap.embedded.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.ldap.embedded.LDAPConnection org.springframework.boot.autoconfigure.ldap.embedded.LDAPConnection ( @ Value ( STRING ) int int )				throws org.springframework.boot.autoconfigure.ldap.embedded.LDAPException { LDAPConnection org.springframework.boot.autoconfigure.ldap.embedded.LDAPConnection = new LDAPConnection ( ) ; org.springframework.boot.autoconfigure.ldap.embedded.LDAPConnection . connect ( STRING , int ) ; return org.springframework.boot.autoconfigure.ldap.embedded.LDAPConnection ; }  <METHOD_END>
