<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.scripting.config.ParserContext , BeanDefinitionBuilder org.springframework.integration.scripting.config.BeanDefinitionBuilder ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = DomUtils . getTextValue ( org.w3c.dom.Element ) ; if ( StringUtils . hasText ( java.lang.String ) == StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.scripting.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; return; } java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) && java.util.List<org.w3c.dom.Element> . int ( ) > NUMBER ) { org.springframework.integration.scripting.config.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; return; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.scripting.config.BeanDefinitionBuilder . addConstructorArgValue ( this . java.lang.Object ( org.w3c.dom.Element , org.springframework.integration.scripting.config.ParserContext . getReaderContext ( ) , java.lang.String ) ) ; } else { org.springframework.integration.scripting.config.BeanDefinitionBuilder . addConstructorArgValue ( new StaticScriptSource ( java.lang.String ) ) ; } BeanMetadataElement org.springframework.integration.scripting.config.BeanMetadataElement = null ; if ( ! StringUtils . hasText ( java.lang.String ) ) { BeanDefinitionBuilder org.springframework.integration.scripting.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DefaultScriptVariableGenerator .class ) ; ManagedMap < java.lang.String , java.lang.Object > org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> = org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> ( org.w3c.dom.Element , org.springframework.integration.scripting.config.ParserContext , java.util.List<org.w3c.dom.Element> ) ; if ( ! CollectionUtils . isEmpty ( org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> ) ) { org.springframework.integration.scripting.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> ) ; } org.springframework.integration.scripting.config.BeanMetadataElement = org.springframework.integration.scripting.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; } else { org.springframework.integration.scripting.config.BeanMetadataElement = new RuntimeBeanReference ( java.lang.String ) ; } org.springframework.integration.scripting.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.scripting.config.BeanMetadataElement ) ; void ( org.springframework.integration.scripting.config.BeanDefinitionBuilder , org.w3c.dom.Element , org.springframework.integration.scripting.config.ParserContext ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinitionBuilder org.springframework.integration.scripting.config.BeanDefinitionBuilder , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.scripting.config.ParserContext ) {	}  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( org.w3c.dom.Element org.w3c.dom.Element , XmlReaderContext org.springframework.integration.scripting.config.XmlReaderContext , java.lang.String java.lang.String ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = RefreshableResourceScriptSource .class . java.lang.String ( ) ; BeanDefinitionBuilder org.springframework.integration.scripting.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( java.lang.String ) ; org.springframework.integration.scripting.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.scripting.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; } else { org.springframework.integration.scripting.config.BeanDefinitionBuilder . addConstructorArgValue ( - NUMBER ) ; } return org.springframework.integration.scripting.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> ( final org.w3c.dom.Element org.w3c.dom.Element , final ParserContext org.springframework.integration.scripting.config.ParserContext , java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> ) { @ java.lang.SuppressWarnings ( STRING ) ManagedMap < java.lang.String , java.lang.Object > org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> = new ManagedMap < java.lang.String , java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( this . containsKey ( java.lang.String ) ) { org.springframework.integration.scripting.config.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String , org.w3c.dom.Element ) ; } return super. put ( java.lang.String , java.lang.Object ) ; } } ; for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) == StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.scripting.config.ParserContext . getReaderContext ( ) . error ( STRING + STRING + IntegrationNamespaceUtils . createElementDescription ( org.w3c.dom.Element ) + STRING , org.w3c.dom.Element ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , java.lang.String ) ; } else { org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , new RuntimeBeanReference ( java.lang.String ) ) ; } } java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; if ( java.lang.String[] . int != NUMBER ) { org.springframework.integration.scripting.config.ParserContext . getReaderContext ( ) . error ( STRING + STRING + java.lang.String + STRING , org.w3c.dom.Element ) ; } java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( STRING ) ) ; org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , new RuntimeBeanReference ( java.lang.String ) ) ; } else { org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , java.lang.String ) ; } } } return org.springframework.integration.scripting.config.ManagedMap<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( this . containsKey ( java.lang.String ) ) { org.springframework.integration.scripting.config.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String , org.w3c.dom.Element ) ; } return super. put ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
