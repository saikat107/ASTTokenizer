<METHOD_START> public void ( ) { this . org.springframework.web.socket.client.standard.WebSocketContainer = ContainerProvider . getWebSocketContainer ( ) ; }  <METHOD_END>
<METHOD_START> public void ( WebSocketContainer org.springframework.web.socket.client.standard.WebSocketContainer ) { Assert . notNull ( org.springframework.web.socket.client.standard.WebSocketContainer , STRING ) ; this . org.springframework.web.socket.client.standard.WebSocketContainer = org.springframework.web.socket.client.standard.WebSocketContainer ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( AsyncListenableTaskExecutor org.springframework.web.socket.client.standard.AsyncListenableTaskExecutor ) { this . org.springframework.web.socket.client.standard.AsyncListenableTaskExecutor = org.springframework.web.socket.client.standard.AsyncListenableTaskExecutor ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.client.standard.AsyncListenableTaskExecutor org.springframework.web.socket.client.standard.AsyncListenableTaskExecutor ( ) { return this . org.springframework.web.socket.client.standard.AsyncListenableTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.client.standard.ListenableFuture<org.springframework.web.socket.client.standard.WebSocketSession> < WebSocketSession > org.springframework.web.socket.client.standard.ListenableFuture<org.springframework.web.socket.client.standard.WebSocketSession> ( WebSocketHandler org.springframework.web.socket.client.standard.WebSocketHandler , HttpHeaders org.springframework.web.socket.client.standard.HttpHeaders , final java.net.URI java.net.URI , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.List<org.springframework.web.socket.client.standard.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.client.standard.WebSocketExtension> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { int int = int ( java.net.URI ) ; java.net.InetSocketAddress java.net.InetSocketAddress = new java.net.InetSocketAddress ( java.net.InetAddress ( ) , int ) ; java.net.InetSocketAddress java.net.InetSocketAddress = new java.net.InetSocketAddress ( java.net.URI . java.lang.String ( ) , int ) ; final StandardWebSocketSession org.springframework.web.socket.client.standard.StandardWebSocketSession = new StandardWebSocketSession ( org.springframework.web.socket.client.standard.HttpHeaders , java.util.Map<java.lang.String,java.lang.Object> , java.net.InetSocketAddress , java.net.InetSocketAddress ) ; final ClientEndpointConfig org.springframework.web.socket.client.standard.ClientEndpointConfig = ClientEndpointConfig . Builder . create ( ) . configurator ( new org.springframework.web.socket.client.standard.StandardWebSocketClient.StandardWebSocketClientConfigurator ( org.springframework.web.socket.client.standard.HttpHeaders ) ) . preferredSubprotocols ( java.util.List<java.lang.String> ) . extensions ( java.util.List<org.springframework.web.socket.client.standard.Extension> ( java.util.List<org.springframework.web.socket.client.standard.WebSocketExtension> ) ) . build ( ) ; org.springframework.web.socket.client.standard.ClientEndpointConfig . getUserProperties ( ) . putAll ( java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; final Endpoint org.springframework.web.socket.client.standard.Endpoint = new StandardWebSocketHandlerAdapter ( org.springframework.web.socket.client.standard.WebSocketHandler , org.springframework.web.socket.client.standard.StandardWebSocketSession ) ; java.util.concurrent.Callable<org.springframework.web.socket.client.standard.WebSocketSession> < WebSocketSession > java.util.concurrent.Callable<org.springframework.web.socket.client.standard.WebSocketSession> = new java.util.concurrent.Callable<org.springframework.web.socket.client.standard.WebSocketSession> < WebSocketSession > ( ) { @ java.lang.Override public org.springframework.web.socket.client.standard.WebSocketSession org.springframework.web.socket.client.standard.WebSocketSession ( ) java.lang.Exception { org.springframework.web.socket.client.standard.WebSocketContainer . connectToServer ( org.springframework.web.socket.client.standard.Endpoint , org.springframework.web.socket.client.standard.ClientEndpointConfig , java.net.URI ) ; return org.springframework.web.socket.client.standard.StandardWebSocketSession ; } } ; if ( this . org.springframework.web.socket.client.standard.AsyncListenableTaskExecutor != null ) { return this . org.springframework.web.socket.client.standard.AsyncListenableTaskExecutor . submitListenable ( java.util.concurrent.Callable<org.springframework.web.socket.client.standard.WebSocketSession> ) ; } else { ListenableFutureTask < WebSocketSession > org.springframework.web.socket.client.standard.ListenableFutureTask<org.springframework.web.socket.client.standard.WebSocketSession> = new ListenableFutureTask <> ( java.util.concurrent.Callable<org.springframework.web.socket.client.standard.WebSocketSession> ) ; org.springframework.web.socket.client.standard.ListenableFutureTask<org.springframework.web.socket.client.standard.WebSocketSession> . run ( ) ; return org.springframework.web.socket.client.standard.ListenableFutureTask<org.springframework.web.socket.client.standard.WebSocketSession> ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.client.standard.WebSocketSession org.springframework.web.socket.client.standard.WebSocketSession ( ) java.lang.Exception { org.springframework.web.socket.client.standard.WebSocketContainer . connectToServer ( org.springframework.web.socket.client.standard.Endpoint , org.springframework.web.socket.client.standard.ClientEndpointConfig , java.net.URI ) ; return org.springframework.web.socket.client.standard.StandardWebSocketSession ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.web.socket.client.standard.Extension> < Extension > java.util.List<org.springframework.web.socket.client.standard.Extension> ( java.util.List<org.springframework.web.socket.client.standard.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.client.standard.WebSocketExtension> ) { java.util.List<org.springframework.web.socket.client.standard.Extension> < Extension > java.util.List<org.springframework.web.socket.client.standard.Extension> = new java.util.ArrayList<org.springframework.web.socket.client.standard.Extension> <> ( ) ; for ( WebSocketExtension org.springframework.web.socket.client.standard.WebSocketExtension : java.util.List<org.springframework.web.socket.client.standard.WebSocketExtension> ) { java.util.List<org.springframework.web.socket.client.standard.Extension> . add ( new WebSocketToStandardExtensionAdapter ( org.springframework.web.socket.client.standard.WebSocketExtension ) ) ; } return java.util.List<org.springframework.web.socket.client.standard.Extension> ; }  <METHOD_END>
<METHOD_START> private java.net.InetAddress java.net.InetAddress ( ) { try { return java.net.InetAddress . java.net.InetAddress ( ) ; } catch ( java.net.UnknownHostException java.net.UnknownHostException ) { return java.net.InetAddress . java.net.InetAddress ( ) ; } }  <METHOD_END>
<METHOD_START> private int int ( java.net.URI java.net.URI ) { if ( java.net.URI . int ( ) == - NUMBER ) { java.lang.String java.lang.String = java.net.URI . java.lang.String ( ) . java.lang.String ( java.util.Locale . java.util.Locale ) ; return ( STRING . boolean ( java.lang.String ) ? NUMBER : NUMBER ) ; } return java.net.URI . int ( ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpHeaders org.springframework.web.socket.client.standard.HttpHeaders ) { this . org.springframework.web.socket.client.standard.HttpHeaders = org.springframework.web.socket.client.standard.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> . void ( this . org.springframework.web.socket.client.standard.HttpHeaders ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HandshakeResponse org.springframework.web.socket.client.standard.HandshakeResponse ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.socket.client.standard.HandshakeResponse . getHeaders ( ) ) ; } }  <METHOD_END>
