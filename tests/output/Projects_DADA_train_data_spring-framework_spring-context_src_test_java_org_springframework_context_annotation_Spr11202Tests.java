<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.Spr11202Tests.Wrapper .class ) ; assertEquals ( STRING , org.springframework.context.annotation.ApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.Spr11202Tests.Config .class ) ; assertEquals ( STRING , org.springframework.context.annotation.ApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { return new java.lang.String [] { org.springframework.context.annotation.Spr11202Tests.Config .class . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.Spr11202Tests.FooFactoryBean org.springframework.context.annotation.Spr11202Tests.FooFactoryBean ( ) { return new org.springframework.context.annotation.Spr11202Tests.FooFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) java.lang.Exception { java.lang.String java.lang.String = org.springframework.context.annotation.Spr11202Tests.FooFactoryBean ( ) . org.springframework.context.annotation.Spr11202Tests.Foo ( ) . java.lang.String ( ) ; Assert . state ( java.lang.String != null , STRING ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean @ Conditional ( org.springframework.context.annotation.Spr11202Tests.NoBarCondition .class ) public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.context.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { if ( org.springframework.context.annotation.ConditionContext . getBeanFactory ( ) . getBeanNamesForAnnotation ( org.springframework.context.annotation.Spr11202Tests.Bar .class ) . length > NUMBER ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.Spr11202Tests.Foo org.springframework.context.annotation.Spr11202Tests.Foo ( ) java.lang.Exception { return org.springframework.context.annotation.Spr11202Tests.Foo ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.context.annotation.Spr11202Tests.Foo .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . org.springframework.context.annotation.Spr11202Tests.Foo . java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
