<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.WebRequest = new ServletWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; this . org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler = new org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests.ApplicationExceptionHandler ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.DefaultHandlerExceptionResolver = new DefaultHandlerExceptionResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler> < ResponseEntityExceptionHandler > java.lang.Class<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler> = ResponseEntityExceptionHandler .class ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler> . getMethod ( STRING , java.lang.Exception .class , WebRequest .class ) ; ExceptionHandler org.springframework.web.servlet.mvc.method.annotation.ExceptionHandler = java.lang.reflect.Method . T ( ExceptionHandler .class ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.Arrays . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandler . value ( ) ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : DefaultHandlerExceptionResolver .class . java.lang.reflect.Method[] ( ) ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && ( java.lang.Class<?>[] . int == NUMBER ) ) { java.lang.String java.lang.String = java.lang.Class<?>[] [ NUMBER ] . java.lang.String ( ) ; assertTrue ( STRING + java.lang.String , java.util.List<java.lang.Class<?>> . boolean ( java.lang.Class<?>[] [ NUMBER ] ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; java.lang.Exception java.lang.Exception = new HttpRequestMethodNotSupportedException ( STRING , java.util.List<java.lang.String> ) ; ResponseEntity < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> = org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; assertEquals ( java.util.EnumSet . java.util.EnumSet ( HttpMethod . POST , HttpMethod . DELETE ) , org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> . getHeaders ( ) . getAllow ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> < MediaType > java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> = java.util.Arrays . java.util.List ( MediaType . APPLICATION_ATOM_XML , MediaType . APPLICATION_XML ) ; java.lang.Exception java.lang.Exception = new HttpMediaTypeNotSupportedException ( MediaType . APPLICATION_JSON , java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> ) ; ResponseEntity < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> = org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; assertEquals ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.MediaType> , org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> . getHeaders ( ) . getAccept ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new HttpMediaTypeNotAcceptableException ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; java.lang.Exception java.lang.Exception = new MissingPathVariableException ( STRING , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new MissingServletRequestParameterException ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new ServletRequestBindingException ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new ConversionNotSupportedException ( new java.lang.Object ( ) , java.lang.Object .class , null ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new TypeMismatchException ( STRING , java.lang.String .class ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new HttpMessageNotReadableException ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new HttpMessageNotWritableException ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = Mockito . mock ( MethodArgumentNotValidException .class ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new MissingServletRequestPartException ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new BindException ( new java.lang.Object ( ) , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServletServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest = new ServletServerHttpRequest ( new MockHttpServletRequest ( STRING , STRING ) ) ; java.lang.Exception java.lang.Exception = new NoHandlerFoundException ( org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getMethod ( ) . toString ( ) , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getServletRequest ( ) . getRequestURI ( ) , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest . getHeaders ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( new AsyncRequestTimeoutException ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandlerTests.ApplicationExceptionHandler .class ) ; org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext . refresh ( ) ; ExceptionHandlerExceptionResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver = new ExceptionHandlerExceptionResolver ( ) ; org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.StaticWebApplicationContext ) ; org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; ServletRequestBindingException org.springframework.web.servlet.mvc.method.annotation.ServletRequestBindingException = new ServletRequestBindingException ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.method.annotation.ServletRequestBindingException ) ; assertEquals ( NUMBER , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( java.lang.Exception java.lang.Exception ) { ResponseEntity < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> = this . org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler . handleException ( java.lang.Exception , this . org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; if ( HttpStatus . INTERNAL_SERVER_ERROR . equals ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> . getStatusCode ( ) ) ) { assertSame ( java.lang.Exception , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( STRING ) ) ; } this . org.springframework.web.servlet.mvc.method.annotation.DefaultHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , null , java.lang.Exception ) ; assertEquals ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getStatus ( ) , org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> . getStatusCode ( ) . value ( ) ) ; return org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> < java.lang.Object > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<java.lang.Object> ( ServletRequestBindingException org.springframework.web.servlet.mvc.method.annotation.ServletRequestBindingException , HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus , WebRequest org.springframework.web.servlet.mvc.method.annotation.WebRequest ) { org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . set ( STRING , STRING ) ; return handleExceptionInternal ( org.springframework.web.servlet.mvc.method.annotation.ServletRequestBindingException , STRING , org.springframework.web.servlet.mvc.method.annotation.HttpHeaders , org.springframework.web.servlet.mvc.method.annotation.HttpStatus , org.springframework.web.servlet.mvc.method.annotation.WebRequest ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void void ( java.lang.String java.lang.String ) {	}  <METHOD_END>
