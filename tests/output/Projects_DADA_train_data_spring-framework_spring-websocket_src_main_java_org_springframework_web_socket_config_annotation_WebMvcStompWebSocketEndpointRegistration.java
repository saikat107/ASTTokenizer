<METHOD_START> public void ( java.lang.String [] java.lang.String[] , WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler , TaskScheduler org.springframework.web.socket.config.annotation.TaskScheduler ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; Assert . notNull ( org.springframework.web.socket.config.annotation.WebSocketHandler , STRING ) ; this . java.lang.String[] = java.lang.String[] ; this . org.springframework.web.socket.config.annotation.WebSocketHandler = org.springframework.web.socket.config.annotation.WebSocketHandler ; this . org.springframework.web.socket.config.annotation.TaskScheduler = org.springframework.web.socket.config.annotation.TaskScheduler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration ( HandshakeHandler org.springframework.web.socket.config.annotation.HandshakeHandler ) { Assert . notNull ( org.springframework.web.socket.config.annotation.HandshakeHandler , STRING ) ; this . org.springframework.web.socket.config.annotation.HandshakeHandler = org.springframework.web.socket.config.annotation.HandshakeHandler ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration ( HandshakeInterceptor ... org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) { if ( ! ObjectUtils . isEmpty ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) { this . java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . addAll ( java.util.Arrays . java.util.List ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration org.springframework.web.socket.config.annotation.StompWebSocketEndpointRegistration ( java.lang.String ... java.lang.String[] ) { this . java.util.List<java.lang.String> . void ( ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { this . java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.config.annotation.SockJsServiceRegistration org.springframework.web.socket.config.annotation.SockJsServiceRegistration ( ) { this . org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.StompSockJsServiceRegistration = new org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.StompSockJsServiceRegistration ( this . org.springframework.web.socket.config.annotation.TaskScheduler ) ; HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] = org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ( ) ; if ( interceptors . length > NUMBER ) { this . org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.StompSockJsServiceRegistration . setInterceptors ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ; } if ( this . org.springframework.web.socket.config.annotation.HandshakeHandler != null ) { WebSocketTransportHandler org.springframework.web.socket.config.annotation.WebSocketTransportHandler = new WebSocketTransportHandler ( this . org.springframework.web.socket.config.annotation.HandshakeHandler ) ; this . org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.StompSockJsServiceRegistration . setTransportHandlerOverrides ( org.springframework.web.socket.config.annotation.WebSocketTransportHandler ) ; } if ( ! this . java.util.List<java.lang.String> . boolean ( ) ) { this . org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.StompSockJsServiceRegistration . setAllowedOrigins ( this . java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ this . java.util.List<java.lang.String> . int ( ) ] ) ) ; } return this . org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.StompSockJsServiceRegistration ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.config.annotation.HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ( ) { java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> = new java.util.ArrayList<org.springframework.web.socket.config.annotation.HandshakeInterceptor> <> ( ) ; java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . addAll ( this . java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> ) ; java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . add ( new OriginHandshakeInterceptor ( this . java.util.List<java.lang.String> ) ) ; return java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . toArray ( new HandshakeInterceptor [ java.util.List<org.springframework.web.socket.config.annotation.HandshakeInterceptor> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> ( ) { MultiValueMap < HttpRequestHandler , java.lang.String > org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> = new LinkedMultiValueMap <> ( ) ; if ( this . org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.StompSockJsServiceRegistration != null ) { SockJsService org.springframework.web.socket.config.annotation.SockJsService = this . org.springframework.web.socket.config.annotation.WebMvcStompWebSocketEndpointRegistration.StompSockJsServiceRegistration . org.springframework.web.socket.config.annotation.SockJsService ( ) ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { java.lang.String java.lang.String = java.lang.String . boolean ( STRING ) ? java.lang.String + STRING : java.lang.String + STRING ; SockJsHttpRequestHandler org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler = new SockJsHttpRequestHandler ( org.springframework.web.socket.config.annotation.SockJsService , this . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . add ( org.springframework.web.socket.config.annotation.SockJsHttpRequestHandler , java.lang.String ) ; } } else { for ( java.lang.String java.lang.String : this . java.lang.String[] ) { WebSocketHttpRequestHandler org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler ; if ( this . org.springframework.web.socket.config.annotation.HandshakeHandler != null ) { org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler = new WebSocketHttpRequestHandler ( this . org.springframework.web.socket.config.annotation.WebSocketHandler , this . org.springframework.web.socket.config.annotation.HandshakeHandler ) ; } else { org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler = new WebSocketHttpRequestHandler ( this . org.springframework.web.socket.config.annotation.WebSocketHandler ) ; } HandshakeInterceptor [] org.springframework.web.socket.config.annotation.HandshakeInterceptor[] = org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ( ) ; if ( interceptors . length > NUMBER ) { org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler . setHandshakeInterceptors ( java.util.Arrays . java.util.List ( org.springframework.web.socket.config.annotation.HandshakeInterceptor[] ) ) ; } org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> . add ( org.springframework.web.socket.config.annotation.WebSocketHttpRequestHandler , java.lang.String ) ; } } return org.springframework.web.socket.config.annotation.MultiValueMap<org.springframework.web.socket.config.annotation.HttpRequestHandler,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.config.annotation.TaskScheduler ) { super( org.springframework.web.socket.config.annotation.TaskScheduler ); }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.config.annotation.SockJsService org.springframework.web.socket.config.annotation.SockJsService ( ) { return super. getSockJsService ( ) ; }  <METHOD_END>
