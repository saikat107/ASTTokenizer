<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newBuilder ( ) . when ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newBuilder ( ) . when ( ( Document ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newBuilder ( ) . when ( ( Criteria ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newBuilder ( ) . when ( STRING ) . then ( newBuilder ( ) . when ( STRING ) . then ( STRING ) ) . otherwise ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cond org.springframework.data.mongodb.core.aggregation.Cond = ConditionalOperators . when ( STRING ) . thenValueOf ( STRING ) . otherwise ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Cond . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cond org.springframework.data.mongodb.core.aggregation.Cond = ConditionalOperators . when ( Criteria . where ( STRING ) . gte ( NUMBER ) ) . thenValueOf ( STRING ) . otherwise ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Cond . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cond org.springframework.data.mongodb.core.aggregation.Cond = ConditionalOperators . when ( Criteria . where ( STRING ) . gte ( NUMBER ) . andOperator ( Criteria . where ( STRING ) . is ( NUMBER ) , Criteria . where ( STRING ) . lt ( NUMBER ) ) ) . thenValueOf ( STRING ) . otherwiseValueOf ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Cond . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( org.springframework.data.mongodb.core.aggregation.Document , new Document ( STRING , java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.aggregation.Document , org.springframework.data.mongodb.core.aggregation.Document ) ) ) ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.mongodb.core.aggregation.Criteria = Criteria . where ( STRING ) . gte ( NUMBER ) . and ( STRING ) . and ( STRING ) . is ( NUMBER ) ; Cond org.springframework.data.mongodb.core.aggregation.Cond = ConditionalOperators . when ( org.springframework.data.mongodb.core.aggregation.Criteria ) . thenValueOf ( STRING ) . otherwise ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Cond . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.aggregation.Document , org.springframework.data.mongodb.core.aggregation.Document ) ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cond org.springframework.data.mongodb.core.aggregation.Cond = ConditionalOperators . when ( Criteria . where ( STRING ) . gte ( NUMBER ) ) . thenValueOf ( newBuilder ( ) . when ( Criteria . where ( STRING ) . gte ( NUMBER ) ) . then ( STRING ) . otherwise ( STRING ) ) . otherwise ( newBuilder ( ) . when ( Criteria . where ( STRING ) . lt ( NUMBER ) ) . then ( STRING ) . otherwise ( STRING ) ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Cond . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = new Document ( ) . append ( STRING , new Document ( STRING , java.util.Arrays .< java.lang.Object > java.util.List<java.lang.Object> ( STRING , NUMBER ) ) ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , org.springframework.data.mongodb.core.aggregation.Document ) ) ; }  <METHOD_END>
