<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.repository.query.MongoMappingContext = new MongoMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.SampleRepository .class , STRING ) ; MongoEntityMetadata < ? > org.springframework.data.mongodb.repository.query.MongoEntityMetadata<?> = org.springframework.data.mongodb.repository.query.MongoQueryMethod . getEntityInformation ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoEntityMetadata<> . getJavaType ( ) , is ( typeCompatibleWith ( Address .class ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoEntityMetadata<> . getCollectionName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.SampleRepository2 .class , STRING ) ; MongoEntityMetadata < ? > org.springframework.data.mongodb.repository.query.MongoEntityMetadata<?> = org.springframework.data.mongodb.repository.query.MongoQueryMethod . getEntityInformation ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoEntityMetadata<> . getJavaType ( ) , is ( typeCompatibleWith ( Person .class ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoEntityMetadata<> . getCollectionName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING , Point .class , Distance .class , Pageable .class ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isGeoNearQuery ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isPageQuery ( ) , is ( true ) ) ; org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING , java.lang.String .class , Point .class ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isGeoNearQuery ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isPageQuery ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getEntityInformation ( ) . getJavaType ( ) , is ( typeCompatibleWith ( User .class ) ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING , java.lang.String .class , Point .class ) . isGeoNearQuery ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING , java.lang.String .class , Point .class ) . isGeoNearQuery ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING , java.lang.String .class , Point .class ) . isGeoNearQuery ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING , Point .class , Distance .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Point .class ) ; new MongoQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class ) , new SpelAwareProxyProjectionFactory ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING , Point .class , Distance .class , Pageable .class ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isPageQuery ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isCollectionQuery ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.SampleRepository2 .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) . hasValues ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) . getMaxTimeMsec ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) . getMaxTimeMsec ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) . getMaxScan ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) . getComment ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) . getSnapshot ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) . getFlags ( ) , containsInAnyOrder ( org . springframework . data . mongodb . core . query . Meta . CursorOption . NO_TIMEOUT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) . getFlags ( ) , containsInAnyOrder ( org . springframework . data . mongodb . core . query . Meta . CursorOption . NO_TIMEOUT , org . springframework . data . mongodb . core . query . Meta . CursorOption . SLAVE_OK ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ( org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.PersonRepository .class , STRING , java.lang.String .class ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getEntityInformation ( ) . getJavaType ( ) , is ( typeCompatibleWith ( User .class ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; ProjectionFactory org.springframework.data.mongodb.repository.query.ProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; return new MongoQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( java.lang.Class<> ) , org.springframework.data.mongodb.repository.query.ProjectionFactory , org.springframework.data.mongodb.repository.query.MongoMappingContext ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoPage<org.springframework.data.mongodb.repository.query.User> < User > org.springframework.data.mongodb.repository.query.GeoPage<org.springframework.data.mongodb.repository.query.User> ( Point org.springframework.data.mongodb.repository.query.Point , Distance org.springframework.data.mongodb.repository.query.Distance );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoPage<org.springframework.data.mongodb.repository.query.User> < User > org.springframework.data.mongodb.repository.query.GeoPage<org.springframework.data.mongodb.repository.query.User> ( Point org.springframework.data.mongodb.repository.query.Point , Distance org.springframework.data.mongodb.repository.query.Distance , Pageable org.springframework.data.mongodb.repository.query.Pageable );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.User> < User > org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.User> ( java.lang.String java.lang.String , Point org.springframework.data.mongodb.repository.query.Point );  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.User> < User > org.springframework.data.mongodb.repository.query.GeoResults<org.springframework.data.mongodb.repository.query.User> ( java.lang.String java.lang.String , Point org.springframework.data.mongodb.repository.query.Point );  <METHOD_END>
<METHOD_START> java.util.Collection<org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.User>> < GeoResult < User > > java.util.Collection<org.springframework.data.mongodb.repository.query.GeoResult<org.springframework.data.mongodb.repository.query.User>> ( java.lang.String java.lang.String , Point org.springframework.data.mongodb.repository.query.Point );  <METHOD_END>
<METHOD_START> @ Meta java.util.List<org.springframework.data.mongodb.repository.query.User> < User > java.util.List<org.springframework.data.mongodb.repository.query.User> ( )  <METHOD_END>
<METHOD_START> @ Meta ( maxExecutionTimeMs = NUMBER ) java.util.List<org.springframework.data.mongodb.repository.query.User> < User > java.util.List<org.springframework.data.mongodb.repository.query.User> ( )  <METHOD_END>
<METHOD_START> @ Meta ( maxExecutionTimeMs = NUMBER ) java.util.List<org.springframework.data.mongodb.repository.query.User> < User > java.util.List<org.springframework.data.mongodb.repository.query.User> ( )  <METHOD_END>
<METHOD_START> @ Meta ( maxScanDocuments = NUMBER ) java.util.List<org.springframework.data.mongodb.repository.query.User> < User > java.util.List<org.springframework.data.mongodb.repository.query.User> ( )  <METHOD_END>
<METHOD_START> @ Meta ( comment = STRING ) java.util.List<org.springframework.data.mongodb.repository.query.User> < User > java.util.List<org.springframework.data.mongodb.repository.query.User> ( )  <METHOD_END>
<METHOD_START> @ Meta ( snapshot = true ) java.util.List<org.springframework.data.mongodb.repository.query.User> < User > java.util.List<org.springframework.data.mongodb.repository.query.User> ( )  <METHOD_END>
<METHOD_START> @ Meta ( flags = { org . springframework . data . mongodb . core . query . Meta . CursorOption . NO_TIMEOUT } ) java.util.List<org.springframework.data.mongodb.repository.query.User> < User > java.util.List<org.springframework.data.mongodb.repository.query.User> ( )  <METHOD_END>
<METHOD_START> @ Meta ( flags = { org . springframework . data . mongodb . core . query . Meta . CursorOption . NO_TIMEOUT , org . springframework . data . mongodb . core . query . Meta . CursorOption . SLAVE_OK } ) java.util.List<org.springframework.data.mongodb.repository.query.User> < User > java.util.List<org.springframework.data.mongodb.repository.query.User> ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Address> < Address > java.util.List<org.springframework.data.mongodb.repository.query.Address> ( )  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.Customer org.springframework.data.mongodb.repository.query.MongoQueryMethodUnitTests.Customer ( )  <METHOD_END>
