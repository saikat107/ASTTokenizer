<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < A extends java.lang.annotation.Annotation > A A ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.Class<A> < A > java.lang.Class<A> ) { if ( java.lang.Class<A> . boolean ( java.lang.annotation.Annotation ) ) { return A ( ( A ) java.lang.annotation.Annotation ) ; } java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; try { return A ( java.lang.Class<> . A ( java.lang.Class<A> ) , java.lang.Class<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Class<> , java.lang.Throwable ) ; } return null ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > A A ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { try { A A = java.lang.reflect.AnnotatedElement . A ( java.lang.Class<A> ) ; if ( A == null ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) ) { A = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . A ( java.lang.Class<A> ) ; if ( A != null ) { break; } } } return A ( A , java.lang.reflect.AnnotatedElement ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } return null ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > A A ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<A> < A > java.lang.Class<A> ) { java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; return A ( ( java.lang.reflect.AnnotatedElement ) java.lang.reflect.Method , java.lang.Class<A> ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { try { return java.lang.annotation.Annotation[] ( java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) , java.lang.reflect.AnnotatedElement ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } return null ; }  <METHOD_END>
<METHOD_START> public static java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( java.lang.reflect.Method java.lang.reflect.Method ) { try { return java.lang.annotation.Annotation[] ( BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) . getAnnotations ( ) , java.lang.reflect.Method ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.reflect.Method , java.lang.Throwable ) ; } return null ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { return java.util.Set<A> ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , null ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.util.Set<A> < A > java.util.Set<A> = java.util.Set<A> ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , java.lang.Class<> ) ; if ( ! java.util.Set<A> . boolean ( ) ) { return java.util.Set<A> ; } if ( java.lang.reflect.AnnotatedElement instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( java.lang.Class<?> < ? > ) java.lang.reflect.AnnotatedElement ) . java.lang.Class<? super > ( ) ; if ( java.lang.Class<> != null && java.lang.Object .class != java.lang.Class<> ) { return java.util.Set<A> ( java.lang.Class<> , java.lang.Class<A> , java.lang.Class<> ) ; } } return java.util.Set<A> ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , java.lang.Class<> , false ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { return java.util.Set<A> ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , null ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { return java.util.Set<A> ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , java.lang.Class<> , true ) ; }  <METHOD_END>
<METHOD_START> private static < A extends java.lang.annotation.Annotation > java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , boolean boolean ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; Assert . notNull ( java.lang.Class<A> , STRING ) ; try { if ( java.lang.reflect.AnnotatedElement instanceof java.lang.reflect.Method ) { java.lang.reflect.AnnotatedElement = BridgeMethodResolver . findBridgedMethod ( ( java.lang.reflect.Method ) java.lang.reflect.AnnotatedElement ) ; } return new org.springframework.core.annotation.AnnotationUtils.AnnotationCollector<A> <> ( java.lang.Class<A> , java.lang.Class<> , boolean ) . java.util.Set<A> ( java.lang.reflect.AnnotatedElement ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } return java.util.Collections . java.util.Set<A> ( ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > A A ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> ) { Assert . notNull ( java.lang.reflect.AnnotatedElement , STRING ) ; if ( java.lang.Class<A> == null ) { return null ; } A A = A ( java.lang.reflect.AnnotatedElement , java.lang.Class<A> , new java.util.HashSet<java.lang.annotation.Annotation> <> ( ) ) ; return A ( A , java.lang.reflect.AnnotatedElement ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < A extends java.lang.annotation.Annotation > A A ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<A> < A > java.lang.Class<A> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ) { try { A A = java.lang.reflect.AnnotatedElement . A ( java.lang.Class<A> ) ; if ( A != null ) { return A ; } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ! boolean ( java.lang.Class<> ) && java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ) { A = A ( ( java.lang.reflect.AnnotatedElement ) java.lang.Class<> , java.lang.Class<A> , java.util.Set<java.lang.annotation.Annotation> ) ; if ( A != null ) { return A ; } } } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < A extends java.lang.annotation.Annotation > A A ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<A> < A > java.lang.Class<A> ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; if ( java.lang.Class<A> == null ) { return null ; } org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey = new org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ( java.lang.reflect.Method , java.lang.Class<A> ) ; A A = ( A ) java.util.Map<org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey,java.lang.annotation.Annotation> . java.lang.annotation.Annotation ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ) ; if ( A == null ) { java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; A = A ( ( java.lang.reflect.AnnotatedElement ) java.lang.reflect.Method , java.lang.Class<A> ) ; if ( A == null ) { A = A ( java.lang.reflect.Method , java.lang.Class<A> , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.Class<?>[] ( ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; while ( A == null ) { java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; if ( java.lang.Class<> == null || java.lang.Object .class == java.lang.Class<> ) { break; } try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; A = A ( ( java.lang.reflect.AnnotatedElement ) java.lang.reflect.Method , java.lang.Class<A> ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } if ( A == null ) { A = A ( java.lang.reflect.Method , java.lang.Class<A> , java.lang.Class<> . java.lang.Class<?>[] ( ) ) ; } } if ( A != null ) { A = A ( A , java.lang.reflect.Method ) ; java.util.Map<org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey,java.lang.annotation.Annotation> . java.lang.annotation.Annotation ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey , A ) ; } } return A ; }  <METHOD_END>
<METHOD_START> private static < A extends java.lang.annotation.Annotation > A A ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<A> < A > java.lang.Class<A> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { A A = null ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( boolean ( java.lang.Class<> ) ) { try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; A = A ( java.lang.reflect.Method , java.lang.Class<A> ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } if ( A != null ) { break; } } } return A ; }  <METHOD_END>
<METHOD_START> static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Boolean java.lang.Boolean = java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> ) ; if ( java.lang.Boolean != null ) { return java.lang.Boolean ; } java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) { try { if ( java.lang.reflect.Method . java.lang.annotation.Annotation[] ( ) . int > NUMBER ) { java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ; break; } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.reflect.Method , java.lang.Throwable ) ; } } java.util.Map<java.lang.Class<?>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> , java.lang.Boolean ) ; return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > A A ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<A> < A > java.lang.Class<A> ) { return A ( java.lang.Class<> , java.lang.Class<A> , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < A extends java.lang.annotation.Annotation > A A ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<A> < A > java.lang.Class<A> , boolean boolean ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.Class<A> == null ) { return null ; } org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey = new org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ( java.lang.Class<> , java.lang.Class<A> ) ; A A = ( A ) java.util.Map<org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey,java.lang.annotation.Annotation> . java.lang.annotation.Annotation ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ) ; if ( A == null ) { A = A ( java.lang.Class<> , java.lang.Class<A> , new java.util.HashSet<java.lang.annotation.Annotation> <> ( ) ) ; if ( A != null && boolean ) { A = A ( A , java.lang.Class<> ) ; java.util.Map<org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey,java.lang.annotation.Annotation> . java.lang.annotation.Annotation ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey , A ) ; } } return A ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static < A extends java.lang.annotation.Annotation > A A ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<A> < A > java.lang.Class<A> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ) { try { A A = java.lang.Class<> . A ( java.lang.Class<A> ) ; if ( A != null ) { return A ; } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ! boolean ( java.lang.Class<> ) && java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ) { A = A ( java.lang.Class<> , java.lang.Class<A> , java.util.Set<java.lang.annotation.Annotation> ) ; if ( A != null ) { return A ; } } } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Class<> , java.lang.Throwable ) ; return null ; } for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { A A = A ( java.lang.Class<> , java.lang.Class<A> , java.util.Set<java.lang.annotation.Annotation> ) ; if ( A != null ) { return A ; } } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; if ( java.lang.Class<> == null || java.lang.Object .class == java.lang.Class<> ) { return null ; } return A ( java.lang.Class<> , java.lang.Class<A> , java.util.Set<java.lang.annotation.Annotation> ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.Class<> == null || java.lang.Object .class == java.lang.Class<> ) { return null ; } if ( boolean ( java.lang.Class<> , java.lang.Class<> ) ) { return java.lang.Class<> ; } return java.lang.Class<?> ( java.lang.Class<> , java.lang.Class<> . java.lang.Class<? super > ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Class<?> < ? > java.lang.Class<?> ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notEmpty ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , STRING ) ; if ( java.lang.Class<> == null || java.lang.Object .class == java.lang.Class<> ) { return null ; } for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { if ( boolean ( java.lang.Class<> , java.lang.Class<> ) ) { return java.lang.Class<> ; } } return java.lang.Class<?> ( java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> , java.lang.Class<> . java.lang.Class<? super > ( ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; try { return ( java.lang.Class<> . getDeclaredAnnotation ( java.lang.Class<> ) != null ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Class<> , java.lang.Throwable ) ; return false ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; return ( java.lang.Class<> . boolean ( java.lang.Class<> ) && ! boolean ( java.lang.Class<> , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( java.lang.Class<> == null ) { return false ; } org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey = new org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ( java.lang.Class<> , java.lang.Class<> ) ; java.lang.Boolean java.lang.Boolean = java.util.Map<org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey,java.lang.Boolean> . java.lang.Boolean ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ) ; if ( java.lang.Boolean != null ) { return java.lang.Boolean ; } java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ; if ( findAnnotation ( java.lang.Class<> , java.lang.Class<> , false ) != null ) { java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ; } java.util.Map<org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey,java.lang.Boolean> . java.lang.Boolean ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey , java.lang.Boolean ) ; return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return ( java.lang.annotation.Annotation != null && boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> static boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { return ( java.lang.Class<> != null && boolean ( java.lang.Class<> . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.String java.lang.String ) { return ( java.lang.String != null && java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return org.springframework.core.annotation.AnnotationAttributes ( null , java.lang.annotation.Annotation ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.annotation.Annotation java.lang.annotation.Annotation , boolean boolean ) { return org.springframework.core.annotation.AnnotationAttributes ( java.lang.annotation.Annotation , boolean , false ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.annotation.Annotation java.lang.annotation.Annotation , boolean boolean , boolean boolean ) { return org.springframework.core.annotation.AnnotationAttributes ( null , java.lang.annotation.Annotation , boolean , boolean ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , false , false ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation , boolean boolean , boolean boolean ) { return org.springframework.core.annotation.AnnotationAttributes ( ( java.lang.Object ) java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation , boolean , boolean ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.Object java.lang.Object , java.lang.annotation.Annotation java.lang.annotation.Annotation , boolean boolean , boolean boolean ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = org.springframework.core.annotation.AnnotationAttributes ( java.lang.Object , java.lang.annotation.Annotation , boolean , boolean ) ; void ( java.lang.Object , org.springframework.core.annotation.AnnotationAttributes , boolean , boolean ) ; return org.springframework.core.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> static org.springframework.core.annotation.AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ( java.lang.Object java.lang.Object , java.lang.annotation.Annotation java.lang.annotation.Annotation , boolean boolean , boolean boolean ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( java.lang.Class<> ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ( java.lang.Class<> ) ) { try { java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( java.lang.annotation.Annotation ) ; java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( ) ; if ( java.lang.Object != null && ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { java.lang.Object = new org.springframework.core.annotation.AnnotationUtils.DefaultValueHolder ( java.lang.Object ) ; } org.springframework.core.annotation.AnnotationAttributes . put ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.Object ( java.lang.Object , java.lang.Object , boolean , boolean ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = ( ( java.lang.reflect.InvocationTargetException ) java.lang.Throwable ) . java.lang.Throwable ( ) ; void ( java.lang.Throwable ) ; } throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method , java.lang.Throwable ) ; } } return org.springframework.core.annotation.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , boolean boolean , boolean boolean ) { if ( boolean ) { if ( java.lang.Object instanceof java.lang.Class ) { return ( ( java.lang.Class<?> < ? > ) java.lang.Object ) . java.lang.String ( ) ; } else if ( java.lang.Object instanceof java.lang.Class [] ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( java.lang.Class<?> < ? > [] ) java.lang.Object ; java.lang.String [] java.lang.String[] = new java.lang.String [ java.lang.Class<?>[] . int ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.String[] [ int ] = java.lang.Class<?>[] [ int ] . java.lang.String ( ) ; } return java.lang.String[] ; } } if ( java.lang.Object instanceof java.lang.annotation.Annotation ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = ( java.lang.annotation.Annotation ) java.lang.Object ; if ( boolean ) { return org.springframework.core.annotation.AnnotationAttributes ( java.lang.Object , java.lang.annotation.Annotation , boolean , true ) ; } else { return java.lang.annotation.Annotation ( java.lang.annotation.Annotation , java.lang.Object ) ; } } if ( java.lang.Object instanceof java.lang.annotation.Annotation [] ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = ( java.lang.annotation.Annotation [] ) java.lang.Object ; if ( boolean ) { AnnotationAttributes [] org.springframework.core.annotation.AnnotationAttributes[] = new AnnotationAttributes [ java.lang.annotation.Annotation[] . int ] ; for ( int int = NUMBER ; int < java.lang.annotation.Annotation[] . int ; int ++ ) { org.springframework.core.annotation.AnnotationAttributes[] [ int ] = org.springframework.core.annotation.AnnotationAttributes ( java.lang.Object , java.lang.annotation.Annotation[] [ int ] , boolean , true ) ; } return org.springframework.core.annotation.AnnotationAttributes[] ; } else { return java.lang.annotation.Annotation[] ( java.lang.annotation.Annotation[] , java.lang.Object ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static void void ( AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ; if ( java.lang.Class<> != null && java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) ) { for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ( java.lang.Class<> ) ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( ) ; if ( java.lang.Object != null && ! org.springframework.core.annotation.AnnotationAttributes . containsKey ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.annotation.Annotation ) { java.lang.Object = org.springframework.core.annotation.AnnotationAttributes ( ( java.lang.annotation.Annotation ) java.lang.Object , false , true ) ; } else if ( java.lang.Object instanceof java.lang.annotation.Annotation [] ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = ( java.lang.annotation.Annotation [] ) java.lang.Object ; AnnotationAttributes [] org.springframework.core.annotation.AnnotationAttributes[] = new AnnotationAttributes [ java.lang.annotation.Annotation[] . int ] ; for ( int int = NUMBER ; int < java.lang.annotation.Annotation[] . int ; int ++ ) { org.springframework.core.annotation.AnnotationAttributes[] [ int ] = org.springframework.core.annotation.AnnotationAttributes ( java.lang.annotation.Annotation[] [ int ] , false , true ) ; } java.lang.Object = org.springframework.core.annotation.AnnotationAttributes[] ; } org.springframework.core.annotation.AnnotationAttributes . put ( java.lang.String , new org.springframework.core.annotation.AnnotationUtils.DefaultValueHolder ( java.lang.Object ) ) ; } } } }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Object java.lang.Object , AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes , boolean boolean ) { void ( java.lang.Object , org.springframework.core.annotation.AnnotationAttributes , boolean , false ) ; }  <METHOD_END>
<METHOD_START> static void void ( java.lang.Object java.lang.Object , AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes , boolean boolean , boolean boolean ) { if ( org.springframework.core.annotation.AnnotationAttributes == null ) { return; } java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = org.springframework.core.annotation.AnnotationAttributes . annotationType ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; if ( ! attributes . validated ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( java.lang.Class<> ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Set<java.lang.String> ( ) ) { if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { continue; } java.lang.Object java.lang.Object = org.springframework.core.annotation.AnnotationAttributes . get ( java.lang.String ) ; boolean boolean = ( java.lang.Object != null && ! ( java.lang.Object instanceof org.springframework.core.annotation.AnnotationUtils.DefaultValueHolder ) ) ; for ( java.lang.String java.lang.String : java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String ) ) { if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { continue; } java.lang.Object java.lang.Object = org.springframework.core.annotation.AnnotationAttributes . get ( java.lang.String ) ; boolean boolean = ( java.lang.Object != null && ! ( java.lang.Object instanceof org.springframework.core.annotation.AnnotationUtils.DefaultValueHolder ) ) ; if ( boolean || boolean ) { if ( boolean && boolean ) { if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { java.lang.String java.lang.String = ( java.lang.Object != null ? java.lang.Object . java.lang.String ( ) : STRING ) ; throw new AnnotationConfigurationException ( java.lang.String . java.lang.String ( STRING + STRING + STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.String , java.lang.String , java.lang.String , ObjectUtils . nullSafeToString ( java.lang.Object ) , ObjectUtils . nullSafeToString ( java.lang.Object ) ) ) ; } } else if ( boolean ) { org.springframework.core.annotation.AnnotationAttributes . put ( java.lang.String , java.lang.Object ( java.lang.Object , java.lang.Object , boolean , boolean ) ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } else { org.springframework.core.annotation.AnnotationAttributes . put ( java.lang.String , java.lang.Object ( java.lang.Object , java.lang.Object , boolean , boolean ) ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } } } attributes . validated = true ; } for ( java.lang.String java.lang.String : org.springframework.core.annotation.AnnotationAttributes . keySet ( ) ) { if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { continue; } java.lang.Object java.lang.Object = org.springframework.core.annotation.AnnotationAttributes . get ( java.lang.String ) ; if ( java.lang.Object instanceof org.springframework.core.annotation.AnnotationUtils.DefaultValueHolder ) { java.lang.Object = ( ( org.springframework.core.annotation.AnnotationUtils.DefaultValueHolder ) java.lang.Object ) . java.lang.Object ; org.springframework.core.annotation.AnnotationAttributes . put ( java.lang.String , java.lang.Object ( java.lang.Object , java.lang.Object , boolean , boolean ) ) ; } } }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return java.lang.Object ( java.lang.annotation.Annotation , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.String java.lang.String ) { if ( java.lang.annotation.Annotation == null || ! StringUtils . hasText ( java.lang.String ) ) { return null ; } try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.reflect.Method ( java.lang.String ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return java.lang.reflect.Method . java.lang.Object ( java.lang.annotation.Annotation ) ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return java.lang.Object ( java.lang.annotation.Annotation , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.String java.lang.String ) { if ( java.lang.annotation.Annotation == null ) { return null ; } return java.lang.Object ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { return java.lang.Object ( java.lang.Class<> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String ) { if ( java.lang.Class<> == null || ! StringUtils . hasText ( java.lang.String ) ) { return null ; } try { return java.lang.Class<> . java.lang.reflect.Method ( java.lang.String ) . java.lang.Object ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> static < A extends java.lang.annotation.Annotation > A A ( A A ) { return A ( A , null ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > A A ( A A , java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { return A ( A , ( java.lang.Object ) java.lang.reflect.AnnotatedElement ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static < A extends java.lang.annotation.Annotation > A A ( A A , java.lang.Object java.lang.Object ) { if ( A == null ) { return null ; } if ( A instanceof SynthesizedAnnotation ) { return A ; } java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = A . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ! boolean ( java.lang.Class<> ) ) { return A ; } DefaultAnnotationAttributeExtractor org.springframework.core.annotation.DefaultAnnotationAttributeExtractor = new DefaultAnnotationAttributeExtractor ( A , java.lang.Object ) ; java.lang.reflect.InvocationHandler java.lang.reflect.InvocationHandler = new SynthesizedAnnotationInvocationHandler ( org.springframework.core.annotation.DefaultAnnotationAttributeExtractor ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { java.lang.Class<> , SynthesizedAnnotation .class } ; return ( A ) java.lang.reflect.Proxy . java.lang.Object ( A . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.ClassLoader ( ) , java.lang.Class<?>[] , java.lang.reflect.InvocationHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < A extends java.lang.annotation.Annotation > A A ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<A> < A > java.lang.Class<A> , java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { Assert . notNull ( java.lang.Class<A> , STRING ) ; if ( java.util.Map<java.lang.String,java.lang.Object> == null ) { return null ; } MapAnnotationAttributeExtractor org.springframework.core.annotation.MapAnnotationAttributeExtractor = new MapAnnotationAttributeExtractor ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.Class<A> , java.lang.reflect.AnnotatedElement ) ; java.lang.reflect.InvocationHandler java.lang.reflect.InvocationHandler = new SynthesizedAnnotationInvocationHandler ( org.springframework.core.annotation.MapAnnotationAttributeExtractor ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( boolean ( java.lang.Class<A> ) ? new java.lang.Class<?> < ? > [] { java.lang.Class<A> , SynthesizedAnnotation .class } : new java.lang.Class<?> < ? > [] { java.lang.Class<A> } ) ; return ( A ) java.lang.reflect.Proxy . java.lang.Object ( java.lang.Class<A> . java.lang.ClassLoader ( ) , java.lang.Class<?>[] , java.lang.reflect.InvocationHandler ) ; }  <METHOD_END>
<METHOD_START> public static < A extends java.lang.annotation.Annotation > A A ( java.lang.Class<A> < A > java.lang.Class<A> ) { return A ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) , java.lang.Class<A> , null ) ; }  <METHOD_END>
<METHOD_START> static java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] , java.lang.Object java.lang.Object ) { if ( java.lang.annotation.Annotation[] == null ) { return null ; } java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = ( java.lang.annotation.Annotation [] ) java.lang.reflect.Array . java.lang.Object ( java.lang.annotation.Annotation[] . java.lang.Class<? extends java.lang.annotation.Annotation[]> ( ) . java.lang.Class<?> ( ) , java.lang.annotation.Annotation[] . int ) ; for ( int int = NUMBER ; int < java.lang.annotation.Annotation[] . int ; int ++ ) { java.lang.annotation.Annotation[] [ int ] = java.lang.annotation.Annotation ( java.lang.annotation.Annotation[] [ int ] , java.lang.Object ) ; } return java.lang.annotation.Annotation[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static < A extends java.lang.annotation.Annotation > A [] A[] ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > [] java.util.Map<java.lang.String,java.lang.Object>[] , java.lang.Class<A> < A > java.lang.Class<A> ) { Assert . notNull ( java.lang.Class<A> , STRING ) ; if ( java.util.Map<java.lang.String,java.lang.Object>[] == null ) { return null ; } A [] A[] = ( A [] ) java.lang.reflect.Array . java.lang.Object ( java.lang.Class<A> , java.util.Map<java.lang.String,java.lang.Object>[] . int ) ; for ( int int = NUMBER ; int < java.util.Map<java.lang.String,java.lang.Object>[] . int ; int ++ ) { A[] [ int ] = A ( java.util.Map<java.lang.String,java.lang.Object>[] [ int ] , java.lang.Class<A> , null ) ; } return A[] ; }  <METHOD_END>
<METHOD_START> static java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { if ( java.lang.Class<> == null ) { return java.util.Collections . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) ; } java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( java.lang.Class<> ) ; if ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> != null ) { return java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; } java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ( java.lang.Class<> ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.reflect.Method ) ; if ( ! java.util.List<java.lang.String> . boolean ( ) ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.reflect.Method . java.lang.String ( ) , java.util.List<java.lang.String> ) ; } } java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( java.lang.Class<> , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; return java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { try { return ( java.lang.Class . java.lang.Class<?> ( SynthesizedAnnotation .class . java.lang.String ( ) , false , java.lang.Class<> . java.lang.ClassLoader ( ) ) == SynthesizedAnnotation .class ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.Boolean java.lang.Boolean = java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> ) ; if ( java.lang.Boolean != null ) { return java.lang.Boolean ; } java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ( java.lang.Class<> ) ) { if ( ! java.util.List<java.lang.String> ( java.lang.reflect.Method ) . boolean ( ) ) { java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ; break; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; if ( java.lang.annotation.Annotation [] .class . boolean ( java.lang.Class<> ) ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) java.lang.Class<> . java.lang.Class<?> ( ) ; if ( boolean ( java.lang.Class<> ) ) { java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ; break; } } else if ( java.lang.annotation.Annotation .class . boolean ( java.lang.Class<> ) ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) java.lang.Class<> ; if ( boolean ( java.lang.Class<> ) ) { java.lang.Boolean = java.lang.Boolean . java.lang.Boolean ; break; } } } java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.Boolean> . java.lang.Boolean ( java.lang.Class<> , java.lang.Boolean ) ; return java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> static java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( java.lang.reflect.Method ) ; return ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor != null ? org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . java.util.List<java.lang.String> ( ) : java.util.Collections .< java.lang.String > java.util.List<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> static java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . isTrue ( java.lang.annotation.Annotation .class != java.lang.Class<> , STRING ) ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( java.lang.reflect.Method ) ; return ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor != null ? org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . java.lang.String ( java.lang.Class<> ) : null ) ; }  <METHOD_END>
<METHOD_START> static java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,java.util.List<java.lang.reflect.Method>> . java.util.List<java.lang.reflect.Method> ( java.lang.Class<> ) ; if ( java.util.List<java.lang.reflect.Method> != null ) { return java.util.List<java.lang.reflect.Method> ; } java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) { if ( boolean ( java.lang.reflect.Method ) ) { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,java.util.List<java.lang.reflect.Method>> . java.util.List<java.lang.reflect.Method> ( java.lang.Class<> , java.util.List<java.lang.reflect.Method> ) ; return java.util.List<java.lang.reflect.Method> ; }  <METHOD_END>
<METHOD_START> static java.lang.annotation.Annotation java.lang.annotation.Annotation ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.String java.lang.String ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( java.lang.String ) ) { return java.lang.annotation.Annotation ; } } return null ; }  <METHOD_END>
<METHOD_START> static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( java.lang.reflect.Method != null && java.lang.reflect.Method . int ( ) == NUMBER && java.lang.reflect.Method . java.lang.Class<?> ( ) != void .class ) ; }  <METHOD_END>
<METHOD_START> static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( java.lang.reflect.Method != null && java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> static java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.annotation.Repeatable java.lang.annotation.Repeatable = java.lang.annotation.Repeatable ( java.lang.Class<> , java.lang.annotation.Repeatable .class ) ; return ( java.lang.annotation.Repeatable != null ? java.lang.annotation.Repeatable . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) : null ) ; }  <METHOD_END>
<METHOD_START> static void void ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof AnnotationConfigurationException ) { throw ( AnnotationConfigurationException ) java.lang.Throwable ; } }  <METHOD_END>
<METHOD_START> static void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; Log org.springframework.core.annotation.Log = org.springframework.core.annotation.Log ; if ( org.springframework.core.annotation.Log == null ) { org.springframework.core.annotation.Log = LogFactory . getLog ( org.springframework.core.annotation.AnnotationUtils .class ) ; org.springframework.core.annotation.Log = org.springframework.core.annotation.Log ; } if ( java.lang.reflect.AnnotatedElement instanceof java.lang.Class && java.lang.annotation.Annotation .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.AnnotatedElement ) ) { if ( org.springframework.core.annotation.Log . isDebugEnabled ( ) ) { org.springframework.core.annotation.Log . debug ( STRING + java.lang.reflect.AnnotatedElement + STRING + java.lang.Throwable ) ; } } else { if ( org.springframework.core.annotation.Log . isInfoEnabled ( ) ) { org.springframework.core.annotation.Log . info ( STRING + java.lang.reflect.AnnotatedElement + STRING + java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { this . java.lang.reflect.AnnotatedElement = java.lang.reflect.AnnotatedElement ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ) ) { return false ; } org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey = ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ) java.lang.Object ; return ( this . java.lang.reflect.AnnotatedElement . boolean ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey . java.lang.reflect.AnnotatedElement ) && this . java.lang.Class<> . boolean ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey . java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . java.lang.reflect.AnnotatedElement . int ( ) * NUMBER + this . java.lang.Class<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.Class<> + STRING + this . java.lang.reflect.AnnotatedElement ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey ) { int int = this . java.lang.reflect.AnnotatedElement . java.lang.String ( ) . int ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey . java.lang.reflect.AnnotatedElement . java.lang.String ( ) ) ; if ( int == NUMBER ) { int = this . java.lang.Class<> . java.lang.String ( ) . int ( org.springframework.core.annotation.AnnotationUtils.AnnotationCacheKey . java.lang.Class<> . java.lang.String ( ) ) ; } return int ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Class<A> < A > java.lang.Class<A> , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , boolean boolean ) { this . java.lang.Class<A> = java.lang.Class<A> ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = ( java.lang.Class<> != null ? java.lang.Class<> : java.lang.Class<? extends java.lang.annotation.Annotation> ( java.lang.Class<A> ) ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> java.util.Set<A> < A > java.util.Set<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { void ( java.lang.reflect.AnnotatedElement ) ; return java.util.Collections . java.util.Set<A> ( this . java.util.Set<A> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { if ( this . java.util.Set<java.lang.reflect.AnnotatedElement> . boolean ( java.lang.reflect.AnnotatedElement ) ) { try { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = ( this . boolean ? java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) : java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( ObjectUtils . nullSafeEquals ( this . java.lang.Class<A> , java.lang.Class<> ) ) { this . java.util.Set<A> . boolean ( A ( ( A ) java.lang.annotation.Annotation , java.lang.reflect.AnnotatedElement ) ) ; } else if ( ObjectUtils . nullSafeEquals ( this . java.lang.Class<> , java.lang.Class<> ) ) { this . java.util.Set<A> . boolean ( java.util.List<A> ( java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation ) ) ; } else if ( ! boolean ( java.lang.Class<> ) ) { void ( java.lang.Class<> ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<A> < A > java.util.List<A> ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { try { java.util.List<A> < A > java.util.List<A> = new java.util.ArrayList<A> <> ( ) ; for ( A A : ( A [] ) org.springframework.core.annotation.AnnotationUtils . java.lang.Object ( java.lang.annotation.Annotation ) ) { java.util.List<A> . boolean ( A ( A , java.lang.reflect.AnnotatedElement ) ) ; } return java.util.List<A> ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.reflect.AnnotatedElement , java.lang.Throwable ) ; } return java.util.Collections . java.util.List<A> ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( java.lang.reflect.Method java.lang.reflect.Method ) { org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = java.util.Map<java.lang.reflect.Method,org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( java.lang.reflect.Method ) ; if ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor != null ) { return org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ; } AliasFor org.springframework.core.annotation.AliasFor = java.lang.reflect.Method . T ( AliasFor .class ) ; if ( org.springframework.core.annotation.AliasFor == null ) { return null ; } org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = new org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( java.lang.reflect.Method , org.springframework.core.annotation.AliasFor ) ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . void ( ) ; java.util.Map<java.lang.reflect.Method,org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( java.lang.reflect.Method , org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ) ; return org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void ( java.lang.reflect.Method java.lang.reflect.Method , AliasFor org.springframework.core.annotation.AliasFor ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; Assert . isTrue ( java.lang.Class<> . boolean ( ) , STRING ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) java.lang.Class<> ; this . java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = ( java.lang.annotation.Annotation .class == org.springframework.core.annotation.AliasFor . annotation ( ) ? this . java.lang.Class<> : org.springframework.core.annotation.AliasFor . annotation ( ) ) ; this . java.lang.String = java.lang.String ( org.springframework.core.annotation.AliasFor , java.lang.reflect.Method ) ; if ( this . java.lang.Class<> == this . java.lang.Class<> && this . java.lang.String . boolean ( this . java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , java.lang.reflect.Method . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } try { this . java.lang.reflect.Method = this . java.lang.Class<> . java.lang.reflect.Method ( this . java.lang.String ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) ) ; throw new AnnotationConfigurationException ( java.lang.String , java.lang.NoSuchMethodException ) ; } this . boolean = ( this . java.lang.Class<> == this . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! this . boolean && ! boolean ( this . java.lang.Class<> , this . java.lang.Class<> ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } if ( this . boolean ) { AliasFor org.springframework.core.annotation.AliasFor = this . java.lang.reflect.Method . T ( AliasFor .class ) ; if ( org.springframework.core.annotation.AliasFor == null ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) , this . java.lang.String ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.core.annotation.AliasFor , this . java.lang.reflect.Method ) ; if ( ! this . java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) , this . java.lang.String , java.lang.String ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } } java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.reflect.Method . java.lang.Class<?> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.reflect.Method . java.lang.Class<?> ( ) ; if ( java.lang.Class<> != java.lang.Class<> && ( ! java.lang.Class<> . boolean ( ) || java.lang.Class<> != java.lang.Class<> . java.lang.Class<?> ( ) ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } if ( this . boolean ) { void ( this . java.lang.reflect.Method ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; java.lang.Object java.lang.Object = this . java.lang.reflect.Method . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( ) ; if ( java.lang.Object == null || java.lang.Object == null ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ) { void ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { return ( this . java.lang.Class<> == java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ) { for ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = this ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor != null ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( ) ) { for ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor != null ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( ) ) { if ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . java.lang.reflect.Method . boolean ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . java.lang.reflect.Method ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { if ( this . boolean ) { return java.util.Collections . java.util.List<java.lang.String> ( this . java.lang.String ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor : java.util.List<org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> ( ) ) { if ( this . boolean ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ) ) { this . void ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ) ; java.util.List<java.lang.String> . boolean ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . java.lang.String ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> < org.springframework.core.annotation.AnnotationUtils.AliasDescriptor > java.util.List<org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> ( ) { java.util.List<org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> < org.springframework.core.annotation.AnnotationUtils.AliasDescriptor > java.util.List<org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> = new java.util.ArrayList<org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ( this . java.lang.Class<> ) ) { if ( ! this . java.lang.reflect.Method . boolean ( java.lang.reflect.Method ) ) { org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( java.lang.reflect.Method ) ; if ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor != null ) { java.util.List<org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> . boolean ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ) ; } } } return java.util.List<org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . isTrue ( java.lang.annotation.Annotation .class != java.lang.Class<> , STRING ) ; for ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = this ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor != null ; org.springframework.core.annotation.AnnotationUtils.AliasDescriptor = org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( ) ) { if ( org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . boolean ( java.lang.Class<> ) ) { return org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . java.lang.String ; } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.annotation.AnnotationUtils.AliasDescriptor org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( ) { if ( this . boolean ) { return null ; } return org.springframework.core.annotation.AnnotationUtils.AliasDescriptor . org.springframework.core.annotation.AnnotationUtils.AliasDescriptor ( this . java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( AliasFor org.springframework.core.annotation.AliasFor , java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.String java.lang.String = org.springframework.core.annotation.AliasFor . attribute ( ) ; java.lang.String java.lang.String = org.springframework.core.annotation.AliasFor . value ( ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; if ( boolean && boolean ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) , java.lang.String , java.lang.String ) ; throw new AnnotationConfigurationException ( java.lang.String ) ; } java.lang.String = ( boolean ? java.lang.String : java.lang.String ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String . java.lang.String ( ) : java.lang.reflect.Method . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.Class<? extends org.springframework.core.annotation.AnnotationUtils.AliasDescriptor> ( ) . java.lang.String ( ) , this . java.lang.Class<> . java.lang.String ( ) , this . java.lang.String , this . java.lang.Class<> . java.lang.String ( ) , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
