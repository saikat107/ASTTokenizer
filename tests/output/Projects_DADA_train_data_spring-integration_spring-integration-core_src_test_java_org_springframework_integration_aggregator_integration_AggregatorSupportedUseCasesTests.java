<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( int ) . setSequenceSize ( NUMBER ) . setCorrelationId ( STRING ) . setSequenceNumber ( int ) . build ( ) ) ; } assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) . int ( ) ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setSequenceSize ( NUMBER ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.integration.MessageGroupStore . expireMessageGroups ( NUMBER ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setSequenceSize ( NUMBER ) . setCorrelationId ( STRING ) . setSequenceNumber ( NUMBER ) . build ( ) ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setReleaseStrategy ( new org.springframework.integration.aggregator.integration.AggregatorSupportedUseCasesTests.SampleSizeReleaseStrategy ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( int ) . setCorrelationId ( STRING ) . build ( ) ) ; } assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) . int ( ) ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.aggregator.integration.MessageGroupStore . expireMessageGroups ( NUMBER ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setReleaseStrategy ( new org.springframework.integration.aggregator.integration.AggregatorSupportedUseCasesTests.FirstBestReleaseStrategy ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( int ) . setCorrelationId ( STRING ) . build ( ) ) ; } assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) . int ( ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setReleaseStrategy ( new org.springframework.integration.aggregator.integration.AggregatorSupportedUseCasesTests.SampleSizeReleaseStrategy ( ) ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setExpireGroupsUponCompletion ( true ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( int ) . setCorrelationId ( STRING ) . build ( ) ) ; } assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) . int ( ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) . int ( ) ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.aggregator.integration.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.integration.QueueChannel ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setReleaseStrategy ( new org.springframework.integration.aggregator.integration.AggregatorSupportedUseCasesTests.SampleSizeReleaseStrategy ( ) ) ; org.springframework.integration.aggregator.integration.AggregatingMessageHandler . setExpireGroupsUponCompletion ( true ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.aggregator.integration.AggregatingMessageHandler . handleMessage ( MessageBuilder . withPayload ( int ) . setCorrelationId ( STRING ) . build ( ) ) ; } assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) . int ( ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) . int ( ) ) ; assertNull ( org.springframework.integration.aggregator.integration.QueueChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.integration.MessageGroupStore . getMessageGroup ( STRING ) . getMessages ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageGroup org.springframework.integration.aggregator.integration.MessageGroup ) { return org.springframework.integration.aggregator.integration.MessageGroup . getMessages ( ) . size ( ) == NUMBER ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageGroup org.springframework.integration.aggregator.integration.MessageGroup ) { return true ; }  <METHOD_END>
