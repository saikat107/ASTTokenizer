<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.mapping.JpaMetamodelMappingContext = new JpaMetamodelMappingContext ( java.util.Collections . java.util.Set ( org.springframework.data.jpa.mapping.EntityManager . getMetamodel ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaPersistentEntityImpl < ? > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( User .class ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaPersistentEntityImpl < ? > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( User .class ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> . getIdProperty ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaPersistentEntityImpl < ? > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( User .class ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> , is ( notNullValue ( ) ) ) ; JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty = org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty . isAssociation ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaPersistentEntityImpl < ? > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( User .class ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> , is ( notNullValue ( ) ) ) ; JpaPersistentProperty org.springframework.data.jpa.mapping.JpaPersistentProperty = org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty . isEntity ( ) , is ( true ) ) ; org.springframework.data.jpa.mapping.JpaPersistentProperty = org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> . getRequiredPersistentProperty ( STRING ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentProperty . isEntity ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaPersistentEntityImpl < ? > org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( User .class ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.mapping.JpaPersistentEntityImpl<> . getRequiredPersistentProperty ( STRING ) . isEntity ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TransactionTemplate org.springframework.data.jpa.mapping.TransactionTemplate = new TransactionTemplate ( org.springframework.data.jpa.mapping.PlatformTransactionManager ) ; final Category org.springframework.data.jpa.mapping.Category = org.springframework.data.jpa.mapping.TransactionTemplate . execute ( new TransactionCallback < Category > ( ) { @ java.lang.Override public org.springframework.data.jpa.mapping.Category org.springframework.data.jpa.mapping.Category ( TransactionStatus org.springframework.data.jpa.mapping.TransactionStatus ) { Product org.springframework.data.jpa.mapping.Product = org.springframework.data.jpa.mapping.ProductRepository . save ( new Product ( ) ) ; return org.springframework.data.jpa.mapping.CategoryRepository . save ( new Category ( org.springframework.data.jpa.mapping.Product ) ) ; } } ) ; org.springframework.data.jpa.mapping.TransactionTemplate . execute ( new TransactionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.data.jpa.mapping.TransactionStatus ) { Category org.springframework.data.jpa.mapping.Category = org.springframework.data.jpa.mapping.CategoryRepository . findOne ( org.springframework.data.jpa.mapping.Category . getId ( ) ) . get ( ) ; Product org.springframework.data.jpa.mapping.Product = org.springframework.data.jpa.mapping.Category . getProduct ( ) ; JpaPersistentEntity < ? > org.springframework.data.jpa.mapping.JpaPersistentEntity<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( Product .class ) ; IdentifierAccessor org.springframework.data.jpa.mapping.IdentifierAccessor = org.springframework.data.jpa.mapping.JpaPersistentEntity<> . getIdentifierAccessor ( org.springframework.data.jpa.mapping.Product ) ; assertThat ( org.springframework.data.jpa.mapping.IdentifierAccessor . getIdentifier ( ) , is ( java.util.Optional . java.util.Optional ( org.springframework.data.jpa.mapping.Category . getProduct ( ) . getId ( ) ) ) ) ; assertThat ( org.springframework.data.jpa.mapping.Product , is ( instanceOf ( HibernateProxy .class ) ) ) ; assertThat ( ( ( HibernateProxy ) org.springframework.data.jpa.mapping.Product ) . getHibernateLazyInitializer ( ) . isUninitialized ( ) , is ( true ) ) ; org.springframework.data.jpa.mapping.TransactionStatus . setRollbackOnly ( ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.mapping.Category org.springframework.data.jpa.mapping.Category ( TransactionStatus org.springframework.data.jpa.mapping.TransactionStatus ) { Product org.springframework.data.jpa.mapping.Product = org.springframework.data.jpa.mapping.ProductRepository . save ( new Product ( ) ) ; return org.springframework.data.jpa.mapping.CategoryRepository . save ( new Category ( org.springframework.data.jpa.mapping.Product ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( TransactionStatus org.springframework.data.jpa.mapping.TransactionStatus ) { Category org.springframework.data.jpa.mapping.Category = org.springframework.data.jpa.mapping.CategoryRepository . findOne ( org.springframework.data.jpa.mapping.Category . getId ( ) ) . get ( ) ; Product org.springframework.data.jpa.mapping.Product = org.springframework.data.jpa.mapping.Category . getProduct ( ) ; JpaPersistentEntity < ? > org.springframework.data.jpa.mapping.JpaPersistentEntity<?> = org.springframework.data.jpa.mapping.JpaMetamodelMappingContext . getRequiredPersistentEntity ( Product .class ) ; IdentifierAccessor org.springframework.data.jpa.mapping.IdentifierAccessor = org.springframework.data.jpa.mapping.JpaPersistentEntity<> . getIdentifierAccessor ( org.springframework.data.jpa.mapping.Product ) ; assertThat ( org.springframework.data.jpa.mapping.IdentifierAccessor . getIdentifier ( ) , is ( java.util.Optional . java.util.Optional ( org.springframework.data.jpa.mapping.Category . getProduct ( ) . getId ( ) ) ) ) ; assertThat ( org.springframework.data.jpa.mapping.Product , is ( instanceOf ( HibernateProxy .class ) ) ) ; assertThat ( ( ( HibernateProxy ) org.springframework.data.jpa.mapping.Product ) . getHibernateLazyInitializer ( ) . isUninitialized ( ) , is ( true ) ) ; org.springframework.data.jpa.mapping.TransactionStatus . setRollbackOnly ( ) ; return null ; }  <METHOD_END>
