<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; ExpectedLookupTemplate org.springframework.transaction.jta.ExpectedLookupTemplate = new ExpectedLookupTemplate ( WebSphereUowTransactionManager . DEFAULT_UOW_MANAGER_NAME , org.springframework.transaction.jta.MockUOWManager ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( ) ; org.springframework.transaction.jta.WebSphereUowTransactionManager . setJndiTemplate ( org.springframework.transaction.jta.ExpectedLookupTemplate ) ; org.springframework.transaction.jta.WebSphereUowTransactionManager . afterPropertiesSet ( ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; } } ) ) ; assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UserTransaction org.springframework.transaction.jta.UserTransaction = mock ( UserTransaction .class ) ; given ( org.springframework.transaction.jta.UserTransaction . getStatus ( ) ) . willReturn ( Status . STATUS_NO_TRANSACTION , Status . STATUS_ACTIVE , Status . STATUS_ACTIVE ) ; MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; ExpectedLookupTemplate org.springframework.transaction.jta.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; org.springframework.transaction.jta.ExpectedLookupTemplate . addObject ( WebSphereUowTransactionManager . DEFAULT_USER_TRANSACTION_NAME , org.springframework.transaction.jta.UserTransaction ) ; org.springframework.transaction.jta.ExpectedLookupTemplate . addObject ( WebSphereUowTransactionManager . DEFAULT_UOW_MANAGER_NAME , org.springframework.transaction.jta.MockUOWManager ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( ) ; org.springframework.transaction.jta.WebSphereUowTransactionManager . setJndiTemplate ( org.springframework.transaction.jta.ExpectedLookupTemplate ) ; org.springframework.transaction.jta.WebSphereUowTransactionManager . afterPropertiesSet ( ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; TransactionStatus org.springframework.transaction.jta.TransactionStatus = org.springframework.transaction.jta.WebSphereUowTransactionManager . getTransaction ( org.springframework.transaction.jta.DefaultTransactionDefinition ) ; org.springframework.transaction.jta.WebSphereUowTransactionManager . commit ( org.springframework.transaction.jta.TransactionStatus ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; } } ) ) ; assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; verify ( org.springframework.transaction.jta.UserTransaction ) . begin ( ) ; verify ( org.springframework.transaction.jta.UserTransaction ) . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setPropagationBehavior ( TransactionDefinition . PROPAGATION_MANDATORY ) ; try { org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; } } ) ; fail ( STRING ) ; } catch ( IllegalTransactionStateException org.springframework.transaction.jta.IllegalTransactionStateException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_SUPPORTS , WebSphereUowTransactionManager . SYNCHRONIZATION_ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NOT_SUPPORTED , WebSphereUowTransactionManager . SYNCHRONIZATION_ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NEVER , WebSphereUowTransactionManager . SYNCHRONIZATION_ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_SUPPORTS , WebSphereUowTransactionManager . SYNCHRONIZATION_ON_ACTUAL_TRANSACTION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NOT_SUPPORTED , WebSphereUowTransactionManager . SYNCHRONIZATION_ON_ACTUAL_TRANSACTION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NEVER , WebSphereUowTransactionManager . SYNCHRONIZATION_ON_ACTUAL_TRANSACTION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_SUPPORTS , WebSphereUowTransactionManager . SYNCHRONIZATION_NEVER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NOT_SUPPORTED , WebSphereUowTransactionManager . SYNCHRONIZATION_NEVER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NEVER , WebSphereUowTransactionManager . SYNCHRONIZATION_NEVER ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , final int int ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; org.springframework.transaction.jta.WebSphereUowTransactionManager . setTransactionSynchronization ( int ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setPropagationBehavior ( int ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setReadOnly ( true ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { if ( int == WebSphereUowTransactionManager . SYNCHRONIZATION_ALWAYS ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } else { assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } return STRING ; } } ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; assertEquals ( UOWManager . UOW_TYPE_LOCAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { if ( int == WebSphereUowTransactionManager . SYNCHRONIZATION_ALWAYS ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } else { assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_REQUIRED , WebSphereUowTransactionManager . SYNCHRONIZATION_ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_REQUIRES_NEW , WebSphereUowTransactionManager . SYNCHRONIZATION_ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NESTED , WebSphereUowTransactionManager . SYNCHRONIZATION_ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_REQUIRED , WebSphereUowTransactionManager . SYNCHRONIZATION_ON_ACTUAL_TRANSACTION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_REQUIRES_NEW , WebSphereUowTransactionManager . SYNCHRONIZATION_ON_ACTUAL_TRANSACTION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NESTED , WebSphereUowTransactionManager . SYNCHRONIZATION_ON_ACTUAL_TRANSACTION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_REQUIRED , WebSphereUowTransactionManager . SYNCHRONIZATION_NEVER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_REQUIRES_NEW , WebSphereUowTransactionManager . SYNCHRONIZATION_NEVER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NESTED , WebSphereUowTransactionManager . SYNCHRONIZATION_NEVER ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , final int int ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; org.springframework.transaction.jta.WebSphereUowTransactionManager . setTransactionSynchronization ( int ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setPropagationBehavior ( int ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setReadOnly ( true ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { if ( int != WebSphereUowTransactionManager . SYNCHRONIZATION_NEVER ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } else { assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } return STRING ; } } ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { if ( int != WebSphereUowTransactionManager . SYNCHRONIZATION_NEVER ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } else { assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setTimeout ( NUMBER ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setReadOnly ( true ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final RollbackException org.springframework.transaction.jta.RollbackException = new RollbackException ( ) ; MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) { @ java.lang.Override public void void ( int int , boolean boolean , UOWAction org.springframework.transaction.jta.UOWAction ) throws org.springframework.transaction.jta.UOWException { throw new UOWException ( org.springframework.transaction.jta.RollbackException ) ; } } ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; try { org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ; fail ( STRING ) ; } catch ( TransactionSystemException org.springframework.transaction.jta.TransactionSystemException ) { assertTrue ( org.springframework.transaction.jta.TransactionSystemException . getCause ( ) instanceof UOWException ) ; assertSame ( org.springframework.transaction.jta.RollbackException , org.springframework.transaction.jta.TransactionSystemException . getRootCause ( ) ) ; assertSame ( org.springframework.transaction.jta.RollbackException , org.springframework.transaction.jta.TransactionSystemException . getMostSpecificCause ( ) ) ; } assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , boolean boolean , UOWAction org.springframework.transaction.jta.UOWAction ) throws org.springframework.transaction.jta.UOWException { throw new UOWException ( org.springframework.transaction.jta.RollbackException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; try { org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; throw new OptimisticLockingFailureException ( STRING ) ; } } ) ; fail ( STRING ) ; } catch ( OptimisticLockingFailureException org.springframework.transaction.jta.OptimisticLockingFailureException ) { } assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertTrue ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; throw new OptimisticLockingFailureException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; org.springframework.transaction.jta.TransactionStatus . setRollbackOnly ( ) ; return STRING ; } } ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertTrue ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; org.springframework.transaction.jta.TransactionStatus . setRollbackOnly ( ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; org.springframework.transaction.jta.MockUOWManager . setUOWStatus ( UOWManager . UOW_STATUS_ACTIVE ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertTrue ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; org.springframework.transaction.jta.MockUOWManager . setUOWStatus ( UOWManager . UOW_STATUS_ACTIVE ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setPropagationBehavior ( TransactionDefinition . PROPAGATION_NEVER ) ; try { org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; } } ) ; fail ( STRING ) ; } catch ( IllegalTransactionStateException org.springframework.transaction.jta.IllegalTransactionStateException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; org.springframework.transaction.jta.MockUOWManager . setUOWStatus ( UOWManager . UOW_STATUS_ACTIVE ) ; WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setPropagationBehavior ( TransactionDefinition . PROPAGATION_NESTED ) ; try { org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; } } ) ; fail ( STRING ) ; } catch ( NestedTransactionNotSupportedException org.springframework.transaction.jta.NestedTransactionNotSupportedException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_REQUIRED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_SUPPORTS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_MANDATORY ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; final WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; final DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setPropagationBehavior ( int ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setReadOnly ( true ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ) ; return STRING ; } } ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertTrue ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( TransactionDefinition . PROPAGATION_NOT_SUPPORTED ) ; }  <METHOD_END>
<METHOD_START> private void void ( final int int ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; final WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; final DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setPropagationBehavior ( int ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setReadOnly ( true ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertEquals ( int == TransactionDefinition . PROPAGATION_REQUIRES_NEW , TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ) ; return STRING ; } } ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; if ( int == TransactionDefinition . PROPAGATION_REQUIRES_NEW ) { assertEquals ( UOWManager . UOW_TYPE_GLOBAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; } else { assertEquals ( UOWManager . UOW_TYPE_LOCAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; } assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertEquals ( int == TransactionDefinition . PROPAGATION_REQUIRES_NEW , TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertEquals ( int == TransactionDefinition . PROPAGATION_REQUIRES_NEW , TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockUOWManager org.springframework.transaction.jta.MockUOWManager = new MockUOWManager ( ) ; final WebSphereUowTransactionManager org.springframework.transaction.jta.WebSphereUowTransactionManager = new WebSphereUowTransactionManager ( org.springframework.transaction.jta.MockUOWManager ) ; DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; final DefaultTransactionDefinition org.springframework.transaction.jta.DefaultTransactionDefinition = new DefaultTransactionDefinition ( ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setPropagationBehavior ( TransactionDefinition . PROPAGATION_NOT_SUPPORTED ) ; org.springframework.transaction.jta.DefaultTransactionDefinition . setReadOnly ( true ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ) ; return STRING ; } } ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.jta.MockUOWManager . getUOWTimeout ( ) ) ; assertEquals ( UOWManager . UOW_TYPE_LOCAL_TRANSACTION , org.springframework.transaction.jta.MockUOWManager . getUOWType ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getJoined ( ) ) ; assertFalse ( org.springframework.transaction.jta.MockUOWManager . getRollbackOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; assertEquals ( STRING , org.springframework.transaction.jta.WebSphereUowTransactionManager . execute ( org.springframework.transaction.jta.DefaultTransactionDefinition , new TransactionCallback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; } } ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( TransactionStatus org.springframework.transaction.jta.TransactionStatus ) { assertTrue ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; return STRING ; }  <METHOD_END>
