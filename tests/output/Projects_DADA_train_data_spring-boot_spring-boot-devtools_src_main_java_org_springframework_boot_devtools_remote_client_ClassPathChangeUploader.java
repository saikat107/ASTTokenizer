<METHOD_START> public void ( java.lang.String java.lang.String , ClientHttpRequestFactory org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory ) { Assert . hasLength ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory , STRING ) ; try { this . java.net.URI = new java.net.URL ( java.lang.String ) . java.net.URI ( ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory = org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ClassPathChangedEvent org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ) { try { ClassLoaderFiles org.springframework.boot.devtools.remote.client.ClassLoaderFiles = org.springframework.boot.devtools.remote.client.ClassLoaderFiles ( org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ) ; byte [] byte[] = byte[] ( org.springframework.boot.devtools.remote.client.ClassLoaderFiles ) ; void ( org.springframework.boot.devtools.remote.client.ClassLoaderFiles , byte[] ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ClassLoaderFiles org.springframework.boot.devtools.remote.client.ClassLoaderFiles , byte [] byte[] )			throws java.io.IOException { try { while ( true ) { try { ClientHttpRequest org.springframework.boot.devtools.remote.client.ClientHttpRequest = this . org.springframework.boot.devtools.remote.client.ClientHttpRequestFactory . createRequest ( this . java.net.URI , HttpMethod . POST ) ; HttpHeaders org.springframework.boot.devtools.remote.client.HttpHeaders = org.springframework.boot.devtools.remote.client.ClientHttpRequest . getHeaders ( ) ; org.springframework.boot.devtools.remote.client.HttpHeaders . setContentType ( MediaType . APPLICATION_OCTET_STREAM ) ; org.springframework.boot.devtools.remote.client.HttpHeaders . setContentLength ( byte[] . int ) ; FileCopyUtils . copy ( byte[] , org.springframework.boot.devtools.remote.client.ClientHttpRequest . getBody ( ) ) ; ClientHttpResponse org.springframework.boot.devtools.remote.client.ClientHttpResponse = org.springframework.boot.devtools.remote.client.ClientHttpRequest . execute ( ) ; Assert . state ( org.springframework.boot.devtools.remote.client.ClientHttpResponse . getStatusCode ( ) == HttpStatus . OK , STRING + org.springframework.boot.devtools.remote.client.ClientHttpResponse . getStatusCode ( ) + STRING ) ; void ( org.springframework.boot.devtools.remote.client.ClassLoaderFiles ) ; return; } catch ( java.net.ConnectException java.net.ConnectException ) { org.springframework.boot.devtools.remote.client.Log . warn ( STRING + this . java.net.URI + STRING ) ; java.lang.Thread . void ( NUMBER ) ; } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ClassLoaderFiles org.springframework.boot.devtools.remote.client.ClassLoaderFiles ) { int int = org.springframework.boot.devtools.remote.client.ClassLoaderFiles . size ( ) ; org.springframework.boot.devtools.remote.client.Log . info ( STRING + int + STRING + ( int == NUMBER ? STRING : STRING ) ) ; }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( ClassLoaderFiles org.springframework.boot.devtools.remote.client.ClassLoaderFiles ) throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( org.springframework.boot.devtools.remote.client.ClassLoaderFiles ) ; java.io.ObjectOutputStream . void ( ) ; return java.io.ByteArrayOutputStream . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.remote.client.ClassLoaderFiles org.springframework.boot.devtools.remote.client.ClassLoaderFiles ( ClassPathChangedEvent org.springframework.boot.devtools.remote.client.ClassPathChangedEvent )			throws java.io.IOException { ClassLoaderFiles org.springframework.boot.devtools.remote.client.ClassLoaderFiles = new ClassLoaderFiles ( ) ; for ( ChangedFiles org.springframework.boot.devtools.remote.client.ChangedFiles : org.springframework.boot.devtools.remote.client.ClassPathChangedEvent . getChangeSet ( ) ) { java.lang.String java.lang.String = org.springframework.boot.devtools.remote.client.ChangedFiles . getSourceFolder ( ) . getAbsolutePath ( ) ; for ( ChangedFile org.springframework.boot.devtools.remote.client.ChangedFile : org.springframework.boot.devtools.remote.client.ChangedFiles ) { org.springframework.boot.devtools.remote.client.ClassLoaderFiles . addFile ( java.lang.String , org.springframework.boot.devtools.remote.client.ChangedFile . getRelativeName ( ) , org.springframework.boot.devtools.remote.client.ClassLoaderFile ( org.springframework.boot.devtools.remote.client.ChangedFile ) ) ; } } return org.springframework.boot.devtools.remote.client.ClassLoaderFiles ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.remote.client.ClassLoaderFile org.springframework.boot.devtools.remote.client.ClassLoaderFile ( ChangedFile org.springframework.boot.devtools.remote.client.ChangedFile )			throws java.io.IOException { ClassLoaderFile . ClassLoaderFile ClassLoaderFile.Kind = java.util.Map<ChangedFile.Type,ClassLoaderFile.Kind> . get ( org.springframework.boot.devtools.remote.client.ChangedFile . getType ( ) ) ; byte [] byte[] = ( ClassLoaderFile.Kind == Kind . DELETED ? null : FileCopyUtils . copyToByteArray ( org.springframework.boot.devtools.remote.client.ChangedFile . getFile ( ) ) ) ; long long = ( ClassLoaderFile.Kind == Kind . DELETED ? java.lang.System . long ( ) : org.springframework.boot.devtools.remote.client.ChangedFile . getFile ( ) . lastModified ( ) ) ; return new ClassLoaderFile ( ClassLoaderFile.Kind , long , byte[] ) ; }  <METHOD_END>
