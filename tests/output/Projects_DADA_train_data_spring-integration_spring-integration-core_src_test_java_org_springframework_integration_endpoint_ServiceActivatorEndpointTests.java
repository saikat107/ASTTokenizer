<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = this . org.springframework.integration.endpoint.ServiceActivatingHandler ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = this . org.springframework.integration.endpoint.ServiceActivatingHandler ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.endpoint.QueueChannel ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.endpoint.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = this . org.springframework.integration.endpoint.ServiceActivatingHandler ( ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.endpoint.QueueChannel ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestUtils . TestUtils TestUtils.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; TestUtils.TestApplicationContext . refresh ( ) ; QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.endpoint.QueueChannel . setBeanName ( STRING ) ; TestChannelResolver org.springframework.integration.endpoint.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.endpoint.TestChannelResolver . addChannel ( STRING , org.springframework.integration.endpoint.QueueChannel ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = this . org.springframework.integration.endpoint.ServiceActivatingHandler ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setChannelResolver ( org.springframework.integration.endpoint.TestChannelResolver ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setBeanFactory ( TestUtils.TestApplicationContext ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; TestUtils.TestApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestUtils . TestUtils TestUtils.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; TestUtils.TestApplicationContext . refresh ( ) ; final QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( ) ; final QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.endpoint.QueueChannel . setBeanName ( STRING ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) { @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { return new GenericMessage < java.lang.String > ( STRING + org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; } } ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( java.lang.Object , STRING ) ; TestChannelResolver org.springframework.integration.endpoint.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.endpoint.TestChannelResolver . addChannel ( STRING , org.springframework.integration.endpoint.QueueChannel ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setChannelResolver ( org.springframework.integration.endpoint.TestChannelResolver ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setBeanFactory ( TestUtils.TestApplicationContext ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . afterPropertiesSet ( ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.endpoint.QueueChannel ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.endpoint.Message<> ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.endpoint.Message<java.lang.String> ) . setReplyChannelName ( STRING ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.endpoint.Message<> ) ; org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; TestUtils.TestApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { return new GenericMessage < java.lang.String > ( STRING + org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = this . org.springframework.integration.endpoint.ServiceActivatingHandler ( ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.endpoint.QueueChannel ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = this . org.springframework.integration.endpoint.ServiceActivatingHandler ( ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.endpoint.ServiceActivatorEndpointTests.TestNullReplyBean ( ) , STRING ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; assertNull ( org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ReplyRequiredException .class ) public void void ( ) { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.endpoint.ServiceActivatorEndpointTests.TestNullReplyBean ( ) , STRING ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setRequiresReply ( true ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.endpoint.QueueChannel ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( new java.lang.Object ( ) { @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { return org.springframework.integration.endpoint.Message<> ; } } , STRING ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.endpoint.QueueChannel ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; assertNull ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { return org.springframework.integration.endpoint.Message<> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.endpoint.QueueChannel = new QueueChannel ( NUMBER ) ; ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = new ServiceActivatingHandler ( new java.lang.Object ( ) { @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { return MessageBuilder . fromMessage ( org.springframework.integration.endpoint.Message<> ) . setCorrelationId ( STRING ) . build ( ) ; } } , STRING ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.endpoint.QueueChannel ) . build ( ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . handleMessage ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.QueueChannel . receive ( NUMBER ) ; java.lang.Object java.lang.Object = new IntegrationMessageHeaderAccessor ( org.springframework.integration.endpoint.Message<> ) . getCorrelationId ( ) ; assertFalse ( org.springframework.integration.endpoint.Message<java.lang.String> . getHeaders ( ) . getId ( ) . equals ( java.lang.Object ) ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { return MessageBuilder . fromMessage ( org.springframework.integration.endpoint.Message<> ) . setCorrelationId ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler = this . org.springframework.integration.endpoint.ServiceActivatingHandler ( ) ; BeanFactory org.springframework.integration.endpoint.BeanFactory = mock ( BeanFactory .class ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . setBeanFactory ( org.springframework.integration.endpoint.BeanFactory ) ; org.springframework.integration.endpoint.ServiceActivatingHandler . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.endpoint.ServiceActivatingHandler , STRING ) ; assertNotNull ( java.lang.Object ) ; assertSame ( org.springframework.integration.endpoint.BeanFactory , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.endpoint.ServiceActivatingHandler org.springframework.integration.endpoint.ServiceActivatingHandler ( ) { return new ServiceActivatingHandler ( new org.springframework.integration.endpoint.ServiceActivatorEndpointTests.TestBean ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { return new GenericMessage < java.lang.String > ( org.springframework.integration.endpoint.Message<> . getPayload ( ) . toString ( ) . toUpperCase ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.endpoint.Message<?> < ? > org.springframework.integration.endpoint.Message<?> ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { return null ; }  <METHOD_END>
