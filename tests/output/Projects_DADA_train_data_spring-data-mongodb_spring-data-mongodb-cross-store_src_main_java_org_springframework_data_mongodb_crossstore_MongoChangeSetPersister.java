<METHOD_START> public void void ( MongoTemplate org.springframework.data.mongodb.crossstore.MongoTemplate ) { this . org.springframework.data.mongodb.crossstore.MongoTemplate = org.springframework.data.mongodb.crossstore.MongoTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( EntityManagerFactory org.springframework.data.mongodb.crossstore.EntityManagerFactory ) { this . org.springframework.data.mongodb.crossstore.EntityManagerFactory = org.springframework.data.mongodb.crossstore.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends org.springframework.data.mongodb.crossstore.ChangeSetBacked> < ? extends ChangeSetBacked > java.lang.Class<? extends org.springframework.data.mongodb.crossstore.ChangeSetBacked> , java.lang.Object java.lang.Object , final ChangeSet org.springframework.data.mongodb.crossstore.ChangeSet )			throws org.springframework.data.mongodb.crossstore.DataAccessException , org.springframework.data.mongodb.crossstore.NotFoundException { if ( java.lang.Object == null ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING ) ; return; } java.lang.String java.lang.String = java.lang.String ( java.lang.Class<> ) ; final Document org.springframework.data.mongodb.crossstore.Document = new Document ( ) ; org.springframework.data.mongodb.crossstore.Document . put ( java.lang.String , java.lang.Object ) ; org.springframework.data.mongodb.crossstore.Document . put ( java.lang.String , java.lang.Class<> . java.lang.String ( ) ) ; if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , org.springframework.data.mongodb.crossstore.Document ) ; } org.springframework.data.mongodb.crossstore.MongoTemplate . execute ( java.lang.String , new CollectionCallback < java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> ) throws org.springframework.data.mongodb.crossstore.MongoException , org.springframework.data.mongodb.crossstore.DataAccessException { for ( Document org.springframework.data.mongodb.crossstore.Document : org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . find ( org.springframework.data.mongodb.crossstore.Document ) ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.mongodb.crossstore.Document . get ( java.lang.String ) ; if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , java.lang.String ) ; } if ( ! org.springframework.data.mongodb.crossstore.ChangeSet . getValues ( ) . containsKey ( java.lang.String ) ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.mongodb.crossstore.Document . get ( java.lang.String ) ; if ( java.lang.String == null ) { throw new DataIntegrityViolationException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( java.lang.String , ClassUtils . getDefaultClassLoader ( ) ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.crossstore.MongoTemplate . getConverter ( ) . read ( java.lang.Class<> , org.springframework.data.mongodb.crossstore.Document ) ; if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , java.lang.String ) ; } org.springframework.data.mongodb.crossstore.ChangeSet . set ( java.lang.String , java.lang.Object ) ; } } return null ; } } ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> ) throws org.springframework.data.mongodb.crossstore.MongoException , org.springframework.data.mongodb.crossstore.DataAccessException { for ( Document org.springframework.data.mongodb.crossstore.Document : org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . find ( org.springframework.data.mongodb.crossstore.Document ) ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.mongodb.crossstore.Document . get ( java.lang.String ) ; if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , java.lang.String ) ; } if ( ! org.springframework.data.mongodb.crossstore.ChangeSet . getValues ( ) . containsKey ( java.lang.String ) ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.data.mongodb.crossstore.Document . get ( java.lang.String ) ; if ( java.lang.String == null ) { throw new DataIntegrityViolationException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( java.lang.String , ClassUtils . getDefaultClassLoader ( ) ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.crossstore.MongoTemplate . getConverter ( ) . read ( java.lang.Class<> , org.springframework.data.mongodb.crossstore.Document ) ; if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , java.lang.String ) ; } org.springframework.data.mongodb.crossstore.ChangeSet . set ( java.lang.String , java.lang.Object ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ChangeSetBacked org.springframework.data.mongodb.crossstore.ChangeSetBacked , ChangeSet org.springframework.data.mongodb.crossstore.ChangeSet ) throws org.springframework.data.mongodb.crossstore.DataAccessException { if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , org.springframework.data.mongodb.crossstore.ChangeSetBacked ) ; } if ( org.springframework.data.mongodb.crossstore.EntityManagerFactory == null ) { throw new DataAccessResourceFailureException ( STRING ) ; } return org.springframework.data.mongodb.crossstore.EntityManagerFactory . getPersistenceUnitUtil ( ) . getIdentifier ( org.springframework.data.mongodb.crossstore.ChangeSetBacked ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ChangeSetBacked org.springframework.data.mongodb.crossstore.ChangeSetBacked , ChangeSet org.springframework.data.mongodb.crossstore.ChangeSet ) throws org.springframework.data.mongodb.crossstore.DataAccessException { if ( org.springframework.data.mongodb.crossstore.ChangeSet == null ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING ) ; return NUMBER ; } if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , org.springframework.data.mongodb.crossstore.ChangeSet . getValues ( ) ) ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.data.mongodb.crossstore.ChangeSetBacked . getClass ( ) ) ; if ( org.springframework.data.mongodb.crossstore.MongoTemplate . getCollection ( java.lang.String ) == null ) { org.springframework.data.mongodb.crossstore.MongoTemplate . createCollection ( java.lang.String ) ; } for ( java.lang.String java.lang.String : org.springframework.data.mongodb.crossstore.ChangeSet . getValues ( ) . keySet ( ) ) { if ( java.lang.String != null && ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( ChangeSetPersister . ID_KEY ) ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.crossstore.ChangeSet . getValues ( ) . get ( java.lang.String ) ; final Document org.springframework.data.mongodb.crossstore.Document = new Document ( ) ; org.springframework.data.mongodb.crossstore.Document . put ( java.lang.String , java.lang.Object ( org.springframework.data.mongodb.crossstore.ChangeSetBacked , org.springframework.data.mongodb.crossstore.ChangeSet ) ) ; org.springframework.data.mongodb.crossstore.Document . put ( java.lang.String , org.springframework.data.mongodb.crossstore.ChangeSetBacked . getClass ( ) . getName ( ) ) ; org.springframework.data.mongodb.crossstore.Document . put ( java.lang.String , java.lang.String ) ; final Document org.springframework.data.mongodb.crossstore.Document = org.springframework.data.mongodb.crossstore.MongoTemplate . execute ( java.lang.String , new CollectionCallback < Document > ( ) { public org.springframework.data.mongodb.crossstore.Document org.springframework.data.mongodb.crossstore.Document ( MongoCollection < Document > org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> )							throws org.springframework.data.mongodb.crossstore.MongoException , org.springframework.data.mongodb.crossstore.DataAccessException { Document org.springframework.data.mongodb.crossstore.Document = org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . find ( org.springframework.data.mongodb.crossstore.Document ) . first ( ) ; return org.springframework.data.mongodb.crossstore.Document ; } } ) ; if ( java.lang.Object == null ) { if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , org.springframework.data.mongodb.crossstore.Document ) ; } org.springframework.data.mongodb.crossstore.MongoTemplate . execute ( java.lang.String , new CollectionCallback < java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> )								throws org.springframework.data.mongodb.crossstore.MongoException , org.springframework.data.mongodb.crossstore.DataAccessException { DeleteResult org.springframework.data.mongodb.crossstore.DeleteResult = org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . deleteMany ( org.springframework.data.mongodb.crossstore.Document ) ; return null ; } } ) ; } else { final Document org.springframework.data.mongodb.crossstore.Document = new Document ( ) ; org.springframework.data.mongodb.crossstore.Document . putAll ( org.springframework.data.mongodb.crossstore.Document ) ; if ( org.springframework.data.mongodb.crossstore.Logger . isDebugEnabled ( ) ) { org.springframework.data.mongodb.crossstore.Logger . debug ( STRING , org.springframework.data.mongodb.crossstore.Document ) ; } org.springframework.data.mongodb.crossstore.MongoTemplate . getConverter ( ) . write ( java.lang.Object , org.springframework.data.mongodb.crossstore.Document ) ; org.springframework.data.mongodb.crossstore.Document . put ( java.lang.String , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; if ( org.springframework.data.mongodb.crossstore.Document != null ) { org.springframework.data.mongodb.crossstore.Document . put ( STRING , org.springframework.data.mongodb.crossstore.Document . get ( STRING ) ) ; } org.springframework.data.mongodb.crossstore.MongoTemplate . execute ( java.lang.String , new CollectionCallback < java.lang.Object > ( ) { public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> )								throws org.springframework.data.mongodb.crossstore.MongoException , org.springframework.data.mongodb.crossstore.DataAccessException { if ( org.springframework.data.mongodb.crossstore.Document != null ) { org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . replaceOne ( Filters . eq ( STRING , org.springframework.data.mongodb.crossstore.Document . get ( STRING ) ) , org.springframework.data.mongodb.crossstore.Document ) ; } else { if ( org.springframework.data.mongodb.crossstore.Document . containsKey ( STRING ) && org.springframework.data.mongodb.crossstore.Document . get ( STRING ) == null ) { org.springframework.data.mongodb.crossstore.Document . remove ( STRING ) ; } org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . insertOne ( org.springframework.data.mongodb.crossstore.Document ) ; } return null ; } } ) ; } } } return NUMBER ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.crossstore.Document org.springframework.data.mongodb.crossstore.Document ( MongoCollection < Document > org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> )							throws org.springframework.data.mongodb.crossstore.MongoException , org.springframework.data.mongodb.crossstore.DataAccessException { Document org.springframework.data.mongodb.crossstore.Document = org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . find ( org.springframework.data.mongodb.crossstore.Document ) . first ( ) ; return org.springframework.data.mongodb.crossstore.Document ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> )								throws org.springframework.data.mongodb.crossstore.MongoException , org.springframework.data.mongodb.crossstore.DataAccessException { DeleteResult org.springframework.data.mongodb.crossstore.DeleteResult = org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . deleteMany ( org.springframework.data.mongodb.crossstore.Document ) ; return null ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoCollection < Document > org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> )								throws org.springframework.data.mongodb.crossstore.MongoException , org.springframework.data.mongodb.crossstore.DataAccessException { if ( org.springframework.data.mongodb.crossstore.Document != null ) { org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . replaceOne ( Filters . eq ( STRING , org.springframework.data.mongodb.crossstore.Document . get ( STRING ) ) , org.springframework.data.mongodb.crossstore.Document ) ; } else { if ( org.springframework.data.mongodb.crossstore.Document . containsKey ( STRING ) && org.springframework.data.mongodb.crossstore.Document . get ( STRING ) == null ) { org.springframework.data.mongodb.crossstore.Document . remove ( STRING ) ; } org.springframework.data.mongodb.crossstore.MongoCollection<org.springframework.data.mongodb.crossstore.Document> . insertOne ( org.springframework.data.mongodb.crossstore.Document ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<? extends org.springframework.data.mongodb.crossstore.ChangeSetBacked> < ? extends ChangeSetBacked > java.lang.Class<? extends org.springframework.data.mongodb.crossstore.ChangeSetBacked> ) { return org.springframework.data.mongodb.crossstore.MongoTemplate . getCollectionName ( java.lang.Class<> ) ; }  <METHOD_END>
