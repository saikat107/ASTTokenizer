<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ConvertingComparator <> ( null , this . org.springframework.core.convert.converter.ConvertingComparatorTests.StringToInteger ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ConvertingComparator < java.lang.String , java.lang.Integer > ( this . org.springframework.core.convert.converter.ConvertingComparatorTests.TestComparator , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ConvertingComparator < java.lang.String , java.lang.Integer > ( this . org.springframework.core.convert.converter.ConvertingComparatorTests.TestComparator , null , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ConvertingComparator < java.lang.String , java.lang.Integer > ( this . org.springframework.core.convert.converter.ConvertingComparatorTests.TestComparator , this . org.springframework.core.convert.converter.ConversionService , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingComparator < java.lang.String , java.lang.Integer > org.springframework.core.convert.converter.ConvertingComparator<java.lang.String,java.lang.Integer> = new ConvertingComparator <> ( this . org.springframework.core.convert.converter.ConvertingComparatorTests.TestComparator , this . org.springframework.core.convert.converter.ConvertingComparatorTests.StringToInteger ) ; void ( org.springframework.core.convert.converter.ConvertingComparator<java.lang.String,java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConvertingComparator < java.lang.String , java.lang.Integer > org.springframework.core.convert.converter.ConvertingComparator<java.lang.String,java.lang.Integer> = new ConvertingComparator <> ( org.springframework.core.convert.converter.ConvertingComparatorTests.TestComparator , org.springframework.core.convert.converter.ConversionService , java.lang.Integer .class ) ; void ( org.springframework.core.convert.converter.ConvertingComparator<java.lang.String,java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new ConvertingComparator <> ( org.springframework.core.convert.converter.ConvertingComparatorTests.TestComparator , org.springframework.core.convert.converter.ConvertingComparatorTests.StringToInteger ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConvertingComparator < java.lang.String , java.lang.Integer > org.springframework.core.convert.converter.ConvertingComparator<java.lang.String,java.lang.Integer> ) { assertThat ( org.springframework.core.convert.converter.ConvertingComparator<java.lang.String,java.lang.Integer> . compare ( STRING , STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.core.convert.converter.ConvertingComparator<java.lang.String,java.lang.Integer> . compare ( STRING , STRING ) , is ( - NUMBER ) ) ; assertThat ( org.springframework.core.convert.converter.ConvertingComparator<java.lang.String,java.lang.Integer> . compare ( STRING , STRING ) , is ( NUMBER ) ) ; org.springframework.core.convert.converter.ConvertingComparatorTests.TestComparator . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> < java.util.Map.Entry<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> = java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> ( ) ; java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>> = ConvertingComparator . mapEntryKeys ( new ComparableComparator < java.lang.String > ( ) ) ; java.util.Collections . void ( java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> , java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>> ) ; assertThat ( java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> . java.util.Map.Entry<java.lang.String,java.lang.Integer> ( NUMBER ) . java.lang.String ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> < java.util.Map.Entry<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> = java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> ( ) ; java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>> < java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>> = ConvertingComparator . mapEntryValues ( new ComparableComparator < java.lang.Integer > ( ) ) ; java.util.Collections . void ( java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> , java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>> ) ; assertThat ( java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> . java.util.Map.Entry<java.lang.String,java.lang.Integer> ( NUMBER ) . java.lang.Integer ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> < java.util.Map.Entry<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> ( ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.LinkedHashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> < java.util.Map.Entry<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > > java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> = new java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> <> ( java.util.Map<java.lang.String,java.lang.Integer> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Integer>> ( ) ) ; assertThat ( java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> . java.util.Map.Entry<java.lang.String,java.lang.Integer> ( NUMBER ) . java.lang.String ( ) , is ( STRING ) ) ; return java.util.ArrayList<java.util.Map.Entry<java.lang.String,java.lang.Integer>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String ) { return new java.lang.Integer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer ) { assertThat ( java.lang.Integer , instanceOf ( java.lang.Integer .class ) ) ; assertThat ( java.lang.Integer , instanceOf ( java.lang.Integer .class ) ) ; this . boolean = true ; return super. compare ( java.lang.Integer , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertThat ( this . boolean , is ( true ) ) ; }  <METHOD_END>
