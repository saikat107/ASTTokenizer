<METHOD_START> @ Before public void void ( ) java.lang.Exception { javax.naming.Context = mock ( javax.naming.Context .class ) ; org.springframework.jms.core.ConnectionFactory = mock ( ConnectionFactory .class ) ; org.springframework.jms.core.Connection = mock ( Connection .class ) ; org.springframework.jms.core.Session = mock ( Session .class ) ; org.springframework.jms.core.Destination = mock ( Queue .class ) ; given ( org.springframework.jms.core.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.core.Connection ) ; given ( org.springframework.jms.core.Connection . createSession ( boolean ( ) , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.core.Session ) ; given ( org.springframework.jms.core.Session . getTransacted ( ) ) . willReturn ( boolean ( ) ) ; given ( javax.naming.Context . java.lang.Object ( STRING ) ) . willReturn ( org.springframework.jms.core.Destination ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jms.core.JmsTemplate org.springframework.jms.core.JmsTemplate ( ) { JmsTemplate org.springframework.jms.core.JmsTemplate = new JmsTemplate ( ) ; JndiDestinationResolver org.springframework.jms.core.JndiDestinationResolver = new JndiDestinationResolver ( ) ; org.springframework.jms.core.JndiDestinationResolver . setJndiTemplate ( new JndiTemplate ( ) { @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) { return javax.naming.Context ; } } ) ; org.springframework.jms.core.JmsTemplate . setDestinationResolver ( org.springframework.jms.core.JndiDestinationResolver ) ; org.springframework.jms.core.JmsTemplate . setSessionTransacted ( boolean ( ) ) ; return org.springframework.jms.core.JmsTemplate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) { return javax.naming.Context ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.core.Session org.springframework.jms.core.Session ( ) { return org.springframework.jms.core.Session ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JMSException org.springframework.jms.core.JMSException = new JMSException ( STRING ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( STRING ) ; org.springframework.jms.core.JMSException . setLinkedException ( java.lang.Exception ) ; JmsException org.springframework.jms.core.JmsException = JmsUtils . convertJmsAccessException ( org.springframework.jms.core.JMSException ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; java.io.PrintWriter java.io.PrintWriter = new java.io.PrintWriter ( java.io.StringWriter ) ; org.springframework.jms.core.JmsException . printStackTrace ( java.io.PrintWriter ) ; java.lang.String java.lang.String = java.io.StringWriter . java.lang.String ( ) ; assertTrue ( STRING , java.lang.String . int ( STRING ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; MessageProducer org.springframework.jms.core.MessageProducer = mock ( MessageProducer .class ) ; given ( org.springframework.jms.core.Session . createProducer ( null ) ) . willReturn ( org.springframework.jms.core.MessageProducer ) ; given ( org.springframework.jms.core.MessageProducer . getPriority ( ) ) . willReturn ( NUMBER ) ; org.springframework.jms.core.JmsTemplate . execute ( new ProducerCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session , MessageProducer org.springframework.jms.core.MessageProducer ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; org.springframework.jms.core.MessageProducer . getPriority ( ) ; return null ; } } ) ; verify ( org.springframework.jms.core.MessageProducer ) . close ( ) ; verify ( org.springframework.jms.core.Session ) . close ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session , MessageProducer org.springframework.jms.core.MessageProducer ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; org.springframework.jms.core.MessageProducer . getPriority ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; org.springframework.jms.core.JmsTemplate . setMessageIdEnabled ( false ) ; org.springframework.jms.core.JmsTemplate . setMessageTimestampEnabled ( false ) ; MessageProducer org.springframework.jms.core.MessageProducer = mock ( MessageProducer .class ) ; given ( org.springframework.jms.core.Session . createProducer ( null ) ) . willReturn ( org.springframework.jms.core.MessageProducer ) ; given ( org.springframework.jms.core.MessageProducer . getPriority ( ) ) . willReturn ( NUMBER ) ; org.springframework.jms.core.JmsTemplate . execute ( new ProducerCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session , MessageProducer org.springframework.jms.core.MessageProducer ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; org.springframework.jms.core.MessageProducer . getPriority ( ) ; return null ; } } ) ; verify ( org.springframework.jms.core.MessageProducer ) . setDisableMessageID ( true ) ; verify ( org.springframework.jms.core.MessageProducer ) . setDisableMessageTimestamp ( true ) ; verify ( org.springframework.jms.core.MessageProducer ) . close ( ) ; verify ( org.springframework.jms.core.Session ) . close ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session , MessageProducer org.springframework.jms.core.MessageProducer ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; org.springframework.jms.core.MessageProducer . getPriority ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; org.springframework.jms.core.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; return null ; } } ) ; verify ( org.springframework.jms.core.Session ) . close ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SingleConnectionFactory org.springframework.jms.core.SingleConnectionFactory = new SingleConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.SingleConnectionFactory ) ; TransactionSynchronizationManager . initSynchronization ( ) ; try { org.springframework.jms.core.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; return null ; } } ) ; org.springframework.jms.core.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; return null ; } } ) ; assertSame ( org.springframework.jms.core.Session , ConnectionFactoryUtils . getTransactionalSession ( org.springframework.jms.core.SingleConnectionFactory , null , false ) ) ; assertSame ( org.springframework.jms.core.Session , ConnectionFactoryUtils . getTransactionalSession ( org.springframework.jms.core.SingleConnectionFactory , org.springframework.jms.core.SingleConnectionFactory . createConnection ( ) , false ) ) ; TransactionAwareConnectionFactoryProxy org.springframework.jms.core.TransactionAwareConnectionFactoryProxy = new TransactionAwareConnectionFactoryProxy ( org.springframework.jms.core.SingleConnectionFactory ) ; Connection org.springframework.jms.core.Connection = org.springframework.jms.core.TransactionAwareConnectionFactoryProxy . createConnection ( ) ; Session org.springframework.jms.core.Session = org.springframework.jms.core.Connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; org.springframework.jms.core.Session . getTransacted ( ) ; org.springframework.jms.core.Session . close ( ) ; org.springframework.jms.core.Connection . close ( ) ; java.util.List<org.springframework.jms.core.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.jms.core.TransactionSynchronization> = TransactionSynchronizationManager . getSynchronizations ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jms.core.TransactionSynchronization> . size ( ) ) ; TransactionSynchronization org.springframework.jms.core.TransactionSynchronization = java.util.List<org.springframework.jms.core.TransactionSynchronization> . get ( NUMBER ) ; org.springframework.jms.core.TransactionSynchronization . beforeCommit ( false ) ; org.springframework.jms.core.TransactionSynchronization . beforeCompletion ( ) ; org.springframework.jms.core.TransactionSynchronization . afterCommit ( ) ; org.springframework.jms.core.TransactionSynchronization . afterCompletion ( TransactionSynchronization . STATUS_UNKNOWN ) ; } finally { TransactionSynchronizationManager . clearSynchronization ( ) ; org.springframework.jms.core.SingleConnectionFactory . destroy ( ) ; } assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; verify ( org.springframework.jms.core.Connection ) . start ( ) ; if ( boolean ( ) ) { verify ( org.springframework.jms.core.Session ) . commit ( ) ; } verify ( org.springframework.jms.core.Session ) . close ( ) ; verify ( org.springframework.jms.core.Connection ) . stop ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { org.springframework.jms.core.Session . getTransacted ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false , true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , true , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , true , false , false ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , boolean boolean , boolean boolean , boolean boolean ) throws java.lang.Exception { JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; java.lang.String java.lang.String = STRING ; if ( boolean ) { if ( boolean ) { org.springframework.jms.core.JmsTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; } else { org.springframework.jms.core.JmsTemplate . setDefaultDestinationName ( java.lang.String ) ; } } if ( boolean ) { org.springframework.jms.core.JmsTemplate . setMessageIdEnabled ( false ) ; org.springframework.jms.core.JmsTemplate . setMessageTimestampEnabled ( false ) ; } MessageProducer org.springframework.jms.core.MessageProducer = mock ( MessageProducer .class ) ; TextMessage org.springframework.jms.core.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.core.Session . createProducer ( org.springframework.jms.core.Destination ) ) . willReturn ( org.springframework.jms.core.MessageProducer ) ; given ( org.springframework.jms.core.Session . createTextMessage ( STRING ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; if ( ! boolean ) { org.springframework.jms.core.JmsTemplate . setExplicitQosEnabled ( true ) ; org.springframework.jms.core.JmsTemplate . setDeliveryMode ( int ) ; org.springframework.jms.core.JmsTemplate . setPriority ( int ) ; org.springframework.jms.core.JmsTemplate . setTimeToLive ( int ) ; } if ( boolean ) { org.springframework.jms.core.JmsTemplate . send ( new MessageCreator ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Session . createTextMessage ( STRING ) ; } } ) ; } else { if ( boolean ) { org.springframework.jms.core.JmsTemplate . send ( org.springframework.jms.core.Destination , new MessageCreator ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Session . createTextMessage ( STRING ) ; } } ) ; } else { org.springframework.jms.core.JmsTemplate . send ( java.lang.String , new MessageCreator ( ) { @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Session . createTextMessage ( STRING ) ; } } ) ; } } if ( boolean ( ) ) { verify ( org.springframework.jms.core.Session ) . commit ( ) ; } if ( boolean ) { verify ( org.springframework.jms.core.MessageProducer ) . setDisableMessageID ( true ) ; verify ( org.springframework.jms.core.MessageProducer ) . setDisableMessageTimestamp ( true ) ; } if ( boolean ) { verify ( org.springframework.jms.core.MessageProducer ) . send ( org.springframework.jms.core.TextMessage ) ; } else { verify ( org.springframework.jms.core.MessageProducer ) . send ( org.springframework.jms.core.TextMessage , int , int , int ) ; } verify ( org.springframework.jms.core.MessageProducer ) . close ( ) ; verify ( org.springframework.jms.core.Session ) . close ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Session . createTextMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Session . createTextMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.core.Message org.springframework.jms.core.Message ( Session org.springframework.jms.core.Session ) throws org.springframework.jms.core.JMSException { return org.springframework.jms.core.Session . createTextMessage ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; org.springframework.jms.core.JmsTemplate . setMessageConverter ( new SimpleMessageConverter ( ) ) ; java.lang.String java.lang.String = STRING ; MessageProducer org.springframework.jms.core.MessageProducer = mock ( MessageProducer .class ) ; TextMessage org.springframework.jms.core.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.core.Session . createProducer ( org.springframework.jms.core.Destination ) ) . willReturn ( org.springframework.jms.core.MessageProducer ) ; given ( org.springframework.jms.core.Session . createTextMessage ( STRING ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; org.springframework.jms.core.JmsTemplate . convertAndSend ( org.springframework.jms.core.Destination , java.lang.String ) ; verify ( org.springframework.jms.core.MessageProducer ) . send ( org.springframework.jms.core.TextMessage ) ; verify ( org.springframework.jms.core.MessageProducer ) . close ( ) ; if ( boolean ( ) ) { verify ( org.springframework.jms.core.Session ) . commit ( ) ; } verify ( org.springframework.jms.core.Session ) . close ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true , false , false , false , false , JmsTemplate . RECEIVE_TIMEOUT_INDEFINITE_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , true , false , false , false , false , JmsTemplate . RECEIVE_TIMEOUT_INDEFINITE_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , false , false , false , true , JmsTemplate . RECEIVE_TIMEOUT_INDEFINITE_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , false , true , false , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false , false , false , false , true , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true , false , false , true , true , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , true , false , false , true , true , JmsTemplate . RECEIVE_TIMEOUT_NO_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , false , false , true , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , false , true , true , true , JmsTemplate . RECEIVE_TIMEOUT_INDEFINITE_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false , false , false , true , false , JmsTemplate . RECEIVE_TIMEOUT_NO_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true , true , false , false , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , true , true , false , false , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false , true , false , false , true , JmsTemplate . RECEIVE_TIMEOUT_INDEFINITE_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , true , false , false , true , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true , true , false , true , true , JmsTemplate . RECEIVE_TIMEOUT_NO_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false , true , false , true , true , JmsTemplate . RECEIVE_TIMEOUT_INDEFINITE_WAIT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , true , false , true , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , boolean boolean , boolean boolean , boolean boolean , boolean boolean , boolean boolean , long long )			throws java.lang.Exception { JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; java.lang.String java.lang.String = STRING ; if ( boolean ) { if ( boolean ) { org.springframework.jms.core.JmsTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; } else { org.springframework.jms.core.JmsTemplate . setDefaultDestinationName ( java.lang.String ) ; } } if ( boolean ) { org.springframework.jms.core.JmsTemplate . setPubSubNoLocal ( true ) ; } org.springframework.jms.core.JmsTemplate . setReceiveTimeout ( long ) ; MessageConsumer org.springframework.jms.core.MessageConsumer = mock ( MessageConsumer .class ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.jms.core.Session . createConsumer ( org.springframework.jms.core.Destination , boolean ? java.lang.String : null ) ) . willReturn ( org.springframework.jms.core.MessageConsumer ) ; if ( ! boolean ( ) && ! boolean ( ) ) { given ( org.springframework.jms.core.Session . getAcknowledgeMode ( ) ) . willReturn ( boolean ? Session . CLIENT_ACKNOWLEDGE : Session . AUTO_ACKNOWLEDGE ) ; } TextMessage org.springframework.jms.core.TextMessage = mock ( TextMessage .class ) ; if ( boolean ) { given ( org.springframework.jms.core.TextMessage . getText ( ) ) . willReturn ( STRING ) ; } if ( long == JmsTemplate . RECEIVE_TIMEOUT_NO_WAIT ) { given ( org.springframework.jms.core.MessageConsumer . receiveNoWait ( ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; } else if ( long == JmsTemplate . RECEIVE_TIMEOUT_INDEFINITE_WAIT ) { given ( org.springframework.jms.core.MessageConsumer . receive ( ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; } else { given ( org.springframework.jms.core.MessageConsumer . receive ( long ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; } Message org.springframework.jms.core.Message = null ; java.lang.String java.lang.String = null ; if ( boolean ) { if ( boolean ) { java.lang.String = ( java.lang.String ) ( boolean ? org.springframework.jms.core.JmsTemplate . receiveSelectedAndConvert ( java.lang.String ) : org.springframework.jms.core.JmsTemplate . receiveAndConvert ( ) ) ; } else { org.springframework.jms.core.Message = ( boolean ? org.springframework.jms.core.JmsTemplate . receiveSelected ( java.lang.String ) : org.springframework.jms.core.JmsTemplate . receive ( ) ) ; } } else if ( boolean ) { if ( boolean ) { java.lang.String = ( java.lang.String ) ( boolean ? org.springframework.jms.core.JmsTemplate . receiveSelectedAndConvert ( org.springframework.jms.core.Destination , java.lang.String ) : org.springframework.jms.core.JmsTemplate . receiveAndConvert ( org.springframework.jms.core.Destination ) ) ; } else { org.springframework.jms.core.Message = ( boolean ? org.springframework.jms.core.JmsTemplate . receiveSelected ( org.springframework.jms.core.Destination , java.lang.String ) : org.springframework.jms.core.JmsTemplate . receive ( org.springframework.jms.core.Destination ) ) ; } } else { if ( boolean ) { java.lang.String = ( java.lang.String ) ( boolean ? org.springframework.jms.core.JmsTemplate . receiveSelectedAndConvert ( java.lang.String , java.lang.String ) : org.springframework.jms.core.JmsTemplate . receiveAndConvert ( java.lang.String ) ) ; } else { org.springframework.jms.core.Message = ( boolean ? org.springframework.jms.core.JmsTemplate . receiveSelected ( java.lang.String , java.lang.String ) : org.springframework.jms.core.JmsTemplate . receive ( java.lang.String ) ) ; } } if ( boolean ) { assertEquals ( STRING , STRING , java.lang.String ) ; } else { assertEquals ( STRING , org.springframework.jms.core.Message , org.springframework.jms.core.TextMessage ) ; } verify ( org.springframework.jms.core.Connection ) . start ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; if ( boolean ( ) ) { verify ( org.springframework.jms.core.Session ) . commit ( ) ; } verify ( org.springframework.jms.core.Session ) . close ( ) ; if ( ! boolean ( ) && boolean ) { verify ( org.springframework.jms.core.TextMessage ) . acknowledge ( ) ; } verify ( org.springframework.jms.core.MessageConsumer ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , true , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , boolean boolean , long long )			throws java.lang.Exception { JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; java.lang.String java.lang.String = STRING ; if ( boolean ) { if ( boolean ) { org.springframework.jms.core.JmsTemplate . setDefaultDestination ( org.springframework.jms.core.Destination ) ; } else { org.springframework.jms.core.JmsTemplate . setDefaultDestinationName ( java.lang.String ) ; } } org.springframework.jms.core.JmsTemplate . setReceiveTimeout ( long ) ; Session org.springframework.jms.core.Session = org.springframework.jms.core.Session ( ) ; TemporaryQueue org.springframework.jms.core.TemporaryQueue = mock ( TemporaryQueue .class ) ; MessageProducer org.springframework.jms.core.MessageProducer = mock ( MessageProducer .class ) ; given ( org.springframework.jms.core.Session . createProducer ( org.springframework.jms.core.Destination ) ) . willReturn ( org.springframework.jms.core.MessageProducer ) ; given ( org.springframework.jms.core.Session . createTemporaryQueue ( ) ) . willReturn ( org.springframework.jms.core.TemporaryQueue ) ; MessageConsumer org.springframework.jms.core.MessageConsumer = mock ( MessageConsumer .class ) ; given ( org.springframework.jms.core.Session . createConsumer ( org.springframework.jms.core.TemporaryQueue ) ) . willReturn ( org.springframework.jms.core.MessageConsumer ) ; TextMessage org.springframework.jms.core.TextMessage = mock ( TextMessage .class ) ; MessageCreator org.springframework.jms.core.MessageCreator = mock ( MessageCreator .class ) ; given ( org.springframework.jms.core.MessageCreator . createMessage ( org.springframework.jms.core.Session ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; TextMessage org.springframework.jms.core.TextMessage = mock ( TextMessage .class ) ; if ( long == JmsTemplate . RECEIVE_TIMEOUT_NO_WAIT ) { given ( org.springframework.jms.core.MessageConsumer . receiveNoWait ( ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; } else if ( long == JmsTemplate . RECEIVE_TIMEOUT_INDEFINITE_WAIT ) { given ( org.springframework.jms.core.MessageConsumer . receive ( ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; } else { given ( org.springframework.jms.core.MessageConsumer . receive ( long ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; } Message org.springframework.jms.core.Message = null ; if ( boolean ) { org.springframework.jms.core.Message = org.springframework.jms.core.JmsTemplate . sendAndReceive ( org.springframework.jms.core.MessageCreator ) ; } else if ( boolean ) { org.springframework.jms.core.Message = org.springframework.jms.core.JmsTemplate . sendAndReceive ( org.springframework.jms.core.Destination , org.springframework.jms.core.MessageCreator ) ; } else { org.springframework.jms.core.Message = org.springframework.jms.core.JmsTemplate . sendAndReceive ( java.lang.String , org.springframework.jms.core.MessageCreator ) ; } verify ( org.springframework.jms.core.TextMessage ) . setJMSReplyTo ( org.springframework.jms.core.TemporaryQueue ) ; assertSame ( STRING , org.springframework.jms.core.TextMessage , org.springframework.jms.core.Message ) ; verify ( org.springframework.jms.core.Connection ) . start ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; verify ( org.springframework.jms.core.Session ) . close ( ) ; verify ( org.springframework.jms.core.MessageConsumer ) . close ( ) ; verify ( org.springframework.jms.core.MessageProducer ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , org . springframework . jms . org.springframework.jms.IllegalStateException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , InvalidClientIDException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , InvalidDestinationException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , InvalidSelectorException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , JmsSecurityException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , MessageEOFException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , MessageFormatException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , MessageNotReadableException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , MessageNotWriteableException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , ResourceAllocationException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , TransactionInProgressException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , TransactionRolledBackException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new javax . javax.jms . javax.jms ( STRING ) , UncategorizedJmsException .class ) ; }  <METHOD_END>
<METHOD_START> protected void void ( JMSException org.springframework.jms.core.JMSException , java.lang.Class<? extends org.springframework.jms.core.JmsException> < ? extends JmsException > java.lang.Class<? extends org.springframework.jms.core.JmsException> ) throws java.lang.Exception { JmsTemplate org.springframework.jms.core.JmsTemplate = org.springframework.jms.core.JmsTemplate ( ) ; org.springframework.jms.core.JmsTemplate . setConnectionFactory ( org.springframework.jms.core.ConnectionFactory ) ; org.springframework.jms.core.JmsTemplate . setMessageConverter ( new SimpleMessageConverter ( ) ) ; java.lang.String java.lang.String = STRING ; MessageProducer org.springframework.jms.core.MessageProducer = mock ( MessageProducer .class ) ; TextMessage org.springframework.jms.core.TextMessage = mock ( TextMessage .class ) ; reset ( org.springframework.jms.core.Session ) ; given ( org.springframework.jms.core.Session . createProducer ( org.springframework.jms.core.Destination ) ) . willReturn ( org.springframework.jms.core.MessageProducer ) ; given ( org.springframework.jms.core.Session . createTextMessage ( STRING ) ) . willReturn ( org.springframework.jms.core.TextMessage ) ; willThrow ( org.springframework.jms.core.JMSException ) . given ( org.springframework.jms.core.MessageProducer ) . send ( org.springframework.jms.core.TextMessage ) ; try { org.springframework.jms.core.JmsTemplate . convertAndSend ( org.springframework.jms.core.Destination , java.lang.String ) ; fail ( STRING ) ; } catch ( JmsException org.springframework.jms.core.JmsException ) { assertEquals ( java.lang.Class<> , org.springframework.jms.core.JmsException . getClass ( ) ) ; assertEquals ( org.springframework.jms.core.JMSException , org.springframework.jms.core.JmsException . getCause ( ) ) ; } verify ( org.springframework.jms.core.MessageProducer ) . close ( ) ; verify ( org.springframework.jms.core.Session ) . close ( ) ; verify ( org.springframework.jms.core.Connection ) . close ( ) ; }  <METHOD_END>
