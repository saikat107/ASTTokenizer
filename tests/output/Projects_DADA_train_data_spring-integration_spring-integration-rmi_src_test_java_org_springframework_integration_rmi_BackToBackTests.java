<METHOD_START> @ Test public void void ( ) { org.springframework.integration.rmi.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.rmi.Message<?> = this . org.springframework.integration.rmi.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.rmi.Message<> ) ; assertEquals ( STRING , org.springframework.integration.rmi.Message<> . getPayload ( ) ) ; verify ( this . org.springframework.integration.rmi.PlatformTransactionManager ) . getTransaction ( any ( TransactionDefinition .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.rmi.SubscribableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.rmi.Message<?> = this . org.springframework.integration.rmi.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.rmi.Message<> ) ; assertEquals ( STRING , org.springframework.integration.rmi.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.rmi.AbstractApplicationContext . setId ( STRING ) ; try { org.springframework.integration.rmi.SubscribableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
