<METHOD_START> private void ( Configuration org.springframework.boot.logging.log4j2.Configuration , java.lang.String [] java.lang.String[] ) { super( STRING , STRING , java.lang.String[] , org.springframework.boot.logging.log4j2.Configuration ); this . org.springframework.boot.logging.log4j2.ExtendedThrowablePatternConverter = ExtendedThrowablePatternConverter . newInstance ( org.springframework.boot.logging.log4j2.Configuration , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LogEvent org.springframework.boot.logging.log4j2.LogEvent , java.lang.StringBuilder java.lang.StringBuilder ) { if ( org.springframework.boot.logging.log4j2.LogEvent . getThrown ( ) != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( this . options . getSeparator ( ) ) ; this . org.springframework.boot.logging.log4j2.ExtendedThrowablePatternConverter . format ( org.springframework.boot.logging.log4j2.LogEvent , java.lang.StringBuilder ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . options . getSeparator ( ) ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.logging.log4j2.ExtendedWhitespaceThrowablePatternConverter org.springframework.boot.logging.log4j2.ExtendedWhitespaceThrowablePatternConverter ( Configuration org.springframework.boot.logging.log4j2.Configuration , java.lang.String [] java.lang.String[] ) { return new org.springframework.boot.logging.log4j2.ExtendedWhitespaceThrowablePatternConverter ( org.springframework.boot.logging.log4j2.Configuration , java.lang.String[] ) ; }  <METHOD_END>
