<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Locale ... java.util.Locale[] ) { this . java.util.Locale[] = java.util.Locale[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.web.servlet.view.BeansException { if ( this . java.util.Locale[] != null ) { for ( java.util.Locale java.util.Locale : this . java.util.Locale[] ) { org.springframework.web.servlet.view.BeanFactory ( java.util.Locale ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.view.View org.springframework.web.servlet.view.View ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.lang.Exception { BeanFactory org.springframework.web.servlet.view.BeanFactory = org.springframework.web.servlet.view.BeanFactory ( java.util.Locale ) ; try { return org.springframework.web.servlet.view.BeanFactory . getBean ( java.lang.String , View .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.web.servlet.view.NoSuchBeanDefinitionException ) { return null ; } }  <METHOD_END>
<METHOD_START> protected synchronized org.springframework.web.servlet.view.BeanFactory org.springframework.web.servlet.view.BeanFactory ( java.util.Locale java.util.Locale ) throws org.springframework.web.servlet.view.BeansException { if ( isCache ( ) ) { BeanFactory org.springframework.web.servlet.view.BeanFactory = this . java.util.Map<java.util.Locale,org.springframework.web.servlet.view.BeanFactory> . get ( java.util.Locale ) ; if ( org.springframework.web.servlet.view.BeanFactory != null ) { return org.springframework.web.servlet.view.BeanFactory ; } } java.util.List<java.util.ResourceBundle> < java.util.ResourceBundle > java.util.List<java.util.ResourceBundle> = new java.util.LinkedList<java.util.ResourceBundle> <> ( ) ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { java.util.ResourceBundle java.util.ResourceBundle = java.util.ResourceBundle ( java.lang.String , java.util.Locale ) ; java.util.List<java.util.ResourceBundle> . boolean ( java.util.ResourceBundle ) ; } if ( isCache ( ) ) { BeanFactory org.springframework.web.servlet.view.BeanFactory = this . java.util.Map<java.util.List<java.util.ResourceBundle>,org.springframework.web.servlet.view.ConfigurableApplicationContext> . get ( java.util.List<java.util.ResourceBundle> ) ; if ( org.springframework.web.servlet.view.BeanFactory != null ) { this . java.util.Map<java.util.Locale,org.springframework.web.servlet.view.BeanFactory> . put ( java.util.Locale , org.springframework.web.servlet.view.BeanFactory ) ; return org.springframework.web.servlet.view.BeanFactory ; } } GenericWebApplicationContext org.springframework.web.servlet.view.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.servlet.view.GenericWebApplicationContext . setParent ( getApplicationContext ( ) ) ; org.springframework.web.servlet.view.GenericWebApplicationContext . setServletContext ( getServletContext ( ) ) ; PropertiesBeanDefinitionReader org.springframework.web.servlet.view.PropertiesBeanDefinitionReader = new PropertiesBeanDefinitionReader ( org.springframework.web.servlet.view.GenericWebApplicationContext ) ; org.springframework.web.servlet.view.PropertiesBeanDefinitionReader . setDefaultParentBean ( this . java.lang.String ) ; for ( java.util.ResourceBundle java.util.ResourceBundle : java.util.List<java.util.ResourceBundle> ) { org.springframework.web.servlet.view.PropertiesBeanDefinitionReader . registerBeanDefinitions ( java.util.ResourceBundle ) ; } org.springframework.web.servlet.view.GenericWebApplicationContext . refresh ( ) ; if ( isCache ( ) ) { this . java.util.Map<java.util.Locale,org.springframework.web.servlet.view.BeanFactory> . put ( java.util.Locale , org.springframework.web.servlet.view.GenericWebApplicationContext ) ; this . java.util.Map<java.util.List<java.util.ResourceBundle>,org.springframework.web.servlet.view.ConfigurableApplicationContext> . put ( java.util.List<java.util.ResourceBundle> , org.springframework.web.servlet.view.GenericWebApplicationContext ) ; } return org.springframework.web.servlet.view.GenericWebApplicationContext ; }  <METHOD_END>
<METHOD_START> protected java.util.ResourceBundle java.util.ResourceBundle ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.util.MissingResourceException { return java.util.ResourceBundle . java.util.ResourceBundle ( java.lang.String , java.util.Locale , java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.web.servlet.view.BeansException { for ( ConfigurableApplicationContext org.springframework.web.servlet.view.ConfigurableApplicationContext : this . java.util.Map<java.util.List<java.util.ResourceBundle>,org.springframework.web.servlet.view.ConfigurableApplicationContext> . values ( ) ) { org.springframework.web.servlet.view.ConfigurableApplicationContext . close ( ) ; } this . java.util.Map<java.util.Locale,org.springframework.web.servlet.view.BeanFactory> . clear ( ) ; this . java.util.Map<java.util.List<java.util.ResourceBundle>,org.springframework.web.servlet.view.ConfigurableApplicationContext> . clear ( ) ; }  <METHOD_END>
