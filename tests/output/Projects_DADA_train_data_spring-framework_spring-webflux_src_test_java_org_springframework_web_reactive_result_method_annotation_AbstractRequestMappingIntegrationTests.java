<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.HttpHandler org.springframework.web.reactive.result.method.annotation.HttpHandler ( ) { this . org.springframework.web.reactive.result.method.annotation.RestTemplate = org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) ; this . org.springframework.web.reactive.result.method.annotation.ApplicationContext = org.springframework.web.reactive.result.method.annotation.ApplicationContext ( ) ; return WebHttpHandlerBuilder . applicationContext ( this . org.springframework.web.reactive.result.method.annotation.ApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.reactive.result.method.annotation.ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ( )  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.method.annotation.RestTemplate org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) { return new RestTemplate ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.method.annotation.ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ( ) { return this . org.springframework.web.reactive.result.method.annotation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.result.method.annotation.RestTemplate org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) { return this . org.springframework.web.reactive.result.method.annotation.RestTemplate ; }  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> ( java.lang.String java.lang.String , MediaType org.springframework.web.reactive.result.method.annotation.MediaType , java.lang.Class<T> < T > java.lang.Class<T> ) throws java.lang.Exception { HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.result.method.annotation.HttpHeaders . setAccept ( java.util.Collections . java.util.List ( org.springframework.web.reactive.result.method.annotation.MediaType ) ) ; return org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.HttpHeaders ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> ( java.lang.String java.lang.String , HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Class<T> < T > java.lang.Class<T> ) throws java.lang.Exception { return org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.HttpHeaders ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> ( java.lang.String java.lang.String , MediaType org.springframework.web.reactive.result.method.annotation.MediaType , ParameterizedTypeReference < T > org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<T> )			throws java.lang.Exception { HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.result.method.annotation.HttpHeaders . setAccept ( java.util.Collections . java.util.List ( org.springframework.web.reactive.result.method.annotation.MediaType ) ) ; return this . org.springframework.web.reactive.result.method.annotation.RestTemplate . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.HttpHeaders ) , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<T> ) ; }  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> ( java.lang.String java.lang.String , HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Class<T> < T > java.lang.Class<T> )			throws java.lang.Exception { return org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.HttpHeaders ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> ( java.lang.String java.lang.String , MediaType org.springframework.web.reactive.result.method.annotation.MediaType , java.lang.Object java.lang.Object , MediaType org.springframework.web.reactive.result.method.annotation.MediaType , java.lang.Class<T> < T > java.lang.Class<T> )			throws java.lang.Exception { HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.result.method.annotation.HttpHeaders . setContentType ( org.springframework.web.reactive.result.method.annotation.MediaType ) ; if ( org.springframework.web.reactive.result.method.annotation.MediaType != null ) { org.springframework.web.reactive.result.method.annotation.HttpHeaders . setAccept ( java.util.Collections . java.util.List ( org.springframework.web.reactive.result.method.annotation.MediaType ) ) ; } return org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<?> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Object ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> ( java.lang.String java.lang.String , HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) throws java.lang.Exception { return org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<?> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Object ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> < T > org.springframework.web.reactive.result.method.annotation.ResponseEntity<T> ( java.lang.String java.lang.String , MediaType org.springframework.web.reactive.result.method.annotation.MediaType , java.lang.Object java.lang.Object , MediaType org.springframework.web.reactive.result.method.annotation.MediaType , ParameterizedTypeReference < T > org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<T> ) throws java.lang.Exception { HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.result.method.annotation.HttpHeaders . setContentType ( org.springframework.web.reactive.result.method.annotation.MediaType ) ; if ( org.springframework.web.reactive.result.method.annotation.MediaType != null ) { org.springframework.web.reactive.result.method.annotation.HttpHeaders . setAccept ( java.util.Collections . java.util.List ( org.springframework.web.reactive.result.method.annotation.MediaType ) ) ; } return org.springframework.web.reactive.result.method.annotation.RestTemplate ( ) . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<?> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Object ) , org.springframework.web.reactive.result.method.annotation.ParameterizedTypeReference<T> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> ( java.lang.String java.lang.String , HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders ) throws java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + java.lang.String ) ; RequestEntity . RequestEntity < ? > builder = get ( java.net.URI ) ; addHeaders ( builder , org.springframework.web.reactive.result.method.annotation.HttpHeaders ) ; return builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> ( java.lang.String java.lang.String , HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders ) throws java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + java.lang.String ) ; RequestEntity . RequestEntity < ? > builder = options ( java.net.URI ) ; addHeaders ( builder , org.springframework.web.reactive.result.method.annotation.HttpHeaders ) ; return builder . build ( ) ; }  <METHOD_END>
<METHOD_START> private void addHeaders ( RequestEntity . RequestEntity < ? > builder , HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.web.reactive.result.method.annotation.HttpHeaders . entrySet ( ) ) { for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { builder . header ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.RequestEntity<?> < ? > org.springframework.web.reactive.result.method.annotation.RequestEntity<?> ( java.lang.String java.lang.String , HttpHeaders org.springframework.web.reactive.result.method.annotation.HttpHeaders , java.lang.Object java.lang.Object ) throws java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + java.lang.String ) ; RequestEntity . RequestEntity RequestEntity.BodyBuilder = post ( java.net.URI ) ; addHeaders ( RequestEntity.BodyBuilder , org.springframework.web.reactive.result.method.annotation.HttpHeaders ) ; return RequestEntity.BodyBuilder . body ( java.lang.Object ) ; }  <METHOD_END>
