<METHOD_START> void ( ServerWebExchange org.springframework.web.server.ServerWebExchange ) { Assert . notNull ( org.springframework.web.server.ServerWebExchange , STRING ) ; this . org.springframework.web.server.ServerWebExchange = org.springframework.web.server.ServerWebExchange ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerWebExchange . ServerWebExchange.Builder ServerWebExchange.Builder ( java.util.function.Consumer<ServerHttpRequest.Builder> < ServerHttpRequest . ServerHttpRequest > java.util.function.Consumer<ServerHttpRequest.Builder> ) { ServerHttpRequest . ServerHttpRequest ServerHttpRequest.Builder = this . org.springframework.web.server.ServerWebExchange . getRequest ( ) . mutate ( ) ; java.util.function.Consumer<ServerHttpRequest.Builder> . accept ( ServerHttpRequest.Builder ) ; return ServerWebExchange.Builder ( ServerHttpRequest.Builder . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerWebExchange . ServerWebExchange.Builder ServerWebExchange.Builder ( ServerHttpRequest org.springframework.web.server.ServerHttpRequest ) { this . org.springframework.web.server.ServerHttpRequest = org.springframework.web.server.ServerHttpRequest ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerWebExchange . ServerWebExchange.Builder ServerWebExchange.Builder ( ServerHttpResponse org.springframework.web.server.ServerHttpResponse ) { this . org.springframework.web.server.ServerHttpResponse = org.springframework.web.server.ServerHttpResponse ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerWebExchange . ServerWebExchange.Builder ServerWebExchange.Builder ( Mono < java.security.Principal > org.springframework.web.server.Mono<java.security.Principal> ) { this . org.springframework.web.server.Mono<java.security.Principal> = org.springframework.web.server.Mono<java.security.Principal> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.ServerWebExchange org.springframework.web.server.ServerWebExchange ( ) { return new org.springframework.web.server.DefaultServerWebExchangeBuilder.MutativeDecorator ( this . org.springframework.web.server.ServerWebExchange , this . org.springframework.web.server.ServerHttpRequest , this . org.springframework.web.server.ServerHttpResponse , this . org.springframework.web.server.Mono<java.security.Principal> ) ; }  <METHOD_END>
<METHOD_START> public void ( ServerWebExchange org.springframework.web.server.ServerWebExchange , ServerHttpRequest org.springframework.web.server.ServerHttpRequest , ServerHttpResponse org.springframework.web.server.ServerHttpResponse , Mono < java.security.Principal > org.springframework.web.server.Mono<java.security.Principal> ) { super( org.springframework.web.server.ServerWebExchange ); this . org.springframework.web.server.ServerHttpRequest = org.springframework.web.server.ServerHttpRequest ; this . org.springframework.web.server.ServerHttpResponse = org.springframework.web.server.ServerHttpResponse ; this . org.springframework.web.server.Mono<java.security.Principal> = org.springframework.web.server.Mono<java.security.Principal> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.ServerHttpRequest org.springframework.web.server.ServerHttpRequest ( ) { return ( this . org.springframework.web.server.ServerHttpRequest != null ? this . org.springframework.web.server.ServerHttpRequest : getDelegate ( ) . getRequest ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.ServerHttpResponse org.springframework.web.server.ServerHttpResponse ( ) { return ( this . org.springframework.web.server.ServerHttpResponse != null ? this . org.springframework.web.server.ServerHttpResponse : getDelegate ( ) . getResponse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T extends java.security.Principal > org.springframework.web.server.Mono<T> < T > org.springframework.web.server.Mono<T> ( ) { return ( this . org.springframework.web.server.Mono<java.security.Principal> != null ? ( Mono < T > ) this . org.springframework.web.server.Mono<java.security.Principal> : getDelegate ( ) . getPrincipal ( ) ) ; }  <METHOD_END>
