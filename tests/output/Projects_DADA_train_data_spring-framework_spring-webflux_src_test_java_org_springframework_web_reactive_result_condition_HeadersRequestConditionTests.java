<METHOD_START> @ Test public void void ( ) { assertEquals ( new HeadersRequestCondition ( STRING ) , new HeadersRequestCondition ( STRING ) ) ; assertEquals ( new HeadersRequestCondition ( STRING ) , new HeadersRequestCondition ( STRING ) ) ; assertFalse ( new HeadersRequestCondition ( STRING ) . equals ( new HeadersRequestCondition ( STRING ) ) ) ; assertEquals ( new HeadersRequestCondition ( STRING ) , new HeadersRequestCondition ( STRING ) ) ; assertEquals ( new HeadersRequestCondition ( STRING ) , new HeadersRequestCondition ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING , STRING , STRING ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING , STRING ) ; int int = org.springframework.web.reactive.result.condition.HeadersRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.HeadersRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.reactive.result.condition.HeadersRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.HeadersRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertTrue ( STRING + int , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = org.springframework.web.reactive.result.condition.HeadersRequestCondition . combine ( org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.web.reactive.result.condition.HeadersRequestCondition . getContent ( ) ; assertEquals ( NUMBER , java.util.Collection<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; HeadersRequestCondition org.springframework.web.reactive.result.condition.HeadersRequestCondition = org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertEquals ( org.springframework.web.reactive.result.condition.HeadersRequestCondition , org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; org.springframework.web.reactive.result.condition.HeadersRequestCondition = new HeadersRequestCondition ( STRING ) ; org.springframework.web.reactive.result.condition.HeadersRequestCondition = org.springframework.web.reactive.result.condition.HeadersRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.HeadersRequestCondition ) ; }  <METHOD_END>
