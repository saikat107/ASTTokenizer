<METHOD_START> public void ( java.lang.String java.lang.String , int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.ExpressionState . lookupVariable ( this . java.lang.String ) ; if ( org.springframework.expression.spel.ast.TypedValue == null ) { throw new SpelEvaluationException ( getStartPosition ( ) , SpelMessage . FUNCTION_NOT_DEFINED , this . java.lang.String ) ; } if ( ! ( org.springframework.expression.spel.ast.TypedValue . getValue ( ) instanceof java.lang.reflect.Method ) ) { throw new SpelEvaluationException ( SpelMessage . FUNCTION_REFERENCE_CANNOT_BE_INVOKED , this . java.lang.String , org.springframework.expression.spel.ast.TypedValue . getClass ( ) ) ; } try { return org.springframework.expression.spel.ast.TypedValue ( org.springframework.expression.spel.ast.ExpressionState , ( java.lang.reflect.Method ) org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; } catch ( SpelEvaluationException org.springframework.expression.spel.ast.SpelEvaluationException ) { org.springframework.expression.spel.ast.SpelEvaluationException . setPosition ( getStartPosition ( ) ) ; throw org.springframework.expression.spel.ast.SpelEvaluationException ; } }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState , java.lang.reflect.Method java.lang.reflect.Method ) throws org.springframework.expression.spel.ast.EvaluationException { this . java.lang.reflect.Method = null ; java.lang.Object [] java.lang.Object[] = java.lang.Object[] ( org.springframework.expression.spel.ast.ExpressionState ) ; if ( ! java.lang.reflect.Method . boolean ( ) && java.lang.reflect.Method . int ( ) != java.lang.Object[] . int ) { throw new SpelEvaluationException ( SpelMessage . INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION , java.lang.Object[] . int , java.lang.reflect.Method . int ( ) ) ; } if ( ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) ) { throw new SpelEvaluationException ( getStartPosition ( ) , SpelMessage . FUNCTION_MUST_BE_STATIC , ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method ) , this . java.lang.String ) ; } boolean = false ; if ( java.lang.Object[] != null ) { TypeConverter org.springframework.expression.spel.ast.TypeConverter = org.springframework.expression.spel.ast.ExpressionState . getEvaluationContext ( ) . getTypeConverter ( ) ; boolean = ReflectionHelper . convertAllArguments ( org.springframework.expression.spel.ast.TypeConverter , java.lang.Object[] , java.lang.reflect.Method ) ; } if ( java.lang.reflect.Method . boolean ( ) ) { java.lang.Object[] = ReflectionHelper . setupArgumentsForVarargsInvocation ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , java.lang.Object[] ) ; } try { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( java.lang.reflect.Method . java.lang.Class<? extends java.lang.reflect.Method> ( ) , java.lang.Object[] ) ; if ( ! boolean ) { this . java.lang.reflect.Method = java.lang.reflect.Method ; this . exitTypeDescriptor = CodeFlow . toDescriptor ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; } return new TypedValue ( java.lang.Object , new TypeDescriptor ( new MethodParameter ( java.lang.reflect.Method , - NUMBER ) ) . narrow ( java.lang.Object ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new SpelEvaluationException ( getStartPosition ( ) , java.lang.Exception , SpelMessage . EXCEPTION_DURING_FUNCTION_CALL , this . java.lang.String , java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( int int = NUMBER ; int < getChildCount ( ) ; int ++ ) { if ( int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( int ) . toStringAST ( ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { java.lang.Object [] java.lang.Object[] = new java.lang.Object [ getChildCount ( ) ] ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Object[] [ int ] = this . children [ int ] . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; } return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( this . java.lang.reflect.Method == null || this . boolean ) { return false ; } int int = this . java.lang.reflect.Method . int ( ) ; if ( ! java.lang.reflect.Modifier . boolean ( int ) || ! java.lang.reflect.Modifier . boolean ( int ) || ! java.lang.reflect.Modifier . boolean ( this . java.lang.reflect.Method . java.lang.Class<?> ( ) . int ( ) ) ) { return false ; } for ( SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl : this . children ) { if ( ! org.springframework.expression.spel.ast.SpelNodeImpl . isCompilable ( ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { java.lang.String java.lang.String = this . java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) . java.lang.String ( '.' , '/' ) ; generateCodeForArguments ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , this . java.lang.reflect.Method , this . children ) ; org.springframework.expression.spel.ast.MethodVisitor . visitMethodInsn ( INVOKESTATIC , java.lang.String , this . java.lang.reflect.Method . java.lang.String ( ) , CodeFlow . createSignatureDescriptor ( this . java.lang.reflect.Method ) , false ) ; org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( this . exitTypeDescriptor ) ; }  <METHOD_END>
