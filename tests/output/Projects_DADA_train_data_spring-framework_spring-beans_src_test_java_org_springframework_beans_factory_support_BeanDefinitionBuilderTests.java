<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.BeanDefinitionBuilder . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.support.BeanDefinitionBuilder . addPropertyReference ( STRING , STRING ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { org.springframework.beans.factory.support.BeanDefinitionBuilder . addDependsOn ( java.lang.String[] [ int ] ) ; } RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = ( RootBeanDefinition ) org.springframework.beans.factory.support.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertFalse ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) ) ; assertTrue ( STRING , java.util.Arrays . boolean ( java.lang.String[] , org.springframework.beans.factory.support.RootBeanDefinition . getDependsOn ( ) ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class , STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = ( RootBeanDefinition ) org.springframework.beans.factory.support.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . hasBeanClass ( ) ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class . java.lang.String ( ) ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = ( RootBeanDefinition ) org.springframework.beans.factory.support.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertFalse ( org.springframework.beans.factory.support.RootBeanDefinition . hasBeanClass ( ) ) ; assertEquals ( TestBean .class . java.lang.String ( ) , org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( TestBean .class . java.lang.String ( ) , STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = ( RootBeanDefinition ) org.springframework.beans.factory.support.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertFalse ( org.springframework.beans.factory.support.RootBeanDefinition . hasBeanClass ( ) ) ; assertEquals ( TestBean .class . java.lang.String ( ) , org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) ) ; }  <METHOD_END>
