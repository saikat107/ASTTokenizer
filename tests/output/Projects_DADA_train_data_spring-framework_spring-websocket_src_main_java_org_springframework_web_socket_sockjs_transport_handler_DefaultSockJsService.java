<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.sockjs.transport.handler.TaskScheduler ) { this( org.springframework.web.socket.sockjs.transport.handler.TaskScheduler , java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> ( null ) ); }  <METHOD_END>
<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.sockjs.transport.handler.TaskScheduler , TransportHandler ... org.springframework.web.socket.sockjs.transport.handler.TransportHandler[] ) { this( org.springframework.web.socket.sockjs.transport.handler.TaskScheduler , java.util.Arrays . java.util.List ( org.springframework.web.socket.sockjs.transport.handler.TransportHandler[] ) ); }  <METHOD_END>
<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.sockjs.transport.handler.TaskScheduler , java.util.Collection<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> < TransportHandler > java.util.Collection<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> ) { super( org.springframework.web.socket.sockjs.transport.handler.TaskScheduler , java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> ( java.util.Collection<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> ) ); }  <METHOD_END>
<METHOD_START> private static java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> < TransportHandler > java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> ( java.util.Collection<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> < TransportHandler > java.util.Collection<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> ) { java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> < TransportHandler > java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> = new java.util.LinkedHashSet<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> <> ( NUMBER ) ; java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . add ( new XhrPollingTransportHandler ( ) ) ; java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . add ( new XhrReceivingTransportHandler ( ) ) ; java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . add ( new XhrStreamingTransportHandler ( ) ) ; java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . add ( new JsonpPollingTransportHandler ( ) ) ; java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . add ( new JsonpReceivingTransportHandler ( ) ) ; java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . add ( new EventSourceTransportHandler ( ) ) ; java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . add ( new HtmlFileTransportHandler ( ) ) ; try { java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . add ( new WebSocketTransportHandler ( new DefaultHandshakeHandler ( ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { Log org.springframework.web.socket.sockjs.transport.handler.Log = LogFactory . getLog ( org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService .class ) ; if ( org.springframework.web.socket.sockjs.transport.handler.Log . isWarnEnabled ( ) ) { org.springframework.web.socket.sockjs.transport.handler.Log . warn ( STRING , java.lang.Exception ) ; } } if ( java.util.Collection<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> != null ) { java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> . addAll ( java.util.Collection<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> ) ; } return java.util.Set<org.springframework.web.socket.sockjs.transport.handler.TransportHandler> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.socket.sockjs.transport.handler.ServletContext ) { for ( TransportHandler org.springframework.web.socket.sockjs.transport.handler.TransportHandler : getTransportHandlers ( ) . values ( ) ) { if ( org.springframework.web.socket.sockjs.transport.handler.TransportHandler instanceof ServletContextAware ) { ( ( ServletContextAware ) org.springframework.web.socket.sockjs.transport.handler.TransportHandler ) . setServletContext ( org.springframework.web.socket.sockjs.transport.handler.ServletContext ) ; } } }  <METHOD_END>
