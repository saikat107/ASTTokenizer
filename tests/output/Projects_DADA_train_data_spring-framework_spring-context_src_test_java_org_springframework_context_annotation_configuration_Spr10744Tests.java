<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBeanFactory ( ) . registerScope ( STRING , new org.springframework.context.annotation.configuration.Spr10744Tests.MyTestScope ( ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.Spr10744Tests.MyTestConfiguration .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.configuration.Spr10744Tests.Foo org.springframework.context.annotation.configuration.Spr10744Tests.Foo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.configuration.Spr10744Tests.Foo .class ) ; org.springframework.context.annotation.configuration.Spr10744Tests.Foo org.springframework.context.annotation.configuration.Spr10744Tests.Foo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.configuration.Spr10744Tests.Foo .class ) ; assertThat ( org.springframework.context.annotation.configuration.Spr10744Tests.Foo , sameInstance ( org.springframework.context.annotation.configuration.Spr10744Tests.Foo ) ) ; assertThat ( int , equalTo ( NUMBER ) ) ; assertThat ( int , equalTo ( NUMBER ) ) ; org.springframework.context.annotation.configuration.Spr10744Tests.Foo . java.lang.String ( ) ; assertThat ( int , equalTo ( NUMBER ) ) ; assertThat ( int , equalTo ( NUMBER ) ) ; org.springframework.context.annotation.configuration.Spr10744Tests.Foo . java.lang.String ( ) ; assertThat ( int , equalTo ( NUMBER ) ) ; assertThat ( int , equalTo ( NUMBER ) ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , ObjectFactory < ? > org.springframework.context.annotation.configuration.ObjectFactory<?> ) { int ++ ; return org.springframework.context.annotation.configuration.ObjectFactory<> . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Runnable java.lang.Runnable ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.Spr10744Tests.Foo org.springframework.context.annotation.configuration.Spr10744Tests.Foo ( ) { return new org.springframework.context.annotation.configuration.Spr10744Tests.Foo ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( value = STRING , proxyMode = ScopedProxyMode . TARGET_CLASS ) @ java.lang.Override public org.springframework.context.annotation.configuration.Spr10744Tests.Foo org.springframework.context.annotation.configuration.Spr10744Tests.Foo ( ) { return new org.springframework.context.annotation.configuration.Spr10744Tests.Foo ( ) ; }  <METHOD_END>
