<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.HttpHandler org.springframework.http.server.reactive.HttpHandler ( ) { return org.springframework.http.server.reactive.ErrorHandlerIntegrationTests.ErrorHandler ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeFalse ( server instanceof ReactorHttpServer ) ; RestTemplate org.springframework.http.server.reactive.RestTemplate = new RestTemplate ( ) ; org.springframework.http.server.reactive.RestTemplate . setErrorHandler ( org.springframework.http.server.reactive.ResponseErrorHandler ) ; ResponseEntity < java.lang.String > org.springframework.http.server.reactive.ResponseEntity<java.lang.String> = org.springframework.http.server.reactive.RestTemplate . getForEntity ( new java.net.URI ( STRING + port + STRING ) , java.lang.String .class ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.http.server.reactive.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeFalse ( server instanceof ReactorHttpServer ) ; RestTemplate org.springframework.http.server.reactive.RestTemplate = new RestTemplate ( ) ; org.springframework.http.server.reactive.RestTemplate . setErrorHandler ( org.springframework.http.server.reactive.ResponseErrorHandler ) ; ResponseEntity < java.lang.String > org.springframework.http.server.reactive.ResponseEntity<java.lang.String> = org.springframework.http.server.reactive.RestTemplate . getForEntity ( new java.net.URI ( STRING + port + STRING ) , java.lang.String .class ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.http.server.reactive.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest , ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ) { java.lang.Exception java.lang.Exception = new java.lang.UnsupportedOperationException ( ) ; java.lang.String java.lang.String = org.springframework.http.server.reactive.ServerHttpRequest . getURI ( ) . getPath ( ) ; if ( java.lang.String . boolean ( STRING ) ) { return org.springframework.http.server.reactive.ServerHttpResponse . writeWith ( Mono . error ( java.lang.Exception ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { return Mono . error ( java.lang.Exception ) ; } else { return Mono . empty ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ClientHttpResponse org.springframework.http.server.reactive.ClientHttpResponse ) throws java.io.IOException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ClientHttpResponse org.springframework.http.server.reactive.ClientHttpResponse ) throws java.io.IOException {				}  <METHOD_END>
