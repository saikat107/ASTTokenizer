<METHOD_START> protected abstract D D ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( D ( ) . getMax ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( D ( ) . getMin ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcTemplate org.springframework.boot.autoconfigure.jdbc.metadata.JdbcTemplate = new JdbcTemplate ( D ( ) . getDataSource ( ) ) ; org.springframework.boot.autoconfigure.jdbc.metadata.JdbcTemplate . execute ( new ConnectionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )					throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { return null ; } } ) ; assertThat ( D ( ) . getActive ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; assertThat ( D ( ) . getUsage ( ) ) . isEqualTo ( java.lang.Float . java.lang.Float ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )					throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JdbcTemplate org.springframework.boot.autoconfigure.jdbc.metadata.JdbcTemplate = new JdbcTemplate ( D ( ) . getDataSource ( ) ) ; org.springframework.boot.autoconfigure.jdbc.metadata.JdbcTemplate . execute ( new ConnectionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )					throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { assertThat ( D ( ) . getActive ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; assertThat ( D ( ) . getUsage ( ) ) . isEqualTo ( java.lang.Float . java.lang.Float ( NUMBER ) ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )					throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { assertThat ( D ( ) . getActive ( ) ) . isEqualTo ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; assertThat ( D ( ) . getUsage ( ) ) . isEqualTo ( java.lang.Float . java.lang.Float ( NUMBER ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final JdbcTemplate org.springframework.boot.autoconfigure.jdbc.metadata.JdbcTemplate = new JdbcTemplate ( D ( ) . getDataSource ( ) ) ; org.springframework.boot.autoconfigure.jdbc.metadata.JdbcTemplate . execute ( new ConnectionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )					throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { org.springframework.boot.autoconfigure.jdbc.metadata.JdbcTemplate . execute ( new ConnectionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )							throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { assertThat ( D ( ) . getActive ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( D ( ) . getUsage ( ) ) . isEqualTo ( NUMBER ) ; return null ; } } ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )					throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { org.springframework.boot.autoconfigure.jdbc.metadata.JdbcTemplate . execute ( new ConnectionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )							throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { assertThat ( D ( ) . getActive ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( D ( ) . getUsage ( ) ) . isEqualTo ( NUMBER ) ; return null ; } } ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( java.sql.Connection java.sql.Connection )							throws java.sql.SQLException , org.springframework.boot.autoconfigure.jdbc.metadata.DataAccessException { assertThat ( D ( ) . getActive ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( D ( ) . getUsage ( ) ) . isEqualTo ( NUMBER ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public abstract void void ( )  <METHOD_END>
<METHOD_START> protected org.springframework.boot.autoconfigure.jdbc.metadata.DataSourceBuilder org.springframework.boot.autoconfigure.jdbc.metadata.DataSourceBuilder ( ) { return DataSourceBuilder . create ( ) . driverClassName ( STRING ) . url ( STRING ) . username ( STRING ) ; }  <METHOD_END>
