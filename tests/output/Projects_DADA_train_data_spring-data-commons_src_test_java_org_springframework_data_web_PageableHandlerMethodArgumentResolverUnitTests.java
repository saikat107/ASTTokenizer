<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.data.web.MethodParameter = new MethodParameter ( org.springframework.data.web.PageableHandlerMethodArgumentResolverUnitTests.Sample .class . java.lang.reflect.Method ( STRING , Pageable .class ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertSupportedAndResult ( org.springframework.data.web.MethodParameter , PageRequest . of ( NUMBER , NUMBER ) , org.springframework.data.web.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new PageableHandlerMethodArgumentResolver ( ) . setPageParameterName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new PageableHandlerMethodArgumentResolver ( ) . setPageParameterName ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new PageableHandlerMethodArgumentResolver ( ) . setSizeParameterName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new PageableHandlerMethodArgumentResolver ( ) . setSizeParameterName ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( org.springframework.data.web.PageableHandlerMethodArgumentResolverUnitTests.Sample .class . java.lang.reflect.Method ( STRING , Pageable .class ) , NUMBER ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertSupportedAndResult ( org.springframework.data.web.MethodParameter , PageRequest . of ( NUMBER , NUMBER ) , org.springframework.data.web.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertSupportedAndResult ( org.springframework.data.web.MethodParameter , DEFAULT_PAGE_REQUEST , org.springframework.data.web.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( org.springframework.data.web.PageableHandlerMethodArgumentResolverUnitTests.Sample .class . java.lang.reflect.Method ( STRING , Pageable .class ) , NUMBER ) ; exception . expect ( java.lang.IllegalStateException .class ) ; exception . expectMessage ( STRING ) ; assertSupportedAndResult ( org.springframework.data.web.MethodParameter , DEFAULT_PAGE_REQUEST ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertSupportedAndResult ( org.springframework.data.web.MethodParameter , DEFAULT_PAGE_REQUEST , org.springframework.data.web.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertSupportedAndResult ( org.springframework.data.web.MethodParameter , DEFAULT_PAGE_REQUEST , org.springframework.data.web.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertSupportedAndResult ( org.springframework.data.web.MethodParameter , DEFAULT_PAGE_REQUEST , org.springframework.data.web.MockHttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setFallbackPageable ( Pageable . unpaged ( ) ) ; assertSupportedAndResult ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( new MockHttpServletRequest ( ) ) , org.springframework.data.web.PageableHandlerMethodArgumentResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setFallbackPageable ( Pageable . unpaged ( ) ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) , null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setFallbackPageable ( Pageable . unpaged ( ) ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) , null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setOneIndexedParameters ( true ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertThat ( org.springframework.data.web.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) , null ) . getPageNumber ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setFallbackPageable ( Pageable . unpaged ( ) ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Pageable org.springframework.data.web.Pageable = org.springframework.data.web.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.Pageable . getPageNumber ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.web.Pageable . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.web.Pageable . getSort ( ) . isSorted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setOneIndexedParameters ( true ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Pageable org.springframework.data.web.Pageable = org.springframework.data.web.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.Pageable . getPageNumber ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setOneIndexedParameters ( true ) ; MockHttpServletRequest org.springframework.data.web.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.data.web.MockHttpServletRequest . addParameter ( STRING , STRING ) ; Pageable org.springframework.data.web.Pageable = org.springframework.data.web.PageableHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , null , new ServletWebRequest ( org.springframework.data.web.MockHttpServletRequest ) , null ) ; assertThat ( org.springframework.data.web.Pageable . getPageSize ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setFallbackPageable ( Pageable . unpaged ( ) ) ; assertThat ( org.springframework.data.web.PageableHandlerMethodArgumentResolver . isFallbackPageable ( null ) ) . isFalse ( ) ; assertThat ( org.springframework.data.web.PageableHandlerMethodArgumentResolver . isFallbackPageable ( PageRequest . of ( NUMBER , NUMBER ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.web.PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver ( ) { PageableHandlerMethodArgumentResolver org.springframework.data.web.PageableHandlerMethodArgumentResolver = new PageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.PageableHandlerMethodArgumentResolver . setMaxPageSize ( NUMBER ) ; return org.springframework.data.web.PageableHandlerMethodArgumentResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.web.PageableHandlerMethodArgumentResolverUnitTests.Sample .class ; }  <METHOD_END>
<METHOD_START> void void ( Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( @ PageableDefault ( size = NUMBER ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ PageableDefault ( size = PAGE_SIZE , page = PAGE_NUMBER ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ PageableDefault ( size = PAGE_SIZE , page = PAGE_NUMBER , sort = { STRING , STRING } ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ PageableDefault ( size = PAGE_SIZE , page = PAGE_NUMBER , sort = { STRING , STRING } , direction = Direction . DESC ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ PageableDefault ( size = PAGE_SIZE , page = PAGE_NUMBER ) @ SortDefault ( sort = { STRING , STRING } , direction = Direction . DESC ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ PageableDefault ( size = PAGE_SIZE , page = PAGE_NUMBER ) @ SortDefaults ( @ SortDefault ( sort = { STRING , STRING } , direction = Direction . DESC ) ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ Qualifier ( STRING ) Pageable org.springframework.data.web.Pageable , @ Qualifier ( STRING ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( @ Qualifier ( STRING ) Pageable org.springframework.data.web.Pageable );  <METHOD_END>
<METHOD_START> void void ( Pageable org.springframework.data.web.Pageable , Pageable org.springframework.data.web.Pageable );  <METHOD_END>
