<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.method.annotation.MethodParameter ) { return ( org.springframework.web.method.annotation.MethodParameter . hasParameterAnnotation ( RequestHeader .class ) && java.util.Map .class . boolean ( org.springframework.web.method.annotation.MethodParameter . getParameterType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.method.annotation.MethodParameter . getParameterType ( ) ; if ( MultiValueMap .class . boolean ( java.lang.Class<> ) ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ; if ( HttpHeaders .class . boolean ( java.lang.Class<> ) ) { org.springframework.web.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = new HttpHeaders ( ) ; } else { org.springframework.web.method.annotation.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; } for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.web.method.annotation.NativeWebRequest . getHeaderNames ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.lang.String [] java.lang.String[] = org.springframework.web.method.annotation.NativeWebRequest . getHeaderValues ( java.lang.String ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.web.method.annotation.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; } } } return org.springframework.web.method.annotation.MultiValueMap<java.lang.String,java.lang.String> ; } else { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.web.method.annotation.NativeWebRequest . getHeaderNames ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.lang.String java.lang.String = org.springframework.web.method.annotation.NativeWebRequest . getHeader ( java.lang.String ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } } return java.util.Map<java.lang.String,java.lang.String> ; } }  <METHOD_END>
