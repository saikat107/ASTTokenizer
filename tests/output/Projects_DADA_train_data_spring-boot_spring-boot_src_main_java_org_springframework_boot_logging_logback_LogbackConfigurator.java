<METHOD_START> void ( LoggerContext org.springframework.boot.logging.logback.LoggerContext ) { Assert . notNull ( org.springframework.boot.logging.logback.LoggerContext , STRING ) ; this . org.springframework.boot.logging.logback.LoggerContext = org.springframework.boot.logging.logback.LoggerContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.logging.logback.PropertyContainer org.springframework.boot.logging.logback.PropertyContainer ( ) { return this . org.springframework.boot.logging.logback.LoggerContext ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . org.springframework.boot.logging.logback.LoggerContext . getConfigurationLock ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( java.lang.String java.lang.String , java.lang.Class<? extends org.springframework.boot.logging.logback.Converter> < ? extends Converter > java.lang.Class<? extends org.springframework.boot.logging.logback.Converter> ) { Assert . hasLength ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) this . org.springframework.boot.logging.logback.LoggerContext . getObject ( CoreConstants . PATTERN_RULE_REGISTRY ) ; if ( java.util.Map<java.lang.String,java.lang.String> == null ) { java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; this . org.springframework.boot.logging.logback.LoggerContext . putObject ( CoreConstants . PATTERN_RULE_REGISTRY , java.util.Map<java.lang.String,java.lang.String> ) ; } java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , Appender < ? > org.springframework.boot.logging.logback.Appender<?> ) { org.springframework.boot.logging.logback.Appender<> . setName ( java.lang.String ) ; void ( org.springframework.boot.logging.logback.Appender<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , Level org.springframework.boot.logging.logback.Level ) { void ( java.lang.String , org.springframework.boot.logging.logback.Level , true ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , Level org.springframework.boot.logging.logback.Level , boolean boolean ) { void ( java.lang.String , org.springframework.boot.logging.logback.Level , boolean , null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , Level org.springframework.boot.logging.logback.Level , boolean boolean , Appender < ILoggingEvent > org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) { Logger org.springframework.boot.logging.logback.Logger = this . org.springframework.boot.logging.logback.LoggerContext . getLogger ( java.lang.String ) ; if ( org.springframework.boot.logging.logback.Level != null ) { org.springframework.boot.logging.logback.Logger . setLevel ( org.springframework.boot.logging.logback.Level ) ; } org.springframework.boot.logging.logback.Logger . setAdditive ( boolean ) ; if ( org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> != null ) { org.springframework.boot.logging.logback.Logger . addAppender ( org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs public final void void ( Level org.springframework.boot.logging.logback.Level , org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> < ILoggingEvent > ... org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent>[] ) { Logger org.springframework.boot.logging.logback.Logger = this . org.springframework.boot.logging.logback.LoggerContext . getLogger ( org . slf4j . Logger . ROOT_LOGGER_NAME ) ; if ( org.springframework.boot.logging.logback.Level != null ) { org.springframework.boot.logging.logback.Logger . setLevel ( org.springframework.boot.logging.logback.Level ) ; } for ( Appender < ILoggingEvent > org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> : org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent>[] ) { org.springframework.boot.logging.logback.Logger . addAppender ( org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( LifeCycle org.springframework.boot.logging.logback.LifeCycle ) { if ( org.springframework.boot.logging.logback.LifeCycle instanceof ContextAware ) { ( ( ContextAware ) org.springframework.boot.logging.logback.LifeCycle ) . setContext ( this . org.springframework.boot.logging.logback.LoggerContext ) ; } org.springframework.boot.logging.logback.LifeCycle . start ( ) ; }  <METHOD_END>
