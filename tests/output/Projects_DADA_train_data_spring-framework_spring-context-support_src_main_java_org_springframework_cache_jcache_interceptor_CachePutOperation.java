<METHOD_START> public void ( CacheMethodDetails < CachePut > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> , CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver , KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ) { super( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> , org.springframework.cache.jcache.interceptor.CacheResolver , org.springframework.cache.jcache.interceptor.KeyGenerator ); CachePut org.springframework.cache.jcache.interceptor.CachePut = org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> . getCacheAnnotation ( ) ; this . org.springframework.cache.jcache.interceptor.ExceptionTypeFilter = createExceptionTypeFilter ( org.springframework.cache.jcache.interceptor.CachePut . cacheFor ( ) , org.springframework.cache.jcache.interceptor.CachePut . noCacheFor ( ) ) ; this . org.springframework.cache.jcache.interceptor.CacheParameterDetail = org.springframework.cache.jcache.interceptor.CacheParameterDetail ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> . getMethod ( ) , this . allParameterDetails ) ; if ( this . org.springframework.cache.jcache.interceptor.CacheParameterDetail == null ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> . getMethod ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.jcache.interceptor.ExceptionTypeFilter org.springframework.cache.jcache.interceptor.ExceptionTypeFilter ( ) { return this . org.springframework.cache.jcache.interceptor.ExceptionTypeFilter ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! getCacheAnnotation ( ) . afterInvocation ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.jcache.interceptor.CacheInvocationParameter org.springframework.cache.jcache.interceptor.CacheInvocationParameter ( java.lang.Object ... java.lang.Object[] ) { int int = this . org.springframework.cache.jcache.interceptor.CacheParameterDetail . getParameterPosition ( ) ; if ( int >= java.lang.Object[] . int ) { throw new java.lang.IllegalStateException ( STRING + int + STRING + java.lang.Object[] . int + STRING ) ; } return this . org.springframework.cache.jcache.interceptor.CacheParameterDetail . toCacheInvocationParameter ( java.lang.Object[] [ int ] ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.cache.jcache.interceptor.CacheParameterDetail org.springframework.cache.jcache.interceptor.CacheParameterDetail ( java.lang.reflect.Method java.lang.reflect.Method , java.util.List<org.springframework.cache.jcache.interceptor.CacheParameterDetail> < CacheParameterDetail > java.util.List<org.springframework.cache.jcache.interceptor.CacheParameterDetail> ) { CacheParameterDetail org.springframework.cache.jcache.interceptor.CacheParameterDetail = null ; for ( CacheParameterDetail org.springframework.cache.jcache.interceptor.CacheParameterDetail : java.util.List<org.springframework.cache.jcache.interceptor.CacheParameterDetail> ) { if ( org.springframework.cache.jcache.interceptor.CacheParameterDetail . isValue ( ) ) { if ( org.springframework.cache.jcache.interceptor.CacheParameterDetail == null ) { org.springframework.cache.jcache.interceptor.CacheParameterDetail = org.springframework.cache.jcache.interceptor.CacheParameterDetail ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.reflect.Method + STRING ) ; } } } return org.springframework.cache.jcache.interceptor.CacheParameterDetail ; }  <METHOD_END>
