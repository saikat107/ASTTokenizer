<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . java.sql.Connection = mock ( java.sql.Connection .class ) ; this . javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; this . java.sql.Statement = mock ( java.sql.Statement .class ) ; this . java.sql.PreparedStatement = mock ( java.sql.PreparedStatement .class ) ; this . java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; this . java.sql.ResultSetMetaData = mock ( java.sql.ResultSetMetaData .class ) ; this . org.springframework.jdbc.core.JdbcTemplate = new JdbcTemplate ( this . javax.sql.DataSource ) ; given ( this . javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( this . java.sql.Connection ) ; given ( this . java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( this . java.sql.ResultSetMetaData ) ; given ( this . java.sql.ResultSetMetaData . int ( ) ) . willReturn ( NUMBER ) ; given ( this . java.sql.ResultSetMetaData . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; given ( this . java.sql.Connection . java.sql.Statement ( ) ) . willReturn ( this . java.sql.Statement ) ; given ( this . java.sql.Connection . java.sql.PreparedStatement ( anyString ( ) ) ) . willReturn ( this . java.sql.PreparedStatement ) ; given ( this . java.sql.PreparedStatement . java.sql.ResultSet ( ) ) . willReturn ( this . java.sql.ResultSet ) ; given ( this . java.sql.Statement . java.sql.ResultSet ( anyString ( ) ) ) . willReturn ( this . java.sql.ResultSet ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( this . java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER , NUMBER ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = this . org.springframework.jdbc.core.JdbcTemplate . queryForList ( java.lang.String ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( false ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = this . org.springframework.jdbc.core.JdbcTemplate . queryForList ( java.lang.String ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = this . org.springframework.jdbc.core.JdbcTemplate . queryForList ( java.lang.String ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = this . org.springframework.jdbc.core.JdbcTemplate . queryForList ( java.lang.String , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.jdbc.core.JdbcTemplate . queryForMap ( java.lang.String ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( this . java.sql.ResultSet . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; this . org.springframework.jdbc.core.ExpectedException . expect ( IncorrectResultSizeDataAccessException .class ) ; try { this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , java.lang.String .class ) ; } finally { verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , new RowMapper < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; } } ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; assertEquals ( STRING , this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , java.lang.String .class ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . java.math.BigInteger ( NUMBER , java.math.BigInteger .class ) ) . willReturn ( new java.math.BigInteger ( STRING ) ) ; assertEquals ( new java.math.BigInteger ( STRING ) , this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , java.math.BigInteger .class ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . java.math.BigDecimal ( NUMBER ) ) . willReturn ( new java.math.BigDecimal ( STRING ) ) ; assertEquals ( new java.math.BigDecimal ( STRING ) , this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , java.math.BigDecimal .class ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , java.lang.Integer .class ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true ) ; assertNull ( this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , java.lang.Integer .class ) ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; int int = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , java.lang.Integer .class ) . intValue ( ) ; assertEquals ( STRING , NUMBER , int ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; int int = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , int .class ) ; assertEquals ( STRING , NUMBER , int ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . long ( NUMBER ) ) . willReturn ( NUMBER ) ; long long = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , java.lang.Long .class ) . longValue ( ) ; assertEquals ( STRING , NUMBER , long ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . long ( NUMBER ) ) . willReturn ( NUMBER ) ; long long = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , long .class ) ; assertEquals ( STRING , NUMBER , long ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( this . java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER , NUMBER ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = this . org.springframework.jdbc.core.JdbcTemplate . queryForList ( java.lang.String , new java.lang.Object [] { NUMBER } ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( false ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = this . org.springframework.jdbc.core.JdbcTemplate . queryForList ( java.lang.String , new java.lang.Object [] { NUMBER } ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = this . org.springframework.jdbc.core.JdbcTemplate . queryForList ( java.lang.String , new java.lang.Object [] { NUMBER } ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = this . org.springframework.jdbc.core.JdbcTemplate . queryForList ( java.lang.String , new java.lang.Object [] { NUMBER } , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.jdbc.core.JdbcTemplate . queryForMap ( java.lang.String , new java.lang.Object [] { NUMBER } ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , new java.lang.Object [] { NUMBER } , new RowMapper < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; } } ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , new java.lang.Object [] { NUMBER } , java.lang.Integer .class ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; int int = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , new java.lang.Object [] { NUMBER } , java.lang.Integer .class ) . intValue ( ) ; assertEquals ( STRING , NUMBER , int ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( this . java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( this . java.sql.ResultSet . long ( NUMBER ) ) . willReturn ( NUMBER ) ; long long = this . org.springframework.jdbc.core.JdbcTemplate . queryForObject ( java.lang.String , new java.lang.Object [] { NUMBER } , java.lang.Long .class ) . longValue ( ) ; assertEquals ( STRING , NUMBER , long ) ; verify ( this . java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( this . java.sql.ResultSet ) . close ( ) ; verify ( this . java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
