<METHOD_START> @ Test public void void ( ) { org.springframework.cache.transaction.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; new TransactionAwareCacheDecorator ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.transaction.Cache = new ConcurrentMapCache ( STRING ) ; Cache org.springframework.cache.transaction.Cache = new TransactionAwareCacheDecorator ( org.springframework.cache.transaction.Cache ) ; assertEquals ( org.springframework.cache.transaction.Cache . getName ( ) , org.springframework.cache.transaction.Cache . getName ( ) ) ; assertEquals ( org.springframework.cache.transaction.Cache . getNativeCache ( ) , org.springframework.cache.transaction.Cache . getNativeCache ( ) ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.transaction.Cache . put ( java.lang.Object , STRING ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . get ( java.lang.Object ) . get ( ) ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.lang.String .class ) ) ; org.springframework.cache.transaction.Cache . clear ( ) ; assertNull ( org.springframework.cache.transaction.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.transaction.Cache = new ConcurrentMapCache ( STRING ) ; Cache org.springframework.cache.transaction.Cache = new TransactionAwareCacheDecorator ( org.springframework.cache.transaction.Cache ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.transaction.Cache . put ( java.lang.Object , STRING ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.transaction.Cache = new ConcurrentMapCache ( STRING ) ; Cache org.springframework.cache.transaction.Cache = new TransactionAwareCacheDecorator ( org.springframework.cache.transaction.Cache ) ; TransactionStatus org.springframework.cache.transaction.TransactionStatus = org.springframework.cache.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED ) ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.transaction.Cache . put ( java.lang.Object , STRING ) ; assertNull ( org.springframework.cache.transaction.Cache . get ( java.lang.Object ) ) ; org.springframework.cache.transaction.PlatformTransactionManager . commit ( org.springframework.cache.transaction.TransactionStatus ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.transaction.Cache = new ConcurrentMapCache ( STRING ) ; Cache org.springframework.cache.transaction.Cache = new TransactionAwareCacheDecorator ( org.springframework.cache.transaction.Cache ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertNull ( org.springframework.cache.transaction.Cache . putIfAbsent ( java.lang.Object , STRING ) ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.lang.String .class ) ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . putIfAbsent ( java.lang.Object , STRING ) . get ( ) ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.transaction.Cache = new ConcurrentMapCache ( STRING ) ; Cache org.springframework.cache.transaction.Cache = new TransactionAwareCacheDecorator ( org.springframework.cache.transaction.Cache ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.transaction.Cache . put ( java.lang.Object , STRING ) ; org.springframework.cache.transaction.Cache . evict ( java.lang.Object ) ; assertNull ( org.springframework.cache.transaction.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.transaction.Cache = new ConcurrentMapCache ( STRING ) ; Cache org.springframework.cache.transaction.Cache = new TransactionAwareCacheDecorator ( org.springframework.cache.transaction.Cache ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.transaction.Cache . put ( java.lang.Object , STRING ) ; TransactionStatus org.springframework.cache.transaction.TransactionStatus = org.springframework.cache.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED ) ) ; org.springframework.cache.transaction.Cache . evict ( java.lang.Object ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.lang.String .class ) ) ; org.springframework.cache.transaction.PlatformTransactionManager . commit ( org.springframework.cache.transaction.TransactionStatus ) ; assertNull ( org.springframework.cache.transaction.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.transaction.Cache = new ConcurrentMapCache ( STRING ) ; Cache org.springframework.cache.transaction.Cache = new TransactionAwareCacheDecorator ( org.springframework.cache.transaction.Cache ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.transaction.Cache . put ( java.lang.Object , STRING ) ; org.springframework.cache.transaction.Cache . clear ( ) ; assertNull ( org.springframework.cache.transaction.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Cache org.springframework.cache.transaction.Cache = new ConcurrentMapCache ( STRING ) ; Cache org.springframework.cache.transaction.Cache = new TransactionAwareCacheDecorator ( org.springframework.cache.transaction.Cache ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.cache.transaction.Cache . put ( java.lang.Object , STRING ) ; TransactionStatus org.springframework.cache.transaction.TransactionStatus = org.springframework.cache.transaction.PlatformTransactionManager . getTransaction ( new DefaultTransactionAttribute ( TransactionDefinition . PROPAGATION_REQUIRED ) ) ; org.springframework.cache.transaction.Cache . clear ( ) ; assertEquals ( STRING , org.springframework.cache.transaction.Cache . get ( java.lang.Object , java.lang.String .class ) ) ; org.springframework.cache.transaction.PlatformTransactionManager . commit ( org.springframework.cache.transaction.TransactionStatus ) ; assertNull ( org.springframework.cache.transaction.Cache . get ( java.lang.Object ) ) ; }  <METHOD_END>
