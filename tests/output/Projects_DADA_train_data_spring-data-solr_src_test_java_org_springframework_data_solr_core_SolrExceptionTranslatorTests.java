<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ( ErrorCode . NOT_FOUND , STRING ) ) , IsInstanceOf . instanceOf ( DataAccessResourceFailureException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ( ErrorCode . SERVICE_UNAVAILABLE , STRING ) ) , IsInstanceOf . instanceOf ( DataAccessResourceFailureException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ( ErrorCode . SERVER_ERROR , STRING ) ) , IsInstanceOf . instanceOf ( DataAccessResourceFailureException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ( ErrorCode . FORBIDDEN , STRING ) ) , IsInstanceOf . instanceOf ( PermissionDeniedDataAccessException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ( ErrorCode . UNAUTHORIZED , STRING ) ) , IsInstanceOf . instanceOf ( PermissionDeniedDataAccessException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ( ErrorCode . BAD_REQUEST , STRING ) ) , IsInstanceOf . instanceOf ( InvalidDataAccessApiUsageException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ( ErrorCode . UNKNOWN , STRING ) ) , IsInstanceOf . instanceOf ( UncategorizedSolrException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( new java.lang.RuntimeException ( STRING , new java.io.IOException ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrServerException org.springframework.data.solr.core.SolrServerException = new SolrServerException ( STRING , new SolrException ( ErrorCode . BAD_REQUEST , new org . org.apache . org.apache . org.apache . org.apache ( STRING ) ) ) ; Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( new java.lang.RuntimeException ( org.springframework.data.solr.core.SolrServerException ) ) , IsInstanceOf . instanceOf ( InvalidDataAccessApiUsageException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrServerException org.springframework.data.solr.core.SolrServerException = new SolrServerException ( STRING , new java . net . java.net.ConnectException ( STRING ) ) ; Assert . assertThat ( org.springframework.data.solr.core.SolrExceptionTranslator . translateExceptionIfPossible ( new java.lang.RuntimeException ( org.springframework.data.solr.core.SolrServerException ) ) , IsInstanceOf . instanceOf ( DataAccessResourceFailureException .class ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.RuntimeException java.lang.RuntimeException ( ErrorCode org.springframework.data.solr.core.ErrorCode , java.lang.String java.lang.String ) { SolrServerException org.springframework.data.solr.core.SolrServerException = org.springframework.data.solr.core.SolrServerException ( org.springframework.data.solr.core.ErrorCode , java.lang.String ) ; return new java.lang.RuntimeException ( org.springframework.data.solr.core.SolrServerException . getMessage ( ) , org.springframework.data.solr.core.SolrServerException ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.SolrServerException org.springframework.data.solr.core.SolrServerException ( ErrorCode org.springframework.data.solr.core.ErrorCode , java.lang.String java.lang.String ) { return new SolrServerException ( STRING , new SolrException ( org.springframework.data.solr.core.ErrorCode , java.lang.String ) ) ; }  <METHOD_END>
