<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . toDotPath ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getOwningType ( ) ) . isEqualTo ( ClassTypeInformation . from ( org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . next ( ) ) . isEqualTo ( new PropertyPath ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class ) ) ; assertThat ( org.springframework.data.mapping.PropertyPath . toDotPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Sample .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . toDotPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Sample2 .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . next ( ) ) . isEqualTo ( new PropertyPath ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Sample .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . next ( ) ) . isEqualTo ( new PropertyPath ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . isCollection ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . next ( ) ) . isEqualTo ( new PropertyPath ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . isCollection ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . next ( ) ) . isEqualTo ( new PropertyPath ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . isCollection ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . next ( ) ) . isEqualTo ( new PropertyPath ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; fail ( STRING ) ; } catch ( PropertyReferenceException org.springframework.data.mapping.PropertyReferenceException ) { assertThat ( org.springframework.data.mapping.PropertyReferenceException . getPropertyName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyReferenceException . getBaseProperty ( ) ) . isEqualTo ( PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( PropertyReferenceException .class ) . isThrownBy ( ( ) PropertyPath . from ( STRING , Bar .class ) ) . matches ( e -> e . getPropertyName ( ) . equals ( STRING ) ) . matches ( e -> e . getBaseProperty ( ) . equals ( PropertyPath . from ( STRING , Bar .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Sample .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isNotNull ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getLeafProperty ( ) ) . isEqualTo ( PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Sample2 .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getType ( ) ) . isEqualTo ( org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Sample2 .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . toDotPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Sample .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isNotNull ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getLeafProperty ( ) ) . isEqualTo ( PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; java.util.Iterator<org.springframework.data.mapping.PropertyPath> < PropertyPath > java.util.Iterator<org.springframework.data.mapping.PropertyPath> = org.springframework.data.mapping.PropertyPath . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.data.mapping.PropertyPath> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.mapping.PropertyPath> . next ( ) ) . isEqualTo ( org.springframework.data.mapping.PropertyPath ) ; assertThat ( java.util.Iterator<org.springframework.data.mapping.PropertyPath> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; java.util.Iterator<org.springframework.data.mapping.PropertyPath> < PropertyPath > java.util.Iterator<org.springframework.data.mapping.PropertyPath> = org.springframework.data.mapping.PropertyPath . iterator ( ) ; assertThat ( java.util.Iterator<org.springframework.data.mapping.PropertyPath> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.mapping.PropertyPath> . next ( ) ) . isEqualTo ( org.springframework.data.mapping.PropertyPath ) ; assertThat ( java.util.Iterator<org.springframework.data.mapping.PropertyPath> . hasNext ( ) ) . isTrue ( ) ; assertThat ( java.util.Iterator<org.springframework.data.mapping.PropertyPath> . next ( ) ) . isEqualTo ( org.springframework.data.mapping.PropertyPath . next ( ) ) ; assertThat ( java.util.Iterator<org.springframework.data.mapping.PropertyPath> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( PropertyReferenceException .class ) . isThrownBy ( ( ) PropertyPath . from ( STRING , Foo .class ) ) . withMessageContaining ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( PropertyReferenceException .class ) . isThrownBy ( ( ) PropertyPath . from ( STRING , Sample2 .class ) ) . withMessageContaining ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( PropertyReferenceException .class ) . isThrownBy ( ( ) PropertyPath . from ( STRING , Sample2 .class ) ) . withMessageContaining ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = PropertyReferenceException .class ) public void void ( ) { PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThatExceptionOfType ( PropertyReferenceException .class ) . isThrownBy ( ( ) PropertyPath . from ( STRING , Sample2 .class ) ) . matches ( e -> e . getBaseProperty ( ) . getSegment ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isEqualTo ( org.springframework.data.mapping.PropertyPath ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isEqualTo ( org.springframework.data.mapping.PropertyPath ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isNotEqualTo ( org.springframework.data.mapping.PropertyPath ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isNotEqualTo ( org.springframework.data.mapping.PropertyPath ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isNotEqualTo ( new java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hashCode ( ) ) . isEqualTo ( org.springframework.data.mapping.PropertyPath . hashCode ( ) ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hashCode ( ) ) . isNotEqualTo ( org.springframework.data.mapping.PropertyPath . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isNotNull ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Sample2 .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isNotNull ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . next ( ) . getSegment ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.ExpectedException . expect ( PropertyReferenceException .class ) ; org.springframework.data.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mapping.ExpectedException . expectMessage ( STRING ) ; PropertyPath . from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { from ( null , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { from ( STRING , ( java.lang.Class<?> < ? > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { from ( STRING , ( TypeInformation < ? > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.ExpectedException . expect ( PropertyReferenceException .class ) ; org.springframework.data.mapping.ExpectedException . expectMessage ( STRING ) ; from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.ExpectedException . expect ( PropertyReferenceException .class ) ; org.springframework.data.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.mapping.ExpectedException . expectMessage ( org.springframework.data.mapping.PropertyPathUnitTests.FooBar .class . java.lang.String ( ) ) ; org.springframework.data.mapping.ExpectedException . expectMessage ( STRING ) ; from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Bar .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.ExpectedException . expect ( PropertyReferenceException .class ) ; org.springframework.data.mapping.ExpectedException . expectMessage ( STRING ) ; from ( STRING , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertyPath org.springframework.data.mapping.PropertyPath = from ( java.util.regex.Pattern . java.lang.String ( STRING ) , org.springframework.data.mapping.PropertyPathUnitTests.Foo .class ) ; assertThat ( org.springframework.data.mapping.PropertyPath ) . isNotNull ( ) ; assertThat ( org.springframework.data.mapping.PropertyPath . getSegment ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.mapping.PropertyPath . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
