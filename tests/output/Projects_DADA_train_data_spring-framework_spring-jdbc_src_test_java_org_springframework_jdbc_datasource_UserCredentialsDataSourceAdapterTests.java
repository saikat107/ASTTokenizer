<METHOD_START> @ Test public void void ( ) java.sql.SQLException { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( STRING , STRING ) ) . willReturn ( java.sql.Connection ) ; UserCredentialsDataSourceAdapter org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter = new UserCredentialsDataSourceAdapter ( ) ; org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . setTargetDataSource ( javax.sql.DataSource ) ; org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . setUsername ( STRING ) ; org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . setPassword ( STRING ) ; assertEquals ( java.sql.Connection , org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . getConnection ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; UserCredentialsDataSourceAdapter org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter = new UserCredentialsDataSourceAdapter ( ) ; org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . setTargetDataSource ( javax.sql.DataSource ) ; assertEquals ( java.sql.Connection , org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . getConnection ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( STRING , STRING ) ) . willReturn ( java.sql.Connection ) ; UserCredentialsDataSourceAdapter org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter = new UserCredentialsDataSourceAdapter ( ) ; org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . setTargetDataSource ( javax.sql.DataSource ) ; org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . setCredentialsForCurrentThread ( STRING , STRING ) ; try { assertEquals ( java.sql.Connection , org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . getConnection ( ) ) ; } finally { org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter . removeCredentialsFromCurrentThread ( ) ; } }  <METHOD_END>
