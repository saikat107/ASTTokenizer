<METHOD_START> public void void ( MessageChannel org.springframework.integration.config.MessageChannel ) { this . org.springframework.integration.config.MessageChannel = org.springframework.integration.config.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { MessageSelector org.springframework.integration.config.MessageSelector = null ; if ( java.lang.Object instanceof MessageSelector ) { org.springframework.integration.config.MessageSelector = ( MessageSelector ) java.lang.Object ; } else if ( StringUtils . hasText ( java.lang.String ) ) { this . void ( java.lang.Object , java.lang.String ) ; org.springframework.integration.config.MessageSelector = new MethodInvokingSelector ( java.lang.Object , java.lang.String ) ; } else { org.springframework.integration.config.MessageSelector = new MethodInvokingSelector ( java.lang.Object ) ; } return this . org.springframework.integration.config.MessageFilter ( org.springframework.integration.config.MessageSelector ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( java.lang.Object instanceof AbstractReplyProducingMessageHandler && this . methodIsHandleMessageOrEmpty ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( Expression org.springframework.integration.config.Expression ) { return this . org.springframework.integration.config.MessageFilter ( new ExpressionEvaluatingSelector ( org.springframework.integration.config.Expression ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.MessageFilter org.springframework.integration.config.MessageFilter ( MessageSelector org.springframework.integration.config.MessageSelector ) { MessageFilter org.springframework.integration.config.MessageFilter = new MessageFilter ( org.springframework.integration.config.MessageSelector ) ; void ( org.springframework.integration.config.MessageFilter ) ; return org.springframework.integration.config.MessageFilter ; }  <METHOD_END>
<METHOD_START> protected void void ( MessageFilter org.springframework.integration.config.MessageFilter ) { if ( this . java.lang.Boolean != null ) { org.springframework.integration.config.MessageFilter . setThrowExceptionOnRejection ( this . java.lang.Boolean ) ; } if ( this . org.springframework.integration.config.MessageChannel != null ) { org.springframework.integration.config.MessageFilter . setDiscardChannel ( this . org.springframework.integration.config.MessageChannel ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.config.MessageFilter . setDiscardWithinAdvice ( this . java.lang.Boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { if ( this . java.lang.Long != null ) { org.springframework.integration.config.AbstractMessageProducingHandler . setSendTimeout ( this . java.lang.Long ) ; } if ( ! ( org.springframework.integration.config.AbstractMessageProducingHandler instanceof MessageFilter ) ) { Assert . isNull ( this . java.lang.Boolean , STRING + STRING ) ; Assert . isNull ( this . org.springframework.integration.config.MessageChannel , STRING + STRING ) ; Assert . isNull ( this . java.lang.Boolean , STRING + STRING ) ; } else { void ( ( MessageFilter ) org.springframework.integration.config.AbstractMessageProducingHandler ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { return org.springframework.integration.config.AbstractMessageProducingHandler instanceof MessageFilter || ( ! ( org.springframework.integration.config.AbstractMessageProducingHandler instanceof MessageSelector ) && this . org.springframework.integration.config.MessageChannel == null && this . java.lang.Boolean == null && this . java.lang.Boolean == null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends org.springframework.integration.config.MessageHandler> < ? extends MessageHandler > java.lang.Class<? extends org.springframework.integration.config.MessageHandler> ( ) { return MessageFilter .class ; }  <METHOD_END>
