<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . DISCONNECT ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.messaging.simp.stomp.StompEncoder . encode ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECT ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setAcceptVersion ( STRING ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setHost ( STRING ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.messaging.simp.stomp.StompEncoder . encode ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ) ; assertTrue ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . DISCONNECT ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . addNativeHeader ( STRING , STRING ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.messaging.simp.stomp.StompEncoder . encode ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SEND ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . addNativeHeader ( STRING , STRING ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = MessageBuilder . createMessage ( STRING . byte[] ( ) , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.messaging.simp.stomp.StompEncoder . encode ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StompHeaderAccessor org.springframework.messaging.simp.stomp.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . SEND ) ; org.springframework.messaging.simp.stomp.StompHeaderAccessor . setContentLength ( NUMBER ) ; Message < byte [] > org.springframework.messaging.simp.stomp.Message<byte[]> = MessageBuilder . createMessage ( STRING . byte[] ( ) , org.springframework.messaging.simp.stomp.StompHeaderAccessor . getMessageHeaders ( ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.messaging.simp.stomp.StompEncoder . encode ( org.springframework.messaging.simp.stomp.Message<byte[]> ) ) ) ; }  <METHOD_END>
