<METHOD_START> @ Before public void void ( ) { java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; this . java.lang.String = java.text.SimpleDateFormat . java.lang.String ( new java.util.Date ( this . long ) ) ; this . java.lang.String = java.text.SimpleDateFormat . java.lang.String ( new java.util.Date ( this . long - ( NUMBER * NUMBER ) ) ) ; this . java.lang.String = java.text.SimpleDateFormat . java.lang.String ( new java.util.Date ( this . long + NUMBER ) ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.HeaderAssertionTests.PersonController org.springframework.test.web.servlet.samples.standalone.resultmatchers.HeaderAssertionTests.PersonController = new org.springframework.test.web.servlet.samples.standalone.resultmatchers.HeaderAssertionTests.PersonController ( ) ; org.springframework.test.web.servlet.samples.standalone.resultmatchers.HeaderAssertionTests.PersonController . void ( this . long ) ; this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc = standaloneSetup ( org.springframework.test.web.servlet.samples.standalone.resultmatchers.HeaderAssertionTests.PersonController ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . header ( IF_MODIFIED_SINCE , java.lang.String ) ) . andExpect ( header ( ) . string ( LAST_MODIFIED , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . header ( IF_MODIFIED_SINCE , java.lang.String ) ) . andExpect ( header ( ) . string ( LAST_MODIFIED , equalTo ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( header ( ) . stringValues ( VARY , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( header ( ) . stringValues ( VARY , hasItems ( containsString ( STRING ) , startsWith ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . header ( IF_MODIFIED_SINCE , java.lang.String ) ) . andExpect ( header ( ) . dateValue ( LAST_MODIFIED , this . long ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( header ( ) . longValue ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . header ( IF_MODIFIED_SINCE , java.lang.String ) ) . andExpect ( status ( ) . isNotModified ( ) ) . andExpect ( header ( ) . stringValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . header ( IF_MODIFIED_SINCE , java.lang.String ) ) . andExpect ( status ( ) . isNotModified ( ) ) . andExpect ( header ( ) . string ( STRING , nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . header ( IF_MODIFIED_SINCE , java.lang.String ) ) . andExpect ( status ( ) . isNotModified ( ) ) . andExpect ( header ( ) . longValue ( STRING , NUMBER ) ) ; fail ( java.lang.String ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { if ( java.lang.String . boolean ( java.lang.AssertionError . java.lang.String ( ) ) ) { throw java.lang.AssertionError ; } assertEquals ( STRING + STRING , java.lang.AssertionError . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( header ( ) . doesNotExist ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( header ( ) . doesNotExist ( LAST_MODIFIED ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( header ( ) . string ( LAST_MODIFIED , java.lang.String ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( header ( ) . string ( LAST_MODIFIED , equalTo ( java.lang.String ) ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { long long = this . long + NUMBER ; void ( header ( ) . dateValue ( LAST_MODIFIED , long ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) ) . andExpect ( header ( ) . longValue ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ResultMatcher org.springframework.test.web.servlet.samples.standalone.resultmatchers.ResultMatcher , java.lang.String java.lang.String ) throws java.lang.Exception { try { this . org.springframework.test.web.servlet.samples.standalone.resultmatchers.MockMvc . perform ( get ( STRING ) . header ( IF_MODIFIED_SINCE , java.lang.String ) ) . andExpect ( org.springframework.test.web.servlet.samples.standalone.resultmatchers.ResultMatcher ) ; fail ( java.lang.String ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { if ( java.lang.String . boolean ( java.lang.AssertionError . java.lang.String ( ) ) ) { throw java.lang.AssertionError ; } void ( java.lang.AssertionError , STRING + LAST_MODIFIED ) ; void ( java.lang.AssertionError , java.lang.String ) ; void ( java.lang.AssertionError , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.AssertionError java.lang.AssertionError , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.AssertionError . java.lang.String ( ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.test.web.servlet.samples.standalone.resultmatchers.ResponseEntity<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> < Person > org.springframework.test.web.servlet.samples.standalone.resultmatchers.ResponseEntity<org.springframework.test.web.servlet.samples.standalone.resultmatchers.Person> ( @ PathVariable long long , WebRequest org.springframework.test.web.servlet.samples.standalone.resultmatchers.WebRequest ) { return ResponseEntity . ok ( ) . lastModified ( long ( long ) ) . header ( STRING , STRING ) . header ( STRING , STRING , STRING ) . body ( new Person ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private long long ( long long ) { return this . long ; }  <METHOD_END>
