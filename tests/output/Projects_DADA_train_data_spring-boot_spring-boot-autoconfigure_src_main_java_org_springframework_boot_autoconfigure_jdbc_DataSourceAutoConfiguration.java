<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer ( DataSourceProperties org.springframework.boot.autoconfigure.jdbc.DataSourceProperties , ApplicationContext org.springframework.boot.autoconfigure.jdbc.ApplicationContext ) { return new DataSourceInitializer ( org.springframework.boot.autoconfigure.jdbc.DataSourceProperties , org.springframework.boot.autoconfigure.jdbc.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.jdbc.ConfigurableListableBeanFactory ) { try { BeanDefinition org.springframework.boot.autoconfigure.jdbc.BeanDefinition = org.springframework.boot.autoconfigure.jdbc.ConfigurableListableBeanFactory . getBeanDefinition ( STRING ) ; return EmbeddedDataSourceConfiguration .class . java.lang.String ( ) . boolean ( org.springframework.boot.autoconfigure.jdbc.BeanDefinition . getFactoryBeanName ( ) ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.autoconfigure.jdbc.NoSuchBeanDefinitionException ) { return false ; } }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( javax.sql.DataSource javax.sql.DataSource ) { if ( javax.sql.DataSource instanceof DataSourceProxy ) { try { return ( ( DataSourceProxy ) javax.sql.DataSource ) . createPool ( ) . getJmxPool ( ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.boot.autoconfigure.jdbc.Log . warn ( STRING ) ; } } return null ; }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . PARSE_CONFIGURATION ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.jdbc.ConditionOutcome org.springframework.boot.autoconfigure.jdbc.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.jdbc.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.jdbc.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( java.lang.ClassLoader ( org.springframework.boot.autoconfigure.jdbc.ConditionContext ) != null ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.ClassLoader java.lang.ClassLoader ( ConditionContext org.springframework.boot.autoconfigure.jdbc.ConditionContext ) { java.lang.Class<?> < ? > java.lang.Class<?> = new DataSourceBuilder ( org.springframework.boot.autoconfigure.jdbc.ConditionContext . getClassLoader ( ) ) . findType ( ) ; return ( java.lang.Class<> == null ? null : java.lang.Class<> . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.jdbc.ConditionOutcome org.springframework.boot.autoconfigure.jdbc.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.jdbc.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.jdbc.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( anyMatches ( org.springframework.boot.autoconfigure.jdbc.ConditionContext , org.springframework.boot.autoconfigure.jdbc.AnnotatedTypeMetadata , this . org.springframework.boot.autoconfigure.jdbc.SpringBootCondition ) ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } EmbeddedDatabaseType org.springframework.boot.autoconfigure.jdbc.EmbeddedDatabaseType = EmbeddedDatabaseConnection . get ( org.springframework.boot.autoconfigure.jdbc.ConditionContext . getClassLoader ( ) ) . getType ( ) ; if ( org.springframework.boot.autoconfigure.jdbc.EmbeddedDatabaseType == null ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; } return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( org.springframework.boot.autoconfigure.jdbc.EmbeddedDatabaseType ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.jdbc.ConditionOutcome org.springframework.boot.autoconfigure.jdbc.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.jdbc.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.jdbc.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( boolean ( org.springframework.boot.autoconfigure.jdbc.ConditionContext , javax.sql.DataSource .class ) || boolean ( org.springframework.boot.autoconfigure.jdbc.ConditionContext , javax.sql.XADataSource .class ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } if ( anyMatches ( org.springframework.boot.autoconfigure.jdbc.ConditionContext , org.springframework.boot.autoconfigure.jdbc.AnnotatedTypeMetadata , this . org.springframework.boot.autoconfigure.jdbc.SpringBootCondition , this . org.springframework.boot.autoconfigure.jdbc.SpringBootCondition ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConditionContext org.springframework.boot.autoconfigure.jdbc.ConditionContext , java.lang.Class<?> < ? > java.lang.Class<?> ) { return BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.boot.autoconfigure.jdbc.ConditionContext . getBeanFactory ( ) , java.lang.Class<> , true , false ) . length > NUMBER ; }  <METHOD_END>
