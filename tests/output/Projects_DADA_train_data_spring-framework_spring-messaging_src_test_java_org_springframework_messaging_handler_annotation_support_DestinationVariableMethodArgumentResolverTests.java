<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver = new DestinationVariableMethodArgumentResolver ( new DefaultConversionService ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolverTests> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class , java.lang.String .class ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter . initParameterNameDiscovery ( new DefaultParameterNameDiscoverer ( ) ) ; GenericTypeResolver . resolveParameterType ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , DestinationVariableMethodArgumentResolver .class ) ; this . org.springframework.messaging.handler.annotation.support.MethodParameter . initParameterNameDiscovery ( new DefaultParameterNameDiscoverer ( ) ) ; GenericTypeResolver . resolveParameterType ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , DestinationVariableMethodArgumentResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver . supportsParameter ( org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; assertTrue ( org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver . supportsParameter ( org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; assertFalse ( org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver . supportsParameter ( org.springframework.messaging.handler.annotation.support.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < byte [] > org.springframework.messaging.handler.annotation.support.Message<byte[]> = MessageBuilder . withPayload ( new byte [ NUMBER ] ) . setHeader ( DestinationVariableMethodArgumentResolver . DESTINATION_TEMPLATE_VARIABLES_HEADER , java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Object java.lang.Object = this . org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<byte[]> ) ; assertEquals ( STRING , java.lang.Object ) ; java.lang.Object = this . org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<byte[]> ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.Exception { Message < byte [] > org.springframework.messaging.handler.annotation.support.Message<byte[]> = MessageBuilder . withPayload ( new byte [ NUMBER ] ) . build ( ) ; this . org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver . resolveArgument ( this . org.springframework.messaging.handler.annotation.support.MethodParameter , org.springframework.messaging.handler.annotation.support.Message<byte[]> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( @ DestinationVariable java.lang.String java.lang.String , @ DestinationVariable ( value = STRING ) java.lang.String java.lang.String , java.lang.String java.lang.String ) {	}  <METHOD_END>
