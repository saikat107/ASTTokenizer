<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.xml.AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ParserContext . extractSource ( org.w3c.dom.Element ) ; BeanComponentDefinition org.springframework.integration.config.xml.BeanComponentDefinition = IntegrationNamespaceUtils . parseInnerHandlerDefinition ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( IntegrationNamespaceUtils . REF_ATTRIBUTE ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( IntegrationNamespaceUtils . METHOD_ATTRIBUTE ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( IntegrationNamespaceUtils . EXPRESSION_ATTRIBUTE ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; boolean boolean = org.springframework.integration.config.xml.BeanComponentDefinition != null ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = org.w3c.dom.Element != null ; if ( ! boolean & ! boolean & ! boolean & ! boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , java.lang.Object ) ; } if ( boolean ) { if ( boolean | boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , java.lang.Object ) ; } } if ( boolean & boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = null ; if ( boolean ) { org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ExpressionEvaluatingMessageHandler .class ) ; RootBeanDefinition org.springframework.integration.config.xml.RootBeanDefinition = new RootBeanDefinition ( ExpressionFactoryBean .class ) ; org.springframework.integration.config.xml.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( java.lang.String ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.RootBeanDefinition ) ; } else if ( boolean ) { org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MethodInvokingMessageHandler .class ) ; BeanDefinition org.springframework.integration.config.xml.BeanDefinition = org.springframework.integration.config.xml.ParserContext . getDelegate ( ) . parseCustomElement ( org.w3c.dom.Element , org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.BeanDefinition ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( STRING ) ; } else { org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MethodInvokingMessageHandler .class ) ; if ( boolean ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } else { org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.BeanComponentDefinition ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( boolean ? java.lang.String : STRING ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , STRING ) ; return org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
