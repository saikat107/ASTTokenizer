<METHOD_START> @ java.lang.Override public final org.springframework.http.client.HttpHeaders org.springframework.http.client.HttpHeaders ( ) { return ( this . boolean ? HttpHeaders . readOnlyHttpHeaders ( this . org.springframework.http.client.HttpHeaders ) : this . org.springframework.http.client.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { void ( ) ; return java.io.OutputStream ( this . org.springframework.http.client.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> < ClientHttpResponse > org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ( ) java.io.IOException { void ( ) ; ListenableFuture < ClientHttpResponse > org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> = org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ( this . org.springframework.http.client.HttpHeaders ) ; this . boolean = true ; return org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { Assert . state ( ! this . boolean , STRING ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.io.OutputStream java.io.OutputStream ( HttpHeaders org.springframework.http.client.HttpHeaders ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected abstract org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> < ClientHttpResponse > org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ( HttpHeaders org.springframework.http.client.HttpHeaders )			throws java.io.IOException ;  <METHOD_END>
