<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LookupOperation ( null , Fields . field ( STRING ) , Fields . field ( STRING ) , Fields . field ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LookupOperation ( Fields . field ( STRING ) , null , Fields . field ( STRING ) , Fields . field ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LookupOperation ( Fields . field ( STRING ) , Fields . field ( STRING ) , null , Fields . field ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new LookupOperation ( Fields . field ( STRING ) , Fields . field ( STRING ) , Fields . field ( STRING ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LookupOperation org.springframework.data.mongodb.core.aggregation.LookupOperation = Aggregation . lookup ( STRING , STRING , STRING , STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.LookupOperation ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LookupOperation org.springframework.data.mongodb.core.aggregation.LookupOperation = Aggregation . lookup ( STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.LookupOperation . getFields ( ) . exposesNoFields ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.LookupOperation . getFields ( ) . exposesSingleFieldOnly ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.LookupOperation . getFields ( ) . getField ( STRING ) , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.aggregation.Document org.springframework.data.mongodb.core.aggregation.Document ( LookupOperation org.springframework.data.mongodb.core.aggregation.LookupOperation ) { Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.LookupOperation . toDocument ( Aggregation . DEFAULT_CONTEXT ) ; Document org.springframework.data.mongodb.core.aggregation.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.aggregation.Document , STRING ) ; return org.springframework.data.mongodb.core.aggregation.Document ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { LookupOperation . newLookup ( ) . from ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { LookupOperation . newLookup ( ) . from ( STRING ) . localField ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { LookupOperation . newLookup ( ) . from ( STRING ) . localField ( STRING ) . foreignField ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { LookupOperation . newLookup ( ) . from ( STRING ) . localField ( STRING ) . foreignField ( STRING ) . as ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LookupOperation org.springframework.data.mongodb.core.aggregation.LookupOperation = LookupOperation . newLookup ( ) . from ( STRING ) . localField ( STRING ) . foreignField ( STRING ) . as ( STRING ) ; Document org.springframework.data.mongodb.core.aggregation.Document = org.springframework.data.mongodb.core.aggregation.Document ( org.springframework.data.mongodb.core.aggregation.LookupOperation ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.Document , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LookupOperation org.springframework.data.mongodb.core.aggregation.LookupOperation = LookupOperation . newLookup ( ) . from ( STRING ) . localField ( STRING ) . foreignField ( STRING ) . as ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.LookupOperation . getFields ( ) . exposesNoFields ( ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.LookupOperation . getFields ( ) . exposesSingleFieldOnly ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.aggregation.LookupOperation . getFields ( ) . getField ( STRING ) , notNullValue ( ) ) ; }  <METHOD_END>
