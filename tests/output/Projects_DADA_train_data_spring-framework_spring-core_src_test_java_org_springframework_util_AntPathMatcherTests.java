<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.util.AntPathMatcher . setTrimTokens ( true ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . matchStart ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.AntPathMatcher . setPathSeparator ( STRING ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING STRING STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . extractPathWithinPattern ( STRING STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING STRING STRING , STRING ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.String> = org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.util.AntPathMatcher . extractUriTemplateVariables ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( null , null ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , null ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( null , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING STRING , org.springframework.util.AntPathMatcher . combine ( STRING STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> = org.springframework.util.AntPathMatcher . getPatternComparator ( STRING ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( null , null ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( null , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , null ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( - NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; assertEquals ( NUMBER , java.util.Comparator<java.lang.String> . int ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> = org.springframework.util.AntPathMatcher . getPatternComparator ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( NUMBER ) ; java.util.List<java.lang.String> . boolean ( null ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertNull ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( null ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertNull ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.Comparator<java.lang.String> = org.springframework.util.AntPathMatcher . getPatternComparator ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; java.util.Comparator<java.lang.String> = org.springframework.util.AntPathMatcher . getPatternComparator ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING STRING ) ; java.util.List<java.lang.String> . boolean ( STRING STRING ) ; java.util.Collections . void ( java.util.List<java.lang.String> , java.util.Comparator<java.lang.String> ) ; assertEquals ( STRING STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.String> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.AntPathMatcher . setTrimTokens ( false ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertFalse ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.AntPathMatcher . setCaseSensitive ( false ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; assertTrue ( org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertTrue ( org.springframework.util.AntPathMatcher . stringMatcherCache . size ( ) > NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.util.AntPathMatcher . match ( STRING + int , STRING ) ; } assertTrue ( org.springframework.util.AntPathMatcher . stringMatcherCache . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.AntPathMatcher . setCachePatterns ( true ) ; void ( ) ; assertTrue ( org.springframework.util.AntPathMatcher . stringMatcherCache . size ( ) > NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.util.AntPathMatcher . match ( STRING + int , STRING + int ) ; } assertTrue ( org.springframework.util.AntPathMatcher . stringMatcherCache . size ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.AntPathMatcher . setCachePatterns ( true ) ; assertEquals ( NUMBER , org.springframework.util.AntPathMatcher . stringMatcherCache . size ( ) ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.util.AntPathMatcher . stringMatcherCache . size ( ) ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.util.AntPathMatcher . stringMatcherCache . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.AntPathMatcher . setCachePatterns ( true ) ; assertEquals ( NUMBER , org.springframework.util.AntPathMatcher . stringMatcherCache . size ( ) ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING ) ; org.springframework.util.AntPathMatcher . match ( STRING STRING , STRING STRING ) ; assertEquals ( NUMBER , org.springframework.util.AntPathMatcher . stringMatcherCache . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.AntPathMatcher . setCachePatterns ( false ) ; void ( ) ; assertTrue ( org.springframework.util.AntPathMatcher . stringMatcherCache . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.util.AntPathMatcher . setPathSeparator ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.util.AntPathMatcher . combine ( STRING , STRING ) ) ; }  <METHOD_END>
