<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.session.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.session.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.session.ExpectedException . expectMessage ( STRING ) ; load ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( STRING ) ; assertThat ( this . context . getBeansOfType ( SessionRepository .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( java.util.Collections .< java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> ( org.springframework.boot.autoconfigure.session.SessionAutoConfigurationTests.SessionRepositoryConfiguration .class ) , STRING ) ; MapSessionRepository org.springframework.boot.autoconfigure.session.MapSessionRepository = validateSessionRepository ( MapSessionRepository .class ) ; assertThat ( this . context . getBean ( STRING ) ) . isSameAs ( org.springframework.boot.autoconfigure.session.MapSessionRepository ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( STRING ) ; MapSessionRepository org.springframework.boot.autoconfigure.session.MapSessionRepository = validateSessionRepository ( MapSessionRepository .class ) ; assertThat ( getSessionTimeout ( org.springframework.boot.autoconfigure.session.MapSessionRepository ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( STRING , STRING ) ; MapSessionRepository org.springframework.boot.autoconfigure.session.MapSessionRepository = validateSessionRepository ( MapSessionRepository .class ) ; assertThat ( getSessionTimeout ( org.springframework.boot.autoconfigure.session.MapSessionRepository ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( STRING , STRING ) ; MapSessionRepository org.springframework.boot.autoconfigure.session.MapSessionRepository = validateSessionRepository ( MapSessionRepository .class ) ; assertThat ( getSessionTimeout ( org.springframework.boot.autoconfigure.session.MapSessionRepository ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( EmbeddedMongoAutoConfiguration .class , MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) , STRING ) ; validateSessionRepository ( MongoOperationsSessionRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { load ( java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( EmbeddedMongoAutoConfiguration .class , MongoAutoConfiguration .class , MongoDataAutoConfiguration .class ) , STRING , STRING ) ; MongoOperationsSessionRepository org.springframework.boot.autoconfigure.session.MongoOperationsSessionRepository = validateSessionRepository ( MongoOperationsSessionRepository .class ) ; assertThat ( new DirectFieldAccessor ( org.springframework.boot.autoconfigure.session.MongoOperationsSessionRepository ) . getPropertyValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.session.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.session.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.session.ExpectedException . expectMessage ( STRING ) ; load ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { load ( STRING ) ; FilterRegistrationBean < ? > org.springframework.boot.autoconfigure.session.FilterRegistrationBean<?> = this . context . getBean ( FilterRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.session.FilterRegistrationBean<> . getFilter ( ) ) . isSameAs ( this . context . getBean ( SessionRepositoryFilter .class ) ) ; assertThat ( ( java.util.EnumSet<org.springframework.boot.autoconfigure.session.DispatcherType> < DispatcherType > ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.session.FilterRegistrationBean<> , STRING ) ) . containsOnly ( DispatcherType . ASYNC , DispatcherType . ERROR , DispatcherType . REQUEST ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.session.SessionRepository<?> < ? > org.springframework.boot.autoconfigure.session.SessionRepository<?> ( ) { return new MapSessionRepository ( java.util.Collections .< java.lang.String , ExpiringSession > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.session.ExpiringSession> ( ) ) ; }  <METHOD_END>
