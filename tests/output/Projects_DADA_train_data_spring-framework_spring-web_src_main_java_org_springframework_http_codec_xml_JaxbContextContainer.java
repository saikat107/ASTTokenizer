<METHOD_START> public javax.xml.bind.Marshaller javax.xml.bind.Marshaller ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws javax.xml.bind.JAXBException { javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext = javax.xml.bind.JAXBContext ( java.lang.Class<> ) ; return javax.xml.bind.JAXBContext . javax.xml.bind.Marshaller ( ) ; }  <METHOD_END>
<METHOD_START> public javax.xml.bind.Unmarshaller javax.xml.bind.Unmarshaller ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws javax.xml.bind.JAXBException { javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext = javax.xml.bind.JAXBContext ( java.lang.Class<> ) ; return javax.xml.bind.JAXBContext . javax.xml.bind.Unmarshaller ( ) ; }  <METHOD_END>
<METHOD_START> private javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws javax.xml.bind.JAXBException { Assert . notNull ( java.lang.Class<> , STRING ) ; javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext = this . java.util.concurrent.ConcurrentMap<java.lang.Class<?>,javax.xml.bind.JAXBContext> . javax.xml.bind.JAXBContext ( java.lang.Class<> ) ; if ( javax.xml.bind.JAXBContext == null ) { javax.xml.bind.JAXBContext = javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( java.lang.Class<> ) ; this . java.util.concurrent.ConcurrentMap<java.lang.Class<?>,javax.xml.bind.JAXBContext> . javax.xml.bind.JAXBContext ( java.lang.Class<> , javax.xml.bind.JAXBContext ) ; } return javax.xml.bind.JAXBContext ; }  <METHOD_END>
