<METHOD_START> public void ( MetadataReader org.springframework.context.annotation.MetadataReader , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.MetadataReader . getAnnotationMetadata ( ) ; this . org.springframework.context.annotation.Resource = org.springframework.context.annotation.MetadataReader . getResource ( ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( MetadataReader org.springframework.context.annotation.MetadataReader , org.springframework.context.annotation.ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) { this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.MetadataReader . getAnnotationMetadata ( ) ; this . org.springframework.context.annotation.Resource = org.springframework.context.annotation.MetadataReader . getResource ( ) ; this . java.util.Set<org.springframework.context.annotation.ConfigurationClass> . boolean ( org.springframework.context.annotation.ConfigurationClass ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.context.annotation.AnnotationMetadata = new StandardAnnotationMetadata ( java.lang.Class<> , true ) ; this . org.springframework.context.annotation.Resource = new DescriptiveResource ( java.lang.Class<> . java.lang.String ( ) ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.context.annotation.ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) { this . org.springframework.context.annotation.AnnotationMetadata = new StandardAnnotationMetadata ( java.lang.Class<> , true ) ; this . org.springframework.context.annotation.Resource = new DescriptiveResource ( java.lang.Class<> . java.lang.String ( ) ) ; this . java.util.Set<org.springframework.context.annotation.ConfigurationClass> . boolean ( org.springframework.context.annotation.ConfigurationClass ) ; }  <METHOD_END>
<METHOD_START> public void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.AnnotationMetadata ; this . org.springframework.context.annotation.Resource = new DescriptiveResource ( org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ( ) { return this . org.springframework.context.annotation.AnnotationMetadata ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.Resource org.springframework.context.annotation.Resource ( ) { return this . org.springframework.context.annotation.Resource ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ClassUtils . getShortName ( org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! this . java.util.Set<org.springframework.context.annotation.ConfigurationClass> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.context.annotation.ConfigurationClass org.springframework.context.annotation.ConfigurationClass ) { this . java.util.Set<org.springframework.context.annotation.ConfigurationClass> . boolean ( org.springframework.context.annotation.ConfigurationClass . java.util.Set<org.springframework.context.annotation.ConfigurationClass> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.context.annotation.ConfigurationClass> < org.springframework.context.annotation.ConfigurationClass > java.util.Set<org.springframework.context.annotation.ConfigurationClass> ( ) { return this . java.util.Set<org.springframework.context.annotation.ConfigurationClass> ; }  <METHOD_END>
<METHOD_START> public void void ( BeanMethod org.springframework.context.annotation.BeanMethod ) { this . java.util.Set<org.springframework.context.annotation.BeanMethod> . add ( org.springframework.context.annotation.BeanMethod ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.context.annotation.BeanMethod> < BeanMethod > java.util.Set<org.springframework.context.annotation.BeanMethod> ( ) { return this . java.util.Set<org.springframework.context.annotation.BeanMethod> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> < ? extends BeanDefinitionReader > java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> ) { this . java.util.Map<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> . put ( java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ImportBeanDefinitionRegistrar org.springframework.context.annotation.ImportBeanDefinitionRegistrar , AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { this . java.util.Map<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> . put ( org.springframework.context.annotation.ImportBeanDefinitionRegistrar , org.springframework.context.annotation.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> < ImportBeanDefinitionRegistrar , AnnotationMetadata > java.util.Map<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> ( ) { return this . java.util.Map<org.springframework.context.annotation.ImportBeanDefinitionRegistrar,org.springframework.context.annotation.AnnotationMetadata> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> < java.lang.String , java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader> < ? extends BeanDefinitionReader > > java.util.Map<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> ( ) { return this . java.util.Map<java.lang.String,java.lang.Class<? extends org.springframework.context.annotation.BeanDefinitionReader>> ; }  <METHOD_END>
<METHOD_START> public void void ( ProblemReporter org.springframework.context.annotation.ProblemReporter ) { if ( org.springframework.context.annotation.AnnotationMetadata ( ) . isAnnotated ( Configuration .class . java.lang.String ( ) ) ) { if ( org.springframework.context.annotation.AnnotationMetadata ( ) . isFinal ( ) ) { org.springframework.context.annotation.ProblemReporter . error ( new org.springframework.context.annotation.ConfigurationClass.FinalConfigurationProblem ( ) ) ; } } for ( BeanMethod org.springframework.context.annotation.BeanMethod : this . java.util.Set<org.springframework.context.annotation.BeanMethod> ) { org.springframework.context.annotation.BeanMethod . validate ( org.springframework.context.annotation.ProblemReporter ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.context.annotation.ConfigurationClass && org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) . equals ( ( ( org.springframework.context.annotation.ConfigurationClass ) java.lang.Object ) . org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.context.annotation.AnnotationMetadata ( ) . getClassName ( ) . hashCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING + this . org.springframework.context.annotation.Resource ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( java.lang.String . java.lang.String ( STRING , java.lang.String ( ) ) , new Location ( org.springframework.context.annotation.Resource ( ) , org.springframework.context.annotation.AnnotationMetadata ( ) ) ); }  <METHOD_END>
