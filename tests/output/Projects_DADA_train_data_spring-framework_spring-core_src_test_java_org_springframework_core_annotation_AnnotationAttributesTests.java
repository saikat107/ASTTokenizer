<METHOD_START> @ Test public void void ( ) { AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , NUMBER ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , new java.lang.String [] { STRING , STRING , STRING } ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , true ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , false ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , org.springframework.core.annotation.AnnotationAttributesTests.Color . org.springframework.core.annotation.AnnotationAttributesTests.Color ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.Integer .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , new java.lang.Class<?> < ? > [] { java.lang.Number .class , java.lang.Short .class , java.lang.Integer .class } ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , NUMBER ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , new AnnotationAttributes [] { org.springframework.core.annotation.AnnotationAttributes } ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getString ( STRING ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) , equalTo ( new java.lang.String [] { STRING , STRING , STRING } ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getBoolean ( STRING ) , equalTo ( true ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getBoolean ( STRING ) , equalTo ( false ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes .< org.springframework.core.annotation.AnnotationAttributesTests.Color > getEnum ( STRING ) , equalTo ( org.springframework.core.annotation.AnnotationAttributesTests.Color . org.springframework.core.annotation.AnnotationAttributesTests.Color ) ) ; assertTrue ( org.springframework.core.annotation.AnnotationAttributes . getClass ( STRING ) . equals ( java.lang.Integer .class ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getClassArray ( STRING ) , equalTo ( new java.lang.Class<?> < ? > [] { java.lang.Number .class , java.lang.Short .class , java.lang.Integer .class } ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes .< java.lang.Integer > getNumber ( STRING ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getAnnotation ( STRING ) .< java.lang.Integer > getNumber ( STRING ) , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getAnnotationArray ( STRING ) [ NUMBER ] . getString ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationAttributes . put ( STRING , new java.lang.ClassNotFoundException ( STRING ) ) ; org.springframework.core.annotation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.AnnotationAttributes . getClass ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationAttributesTests.Filter org.springframework.core.annotation.AnnotationAttributesTests.Filter = org.springframework.core.annotation.AnnotationAttributesTests.FilteredClass .class . org.springframework.core.annotation.AnnotationAttributesTests.Filter ( org.springframework.core.annotation.AnnotationAttributesTests.Filter .class ) ; AnnotationAttributes org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , STRING ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.Number .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , org.springframework.core.annotation.AnnotationAttributes ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , org.springframework.core.annotation.AnnotationAttributesTests.Filter ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getStringArray ( STRING ) , equalTo ( new java.lang.String [] { STRING } ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes . getClassArray ( STRING ) , equalTo ( new java.lang.Class<?> < ? > [] { java.lang.Number .class } ) ) ; AnnotationAttributes [] org.springframework.core.annotation.AnnotationAttributes[] = org.springframework.core.annotation.AnnotationAttributes . getAnnotationArray ( STRING ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributes[] ) ; assertThat ( array . length , is ( NUMBER ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributes[] [ NUMBER ] . getString ( STRING ) , equalTo ( STRING ) ) ; org.springframework.core.annotation.AnnotationAttributesTests.Filter [] org.springframework.core.annotation.AnnotationAttributesTests.Filter[] = org.springframework.core.annotation.AnnotationAttributes . getAnnotationArray ( STRING , org.springframework.core.annotation.AnnotationAttributesTests.Filter .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributesTests.Filter[] ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributesTests.Filter[] . int , is ( NUMBER ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributesTests.Filter[] [ NUMBER ] . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.annotation.AnnotationAttributesTests.Filter org.springframework.core.annotation.AnnotationAttributesTests.Filter = org.springframework.core.annotation.AnnotationAttributesTests.FilteredClass .class . org.springframework.core.annotation.AnnotationAttributesTests.Filter ( org.springframework.core.annotation.AnnotationAttributesTests.Filter .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , org.springframework.core.annotation.AnnotationAttributesTests.Filter ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , new org.springframework.core.annotation.AnnotationAttributesTests.Filter [] { org.springframework.core.annotation.AnnotationAttributesTests.Filter , org.springframework.core.annotation.AnnotationAttributesTests.Filter } ) ; org.springframework.core.annotation.AnnotationAttributesTests.Filter org.springframework.core.annotation.AnnotationAttributesTests.Filter = org.springframework.core.annotation.AnnotationAttributes . getAnnotation ( STRING , org.springframework.core.annotation.AnnotationAttributesTests.Filter .class ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributesTests.Filter , equalTo ( org.springframework.core.annotation.AnnotationAttributesTests.Filter ) ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributesTests.Filter . java.lang.String ( ) , equalTo ( STRING ) ) ; org.springframework.core.annotation.AnnotationAttributesTests.Filter [] org.springframework.core.annotation.AnnotationAttributesTests.Filter[] = org.springframework.core.annotation.AnnotationAttributes . getAnnotationArray ( STRING , org.springframework.core.annotation.AnnotationAttributesTests.Filter .class ) ; assertNotNull ( org.springframework.core.annotation.AnnotationAttributesTests.Filter[] ) ; assertEquals ( NUMBER , org.springframework.core.annotation.AnnotationAttributesTests.Filter[] . int ) ; assertThat ( org.springframework.core.annotation.AnnotationAttributesTests.Filter[] [ NUMBER ] . java.lang.String ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( STRING ) ; org.springframework.core.annotation.AnnotationAttributes . getEnum ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( STRING ) ; org.springframework.core.annotation.AnnotationAttributes . getEnum ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( STRING ) ; org.springframework.core.annotation.AnnotationAttributes . getEnum ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.core.annotation.AnnotationAttributes . put ( STRING , STRING ) ; org.springframework.core.annotation.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.core.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.core.annotation.AnnotationAttributes . getEnum ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertEquals ( java.lang.String , org.springframework.core.annotation.AnnotationAttributes . getString ( java.lang.String ) ) ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertEquals ( java.lang.String , org.springframework.core.annotation.AnnotationAttributes . getString ( java.lang.String ) ) ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertEquals ( java.lang.String , org.springframework.core.annotation.AnnotationAttributes . getString ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String[] ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertArrayEquals ( java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( java.lang.String ) ) ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String[] ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertArrayEquals ( java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( java.lang.String ) ) ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String[] ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String[] ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertArrayEquals ( java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( java.lang.String ) ) ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String[] ) ; AnnotationUtils . registerDefaultValues ( org.springframework.core.annotation.AnnotationAttributes ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertArrayEquals ( java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( java.lang.String ) ) ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; org.springframework.core.annotation.AnnotationAttributes . put ( STRING , java.lang.String[] ) ; AnnotationUtils . registerDefaultValues ( org.springframework.core.annotation.AnnotationAttributes ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertArrayEquals ( java.lang.String[] , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( java.lang.String ) ) ) ; org.springframework.core.annotation.AnnotationAttributes = new AnnotationAttributes ( ImplicitAliasesContextConfig .class ) ; AnnotationUtils . registerDefaultValues ( org.springframework.core.annotation.AnnotationAttributes ) ; AnnotationUtils . postProcessAnnotationAttributes ( null , org.springframework.core.annotation.AnnotationAttributes , false ) ; java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . void ( java.lang.String -> assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.core.annotation.AnnotationAttributes . getStringArray ( java.lang.String ) ) ) ; }  <METHOD_END>
