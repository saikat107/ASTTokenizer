<METHOD_START> @ Test public void void ( ) { CouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiry > org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiry> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiry > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiry .class ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiry> . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiryUnit > org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiryUnit> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiryUnit > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiryUnit .class ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.DefaultExpiryUnit> . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.LimitDaysExpiry > org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.LimitDaysExpiry> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.LimitDaysExpiry > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.LimitDaysExpiry .class ) ) ; assertEquals ( NUMBER * NUMBER * NUMBER * NUMBER , org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.LimitDaysExpiry> . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitDaysExpiry > org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitDaysExpiry> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitDaysExpiry > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitDaysExpiry .class ) ) ; int int = org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitDaysExpiry> . getExpiry ( ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = new java.util.Date ( int * NUMBER ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitDaysExpiry> + STRING + java.util.Date ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitSecondsExpiry > org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitSecondsExpiry> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitSecondsExpiry > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitSecondsExpiry .class ) ) ; int int = org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitSecondsExpiry> . getExpiry ( ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = new java.util.Date ( int * NUMBER ) ; java.lang.System . java.io.PrintStream . void ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.OverLimitSecondsExpiry> + STRING + java.util.Date ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( java.util.Calendar . int , int ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; assertEquals ( java.util.Calendar . int ( java.util.Calendar . int ) , java.util.Calendar . int ( java.util.Calendar . int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.SimpleDocument .class ) . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.SimpleDocumentWithExpiry .class ) . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.SimpleDocument .class ) . isTouchOnRead ( ) ) ; assertFalse ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.SimpleDocumentWithExpiry .class ) . isTouchOnRead ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.SimpleDocumentWithTouchOnRead .class ) . isTouchOnRead ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.ConstantExpiryExpression .class ) . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.ExpiryWithValidExpression .class ) . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.couchbase.core.mapping.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.couchbase.core.mapping.ExpectedException . expectMessage ( STRING ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.ExpiryWithInvalidExpression .class ) . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BasicCouchbasePersistentEntity org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity = org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.ExpiryWithValidExpression .class ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity . getExpiry ( ) ) ; org.springframework.data.couchbase.core.mapping.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( new MockPropertySource ( ) . withProperty ( STRING , STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity . getExpiry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.couchbase.core.mapping.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.couchbase.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.ExpiryWithMissingProperty .class ) . getExpiry ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.couchbase.core.mapping.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.couchbase.core.mapping.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.couchbase.core.mapping.ExpectedException . expectMessage ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.ExpiryAndExpression .class . java.lang.String ( ) ) ; org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntityTests.ExpiryAndExpression .class ) . getExpiry ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ( java.lang.Class<?> < ? > java.lang.Class<?> ) { BasicCouchbasePersistentEntity org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity = new BasicCouchbasePersistentEntity ( ClassTypeInformation . from ( java.lang.Class<> ) ) ; org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity . setEnvironment ( org.springframework.data.couchbase.core.mapping.ConfigurableEnvironment ) ; return org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity ; }  <METHOD_END>
