<METHOD_START> @ Test public void void ( ) { DefaultSoapHeaderMapper org.springframework.integration.ws.DefaultSoapHeaderMapper = new DefaultSoapHeaderMapper ( ) ; SoapMessage org.springframework.integration.ws.SoapMessage = mock ( SoapMessage .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.ws.DefaultSoapHeaderMapper . toHeadersFromReply ( org.springframework.integration.ws.SoapMessage ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultSoapHeaderMapper org.springframework.integration.ws.DefaultSoapHeaderMapper = new DefaultSoapHeaderMapper ( ) ; org.springframework.integration.ws.DefaultSoapHeaderMapper . setReplyHeaderNames ( STRING , STRING ) ; SoapMessage org.springframework.integration.ws.SoapMessage = mock ( SoapMessage .class ) ; SoapHeader org.springframework.integration.ws.SoapHeader = mock ( SoapHeader .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Iterator<javax.xml.namespace.QName> < javax.xml.namespace.QName > java.util.Iterator<javax.xml.namespace.QName> = mock ( java.util.Iterator .class ) ; javax.xml.namespace.QName javax.xml.namespace.QName = new javax.xml.namespace.QName ( STRING , STRING , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> < SoapHeaderElement > java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> = mock ( java.util.Iterator .class ) ; SoapHeaderElement org.springframework.integration.ws.SoapHeaderElement = mock ( SoapHeaderElement .class ) ; javax.xml.namespace.QName javax.xml.namespace.QName = new javax.xml.namespace.QName ( STRING , STRING , STRING ) ; when ( org.springframework.integration.ws.SoapMessage . getSoapHeader ( ) ) . thenReturn ( org.springframework.integration.ws.SoapHeader ) ; when ( org.springframework.integration.ws.SoapHeader . getAllAttributes ( ) ) . thenReturn ( java.util.Iterator<javax.xml.namespace.QName> ) ; when ( java.util.Iterator<javax.xml.namespace.QName> . boolean ( ) ) . thenReturn ( true ) . thenReturn ( false ) ; when ( java.util.Iterator<javax.xml.namespace.QName> . javax.xml.namespace.QName ( ) ) . thenReturn ( javax.xml.namespace.QName ) ; when ( org.springframework.integration.ws.SoapHeader . getAttributeValue ( javax.xml.namespace.QName ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ws.SoapHeader . examineAllHeaderElements ( ) ) . thenReturn ( java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> ) ; when ( java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> . hasNext ( ) ) . thenReturn ( true ) . thenReturn ( false ) ; when ( java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> . next ( ) ) . thenReturn ( org.springframework.integration.ws.SoapHeaderElement ) ; when ( org.springframework.integration.ws.SoapHeaderElement . getName ( ) ) . thenReturn ( javax.xml.namespace.QName ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.ws.DefaultSoapHeaderMapper . toHeadersFromReply ( org.springframework.integration.ws.SoapMessage ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertSame ( org.springframework.integration.ws.SoapHeaderElement , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; javax.xml.soap.SOAPMessage javax.xml.soap.SOAPMessage = javax.xml.soap.MessageFactory . javax.xml.soap.MessageFactory ( ) . javax.xml.soap.SOAPMessage ( new javax.xml.soap.MimeHeaders ( ) , new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( STRING ) ) ) ; SoapMessage org.springframework.integration.ws.SoapMessage = new SaajSoapMessage ( javax.xml.soap.SOAPMessage ) ; DefaultSoapHeaderMapper org.springframework.integration.ws.DefaultSoapHeaderMapper = new DefaultSoapHeaderMapper ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.ws.DefaultSoapHeaderMapper . setRequestHeaderNames ( java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.ws.DefaultSoapHeaderMapper . toHeadersFromRequest ( org.springframework.integration.ws.SoapMessage ) ; assertNotNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) , instanceOf ( SoapHeaderElement .class ) ) ; SoapHeaderElement org.springframework.integration.ws.SoapHeaderElement = ( SoapHeaderElement ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = ( javax.xml.transform.dom.DOMSource ) org.springframework.integration.ws.SoapHeaderElement . getSource ( ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = javax.xml.transform.dom.DOMSource . org.w3c.dom.Node ( ) . org.w3c.dom.NodeList ( ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . org.w3c.dom.Node ( ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . org.w3c.dom.Node ( ) . java.lang.String ( ) ) ; org.springframework.integration.ws.SoapHeaderElement = ( SoapHeaderElement ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertNotNull ( org.springframework.integration.ws.SoapHeaderElement ) ; javax.xml.transform.dom.DOMSource = ( javax.xml.transform.dom.DOMSource ) org.springframework.integration.ws.SoapHeaderElement . getSource ( ) ; org.w3c.dom.NodeList = javax.xml.transform.dom.DOMSource . org.w3c.dom.Node ( ) . org.w3c.dom.NodeList ( ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . java.lang.String ( ) ) ; org.springframework.integration.ws.SoapHeaderElement = ( SoapHeaderElement ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertNotNull ( org.springframework.integration.ws.SoapHeaderElement ) ; javax.xml.transform.dom.DOMSource = ( javax.xml.transform.dom.DOMSource ) org.springframework.integration.ws.SoapHeaderElement . getSource ( ) ; org.w3c.dom.NodeList = javax.xml.transform.dom.DOMSource . org.w3c.dom.Node ( ) . org.w3c.dom.NodeList ( ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . java.lang.String ( ) ) ; assertNull ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultSoapHeaderMapper org.springframework.integration.ws.DefaultSoapHeaderMapper = new DefaultSoapHeaderMapper ( ) ; SoapMessage org.springframework.integration.ws.SoapMessage = mock ( SoapMessage .class ) ; when ( org.springframework.integration.ws.SoapMessage . getSoapAction ( ) ) . thenReturn ( null ) ; assertTrue ( org.springframework.integration.ws.DefaultSoapHeaderMapper . extractStandardHeaders ( org.springframework.integration.ws.SoapMessage ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultSoapHeaderMapper org.springframework.integration.ws.DefaultSoapHeaderMapper = new DefaultSoapHeaderMapper ( ) ; SoapMessage org.springframework.integration.ws.SoapMessage = mock ( SoapMessage .class ) ; when ( org.springframework.integration.ws.SoapMessage . getSoapAction ( ) ) . thenReturn ( STRING ) ; assertTrue ( org.springframework.integration.ws.DefaultSoapHeaderMapper . extractStandardHeaders ( org.springframework.integration.ws.SoapMessage ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultSoapHeaderMapper org.springframework.integration.ws.DefaultSoapHeaderMapper = new DefaultSoapHeaderMapper ( ) ; SoapMessage org.springframework.integration.ws.SoapMessage = mock ( SoapMessage .class ) ; when ( org.springframework.integration.ws.SoapMessage . getSoapAction ( ) ) . thenReturn ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.ws.DefaultSoapHeaderMapper . toHeadersFromRequest ( org.springframework.integration.ws.SoapMessage ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( WebServiceHeaders . SOAP_ACTION ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( WebServiceHeaders . SOAP_ACTION ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.xml.soap.SOAPException , javax.xml.transform.TransformerException { DefaultSoapHeaderMapper org.springframework.integration.ws.DefaultSoapHeaderMapper = new DefaultSoapHeaderMapper ( ) ; org.springframework.integration.ws.DefaultSoapHeaderMapper . setReplyHeaderNames ( STRING , STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING ; javax.xml.transform.Source javax.xml.transform.Source = new StringSource ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , javax.xml.transform.Source ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new StringSource ( STRING ) ) ; SaajSoapMessage org.springframework.integration.ws.SaajSoapMessage = new SaajSoapMessage ( javax.xml.soap.MessageFactory . javax.xml.soap.MessageFactory ( ) . javax.xml.soap.SOAPMessage ( ) ) ; org.springframework.integration.ws.DefaultSoapHeaderMapper . fromHeadersToReply ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.ws.SaajSoapMessage ) ; SoapHeader org.springframework.integration.ws.SoapHeader = org.springframework.integration.ws.SaajSoapMessage . getSoapHeader ( ) ; assertEquals ( STRING , org.springframework.integration.ws.SoapHeader . getAttributeValue ( QNameUtils . parseQNameString ( STRING ) ) ) ; java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> < SoapHeaderElement > java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> = org.springframework.integration.ws.SoapHeader . examineHeaderElements ( QNameUtils . parseQNameString ( STRING ) ) ; assertTrue ( java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> . hasNext ( ) ) ; SoapHeaderElement org.springframework.integration.ws.SoapHeaderElement = java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> . next ( ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = ( javax.xml.transform.dom.DOMSource ) org.springframework.integration.ws.SoapHeaderElement . getSource ( ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = javax.xml.transform.dom.DOMSource . org.w3c.dom.Node ( ) . org.w3c.dom.NodeList ( ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . org.w3c.dom.Node ( ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) . org.w3c.dom.Node ( ) . java.lang.String ( ) ) ; java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> < SoapHeaderElement > java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> = org.springframework.integration.ws.SoapHeader . examineHeaderElements ( QNameUtils . parseQNameString ( STRING ) ) ; assertTrue ( java.util.Iterator<org.springframework.integration.ws.SoapHeaderElement> . hasNext ( ) ) ; }  <METHOD_END>
