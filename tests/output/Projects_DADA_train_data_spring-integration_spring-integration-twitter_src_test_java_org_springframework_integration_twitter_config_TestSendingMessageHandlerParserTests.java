<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.twitter.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.twitter.config.TestSendingMessageHandlerParserTests> ( ) ) ; EventDrivenConsumer org.springframework.integration.twitter.config.EventDrivenConsumer = org.springframework.integration.twitter.config.ConfigurableApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; MessageHandler org.springframework.integration.twitter.config.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.twitter.config.EventDrivenConsumer , STRING , MessageHandler .class ) ; assertEquals ( DirectMessageSendingMessageHandler .class , org.springframework.integration.twitter.config.MessageHandler . getClass ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.twitter.config.MessageHandler , STRING ) ) ; org.springframework.integration.twitter.config.EventDrivenConsumer = org.springframework.integration.twitter.config.ConfigurableApplicationContext . getBean ( STRING , EventDrivenConsumer .class ) ; org.springframework.integration.twitter.config.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.twitter.config.EventDrivenConsumer , STRING , MessageHandler .class ) ; org.springframework.integration.twitter.config.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; MessageHandler org.springframework.integration.twitter.config.MessageHandler = TestUtils . getPropertyValue ( org.springframework.integration.twitter.config.ConfigurableApplicationContext . getBean ( STRING ) , STRING , MessageHandler .class ) ; assertNotSame ( org.springframework.integration.twitter.config.MessageHandler , org.springframework.integration.twitter.config.MessageHandler ) ; org.springframework.integration.twitter.config.MessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , int ) ; org.springframework.integration.twitter.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.twitter.config.TestSendingMessageHandlerParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.integration.twitter.config.BeansException ) { assertTrue ( org.springframework.integration.twitter.config.BeansException instanceof BeanDefinitionParsingException ) ; assertTrue ( org.springframework.integration.twitter.config.BeansException . getMessage ( ) . contains ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.twitter.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.twitter.config.Message<?> ) throws java.lang.Exception { int ++ ; return null ; }  <METHOD_END>
