<METHOD_START> @ Before public void void ( ) java.lang.Exception { NamespaceHandlerResolver org.springframework.beans.factory.xml.support.NamespaceHandlerResolver = new DefaultNamespaceHandlerResolver ( java.lang.Class<> . java.lang.ClassLoader ( ) , java.lang.String ) ; this . org.springframework.beans.factory.xml.support.GenericApplicationContext = new GenericApplicationContext ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.support.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( this . org.springframework.beans.factory.xml.support.GenericApplicationContext ) ; org.springframework.beans.factory.xml.support.XmlBeanDefinitionReader . setNamespaceHandlerResolver ( org.springframework.beans.factory.xml.support.NamespaceHandlerResolver ) ; org.springframework.beans.factory.xml.support.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_XSD ) ; org.springframework.beans.factory.xml.support.XmlBeanDefinitionReader . setEntityResolver ( new org.springframework.beans.factory.xml.support.CustomNamespaceHandlerTests.DummySchemaResolver ( ) ) ; org.springframework.beans.factory.xml.support.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.support.Resource ( ) ) ; this . org.springframework.beans.factory.xml.support.GenericApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.support.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBean ( STRING ) ; void ( org.springframework.beans.factory.xml.support.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.support.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBean ( STRING ) ; void ( org.springframework.beans.factory.xml.support.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.beans.factory.xml.support.ITestBean = ( ITestBean ) this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBean ( STRING ) ; void ( org.springframework.beans.factory.xml.support.ITestBean ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.beans.factory.xml.support.ITestBean ) ) ; Advisor [] org.springframework.beans.factory.xml.support.Advisor[] = ( ( Advised ) org.springframework.beans.factory.xml.support.ITestBean ) . getAdvisors ( ) ; assertEquals ( STRING , NUMBER , advisors . length ) ; assertEquals ( STRING , DebugInterceptor .class , org.springframework.beans.factory.xml.support.Advisor[] [ NUMBER ] . getAdvice ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBeanNamesForType ( ApplicationListener .class ) ; assertTrue ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . boolean ( STRING ) ) ; assertEquals ( ApplicationListener .class , this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getType ( STRING ) ) ; try { this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.support.BeanCreationException . getRootCause ( ) instanceof BeanInstantiationException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.beans.factory.xml.support.ITestBean = ( ITestBean ) this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBean ( STRING ) ; void ( org.springframework.beans.factory.xml.support.ITestBean ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.beans.factory.xml.support.ITestBean ) ) ; Advisor [] org.springframework.beans.factory.xml.support.Advisor[] = ( ( Advised ) org.springframework.beans.factory.xml.support.ITestBean ) . getAdvisors ( ) ; assertEquals ( STRING , NUMBER , advisors . length ) ; assertEquals ( STRING , DebugInterceptor .class , org.springframework.beans.factory.xml.support.Advisor[] [ NUMBER ] . getAdvice ( ) . getClass ( ) ) ; assertEquals ( STRING , NopInterceptor .class , org.springframework.beans.factory.xml.support.Advisor[] [ NUMBER ] . getAdvice ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinition org.springframework.beans.factory.xml.support.BeanDefinition = this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBeanDefinition ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.support.BeanDefinition . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBean ( STRING ) ; assertNotNull ( java.util.List<> ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<?> < ? > java.util.Set<?> = ( java.util.Set<?> < ? > ) this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBean ( STRING ) ; assertNotNull ( java.util.Set<> ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) this . org.springframework.beans.factory.xml.support.GenericApplicationContext . getBean ( STRING ) ; assertNotNull ( java.util.Map<,> ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ITestBean org.springframework.beans.factory.xml.support.ITestBean ) { assertEquals ( STRING , STRING , org.springframework.beans.factory.xml.support.ITestBean . getName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.beans.factory.xml.support.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.beans.factory.xml.support.Resource org.springframework.beans.factory.xml.support.Resource ( ) { return new ClassPathResource ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( java.lang.Class<> . java.lang.ClassLoader ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.xml.sax.InputSource org.xml.sax.InputSource ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException { org.xml.sax.InputSource org.xml.sax.InputSource = super. resolveEntity ( java.lang.String , java.lang.String ) ; if ( org.xml.sax.InputSource == null ) { Resource org.springframework.beans.factory.xml.support.Resource = new ClassPathResource ( java.lang.String ) ; org.xml.sax.InputSource = new org.xml.sax.InputSource ( org.springframework.beans.factory.xml.support.Resource . getInputStream ( ) ) ; org.xml.sax.InputSource . void ( java.lang.String ) ; org.xml.sax.InputSource . void ( java.lang.String ) ; } return org.xml.sax.InputSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { registerBeanDefinitionParser ( STRING , new org.springframework.beans.factory.xml.support.TestNamespaceHandler.TestBeanDefinitionParser ( ) ) ; registerBeanDefinitionParser ( STRING , new org.springframework.beans.factory.xml.support.TestNamespaceHandler.PersonDefinitionParser ( ) ) ; registerBeanDefinitionDecorator ( STRING , new org.springframework.beans.factory.xml.support.TestNamespaceHandler.PropertyModifyingBeanDefinitionDecorator ( ) ) ; registerBeanDefinitionDecorator ( STRING , new org.springframework.beans.factory.xml.support.TestNamespaceHandler.DebugBeanDefinitionDecorator ( ) ) ; registerBeanDefinitionDecorator ( STRING , new org.springframework.beans.factory.xml.support.TestNamespaceHandler.NopInterceptorBeanDefinitionDecorator ( ) ) ; registerBeanDefinitionDecoratorForAttribute ( STRING , new org.springframework.beans.factory.xml.support.TestNamespaceHandler.ObjectNameBeanDefinitionDecorator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.xml.support.BeanDefinition org.springframework.beans.factory.xml.support.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.beans.factory.xml.support.ParserContext ) { RootBeanDefinition org.springframework.beans.factory.xml.support.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.beans.factory.xml.support.RootBeanDefinition . setBeanClass ( TestBean .class ) ; MutablePropertyValues org.springframework.beans.factory.xml.support.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.xml.support.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.beans.factory.xml.support.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.beans.factory.xml.support.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.xml.support.MutablePropertyValues ) ; org.springframework.beans.factory.xml.support.ParserContext . getRegistry ( ) . registerBeanDefinition ( org.w3c.dom.Element . java.lang.String ( STRING ) , org.springframework.beans.factory.xml.support.RootBeanDefinition ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( org.w3c.dom.Element org.w3c.dom.Element ) { return TestBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , BeanDefinitionBuilder org.springframework.beans.factory.xml.support.BeanDefinitionBuilder ) { org.springframework.beans.factory.xml.support.BeanDefinitionBuilder . addPropertyValue ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.beans.factory.xml.support.BeanDefinitionBuilder . addPropertyValue ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.xml.support.BeanDefinitionHolder org.springframework.beans.factory.xml.support.BeanDefinitionHolder ( org.w3c.dom.Node org.w3c.dom.Node , BeanDefinitionHolder org.springframework.beans.factory.xml.support.BeanDefinitionHolder , ParserContext org.springframework.beans.factory.xml.support.ParserContext ) { org.w3c.dom.Element org.w3c.dom.Element = ( org.w3c.dom.Element ) org.w3c.dom.Node ; BeanDefinition org.springframework.beans.factory.xml.support.BeanDefinition = org.springframework.beans.factory.xml.support.BeanDefinitionHolder . getBeanDefinition ( ) ; MutablePropertyValues org.springframework.beans.factory.xml.support.MutablePropertyValues = ( org.springframework.beans.factory.xml.support.BeanDefinition . getPropertyValues ( ) == null ) ? new MutablePropertyValues ( ) : org.springframework.beans.factory.xml.support.BeanDefinition . getPropertyValues ( ) ; org.springframework.beans.factory.xml.support.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.beans.factory.xml.support.MutablePropertyValues . add ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; ( ( AbstractBeanDefinition ) org.springframework.beans.factory.xml.support.BeanDefinition ) . setPropertyValues ( org.springframework.beans.factory.xml.support.MutablePropertyValues ) ; return org.springframework.beans.factory.xml.support.BeanDefinitionHolder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.beans.factory.xml.support.BeanDefinition org.springframework.beans.factory.xml.support.BeanDefinition ( org.w3c.dom.Node org.w3c.dom.Node ) { return new RootBeanDefinition ( DebugInterceptor .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.beans.factory.xml.support.BeanDefinition org.springframework.beans.factory.xml.support.BeanDefinition ( org.w3c.dom.Node org.w3c.dom.Node ) { return new RootBeanDefinition ( NopInterceptor .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.xml.support.BeanDefinitionHolder org.springframework.beans.factory.xml.support.BeanDefinitionHolder ( org.w3c.dom.Node org.w3c.dom.Node , BeanDefinitionHolder org.springframework.beans.factory.xml.support.BeanDefinitionHolder , ParserContext org.springframework.beans.factory.xml.support.ParserContext ) { org.w3c.dom.Attr org.w3c.dom.Attr = ( org.w3c.dom.Attr ) org.w3c.dom.Node ; org.springframework.beans.factory.xml.support.BeanDefinitionHolder . getBeanDefinition ( ) . setAttribute ( STRING , org.w3c.dom.Attr . java.lang.String ( ) ) ; return org.springframework.beans.factory.xml.support.BeanDefinitionHolder ; }  <METHOD_END>
