<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object>> ( org.springframework.boot.test.json.ExampleObject ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object>> ( org.springframework.boot.test.json.ExampleObject ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExampleObject [] org.springframework.boot.test.json.ExampleObject[] = new ExampleObject [] { org.springframework.boot.test.json.ExampleObject } ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object>> ( org.springframework.boot.test.json.ExampleObject[] ) ) . asArray ( ) . containsExactly ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object>> ( org.springframework.boot.test.json.ExampleObject ) ) . asArray ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.boot.test.json.ExampleObject> < java.lang.String , ExampleObject > java.util.Map<java.lang.String,org.springframework.boot.test.json.ExampleObject> = java.util.Collections . java.util.Map ( STRING , org.springframework.boot.test.json.ExampleObject ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object>> ( java.util.Map<java.lang.String,org.springframework.boot.test.json.ExampleObject> ) ) . asMap ( ) . containsEntry ( STRING , org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object>> ( org.springframework.boot.test.json.ExampleObject ) ) . asMap ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object>> < ObjectContentAssert < java.lang.Object > > org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object>> ( final java.lang.Object java.lang.Object ) { return new AssertProvider < ObjectContentAssert < java.lang.Object > > ( ) { @ java.lang.Override public org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object> < java.lang.Object > org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object> ( ) { return new ObjectContentAssert <> ( java.lang.Object ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object> < java.lang.Object > org.springframework.boot.test.json.ObjectContentAssert<java.lang.Object> ( ) { return new ObjectContentAssert <> ( java.lang.Object ) ; }  <METHOD_END>
