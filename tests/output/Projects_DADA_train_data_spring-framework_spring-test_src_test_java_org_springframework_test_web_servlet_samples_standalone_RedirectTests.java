<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.standalone.MockMvc = standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.RedirectTests.PersonController ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( post ( STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( redirectedUrl ( STRING ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attributeExists ( STRING ) ) . andExpect ( flash ( ) . attributeCount ( NUMBER ) ) . andExpect ( flash ( ) . attribute ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( post ( STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( redirectedUrl ( STRING ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attributeExists ( STRING ) ) . andExpect ( flash ( ) . attributeCount ( NUMBER ) ) . andExpect ( flash ( ) . attribute ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( post ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attributeExists ( STRING ) ) . andExpect ( flash ( ) . attributeCount ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( post ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attributeExists ( STRING ) ) . andExpect ( flash ( ) . attributeCount ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . flashAttr ( STRING , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attribute ( STRING , new Person ( STRING ) ) ) . andExpect ( model ( ) . attribute ( STRING , STRING ) ) . andExpect ( flash ( ) . attributeCount ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( @ PathVariable java.lang.String java.lang.String , Model org.springframework.test.web.servlet.samples.standalone.Model ) { org.springframework.test.web.servlet.samples.standalone.Model . addAttribute ( new Person ( java.lang.String ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) public java.lang.String java.lang.String ( @ Valid Person org.springframework.test.web.servlet.samples.standalone.Person , Errors org.springframework.test.web.servlet.samples.standalone.Errors , RedirectAttributes org.springframework.test.web.servlet.samples.standalone.RedirectAttributes ) { if ( org.springframework.test.web.servlet.samples.standalone.Errors . hasErrors ( ) ) { return STRING ; } org.springframework.test.web.servlet.samples.standalone.RedirectAttributes . addAttribute ( STRING , STRING ) ; org.springframework.test.web.servlet.samples.standalone.RedirectAttributes . addFlashAttribute ( STRING , STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) public java.lang.Object java.lang.Object ( @ Valid Person org.springframework.test.web.servlet.samples.standalone.Person , Errors org.springframework.test.web.servlet.samples.standalone.Errors , RedirectAttributes org.springframework.test.web.servlet.samples.standalone.RedirectAttributes ) { if ( org.springframework.test.web.servlet.samples.standalone.Errors . hasErrors ( ) ) { return STRING ; } org.springframework.test.web.servlet.samples.standalone.RedirectAttributes . addAttribute ( STRING , STRING ) ; org.springframework.test.web.servlet.samples.standalone.RedirectAttributes . addFlashAttribute ( STRING , STRING ) ; return new java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( STRING ) ; }  <METHOD_END>
