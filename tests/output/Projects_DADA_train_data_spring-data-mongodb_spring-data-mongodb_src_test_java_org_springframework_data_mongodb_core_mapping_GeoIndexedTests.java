<METHOD_START> @ Before public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.net.UnknownHostException { Mongo org.springframework.data.mongodb.core.mapping.Mongo = new MongoClient ( ) ; DB org.springframework.data.mongodb.core.mapping.DB = org.springframework.data.mongodb.core.mapping.Mongo . getDB ( GeoIndexedAppConfig . GEO_DB ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.data.mongodb.core.mapping.DB . getCollection ( java.lang.String ) . drop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GeoLocation org.springframework.data.mongodb.core.mapping.GeoLocation = new GeoLocation ( new double [] { NUMBER , - NUMBER } ) ; org.springframework.data.mongodb.core.mapping.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.GeoLocation ) ; boolean boolean = org.springframework.data.mongodb.core.mapping.MongoTemplate . execute ( STRING , new CollectionCallback < java.lang.Boolean > ( ) { public java.lang.Boolean java.lang.Boolean ( MongoCollection < Document > org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> ) throws org.springframework.data.mongodb.core.mapping.MongoException , org.springframework.data.mongodb.core.mapping.DataAccessException { java.util.List<org.springframework.data.mongodb.core.mapping.Document> < Document > java.util.List<org.springframework.data.mongodb.core.mapping.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapping.Document> < Document > ( ) ; org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> . listIndexes ( Document .class ) . into ( java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) ; for ( Document org.springframework.data.mongodb.core.mapping.Document : java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) { if ( STRING . boolean ( org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) ) ) { return true ; } } return false ; } } ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( MongoCollection < Document > org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> ) throws org.springframework.data.mongodb.core.mapping.MongoException , org.springframework.data.mongodb.core.mapping.DataAccessException { java.util.List<org.springframework.data.mongodb.core.mapping.Document> < Document > java.util.List<org.springframework.data.mongodb.core.mapping.Document> = new java.util.ArrayList<org.springframework.data.mongodb.core.mapping.Document> < Document > ( ) ; org.springframework.data.mongodb.core.mapping.MongoCollection<org.springframework.data.mongodb.core.mapping.Document> . listIndexes ( Document .class ) . into ( java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) ; for ( Document org.springframework.data.mongodb.core.mapping.Document : java.util.List<org.springframework.data.mongodb.core.mapping.Document> ) { if ( STRING . boolean ( org.springframework.data.mongodb.core.mapping.Document . get ( STRING ) ) ) { return true ; } } return false ; }  <METHOD_END>
