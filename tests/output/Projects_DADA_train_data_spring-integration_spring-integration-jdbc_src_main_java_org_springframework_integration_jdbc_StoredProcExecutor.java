<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { Assert . notNull ( javax.sql.DataSource , STRING ) ; this . javax.sql.DataSource = javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.jdbc.Expression == null ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } if ( this . java.util.List<org.springframework.integration.jdbc.ProcedureParameter> != null ) { if ( this . org.springframework.integration.jdbc.SqlParameterSourceFactory == null ) { ExpressionEvaluatingSqlParameterSourceFactory org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory = new ExpressionEvaluatingSqlParameterSourceFactory ( ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setBeanFactory ( this . org.springframework.integration.jdbc.BeanFactory ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setStaticParameters ( ProcedureParameter . convertStaticParameters ( this . java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setParameterExpressions ( ProcedureParameter . convertExpressions ( this . java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ) ) ; this . org.springframework.integration.jdbc.SqlParameterSourceFactory = org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory ; } else { if ( ! ( this . org.springframework.integration.jdbc.SqlParameterSourceFactory instanceof ExpressionEvaluatingSqlParameterSourceFactory ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + STRING + STRING + this . org.springframework.integration.jdbc.SqlParameterSourceFactory . getClass ( ) . getName ( ) + STRING ) ; } } if ( this . java.lang.Boolean == null ) { this . java.lang.Boolean = false ; } } else { if ( this . org.springframework.integration.jdbc.SqlParameterSourceFactory == null ) { this . org.springframework.integration.jdbc.SqlParameterSourceFactory = new BeanPropertySqlParameterSourceFactory ( ) ; } if ( this . java.lang.Boolean == null ) { this . java.lang.Boolean = true ; } } if ( boolean ) { this . org.springframework.integration.jdbc.StoredProcExecutor.GuavaCacheWrapper = new org.springframework.integration.jdbc.StoredProcExecutor.GuavaCacheWrapper ( this , this . int ) ; } else { this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> = new java.util.LinkedHashMap<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> < java.lang.String , SimpleJdbcCallOperations > ( this . int + NUMBER , NUMBER , true ) { private static final long long = NUMBER ; @ java.lang.Override protected boolean boolean ( java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> < java.lang.String , SimpleJdbcCallOperations > java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> ) { return int ( ) > org.springframework.integration.jdbc.StoredProcExecutor .this . int ; } } ; } this . org.springframework.integration.jdbc.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . org.springframework.integration.jdbc.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> < java.lang.String , SimpleJdbcCallOperations > java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> ) { return int ( ) > org.springframework.integration.jdbc.StoredProcExecutor .this . int ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jdbc.SimpleJdbcCall org.springframework.integration.jdbc.SimpleJdbcCall ( java.lang.String java.lang.String ) { final SimpleJdbcCall org.springframework.integration.jdbc.SimpleJdbcCall = new SimpleJdbcCall ( this . javax.sql.DataSource ) ; if ( this . boolean ) { org.springframework.integration.jdbc.SimpleJdbcCall . withFunctionName ( java.lang.String ) ; } else { org.springframework.integration.jdbc.SimpleJdbcCall . withProcedureName ( java.lang.String ) ; } if ( this . boolean ) { org.springframework.integration.jdbc.SimpleJdbcCall . withoutProcedureColumnMetaDataAccess ( ) ; } org.springframework.integration.jdbc.SimpleJdbcCall . declareParameters ( this . java.util.List<org.springframework.integration.jdbc.SqlParameter> . toArray ( new SqlParameter [ this . java.util.List<org.springframework.integration.jdbc.SqlParameter> . size ( ) ] ) ) ; if ( ! this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> . isEmpty ( ) ) { for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> < java.lang.String , RowMapper < ? > > java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> : this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> . entrySet ( ) ) { org.springframework.integration.jdbc.SimpleJdbcCall . returningResultSet ( java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> . getValue ( ) ) ; } } if ( this . boolean ) { org.springframework.integration.jdbc.SimpleJdbcCall . withReturnValue ( ) ; } org.springframework.integration.jdbc.SimpleJdbcCall . getJdbcTemplate ( ) . setSkipUndeclaredResults ( this . boolean ) ; return org.springframework.integration.jdbc.SimpleJdbcCall ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ( new java.lang.Object ( ) , this . java.lang.String ( null ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Message < ? > org.springframework.integration.jdbc.Message<?> ) { Assert . notNull ( org.springframework.integration.jdbc.Message<> , STRING ) ; Assert . notNull ( this . java.lang.Boolean , STRING + STRING ) ; final java.lang.Object java.lang.Object ; if ( this . java.lang.Boolean ) { java.lang.Object = org.springframework.integration.jdbc.Message<> . getPayload ( ) ; } else { java.lang.Object = org.springframework.integration.jdbc.Message<> ; } return java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object , java.lang.String ( org.springframework.integration.jdbc.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Message < ? > org.springframework.integration.jdbc.Message<?> ) { final java.lang.String java.lang.String = this . org.springframework.integration.jdbc.Expression . getValue ( this . org.springframework.integration.jdbc.EvaluationContext , org.springframework.integration.jdbc.Message<> , java.lang.String .class ) ; Assert . hasText ( java.lang.String , java.lang.String . java.lang.String ( STRING , this . org.springframework.integration.jdbc.Expression . getExpressionString ( ) ) ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . notNull ( this . org.springframework.integration.jdbc.SqlParameterSourceFactory , STRING + STRING ) ; SimpleJdbcCallOperations org.springframework.integration.jdbc.SimpleJdbcCallOperations = org.springframework.integration.jdbc.SimpleJdbcCallOperations ( java.lang.String ) ; SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = this . org.springframework.integration.jdbc.SqlParameterSourceFactory . createParameterSource ( java.lang.Object ) ; return org.springframework.integration.jdbc.SimpleJdbcCallOperations . execute ( org.springframework.integration.jdbc.SqlParameterSource ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.jdbc.SimpleJdbcCallOperations org.springframework.integration.jdbc.SimpleJdbcCallOperations ( java.lang.String java.lang.String ) { if ( boolean ) { return this . org.springframework.integration.jdbc.StoredProcExecutor.GuavaCacheWrapper . org.springframework.integration.jdbc.LoadingCache<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> . getUnchecked ( java.lang.String ) ; } else { SimpleJdbcCallOperations org.springframework.integration.jdbc.SimpleJdbcCallOperations = this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> . get ( java.lang.String ) ; if ( org.springframework.integration.jdbc.SimpleJdbcCallOperations == null ) { synchronized ( this . java.lang.Object ) { org.springframework.integration.jdbc.SimpleJdbcCallOperations = this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> . get ( java.lang.String ) ; if ( org.springframework.integration.jdbc.SimpleJdbcCallOperations == null ) { org.springframework.integration.jdbc.SimpleJdbcCallOperations = org.springframework.integration.jdbc.SimpleJdbcCall ( java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> . put ( java.lang.String , org.springframework.integration.jdbc.SimpleJdbcCallOperations ) ; } } } return org.springframework.integration.jdbc.SimpleJdbcCallOperations ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.jdbc.ProcedureParameter> < ProcedureParameter > java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ) { Assert . notEmpty ( java.util.List<org.springframework.integration.jdbc.ProcedureParameter> , STRING ) ; for ( ProcedureParameter org.springframework.integration.jdbc.ProcedureParameter : java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ) { Assert . notNull ( org.springframework.integration.jdbc.ProcedureParameter , STRING ) ; } this . java.util.List<org.springframework.integration.jdbc.ProcedureParameter> = java.util.List<org.springframework.integration.jdbc.ProcedureParameter> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.jdbc.SqlParameter> < SqlParameter > java.util.List<org.springframework.integration.jdbc.SqlParameter> ) { Assert . notEmpty ( java.util.List<org.springframework.integration.jdbc.SqlParameter> , STRING ) ; for ( SqlParameter org.springframework.integration.jdbc.SqlParameter : java.util.List<org.springframework.integration.jdbc.SqlParameter> ) { Assert . notNull ( org.springframework.integration.jdbc.SqlParameter , STRING ) ; } this . java.util.List<org.springframework.integration.jdbc.SqlParameter> = java.util.List<org.springframework.integration.jdbc.SqlParameter> ; }  <METHOD_END>
<METHOD_START> public void void ( SqlParameterSourceFactory org.springframework.integration.jdbc.SqlParameterSourceFactory ) { Assert . notNull ( org.springframework.integration.jdbc.SqlParameterSourceFactory , STRING ) ; this . org.springframework.integration.jdbc.SqlParameterSourceFactory = org.springframework.integration.jdbc.SqlParameterSourceFactory ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute ( defaultValue = STRING ) public java.lang.String java.lang.String ( ) { return this . org.springframework.integration.jdbc.Expression instanceof LiteralExpression ? this . org.springframework.integration.jdbc.Expression . getValue ( java.lang.String .class ) : null ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute ( defaultValue = STRING ) public java.lang.String java.lang.String ( ) { return this . org.springframework.integration.jdbc.Expression != null ? this . org.springframework.integration.jdbc.Expression . getExpressionString ( ) : null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.jdbc.Expression = new LiteralExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.jdbc.Expression ) { Assert . notNull ( org.springframework.integration.jdbc.Expression , STRING ) ; this . org.springframework.integration.jdbc.Expression = org.springframework.integration.jdbc.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> < java.lang.String , RowMapper < ? > > java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> ) { Assert . notNull ( java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> , STRING ) ; for ( RowMapper < ? > org.springframework.integration.jdbc.RowMapper<?> : java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> . values ( ) ) { Assert . notNull ( org.springframework.integration.jdbc.RowMapper<> , STRING ) ; } this . java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> = java.util.Map<java.lang.String,org.springframework.integration.jdbc.RowMapper<?>> ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { if ( ! boolean ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } return this . org.springframework.integration.jdbc.StoredProcExecutor.GuavaCacheWrapper . org.springframework.integration.jdbc.LoadingCache<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> . stats ( ) ; }  <METHOD_END>
<METHOD_START> @ ManagedMetric public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { if ( ! boolean ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; } final CacheStats org.springframework.integration.jdbc.CacheStats = ( CacheStats ) java.lang.Object ( ) ; final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . averageLoadPenalty ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . evictionCount ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . hitCount ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . hitRate ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . loadCount ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . loadExceptionCount ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . loadExceptionRate ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . loadSuccessCount ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . missCount ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . missRate ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.jdbc.CacheStats . totalLoadTime ( ) ) ; return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int >= NUMBER , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.jdbc.BeanFactory ) { this . org.springframework.integration.jdbc.BeanFactory = org.springframework.integration.jdbc.BeanFactory ; }  <METHOD_END>
<METHOD_START> private void ( final org.springframework.integration.jdbc.StoredProcExecutor org.springframework.integration.jdbc.StoredProcExecutor , int int ) { this . org.springframework.integration.jdbc.LoadingCache<java.lang.String,org.springframework.integration.jdbc.SimpleJdbcCallOperations> = CacheBuilder . newBuilder ( ) . maximumSize ( int ) . recordStats ( ) . build ( new CacheLoader < java.lang.String , SimpleJdbcCallOperations > ( ) { @ java.lang.Override public org.springframework.integration.jdbc.SimpleJdbcCallOperations org.springframework.integration.jdbc.SimpleJdbcCallOperations ( java.lang.String java.lang.String ) throws java.lang.Exception { return org.springframework.integration.jdbc.StoredProcExecutor . org.springframework.integration.jdbc.SimpleJdbcCall ( java.lang.String ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jdbc.SimpleJdbcCallOperations org.springframework.integration.jdbc.SimpleJdbcCallOperations ( java.lang.String java.lang.String ) throws java.lang.Exception { return org.springframework.integration.jdbc.StoredProcExecutor . org.springframework.integration.jdbc.SimpleJdbcCall ( java.lang.String ) ; }  <METHOD_END>
