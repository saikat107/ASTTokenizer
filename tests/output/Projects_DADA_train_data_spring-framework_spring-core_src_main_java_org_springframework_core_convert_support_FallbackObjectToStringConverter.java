<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( new ConvertiblePair ( java.lang.Object .class , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.convert.support.TypeDescriptor . getObjectType ( ) ; if ( java.lang.String .class == java.lang.Class<> ) { return false ; } return ( java.lang.CharSequence .class . boolean ( java.lang.Class<> ) || java.io.StringWriter .class . boolean ( java.lang.Class<> ) || ObjectToObjectConverter . hasConversionMethodOrConstructor ( java.lang.Class<> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return ( java.lang.Object != null ? java.lang.Object . java.lang.String ( ) : null ) ; }  <METHOD_END>
