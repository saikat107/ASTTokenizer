<METHOD_START> @ Parameters ( name = STRING ) public static java.lang.Object [] [] java.lang.Object[][] ( ) java.io.IOException { Flux < ? extends WebSocketClient > org.springframework.web.reactive.socket.Flux<? extends org.springframework.web.reactive.socket.WebSocketClient> = Flux . concat ( Flux . just ( new StandardWebSocketClient ( ) ) . repeat ( NUMBER ) , Flux . just ( new JettyWebSocketClient ( ) ) . repeat ( NUMBER ) , Flux . just ( new ReactorNettyWebSocketClient ( ) ) . repeat ( NUMBER ) , Flux . just ( new RxNettyWebSocketClient ( ) ) . repeat ( NUMBER ) , Flux . just ( new UndertowWebSocketClient ( Xnio . getInstance ( ) . createWorker ( OptionMap . EMPTY ) ) ) . repeat ( NUMBER ) ) ; Flux < ? extends HttpServer > org.springframework.web.reactive.socket.Flux<? extends org.springframework.web.reactive.socket.HttpServer> = Flux . just ( new TomcatHttpServer ( java.io.File . java.lang.String ( ) , WsContextListener .class ) , new JettyHttpServer ( ) , new ReactorHttpServer ( ) , new RxNettyHttpServer ( ) , new UndertowHttpServer ( ) ) . repeat ( NUMBER ) ; Flux < ? extends java.lang.Class<?> < ? > > org.springframework.web.reactive.socket.Flux<? extends java.lang.Class<?>> = Flux . just ( org.springframework.web.reactive.socket.AbstractWebSocketIntegrationTests.TomcatConfig .class , org.springframework.web.reactive.socket.AbstractWebSocketIntegrationTests.JettyConfig .class , org.springframework.web.reactive.socket.AbstractWebSocketIntegrationTests.ReactorNettyConfig .class , org.springframework.web.reactive.socket.AbstractWebSocketIntegrationTests.RxNettyConfig .class , org.springframework.web.reactive.socket.AbstractWebSocketIntegrationTests.UndertowConfig .class ) . repeat ( NUMBER ) ; return Flux . zip ( org.springframework.web.reactive.socket.Flux<> , org.springframework.web.reactive.socket.Flux<> , org.springframework.web.reactive.socket.Flux<> ) . map ( Tuple3 :: toArray ) . collectList ( ) . block ( ) . toArray ( new java.lang.Object [ [ NUMBER ][ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { assumeFalse ( this . org.springframework.web.reactive.socket.WebSocketClient instanceof UndertowWebSocketClient && this . org.springframework.web.reactive.socket.HttpServer instanceof RxNettyHttpServer ) ; this . org.springframework.web.reactive.socket.HttpServer . setHandler ( org.springframework.web.reactive.socket.HttpHandler ( ) ) ; this . org.springframework.web.reactive.socket.HttpServer . afterPropertiesSet ( ) ; this . org.springframework.web.reactive.socket.HttpServer . start ( ) ; this . int = this . org.springframework.web.reactive.socket.HttpServer . getPort ( ) ; if ( this . org.springframework.web.reactive.socket.WebSocketClient instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.reactive.socket.WebSocketClient ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { if ( this . org.springframework.web.reactive.socket.WebSocketClient instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.reactive.socket.WebSocketClient ) . stop ( ) ; } this . org.springframework.web.reactive.socket.HttpServer . stop ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.HttpHandler org.springframework.web.reactive.socket.HttpHandler ( ) { AnnotationConfigApplicationContext org.springframework.web.reactive.socket.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.socket.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.socket.AbstractWebSocketIntegrationTests.DispatcherConfig .class , this . java.lang.Class<> ) ; org.springframework.web.reactive.socket.AnnotationConfigApplicationContext . register ( java.lang.Class<?> ( ) ) ; org.springframework.web.reactive.socket.AnnotationConfigApplicationContext . refresh ( ) ; return DispatcherHandler . toHttpHandler ( org.springframework.web.reactive.socket.AnnotationConfigApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected java.net.URI java.net.URI ( java.lang.String java.lang.String ) throws java.net.URISyntaxException { return new java.net.URI ( STRING + this . int + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<?> < ? > java.lang.Class<?> ( )  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.socket.DispatcherHandler org.springframework.web.reactive.socket.DispatcherHandler ( ) { return new DispatcherHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.socket.WebSocketHandlerAdapter org.springframework.web.reactive.socket.WebSocketHandlerAdapter ( ) { return new WebSocketHandlerAdapter ( org.springframework.web.reactive.socket.WebSocketService ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.socket.WebSocketService org.springframework.web.reactive.socket.WebSocketService ( ) { return new HandshakeWebSocketService ( org.springframework.web.reactive.socket.RequestUpgradeStrategy ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.reactive.socket.RequestUpgradeStrategy org.springframework.web.reactive.socket.RequestUpgradeStrategy ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.socket.RequestUpgradeStrategy org.springframework.web.reactive.socket.RequestUpgradeStrategy ( ) { return new ReactorNettyRequestUpgradeStrategy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.socket.RequestUpgradeStrategy org.springframework.web.reactive.socket.RequestUpgradeStrategy ( ) { return new RxNettyRequestUpgradeStrategy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.socket.RequestUpgradeStrategy org.springframework.web.reactive.socket.RequestUpgradeStrategy ( ) { return new TomcatRequestUpgradeStrategy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.socket.RequestUpgradeStrategy org.springframework.web.reactive.socket.RequestUpgradeStrategy ( ) { return new UndertowRequestUpgradeStrategy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.socket.RequestUpgradeStrategy org.springframework.web.reactive.socket.RequestUpgradeStrategy ( ) { return new JettyRequestUpgradeStrategy ( ) ; }  <METHOD_END>
