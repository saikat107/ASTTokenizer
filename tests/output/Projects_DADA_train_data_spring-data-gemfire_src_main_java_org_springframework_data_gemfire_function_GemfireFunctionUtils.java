<METHOD_START> public static void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , boolean boolean ) { java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ? ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) : STRING ; PojoFunctionWrapper org.springframework.data.gemfire.function.PojoFunctionWrapper = new PojoFunctionWrapper ( java.lang.Object , java.lang.reflect.Method , java.lang.String ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) { org.springframework.data.gemfire.function.PojoFunctionWrapper . setHA ( ( java.lang.Boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; } if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) { org.springframework.data.gemfire.function.PojoFunctionWrapper . setOptimizeForWrite ( ( java.lang.Boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; } if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) { int int = ( java.lang.Integer ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; Assert . isTrue ( int >= NUMBER , java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) ) ) ; org.springframework.data.gemfire.function.PojoFunctionWrapper . setBatchSize ( int ) ; } if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) { if ( java.lang.Boolean . java.lang.Boolean . boolean ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ) { org.springframework.data.gemfire.function.PojoFunctionWrapper . setHasResult ( true ) ; } } if ( FunctionService . isRegistered ( org.springframework.data.gemfire.function.PojoFunctionWrapper . getId ( ) ) ) { if ( boolean ) { if ( org.springframework.data.gemfire.function.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.function.Log . debug ( STRING + org.springframework.data.gemfire.function.PojoFunctionWrapper . getId ( ) ) ; } FunctionService . unregisterFunction ( org.springframework.data.gemfire.function.PojoFunctionWrapper . getId ( ) ) ; } } if ( ! FunctionService . isRegistered ( org.springframework.data.gemfire.function.PojoFunctionWrapper . getId ( ) ) ) { FunctionService . registerFunction ( org.springframework.data.gemfire.function.PojoFunctionWrapper ) ; if ( org.springframework.data.gemfire.function.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.function.Log . debug ( STRING + org.springframework.data.gemfire.function.PojoFunctionWrapper . getId ( ) ) ; } } else { if ( org.springframework.data.gemfire.function.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.function.Log . debug ( STRING + org.springframework.data.gemfire.function.PojoFunctionWrapper . getId ( ) + STRING ) ; } } }  <METHOD_END>
<METHOD_START> public static int int ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { int int = - NUMBER ; java.lang.annotation.Annotation [] [] java.lang.annotation.Annotation[][] = java.lang.reflect.Method . java.lang.annotation.Annotation[][] ( ) ; if ( java.lang.annotation.Annotation[][] . int > NUMBER ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ; for ( int int = NUMBER ; int < java.lang.annotation.Annotation[][] . int ; int ++ ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.annotation.Annotation[][] [ int ] ; if ( java.lang.annotation.Annotation[] . int > NUMBER ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . boolean ( java.lang.Class<> ) ) { Assert . state ( int < NUMBER , java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; boolean boolean = false ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<?>> ) { if ( java.lang.Class<> . boolean ( java.lang.Class<?>[] [ int ] ) ) { boolean = true ; break; } } Assert . isTrue ( boolean , java.lang.String . java.lang.String ( STRING , java.lang.Class<?>[] [ int ] , java.lang.Class<> . java.lang.String ( ) , StringUtils . arrayToCommaDelimitedString ( java.lang.Class<?>[] ) , java.lang.reflect.Method . java.lang.String ( ) ) ) ; int = int ; } } } } } return int ; }  <METHOD_END>
