<METHOD_START> @ Before public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { org.springframework.data.mongodb.repository.query.MappingContext<? extends org.springframework.data.mongodb.repository.query.MongoPersistentEntity<?>,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> = new MongoMappingContext ( ) ; DbRefResolver org.springframework.data.mongodb.repository.query.DbRefResolver = new DefaultDbRefResolver ( mock ( MongoDbFactory .class ) ) ; org.springframework.data.mongodb.repository.query.MongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.repository.query.DbRefResolver , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . is ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.repository.query.Person = new Person ( ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( new PartTree ( STRING , Person .class ) , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , org.springframework.data.mongodb.repository.query.Person ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . is ( STRING ) . and ( STRING ) . is ( org.springframework.data.mongodb.repository.query.Person ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( new Query ( Criteria . where ( STRING ) . ne ( null ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( new Query ( Criteria . where ( STRING ) . is ( null ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; Distance org.springframework.data.mongodb.repository.query.Distance = new Distance ( NUMBER , Metrics . KILOMETERS ) ; Query org.springframework.data.mongodb.repository.query.Query = query ( where ( STRING ) . nearSphere ( org.springframework.data.mongodb.repository.query.Point ) . maxDistance ( org.springframework.data.mongodb.repository.query.Distance . getNormalizedValue ( ) ) . and ( STRING ) . is ( STRING ) ) ; void ( org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Distance , org.springframework.data.mongodb.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; Distance org.springframework.data.mongodb.repository.query.Distance = new Distance ( NUMBER ) ; Query org.springframework.data.mongodb.repository.query.Query = query ( where ( STRING ) . near ( org.springframework.data.mongodb.repository.query.Point ) . maxDistance ( org.springframework.data.mongodb.repository.query.Distance . getNormalizedValue ( ) ) . and ( STRING ) . is ( STRING ) ) ; void ( org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Distance , org.springframework.data.mongodb.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , NUMBER ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = query ( where ( STRING ) . lte ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) , is ( org.springframework.data.mongodb.repository.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , NUMBER ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = query ( where ( STRING ) . gte ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) , is ( org.springframework.data.mongodb.repository.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , true ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = query ( where ( STRING ) . exists ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) , is ( org.springframework.data.mongodb.repository.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = query ( where ( STRING ) . regex ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) , is ( org.springframework.data.mongodb.repository.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = query ( where ( STRING ) . is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) , is ( org.springframework.data.mongodb.repository.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = query ( where ( STRING ) . is ( false ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) , is ( org.springframework.data.mongodb.repository.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , NUMBER ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( new Criteria ( ) . orOperator ( where ( STRING ) . is ( STRING ) , where ( STRING ) . is ( NUMBER ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User = new org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User ( ) ; org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User . org.springframework.data.mongodb.repository.query.ObjectId = new ObjectId ( ) ; PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Document org.springframework.data.mongodb.repository.query.Document = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) . getQueryObject ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Document . get ( STRING ) , is ( ( java.lang.Object ) org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Point org.springframework.data.mongodb.repository.query.Point , Distance org.springframework.data.mongodb.repository.query.Distance , Query org.springframework.data.mongodb.repository.query.Query ) throws java.lang.Exception { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org . springframework . data . mongodb . repository . org.springframework.data.mongodb.repository.Person .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.PersonRepository .class . java.lang.reflect.Method ( STRING , Point .class , Distance .class , java.lang.String .class ) ; MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod = new MongoQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.PersonRepository .class ) , new SpelAwareProxyProjectionFactory ( ) , new MongoMappingContext ( ) ) ; MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , new java.lang.Object [] { org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Distance , STRING } ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , new ConvertingParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( org.springframework.data.mongodb.repository.query.Query ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query . toString ( ) , is ( query ( where ( STRING ) . not ( ) . regex ( STRING , STRING ) ) . toString ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.repository.query.ExpectedException . expectMessage ( STRING ) ; PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , NUMBER ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , NUMBER ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) . and ( STRING ) . is ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , NUMBER ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.PartTree . isDelete ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . is ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Person .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING , NUMBER ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.PartTree . isDelete ( ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) . and ( STRING ) . is ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . in ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . not ( ) . in ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query . getQueryObject ( ) . toJson ( ) , is ( query ( where ( STRING ) . not ( ) . regex ( STRING ) ) . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; Distance org.springframework.data.mongodb.repository.query.Distance = new Distance ( NUMBER ) ; PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , Venue .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Distance ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . near ( org.springframework.data.mongodb.repository.query.Point ) . maxDistance ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; Shape org.springframework.data.mongodb.repository.query.Shape = new Polygon ( org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Point ) ; PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , org.springframework.data.mongodb.repository.query.Shape ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . within ( org.springframework.data.mongodb.repository.query.Shape ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , org.springframework.data.mongodb.repository.query.Point ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . nearSphere ( org.springframework.data.mongodb.repository.query.Point ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; Distance org.springframework.data.mongodb.repository.query.Distance = new Distance ( NUMBER ) ; PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Distance ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . nearSphere ( org.springframework.data.mongodb.repository.query.Point ) . maxDistance ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.repository.query.Point = new Point ( NUMBER , NUMBER ) ; Range < Distance > org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> = Distance . between ( new Distance ( NUMBER ) , new Distance ( NUMBER ) ) ; PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , org.springframework.data.mongodb.repository.query.Point , org.springframework.data.mongodb.repository.query.Range<org.springframework.data.mongodb.repository.query.Distance> ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . near ( org.springframework.data.mongodb.repository.query.Point ) . minDistance ( NUMBER ) . maxDistance ( NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; assertThat ( new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . regex ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , new java.lang.Object [] { null } ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query , is ( query ( where ( STRING ) . in ( ( java.lang.Object ) null ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query . getQueryObject ( ) . toJson ( ) , is ( query ( where ( STRING ) . not ( ) . regex ( STRING ) ) . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query . getQueryObject ( ) . toJson ( ) , is ( query ( where ( STRING ) . not ( ) . regex ( STRING ) ) . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query . getQueryObject ( ) . toJson ( ) , is ( query ( where ( STRING ) . not ( ) . regex ( STRING ) ) . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , STRING ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query . getQueryObject ( ) . toJson ( ) , is ( query ( where ( STRING ) . not ( ) . regex ( STRING ) ) . getQueryObject ( ) . toJson ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , new GeoJsonPoint ( - NUMBER , NUMBER ) ) ; Query org.springframework.data.mongodb.repository.query.Query = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; assertThat ( org.springframework.data.mongodb.repository.query.Query . getQueryObject ( ) . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.repository.query.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.mongodb.repository.query.ExpectedException . expectMessage ( STRING + Point .class ) ; PartTree org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( STRING , org.springframework.data.mongodb.repository.query.MongoQueryCreatorUnitTests.User .class ) ; ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor = getAccessor ( org.springframework.data.mongodb.repository.query.MongoConverter , new GeoJsonLineString ( new Point ( - NUMBER , NUMBER ) , new Point ( - NUMBER , NUMBER ) ) ) ; new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> ) . createQuery ( ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.repository.query.Person> < Person > java.util.List<org.springframework.data.mongodb.repository.query.Person> ( Point org.springframework.data.mongodb.repository.query.Point , Distance org.springframework.data.mongodb.repository.query.Distance , java.lang.String java.lang.String );  <METHOD_END>
