<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , MqttPahoClientFactory org.springframework.integration.mqtt.inbound.MqttPahoClientFactory , java.lang.String ... java.lang.String[] ) { super( java.lang.String , java.lang.String , java.lang.String[] ); this . org.springframework.integration.mqtt.inbound.MqttPahoClientFactory = org.springframework.integration.mqtt.inbound.MqttPahoClientFactory ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , MqttPahoClientFactory org.springframework.integration.mqtt.inbound.MqttPahoClientFactory , java.lang.String ... java.lang.String[] ) { super( null , java.lang.String , java.lang.String[] ); this . org.springframework.integration.mqtt.inbound.MqttPahoClientFactory = org.springframework.integration.mqtt.inbound.MqttPahoClientFactory ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { this( java.lang.String , java.lang.String , new DefaultMqttPahoClientFactory ( ) , java.lang.String[] ); }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.mqtt.inbound.ApplicationEventPublisher ) { this . org.springframework.integration.mqtt.inbound.ApplicationEventPublisher = org.springframework.integration.mqtt.inbound.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . state ( getTaskScheduler ( ) != null , STRING ) ; super. doStart ( ) ; try { void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; this . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected synchronized void void ( ) { void ( ) ; super. doStop ( ) ; if ( this . org.springframework.integration.mqtt.inbound.IMqttClient != null ) { try { if ( this . org.springframework.integration.mqtt.inbound.ConsumerStopAction . equals ( ConsumerStopAction . UNSUBSCRIBE_ALWAYS ) || ( this . org.springframework.integration.mqtt.inbound.ConsumerStopAction . equals ( ConsumerStopAction . UNSUBSCRIBE_CLEAN ) && this . boolean ) ) { this . org.springframework.integration.mqtt.inbound.IMqttClient . unsubscribe ( getTopic ( ) ) ; } } catch ( MqttException org.springframework.integration.mqtt.inbound.MqttException ) { logger . error ( STRING , org.springframework.integration.mqtt.inbound.MqttException ) ; } try { this . org.springframework.integration.mqtt.inbound.IMqttClient . disconnectForcibly ( this . int ) ; } catch ( MqttException org.springframework.integration.mqtt.inbound.MqttException ) { logger . error ( STRING , org.springframework.integration.mqtt.inbound.MqttException ) ; } try { this . org.springframework.integration.mqtt.inbound.IMqttClient . close ( ) ; } catch ( MqttException org.springframework.integration.mqtt.inbound.MqttException ) { logger . error ( STRING , org.springframework.integration.mqtt.inbound.MqttException ) ; } this . boolean = false ; this . org.springframework.integration.mqtt.inbound.IMqttClient = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int ) { this . topicLock . lock ( ) ; try { super. addTopic ( java.lang.String , int ) ; if ( this . org.springframework.integration.mqtt.inbound.IMqttClient != null && this . org.springframework.integration.mqtt.inbound.IMqttClient . isConnected ( ) ) { this . org.springframework.integration.mqtt.inbound.IMqttClient . subscribe ( java.lang.String , int ) ; } } catch ( MqttException org.springframework.integration.mqtt.inbound.MqttException ) { super. removeTopic ( java.lang.String ) ; throw new MessagingException ( STRING + java.lang.String , org.springframework.integration.mqtt.inbound.MqttException ) ; } finally { this . topicLock . unlock ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) { this . topicLock . lock ( ) ; try { if ( this . org.springframework.integration.mqtt.inbound.IMqttClient != null && this . org.springframework.integration.mqtt.inbound.IMqttClient . isConnected ( ) ) { this . org.springframework.integration.mqtt.inbound.IMqttClient . unsubscribe ( java.lang.String[] ) ; } super. removeTopic ( java.lang.String[] ) ; } catch ( MqttException org.springframework.integration.mqtt.inbound.MqttException ) { throw new MessagingException ( STRING + java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) , org.springframework.integration.mqtt.inbound.MqttException ) ; } finally { this . topicLock . unlock ( ) ; } }  <METHOD_END>
<METHOD_START> private synchronized void void ( ) org.springframework.integration.mqtt.inbound.MqttException { MqttConnectOptions org.springframework.integration.mqtt.inbound.MqttConnectOptions = this . org.springframework.integration.mqtt.inbound.MqttPahoClientFactory . getConnectionOptions ( ) ; this . boolean = org.springframework.integration.mqtt.inbound.MqttConnectOptions . isCleanSession ( ) ; this . org.springframework.integration.mqtt.inbound.ConsumerStopAction = this . org.springframework.integration.mqtt.inbound.MqttPahoClientFactory . getConsumerStopAction ( ) ; if ( this . org.springframework.integration.mqtt.inbound.ConsumerStopAction == null ) { this . org.springframework.integration.mqtt.inbound.ConsumerStopAction = ConsumerStopAction . UNSUBSCRIBE_CLEAN ; } Assert . state ( getUrl ( ) != null || org.springframework.integration.mqtt.inbound.MqttConnectOptions . getServerURIs ( ) != null , STRING ) ; this . org.springframework.integration.mqtt.inbound.IMqttClient = this . org.springframework.integration.mqtt.inbound.MqttPahoClientFactory . getClientInstance ( getUrl ( ) , getClientId ( ) ) ; this . org.springframework.integration.mqtt.inbound.IMqttClient . setCallback ( this ) ; if ( this . org.springframework.integration.mqtt.inbound.IMqttClient instanceof MqttClient ) { ( ( MqttClient ) this . org.springframework.integration.mqtt.inbound.IMqttClient ) . setTimeToWait ( this . int ) ; } this . topicLock . lock ( ) ; java.lang.String [] java.lang.String[] = getTopic ( ) ; try { this . org.springframework.integration.mqtt.inbound.IMqttClient . connect ( org.springframework.integration.mqtt.inbound.MqttConnectOptions ) ; int [] int[] = getQos ( ) ; int [] int[] = java.util.Arrays . int[] ( int[] , int[] . int ) ; this . org.springframework.integration.mqtt.inbound.IMqttClient . subscribe ( java.lang.String[] , int[] ) ; for ( int int = NUMBER ; int < int[] . int ; int ++ ) { if ( int[] [ int ] != int[] [ int ] ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.util.Arrays . java.lang.String ( java.lang.String[] ) + STRING + java.util.Arrays . java.lang.String ( int[] ) + STRING + java.util.Arrays . java.lang.String ( int[] ) ) ; } break; } } } catch ( MqttException org.springframework.integration.mqtt.inbound.MqttException ) { if ( this . org.springframework.integration.mqtt.inbound.ApplicationEventPublisher != null ) { this . org.springframework.integration.mqtt.inbound.ApplicationEventPublisher . publishEvent ( new MqttConnectionFailedEvent ( this , org.springframework.integration.mqtt.inbound.MqttException ) ) ; } logger . error ( STRING + java.util.Arrays . java.lang.String ( java.lang.String[] ) , org.springframework.integration.mqtt.inbound.MqttException ) ; this . org.springframework.integration.mqtt.inbound.IMqttClient . disconnectForcibly ( this . int ) ; throw org.springframework.integration.mqtt.inbound.MqttException ; } finally { this . topicLock . unlock ( ) ; } if ( this . org.springframework.integration.mqtt.inbound.IMqttClient . isConnected ( ) ) { this . boolean = true ; java.lang.String java.lang.String = STRING + java.util.Arrays . java.lang.String ( java.lang.String[] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( java.lang.String ) ; } if ( this . org.springframework.integration.mqtt.inbound.ApplicationEventPublisher != null ) { this . org.springframework.integration.mqtt.inbound.ApplicationEventPublisher . publishEvent ( new MqttSubscribedEvent ( this , java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> private synchronized void void ( ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( false ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { this . java.util.concurrent.ScheduledFuture<?> = getTaskScheduler ( ) . schedule ( ( ) { try { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } synchronized ( MqttPahoMessageDrivenChannelAdapter .this ) { if ( ! MqttPahoMessageDrivenChannelAdapter .this . connected ) { connectAndSubscribe ( ) ; MqttPahoMessageDrivenChannelAdapter .this . reconnectFuture = null ; } } } catch ( MqttException e ) { logger . error ( STRING , e ) ; scheduleReconnect ( ) ; } } , new java.util.Date ( java.lang.System . long ( ) + this . int ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( java.lang.Throwable java.lang.Throwable ) { this . logger . error ( STRING + java.lang.Throwable . java.lang.String ( ) + STRING ) ; this . boolean = false ; void ( ) ; if ( this . org.springframework.integration.mqtt.inbound.ApplicationEventPublisher != null ) { this . org.springframework.integration.mqtt.inbound.ApplicationEventPublisher . publishEvent ( new MqttConnectionFailedEvent ( this , java.lang.Throwable ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , MqttMessage org.springframework.integration.mqtt.inbound.MqttMessage ) throws java.lang.Exception { Message < ? > org.springframework.integration.mqtt.inbound.Message<?> = this . getConverter ( ) . toMessage ( java.lang.String , org.springframework.integration.mqtt.inbound.MqttMessage ) ; try { sendMessage ( org.springframework.integration.mqtt.inbound.Message<> ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { logger . error ( STRING + org.springframework.integration.mqtt.inbound.Message<> . toString ( ) , java.lang.RuntimeException ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( IMqttDeliveryToken org.springframework.integration.mqtt.inbound.IMqttDeliveryToken ) {	}  <METHOD_END>
