<METHOD_START> @ Test public void void ( ) { GemfireTemplate org.springframework.data.gemfire.dao.GemfireTemplate = new GemfireTemplate ( org.springframework.data.gemfire.dao.Region<,> ) ; GemfireDaoSupport org.springframework.data.gemfire.dao.GemfireDaoSupport = new org.springframework.data.gemfire.dao.GemfireDaoSupportUnitTests.TestGemfireDaoSupport ( ) ; assertThat ( org.springframework.data.gemfire.dao.GemfireDaoSupport . getGemfireTemplate ( ) ) . isNull ( ) ; org.springframework.data.gemfire.dao.GemfireDaoSupport . setGemfireTemplate ( org.springframework.data.gemfire.dao.GemfireTemplate ) ; assertThat ( org.springframework.data.gemfire.dao.GemfireDaoSupport . getGemfireTemplate ( ) ) . isSameAs ( org.springframework.data.gemfire.dao.GemfireTemplate ) ; org.springframework.data.gemfire.dao.GemfireDaoSupport . setGemfireTemplate ( null ) ; assertThat ( org.springframework.data.gemfire.dao.GemfireDaoSupport . getGemfireTemplate ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireDaoSupport org.springframework.data.gemfire.dao.GemfireDaoSupport = new org.springframework.data.gemfire.dao.GemfireDaoSupportUnitTests.TestGemfireDaoSupport ( ) ; org.springframework.data.gemfire.dao.GemfireDaoSupport . setRegion ( org.springframework.data.gemfire.dao.Region<,> ) ; GemfireOperations org.springframework.data.gemfire.dao.GemfireOperations = org.springframework.data.gemfire.dao.GemfireDaoSupport . getGemfireTemplate ( ) ; assertThat ( org.springframework.data.gemfire.dao.GemfireOperations ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.dao.GemfireOperations ) . isInstanceOf ( GemfireTemplate .class ) ; assertThat ( ( ( GemfireTemplate ) org.springframework.data.gemfire.dao.GemfireOperations ) . getRegion ( ) ) . isSameAs ( org.springframework.data.gemfire.dao.Region<,> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { GemfireTemplate org.springframework.data.gemfire.dao.GemfireTemplate = new GemfireTemplate ( ) ; GemfireDaoSupport org.springframework.data.gemfire.dao.GemfireDaoSupport = new org.springframework.data.gemfire.dao.GemfireDaoSupportUnitTests.TestGemfireDaoSupport ( ) ; org.springframework.data.gemfire.dao.GemfireDaoSupport . setGemfireTemplate ( org.springframework.data.gemfire.dao.GemfireTemplate ) ; org.springframework.data.gemfire.dao.GemfireDaoSupport . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.dao.GemfireDaoSupport . getGemfireTemplate ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.dao.GemfireDaoSupport . getGemfireTemplate ( ) ) . isEqualTo ( org.springframework.data.gemfire.dao.GemfireTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.gemfire.dao.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.dao.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.dao.ExpectedException . expectMessage ( STRING ) ; new org.springframework.data.gemfire.dao.GemfireDaoSupportUnitTests.TestGemfireDaoSupport ( ) . afterPropertiesSet ( ) ; }  <METHOD_END>
