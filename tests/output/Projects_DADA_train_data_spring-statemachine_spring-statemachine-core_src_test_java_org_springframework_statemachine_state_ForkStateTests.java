<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.state.AnnotationConfigApplicationContext org.springframework.statemachine.state.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.ForkStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.ForkStateTests.TestListener org.springframework.statemachine.state.ForkStateTests.TestListener = new org.springframework.statemachine.state.ForkStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.ForkStateTests.TestListener ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ForkStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ForkStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.ForkStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S31 ) ) ; assertThat ( s20EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s21EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s30EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s31EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( ( java.lang.String ) s21EntryAction . stateContexts . get ( NUMBER ) . getMessageHeader ( STRING ) , is ( STRING ) ) ; assertThat ( ( java.lang.String ) s31EntryAction . stateContexts . get ( NUMBER ) . getMessageHeader ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.ForkStateTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.ForkStateTests.TestListener org.springframework.statemachine.state.ForkStateTests.TestListener = new org.springframework.statemachine.state.ForkStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.ForkStateTests.TestListener ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ForkStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ForkStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.ForkStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; assertThat ( s20EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s21EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s30EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s31EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( ( java.lang.String ) s20EntryAction . stateContexts . get ( NUMBER ) . getMessageHeader ( STRING ) , nullValue ( ) ) ; assertThat ( ( java.lang.String ) s30EntryAction . stateContexts . get ( NUMBER ) . getMessageHeader ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.ForkStateTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.ForkStateTests.TestListener org.springframework.statemachine.state.ForkStateTests.TestListener = new org.springframework.statemachine.state.ForkStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.ForkStateTests.TestListener ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; TestEntryAction org.springframework.statemachine.state.TestEntryAction = context . getBean ( STRING , TestEntryAction .class ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ForkStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.state.ForkStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.ForkStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S31 ) ) ; assertThat ( s20EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s21EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s30EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( s31EntryAction . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( ( java.lang.String ) s20EntryAction . stateContexts . get ( NUMBER ) . getMessageHeader ( STRING ) , nullValue ( ) ) ; assertThat ( ( java.lang.String ) s31EntryAction . stateContexts . get ( NUMBER ) . getMessageHeader ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . fork ( TestStates . S1 ) . state ( TestStates . SI ) . state ( TestStates . S2 ) . end ( TestStates . SF ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . state ( TestStates . S21 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . state ( TestStates . S30 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . state ( TestStates . S31 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) . and ( ) . withFork ( ) . source ( TestStates . S1 ) . target ( TestStates . S21 ) . target ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . fork ( TestStates . S1 ) . state ( TestStates . SI ) . state ( TestStates . S2 ) . end ( TestStates . SF ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . state ( TestStates . S21 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . state ( TestStates . S30 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . state ( TestStates . S31 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) . and ( ) . withFork ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . fork ( TestStates . S1 ) . state ( TestStates . SI ) . state ( TestStates . S2 ) . end ( TestStates . SF ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . state ( TestStates . S21 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . state ( TestStates . S30 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) . state ( TestStates . S31 , org.springframework.statemachine.state.TestEntryAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) . and ( ) . withFork ( ) . source ( TestStates . S1 ) . target ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TestEntryAction org.springframework.statemachine.state.TestEntryAction ( ) { return new TestEntryAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
