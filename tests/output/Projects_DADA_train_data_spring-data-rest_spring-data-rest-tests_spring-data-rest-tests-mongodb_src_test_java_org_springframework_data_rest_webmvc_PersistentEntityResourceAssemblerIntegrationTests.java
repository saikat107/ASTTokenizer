<METHOD_START> @ Test public void void ( ) java.lang.Exception { Projector org.springframework.data.rest.webmvc.Projector = mock ( Projector .class ) ; when ( org.springframework.data.rest.webmvc.Projector . projectExcerpt ( any ( ) ) ) . thenAnswer ( new ReturnsArgumentAt ( NUMBER ) ) ; PersistentEntityResourceAssembler org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler = new PersistentEntityResourceAssembler ( org.springframework.data.rest.webmvc.PersistentEntities , org.springframework.data.rest.webmvc.Projector , org.springframework.data.rest.webmvc.Associations , new DefaultSelfLinkProvider ( org.springframework.data.rest.webmvc.PersistentEntities , org.springframework.data.rest.webmvc.EntityLinks , java.util.Collections .< EntityLookup < ? > > java.util.List<org.springframework.data.rest.webmvc.EntityLookup<?>> ( ) ) ) ; User org.springframework.data.rest.webmvc.User = new User ( ) ; user . id = java.math.BigInteger . java.math.BigInteger ( NUMBER ) ; PersistentEntityResource org.springframework.data.rest.webmvc.PersistentEntityResource = org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler . toResource ( org.springframework.data.rest.webmvc.User ) ; Links org.springframework.data.rest.webmvc.Links = new Links ( org.springframework.data.rest.webmvc.PersistentEntityResource . getLinks ( ) ) ; assertThat ( org.springframework.data.rest.webmvc.Links ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.Links . getLink ( STRING ) . getVariables ( ) ) . isEmpty ( ) ; assertThat ( org.springframework.data.rest.webmvc.Links . getLink ( STRING ) . getVariableNames ( ) ) . contains ( STRING ) ; }  <METHOD_END>
