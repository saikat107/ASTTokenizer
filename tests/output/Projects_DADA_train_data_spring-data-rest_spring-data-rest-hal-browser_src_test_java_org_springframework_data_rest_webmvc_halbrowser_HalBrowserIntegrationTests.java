<METHOD_START> public void ( ApplicationContext org.springframework.data.rest.webmvc.halbrowser.ApplicationContext , ObjectFactory < ConversionService > org.springframework.data.rest.webmvc.halbrowser.ObjectFactory<org.springframework.data.rest.webmvc.halbrowser.ConversionService> ) { super( org.springframework.data.rest.webmvc.halbrowser.ApplicationContext , org.springframework.data.rest.webmvc.halbrowser.ObjectFactory<org.springframework.data.rest.webmvc.halbrowser.ConversionService> ); }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.rest.webmvc.halbrowser.RepositoryRestConfigurerAdapter org.springframework.data.rest.webmvc.halbrowser.RepositoryRestConfigurerAdapter ( ) { return new RepositoryRestConfigurerAdapter ( ) { @ java.lang.Override public void void ( RepositoryRestConfiguration org.springframework.data.rest.webmvc.halbrowser.RepositoryRestConfiguration ) { org.springframework.data.rest.webmvc.halbrowser.RepositoryRestConfiguration . setBasePath ( java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RepositoryRestConfiguration org.springframework.data.rest.webmvc.halbrowser.RepositoryRestConfiguration ) { org.springframework.data.rest.webmvc.halbrowser.RepositoryRestConfiguration . setBasePath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.webmvc.halbrowser.MockMvc = MockMvcBuilders . webAppContextSetup ( org.springframework.data.rest.webmvc.halbrowser.WebApplicationContext ) . defaultRequest ( get ( java.lang.String ) . accept ( MediaType . TEXT_HTML ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.halbrowser.MockMvc . perform ( get ( java.lang.String ) . accept ( MediaType . ALL ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . CONTENT_TYPE , startsWith ( MediaTypes . HAL_JSON . toString ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.halbrowser.MockMvc . perform ( get ( java.lang.String ) . accept ( MediaType . TEXT_HTML ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . LOCATION , endsWith ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.halbrowser.MockMvc . perform ( get ( java.lang.String . java.lang.String ( STRING ) ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . LOCATION , endsWith ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.halbrowser.MockMvc . perform ( get ( java.lang.String . java.lang.String ( STRING ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.halbrowser.MockMvc . perform ( get ( java.lang.String ) . accept ( MediaType . APPLICATION_JSON , MediaType . ALL ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( header ( ) . string ( HttpHeaders . CONTENT_TYPE , startsWith ( MediaType . APPLICATION_JSON_VALUE ) ) ) ; }  <METHOD_END>
