<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setPort ( NUMBER ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties ) ; java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> < ServerAddress > java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> = java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ( org.springframework.boot.autoconfigure.mongo.MongoClient ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ) . hasSize ( NUMBER ) ; void ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> . get ( NUMBER ) , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setHost ( STRING ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties ) ; java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> < ServerAddress > java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> = java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ( org.springframework.boot.autoconfigure.mongo.MongoClient ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ) . hasSize ( NUMBER ) ; void ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> . get ( NUMBER ) , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setUsername ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setPassword ( STRING . char[] ( ) ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties ) ; void ( org.springframework.boot.autoconfigure.mongo.MongoClient . getCredentialsList ( ) . get ( NUMBER ) , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setDatabase ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setUsername ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setPassword ( STRING . char[] ( ) ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties ) ; void ( org.springframework.boot.autoconfigure.mongo.MongoClient . getCredentialsList ( ) . get ( NUMBER ) , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setAuthenticationDatabase ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setUsername ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setPassword ( STRING . char[] ( ) ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties ) ; void ( org.springframework.boot.autoconfigure.mongo.MongoClient . getCredentialsList ( ) . get ( NUMBER ) , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setUri ( STRING + STRING ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties ) ; java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> < ServerAddress > java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> = java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ( org.springframework.boot.autoconfigure.mongo.MongoClient ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ) . hasSize ( NUMBER ) ; void ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> . get ( NUMBER ) , STRING , NUMBER ) ; void ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> . get ( NUMBER ) , STRING , NUMBER ) ; java.util.List<org.springframework.boot.autoconfigure.mongo.MongoCredential> < MongoCredential > java.util.List<org.springframework.boot.autoconfigure.mongo.MongoCredential> = org.springframework.boot.autoconfigure.mongo.MongoClient . getCredentialsList ( ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.mongo.MongoCredential> ) . hasSize ( NUMBER ) ; void ( java.util.List<org.springframework.boot.autoconfigure.mongo.MongoCredential> . get ( NUMBER ) , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setUri ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setUsername ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setPassword ( STRING . char[] ( ) ) ; this . org.springframework.boot.autoconfigure.mongo.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.autoconfigure.mongo.ExpectedException . expectMessage ( STRING + STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setUri ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setHost ( STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setPort ( NUMBER ) ; this . org.springframework.boot.autoconfigure.mongo.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.autoconfigure.mongo.ExpectedException . expectMessage ( STRING + STRING ) ; org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties = new MongoProperties ( ) ; org.springframework.boot.autoconfigure.mongo.MongoProperties . setUri ( STRING ) ; this . org.springframework.boot.autoconfigure.mongo.MockEnvironment . setProperty ( STRING , STRING ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties , this . org.springframework.boot.autoconfigure.mongo.MockEnvironment ) ; java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> < ServerAddress > java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> = java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ( org.springframework.boot.autoconfigure.mongo.MongoClient ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ) . hasSize ( NUMBER ) ; void ( java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> . get ( NUMBER ) , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mongo.MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient ( MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties ) { return org.springframework.boot.autoconfigure.mongo.MongoClient ( org.springframework.boot.autoconfigure.mongo.MongoProperties , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mongo.MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient ( MongoProperties org.springframework.boot.autoconfigure.mongo.MongoProperties , Environment org.springframework.boot.autoconfigure.mongo.Environment ) { return new MongoClientFactory ( org.springframework.boot.autoconfigure.mongo.MongoProperties , org.springframework.boot.autoconfigure.mongo.Environment ) . createMongoClient ( null ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> < ServerAddress > java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ( MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient ) { Cluster org.springframework.boot.autoconfigure.mongo.Cluster = ( Cluster ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.mongo.MongoClient , STRING ) ; ClusterSettings org.springframework.boot.autoconfigure.mongo.ClusterSettings = ( ClusterSettings ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.mongo.Cluster , STRING ) ; java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> < ServerAddress > java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> = org.springframework.boot.autoconfigure.mongo.ClusterSettings . getHosts ( ) ; return java.util.List<org.springframework.boot.autoconfigure.mongo.ServerAddress> ; }  <METHOD_END>
<METHOD_START> private void void ( ServerAddress org.springframework.boot.autoconfigure.mongo.ServerAddress , java.lang.String java.lang.String , int int ) { assertThat ( org.springframework.boot.autoconfigure.mongo.ServerAddress . getHost ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.mongo.ServerAddress . getPort ( ) ) . isEqualTo ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( MongoCredential org.springframework.boot.autoconfigure.mongo.MongoCredential , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertThat ( org.springframework.boot.autoconfigure.mongo.MongoCredential . getUserName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.mongo.MongoCredential . getPassword ( ) ) . isEqualTo ( java.lang.String . char[] ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.mongo.MongoCredential . getSource ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
