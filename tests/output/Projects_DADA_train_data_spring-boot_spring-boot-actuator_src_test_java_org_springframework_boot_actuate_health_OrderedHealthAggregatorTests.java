<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.health.OrderedHealthAggregator = new OrderedHealthAggregator ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> < java.lang.String , Health > java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> = new java.util.HashMap<java.lang.String,org.springframework.boot.actuate.health.Health> <> ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . DOWN ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . UP ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . UNKNOWN ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . OUT_OF_SERVICE ) . build ( ) ) ; assertThat ( this . org.springframework.boot.actuate.health.OrderedHealthAggregator . aggregate ( java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> ) . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.health.OrderedHealthAggregator . setStatusOrder ( Status . UNKNOWN , Status . UP , Status . OUT_OF_SERVICE , Status . DOWN ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> < java.lang.String , Health > java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> = new java.util.HashMap<java.lang.String,org.springframework.boot.actuate.health.Health> <> ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . DOWN ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . UP ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . UNKNOWN ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . OUT_OF_SERVICE ) . build ( ) ) ; assertThat ( this . org.springframework.boot.actuate.health.OrderedHealthAggregator . aggregate ( java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> ) . getStatus ( ) ) . isEqualTo ( Status . UNKNOWN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> < java.lang.String , Health > java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> = new java.util.HashMap<java.lang.String,org.springframework.boot.actuate.health.Health> <> ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . DOWN ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . UP ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . UNKNOWN ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . OUT_OF_SERVICE ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( new Status ( STRING ) ) . build ( ) ) ; assertThat ( this . org.springframework.boot.actuate.health.OrderedHealthAggregator . aggregate ( java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> ) . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.health.OrderedHealthAggregator . setStatusOrder ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> < java.lang.String , Health > java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> = new java.util.HashMap<java.lang.String,org.springframework.boot.actuate.health.Health> <> ( ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . DOWN ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . UP ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . UNKNOWN ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( Status . OUT_OF_SERVICE ) . build ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> . put ( STRING , new Health . Health ( ) . status ( new Status ( STRING ) ) . build ( ) ) ; assertThat ( this . org.springframework.boot.actuate.health.OrderedHealthAggregator . aggregate ( java.util.Map<java.lang.String,org.springframework.boot.actuate.health.Health> ) . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; }  <METHOD_END>
