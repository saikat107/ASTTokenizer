<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( org.springframework.integration.config.Message<> , org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.config.WireTap , STRING ) , instanceOf ( ExpressionEvaluatingSelector .class ) ) ; Message < ? > org.springframework.integration.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( org.springframework.integration.config.Message<> , org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.Message<> ) ; assertEquals ( org.springframework.integration.config.Message<> , org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ) ; Message < ? > org.springframework.integration.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.config.MessageChannel . send ( org.springframework.integration.config.Message<> ) ; Message < ? > org.springframework.integration.config.Message<?> = org.springframework.integration.config.PollableChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.config.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; int int = NUMBER ; for ( WireTap org.springframework.integration.config.WireTap : java.util.List<org.springframework.integration.config.WireTap> ) { long long = ( ( java.lang.Long ) new DirectFieldAccessor ( org.springframework.integration.config.WireTap ) . getPropertyValue ( STRING ) ) . long ( ) ; if ( long == NUMBER ) { int ++ ; } else if ( long == NUMBER ) { int ++ ; } else { int ++ ; } } assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
