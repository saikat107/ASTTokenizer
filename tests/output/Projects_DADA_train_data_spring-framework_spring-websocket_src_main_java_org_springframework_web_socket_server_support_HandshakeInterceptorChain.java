<METHOD_START> public void ( java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> , WebSocketHandler org.springframework.web.socket.server.support.WebSocketHandler ) { this . java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> = ( java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> != null ? java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> : java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; this . org.springframework.web.socket.server.support.WebSocketHandler = org.springframework.web.socket.server.support.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.support.ServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws java.lang.Exception { for ( int int = NUMBER ; int < this . java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> . size ( ) ; int ++ ) { HandshakeInterceptor org.springframework.web.socket.server.support.HandshakeInterceptor = this . java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> . get ( int ) ; if ( ! org.springframework.web.socket.server.support.HandshakeInterceptor . beforeHandshake ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse , this . org.springframework.web.socket.server.support.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ) { if ( org.springframework.web.socket.server.support.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.server.support.Log . debug ( org.springframework.web.socket.server.support.HandshakeInterceptor + STRING ) ; } void ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse , null ) ; return false ; } this . int = int ; } return true ; }  <METHOD_END>
<METHOD_START> public void void ( ServerHttpRequest org.springframework.web.socket.server.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.support.ServerHttpResponse , java.lang.Exception java.lang.Exception ) { for ( int int = this . int ; int >= NUMBER ; int -- ) { HandshakeInterceptor org.springframework.web.socket.server.support.HandshakeInterceptor = this . java.util.List<org.springframework.web.socket.server.support.HandshakeInterceptor> . get ( int ) ; try { org.springframework.web.socket.server.support.HandshakeInterceptor . afterHandshake ( org.springframework.web.socket.server.support.ServerHttpRequest , org.springframework.web.socket.server.support.ServerHttpResponse , this . org.springframework.web.socket.server.support.WebSocketHandler , java.lang.Exception ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.server.support.Log . isWarnEnabled ( ) ) { org.springframework.web.socket.server.support.Log . warn ( org.springframework.web.socket.server.support.HandshakeInterceptor + STRING + java.lang.Throwable ) ; } } } }  <METHOD_END>
