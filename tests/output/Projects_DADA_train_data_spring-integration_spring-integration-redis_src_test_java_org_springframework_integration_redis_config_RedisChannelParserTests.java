<METHOD_START> @ Test @ RedisAvailable public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.redis.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.redis.config.RedisChannelParserTests> ( ) ) ; SubscribableChannel org.springframework.integration.redis.config.SubscribableChannel = org.springframework.integration.redis.config.ClassPathXmlApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; RedisConnectionFactory org.springframework.integration.redis.config.RedisConnectionFactory = TestUtils . getPropertyValue ( org.springframework.integration.redis.config.SubscribableChannel , STRING , RedisConnectionFactory .class ) ; RedisSerializer < ? > org.springframework.integration.redis.config.RedisSerializer<?> = TestUtils . getPropertyValue ( org.springframework.integration.redis.config.SubscribableChannel , STRING , RedisSerializer .class ) ; assertEquals ( org.springframework.integration.redis.config.RedisConnectionFactory , org.springframework.integration.redis.config.ClassPathXmlApplicationContext . getBean ( STRING ) ) ; assertEquals ( org.springframework.integration.redis.config.RedisSerializer<> , org.springframework.integration.redis.config.ClassPathXmlApplicationContext . getBean ( STRING ) ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.redis.config.SubscribableChannel , STRING ) ) ; assertEquals ( java.lang.Integer . int , TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.redis.config.SubscribableChannel , STRING ) , STRING , java.lang.Integer .class ) . intValue ( ) ) ; org.springframework.integration.redis.config.SubscribableChannel = org.springframework.integration.redis.config.ClassPathXmlApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.redis.config.SubscribableChannel , STRING , java.lang.Integer .class ) . intValue ( ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.config.ClassPathXmlApplicationContext . getBean ( IntegrationUtils . INTEGRATION_MESSAGE_BUILDER_FACTORY_BEAN_NAME ) ; assertSame ( java.lang.Object , TestUtils . getPropertyValue ( org.springframework.integration.redis.config.SubscribableChannel , STRING ) ) ; org.springframework.integration.redis.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.redis.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.redis.config.RedisChannelParserTests> ( ) ) ; SubscribableChannel org.springframework.integration.redis.config.SubscribableChannel = org.springframework.integration.redis.config.ClassPathXmlApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; this . awaitContainerSubscribed ( TestUtils . getPropertyValue ( org.springframework.integration.redis.config.SubscribableChannel , STRING , RedisMessageListenerContainer .class ) ) ; final Message < ? > org.springframework.integration.redis.config.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.redis.config.SubscribableChannel . subscribe ( message -> { assertEquals ( m . getPayload ( ) , message . getPayload ( ) ) ; latch . countDown ( ) ; } ) ; org.springframework.integration.redis.config.SubscribableChannel . send ( org.springframework.integration.redis.config.Message<> ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.redis.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
