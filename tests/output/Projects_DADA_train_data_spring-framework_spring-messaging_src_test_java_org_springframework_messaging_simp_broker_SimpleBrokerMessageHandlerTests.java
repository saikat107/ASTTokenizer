<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler = new SimpleBrokerMessageHandler ( this . org.springframework.messaging.simp.broker.SubscribableChannel , this . org.springframework.messaging.simp.broker.MessageChannel , this . org.springframework.messaging.simp.broker.SubscribableChannel , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING ) ) ; verify ( this . org.springframework.messaging.simp.broker.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . capture ( ) ) ; assertTrue ( boolean ( STRING , STRING , STRING ) ) ; assertTrue ( boolean ( STRING , STRING , STRING ) ) ; assertTrue ( boolean ( STRING , STRING , STRING ) ) ; assertTrue ( boolean ( STRING , STRING , STRING ) ) ; assertTrue ( boolean ( STRING , STRING , STRING ) ) ; assertTrue ( boolean ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , STRING , STRING ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . DISCONNECT ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setUser ( new TestPrincipal ( STRING ) ) ; Message < byte [] > org.springframework.messaging.simp.broker.Message<byte[]> = MessageBuilder . createMessage ( new byte [ NUMBER ] , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<byte[]> ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ( STRING , STRING ) ) ; verify ( this . org.springframework.messaging.simp.broker.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . capture ( ) ) ; Message < ? > org.springframework.messaging.simp.broker.Message<?> = this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . getAllValues ( ) . get ( NUMBER ) ; assertEquals ( SimpMessageType . DISCONNECT_ACK , SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ) ) ; assertSame ( org.springframework.messaging.simp.broker.Message<byte[]> , org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) . get ( SimpMessageHeaderAccessor . DISCONNECT_MESSAGE_HEADER ) ) ; assertEquals ( java.lang.String , SimpMessageHeaderAccessor . getSessionId ( org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ) ) ; assertEquals ( STRING , SimpMessageHeaderAccessor . getUser ( org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ) . getName ( ) ) ; assertTrue ( boolean ( java.lang.String , STRING , STRING ) ) ; assertTrue ( boolean ( java.lang.String , STRING , STRING ) ) ; assertTrue ( boolean ( java.lang.String , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.messaging.simp.broker.Message<java.lang.String> = org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , new TestPrincipal ( STRING ) , null ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setTaskScheduler ( this . org.springframework.messaging.simp.broker.TaskScheduler ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ) ; verify ( this . org.springframework.messaging.simp.broker.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . capture ( ) ) ; Message < ? > org.springframework.messaging.simp.broker.Message<?> = this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . getValue ( ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.broker.Message<> ) ; assertEquals ( org.springframework.messaging.simp.broker.Message<java.lang.String> , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getHeader ( SimpMessageHeaderAccessor . CONNECT_MESSAGE_HEADER ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getSessionId ( ) ) ; assertEquals ( STRING , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getUser ( ) . getName ( ) ) ; assertArrayEquals ( new long [] { NUMBER , NUMBER } , SimpMessageHeaderAccessor . getHeartbeat ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . getHeartbeatValue ( ) ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setTaskScheduler ( this . org.springframework.messaging.simp.broker.TaskScheduler ) ; assertNotNull ( this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . getHeartbeatValue ( ) ) ; assertArrayEquals ( new long [] { NUMBER , NUMBER } , this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . getHeartbeatValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setHeartbeatValue ( new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledFuture = mock ( java.util.concurrent.ScheduledFuture .class ) ; when ( this . org.springframework.messaging.simp.broker.TaskScheduler . scheduleWithFixedDelay ( any ( java.lang.Runnable .class ) , eq ( NUMBER ) ) ) . thenReturn ( java.util.concurrent.ScheduledFuture ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setTaskScheduler ( this . org.springframework.messaging.simp.broker.TaskScheduler ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setHeartbeatValue ( new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; verify ( this . org.springframework.messaging.simp.broker.TaskScheduler ) . scheduleWithFixedDelay ( any ( java.lang.Runnable .class ) , eq ( NUMBER ) ) ; verifyNoMoreInteractions ( this . org.springframework.messaging.simp.broker.TaskScheduler , java.util.concurrent.ScheduledFuture ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . stop ( ) ; verify ( java.util.concurrent.ScheduledFuture ) . cancel ( true ) ; verifyNoMoreInteractions ( java.util.concurrent.ScheduledFuture ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setTaskScheduler ( this . org.springframework.messaging.simp.broker.TaskScheduler ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setHeartbeatValue ( new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; verify ( this . org.springframework.messaging.simp.broker.TaskScheduler ) . scheduleWithFixedDelay ( any ( java.lang.Runnable .class ) , eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setHeartbeatValue ( new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setTaskScheduler ( this . org.springframework.messaging.simp.broker.TaskScheduler ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; ArgumentCaptor < java.lang.Runnable > org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( this . org.springframework.messaging.simp.broker.TaskScheduler ) . scheduleWithFixedDelay ( org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> . capture ( ) , eq ( NUMBER ) ) ; java.lang.Runnable java.lang.Runnable = org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> . getValue ( ) ; assertNotNull ( java.lang.Runnable ) ; java.lang.String java.lang.String = STRING ; TestPrincipal org.springframework.messaging.simp.broker.TestPrincipal = new TestPrincipal ( STRING ) ; Message < java.lang.String > org.springframework.messaging.simp.broker.Message<java.lang.String> = org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , org.springframework.messaging.simp.broker.TestPrincipal , new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Runnable . void ( ) ; verify ( this . org.springframework.messaging.simp.broker.MessageChannel , atLeast ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . capture ( ) ) ; java.util.List<org.springframework.messaging.simp.broker.Message<?>> < Message < ? > > java.util.List<org.springframework.messaging.simp.broker.Message<?>> = this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . getAllValues ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.broker.Message<?>> . size ( ) ) ; MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = java.util.List<org.springframework.messaging.simp.broker.Message<?>> . get ( NUMBER ) . getHeaders ( ) ; assertEquals ( SimpMessageType . CONNECT_ACK , org.springframework.messaging.simp.broker.MessageHeaders . get ( SimpMessageHeaderAccessor . MESSAGE_TYPE_HEADER ) ) ; org.springframework.messaging.simp.broker.MessageHeaders = java.util.List<org.springframework.messaging.simp.broker.Message<?>> . get ( NUMBER ) . getHeaders ( ) ; assertEquals ( SimpMessageType . DISCONNECT_ACK , org.springframework.messaging.simp.broker.MessageHeaders . get ( SimpMessageHeaderAccessor . MESSAGE_TYPE_HEADER ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.broker.MessageHeaders . get ( SimpMessageHeaderAccessor . SESSION_ID_HEADER ) ) ; assertEquals ( org.springframework.messaging.simp.broker.TestPrincipal , org.springframework.messaging.simp.broker.MessageHeaders . get ( SimpMessageHeaderAccessor . USER_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setHeartbeatValue ( new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setTaskScheduler ( this . org.springframework.messaging.simp.broker.TaskScheduler ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; ArgumentCaptor < java.lang.Runnable > org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( this . org.springframework.messaging.simp.broker.TaskScheduler ) . scheduleWithFixedDelay ( org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> . capture ( ) , eq ( NUMBER ) ) ; java.lang.Runnable java.lang.Runnable = org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> . getValue ( ) ; assertNotNull ( java.lang.Runnable ) ; java.lang.String java.lang.String = STRING ; TestPrincipal org.springframework.messaging.simp.broker.TestPrincipal = new TestPrincipal ( STRING ) ; Message < java.lang.String > org.springframework.messaging.simp.broker.Message<java.lang.String> = org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , org.springframework.messaging.simp.broker.TestPrincipal , new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Runnable . void ( ) ; verify ( this . org.springframework.messaging.simp.broker.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . capture ( ) ) ; java.util.List<org.springframework.messaging.simp.broker.Message<?>> < Message < ? > > java.util.List<org.springframework.messaging.simp.broker.Message<?>> = this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . getAllValues ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.broker.Message<?>> . size ( ) ) ; MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = java.util.List<org.springframework.messaging.simp.broker.Message<?>> . get ( NUMBER ) . getHeaders ( ) ; assertEquals ( SimpMessageType . CONNECT_ACK , org.springframework.messaging.simp.broker.MessageHeaders . get ( SimpMessageHeaderAccessor . MESSAGE_TYPE_HEADER ) ) ; org.springframework.messaging.simp.broker.MessageHeaders = java.util.List<org.springframework.messaging.simp.broker.Message<?>> . get ( NUMBER ) . getHeaders ( ) ; assertEquals ( SimpMessageType . HEARTBEAT , org.springframework.messaging.simp.broker.MessageHeaders . get ( SimpMessageHeaderAccessor . MESSAGE_TYPE_HEADER ) ) ; assertEquals ( java.lang.String , org.springframework.messaging.simp.broker.MessageHeaders . get ( SimpMessageHeaderAccessor . SESSION_ID_HEADER ) ) ; assertEquals ( org.springframework.messaging.simp.broker.TestPrincipal , org.springframework.messaging.simp.broker.MessageHeaders . get ( SimpMessageHeaderAccessor . USER_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setHeartbeatValue ( new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . setTaskScheduler ( this . org.springframework.messaging.simp.broker.TaskScheduler ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . start ( ) ; ArgumentCaptor < java.lang.Runnable > org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> = ArgumentCaptor . forClass ( java.lang.Runnable .class ) ; verify ( this . org.springframework.messaging.simp.broker.TaskScheduler ) . scheduleWithFixedDelay ( org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> . capture ( ) , eq ( NUMBER ) ) ; java.lang.Runnable java.lang.Runnable = org.springframework.messaging.simp.broker.ArgumentCaptor<java.lang.Runnable> . getValue ( ) ; assertNotNull ( java.lang.Runnable ) ; java.lang.String java.lang.String = STRING ; TestPrincipal org.springframework.messaging.simp.broker.TestPrincipal = new TestPrincipal ( STRING ) ; Message < java.lang.String > org.springframework.messaging.simp.broker.Message<java.lang.String> = org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String , org.springframework.messaging.simp.broker.TestPrincipal , new long [] { NUMBER , NUMBER } ) ; this . org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler . handleMessage ( org.springframework.messaging.simp.broker.Message<java.lang.String> ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.Runnable . void ( ) ; verify ( this . org.springframework.messaging.simp.broker.MessageChannel , times ( NUMBER ) ) . send ( this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . capture ( ) ) ; java.util.List<org.springframework.messaging.simp.broker.Message<?>> < Message < ? > > java.util.List<org.springframework.messaging.simp.broker.Message<?>> = this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . getAllValues ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.messaging.simp.broker.Message<?>> . size ( ) ) ; assertEquals ( SimpMessageType . CONNECT_ACK , java.util.List<org.springframework.messaging.simp.broker.Message<?>> . get ( NUMBER ) . getHeaders ( ) . get ( SimpMessageHeaderAccessor . MESSAGE_TYPE_HEADER ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.broker.Message<java.lang.String> < java.lang.String > org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . SUBSCRIBE ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSubscriptionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; return MessageBuilder . createMessage ( STRING , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.broker.Message<java.lang.String> < java.lang.String > org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String java.lang.String , java.security.Principal java.security.Principal , long [] long[] ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . CONNECT ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setUser ( java.security.Principal ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . HEART_BEAT_HEADER , long[] ) ; return MessageBuilder . createMessage ( STRING , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.broker.Message<java.lang.String> < java.lang.String > org.springframework.messaging.simp.broker.Message<java.lang.String> ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( SimpMessageType . MESSAGE ) ; org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; return MessageBuilder . createMessage ( java.lang.String , org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { for ( Message < ? > org.springframework.messaging.simp.broker.Message<?> : this . org.springframework.messaging.simp.broker.ArgumentCaptor<org.springframework.messaging.simp.broker.Message<?>> . getAllValues ( ) ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.messaging.simp.broker.Message<> ) ; if ( java.lang.String . boolean ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getSessionId ( ) ) ) { if ( java.lang.String . boolean ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getSubscriptionId ( ) ) ) { if ( java.lang.String . boolean ( org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getDestination ( ) ) ) { return true ; } } } } return false ; }  <METHOD_END>
