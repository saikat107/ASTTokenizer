<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { LocaleContextHolder . resetLocaleContext ( ) ; if ( this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . getBean ( GroovyMarkupViewResolver .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new java.io.File ( STRING ) . boolean ( ) ; void ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext , STRING ) ; void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . getBeanNamesForType ( ViewResolver .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( STRING , java.util.Locale . java.util.Locale ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . getBean ( GroovyMarkupViewResolver .class ) . getCacheLimit ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; GroovyMarkupConfig org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfig = this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . getBean ( GroovyMarkupConfig .class ) ; MarkupTemplateEngine org.springframework.boot.autoconfigure.groovy.template.MarkupTemplateEngine = org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupConfig . getTemplateEngine ( ) ; java.io.Writer java.io.Writer = new java.io.StringWriter ( ) ; org.springframework.boot.autoconfigure.groovy.template.MarkupTemplateEngine . createTemplate ( new ClassPathResource ( STRING ) . getFile ( ) ) . make ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ) . writeTo ( java.io.Writer ) ; assertThat ( java.io.Writer . java.lang.String ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . getBean ( GroovyMarkupConfigurer .class ) . isAutoIndent ( ) ) . isEqualTo ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . register ( GroovyTemplateAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( java.lang.String java.lang.String ) throws java.lang.Exception { return org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( java.lang.String , java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ( java.lang.String java.lang.String , java.util.Locale java.util.Locale )			throws java.lang.Exception { LocaleContextHolder . setLocale ( java.util.Locale ) ; GroovyMarkupViewResolver org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupViewResolver = this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext . getBean ( GroovyMarkupViewResolver .class ) ; View org.springframework.boot.autoconfigure.groovy.template.View = org.springframework.boot.autoconfigure.groovy.template.GroovyMarkupViewResolver . resolveViewName ( java.lang.String , java.util.Locale ) ; assertThat ( org.springframework.boot.autoconfigure.groovy.template.View ) . isNotNull ( ) ; HttpServletRequest org.springframework.boot.autoconfigure.groovy.template.HttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.boot.autoconfigure.groovy.template.HttpServletRequest . setAttribute ( RequestContext . WEB_APPLICATION_CONTEXT_ATTRIBUTE , this . org.springframework.boot.autoconfigure.groovy.template.AnnotationConfigWebApplicationContext ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.boot.autoconfigure.groovy.template.View . render ( null , org.springframework.boot.autoconfigure.groovy.template.HttpServletRequest , org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ) ; return org.springframework.boot.autoconfigure.groovy.template.MockHttpServletResponse ; }  <METHOD_END>
