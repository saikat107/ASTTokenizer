<METHOD_START> @ Before public void void ( ) { org.springframework.data.solr.core.convert.SimpleSolrMappingContext = new SimpleSolrMappingContext ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter = new MappingSolrConverter ( org.springframework.data.solr.core.convert.SimpleSolrMappingContext ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String = STRING ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.Integer = NUMBER ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING } ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.Date = new java.util.Date ( NUMBER ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.Integer , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) , IsEqual . equalTo ( ( java.util.Collection ) org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.List<java.lang.String> ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) , IsEqual . equalTo ( ( java.util.Collection ) java.util.Arrays . java.util.List<java.lang.String> ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String[] ) ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.Date , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes . org.springframework.data.solr.core.convert.Point = new Point ( NUMBER , NUMBER ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes . java.util.List<org.springframework.data.solr.core.convert.Point> = java.util.Arrays . java.util.List ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields . java.lang.String = STRING ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields . java.lang.String , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . boolean = true ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . float = NUMBER ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . int = NUMBER ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . boolean , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . float , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . int , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String = null ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.Integer = null ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.List<java.lang.String> = null ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithoutAnnotatedFields org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithoutAnnotatedFields = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithoutAnnotatedFields ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithoutAnnotatedFields . java.lang.String = STRING ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithoutAnnotatedFields , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing . java.lang.String = STRING ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = new java.util.HashMap<java.lang.String,java.lang.String[]> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING , new java.lang.String [] { STRING } ) ; java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING , new java.lang.String [] { STRING , STRING } ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String[]> = java.util.Map<java.lang.String,java.lang.String[]> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String = STRING ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String = STRING ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String[] = new java.lang.String [] { STRING } ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String[] = new java.lang.String [] { STRING } ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String[] = new java.lang.String [] { STRING } ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField . java.lang.String[] = new java.lang.String [] { STRING , STRING } ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.SolrInputDocument . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter . java.lang.String = STRING ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter . java.lang.String = STRING ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter . java.lang.String , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter . java.lang.String , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . add ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . add ( STRING , NUMBER ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.PartialUpdate , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.PartialUpdate . getIdField ( ) . getValue ( ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( org.springframework.data.solr.core.convert.PartialUpdate . getIdField ( ) . getName ( ) ) ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) instanceof java.util.Map ) ; Assert . assertEquals ( NUMBER , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.solr.core.convert.MappingSolrConverter . write ( ( java.lang.Iterable<?> < ? > ) null ) ; Assert . assertNotNull ( java.util.Collection<> ) ; Assert . assertThat ( java.util.Collection<> , IsEmptyCollection . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.solr.core.convert.MappingSolrConverter . write ( new java.util.ArrayList <> ( ) ) ; Assert . assertNotNull ( java.util.Collection<> ) ; Assert . assertThat ( java.util.Collection<> , IsEmptyCollection . empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String = STRING ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.Integer = NUMBER ; java.util.Collection<org.springframework.data.solr.core.convert.SolrInputDocument> < SolrInputDocument > java.util.Collection<org.springframework.data.solr.core.convert.SolrInputDocument> = org.springframework.data.solr.core.convert.MappingSolrConverter . write ( java.util.Arrays . java.util.List<org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes> ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes ) ) ; Assert . assertNotNull ( java.util.Collection<org.springframework.data.solr.core.convert.SolrInputDocument> ) ; Assert . assertThat ( java.util.Collection<org.springframework.data.solr.core.convert.SolrInputDocument> , IsCollectionWithSize . hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanBase . java.lang.String = STRING ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance . java.lang.Integer = NUMBER ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanBase . java.lang.String , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance . java.lang.Integer , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , NUMBER ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , new java.lang.String [] { STRING , STRING , STRING } ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , new java.util.Date ( NUMBER ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.Integer ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.List<java.lang.String> , IsEqual . equalTo ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) ) ) ; Assert . assertArrayEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValues ( STRING ) . toArray ( ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String[] ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . setField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertArrayEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValues ( STRING ) . toArray ( ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes . org.springframework.data.solr.core.convert.Point . getX ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes . org.springframework.data.solr.core.convert.Point . getY ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes . java.util.List<org.springframework.data.solr.core.convert.Point> . get ( NUMBER ) . getX ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes . java.util.List<org.springframework.data.solr.core.convert.Point> . get ( NUMBER ) . getY ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes . java.util.List<org.springframework.data.solr.core.convert.Point> . get ( NUMBER ) . getX ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCustomTypes . java.util.List<org.springframework.data.solr.core.convert.Point> . get ( NUMBER ) . getY ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithNamedFields . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , NUMBER ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , true ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , NUMBER ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . int ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . boolean ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithSimpleTypes . float ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , null ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , null ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , null ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , null ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , null ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.Integer ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.List<java.lang.String> ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String[] ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , null ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.Integer ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldsExcludedFromIndexing . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , null ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , null ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.String ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDefaultTypes . java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , new java.lang.String [] { STRING , STRING , STRING } ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField . java.lang.String[] . int ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithCatchAllField . java.lang.String[] , IsArrayContainingInAnyOrder . arrayContainingInAnyOrder ( STRING , STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String> , Matchers . allOf ( Matchers . hasEntry ( STRING , STRING ) , Matchers . hasEntry ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String> , Matchers . allOf ( Matchers . hasEntry ( STRING , STRING ) , Matchers . hasEntry ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String[]> , Matchers . allOf ( Matchers . hasEntry ( STRING , new java.lang.String [] { STRING } ) , Matchers . hasEntry ( STRING , new java.lang.String [] { STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> , Matchers . allOf ( Matchers . hasEntry ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) , Matchers . hasEntry ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String[]> , Matchers . allOf ( Matchers . hasEntry ( STRING , new java.lang.String [] { STRING } ) , Matchers . hasEntry ( STRING , new java.lang.String [] { STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> , Matchers . allOf ( Matchers . hasEntry ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) , Matchers . hasEntry ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = new java.util.HashMap<java.lang.String,java.lang.String[]> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING , new java.lang.String [] { STRING } ) ; java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING , new java.lang.String [] { STRING , STRING } ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String[]> = java.util.Map<java.lang.String,java.lang.String[]> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = new java.util.HashMap<java.lang.String,java.lang.String[]> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING , new java.lang.String [] { STRING } ) ; java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING , new java.lang.String [] { STRING , STRING } ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String[]> = java.util.Map<java.lang.String,java.lang.String[]> ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertNotNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValues ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String> , Matchers . allOf ( Matchers . hasEntry ( STRING , STRING ) , Matchers . hasEntry ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String> , Matchers . allOf ( Matchers . hasEntry ( STRING , STRING ) , Matchers . hasEntry ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String[]> , Matchers . allOf ( Matchers . hasEntry ( STRING , new java.lang.String [] { STRING } ) , Matchers . hasEntry ( STRING , new java.lang.String [] { STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> , Matchers . allOf ( Matchers . hasEntry ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) , Matchers . hasEntry ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String[]> , Matchers . allOf ( Matchers . hasEntry ( STRING , new java.lang.String [] { STRING } ) , Matchers . hasEntry ( STRING , new java.lang.String [] { STRING , STRING } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDynamicMapsWildcards . java.util.Map<java.lang.String,java.util.List<java.lang.String>> , Matchers . allOf ( Matchers . hasEntry ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) , Matchers . hasEntry ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter . java.lang.String ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithFieldAnnotationOnSetter . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , NUMBER ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanBase . java.lang.String ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) , org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithInteritance . java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps . java.util.Map<java.lang.String,java.lang.String> , IsInstanceOf . instanceOf ( java.util.HashMap .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps . java.util.HashMap<java.lang.String,java.lang.String> , IsInstanceOf . instanceOf ( java.util.HashMap .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithDifferentMaps . java.util.LinkedHashMap<java.lang.String,java.lang.String> , IsInstanceOf . instanceOf ( java.util.LinkedHashMap .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.lang.String , IsEqual . equalTo ( STRING ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.util.Map<java.lang.String,java.lang.String> , IsNull . nullValue ( java.util.Map .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.util.Map<java.lang.String,java.lang.String> , IsNull . nullValue ( java.util.Map .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.lang.String , IsNull . nullValue ( java.lang.String .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.util.Map<java.lang.String,java.lang.String> , IsMapContaining . hasEntry ( STRING , STRING ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.util.Map<java.lang.String,java.lang.String> , IsMapContaining . hasEntry ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.lang.String , IsNull . nullValue ( java.lang.String .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.util.Map<java.lang.String,java.lang.String> , IsNull . nullValue ( java.util.Map .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.util.Map<java.lang.String,java.lang.String> , IsMapContaining . hasEntry ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.lang.String , IsNull . nullValue ( java.lang.String .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.util.Map<java.lang.String,java.lang.String> , IsNull . nullValue ( java.util.Map .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.util.Map<java.lang.String,java.lang.String> , IsNull . nullValue ( java.util.Map .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithOverlappingWildcards . java.lang.String , IsEqual . equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , new java.util.Date ( NUMBER ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcardsOnTypesThatRequireConversion org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcardsOnTypesThatRequireConversion = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcardsOnTypesThatRequireConversion .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcardsOnTypesThatRequireConversion . java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.convert.DateTime>> . get ( STRING ) , IsInstanceOf . instanceOf ( java.util.List .class ) ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithWildcardsOnTypesThatRequireConversion . java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.convert.DateTime>> . get ( STRING ) . get ( NUMBER ) , IsInstanceOf . instanceOf ( DateTime .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { SolrDocument org.springframework.data.solr.core.convert.SolrDocument = new SolrDocument ( ) ; org.springframework.data.solr.core.convert.SolrDocument . addField ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithArrayConstructor org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithArrayConstructor = org.springframework.data.solr.core.convert.MappingSolrConverter . read ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithArrayConstructor .class , org.springframework.data.solr.core.convert.SolrDocument ) ; Assert . assertThat ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithArrayConstructor . java.lang.String[] , IsEqual . equalTo ( ( ( java.util.List<java.lang.String> < java.lang.String > ) org.springframework.data.solr.core.convert.SolrDocument . getFieldValue ( STRING ) ) . java.lang.Object[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost . java.lang.String = STRING ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost . java.lang.String = STRING ; java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> < java.lang.String , SolrInputField > java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> = new java.util.HashMap<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> <> ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost , java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> . get ( STRING ) . getBoost ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> . get ( STRING ) . getBoost ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost = new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost . java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost . java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> < java.lang.String , SolrInputField > java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> = new java.util.HashMap<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> <> ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost , java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> . get ( STRING ) . getBoost ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> . get ( STRING ) . getBoost ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> . get ( STRING ) . getBoost ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.data.solr.core.convert.SolrInputField> . get ( STRING ) . getBoost ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = new SolrInputDocument ( ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanWithBoost ( ) , org.springframework.data.solr.core.convert.SolrInputDocument ) ; org.springframework.data.solr.core.convert.MappingSolrConverter . write ( new org.springframework.data.solr.core.convert.MappingSolrConverterTests.BeanBase ( ) , org.springframework.data.solr.core.convert.SolrInputDocument ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.SolrInputDocument . getDocumentBoost ( ) , NUMBER ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.convert.SolrInputDocument . getDocumentBoost ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Field public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Field ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer ) { super(); this . java.lang.String = java.lang.String ; this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
