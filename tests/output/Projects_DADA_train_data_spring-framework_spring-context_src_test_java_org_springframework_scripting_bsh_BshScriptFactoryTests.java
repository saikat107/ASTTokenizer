<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.bsh.ApplicationContext . getBeanNamesForType ( Calculator .class ) ) . contains ( STRING ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.bsh.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Calculator org.springframework.scripting.bsh.Calculator = ( Calculator ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , org.springframework.scripting.bsh.Calculator instanceof Refreshable ) ; assertFalse ( STRING , org.springframework.scripting.bsh.Messenger instanceof Refreshable ) ; assertEquals ( org.springframework.scripting.bsh.Calculator , org.springframework.scripting.bsh.Calculator ) ; assertEquals ( org.springframework.scripting.bsh.Messenger , org.springframework.scripting.bsh.Messenger ) ; assertTrue ( ! org.springframework.scripting.bsh.Messenger . equals ( org.springframework.scripting.bsh.Calculator ) ) ; assertTrue ( org.springframework.scripting.bsh.Messenger . hashCode ( ) != org.springframework.scripting.bsh.Calculator . hashCode ( ) ) ; assertTrue ( ! org.springframework.scripting.bsh.Messenger . toString ( ) . equals ( org.springframework.scripting.bsh.Calculator . toString ( ) ) ) ; assertEquals ( NUMBER , org.springframework.scripting.bsh.Calculator . add ( NUMBER , NUMBER ) ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.bsh.ApplicationContext . getBeansOfType ( Calculator .class ) . values ( ) . contains ( org.springframework.scripting.bsh.Calculator ) ) ; assertTrue ( org.springframework.scripting.bsh.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.bsh.Messenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.bsh.ApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; ConfigurableMessenger org.springframework.scripting.bsh.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; org.springframework.scripting.bsh.ConfigurableMessenger . setMessage ( null ) ; assertNull ( org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.bsh.ApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.bsh.ConfigurableMessenger ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.scripting.bsh.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; ConfigurableMessenger org.springframework.scripting.bsh.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.scripting.bsh.ConfigurableMessenger . setMessage ( null ) ; assertNull ( org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.bsh.ConfigurableMessenger ) ) ; org.springframework.scripting.bsh.ClassPathXmlApplicationContext . close ( ) ; assertNull ( org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.scripting.bsh.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.bsh.Messenger ) ) ; org.springframework.scripting.bsh.ClassPathXmlApplicationContext . close ( ) ; assertNull ( org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.scripting.bsh.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBeanNamesForType ( Messenger .class ) ) . contains ( STRING ) ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; assertTrue ( org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) . contains ( org.springframework.scripting.bsh.Messenger ) ) ; org.springframework.scripting.bsh.ClassPathXmlApplicationContext . close ( ) ; assertNull ( org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; ConfigurableMessenger org.springframework.scripting.bsh.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; ConfigurableMessenger org.springframework.scripting.bsh.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; assertFalse ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.bsh.ConfigurableMessenger ) ) ; assertFalse ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger instanceof Refreshable ) ; assertNotSame ( org.springframework.scripting.bsh.ConfigurableMessenger , org.springframework.scripting.bsh.ConfigurableMessenger ) ; assertSame ( org.springframework.scripting.bsh.ConfigurableMessenger . getClass ( ) , org.springframework.scripting.bsh.ConfigurableMessenger . getClass ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; org.springframework.scripting.bsh.ConfigurableMessenger . setMessage ( STRING ) ; org.springframework.scripting.bsh.ConfigurableMessenger . setMessage ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.bsh.Messenger ) ) ; assertTrue ( STRING , org.springframework.scripting.bsh.Messenger instanceof Refreshable ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; Refreshable org.springframework.scripting.bsh.Refreshable = ( Refreshable ) org.springframework.scripting.bsh.Messenger ; org.springframework.scripting.bsh.Refreshable . refresh ( ) ; assertEquals ( STRING , java.lang.String , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scripting.bsh.Refreshable . getRefreshCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; ConfigurableMessenger org.springframework.scripting.bsh.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; ConfigurableMessenger org.springframework.scripting.bsh.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.scripting.bsh.ConfigurableMessenger ) ) ; assertTrue ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger instanceof Refreshable ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; org.springframework.scripting.bsh.ConfigurableMessenger . setMessage ( STRING ) ; org.springframework.scripting.bsh.ConfigurableMessenger . setMessage ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; Refreshable org.springframework.scripting.bsh.Refreshable = ( Refreshable ) org.springframework.scripting.bsh.ConfigurableMessenger ; org.springframework.scripting.bsh.Refreshable . refresh ( ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.scripting.bsh.Refreshable . getRefreshCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new ClassPathXmlApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( NestedRuntimeException org.springframework.scripting.bsh.NestedRuntimeException ) { assertTrue ( org.springframework.scripting.bsh.NestedRuntimeException . contains ( ScriptCompilationException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ScriptSource org.springframework.scripting.bsh.ScriptSource = mock ( ScriptSource .class ) ; final java.lang.String java.lang.String = STRING ; given ( org.springframework.scripting.bsh.ScriptSource . getScriptAsString ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.scripting.bsh.ScriptSource . isModified ( ) ) . willReturn ( true ) ; BshScriptFactory org.springframework.scripting.bsh.BshScriptFactory = new BshScriptFactory ( ScriptFactoryPostProcessor . INLINE_SCRIPT_PREFIX + java.lang.String , Messenger .class ) ; try { Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.BshScriptFactory . getScriptedObject ( org.springframework.scripting.bsh.ScriptSource , Messenger .class ) ; org.springframework.scripting.bsh.Messenger . getMessage ( ) ; fail ( STRING ) ; } catch ( BshScriptUtils . BshScriptUtils BshScriptUtils.BshExecutionException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new BshScriptFactory ( null , Messenger .class ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new BshScriptFactory ( STRING , new java.lang.Class<?> < ? > [] { Messenger .class } ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new BshScriptFactory ( STRING , new java.lang.Class<?> < ? > [] { Messenger .class } ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.scripting.bsh.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; TestBean org.springframework.scripting.bsh.TestBean = ( TestBean ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBeanNamesForType ( Messenger .class ) ) ; assertTrue ( java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Collection<java.lang.String> . boolean ( STRING ) ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; assertFalse ( org.springframework.scripting.bsh.Messenger instanceof Refreshable ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; TestBeanAwareMessenger org.springframework.scripting.bsh.TestBeanAwareMessenger = ( TestBeanAwareMessenger ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.scripting.bsh.TestBean , org.springframework.scripting.bsh.TestBeanAwareMessenger . getTestBean ( ) ) ; TestBeanAwareMessenger org.springframework.scripting.bsh.TestBeanAwareMessenger = ( TestBeanAwareMessenger ) org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.scripting.bsh.TestBean , org.springframework.scripting.bsh.TestBeanAwareMessenger . getTestBean ( ) ) ; java.util.Collection<org.springframework.scripting.bsh.Messenger> < Messenger > java.util.Collection<org.springframework.scripting.bsh.Messenger> = org.springframework.scripting.bsh.ClassPathXmlApplicationContext . getBeansOfType ( Messenger .class ) . values ( ) ; assertTrue ( java.util.Collection<org.springframework.scripting.bsh.Messenger> . contains ( org.springframework.scripting.bsh.Messenger ) ) ; assertTrue ( java.util.Collection<org.springframework.scripting.bsh.Messenger> . contains ( org.springframework.scripting.bsh.Messenger ) ) ; assertTrue ( java.util.Collection<org.springframework.scripting.bsh.Messenger> . contains ( org.springframework.scripting.bsh.Messenger ) ) ; assertTrue ( java.util.Collection<org.springframework.scripting.bsh.Messenger> . contains ( org.springframework.scripting.bsh.TestBeanAwareMessenger ) ) ; assertTrue ( java.util.Collection<org.springframework.scripting.bsh.Messenger> . contains ( org.springframework.scripting.bsh.TestBeanAwareMessenger ) ) ; org.springframework.scripting.bsh.ClassPathXmlApplicationContext . close ( ) ; assertNull ( org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; assertNull ( org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; assertNull ( org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; ConfigurableMessenger org.springframework.scripting.bsh.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; ConfigurableMessenger org.springframework.scripting.bsh.ConfigurableMessenger = ( ConfigurableMessenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; assertNotSame ( org.springframework.scripting.bsh.ConfigurableMessenger , org.springframework.scripting.bsh.ConfigurableMessenger ) ; assertSame ( org.springframework.scripting.bsh.ConfigurableMessenger . getClass ( ) , org.springframework.scripting.bsh.ConfigurableMessenger . getClass ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; org.springframework.scripting.bsh.ConfigurableMessenger . setMessage ( STRING ) ; org.springframework.scripting.bsh.ConfigurableMessenger . setMessage ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.ConfigurableMessenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; Calculator org.springframework.scripting.bsh.Calculator = ( Calculator ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.scripting.bsh.Calculator ) ; assertFalse ( org.springframework.scripting.bsh.Calculator instanceof Refreshable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; assertTrue ( STRING , org.springframework.scripting.bsh.Messenger instanceof Refreshable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.bsh.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.scripting.bsh.BshScriptFactoryTests> ( ) ) ; Messenger org.springframework.scripting.bsh.Messenger = ( Messenger ) org.springframework.scripting.bsh.ApplicationContext . getBean ( STRING ) ; org.springframework.scripting.bsh.ApplicationContext . publishEvent ( new org.springframework.scripting.bsh.BshScriptFactoryTests.MyEvent ( org.springframework.scripting.bsh.ApplicationContext ) ) ; assertEquals ( STRING , org.springframework.scripting.bsh.Messenger . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
