<METHOD_START> public void ( StateMachineEnsemble < S , E > org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> , StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> ) { Assert . notNull ( org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> , STRING ) ; Assert . notNull ( org.springframework.statemachine.ensemble.StateMachine<S,E> , STRING ) ; this . org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> = org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> ; this . org.springframework.statemachine.ensemble.StateMachine<S,E> = org.springframework.statemachine.ensemble.StateMachine<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { org.springframework.statemachine.ensemble.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithRegion ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.ensemble.StateMachineAccess<S,E> ) { org.springframework.statemachine.ensemble.StateMachineAccess<S,E> . addStateMachineInterceptor ( org.springframework.statemachine.ensemble.DistributedStateMachine<S,E>.LocalStateMachineInterceptor ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.ensemble.StateMachineAccess<S,E> ) { org.springframework.statemachine.ensemble.StateMachineAccess<S,E> . addStateMachineInterceptor ( org.springframework.statemachine.ensemble.DistributedStateMachine<S,E>.LocalStateMachineInterceptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> . addEnsembleListener ( org.springframework.statemachine.ensemble.DistributedStateMachine<S,E>.LocalEnsembleListener ) ; org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> . join ( this ) ; super. doStart ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> . removeEnsembleListener ( org.springframework.statemachine.ensemble.DistributedStateMachine<S,E>.LocalEnsembleListener ) ; org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> . leave ( this ) ; super. doStop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < E > org.springframework.statemachine.ensemble.Message<E> ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . sendEvent ( MessageBuilder . fromMessage ( org.springframework.statemachine.ensemble.Message<E> ) . setHeader ( StateMachineSystemConstants . STATEMACHINE_IDENTIFIER , org.springframework.statemachine.ensemble.StateMachine<S,E> . getUuid ( ) ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( E E ) { return boolean ( MessageBuilder . withPayload ( E ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.ensemble.State<S,E> < S , E > org.springframework.statemachine.ensemble.State<S,E> ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . getState ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.statemachine.ensemble.State<S,E>> < State < S , E > > java.util.Collection<org.springframework.statemachine.ensemble.State<S,E>> ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . getStates ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.statemachine.ensemble.Transition<S,E>> < Transition < S , E > > java.util.Collection<org.springframework.statemachine.ensemble.Transition<S,E>> ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . getTransitions ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . isComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.ensemble.StateMachine<S,E> . setStateMachineError ( java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . hasStateMachineError ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineListener < S , E > org.springframework.statemachine.ensemble.StateMachineListener<S,E> ) { org.springframework.statemachine.ensemble.StateMachine<S,E> . addStateListener ( org.springframework.statemachine.ensemble.StateMachineListener<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineListener < S , E > org.springframework.statemachine.ensemble.StateMachineListener<S,E> ) { org.springframework.statemachine.ensemble.StateMachine<S,E> . removeStateListener ( org.springframework.statemachine.ensemble.StateMachineListener<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.ensemble.State<S,E> < S , E > org.springframework.statemachine.ensemble.State<S,E> ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . getInitialState ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.ensemble.ExtendedState org.springframework.statemachine.ensemble.ExtendedState ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . getExtendedState ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.ensemble.StateMachineAccessor<S,E> < S , E > org.springframework.statemachine.ensemble.StateMachineAccessor<S,E> ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . getStateMachineAccessor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.UUID java.util.UUID ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . getUuid ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.statemachine.ensemble.StateMachine<S,E> . getId ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + org.springframework.statemachine.ensemble.StateMachine<S,E> + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.ensemble.Message<E> < E > org.springframework.statemachine.ensemble.Message<E> ( Message < E > org.springframework.statemachine.ensemble.Message<E> , StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> ) { return org.springframework.statemachine.ensemble.Message<E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.ensemble.State<S,E> , Message < E > org.springframework.statemachine.ensemble.Message<E> , Transition < S , E > org.springframework.statemachine.ensemble.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> ) { if ( org.springframework.statemachine.ensemble.Log . isTraceEnabled ( ) ) { org.springframework.statemachine.ensemble.Log . trace ( STRING + org.springframework.statemachine.ensemble.StateMachine<S,E> + STRING + org.springframework.statemachine.ensemble.StateMachine<S,E> ) ; } if ( org.springframework.statemachine.ensemble.Message<E> != null && ObjectUtils . nullSafeEquals ( org.springframework.statemachine.ensemble.StateMachine<S,E> . getUuid ( ) , org.springframework.statemachine.ensemble.Message<E> . getHeaders ( ) . get ( StateMachineSystemConstants . STATEMACHINE_IDENTIFIER ) ) ) { org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> . setState ( new DefaultStateMachineContext < S , E > ( org.springframework.statemachine.ensemble.Transition<S,E> . getTarget ( ) . getId ( ) , org.springframework.statemachine.ensemble.Message<E> . getPayload ( ) , org.springframework.statemachine.ensemble.Message<E> . getHeaders ( ) , org.springframework.statemachine.ensemble.StateMachine<S,E> . getExtendedState ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.ensemble.State<S,E> , Message < E > org.springframework.statemachine.ensemble.Message<E> , Transition < S , E > org.springframework.statemachine.ensemble.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.ensemble.StateContext<S,E> < S , E > org.springframework.statemachine.ensemble.StateContext<S,E> ( StateContext < S , E > org.springframework.statemachine.ensemble.StateContext<S,E> ) { return org.springframework.statemachine.ensemble.StateContext<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.ensemble.StateContext<S,E> < S , E > org.springframework.statemachine.ensemble.StateContext<S,E> ( StateContext < S , E > org.springframework.statemachine.ensemble.StateContext<S,E> ) { if ( org.springframework.statemachine.ensemble.StateContext<S,E> . getTransition ( ) != null && org.springframework.statemachine.ensemble.StateContext<S,E> . getTransition ( ) . getKind ( ) == TransitionKind . INTERNAL && ObjectUtils . nullSafeEquals ( org.springframework.statemachine.ensemble.StateMachine<S,E> . getUuid ( ) , org.springframework.statemachine.ensemble.StateContext<S,E> . getMessageHeader ( StateMachineSystemConstants . STATEMACHINE_IDENTIFIER ) ) ) { StateMachineContext < S , E > org.springframework.statemachine.ensemble.StateMachineContext<S,E> = org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> . getState ( ) ; if ( org.springframework.statemachine.ensemble.StateMachineContext<S,E> != null ) { org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> . setState ( new DefaultStateMachineContext < S , E > ( org.springframework.statemachine.ensemble.StateMachineContext<S,E> . getState ( ) , org.springframework.statemachine.ensemble.StateContext<S,E> . getEvent ( ) , org.springframework.statemachine.ensemble.StateContext<S,E> . getMessageHeaders ( ) , org.springframework.statemachine.ensemble.StateContext<S,E> . getStateMachine ( ) . getExtendedState ( ) ) ) ; } else if ( org.springframework.statemachine.ensemble.StateContext<S,E> . getStateMachine ( ) . getState ( ) != null ) { org.springframework.statemachine.ensemble.StateMachineEnsemble<S,E> . setState ( new DefaultStateMachineContext < S , E > ( org.springframework.statemachine.ensemble.StateContext<S,E> . getStateMachine ( ) . getState ( ) . getId ( ) , org.springframework.statemachine.ensemble.StateContext<S,E> . getEvent ( ) , org.springframework.statemachine.ensemble.StateContext<S,E> . getMessageHeaders ( ) , org.springframework.statemachine.ensemble.StateContext<S,E> . getStateMachine ( ) . getExtendedState ( ) ) ) ; } } return org.springframework.statemachine.ensemble.StateContext<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Exception java.lang.Exception ( StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> , java.lang.Exception java.lang.Exception ) { return java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> , final StateMachineContext < S , E > org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) { if ( org.springframework.statemachine.ensemble.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.ensemble.Log . debug ( STRING + org.springframework.statemachine.ensemble.StateMachine<S,E> + STRING + org.springframework.statemachine.ensemble.StateMachineContext<S,E> + STRING ) ; } if ( org.springframework.statemachine.ensemble.StateMachine<S,E> != null && org.springframework.statemachine.ensemble.StateMachine<S,E> == org.springframework.statemachine.ensemble.DistributedStateMachine .this ) { org.springframework.statemachine.ensemble.StateMachine<S,E> . stop ( ) ; void ( null ) ; if ( org.springframework.statemachine.ensemble.StateMachineContext<S,E> != null ) { if ( org.springframework.statemachine.ensemble.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.ensemble.Log . debug ( STRING + org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) ; } org.springframework.statemachine.ensemble.StateMachine<S,E> . getStateMachineAccessor ( ) . doWithAllRegions ( new StateMachineFunction < StateMachineAccess < S , E > > ( ) { @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.ensemble.StateMachineAccess<S,E> ) { org.springframework.statemachine.ensemble.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) ; } } ) ; } org.springframework.statemachine.ensemble.Log . info ( STRING + org.springframework.statemachine.ensemble.StateMachine<S,E> ) ; org.springframework.statemachine.ensemble.Log . info ( STRING + org.springframework.statemachine.ensemble.StateMachine<S,E> . getUuid ( ) ) ; org.springframework.statemachine.ensemble.StateMachine<S,E> . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineAccess < S , E > org.springframework.statemachine.ensemble.StateMachineAccess<S,E> ) { org.springframework.statemachine.ensemble.StateMachineAccess<S,E> . resetStateMachine ( org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> , StateMachineContext < S , E > org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) { if ( org.springframework.statemachine.ensemble.StateMachine<S,E> != null && org.springframework.statemachine.ensemble.StateMachine<S,E> == org.springframework.statemachine.ensemble.DistributedStateMachine .this ) { org.springframework.statemachine.ensemble.Log . info ( STRING + org.springframework.statemachine.ensemble.StateMachine<S,E> ) ; org.springframework.statemachine.ensemble.StateMachine<S,E> . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineContext < S , E > org.springframework.statemachine.ensemble.StateMachineContext<S,E> ) { if ( ! ObjectUtils . nullSafeEquals ( org.springframework.statemachine.ensemble.StateMachine<S,E> . getUuid ( ) , org.springframework.statemachine.ensemble.StateMachineContext<S,E> . getEventHeaders ( ) . get ( StateMachineSystemConstants . STATEMACHINE_IDENTIFIER ) ) ) { org.springframework.statemachine.ensemble.StateMachine<S,E> . sendEvent ( MessageBuilder . withPayload ( org.springframework.statemachine.ensemble.StateMachineContext<S,E> . getEvent ( ) ) . copyHeaders ( org.springframework.statemachine.ensemble.StateMachineContext<S,E> . getEventHeaders ( ) ) . build ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEnsembleException org.springframework.statemachine.ensemble.StateMachineEnsembleException ) { org.springframework.statemachine.ensemble.Log . error ( STRING , org.springframework.statemachine.ensemble.StateMachineEnsembleException ) ; void ( org.springframework.statemachine.ensemble.StateMachineEnsembleException ) ; throw org.springframework.statemachine.ensemble.StateMachineEnsembleException ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.ensemble.StateMachine<S,E> ) {		}  <METHOD_END>
