<METHOD_START> @ Before public void void ( ) { org.springframework.data.mapping.context.PersistentPropertyPath<T> = new DefaultPersistentPropertyPath <> ( java.util.Collections . java.util.List<T> ( T ) ) ; org.springframework.data.mapping.context.PersistentPropertyPath<T> = new DefaultPersistentPropertyPath <> ( java.util.Arrays . java.util.List<T> ( T , T ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultPersistentPropertyPath <> ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( T . getName ( ) ) . thenReturn ( STRING ) ; when ( T . getName ( ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . toDotPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mapping.context.Converter<T,java.lang.String> . convert ( any ( ) ) ) . thenReturn ( STRING ) ; assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . toDotPath ( org.springframework.data.mapping.context.Converter<T,java.lang.String> ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . getLeafProperty ( ) ) . isEqualTo ( T ) ; assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . getLeafProperty ( ) ) . isEqualTo ( T ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . getBaseProperty ( ) ) . isEqualTo ( T ) ; assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . getBaseProperty ( ) ) . isEqualTo ( T ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . isBasePathOf ( org.springframework.data.mapping.context.PersistentPropertyPath<T> ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . isBasePathOf ( org.springframework.data.mapping.context.PersistentPropertyPath<T> ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentPropertyPath < T > org.springframework.data.mapping.context.PersistentPropertyPath<T> = org.springframework.data.mapping.context.PersistentPropertyPath<T> . getExtensionForBaseOf ( org.springframework.data.mapping.context.PersistentPropertyPath<T> ) ; assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> ) . isEqualTo ( new DefaultPersistentPropertyPath <> ( java.util.Collections . java.util.List<T> ( T ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . getParentPath ( ) ) . isEqualTo ( org.springframework.data.mapping.context.PersistentPropertyPath<T> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . getParentPath ( ) ) . isEqualTo ( org.springframework.data.mapping.context.PersistentPropertyPath<T> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . getLength ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . getLength ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . toDotPath ( source -> null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.context.PersistentPropertyPath<T> . toDotPath ( source -> STRING ) ) . isNull ( ) ; }  <METHOD_END>
