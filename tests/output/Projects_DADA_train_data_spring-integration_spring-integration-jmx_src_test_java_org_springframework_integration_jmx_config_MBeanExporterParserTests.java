<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { IntegrationMBeanExporter org.springframework.integration.jmx.config.IntegrationMBeanExporter = this . org.springframework.integration.jmx.config.ApplicationContext . getBean ( IntegrationMBeanExporter .class ) ; javax.management.MBeanServer javax.management.MBeanServer = this . org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , javax.management.MBeanServer .class ) ; java.util.Properties java.util.Properties = TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.IntegrationMBeanExporter , STRING , java.util.Properties .class ) ; assertNotNull ( java.util.Properties ) ; assertEquals ( NUMBER , java.util.Properties . int ( ) ) ; assertTrue ( java.util.Properties . boolean ( STRING ) ) ; assertTrue ( java.util.Properties . boolean ( STRING ) ) ; assertEquals ( javax.management.MBeanServer , org.springframework.integration.jmx.config.IntegrationMBeanExporter . getServer ( ) ) ; assertSame ( org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.IntegrationMBeanExporter , STRING ) ) ; MessageChannelMetrics org.springframework.integration.jmx.config.MessageChannelMetrics = org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , MessageChannelMetrics .class ) ; assertTrue ( org.springframework.integration.jmx.config.MessageChannelMetrics . isCountsEnabled ( ) ) ; assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isStatsEnabled ( ) ) ; void ( org.springframework.integration.jmx.config.MessageChannelMetrics ) ; MessageHandlerMetrics org.springframework.integration.jmx.config.MessageHandlerMetrics = org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , MessageHandlerMetrics .class ) ; void ( org.springframework.integration.jmx.config.MessageHandlerMetrics ) ; org.springframework.integration.jmx.config.MessageChannelMetrics = org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , MessageChannelMetrics .class ) ; assertTrue ( org.springframework.integration.jmx.config.MessageChannelMetrics . isCountsEnabled ( ) ) ; assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isStatsEnabled ( ) ) ; org.springframework.integration.jmx.config.MessageChannelMetrics = org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , MessageChannelMetrics .class ) ; assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isCountsEnabled ( ) ) ; assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isStatsEnabled ( ) ) ; org.springframework.integration.jmx.config.MessageChannelMetrics = org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , MessageChannelMetrics .class ) ; assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isCountsEnabled ( ) ) ; assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isStatsEnabled ( ) ) ; org.springframework.integration.jmx.config.MessageChannelMetrics = org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , MessageChannelMetrics .class ) ; assertTrue ( org.springframework.integration.jmx.config.MessageChannelMetrics . isCountsEnabled ( ) ) ; assertTrue ( org.springframework.integration.jmx.config.MessageChannelMetrics . isStatsEnabled ( ) ) ; org.springframework.integration.jmx.config.MessageChannelMetrics = org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , MessageChannelMetrics .class ) ; assertTrue ( org.springframework.integration.jmx.config.MessageChannelMetrics . isCountsEnabled ( ) ) ; assertTrue ( org.springframework.integration.jmx.config.MessageChannelMetrics . isStatsEnabled ( ) ) ; org.springframework.integration.jmx.config.MessageChannelMetrics = org.springframework.integration.jmx.config.ApplicationContext . getBean ( STRING , MessageChannelMetrics .class ) ; assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isCountsEnabled ( ) ) ; assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isStatsEnabled ( ) ) ; void ( org.springframework.integration.jmx.config.MessageChannelMetrics ) ; MetricsFactory org.springframework.integration.jmx.config.MetricsFactory = org.springframework.integration.jmx.config.ApplicationContext . getBean ( MetricsFactory .class ) ; IntegrationManagementConfigurer org.springframework.integration.jmx.config.IntegrationManagementConfigurer = org.springframework.integration.jmx.config.ApplicationContext . getBean ( IntegrationManagementConfigurer .class ) ; assertSame ( org.springframework.integration.jmx.config.MetricsFactory , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.IntegrationManagementConfigurer , STRING ) ) ; org.springframework.integration.jmx.config.IntegrationMBeanExporter . destroy ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageChannelMetrics org.springframework.integration.jmx.config.MessageChannelMetrics ) { assertFalse ( org.springframework.integration.jmx.config.MessageChannelMetrics . isLoggingEnabled ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING , java.lang.Double .class ) , NUMBER ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING , java.lang.Double .class ) , NUMBER ) ; assertEquals ( NUMBER / NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING , java.lang.Double .class ) , NUMBER ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING ) ) ; assertEquals ( NUMBER / NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING , java.lang.Double .class ) , NUMBER ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING , java.lang.Double .class ) , NUMBER ) ; assertEquals ( NUMBER / NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageChannelMetrics , STRING , java.lang.Double .class ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageHandlerMetrics org.springframework.integration.jmx.config.MessageHandlerMetrics ) { assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageHandlerMetrics , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.jmx.config.MessageHandlerMetrics , STRING , java.lang.Double .class ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jmx.config.AbstractMessageChannelMetrics org.springframework.integration.jmx.config.AbstractMessageChannelMetrics ( java.lang.String java.lang.String ) { return new DefaultMessageChannelMetrics ( java.lang.String , new ExponentialMovingAverage ( NUMBER , NUMBER ) , new ExponentialMovingAverageRate ( NUMBER , NUMBER , NUMBER , true ) , new ExponentialMovingAverageRatio ( NUMBER , NUMBER , true ) , new ExponentialMovingAverageRate ( NUMBER , NUMBER , NUMBER , true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.jmx.config.AbstractMessageHandlerMetrics org.springframework.integration.jmx.config.AbstractMessageHandlerMetrics ( java.lang.String java.lang.String ) { return new DefaultMessageHandlerMetrics ( java.lang.String , new ExponentialMovingAverage ( NUMBER , NUMBER ) ) ; }  <METHOD_END>
