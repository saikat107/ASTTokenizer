<METHOD_START> @ java.lang.Override protected org.springframework.web.context.ConfigurableApplicationContext org.springframework.web.context.ConfigurableApplicationContext ( ) java.lang.Exception { org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean = false ; org.springframework.web.context.ConfigurableWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.web.context.ConfigurableWebApplicationContext . getEnvironment ( ) . addActiveProfile ( STRING ) ; MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; org.springframework.web.context.ConfigurableWebApplicationContext . setServletContext ( org.springframework.web.context.MockServletContext ) ; org.springframework.web.context.ConfigurableWebApplicationContext . setConfigLocations ( new java.lang.String [] { STRING } ) ; org.springframework.web.context.ConfigurableWebApplicationContext . addBeanFactoryPostProcessor ( new BeanFactoryPostProcessor ( ) { @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.web.context.ConfigurableListableBeanFactory ) { org.springframework.web.context.ConfigurableListableBeanFactory . addBeanPostProcessor ( new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.BeansException { if ( java.lang.Object instanceof TestBean ) { ( ( TestBean ) java.lang.Object ) . getFriends ( ) . add ( STRING ) ; } return java.lang.Object ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.BeansException { return java.lang.Object ; } } ) ; } } ) ; org.springframework.web.context.ConfigurableWebApplicationContext . refresh ( ) ; XmlWebApplicationContext org.springframework.web.context.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.web.context.XmlWebApplicationContext . getEnvironment ( ) . addActiveProfile ( STRING ) ; org.springframework.web.context.XmlWebApplicationContext . setParent ( org.springframework.web.context.ConfigurableWebApplicationContext ) ; org.springframework.web.context.XmlWebApplicationContext . setServletContext ( org.springframework.web.context.MockServletContext ) ; org.springframework.web.context.XmlWebApplicationContext . setNamespace ( STRING ) ; org.springframework.web.context.XmlWebApplicationContext . setConfigLocations ( new java.lang.String [] { STRING } ) ; org.springframework.web.context.XmlWebApplicationContext . refresh ( ) ; return org.springframework.web.context.XmlWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.web.context.ConfigurableListableBeanFactory ) { org.springframework.web.context.ConfigurableListableBeanFactory . addBeanPostProcessor ( new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.BeansException { if ( java.lang.Object instanceof TestBean ) { ( ( TestBean ) java.lang.Object ) . getFriends ( ) . add ( STRING ) ; } return java.lang.Object ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.BeansException { return java.lang.Object ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.BeansException { if ( java.lang.Object instanceof TestBean ) { ( ( TestBean ) java.lang.Object ) . getFriends ( ) . add ( STRING ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.web.context.ConfigurableWebApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) , is ( true ) ) ; assertThat ( this . org.springframework.web.context.ConfigurableWebApplicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) , is ( false ) ) ; assertThat ( this . applicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) , is ( true ) ) ; assertThat ( this . applicationContext . getEnvironment ( ) . acceptsProfiles ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TestListener org.springframework.web.context.TestListener , TestListener org.springframework.web.context.TestListener , MyEvent org.springframework.web.context.MyEvent ) { TestListener org.springframework.web.context.TestListener = ( TestListener ) this . applicationContext . getBean ( STRING ) ; TestListener org.springframework.web.context.TestListener = ( TestListener ) this . applicationContext . getParent ( ) . getBean ( STRING ) ; super. doTestEvents ( org.springframework.web.context.TestListener , org.springframework.web.context.TestListener , org.springframework.web.context.MyEvent ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Override public void void ( ) { assertTrue ( STRING + this . applicationContext . getBeanDefinitionCount ( ) , this . applicationContext . getBeanDefinitionCount ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.context.MockServletContext = new MockServletContext ( STRING ) ; XmlWebApplicationContext org.springframework.web.context.XmlWebApplicationContext = new XmlWebApplicationContext ( ) ; org.springframework.web.context.XmlWebApplicationContext . setParent ( org.springframework.web.context.ConfigurableWebApplicationContext ) ; org.springframework.web.context.XmlWebApplicationContext . setServletContext ( org.springframework.web.context.MockServletContext ) ; org.springframework.web.context.XmlWebApplicationContext . setNamespace ( STRING ) ; org.springframework.web.context.XmlWebApplicationContext . setConfigLocations ( new java.lang.String [] { STRING } ) ; org.springframework.web.context.XmlWebApplicationContext . refresh ( ) ; try { org.springframework.web.context.XmlWebApplicationContext . getMessage ( STRING , null , java.util.Locale . java.util.Locale ( ) ) ; fail ( STRING ) ; } catch ( NoSuchMessageException org.springframework.web.context.NoSuchMessageException ) { } java.lang.String java.lang.String = org.springframework.web.context.XmlWebApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ( ) ) ; assertTrue ( STRING , STRING . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.web.context.TestBean = ( TestBean ) this . applicationContext . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.web.context.TestBean != null ) ; assertTrue ( STRING , org.springframework.web.context.TestBean . getFriends ( ) . contains ( STRING ) ) ; TestBean org.springframework.web.context.TestBean = ( TestBean ) this . applicationContext . getBean ( STRING ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.context.TestBean . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.web.context.TestBean . getSpouse ( ) == org.springframework.web.context.TestBean ) ; assertTrue ( STRING , ! org.springframework.web.context.TestBean . getFriends ( ) . contains ( STRING ) ) ; org.springframework.web.context.TestBean = ( TestBean ) this . org.springframework.web.context.ConfigurableWebApplicationContext . getBean ( STRING ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.web.context.TestBean . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.web.context.TestBean . getFriends ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean ) ; org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB = ( org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB ) this . applicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean ) ; assertTrue ( org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean && org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean ) ; assertTrue ( ! org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean && ! org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean ) ; this . applicationContext . close ( ) ; assertTrue ( ! org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean && ! org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean ) ; ConfigurableApplicationContext org.springframework.web.context.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) this . applicationContext . getParent ( ) ; org.springframework.web.context.ConfigurableApplicationContext . close ( ) ; assertTrue ( org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean && org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean ) ; org.springframework.web.context.ConfigurableApplicationContext . close ( ) ; assertTrue ( org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean && org.springframework.web.context.XmlWebApplicationContextTests.InitAndIB . boolean ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) fail ( ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.web.context.ServletException { if ( ! this . boolean ) fail ( ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) fail ( ) ; if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( ! this . boolean ) fail ( ) ; if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
