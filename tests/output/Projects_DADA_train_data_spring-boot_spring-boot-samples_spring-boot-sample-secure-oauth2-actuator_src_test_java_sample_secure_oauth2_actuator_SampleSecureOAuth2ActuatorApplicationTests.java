<METHOD_START> @ Before public void void ( ) { this . sample.secure.oauth2.actuator.MockMvc = webAppContextSetup ( this . sample.secure.oauth2.actuator.WebApplicationContext ) . addFilters ( this . sample.secure.oauth2.actuator.FilterChainProxy ) . build ( ) ; SecurityContextHolder . clearContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.secure.oauth2.actuator.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) . andExpect ( header ( ) . string ( STRING , containsString ( STRING ) ) ) . andDo ( print ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.secure.oauth2.actuator.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andDo ( print ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.secure.oauth2.actuator.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) . andExpect ( header ( ) . string ( STRING , containsString ( STRING ) ) ) . andDo ( print ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.secure.oauth2.actuator.MockMvc . perform ( get ( STRING ) . header ( STRING , STRING + Base64Utils . encodeToString ( STRING . byte[] ( ) ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andDo ( print ( ) ) ; }  <METHOD_END>
