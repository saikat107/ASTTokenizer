<METHOD_START> public void ( java.lang.Object java.lang.Object ) { super( java.lang.Object ); }  <METHOD_END>
<METHOD_START> protected void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , org.springframework.beans.DirectFieldAccessor org.springframework.beans.DirectFieldAccessor ) { super( java.lang.Object , java.lang.String , org.springframework.beans.DirectFieldAccessor ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler ( java.lang.String java.lang.String ) { org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler = this . java.util.Map<java.lang.String,org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler> . org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler ( java.lang.String ) ; if ( org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler == null ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( getWrappedClass ( ) , java.lang.String ) ; if ( java.lang.reflect.Field != null ) { org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler = new org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler ( java.lang.reflect.Field ) ; } this . java.util.Map<java.lang.String,org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler> . org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler ( java.lang.String , org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler ) ; } return org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.beans.DirectFieldAccessor org.springframework.beans.DirectFieldAccessor ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return new org.springframework.beans.DirectFieldAccessor ( java.lang.Object , java.lang.String , this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.beans.NotWritablePropertyException org.springframework.beans.NotWritablePropertyException ( java.lang.String java.lang.String ) { PropertyMatches org.springframework.beans.PropertyMatches = PropertyMatches . forField ( java.lang.String , getRootClass ( ) ) ; throw new NotWritablePropertyException ( getRootClass ( ) , getNestedPath ( ) + java.lang.String , org.springframework.beans.PropertyMatches . buildErrorMessage ( ) , org.springframework.beans.PropertyMatches . getPossibleMatches ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Field java.lang.reflect.Field ) { super( java.lang.reflect.Field . java.lang.Class<?> ( ) , true , true ); this . java.lang.reflect.Field = java.lang.reflect.Field ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.TypeDescriptor org.springframework.beans.TypeDescriptor ( ) { return new TypeDescriptor ( this . java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.ResolvableType org.springframework.beans.ResolvableType ( ) { return ResolvableType . forField ( this . java.lang.reflect.Field ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.TypeDescriptor org.springframework.beans.TypeDescriptor ( int int ) { return TypeDescriptor . nested ( this . java.lang.reflect.Field , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { try { ReflectionUtils . makeAccessible ( this . java.lang.reflect.Field ) ; return this . java.lang.reflect.Field . java.lang.Object ( getWrappedInstance ( ) ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new InvalidPropertyException ( getWrappedClass ( ) , this . java.lang.reflect.Field . java.lang.String ( ) , STRING , java.lang.IllegalAccessException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws java.lang.Exception { try { ReflectionUtils . makeAccessible ( this . java.lang.reflect.Field ) ; this . java.lang.reflect.Field . void ( java.lang.Object , java.lang.Object ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new InvalidPropertyException ( getWrappedClass ( ) , this . java.lang.reflect.Field . java.lang.String ( ) , STRING , java.lang.IllegalAccessException ) ; } }  <METHOD_END>
