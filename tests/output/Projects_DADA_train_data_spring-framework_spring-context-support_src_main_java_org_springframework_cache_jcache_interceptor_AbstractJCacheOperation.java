<METHOD_START> protected void ( CacheMethodDetails < A > org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> , CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ) { Assert . notNull ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> , STRING ) ; Assert . notNull ( org.springframework.cache.jcache.interceptor.CacheResolver , STRING ) ; this . org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> = org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> ; this . org.springframework.cache.jcache.interceptor.CacheResolver = org.springframework.cache.jcache.interceptor.CacheResolver ; this . java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> = java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> public abstract org.springframework.cache.jcache.interceptor.ExceptionTypeFilter org.springframework.cache.jcache.interceptor.ExceptionTypeFilter ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> . getMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) { return this . org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> . getAnnotations ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public A A ( ) { return this . org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> . getCacheAnnotation ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> . getCacheName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( ) { return this . org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.jcache.interceptor.CacheInvocationParameter [] org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] ( java.lang.Object ... java.lang.Object[] ) { if ( this . java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> . int ( ) != java.lang.Object[] . int ) { throw new java.lang.IllegalStateException ( STRING + this . java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> . int ( ) + STRING + java.lang.Object[] . int + STRING ) ; } java.util.List<org.springframework.cache.jcache.interceptor.CacheInvocationParameter> < CacheInvocationParameter > java.util.List<org.springframework.cache.jcache.interceptor.CacheInvocationParameter> = new java.util.ArrayList<org.springframework.cache.jcache.interceptor.CacheInvocationParameter> <> ( ) ; for ( int int = NUMBER ; int < this . java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> . int ( ) ; int ++ ) { java.util.List<org.springframework.cache.jcache.interceptor.CacheInvocationParameter> . add ( this . java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> . org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail ( int ) . org.springframework.cache.jcache.interceptor.CacheInvocationParameter ( java.lang.Object[] [ int ] ) ) ; } return java.util.List<org.springframework.cache.jcache.interceptor.CacheInvocationParameter> . toArray ( new CacheInvocationParameter [ java.util.List<org.springframework.cache.jcache.interceptor.CacheInvocationParameter> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.ExceptionTypeFilter org.springframework.cache.jcache.interceptor.ExceptionTypeFilter ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > [] java.lang.Class<? extends java.lang.Throwable>[] , java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > [] java.lang.Class<? extends java.lang.Throwable>[] ) { return new ExceptionTypeFilter ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> ( java.lang.Class<? extends java.lang.Throwable>[] ) , java.util.List<java.lang.Class<? extends java.lang.Throwable>> ( java.lang.Class<? extends java.lang.Throwable>[] ) , true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.StringBuilder ( ) . java.lang.StringBuilder ( STRING ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.StringBuilder java.lang.StringBuilder ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Class<? extends org.springframework.cache.jcache.interceptor.AbstractJCacheOperation> ( ) . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . org.springframework.cache.jcache.interceptor.CacheMethodDetails<A> ) ; return java.lang.StringBuilder ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> < org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail > java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> ( java.lang.reflect.Method java.lang.reflect.Method ) { java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> < org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail > java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> = new java.util.ArrayList<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> <> ( ) ; for ( int int = NUMBER ; int < java.lang.reflect.Method . int ( ) ; int ++ ) { org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail = new org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail ( java.lang.reflect.Method , int ) ; java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> . boolean ( org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail ) ; } return java.util.List<org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , int int ) { this . java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ int ] ; this . java.util.Set<java.lang.annotation.Annotation> = new java.util.LinkedHashSet<java.lang.annotation.Annotation> <> ( ) ; boolean boolean = false ; boolean boolean = false ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.reflect.Method . java.lang.annotation.Annotation[][] ( ) [ int ] ) { this . java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ; if ( CacheKey .class . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ) { boolean = true ; } if ( CacheValue .class . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ) { boolean = true ; } } this . int = int ; this . boolean = boolean ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.jcache.interceptor.CacheInvocationParameter org.springframework.cache.jcache.interceptor.CacheInvocationParameter ( java.lang.Object java.lang.Object ) { return new org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheInvocationParameterImpl ( this , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail , java.lang.Object java.lang.Object ) { this . org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail = org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) { return this . org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail . java.util.Set<java.lang.annotation.Annotation> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.cache.jcache.interceptor.AbstractJCacheOperation.CacheParameterDetail . int ; }  <METHOD_END>
