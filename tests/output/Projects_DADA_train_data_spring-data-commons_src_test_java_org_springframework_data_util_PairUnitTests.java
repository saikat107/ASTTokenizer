<METHOD_START> @ Test public void void ( ) { Pair < java.lang.Integer , java.lang.Integer > org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> = Pair . of ( NUMBER , NUMBER ) ; assertThat ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> . getFirst ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> . getSecond ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Pair . of ( null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Pair . of ( NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pair < java.lang.Integer , java.lang.Integer > org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> = Pair . of ( NUMBER , NUMBER ) ; Pair < java.lang.Integer , java.lang.Integer > org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> = Pair . of ( NUMBER , NUMBER ) ; assertThat ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> ) . isEqualTo ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> ) ; assertThat ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> ) . isEqualTo ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> ) ; assertThat ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> ) . isEqualTo ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pair < java.lang.Integer , java.lang.Integer > org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> = Pair . of ( NUMBER , NUMBER ) ; Pair < java.lang.Integer , java.lang.Integer > org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> = Pair . of ( NUMBER , NUMBER ) ; Pair < java.lang.Integer , java.lang.Integer > org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> = Pair . of ( NUMBER , NUMBER ) ; assertThat ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> . hashCode ( ) ) . isEqualTo ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> . hashCode ( ) ) ; assertThat ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> . hashCode ( ) ) . isNotEqualTo ( org.springframework.data.util.Pair<java.lang.Integer,java.lang.Integer> . hashCode ( ) ) ; }  <METHOD_END>
