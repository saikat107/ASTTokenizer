<METHOD_START> @ BeforeClass public static void void ( ) { java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) , STRING ) ; java.io.File . boolean ( ) ; java.io.File . void ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { if ( java.io.File != null && java.io.File . boolean ( ) ) { for ( java.io.File java.io.File : java.io.File . java.io.File[] ( ) ) { java.io.File . boolean ( ) ; } } java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; java.io.File . void ( ) ; FileCopyUtils . copy ( java.lang.String . byte[] ( java.lang.String ) , new java.io.FileOutputStream ( java.io.File , false ) ) ; org.springframework.integration.file.Message<java.io.File> = MessageBuilder . withPayload ( java.io.File ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.integration.file.BeanFactory . getBean ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.integration.file.BeanFactory . getBean ( STRING ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.file.MessageChannel . send ( org.springframework.integration.file.Message<java.io.File> ) ; java.util.List<org.springframework.integration.file.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.file.Message<?>> = org.springframework.integration.file.QueueChannel . clear ( ) ; assertThat ( java.util.List<org.springframework.integration.file.Message<?>> . size ( ) , is ( NUMBER ) ) ; Message < ? > org.springframework.integration.file.Message<?> = java.util.List<org.springframework.integration.file.Message<?>> . get ( NUMBER ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.Message<> . getPayload ( ) ; assertThat ( java.io.File , is ( not ( java.io.File ) ) ) ; assertThat ( org.springframework.integration.file.Message<> . getHeaders ( ) . get ( FileHeaders . ORIGINAL_FILE , java.io.File .class ) , is ( java.io.File ) ) ; assertThat ( java.io.File . boolean ( ) , is ( true ) ) ; assertThat ( java.io.File . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.file.MessageChannel . send ( org.springframework.integration.file.Message<java.io.File> ) ; java.util.List<org.springframework.integration.file.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.file.Message<?>> = org.springframework.integration.file.QueueChannel . clear ( ) ; assertThat ( java.util.List<org.springframework.integration.file.Message<?>> . size ( ) , is ( NUMBER ) ) ; Message < ? > org.springframework.integration.file.Message<?> = java.util.List<org.springframework.integration.file.Message<?>> . get ( NUMBER ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.Message<> . getPayload ( ) ; assertThat ( java.io.File , is ( not ( java.io.File ) ) ) ; assertThat ( org.springframework.integration.file.Message<> . getHeaders ( ) . get ( FileHeaders . ORIGINAL_FILE , java.io.File .class ) , is ( java.io.File ) ) ; assertThat ( java.io.File . boolean ( ) , is ( false ) ) ; assertThat ( java.io.File . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = this . org.springframework.integration.file.BeanFactory . getBean ( STRING ) ; assertTrue ( java.lang.Object instanceof FileWritingMessageHandler ) ; org.springframework.integration.file.MessageChannel . send ( org.springframework.integration.file.Message<java.io.File> ) ; java.util.List<org.springframework.integration.file.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.file.Message<?>> = org.springframework.integration.file.QueueChannel . clear ( ) ; assertThat ( java.util.List<org.springframework.integration.file.Message<?>> . size ( ) , is ( NUMBER ) ) ; Message < ? > org.springframework.integration.file.Message<?> = java.util.List<org.springframework.integration.file.Message<?>> . get ( NUMBER ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.integration.file.Message<> . getPayload ( ) ; assertThat ( java.io.File , is ( not ( java.io.File ) ) ) ; assertThat ( org.springframework.integration.file.Message<> . getHeaders ( ) . get ( FileHeaders . ORIGINAL_FILE , java.io.File .class ) , is ( java.io.File ) ) ; assertThat ( java.io.File . boolean ( ) , is ( false ) ) ; assertThat ( java.io.File . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
