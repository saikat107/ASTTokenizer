<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.integration.websocket.config.ConfigurableListableBeanFactory ) throws org.springframework.integration.websocket.config.BeansException { if ( org.springframework.integration.websocket.config.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) { this . void ( ( BeanDefinitionRegistry ) org.springframework.integration.websocket.config.ConfigurableListableBeanFactory ) ; } else { org.springframework.integration.websocket.config.Log . warn ( STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.websocket.config.BeanDefinitionRegistry ) { if ( boolean ) { if ( ! org.springframework.integration.websocket.config.BeanDefinitionRegistry . containsBeanDefinition ( STRING ) ) { BeanDefinitionBuilder org.springframework.integration.websocket.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ThreadPoolTaskScheduler .class ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , java.lang.Runtime . java.lang.Runtime ( ) . int ( ) ) . addPropertyValue ( STRING , true ) ; org.springframework.integration.websocket.config.BeanDefinitionRegistry . registerBeanDefinition ( STRING , org.springframework.integration.websocket.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } if ( ! org.springframework.integration.websocket.config.BeanDefinitionRegistry . containsBeanDefinition ( DelegatingWebSocketConfiguration .class . java.lang.String ( ) ) && ! org.springframework.integration.websocket.config.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { BeanDefinitionBuilder org.springframework.integration.websocket.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.integration.websocket.config.WebSocketIntegrationConfigurationInitializer.WebSocketHandlerMappingFactoryBean .class ) . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) . addPropertyReference ( STRING , STRING ) ; org.springframework.integration.websocket.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.integration.websocket.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( ThreadPoolTaskScheduler org.springframework.integration.websocket.config.ThreadPoolTaskScheduler ) { this . org.springframework.integration.websocket.config.ServletWebSocketHandlerRegistry = new ServletWebSocketHandlerRegistry ( org.springframework.integration.websocket.config.ThreadPoolTaskScheduler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.integration.websocket.config.ApplicationContext ) throws org.springframework.integration.websocket.config.BeansException { this . org.springframework.integration.websocket.config.ApplicationContext = org.springframework.integration.websocket.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.websocket.config.HandlerMapping org.springframework.integration.websocket.config.HandlerMapping ( ) java.lang.Exception { java.util.Collection<org.springframework.integration.websocket.config.WebSocketConfigurer> < WebSocketConfigurer > java.util.Collection<org.springframework.integration.websocket.config.WebSocketConfigurer> = ( ( ListableBeanFactory ) getBeanFactory ( ) ) . getBeansOfType ( WebSocketConfigurer .class ) . values ( ) ; for ( WebSocketConfigurer org.springframework.integration.websocket.config.WebSocketConfigurer : java.util.Collection<org.springframework.integration.websocket.config.WebSocketConfigurer> ) { org.springframework.integration.websocket.config.WebSocketConfigurer . registerWebSocketHandlers ( this . org.springframework.integration.websocket.config.ServletWebSocketHandlerRegistry ) ; } AbstractHandlerMapping org.springframework.integration.websocket.config.AbstractHandlerMapping = this . org.springframework.integration.websocket.config.ServletWebSocketHandlerRegistry . getHandlerMapping ( ) ; org.springframework.integration.websocket.config.AbstractHandlerMapping . setApplicationContext ( this . org.springframework.integration.websocket.config.ApplicationContext ) ; return org.springframework.integration.websocket.config.AbstractHandlerMapping ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return HandlerMapping .class ; }  <METHOD_END>
