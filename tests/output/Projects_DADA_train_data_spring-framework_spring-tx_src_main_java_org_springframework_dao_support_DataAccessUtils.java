<METHOD_START> public static < T > T T ( java.util.Collection<T> < T > java.util.Collection<T> ) throws org.springframework.dao.support.IncorrectResultSizeDataAccessException { int int = ( java.util.Collection<T> != null ? java.util.Collection<T> . int ( ) : NUMBER ) ; if ( int == NUMBER ) { return null ; } if ( java.util.Collection<T> . int ( ) > NUMBER ) { throw new IncorrectResultSizeDataAccessException ( NUMBER , int ) ; } return java.util.Collection<T> . java.util.Iterator<T> ( ) . T ( ) ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( java.util.Collection<T> < T > java.util.Collection<T> ) throws org.springframework.dao.support.IncorrectResultSizeDataAccessException { int int = ( java.util.Collection<T> != null ? java.util.Collection<T> . int ( ) : NUMBER ) ; if ( int == NUMBER ) { throw new EmptyResultDataAccessException ( NUMBER ) ; } if ( java.util.Collection<T> . int ( ) > NUMBER ) { throw new IncorrectResultSizeDataAccessException ( NUMBER , int ) ; } return java.util.Collection<T> . java.util.Iterator<T> ( ) . T ( ) ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( java.util.Collection<T> < T > java.util.Collection<T> ) throws org.springframework.dao.support.IncorrectResultSizeDataAccessException { int int = ( java.util.Collection<T> != null ? java.util.Collection<T> . int ( ) : NUMBER ) ; if ( int == NUMBER ) { return null ; } if ( ! CollectionUtils . hasUniqueObject ( java.util.Collection<T> ) ) { throw new IncorrectResultSizeDataAccessException ( NUMBER , int ) ; } return java.util.Collection<T> . java.util.Iterator<T> ( ) . T ( ) ; }  <METHOD_END>
<METHOD_START> public static < T > T T ( java.util.Collection<T> < T > java.util.Collection<T> ) throws org.springframework.dao.support.IncorrectResultSizeDataAccessException { int int = ( java.util.Collection<T> != null ? java.util.Collection<T> . int ( ) : NUMBER ) ; if ( int == NUMBER ) { throw new EmptyResultDataAccessException ( NUMBER ) ; } if ( ! CollectionUtils . hasUniqueObject ( java.util.Collection<T> ) ) { throw new IncorrectResultSizeDataAccessException ( NUMBER , int ) ; } return java.util.Collection<T> . java.util.Iterator<T> ( ) . T ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.util.Collection<?> < ? > java.util.Collection<?> , java.lang.Class<T> < T > java.lang.Class<T> )			throws org.springframework.dao.support.IncorrectResultSizeDataAccessException , org.springframework.dao.support.TypeMismatchDataAccessException { java.lang.Object java.lang.Object = requiredUniqueResult ( java.util.Collection<> ) ; if ( java.lang.Class<T> != null && ! java.lang.Class<T> . boolean ( java.lang.Object ) ) { if ( java.lang.String .class == java.lang.Class<T> ) { java.lang.Object = java.lang.Object . java.lang.String ( ) ; } else if ( java.lang.Number .class . boolean ( java.lang.Class<T> ) && java.lang.Number .class . boolean ( java.lang.Object ) ) { try { java.lang.Object = NumberUtils . convertNumberToTargetClass ( ( ( java.lang.Number ) java.lang.Object ) , ( java.lang.Class<? extends java.lang.Number> < ? extends java.lang.Number > ) java.lang.Class<T> ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new TypeMismatchDataAccessException ( java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } } else { throw new TypeMismatchDataAccessException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + java.lang.Class<T> . java.lang.String ( ) + STRING ) ; } } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static int int ( java.util.Collection<?> < ? > java.util.Collection<?> )			throws org.springframework.dao.support.IncorrectResultSizeDataAccessException , org.springframework.dao.support.TypeMismatchDataAccessException { return java.lang.Number ( java.util.Collection<> , java.lang.Number .class ) . int ( ) ; }  <METHOD_END>
<METHOD_START> public static long long ( java.util.Collection<?> < ? > java.util.Collection<?> )			throws org.springframework.dao.support.IncorrectResultSizeDataAccessException , org.springframework.dao.support.TypeMismatchDataAccessException { return java.lang.Number ( java.util.Collection<> , java.lang.Number .class ) . long ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.RuntimeException java.lang.RuntimeException ( java.lang.RuntimeException java.lang.RuntimeException , PersistenceExceptionTranslator org.springframework.dao.support.PersistenceExceptionTranslator ) { Assert . notNull ( org.springframework.dao.support.PersistenceExceptionTranslator , STRING ) ; DataAccessException org.springframework.dao.support.DataAccessException = org.springframework.dao.support.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) ; return ( org.springframework.dao.support.DataAccessException != null ? org.springframework.dao.support.DataAccessException : java.lang.RuntimeException ) ; }  <METHOD_END>
