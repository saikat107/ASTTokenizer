<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . org.springframework.beans.factory.config.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = StringUtils . trimAllWhitespace ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = StringUtils . trimAllWhitespace ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = StringUtils . trimAllWhitespace ( BeanFactoryUtils . originalBeanName ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.beans.factory.config.BeanFactory ) { this . org.springframework.beans.factory.config.BeanFactory = org.springframework.beans.factory.config.BeanFactory ; if ( this . org.springframework.beans.factory.config.BeanWrapper != null && this . java.lang.String != null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . org.springframework.beans.factory.config.BeanWrapper == null && this . java.lang.String == null ) { if ( this . java.lang.String != null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } int int = this . java.lang.String . int ( '.' ) ; if ( int == - NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + this . java.lang.String + STRING ) ; } this . java.lang.String = this . java.lang.String . java.lang.String ( NUMBER , int ) ; this . java.lang.String = this . java.lang.String . java.lang.String ( int + NUMBER ) ; } else if ( this . java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . org.springframework.beans.factory.config.BeanWrapper == null && this . org.springframework.beans.factory.config.BeanFactory . isSingleton ( this . java.lang.String ) ) { java.lang.Object java.lang.Object = this . org.springframework.beans.factory.config.BeanFactory . getBean ( this . java.lang.String ) ; this . org.springframework.beans.factory.config.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( java.lang.Object ) ; this . java.lang.Class<?> = this . org.springframework.beans.factory.config.BeanWrapper . getPropertyType ( this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.config.BeansException { BeanWrapper org.springframework.beans.factory.config.BeanWrapper = this . org.springframework.beans.factory.config.BeanWrapper ; if ( org.springframework.beans.factory.config.BeanWrapper != null ) { if ( org.springframework.beans.factory.config.Log . isWarnEnabled ( ) && this . java.lang.String != null && this . org.springframework.beans.factory.config.BeanFactory instanceof ConfigurableBeanFactory && ( ( ConfigurableBeanFactory ) this . org.springframework.beans.factory.config.BeanFactory ) . isCurrentlyInCreation ( this . java.lang.String ) ) { org.springframework.beans.factory.config.Log . warn ( STRING + this . java.lang.String + STRING + STRING + this . java.lang.String + STRING ) ; } } else { java.lang.Object java.lang.Object = this . org.springframework.beans.factory.config.BeanFactory . getBean ( this . java.lang.String ) ; org.springframework.beans.factory.config.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( java.lang.Object ) ; } return org.springframework.beans.factory.config.BeanWrapper . getPropertyValue ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
