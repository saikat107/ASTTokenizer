<METHOD_START> @ Before public void void ( ) { java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ; java.lang.System . void ( java.io.ByteArrayInputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.stream.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.stream.config.ConsoleInboundChannelAdapterParserTests .class ) ; SourcePollingChannelAdapter org.springframework.integration.stream.config.SourcePollingChannelAdapter = org.springframework.integration.stream.config.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; MessageSource < ? > org.springframework.integration.stream.config.MessageSource<?> = ( MessageSource < ? > ) new DirectFieldAccessor ( org.springframework.integration.stream.config.SourcePollingChannelAdapter ) . getPropertyValue ( STRING ) ; assertTrue ( org.springframework.integration.stream.config.MessageSource<> instanceof NamedComponent ) ; assertEquals ( STRING , org.springframework.integration.stream.config.SourcePollingChannelAdapter . getComponentName ( ) ) ; assertEquals ( STRING , org.springframework.integration.stream.config.SourcePollingChannelAdapter . getComponentType ( ) ) ; assertEquals ( STRING , ( ( NamedComponent ) org.springframework.integration.stream.config.MessageSource<> ) . getComponentType ( ) ) ; DirectFieldAccessor org.springframework.integration.stream.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.stream.config.MessageSource<> ) ; java.io.Reader java.io.Reader = ( java.io.Reader ) org.springframework.integration.stream.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( java.io.BufferedReader .class , java.io.Reader . java.lang.Class<? extends java.io.Reader> ( ) ) ; DirectFieldAccessor org.springframework.integration.stream.config.DirectFieldAccessor = new DirectFieldAccessor ( java.io.Reader ) ; java.io.Reader java.io.Reader = ( java.io.Reader ) org.springframework.integration.stream.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( java.io.InputStreamReader .class , java.io.Reader . java.lang.Class<? extends java.io.Reader> ( ) ) ; java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( ( ( java.io.InputStreamReader ) java.io.Reader ) . java.lang.String ( ) ) ; assertEquals ( java.nio.charset.Charset . java.nio.charset.Charset ( ) , java.nio.charset.Charset ) ; Message < ? > org.springframework.integration.stream.config.Message<?> = org.springframework.integration.stream.config.MessageSource<> . receive ( ) ; assertNotNull ( org.springframework.integration.stream.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.stream.config.Message<> . getPayload ( ) ) ; org.springframework.integration.stream.config.SourcePollingChannelAdapter = org.springframework.integration.stream.config.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.stream.config.MessageSource<?> = org.springframework.integration.stream.config.SourcePollingChannelAdapter . getMessageSource ( ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.stream.config.MessageSource<> , STRING , java.lang.Boolean .class ) ) ; org.springframework.integration.stream.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.stream.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.stream.config.ConsoleInboundChannelAdapterParserTests .class ) ; SourcePollingChannelAdapter org.springframework.integration.stream.config.SourcePollingChannelAdapter = org.springframework.integration.stream.config.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; MessageSource < ? > org.springframework.integration.stream.config.MessageSource<?> = org.springframework.integration.stream.config.SourcePollingChannelAdapter . getMessageSource ( ) ; DirectFieldAccessor org.springframework.integration.stream.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.stream.config.MessageSource<> ) ; java.io.Reader java.io.Reader = ( java.io.Reader ) org.springframework.integration.stream.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( java.io.BufferedReader .class , java.io.Reader . java.lang.Class<? extends java.io.Reader> ( ) ) ; assertEquals ( false , org.springframework.integration.stream.config.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; DirectFieldAccessor org.springframework.integration.stream.config.DirectFieldAccessor = new DirectFieldAccessor ( java.io.Reader ) ; java.io.Reader java.io.Reader = ( java.io.Reader ) org.springframework.integration.stream.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( java.io.InputStreamReader .class , java.io.Reader . java.lang.Class<? extends java.io.Reader> ( ) ) ; java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( ( ( java.io.InputStreamReader ) java.io.Reader ) . java.lang.String ( ) ) ; assertEquals ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) , java.nio.charset.Charset ) ; Message < ? > org.springframework.integration.stream.config.Message<?> = org.springframework.integration.stream.config.MessageSource<> . receive ( ) ; assertNotNull ( org.springframework.integration.stream.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.stream.config.Message<> . getPayload ( ) ) ; org.springframework.integration.stream.config.SourcePollingChannelAdapter = org.springframework.integration.stream.config.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.stream.config.MessageSource<?> = org.springframework.integration.stream.config.SourcePollingChannelAdapter . getMessageSource ( ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.stream.config.MessageSource<> , STRING , java.lang.Boolean .class ) ) ; java.io.Reader = ( java.io.Reader ) org.springframework.integration.stream.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( java.io.BufferedReader .class , java.io.Reader . java.lang.Class<? extends java.io.Reader> ( ) ) ; org.springframework.integration.stream.config.DirectFieldAccessor = new DirectFieldAccessor ( java.io.Reader ) ; java.io.Reader = ( java.io.Reader ) org.springframework.integration.stream.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( java.io.InputStreamReader .class , java.io.Reader . java.lang.Class<? extends java.io.Reader> ( ) ) ; java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( ( ( java.io.InputStreamReader ) java.io.Reader ) . java.lang.String ( ) ) ; assertEquals ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) , java.nio.charset.Charset ) ; org.springframework.integration.stream.config.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanCreationException org.springframework.integration.stream.config.BeanCreationException = null ; try { new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.stream.config.ConsoleInboundChannelAdapterParserTests .class ) . close ( ) ; } catch ( BeanCreationException org.springframework.integration.stream.config.BeanCreationException ) { org.springframework.integration.stream.config.BeanCreationException = org.springframework.integration.stream.config.BeanCreationException ; } java.lang.Throwable java.lang.Throwable = org.springframework.integration.stream.config.BeanCreationException . getRootCause ( ) ; assertEquals ( java.io.UnsupportedEncodingException .class , java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; }  <METHOD_END>
