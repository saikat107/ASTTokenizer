<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.action.AnnotationConfigApplicationContext org.springframework.statemachine.action.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.action.ActionErrorTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.action.ObjectStateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.action.ObjectStateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . start ( ) ; org.springframework.statemachine.action.ObjectStateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.action.ObjectStateMachine<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.action.StateMachineStateConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineStateConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.action.StateMachineTransitionConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.action.StateMachineTransitionConfigurer<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . action ( org.springframework.statemachine.action.ActionErrorTests.TestCountAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.action.ActionErrorTests.TestCountAction org.springframework.statemachine.action.ActionErrorTests.TestCountAction ( ) { return new org.springframework.statemachine.action.ActionErrorTests.TestCountAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.action.StateContext<org.springframework.statemachine.action.TestStates,org.springframework.statemachine.action.TestEvents> ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
