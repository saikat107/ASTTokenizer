<METHOD_START> public void ( BeanDefinitionRegistry org.springframework.data.repository.config.BeanDefinitionRegistry , RepositoryConfigurationExtension org.springframework.data.repository.config.RepositoryConfigurationExtension , ResourceLoader org.springframework.data.repository.config.ResourceLoader , Environment org.springframework.data.repository.config.Environment ) { Assert . notNull ( org.springframework.data.repository.config.RepositoryConfigurationExtension , STRING ) ; Assert . notNull ( org.springframework.data.repository.config.ResourceLoader , STRING ) ; Assert . notNull ( org.springframework.data.repository.config.Environment , STRING ) ; this . org.springframework.data.repository.config.BeanDefinitionRegistry = org.springframework.data.repository.config.BeanDefinitionRegistry ; this . org.springframework.data.repository.config.RepositoryConfigurationExtension = org.springframework.data.repository.config.RepositoryConfigurationExtension ; this . org.springframework.data.repository.config.ResourceLoader = org.springframework.data.repository.config.ResourceLoader ; this . org.springframework.data.repository.config.MetadataReaderFactory = new CachingMetadataReaderFactory ( org.springframework.data.repository.config.ResourceLoader ) ; this . org.springframework.data.repository.config.CustomRepositoryImplementationDetector = new CustomRepositoryImplementationDetector ( org.springframework.data.repository.config.MetadataReaderFactory , org.springframework.data.repository.config.Environment , org.springframework.data.repository.config.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.config.BeanDefinitionBuilder org.springframework.data.repository.config.BeanDefinitionBuilder ( RepositoryConfiguration < ? > org.springframework.data.repository.config.RepositoryConfiguration<?> ) { Assert . notNull ( org.springframework.data.repository.config.BeanDefinitionRegistry , STRING ) ; Assert . notNull ( org.springframework.data.repository.config.ResourceLoader , STRING ) ; BeanDefinitionBuilder org.springframework.data.repository.config.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( org.springframework.data.repository.config.RepositoryConfiguration<> . getRepositoryFactoryBeanClassName ( ) ) ; org.springframework.data.repository.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) . setSource ( org.springframework.data.repository.config.RepositoryConfiguration<> . getSource ( ) ) ; org.springframework.data.repository.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.data.repository.config.RepositoryConfiguration<> . getRepositoryInterface ( ) ) ; org.springframework.data.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.repository.config.RepositoryConfiguration<> . getQueryLookupStrategyKey ( ) ) ; org.springframework.data.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.repository.config.RepositoryConfiguration<> . isLazyInit ( ) ) ; org.springframework.data.repository.config.RepositoryConfiguration<> . getRepositoryBaseClassName ( ) . ifPresent ( it -> builder . addPropertyValue ( STRING , it ) ) ; NamedQueriesBeanDefinitionBuilder org.springframework.data.repository.config.NamedQueriesBeanDefinitionBuilder = new NamedQueriesBeanDefinitionBuilder ( org.springframework.data.repository.config.RepositoryConfigurationExtension . getDefaultNamedQueryLocation ( ) ) ; org.springframework.data.repository.config.RepositoryConfiguration<> . getNamedQueriesLocation ( ) . ifPresent ( org.springframework.data.repository.config.NamedQueriesBeanDefinitionBuilder :: setLocations ) ; org.springframework.data.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.repository.config.NamedQueriesBeanDefinitionBuilder . build ( org.springframework.data.repository.config.RepositoryConfiguration<> . getSource ( ) ) ) ; java.util.Optional<java.lang.String> ( org.springframework.data.repository.config.RepositoryConfiguration<> ) . ifPresent ( it -> { builder . addPropertyReference ( STRING , it ) ; builder . addDependsOn ( it ) ; } ) ; RootBeanDefinition org.springframework.data.repository.config.RootBeanDefinition = new RootBeanDefinition ( ExtensionAwareEvaluationContextProvider .class ) ; org.springframework.data.repository.config.RootBeanDefinition . setSource ( org.springframework.data.repository.config.RepositoryConfiguration<> . getSource ( ) ) ; org.springframework.data.repository.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.repository.config.RootBeanDefinition ) ; return org.springframework.data.repository.config.BeanDefinitionBuilder ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( RepositoryConfiguration < ? > org.springframework.data.repository.config.RepositoryConfiguration<?> ) { java.lang.String java.lang.String = org.springframework.data.repository.config.RepositoryConfiguration<> . getImplementationBeanName ( ) ; if ( org.springframework.data.repository.config.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { return java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String ) ; } java.util.Optional<org.springframework.data.repository.config.AbstractBeanDefinition> < AbstractBeanDefinition > java.util.Optional<org.springframework.data.repository.config.AbstractBeanDefinition> = org.springframework.data.repository.config.CustomRepositoryImplementationDetector . detectCustomImplementation ( org.springframework.data.repository.config.RepositoryConfiguration<> . getImplementationClassName ( ) , org.springframework.data.repository.config.RepositoryConfiguration<> . getBasePackages ( ) , org.springframework.data.repository.config.RepositoryConfiguration<> . getExcludeFilters ( ) ) ; return java.util.Optional<org.springframework.data.repository.config.AbstractBeanDefinition> . map ( it -> { if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( STRING + configuration . getImplementationBeanName ( ) + STRING + it . getBeanClassName ( ) ) ; } it . setSource ( configuration . getSource ( ) ) ; registry . registerBeanDefinition ( beanName , it ) ; return beanName ; } ) ; }  <METHOD_END>
