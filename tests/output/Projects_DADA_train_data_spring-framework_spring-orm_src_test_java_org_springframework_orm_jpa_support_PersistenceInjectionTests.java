<METHOD_START> @ Test public void void ( ) java.lang.Exception { mockEmf = mock ( EntityManagerFactory .class , withSettings ( ) . serializable ( ) ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.FactoryBeanWithPersistenceContextField .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.FactoryBeanWithPersistenceContextField .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.FactoryBeanWithPersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.FactoryBeanWithPersistenceContextField = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.FactoryBeanWithPersistenceContextField ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( STRING + org.springframework.orm.jpa.support.PersistenceInjectionTests.FactoryBeanWithPersistenceContextField .class . java.lang.String ( ) ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.FactoryBeanWithPersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ) ; assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( org.springframework.orm.jpa.support.PersistenceInjectionTests.FactoryBeanWithPersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultVendorSpecificPrivatePersistenceContextField .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultVendorSpecificPrivatePersistenceContextField .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultVendorSpecificPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultVendorSpecificPrivatePersistenceContextField = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultVendorSpecificPrivatePersistenceContextField ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultVendorSpecificPrivatePersistenceContextField .class . java.lang.String ( ) ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultVendorSpecificPrivatePersistenceContextField . org.hibernate.ejb.HibernateEntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory = mock ( EntityManagerFactory .class ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( org.springframework.orm.jpa.support.EntityManagerFactory . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.orm.jpa.support.EntityManagerFactory ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.SpecificPublicPersistenceContextSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.SpecificPublicPersistenceContextSetter .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.SpecificPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.SpecificPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.SpecificPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.SpecificPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.SpecificPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.SpecificPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ( ) . flush ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . getTransaction ( ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . flush ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getAutowireCapableBeanFactory ( ) . autowireBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getAutowireCapableBeanFactory ( ) . autowireBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.orm.jpa.support.PersistenceInjectionTests.DummyInvocationHandler org.springframework.orm.jpa.support.PersistenceInjectionTests.DummyInvocationHandler = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DummyInvocationHandler ( ) ; java.lang.Object java.lang.Object = java.lang.reflect.Proxy . java.lang.Object ( java.lang.Class<? extends org.springframework.orm.jpa.support.PersistenceInjectionTests> ( ) . java.lang.ClassLoader ( ) , new java.lang.Class [] { EntityManager .class } , org.springframework.orm.jpa.support.PersistenceInjectionTests.DummyInvocationHandler ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( ( EntityManager ) java.lang.Object ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; SimpleMapScope org.springframework.orm.jpa.support.SimpleMapScope = new SimpleMapScope ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerScope ( STRING , org.springframework.orm.jpa.support.SimpleMapScope ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; RootBeanDefinition org.springframework.orm.jpa.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class ) ; org.springframework.orm.jpa.support.RootBeanDefinition . setScope ( STRING ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) , org.springframework.orm.jpa.support.RootBeanDefinition ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ) ; SimpleMapScope org.springframework.orm.jpa.support.SimpleMapScope = ( SimpleMapScope ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.orm.jpa.support.SimpleMapScope ) ; org.springframework.orm.jpa.support.SimpleMapScope . close ( ) ; assertTrue ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DummyInvocationHandler . boolean ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DummyInvocationHandler . boolean = false ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class , withSettings ( ) . serializable ( ) ) ; given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo = mock ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo .class ) ; given ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo . getNativeEntityManagerFactory ( ) ) . willReturn ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo ) ; given ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo . getJpaDialect ( ) ) . willReturn ( new DefaultJpaDialect ( ) ) ; given ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo . getEntityManagerInterface ( ) ) . willReturn ( ( java.lang.Class ) EntityManager .class ) ; given ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo . getBeanClassLoader ( ) ) . willReturn ( java.lang.Class<? extends org.springframework.orm.jpa.support.PersistenceInjectionTests> ( ) . java.lang.ClassLoader ( ) ) ; given ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; RootBeanDefinition org.springframework.orm.jpa.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class ) ; org.springframework.orm.jpa.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) , org.springframework.orm.jpa.support.RootBeanDefinition ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceUnitField .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceUnitField .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceUnitField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceUnitField = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceUnitField ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceUnitField .class . java.lang.String ( ) ) ; assertSame ( mockEmf , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceUnitField . org.springframework.orm.jpa.support.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) ) ; assertSame ( mockEmf , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter . org.springframework.orm.jpa.support.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory = mock ( EntityManagerFactory .class ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ) ; RootBeanDefinition org.springframework.orm.jpa.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class ) ; org.springframework.orm.jpa.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.orm.jpa.support.EntityManagerFactory ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) , org.springframework.orm.jpa.support.RootBeanDefinition ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) ) ; assertSame ( org.springframework.orm.jpa.support.EntityManagerFactory , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter . org.springframework.orm.jpa.support.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory = mock ( EntityManagerFactory .class ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.orm.jpa.support.EntityManagerFactory ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerAlias ( STRING , STRING ) ; RootBeanDefinition org.springframework.orm.jpa.support.RootBeanDefinition = new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ; org.springframework.orm.jpa.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.orm.jpa.support.RootBeanDefinition ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) ) ; assertSame ( mockEmf , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter . org.springframework.orm.jpa.support.EntityManagerFactory ) ; assertSame ( org.springframework.orm.jpa.support.EntityManagerFactory , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson . org.springframework.orm.jpa.support.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo = mock ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo .class ) ; given ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo . getPersistenceUnitName ( ) ) . willReturn ( STRING ) ; GenericApplicationContext org.springframework.orm.jpa.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo ) ; RootBeanDefinition org.springframework.orm.jpa.support.RootBeanDefinition = new RootBeanDefinition ( PersistenceAnnotationBeanPostProcessor .class ) ; org.springframework.orm.jpa.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.orm.jpa.support.RootBeanDefinition ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class ) ) ; org.springframework.orm.jpa.support.GenericApplicationContext . refresh ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson ) org.springframework.orm.jpa.support.GenericApplicationContext . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) ) ; assertSame ( mockEmf , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter . org.springframework.orm.jpa.support.EntityManagerFactory ) ; assertSame ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson . org.springframework.orm.jpa.support.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo = mock ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; ExpectedLookupTemplate org.springframework.orm.jpa.support.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo ) ; DefaultListableBeanFactory org.springframework.orm.jpa.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setPersistenceUnits ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setJndiTemplate ( org.springframework.orm.jpa.support.ExpectedLookupTemplate ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertSame ( mockEmf , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter . org.springframework.orm.jpa.support.EntityManagerFactory ) ; assertSame ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson . org.springframework.orm.jpa.support.EntityManagerFactory ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo = mock ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; ExpectedLookupTemplate org.springframework.orm.jpa.support.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , mockEmf ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo ) ; DefaultListableBeanFactory org.springframework.orm.jpa.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setPersistenceUnits ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setDefaultPersistenceUnitName ( STRING ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setJndiTemplate ( org.springframework.orm.jpa.support.ExpectedLookupTemplate ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) ) ; assertSame ( mockEmf , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter . org.springframework.orm.jpa.support.EntityManagerFactory ) ; assertSame ( org.springframework.orm.jpa.support.PersistenceInjectionTests.EntityManagerFactoryWithInfo , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson . org.springframework.orm.jpa.support.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; ExpectedLookupTemplate org.springframework.orm.jpa.support.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , mockEmf ) ; DefaultListableBeanFactory org.springframework.orm.jpa.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setPersistenceUnits ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setJndiTemplate ( org.springframework.orm.jpa.support.ExpectedLookupTemplate ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson .class . java.lang.String ( ) ) ; assertSame ( mockEmf , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetter . org.springframework.orm.jpa.support.EntityManagerFactory ) ; assertSame ( mockEmf , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceUnitSetterNamedPerson . org.springframework.orm.jpa.support.EntityManagerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; ExpectedLookupTemplate org.springframework.orm.jpa.support.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; DefaultListableBeanFactory org.springframework.orm.jpa.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setPersistenceContexts ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setExtendedPersistenceContexts ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setJndiTemplate ( org.springframework.orm.jpa.support.ExpectedLookupTemplate ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson . org.springframework.orm.jpa.support.EntityManager ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; ExpectedLookupTemplate org.springframework.orm.jpa.support.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; DefaultListableBeanFactory org.springframework.orm.jpa.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setPersistenceContexts ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setExtendedPersistenceContexts ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setDefaultPersistenceUnitName ( STRING ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setJndiTemplate ( org.springframework.orm.jpa.support.ExpectedLookupTemplate ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldNamedPerson . org.springframework.orm.jpa.support.EntityManager ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; ExpectedLookupTemplate org.springframework.orm.jpa.support.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; org.springframework.orm.jpa.support.ExpectedLookupTemplate . addObject ( STRING , org.springframework.orm.jpa.support.EntityManager ) ; DefaultListableBeanFactory org.springframework.orm.jpa.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setPersistenceContexts ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setExtendedPersistenceContexts ( java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . setJndiTemplate ( org.springframework.orm.jpa.support.ExpectedLookupTemplate ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class ) ) ; org.springframework.orm.jpa.support.DefaultListableBeanFactory . registerBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) , new RootBeanDefinition ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField .class . java.lang.String ( ) ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter = ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter ) org.springframework.orm.jpa.support.DefaultListableBeanFactory . getBean ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter .class . java.lang.String ( ) ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; assertSame ( org.springframework.orm.jpa.support.EntityManager , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPublicPersistenceContextSetter . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; try { org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , new org.springframework.orm.jpa.support.PersistenceInjectionTests.FieldOfWrongTypeAnnotatedWithPersistenceUnit ( ) , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; try { org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , new org.springframework.orm.jpa.support.PersistenceInjectionTests.SetterOfWrongTypeAnnotatedWithPersistenceUnit ( ) , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new PersistenceAnnotationBeanPostProcessor ( ) ; try { org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , new org.springframework.orm.jpa.support.PersistenceInjectionTests.SetterWithNoArgs ( ) , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new org.springframework.orm.jpa.support.PersistenceInjectionTests.MockPersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtended org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtended = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtended ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtended , STRING ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtended . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( java.util.Properties ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new org.springframework.orm.jpa.support.PersistenceInjectionTests.MockPersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtendedWithProps org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtendedWithProps = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtendedWithProps ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtendedWithProps , STRING ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldExtendedWithProps . org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( java.util.Properties ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; given ( org.springframework.orm.jpa.support.EntityManager . getDelegate ( ) ) . willReturn ( new java.lang.Object ( ) ) ; given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new org.springframework.orm.jpa.support.PersistenceInjectionTests.MockPersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties , STRING ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties . org.springframework.orm.jpa.support.EntityManager . getDelegate ( ) ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( java.util.Properties ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; given ( org.springframework.orm.jpa.support.EntityManager . getDelegate ( ) ) . willReturn ( new java.lang.Object ( ) ) ; given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new org.springframework.orm.jpa.support.PersistenceInjectionTests.MockPersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties , STRING ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField , STRING ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties . org.springframework.orm.jpa.support.EntityManager . getDelegate ( ) ) ; try { TransactionSynchronizationManager . bindResource ( mockEmf , new EntityManagerHolder ( org.springframework.orm.jpa.support.EntityManager ) ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager . getDelegate ( ) ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; } finally { TransactionSynchronizationManager . unbindResource ( mockEmf ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; EntityManager org.springframework.orm.jpa.support.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.support.EntityManager ) ; given ( org.springframework.orm.jpa.support.EntityManager . getDelegate ( ) ) . willReturn ( new java.lang.Object ( ) , NUMBER ) ; given ( org.springframework.orm.jpa.support.EntityManager . isOpen ( ) ) . willReturn ( true ) ; PersistenceAnnotationBeanPostProcessor org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor = new org.springframework.orm.jpa.support.PersistenceInjectionTests.MockPersistenceAnnotationBeanPostProcessor ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties ( ) ; org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField = new org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField ( ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties , STRING ) ; org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor . postProcessPropertyValues ( null , null , org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField , STRING ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextField . org.springframework.orm.jpa.support.EntityManager . getDelegate ( ) ) ; try { TransactionSynchronizationManager . bindResource ( mockEmf , new EntityManagerHolder ( org.springframework.orm.jpa.support.EntityManager ) ) ; assertNotNull ( org.springframework.orm.jpa.support.PersistenceInjectionTests.DefaultPrivatePersistenceContextFieldWithProperties . org.springframework.orm.jpa.support.EntityManager . getDelegate ( ) ) ; verify ( org.springframework.orm.jpa.support.EntityManager ) . close ( ) ; } finally { TransactionSynchronizationManager . unbindResource ( mockEmf ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.orm.jpa.support.EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return mockEmf ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class java.lang.Class ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ PersistenceContext ( type = PersistenceContextType . EXTENDED ) public void void ( EntityManager org.springframework.orm.jpa.support.EntityManager ) { if ( this . org.springframework.orm.jpa.support.EntityManager != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.orm.jpa.support.EntityManager = org.springframework.orm.jpa.support.EntityManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.support.EntityManager org.springframework.orm.jpa.support.EntityManager ( ) { return org.springframework.orm.jpa.support.EntityManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ PersistenceContext ( unitName = STRING , type = PersistenceContextType . EXTENDED ) public void void ( EntityManager org.springframework.orm.jpa.support.EntityManager ) { super. void ( org.springframework.orm.jpa.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ PersistenceUnit public void void ( EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory ) { if ( this . org.springframework.orm.jpa.support.EntityManagerFactory != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.orm.jpa.support.EntityManagerFactory = org.springframework.orm.jpa.support.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.support.EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory ( ) { return org.springframework.orm.jpa.support.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> @ PersistenceUnit ( unitName = STRING ) public void void ( EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory ) { this . org.springframework.orm.jpa.support.EntityManagerFactory = org.springframework.orm.jpa.support.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.support.EntityManagerFactory org.springframework.orm.jpa.support.EntityManagerFactory ( ) { return org.springframework.orm.jpa.support.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> @ PersistenceUnit @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Comparable java.lang.Comparable ) {		}  <METHOD_END>
<METHOD_START> @ PersistenceUnit public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { return true ; } if ( STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { boolean = true ; return null ; } if ( STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) { return STRING ; } throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
