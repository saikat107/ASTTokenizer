<METHOD_START> public void ( MetricWriter org.springframework.boot.actuate.metrics.writer.MetricWriter ) { this . org.springframework.boot.actuate.metrics.writer.MetricWriter = org.springframework.boot.actuate.metrics.writer.MetricWriter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.boot.actuate.metrics.writer.MetricWriter . increment ( new Delta <> ( java.lang.String ( java.lang.String ) , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.boot.actuate.metrics.writer.MetricWriter . increment ( new Delta <> ( java.lang.String ( java.lang.String ) , - NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.boot.actuate.metrics.writer.MetricWriter . reset ( java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = this . java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { return java.lang.String ; } java.lang.String java.lang.String = STRING + java.lang.String ; this . java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; return java.lang.String ; }  <METHOD_END>
