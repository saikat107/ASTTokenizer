<METHOD_START> public void ( java.lang.String java.lang.String , SolrTemplate org.springframework.data.solr.core.schema.SolrTemplate ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.solr.core.schema.SolrTemplate , STRING ) ; this . org.springframework.data.solr.core.schema.SolrTemplate = org.springframework.data.solr.core.schema.SolrTemplate ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.data.solr.core.schema.SolrTemplate . execute ( solrClient -> new SchemaRequest . SchemaName ( ) . process ( solrClient , collection ) . getSchemaName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Double java.lang.Double ( ) { return org.springframework.data.solr.core.schema.SolrTemplate . execute ( solrClient -> new Double ( new SchemaRequest . SchemaVersion ( ) . process ( solrClient , collection ) . getSchemaVersion ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.solr.core.schema.SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition ( ) { SchemaRepresentation org.springframework.data.solr.core.schema.SchemaRepresentation = org.springframework.data.solr.core.schema.SolrTemplate . execute ( solrClient -> new SchemaRequest ( ) . process ( solrClient , collection ) . getSchemaRepresentation ( ) ) ; SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = new SchemaDefinition ( java.lang.String ) ; for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : org.springframework.data.solr.core.schema.SchemaRepresentation . getFields ( ) ) { org.springframework.data.solr.core.schema.SchemaDefinition . addFieldDefinition ( FieldDefinition . fromMap ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : org.springframework.data.solr.core.schema.SchemaRepresentation . getCopyFields ( ) ) { CopyFieldDefinition org.springframework.data.solr.core.schema.CopyFieldDefinition = CopyFieldDefinition . fromMap ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.data.solr.core.schema.SchemaDefinition . addCopyField ( org.springframework.data.solr.core.schema.CopyFieldDefinition ) ; if ( org.springframework.data.solr.core.schema.SchemaDefinition . getFieldDefinition ( org.springframework.data.solr.core.schema.CopyFieldDefinition . getSource ( ) ) != null ) { org.springframework.data.solr.core.schema.SchemaDefinition . getFieldDefinition ( org.springframework.data.solr.core.schema.CopyFieldDefinition . getSource ( ) ) . setCopyFields ( org.springframework.data.solr.core.schema.CopyFieldDefinition . getDestination ( ) ) ; } } return org.springframework.data.solr.core.schema.SchemaDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final SchemaField org.springframework.data.solr.core.schema.SchemaField ) { if ( org.springframework.data.solr.core.schema.SchemaField instanceof FieldDefinition ) { void ( ( FieldDefinition ) org.springframework.data.solr.core.schema.SchemaField ) ; } else if ( org.springframework.data.solr.core.schema.SchemaField instanceof CopyFieldDefinition ) { void ( ( CopyFieldDefinition ) org.springframework.data.solr.core.schema.SchemaField ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final FieldDefinition org.springframework.data.solr.core.schema.FieldDefinition ) { org.springframework.data.solr.core.schema.SolrTemplate . execute ( solrClient -> { UpdateResponse response = new SchemaRequest . AddField ( field . asMap ( ) ) . process ( solrClient , collection ) ; if ( hasErrors ( response ) ) { throw new SchemaModificationException ( String . format ( STRING , field . getName ( ) , field . asMap ( ) , collection , response . getStatus ( ) , response ) ) ; } return Integer . valueOf ( response . getStatus ( ) ) ; } ) ; if ( ! CollectionUtils . isEmpty ( org.springframework.data.solr.core.schema.FieldDefinition . getCopyFields ( ) ) ) { CopyFieldDefinition org.springframework.data.solr.core.schema.CopyFieldDefinition = new CopyFieldDefinition ( ) ; org.springframework.data.solr.core.schema.CopyFieldDefinition . setSource ( org.springframework.data.solr.core.schema.FieldDefinition . getName ( ) ) ; org.springframework.data.solr.core.schema.CopyFieldDefinition . setDestination ( org.springframework.data.solr.core.schema.FieldDefinition . getCopyFields ( ) ) ; void ( org.springframework.data.solr.core.schema.CopyFieldDefinition ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final CopyFieldDefinition org.springframework.data.solr.core.schema.CopyFieldDefinition ) { org.springframework.data.solr.core.schema.SolrTemplate . execute ( solrClient -> { UpdateResponse response = new SchemaRequest . AddCopyField ( field . getSource ( ) , field . getDestination ( ) ) . process ( solrClient , collection ) ; if ( hasErrors ( response ) ) { throw new SchemaModificationException ( String . format ( STRING , field . getSource ( ) , field . getDestination ( ) , collection , response . getStatus ( ) , response ) ) ; } return Integer . valueOf ( response . getStatus ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final java.lang.String java.lang.String ) { org.springframework.data.solr.core.schema.SolrTemplate . execute ( solrClient -> { UpdateResponse response = new SchemaRequest . DeleteField ( name ) . process ( solrClient , collection ) ; if ( hasErrors ( response ) ) { throw new SchemaModificationException ( String . format ( STRING , name , collection , response . getStatus ( ) , response ) ) ; } return Integer . valueOf ( response . getStatus ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( UpdateResponse org.springframework.data.solr.core.schema.UpdateResponse ) { if ( org.springframework.data.solr.core.schema.UpdateResponse . getStatus ( ) != NUMBER || org.springframework.data.solr.core.schema.UpdateResponse . getResponse ( ) != null && ! CollectionUtils . isEmpty ( org.springframework.data.solr.core.schema.UpdateResponse . getResponse ( ) . getAll ( STRING ) ) ) { return true ; } return false ; }  <METHOD_END>
