<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicReference<java.net.URI> < java.net.URI > java.util.concurrent.atomic.AtomicReference<java.net.URI> = new java.util.concurrent.atomic.AtomicReference<java.net.URI> < java.net.URI > ( ) ; HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; SpelExpressionParser org.springframework.integration.http.outbound.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setUriVariableExpressions ( java.util.Collections . java.util.Map ( STRING , org.springframework.integration.http.outbound.SpelExpressionParser . parseExpression ( STRING ) ) ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setRequestFactory ( new SimpleClientHttpRequestFactory ( ) { @ java.lang.Override public org.springframework.integration.http.outbound.ClientHttpRequest org.springframework.integration.http.outbound.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod ) throws java.io.IOException { java.util.concurrent.atomic.AtomicReference<java.net.URI> . void ( java.net.URI ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.net.URI> . java.net.URI ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.http.outbound.ClientHttpRequest org.springframework.integration.http.outbound.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod ) throws java.io.IOException { java.util.concurrent.atomic.AtomicReference<java.net.URI> . void ( java.net.URI ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicReference<java.net.URI> < java.net.URI > java.util.concurrent.atomic.AtomicReference<java.net.URI> = new java.util.concurrent.atomic.AtomicReference<java.net.URI> < java.net.URI > ( ) ; HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; SpelExpressionParser org.springframework.integration.http.outbound.SpelExpressionParser = new SpelExpressionParser ( ) ; java.util.Map<java.lang.String,org.springframework.integration.http.outbound.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.http.outbound.Expression> = new java.util.HashMap<java.lang.String,org.springframework.integration.http.outbound.Expression> < java.lang.String , Expression > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.http.outbound.Expression> . put ( STRING , org.springframework.integration.http.outbound.SpelExpressionParser . parseExpression ( STRING ) ) ; java.util.Map<java.lang.String,org.springframework.integration.http.outbound.Expression> . put ( STRING , org.springframework.integration.http.outbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setUriVariableExpressions ( java.util.Map<java.lang.String,org.springframework.integration.http.outbound.Expression> ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setRequestFactory ( new SimpleClientHttpRequestFactory ( ) { @ java.lang.Override public org.springframework.integration.http.outbound.ClientHttpRequest org.springframework.integration.http.outbound.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod ) throws java.io.IOException { java.util.concurrent.atomic.AtomicReference<java.net.URI> . void ( java.net.URI ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( new GenericMessage < java.lang.Object > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.net.URI> . java.net.URI ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.http.outbound.ClientHttpRequest org.springframework.integration.http.outbound.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod ) throws java.io.IOException { java.util.concurrent.atomic.AtomicReference<java.net.URI> . void ( java.net.URI ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicReference<java.net.URI> < java.net.URI > java.util.concurrent.atomic.AtomicReference<java.net.URI> = new java.util.concurrent.atomic.AtomicReference<java.net.URI> < java.net.URI > ( ) ; HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setRequestFactory ( new SimpleClientHttpRequestFactory ( ) { @ java.lang.Override public org.springframework.integration.http.outbound.ClientHttpRequest org.springframework.integration.http.outbound.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod ) throws java.io.IOException { java.util.concurrent.atomic.AtomicReference<java.net.URI> . void ( java.net.URI ) ; throw new java.lang.RuntimeException ( STRING ) ; } } ) ; AbstractApplicationContext org.springframework.integration.http.outbound.AbstractApplicationContext = TestUtils . createTestApplicationContext ( ) ; IntegrationRegistrar org.springframework.integration.http.outbound.IntegrationRegistrar = new IntegrationRegistrar ( ) ; org.springframework.integration.http.outbound.IntegrationRegistrar . setBeanClassLoader ( org.springframework.integration.http.outbound.AbstractApplicationContext . getClassLoader ( ) ) ; org.springframework.integration.http.outbound.IntegrationRegistrar . registerBeanDefinitions ( null , ( BeanDefinitionRegistry ) org.springframework.integration.http.outbound.AbstractApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.http.outbound.AbstractApplicationContext . refresh ( ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setBeanFactory ( org.springframework.integration.http.outbound.AbstractApplicationContext ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setUriVariablesExpression ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ExpressionEvalMap . from ( java.util.Map<java.lang.String,java.lang.String> ) . usingSimpleCallback ( ) . build ( ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.util.Map<java.lang.String,> ) . build ( ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } assertEquals ( STRING , java.util.concurrent.atomic.AtomicReference<java.net.URI> . java.net.URI ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.http.outbound.ClientHttpRequest org.springframework.integration.http.outbound.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod ) throws java.io.IOException { java.util.concurrent.atomic.AtomicReference<java.net.URI> . void ( java.net.URI ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
