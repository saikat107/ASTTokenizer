<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.support.management.DirectChannel = new DirectChannel ( ) ; AbstractMessageHandler org.springframework.integration.support.management.AbstractMessageHandler = new RecipientListRouter ( ) ; AbstractMessageSource < ? > org.springframework.integration.support.management.AbstractMessageSource<?> = new AbstractMessageSource < java.lang.Object > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; } @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return null ; } } ; assertTrue ( org.springframework.integration.support.management.DirectChannel . isLoggingEnabled ( ) ) ; assertTrue ( org.springframework.integration.support.management.AbstractMessageHandler . isLoggingEnabled ( ) ) ; assertTrue ( org.springframework.integration.support.management.AbstractMessageSource<> . isLoggingEnabled ( ) ) ; ApplicationContext org.springframework.integration.support.management.ApplicationContext = mock ( ApplicationContext .class ) ; java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> < java.lang.String , IntegrationManagement > java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> = new java.util.HashMap<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> < java.lang.String , IntegrationManagement > ( ) ; java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> . put ( STRING , org.springframework.integration.support.management.DirectChannel ) ; java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> . put ( STRING , org.springframework.integration.support.management.AbstractMessageHandler ) ; java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> . put ( STRING , org.springframework.integration.support.management.AbstractMessageSource<> ) ; when ( org.springframework.integration.support.management.ApplicationContext . getBeansOfType ( IntegrationManagement .class ) ) . thenReturn ( java.util.Map<java.lang.String,org.springframework.integration.support.management.IntegrationManagement> ) ; IntegrationManagementConfigurer org.springframework.integration.support.management.IntegrationManagementConfigurer = new IntegrationManagementConfigurer ( ) ; org.springframework.integration.support.management.IntegrationManagementConfigurer . setBeanName ( IntegrationManagementConfigurer . MANAGEMENT_CONFIGURER_NAME ) ; org.springframework.integration.support.management.IntegrationManagementConfigurer . setApplicationContext ( org.springframework.integration.support.management.ApplicationContext ) ; org.springframework.integration.support.management.IntegrationManagementConfigurer . setDefaultLoggingEnabled ( false ) ; org.springframework.integration.support.management.IntegrationManagementConfigurer . afterSingletonsInstantiated ( ) ; assertFalse ( org.springframework.integration.support.management.DirectChannel . isLoggingEnabled ( ) ) ; assertFalse ( org.springframework.integration.support.management.AbstractMessageHandler . isLoggingEnabled ( ) ) ; assertFalse ( org.springframework.integration.support.management.AbstractMessageSource<> . isLoggingEnabled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.integration.support.management.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.integration.support.management.IntegrationManagementConfigurerTests.ConfigEmptyAnnotation .class ) ; AbstractMessageChannel org.springframework.integration.support.management.AbstractMessageChannel = org.springframework.integration.support.management.AnnotationConfigApplicationContext . getBean ( STRING , AbstractMessageChannel .class ) ; assertTrue ( org.springframework.integration.support.management.AbstractMessageChannel . isCountsEnabled ( ) ) ; assertTrue ( org.springframework.integration.support.management.AbstractMessageChannel . isStatsEnabled ( ) ) ; assertThat ( TestUtils . getPropertyValue ( org.springframework.integration.support.management.AbstractMessageChannel , STRING ) , instanceOf ( DefaultMessageChannelMetrics .class ) ) ; org.springframework.integration.support.management.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.support.management.MessageChannel org.springframework.integration.support.management.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
