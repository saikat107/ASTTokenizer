<METHOD_START> @ Before public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry = new ReactiveAdapterRegistry ( ) ; this . org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver = new ExpressionValueMethodArgumentResolver ( org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolverTests> ( ) , STRING , ( java.lang.Class<?> < ? > [] ) null ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; this . org.springframework.web.reactive.result.method.annotation.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( this . org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ; try { this . org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver . supportsParameter ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( STRING + java.lang.IllegalStateException . java.lang.String ( ) , java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; try { Mono < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> = this . org.springframework.web.reactive.result.method.annotation.ExpressionValueMethodArgumentResolver . resolveArgument ( this . org.springframework.web.reactive.result.method.annotation.MethodParameter , new BindingContext ( ) , this . org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> . block ( ) ; assertEquals ( NUMBER , java.lang.Object ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( @ Value ( STRING ) int int , java.lang.String java.lang.String , @ Value ( STRING ) Mono < java.lang.String > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.String> ) {	}  <METHOD_END>
