<METHOD_START> void ( java.net.HttpURLConnection java.net.HttpURLConnection , boolean boolean ) { this . java.net.HttpURLConnection = java.net.HttpURLConnection ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return HttpMethod . resolve ( this . java.net.HttpURLConnection . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { try { return this . java.net.HttpURLConnection . java.net.URL ( ) . java.net.URI ( ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalStateException ( STRING + java.net.URISyntaxException . java.lang.String ( ) , java.net.URISyntaxException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( HttpHeaders org.springframework.http.client.HttpHeaders , byte [] byte[] ) throws java.io.IOException { void ( this . java.net.HttpURLConnection , org.springframework.http.client.HttpHeaders ) ; if ( HttpMethod . DELETE == org.springframework.http.client.HttpMethod ( ) && byte[] . int == NUMBER ) { this . java.net.HttpURLConnection . void ( false ) ; } if ( this . java.net.HttpURLConnection . boolean ( ) && this . boolean ) { this . java.net.HttpURLConnection . void ( byte[] . int ) ; } this . java.net.HttpURLConnection . void ( ) ; if ( this . java.net.HttpURLConnection . boolean ( ) ) { FileCopyUtils . copy ( byte[] , this . java.net.HttpURLConnection . java.io.OutputStream ( ) ) ; } else { this . java.net.HttpURLConnection . int ( ) ; } return new SimpleClientHttpResponse ( this . java.net.HttpURLConnection ) ; }  <METHOD_END>
<METHOD_START> static void void ( java.net.HttpURLConnection java.net.HttpURLConnection , HttpHeaders org.springframework.http.client.HttpHeaders ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.http.client.HttpHeaders . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; if ( HttpHeaders . COOKIE . equalsIgnoreCase ( java.lang.String ) ) { java.lang.String java.lang.String = StringUtils . collectionToDelimitedString ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) , STRING ) ; java.net.HttpURLConnection . void ( java.lang.String , java.lang.String ) ; } else { for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { java.lang.String java.lang.String = java.lang.String != null ? java.lang.String : STRING ; java.net.HttpURLConnection . void ( java.lang.String , java.lang.String ) ; } } } }  <METHOD_END>
