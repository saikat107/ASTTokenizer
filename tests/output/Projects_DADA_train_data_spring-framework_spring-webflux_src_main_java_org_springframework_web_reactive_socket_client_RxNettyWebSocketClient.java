<METHOD_START> public void ( ) { this( org.springframework.web.reactive.socket.client.RxNettyWebSocketClient :: org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.function.Function<java.net.URI,org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf>> < java.net.URI , HttpClient < ByteBuf , ByteBuf > > java.util.function.Function<java.net.URI,org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf>> ) { this . java.util.function.Function<java.net.URI,org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf>> = java.util.function.Function<java.net.URI,org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf>> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> < ByteBuf , ByteBuf > org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> ( java.net.URI java.net.URI ) { boolean boolean = STRING . boolean ( java.net.URI . java.lang.String ( ) ) ; int int = ( java.net.URI . int ( ) > NUMBER ? java.net.URI . int ( ) : boolean ? NUMBER : NUMBER ) ; return HttpClient . newClient ( java.net.URI . java.lang.String ( ) , int ) ; }  <METHOD_END>
<METHOD_START> public java.util.function.Function<java.net.URI,org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf>> < java.net.URI , HttpClient < ByteBuf , ByteBuf > > java.util.function.Function<java.net.URI,org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf>> ( ) { return this . java.util.function.Function<java.net.URI,org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf>> ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> < ByteBuf , ByteBuf > org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> ( java.net.URI java.net.URI ) { return this . java.util.function.Function<java.net.URI,org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf>> . apply ( java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { return org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI , new HttpHeaders ( ) , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { Observable < java.lang.Void > org.springframework.web.reactive.socket.client.Observable<java.lang.Void> = org.springframework.web.reactive.socket.client.Observable<java.lang.Void> ( java.net.URI , org.springframework.web.reactive.socket.client.HttpHeaders , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; return Mono . from ( RxReactiveStreams . toPublisher ( org.springframework.web.reactive.socket.client.Observable<java.lang.Void> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.web.reactive.socket.client.Observable<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Observable<java.lang.Void> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { java.lang.String [] java.lang.String[] = beforeHandshake ( java.net.URI , org.springframework.web.reactive.socket.client.HttpHeaders , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; return org.springframework.web.reactive.socket.client.WebSocketRequest<org.springframework.web.reactive.socket.client.ByteBuf> ( java.net.URI , org.springframework.web.reactive.socket.client.HttpHeaders , java.lang.String[] ) . flatMap ( response -> { Observable < WebSocketConnection > conn = response . getWebSocketConnection ( ) ; return ( Observable < Tuple2 < WebSocketResponse < ByteBuf > , WebSocketConnection > > ) Observable . zip ( Observable . just ( response ) , conn , Tuples :: of ) ; } ) . flatMap ( tuple -> { WebSocketResponse < ByteBuf > response = tuple . getT1 ( ) ; WebSocketConnection conn = tuple . getT2 ( ) ; HandshakeInfo info = afterHandshake ( url , toHttpHeaders ( response ) ) ; ByteBufAllocator allocator = response . unsafeNettyChannel ( ) . alloc ( ) ; NettyDataBufferFactory factory = new NettyDataBufferFactory ( allocator ) ; RxNettyWebSocketSession session = new RxNettyWebSocketSession ( conn , info , factory ) ; session . aggregateFrames ( response . unsafeNettyChannel ( ) , WsClientDecoder . getName ( ) ) ; return RxReactiveStreams . toObservable ( handler . handle ( session ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.client.WebSocketRequest<org.springframework.web.reactive.socket.client.ByteBuf> < ByteBuf > org.springframework.web.reactive.socket.client.WebSocketRequest<org.springframework.web.reactive.socket.client.ByteBuf> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , java.lang.String [] java.lang.String[] ) { java.lang.String java.lang.String = java.net.URI . java.lang.String ( ) ; java.lang.String java.lang.String = java.net.URI . java.lang.String ( ) + ( java.lang.String != null ? STRING + java.lang.String : STRING ) ; HttpClientRequest < ByteBuf , ByteBuf > org.springframework.web.reactive.socket.client.HttpClientRequest<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> = org.springframework.web.reactive.socket.client.HttpClient<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> ( java.net.URI ) . createGet ( java.lang.String ) ; if ( ! org.springframework.web.reactive.socket.client.HttpHeaders . isEmpty ( ) ) { java.util.Map<java.lang.String,java.util.List<java.lang.Object>> < java.lang.String , java.util.List<java.lang.Object> < java.lang.Object > > java.util.Map<java.lang.String,java.util.List<java.lang.Object>> = new java.util.HashMap <> ( org.springframework.web.reactive.socket.client.HttpHeaders . size ( ) ) ; org.springframework.web.reactive.socket.client.HttpHeaders . forEach ( ( key , values ) -> map . put ( key , new ArrayList <> ( headers . get ( key ) ) ) ) ; org.springframework.web.reactive.socket.client.HttpClientRequest<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> = org.springframework.web.reactive.socket.client.HttpClientRequest<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> . setHeaders ( java.util.Map<java.lang.String,java.util.List<java.lang.Object>> ) ; } return ( ObjectUtils . isEmpty ( java.lang.String[] ) ? org.springframework.web.reactive.socket.client.HttpClientRequest<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> . requestWebSocketUpgrade ( ) : org.springframework.web.reactive.socket.client.HttpClientRequest<org.springframework.web.reactive.socket.client.ByteBuf,org.springframework.web.reactive.socket.client.ByteBuf> . requestWebSocketUpgrade ( ) . requestSubProtocols ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.client.HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders ( WebSocketResponse < ByteBuf > org.springframework.web.reactive.socket.client.WebSocketResponse<org.springframework.web.reactive.socket.client.ByteBuf> ) { HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.socket.client.WebSocketResponse<org.springframework.web.reactive.socket.client.ByteBuf> . headerIterator ( ) . forEachRemaining ( entry -> { String name = entry . getKey ( ) . toString ( ) ; headers . put ( name , response . getAllHeaderValues ( name ) ) ; } ) ; return org.springframework.web.reactive.socket.client.HttpHeaders ; }  <METHOD_END>
