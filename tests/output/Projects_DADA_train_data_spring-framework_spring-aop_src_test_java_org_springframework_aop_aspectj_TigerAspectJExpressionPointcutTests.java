<METHOD_START> @ Before public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method = TestBean .class . java.lang.reflect.Method ( STRING ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class . java.lang.reflect.Method[] ( ) ) { java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; java.lang.reflect.Method java.lang.reflect.Method = java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( STRING ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { @ java.lang.SuppressWarnings ( STRING ) class MyTemplate { public int int ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return NUMBER ; } } java.lang.String java.lang.String = STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( MyTemplate .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.Object [] .class ) , MyTemplate .class ) ) ; java.lang.reflect.Method java.lang.reflect.Method = java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( STRING ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasGeneric .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; org.springframework.aop.aspectj.AspectJExpressionPointcut ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; org.springframework.aop.aspectj.AspectJExpressionPointcut ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = org.springframework.aop.aspectj.AspectJExpressionPointcut ( java.lang.String ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( TestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , TestBean .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.SpringAnnotated .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.SpringAnnotated .class ) ) ; java.lang.String = STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = org.springframework.aop.aspectj.AspectJExpressionPointcut ( java.lang.String ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.SpringAnnotated .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.SpringAnnotated .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; org.springframework.aop.aspectj.AspectJExpressionPointcut ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.aspectj.AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut ( java.lang.String java.lang.String ) throws java.lang.SecurityException , java.lang.NoSuchMethodException { AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanB .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanB .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; return org.springframework.aop.aspectj.AspectJExpressionPointcut ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class . java.lang.reflect.Method ( STRING , TestBean .class , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.SpringAnnotated .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class . java.lang.reflect.Method ( STRING , TestBean .class , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class . java.lang.reflect.Method ( STRING , TestBean .class , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class , new TestBean ( ) , new org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.HasTransactionalAnnotation .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class . java.lang.reflect.Method ( STRING , TestBean .class , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.SpringAnnotated .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class . java.lang.reflect.Method ( STRING , TestBean .class , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA .class ) , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.ProcessesSpringAnnotatedParameters .class ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.aop.aspectj.TestBean> < TestBean > java.util.List<org.springframework.aop.aspectj.TestBean> ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.aop.aspectj.TestBean> < TestBean > java.util.List<org.springframework.aop.aspectj.TestBean> ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.util.List<?> < ? > java.util.List<?> ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> public void void ( TestBean org.springframework.aop.aspectj.TestBean , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.SpringAnnotated org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.SpringAnnotated ) {		}  <METHOD_END>
<METHOD_START> public void void ( TestBean org.springframework.aop.aspectj.TestBean , org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA org.springframework.aop.aspectj.TigerAspectJExpressionPointcutTests.BeanA ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Tx public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
