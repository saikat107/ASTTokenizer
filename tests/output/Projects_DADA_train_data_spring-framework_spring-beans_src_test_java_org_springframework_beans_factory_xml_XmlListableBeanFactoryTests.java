<METHOD_START> @ Before public void void ( ) { org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; java.util.Map java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.xml.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.xml.RootBeanDefinition . setPropertyValues ( new MutablePropertyValues ( java.util.Map ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.xml.RootBeanDefinition ) ; java.util.Map = new java.util.HashMap ( ) ; java.util.Map . java.lang.Object ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.xml.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.xml.RootBeanDefinition . setPropertyValues ( new MutablePropertyValues ( java.util.Map ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.xml.RootBeanDefinition ) ; this . org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.xml.XmlListableBeanFactoryTests> ( ) ) ) ; this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . addBeanPostProcessor ( new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.xml.BeansException { if ( java.lang.Object instanceof TestBean ) { ( ( TestBean ) java.lang.Object ) . setPostProcessed ( true ) ; } if ( java.lang.Object instanceof DummyFactory ) { ( ( DummyFactory ) java.lang.Object ) . setPostProcessed ( true ) ; } return java.lang.Object ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.xml.BeansException { return java.lang.Object ; } } ) ; this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . addBeanPostProcessor ( new LifecycleBean . LifecycleBean ( ) ) ; this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . addBeanPostProcessor ( new ProtectedLifecycleBean . ProtectedLifecycleBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.xml.BeansException { if ( java.lang.Object instanceof TestBean ) { ( ( TestBean ) java.lang.Object ) . setPostProcessed ( true ) ; } if ( java.lang.Object instanceof DummyFactory ) { ( ( DummyFactory ) java.lang.Object ) . setPostProcessed ( true ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.xml.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.beans.factory.xml.BeanFactory org.springframework.beans.factory.xml.BeanFactory ( ) { return org.springframework.beans.factory.xml.DefaultListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Override public void void ( ) { assertCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTestBeanCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LifecycleBean org.springframework.beans.factory.xml.LifecycleBean = ( LifecycleBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; org.springframework.beans.factory.xml.LifecycleBean . businessMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProtectedLifecycleBean org.springframework.beans.factory.xml.ProtectedLifecycleBean = ( ProtectedLifecycleBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; org.springframework.beans.factory.xml.ProtectedLifecycleBean . businessMethod ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List java.util.List = java.util.Arrays . java.util.List ( getListableBeanFactory ( ) . getBeanDefinitionNames ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; java.util.List java.util.List = java.util.Arrays . java.util.List ( org.springframework.beans.factory.xml.BeanFactory ( ) . getAliases ( STRING ) ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertFalse ( java.util.List . boolean ( STRING ) ) ; assertFalse ( java.util.List . boolean ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; java.util.List java.util.List = java.util.Arrays . java.util.List ( org.springframework.beans.factory.xml.BeanFactory ( ) . getAliases ( STRING ) ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertFalse ( java.util.List . boolean ( STRING ) ) ; assertFalse ( java.util.List . boolean ( STRING ) ) ; assertFalse ( java.util.List . boolean ( STRING ) ) ; assertFalse ( java.util.List . boolean ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; java.util.List java.util.List = java.util.Arrays . java.util.List ( org.springframework.beans.factory.xml.BeanFactory ( ) . getAliases ( STRING ) ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertTrue ( java.util.List . boolean ( STRING ) ) ; assertFalse ( java.util.List . boolean ( STRING ) ) ; assertFalse ( java.util.List . boolean ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( TestBean .class . java.lang.String ( ) + STRING ) ; assertEquals ( null , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; java.util.Map java.util.Map = getListableBeanFactory ( ) . getBeansOfType ( DummyReferencer .class , false , false ) ; assertEquals ( NUMBER , java.util.Map . int ( ) ) ; assertTrue ( java.util.Map . boolean ( DummyReferencer .class . java.lang.String ( ) + STRING ) ) ; assertTrue ( java.util.Map . boolean ( DummyReferencer .class . java.lang.String ( ) + STRING ) ) ; assertTrue ( java.util.Map . boolean ( DummyReferencer .class . java.lang.String ( ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.beans.factory.xml.ITestBean = ( ITestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean != null ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.beans.factory.xml.TestBean . getName ( ) ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) == org.springframework.beans.factory.xml.ITestBean ) ; org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.beans.factory.xml.TestBean . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DummyFactory org.springframework.beans.factory.xml.DummyFactory = ( DummyFactory ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; DummyReferencer org.springframework.beans.factory.xml.DummyReferencer = ( DummyReferencer ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.DummyReferencer . getTestBean1 ( ) == org.springframework.beans.factory.xml.DummyReferencer . getTestBean2 ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.DummyReferencer . getDummyFactory ( ) == org.springframework.beans.factory.xml.DummyFactory ) ; DummyReferencer org.springframework.beans.factory.xml.DummyReferencer = ( DummyReferencer ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.DummyReferencer . getTestBean1 ( ) == org.springframework.beans.factory.xml.DummyReferencer . getTestBean2 ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.DummyReferencer . getDummyFactory ( ) == org.springframework.beans.factory.xml.DummyFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DummyReferencer org.springframework.beans.factory.xml.DummyReferencer = ( DummyReferencer ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DummyReferencer . getTestBean1 ( ) != org.springframework.beans.factory.xml.DummyReferencer . getTestBean2 ( ) ) ; DummyReferencer org.springframework.beans.factory.xml.DummyReferencer = ( DummyReferencer ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DummyReferencer != org.springframework.beans.factory.xml.DummyReferencer ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DummyReferencer . getTestBean1 ( ) != org.springframework.beans.factory.xml.DummyReferencer . getTestBean2 ( ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DummyReferencer . getTestBean1 ( ) != org.springframework.beans.factory.xml.DummyReferencer . getTestBean1 ( ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DummyReferencer . getTestBean2 ( ) != org.springframework.beans.factory.xml.DummyReferencer . getTestBean2 ( ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.DummyReferencer . getTestBean1 ( ) != org.springframework.beans.factory.xml.DummyReferencer . getTestBean2 ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; DummyFactory org.springframework.beans.factory.xml.DummyFactory = ( DummyFactory ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . isPostProcessed ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . isPostProcessed ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.DummyFactory . isPostProcessed ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.beans.factory.xml.TestBean . getTouchy ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.beans.factory.xml.TestBean . getTouchy ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.BeanFactory ( ) . getBean ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; }  <METHOD_END>
