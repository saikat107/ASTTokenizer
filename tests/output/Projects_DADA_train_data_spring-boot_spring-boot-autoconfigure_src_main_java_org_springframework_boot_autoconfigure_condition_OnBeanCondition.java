<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConfigurationPhase org.springframework.boot.autoconfigure.condition.ConfigurationPhase ( ) { return ConfigurationPhase . REGISTER_BEAN ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { ConditionMessage org.springframework.boot.autoconfigure.condition.ConditionMessage = ConditionMessage . empty ( ) ; if ( org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . isAnnotated ( ConditionalOnBean .class . java.lang.String ( ) ) ) { org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec = new org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , ConditionalOnBean .class ) ; org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult = org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) ; if ( ! org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . boolean ( ) ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ) ; return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( ConditionalOnBean .class , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) . because ( java.lang.String ) ) ; } org.springframework.boot.autoconfigure.condition.ConditionMessage = org.springframework.boot.autoconfigure.condition.ConditionMessage . andCondition ( ConditionalOnBean .class , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) . found ( STRING , STRING ) . items ( Style . QUOTE , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.Set<java.lang.String> ( ) ) ; } if ( org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . isAnnotated ( ConditionalOnSingleCandidate .class . java.lang.String ( ) ) ) { org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec = new org.springframework.boot.autoconfigure.condition.OnBeanCondition.SingleCandidateBeanSearchSpec ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , ConditionalOnSingleCandidate .class ) ; org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult = org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) ; if ( ! org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . boolean ( ) ) { return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( ConditionalOnSingleCandidate .class , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) . didNotFind ( STRING ) . atAll ( ) ) ; } else if ( ! boolean ( org.springframework.boot.autoconfigure.condition.ConditionContext . getBeanFactory ( ) , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.Set<java.lang.String> ( ) , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec . org.springframework.boot.autoconfigure.condition.SearchStrategy ( ) == SearchStrategy . ALL ) ) { return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( ConditionalOnSingleCandidate .class , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) . didNotFind ( STRING ) . items ( Style . QUOTE , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.Set<java.lang.String> ( ) ) ) ; } org.springframework.boot.autoconfigure.condition.ConditionMessage = org.springframework.boot.autoconfigure.condition.ConditionMessage . andCondition ( ConditionalOnSingleCandidate .class , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) . found ( STRING ) . items ( Style . QUOTE , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.Set<java.lang.String> ) ; } if ( org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . isAnnotated ( ConditionalOnMissingBean .class . java.lang.String ( ) ) ) { org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec = new org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , ConditionalOnMissingBean .class ) ; org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult = org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) ; if ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . boolean ( ) ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ) ; return ConditionOutcome . noMatch ( ConditionMessage . forCondition ( ConditionalOnMissingBean .class , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) . because ( java.lang.String ) ) ; } org.springframework.boot.autoconfigure.condition.ConditionMessage = org.springframework.boot.autoconfigure.condition.ConditionMessage . andCondition ( ConditionalOnMissingBean .class , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) . didNotFind ( STRING ) . atAll ( ) ; } return ConditionOutcome . match ( org.springframework.boot.autoconfigure.condition.ConditionMessage ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; void ( java.lang.StringBuilder , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.List<java.lang.String> , STRING ) ; void ( java.lang.StringBuilder , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.List<java.lang.String> , STRING ) ; void ( java.lang.StringBuilder , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.List<java.lang.String> , STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.StringBuilder java.lang.StringBuilder , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , java.lang.String java.lang.String ) { if ( ! java.util.Collection<java.lang.String> . boolean ( ) ) { if ( java.lang.StringBuilder . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . collectionToDelimitedString ( java.util.Collection<java.lang.String> , STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; void ( java.lang.StringBuilder , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> , STRING ) ; void ( java.lang.StringBuilder , org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> , STRING ) ; if ( ! org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.List<java.lang.String> . boolean ( ) ) { if ( java.lang.StringBuilder . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . collectionToDelimitedString ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . java.util.List<java.lang.String> , STRING ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.StringBuilder java.lang.StringBuilder , java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> < java.lang.String , java.util.Collection<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> , java.lang.String java.lang.String ) { if ( ! java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> . boolean ( ) ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.Collection<java.lang.String>> < java.lang.String , java.util.Collection<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.Collection<java.lang.String>> : java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.Collection<java.lang.String>>> ( ) ) { if ( java.lang.StringBuilder . int ( ) > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Map.Entry<java.lang.String,java.util.Collection<java.lang.String>> . java.lang.String ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . collectionToDelimitedString ( java.util.Map.Entry<java.lang.String,java.util.Collection<java.lang.String>> . java.util.Collection<java.lang.String> ( ) , STRING ) ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec ) { ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory = org.springframework.boot.autoconfigure.condition.ConditionContext . getBeanFactory ( ) ; if ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec . org.springframework.boot.autoconfigure.condition.SearchStrategy ( ) == SearchStrategy . ANCESTORS ) { BeanFactory org.springframework.boot.autoconfigure.condition.BeanFactory = org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory . getParentBeanFactory ( ) ; Assert . isInstanceOf ( ConfigurableListableBeanFactory .class , org.springframework.boot.autoconfigure.condition.BeanFactory , STRING ) ; org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.boot.autoconfigure.condition.BeanFactory ; } org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult = new org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ( ) ; boolean boolean = org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec . org.springframework.boot.autoconfigure.condition.SearchStrategy ( ) != SearchStrategy . CURRENT ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec . java.util.List<java.lang.String> ( ) , org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , org.springframework.boot.autoconfigure.condition.ConditionContext , boolean ) ; for ( java.lang.String java.lang.String : org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec . java.util.List<java.lang.String> ( ) ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = java.util.Collection<java.lang.String> ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.lang.String , org.springframework.boot.autoconfigure.condition.ConditionContext . getClassLoader ( ) , boolean ) ; java.util.Collection<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; if ( java.util.Collection<java.lang.String> . boolean ( ) ) { org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . void ( java.lang.String ) ; } else { org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . void ( java.lang.String , java.util.Collection<java.lang.String> ) ; } } for ( java.lang.String java.lang.String : org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec . java.util.List<java.lang.String> ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( java.lang.String[] ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.lang.String , org.springframework.boot.autoconfigure.condition.ConditionContext . getClassLoader ( ) , boolean ) ) ; java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; if ( java.util.List<java.lang.String> . boolean ( ) ) { org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . void ( java.lang.String ) ; } else { org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . void ( java.lang.String , java.util.List<java.lang.String> ) ; } } for ( java.lang.String java.lang.String : org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanSearchSpec . java.util.List<java.lang.String> ( ) ) { if ( ! java.util.List<java.lang.String> . boolean ( java.lang.String ) && boolean ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.lang.String , boolean ) ) { org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . void ( java.lang.String ) ; } else { org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult . void ( java.lang.String ) ; } } return org.springframework.boot.autoconfigure.condition.OnBeanCondition.MatchResult ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , ListableBeanFactory org.springframework.boot.autoconfigure.condition.ListableBeanFactory , ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , boolean boolean ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.util.List<java.lang.String> . boolean ( java.util.Collection<java.lang.String> ( org.springframework.boot.autoconfigure.condition.ListableBeanFactory , java.lang.String , org.springframework.boot.autoconfigure.condition.ConditionContext . getClassLoader ( ) , boolean ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.lang.String java.lang.String , boolean boolean ) { if ( boolean ) { return org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ; } return org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory . containsLocalBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ListableBeanFactory org.springframework.boot.autoconfigure.condition.ListableBeanFactory , java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader , boolean boolean )					throws java.lang.LinkageError { try { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; void ( java.util.Set<java.lang.String> , org.springframework.boot.autoconfigure.condition.ListableBeanFactory , ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) , boolean ) ; return java.util.Set<java.lang.String> ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; } catch ( java.lang.NoClassDefFoundError java.lang.NoClassDefFoundError ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , ListableBeanFactory org.springframework.boot.autoconfigure.condition.ListableBeanFactory , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { java.util.Set<java.lang.String> . boolean ( BeanTypeRegistry . get ( org.springframework.boot.autoconfigure.condition.ListableBeanFactory ) . getNamesForType ( java.lang.Class<> ) ) ; if ( boolean && org.springframework.boot.autoconfigure.condition.ListableBeanFactory instanceof HierarchicalBeanFactory ) { BeanFactory org.springframework.boot.autoconfigure.condition.BeanFactory = ( ( HierarchicalBeanFactory ) org.springframework.boot.autoconfigure.condition.ListableBeanFactory ) . getParentBeanFactory ( ) ; if ( org.springframework.boot.autoconfigure.condition.BeanFactory instanceof ListableBeanFactory ) { void ( java.util.Set<java.lang.String> , ( ListableBeanFactory ) org.springframework.boot.autoconfigure.condition.BeanFactory , java.lang.Class<> , boolean ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader , boolean boolean ) throws java.lang.LinkageError { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; try { @ java.lang.SuppressWarnings ( STRING ) java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; void ( java.util.Set<java.lang.String> , org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.lang.Class<> , boolean ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } return StringUtils . toStringArray ( java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , ListableBeanFactory org.springframework.boot.autoconfigure.condition.ListableBeanFactory , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , boolean boolean ) { java.util.Set<java.lang.String> . boolean ( BeanTypeRegistry . get ( org.springframework.boot.autoconfigure.condition.ListableBeanFactory ) . getNamesForAnnotation ( java.lang.Class<> ) ) ; if ( boolean ) { BeanFactory org.springframework.boot.autoconfigure.condition.BeanFactory = ( ( HierarchicalBeanFactory ) org.springframework.boot.autoconfigure.condition.ListableBeanFactory ) . getParentBeanFactory ( ) ; if ( org.springframework.boot.autoconfigure.condition.BeanFactory instanceof ListableBeanFactory ) { void ( java.util.Set<java.lang.String> , ( ListableBeanFactory ) org.springframework.boot.autoconfigure.condition.BeanFactory , java.lang.Class<> , boolean ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , boolean boolean ) { return ( java.util.Set<java.lang.String> . int ( ) == NUMBER || java.util.List<java.lang.String> ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.util.Set<java.lang.String> , boolean ) . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , boolean boolean ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { BeanDefinition org.springframework.boot.autoconfigure.condition.BeanDefinition = org.springframework.boot.autoconfigure.condition.BeanDefinition ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.lang.String , boolean ) ; if ( org.springframework.boot.autoconfigure.condition.BeanDefinition != null && org.springframework.boot.autoconfigure.condition.BeanDefinition . isPrimary ( ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.BeanDefinition org.springframework.boot.autoconfigure.condition.BeanDefinition ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory , java.lang.String java.lang.String , boolean boolean ) { if ( org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory . containsBeanDefinition ( java.lang.String ) ) { return org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; } if ( boolean && org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory . getParentBeanFactory ( ) instanceof ConfigurableListableBeanFactory ) { return org.springframework.boot.autoconfigure.condition.BeanDefinition ( ( ( ConfigurableListableBeanFactory ) org.springframework.boot.autoconfigure.condition.ConfigurableListableBeanFactory . getParentBeanFactory ( ) ) , java.lang.String , boolean ) ; } return null ; }  <METHOD_END>
<METHOD_START> void ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; MultiValueMap < java.lang.String , java.lang.Object > org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> = org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . getAllAnnotationAttributes ( java.lang.Class<> . java.lang.String ( ) , true ) ; void ( org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , STRING , this . java.util.List<java.lang.String> ) ; void ( org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , STRING , this . java.util.List<java.lang.String> ) ; void ( org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , STRING , this . java.util.List<java.lang.String> ) ; void ( org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , STRING , this . java.util.List<java.lang.String> ) ; void ( org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , STRING , this . java.util.List<java.lang.String> ) ; void ( org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , STRING , this . java.util.List<java.lang.String> ) ; this . org.springframework.boot.autoconfigure.condition.SearchStrategy = ( SearchStrategy ) org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . getAnnotationAttributes ( java.lang.Class<> . java.lang.String ( ) ) . get ( STRING ) ; org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException = null ; try { if ( this . java.util.List<java.lang.String> . boolean ( ) && this . java.util.List<java.lang.String> . boolean ( ) ) { void ( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , this . java.util.List<java.lang.String> ) ; } } catch ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException ) { org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException = org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException ; } void ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException ) { if ( ! boolean ( this . java.util.List<java.lang.String> , this . java.util.List<java.lang.String> , this . java.util.List<java.lang.String> ) ) { java.lang.String java.lang.String = java.lang.String ( ) + STRING ; if ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException == null ) { throw new java.lang.IllegalStateException ( java.lang.String ) ; } throw new java.lang.IllegalStateException ( java.lang.String + STRING + STRING , org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.List<?> < ? > ... java.util.List<?>[] ) { for ( java.util.List<?> < ? > java.util.List<?> : java.util.List<?>[] ) { if ( ! java.util.List<> . boolean ( ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return STRING + ClassUtils . getShortName ( this . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( MultiValueMap < java.lang.String , java.lang.Object > org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.util.List<?> < ? > java.util.List<?> = org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> . get ( java.lang.String ) ; if ( java.util.List<> != null ) { for ( java.lang.Object java.lang.Object : java.util.List<> ) { if ( java.lang.Object instanceof java.lang.String [] ) { java.util.Collections . boolean ( java.util.List<java.lang.String> , ( java.lang.String [] ) java.lang.Object ) ; } else { java.util.List<java.lang.String> . boolean ( ( java.lang.String ) java.lang.Object ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { if ( org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata instanceof MethodMetadata && org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata . isAnnotated ( Bean .class . java.lang.String ( ) ) ) { void ( org.springframework.boot.autoconfigure.condition.ConditionContext , ( MethodMetadata ) org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , java.util.List<java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , MethodMetadata org.springframework.boot.autoconfigure.condition.MethodMetadata , final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( org.springframework.boot.autoconfigure.condition.MethodMetadata . getReturnTypeName ( ) , org.springframework.boot.autoconfigure.condition.ConditionContext . getClassLoader ( ) ) ; java.util.List<java.lang.String> . boolean ( java.lang.Class<> . java.lang.String ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException ( org.springframework.boot.autoconfigure.condition.MethodMetadata . getDeclaringClassName ( ) , org.springframework.boot.autoconfigure.condition.MethodMetadata . getMethodName ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.condition.SearchStrategy org.springframework.boot.autoconfigure.condition.SearchStrategy ( ) { return ( this . org.springframework.boot.autoconfigure.condition.SearchStrategy != null ? this . org.springframework.boot.autoconfigure.condition.SearchStrategy : SearchStrategy . ALL ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( ! this . java.util.List<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . collectionToCommaDelimitedString ( this . java.util.List<java.lang.String> ) ) ; if ( ! this . java.util.List<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } if ( ! this . java.util.List<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . collectionToCommaDelimitedString ( this . java.util.List<java.lang.String> ) ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . org.springframework.boot.autoconfigure.condition.SearchStrategy . toString ( ) . toLowerCase ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( org.springframework.boot.autoconfigure.condition.ConditionContext , org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata , java.lang.Class<> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MultiValueMap < java.lang.String , java.lang.Object > org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { super. void ( org.springframework.boot.autoconfigure.condition.MultiValueMap<java.lang.String,java.lang.Object> , java.lang.String , java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , java.lang.Object .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException org.springframework.boot.autoconfigure.condition.OnBeanCondition.BeanTypeDeductionException ) { Assert . isTrue ( java.util.List<java.lang.String> ( ) . int ( ) == NUMBER , java.lang.String ( ) + STRING + STRING + java.util.List<java.lang.String> ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { super( STRING + java.lang.String + STRING + java.lang.String , java.lang.Throwable ); }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { this . java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> . java.util.Collection<java.lang.String> ( java.lang.String , java.util.Collection<java.lang.String> ) ; this . java.util.Set<java.lang.String> . boolean ( java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { this . java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> . java.util.Collection<java.lang.String> ( java.lang.String , java.util.Collection<java.lang.String> ) ; this . java.util.Set<java.lang.String> . boolean ( java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . java.util.List<java.lang.String> . boolean ( ) && this . java.util.List<java.lang.String> . boolean ( ) && this . java.util.List<java.lang.String> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ( ! this . java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> . boolean ( ) ) || ( ! this . java.util.List<java.lang.String> . boolean ( ) ) || ( ! this . java.util.Map<java.lang.String,java.util.Collection<java.lang.String>> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
