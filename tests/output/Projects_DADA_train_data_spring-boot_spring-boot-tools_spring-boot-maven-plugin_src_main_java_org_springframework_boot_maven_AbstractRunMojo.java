<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.maven.MojoExecutionException , org.springframework.boot.maven.MojoFailureException { if ( this . boolean ) { getLog ( ) . debug ( STRING ) ; return; } void ( java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return ( java.lang.Boolean . java.lang.Boolean . boolean ( this . java.lang.Boolean ) || ( this . java.lang.Boolean == null && boolean ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return boolean ( ) || boolean ( ) || boolean ( ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ( this . java.io.File[] != null && this . java.io.File[] . int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ( this . java.lang.String != null && this . java.lang.String . int ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . java.io.File != null ; }  <METHOD_END>
<METHOD_START> private void void ( ) { try { if ( this . java.io.File[] == null || this . java.io.File[] . int == NUMBER ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class . java.lang.Class<?> ( java.lang.String ) ; if ( java.lang.Class<> != null ) { if ( this . java.lang.Boolean == null ) { this . java.lang.Boolean = true ; } java.security.CodeSource java.security.CodeSource = java.lang.Class<> . java.security.ProtectionDomain ( ) . java.security.CodeSource ( ) ; if ( java.security.CodeSource != null ) { this . java.io.File[] = new java.io.File [] { new java.io.File ( java.security.CodeSource . java.net.URL ( ) . java.lang.String ( ) ) } ; } } } } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } if ( this . java.lang.Boolean == null ) { this . java.lang.Boolean = false ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String )			throws org.springframework.boot.maven.MojoExecutionException , org.springframework.boot.maven.MojoFailureException { void ( ) ; boolean boolean = boolean ( ) ; this . org.springframework.boot.maven.MavenProject . getProperties ( ) . setProperty ( STRING , java.lang.Boolean . java.lang.String ( boolean ) ) ; if ( boolean ) { void ( java.lang.String ) ; } else { void ( ) ; void ( java.lang.String , org.springframework.boot.maven.RunArguments ( ) . asArray ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( boolean ( ) ) { getLog ( ) . warn ( STRING ) ; } if ( boolean ( ) ) { getLog ( ) . warn ( STRING + this . java.lang.String + STRING ) ; } if ( boolean ( ) ) { getLog ( ) . warn ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String )			throws org.springframework.boot.maven.MojoExecutionException , org.springframework.boot.maven.MojoFailureException { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; void ( java.util.List<java.lang.String> ) ; void ( java.util.List<java.lang.String> ) ; void ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; void ( java.util.List<java.lang.String> ) ; void ( this . java.io.File , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.io.File java.io.File , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> )			throws org.springframework.boot.maven.MojoExecutionException , org.springframework.boot.maven.MojoFailureException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] )			throws org.springframework.boot.maven.MojoExecutionException , org.springframework.boot.maven.MojoFailureException ;  <METHOD_END>
<METHOD_START> protected org.springframework.boot.maven.RunArguments org.springframework.boot.maven.RunArguments ( ) { RunArguments org.springframework.boot.maven.RunArguments = new RunArguments ( this . java.lang.String[] ) ; void ( org.springframework.boot.maven.RunArguments ) ; return org.springframework.boot.maven.RunArguments ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { RunArguments org.springframework.boot.maven.RunArguments = org.springframework.boot.maven.RunArguments ( ) ; java.util.Collections . boolean ( java.util.List<java.lang.String> , org.springframework.boot.maven.RunArguments . asArray ( ) ) ; void ( STRING , this . java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.maven.RunArguments org.springframework.boot.maven.RunArguments ( ) { return new RunArguments ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { RunArguments org.springframework.boot.maven.RunArguments = org.springframework.boot.maven.RunArguments ( ) ; java.util.Collections . boolean ( java.util.List<java.lang.String> , org.springframework.boot.maven.RunArguments . asArray ( ) ) ; void ( STRING , org.springframework.boot.maven.RunArguments . asArray ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { if ( this . java.io.File[] != null ) { getLog ( ) . info ( STRING + java.util.Arrays . java.util.List<java.io.File> ( this . java.io.File[] ) ) ; for ( java.io.File java.io.File : this . java.io.File[] ) { java.util.List<java.lang.String> . boolean ( STRING + java.io.File ) ; } } if ( this . java.lang.Boolean ) { java.util.List<java.lang.String> . boolean ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( RunArguments org.springframework.boot.maven.RunArguments ) { if ( this . java.lang.String[] . int > NUMBER ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; for ( int int = NUMBER ; int < this . java.lang.String[] . int ; int ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.String[] [ int ] ) ; if ( int < this . java.lang.String[] . int - NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } org.springframework.boot.maven.RunArguments . getArgs ( ) . addFirst ( java.lang.StringBuilder . java.lang.String ( ) ) ; void ( STRING , this . java.lang.String[] ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) throws org.springframework.boot.maven.MojoExecutionException { try { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.net.URL java.net.URL : java.net.URL[] ( ) ) { java.lang.StringBuilder = java.lang.StringBuilder . java.lang.StringBuilder ( ( java.lang.StringBuilder . int ( ) > NUMBER ? java.io.File . java.lang.String : STRING ) + new java.io.File ( java.net.URL . java.net.URI ( ) ) ) ; } getLog ( ) . debug ( STRING + java.lang.StringBuilder ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( java.lang.StringBuilder . java.lang.String ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MojoExecutionException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) org.springframework.boot.maven.MojoExecutionException { java.lang.String java.lang.String = this . java.lang.String ; if ( java.lang.String == null ) { try { java.lang.String = MainClassFinder . findSingleMainClass ( this . java.io.File , java.lang.String ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MojoExecutionException ( java.io.IOException . java.lang.String ( ) , java.io.IOException ) ; } } if ( java.lang.String == null ) { throw new MojoExecutionException ( STRING + STRING ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.net.URL [] java.net.URL[] ( ) org.springframework.boot.maven.MojoExecutionException { try { java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = new java.util.ArrayList<java.net.URL> <> ( ) ; void ( java.util.List<java.net.URL> ) ; void ( java.util.List<java.net.URL> ) ; void ( java.util.List<java.net.URL> ) ; void ( java.util.List<java.net.URL> ) ; return java.util.List<java.net.URL> . java.net.URL[] ( new java.net.URL [ java.util.List<java.net.URL> . int ( ) ] ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new MojoExecutionException ( STRING , java.net.MalformedURLException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MojoExecutionException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ) throws java.net.MalformedURLException { if ( this . java.lang.String[] != null ) { for ( java.lang.String java.lang.String : this . java.lang.String[] ) { java.util.List<java.net.URL> . boolean ( new java.io.File ( java.lang.String ) . java.net.URI ( ) . java.net.URL ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ) throws java.io.IOException { if ( this . boolean ) { for ( Resource org.springframework.boot.maven.Resource : this . org.springframework.boot.maven.MavenProject . getResources ( ) ) { java.io.File java.io.File = new java.io.File ( org.springframework.boot.maven.Resource . getDirectory ( ) ) ; java.util.List<java.net.URL> . boolean ( java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ; FileUtils . removeDuplicatesFromOutputDirectory ( this . java.io.File , java.io.File ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ) throws java.net.MalformedURLException { java.util.List<java.net.URL> . boolean ( this . java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> )			throws java.net.MalformedURLException , org.springframework.boot.maven.MojoExecutionException { FilterArtifacts org.springframework.boot.maven.FilterArtifacts = this . java.lang.Boolean ? getFilters ( ) : getFilters ( new org.springframework.boot.maven.AbstractRunMojo.TestArtifactFilter ( ) ) ; java.util.Set<org.springframework.boot.maven.Artifact> < Artifact > java.util.Set<org.springframework.boot.maven.Artifact> = filterDependencies ( this . org.springframework.boot.maven.MavenProject . getArtifacts ( ) , org.springframework.boot.maven.FilterArtifacts ) ; for ( Artifact org.springframework.boot.maven.Artifact : java.util.Set<org.springframework.boot.maven.Artifact> ) { if ( org.springframework.boot.maven.Artifact . getFile ( ) != null ) { java.util.List<java.net.URL> . boolean ( org.springframework.boot.maven.Artifact . getFile ( ) . toURI ( ) . toURL ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String [] java.lang.String[] ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; } getLog ( ) . debug ( java.lang.StringBuilder . java.lang.String ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING , Artifact . SCOPE_TEST ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( Artifact org.springframework.boot.maven.Artifact ) { return org.springframework.boot.maven.Artifact . getScope ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread , java.lang.Throwable java.lang.Throwable ) { if ( ! ( java.lang.Throwable instanceof java.lang.ThreadDeath ) ) { synchronized ( this . java.lang.Object ) { this . java.lang.Throwable = ( this . java.lang.Throwable == null ? java.lang.Throwable : this . java.lang.Throwable ) ; } getLog ( ) . warn ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.boot.maven.MojoExecutionException { synchronized ( this . java.lang.Object ) { if ( this . java.lang.Throwable != null ) { throw new MojoExecutionException ( STRING + this . java.lang.Throwable . java.lang.String ( ) , this . java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { this . java.lang.String = java.lang.String ; this . java.lang.String[] = ( java.lang.String[] != null ? java.lang.String[] : new java.lang.String [] {} ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.lang.Thread java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.ClassLoader ( ) ; try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.ClassLoader . java.lang.Class<?> ( this . java.lang.String ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ; if ( ! java.lang.reflect.Method . boolean ( ) ) { java.lang.reflect.Method . void ( true ) ; } java.lang.reflect.Method . java.lang.Object ( null , new java.lang.Object [] { this . java.lang.String[] } ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { java.lang.Exception java.lang.Exception = new java.lang.Exception ( STRING + STRING , java.lang.NoSuchMethodException ) ; java.lang.Thread . java.lang.ThreadGroup ( ) . void ( java.lang.Thread , java.lang.Exception ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Thread . java.lang.ThreadGroup ( ) . void ( java.lang.Thread , java.lang.Exception ) ; } }  <METHOD_END>
