<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger = new org.springframework.boot.liquibase.CommonsLoggingLiquibaseLoggerTests.MockCommonsLoggingLiquibaseLogger ( ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . DEBUG ) ; given ( this . org.springframework.boot.liquibase.Log . isDebugEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . debug ( STRING ) ; verify ( this . org.springframework.boot.liquibase.Log ) . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . DEBUG ) ; given ( this . org.springframework.boot.liquibase.Log . isDebugEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . debug ( STRING , this . java.lang.Throwable ) ; verify ( this . org.springframework.boot.liquibase.Log ) . debug ( STRING , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . DEBUG ) ; given ( this . org.springframework.boot.liquibase.Log . isDebugEnabled ( ) ) . willReturn ( false ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . debug ( STRING ) ; verify ( this . org.springframework.boot.liquibase.Log , never ( ) ) . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . INFO ) ; given ( this . org.springframework.boot.liquibase.Log . isInfoEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . info ( STRING ) ; verify ( this . org.springframework.boot.liquibase.Log ) . info ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . INFO ) ; given ( this . org.springframework.boot.liquibase.Log . isInfoEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . info ( STRING , this . java.lang.Throwable ) ; verify ( this . org.springframework.boot.liquibase.Log ) . info ( STRING , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . INFO ) ; given ( this . org.springframework.boot.liquibase.Log . isInfoEnabled ( ) ) . willReturn ( false ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . info ( STRING ) ; verify ( this . org.springframework.boot.liquibase.Log , never ( ) ) . info ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . WARNING ) ; given ( this . org.springframework.boot.liquibase.Log . isWarnEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . warning ( STRING ) ; verify ( this . org.springframework.boot.liquibase.Log ) . warn ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . WARNING ) ; given ( this . org.springframework.boot.liquibase.Log . isWarnEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . warning ( STRING , this . java.lang.Throwable ) ; verify ( this . org.springframework.boot.liquibase.Log ) . warn ( STRING , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . WARNING ) ; given ( this . org.springframework.boot.liquibase.Log . isWarnEnabled ( ) ) . willReturn ( false ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . warning ( STRING ) ; verify ( this . org.springframework.boot.liquibase.Log , never ( ) ) . warn ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . SEVERE ) ; given ( this . org.springframework.boot.liquibase.Log . isErrorEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . severe ( STRING ) ; verify ( this . org.springframework.boot.liquibase.Log ) . error ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . SEVERE ) ; given ( this . org.springframework.boot.liquibase.Log . isErrorEnabled ( ) ) . willReturn ( true ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . severe ( STRING , this . java.lang.Throwable ) ; verify ( this . org.springframework.boot.liquibase.Log ) . error ( STRING , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . setLogLevel ( LogLevel . SEVERE ) ; given ( this . org.springframework.boot.liquibase.Log . isErrorEnabled ( ) ) . willReturn ( false ) ; this . org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger . severe ( STRING ) ; verify ( this . org.springframework.boot.liquibase.Log , never ( ) ) . error ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.liquibase.Log org.springframework.boot.liquibase.Log ( java.lang.String java.lang.String ) { return org.springframework.boot.liquibase.CommonsLoggingLiquibaseLoggerTests .this . org.springframework.boot.liquibase.Log ; }  <METHOD_END>
