<METHOD_START> @ java.lang.Override public final void void ( BeanFactory org.springframework.integration.support.converter.BeanFactory ) { this . org.springframework.integration.support.converter.BeanFactory = org.springframework.integration.support.converter.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.support.converter.MessageBuilderFactory org.springframework.integration.support.converter.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.support.converter.BeanFactory != null ) { this . org.springframework.integration.support.converter.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.support.converter.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.support.converter.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.converter.Message<?> < ? > org.springframework.integration.support.converter.Message<?> ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.integration.support.converter.MessageHeaders ) { Assert . isInstanceOf ( java.util.Map .class , java.lang.Object , STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) java.lang.Object ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,> . get ( STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; AbstractIntegrationMessageBuilder < ? > org.springframework.integration.support.converter.AbstractIntegrationMessageBuilder<?> = org.springframework.integration.support.converter.MessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = ( java.util.Map<java.lang.String,?> < java.lang.String , ? > ) java.util.Map<java.lang.String,> . get ( STRING ) ; if ( java.util.Map<java.lang.String,> != null ) { if ( this . boolean ) { java.util.Map<java.lang.String,> . java.util.Set<java.lang.String> ( ) . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( this . java.lang.String[] ) ) ; } org.springframework.integration.support.converter.AbstractIntegrationMessageBuilder<> . copyHeaders ( java.util.Map<java.lang.String,> ) ; } return org.springframework.integration.support.converter.AbstractIntegrationMessageBuilder<> . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.support.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.support.converter.Message<> . getPayload ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { java.lang.Object java.lang.Object = org.springframework.integration.support.converter.Message<> . getHeaders ( ) . get ( java.lang.String ) ; if ( java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
