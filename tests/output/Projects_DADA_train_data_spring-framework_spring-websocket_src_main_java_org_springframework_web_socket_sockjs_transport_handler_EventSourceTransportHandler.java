<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.transport.handler.TransportType org.springframework.web.socket.sockjs.transport.handler.TransportType ( ) { return TransportType . EVENT_SOURCE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.transport.handler.MediaType org.springframework.web.socket.sockjs.transport.handler.MediaType ( ) { return new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( SockJsSession org.springframework.web.socket.sockjs.transport.handler.SockJsSession ) { return org.springframework.web.socket.sockjs.transport.handler.SockJsSession instanceof org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler.EventSourceStreamingSockJsSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession org.springframework.web.socket.sockjs.transport.handler.StreamingSockJsSession ( java.lang.String java.lang.String , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return new org.springframework.web.socket.sockjs.transport.handler.EventSourceTransportHandler.EventSourceStreamingSockJsSession ( java.lang.String , getServiceConfig ( ) , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest ) { return new DefaultSockJsFrameFormat ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , SockJsServiceConfig org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( java.lang.String , org.springframework.web.socket.sockjs.transport.handler.SockJsServiceConfig , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected byte [] byte[] ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest ) { return new byte [] { '\r' , '\n' } ; }  <METHOD_END>
