<METHOD_START> @ Test public void void ( ) { PropertySource < ? > org.springframework.core.env.PropertySource<?> = new SimpleCommandLinePropertySource ( ) ; assertThat ( org.springframework.core.env.PropertySource<> . getName ( ) , equalTo ( CommandLinePropertySource . COMMAND_LINE_PROPERTY_SOURCE_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySource < ? > org.springframework.core.env.PropertySource<?> = new SimpleCommandLinePropertySource ( STRING , new java.lang.String [ NUMBER ] ) ; assertThat ( org.springframework.core.env.PropertySource<> . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PropertySource < ? > org.springframework.core.env.PropertySource<?> = new SimpleCommandLinePropertySource ( ) ; assertThat ( org.springframework.core.env.PropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.PropertySource<> . getProperty ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CommandLinePropertySource < ? > org.springframework.core.env.CommandLinePropertySource<?> = new SimpleCommandLinePropertySource ( STRING , STRING ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnumerablePropertySource < ? > org.springframework.core.env.EnumerablePropertySource<?> = new SimpleCommandLinePropertySource ( STRING , STRING ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . getProperty ( STRING ) , nullValue ( ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . getPropertyNames ( ) . length , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CommandLinePropertySource < ? > org.springframework.core.env.CommandLinePropertySource<?> = new SimpleCommandLinePropertySource ( STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; java.lang.String java.lang.String = org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CommandLinePropertySource < ? > org.springframework.core.env.CommandLinePropertySource<?> = new SimpleCommandLinePropertySource ( STRING , STRING , STRING , STRING ) ; org.springframework.core.env.CommandLinePropertySource<> . setNonOptionArgsPropertyName ( STRING ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; java.lang.String java.lang.String = org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CommandLinePropertySource < ? > org.springframework.core.env.CommandLinePropertySource<?> = new SimpleCommandLinePropertySource ( STRING , STRING , STRING , STRING ) ; StandardEnvironment org.springframework.core.env.StandardEnvironment = new StandardEnvironment ( ) ; org.springframework.core.env.StandardEnvironment . getPropertySources ( ) . addFirst ( org.springframework.core.env.CommandLinePropertySource<> ) ; java.lang.String java.lang.String = org.springframework.core.env.StandardEnvironment . getProperty ( STRING ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; java.lang.String [] java.lang.String[] = org.springframework.core.env.StandardEnvironment . getProperty ( STRING , java.lang.String [] .class ) ; assertThat ( java.lang.String[] [ NUMBER ] , equalTo ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , equalTo ( STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.core.env.StandardEnvironment . getProperty ( STRING , java.util.List .class ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , equalTo ( STRING ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , equalTo ( STRING ) ) ; }  <METHOD_END>
