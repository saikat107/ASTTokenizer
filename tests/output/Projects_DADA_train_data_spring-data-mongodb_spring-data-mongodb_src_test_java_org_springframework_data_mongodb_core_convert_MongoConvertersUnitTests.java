<METHOD_START> @ Test public void void ( ) { java.math.BigDecimal java.math.BigDecimal = java.math.BigDecimal . java.math.BigDecimal ( NUMBER , NUMBER ) ; java.lang.String java.lang.String = BigDecimalToStringConverter . INSTANCE . convert ( java.math.BigDecimal ) ; assertThat ( java.lang.String , is ( STRING ) ) ; java.math.BigDecimal java.math.BigDecimal = StringToBigDecimalConverter . INSTANCE . convert ( java.lang.String ) ; assertThat ( java.math.BigDecimal , is ( java.math.BigDecimal ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Box org.springframework.data.mongodb.core.convert.Box = new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = GeoConverters . BoxToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Box ) ; Shape org.springframework.data.mongodb.core.convert.Shape = GeoConverters . DocumentToBoxConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Shape , is ( ( org . springframework . data . org.springframework.data.geo . org.springframework.data.geo ) org.springframework.data.mongodb.core.convert.Box ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Circle org.springframework.data.mongodb.core.convert.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = GeoConverters . CircleToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Circle ) ; Shape org.springframework.data.mongodb.core.convert.Shape = GeoConverters . DocumentToCircleConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Shape , is ( ( org . springframework . data . org.springframework.data.geo . org.springframework.data.geo ) org.springframework.data.mongodb.core.convert.Circle ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Polygon org.springframework.data.mongodb.core.convert.Polygon = new Polygon ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ; Document org.springframework.data.mongodb.core.convert.Document = GeoConverters . PolygonToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Polygon ) ; Shape org.springframework.data.mongodb.core.convert.Shape = GeoConverters . DocumentToPolygonConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.mongodb.core.convert.Shape , is ( ( org . springframework . data . org.springframework.data.geo . org.springframework.data.geo ) org.springframework.data.mongodb.core.convert.Polygon ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sphere org.springframework.data.mongodb.core.convert.Sphere = new Sphere ( new Point ( NUMBER , NUMBER ) , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = GeoConverters . SphereToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Sphere ) ; org . springframework . data . org.springframework.data.geo . org.springframework.data.geo org.springframework.data.geo.Shape = GeoConverters . DocumentToSphereConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.geo.Shape , is ( ( org . springframework . data . org.springframework.data.geo . org.springframework.data.geo ) org.springframework.data.mongodb.core.convert.Sphere ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Point org.springframework.data.mongodb.core.convert.Point = new Point ( NUMBER , NUMBER ) ; Document org.springframework.data.mongodb.core.convert.Document = GeoConverters . PointToDocumentConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Point ) ; org . springframework . data . org.springframework.data.geo . org.springframework.data.geo org.springframework.data.geo.Point = GeoConverters . DocumentToPointConverter . INSTANCE . convert ( org.springframework.data.mongodb.core.convert.Document ) ; assertThat ( org.springframework.data.geo.Point , is ( ( org . springframework . data . org.springframework.data.geo . org.springframework.data.geo ) org.springframework.data.mongodb.core.convert.Point ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( CurrencyToStringConverter . INSTANCE . convert ( java.util.Currency . java.util.Currency ( STRING ) ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( StringToCurrencyConverter . INSTANCE . convert ( STRING ) , is ( java.util.Currency . java.util.Currency ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( AtomicLongToLongConverter . INSTANCE . convert ( new java.util.concurrent.atomic.AtomicLong ( NUMBER ) ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( AtomicIntegerToIntegerConverter . INSTANCE . convert ( new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( LongToAtomicLongConverter . INSTANCE . convert ( NUMBER ) , is ( instanceOf ( java.util.concurrent.atomic.AtomicLong .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( IntegerToAtomicIntegerConverter . INSTANCE . convert ( NUMBER ) , is ( instanceOf ( java.util.concurrent.atomic.AtomicInteger .class ) ) ) ; }  <METHOD_END>
