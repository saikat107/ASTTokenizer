<METHOD_START> public void void ( ResourceUrlProvider org.springframework.web.servlet.resource.ResourceUrlProvider ) { this . org.springframework.web.servlet.resource.ResourceUrlProvider = org.springframework.web.servlet.resource.ResourceUrlProvider ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.resource.ResourceUrlProvider org.springframework.web.servlet.resource.ResourceUrlProvider ( ) { return this . org.springframework.web.servlet.resource.ResourceUrlProvider ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , HttpServletRequest org.springframework.web.servlet.resource.HttpServletRequest , Resource org.springframework.web.servlet.resource.Resource , ResourceTransformerChain org.springframework.web.servlet.resource.ResourceTransformerChain ) { if ( java.lang.String . boolean ( STRING ) ) { ResourceUrlProvider org.springframework.web.servlet.resource.ResourceUrlProvider = org.springframework.web.servlet.resource.ResourceUrlProvider ( org.springframework.web.servlet.resource.HttpServletRequest ) ; return ( org.springframework.web.servlet.resource.ResourceUrlProvider != null ? org.springframework.web.servlet.resource.ResourceUrlProvider . getForRequestUrl ( org.springframework.web.servlet.resource.HttpServletRequest , java.lang.String ) : null ) ; } else { return org.springframework.web.servlet.resource.ResourceTransformerChain . getResolverChain ( ) . resolveUrlPath ( java.lang.String , java.util.Collections . java.util.List ( org.springframework.web.servlet.resource.Resource ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , HttpServletRequest org.springframework.web.servlet.resource.HttpServletRequest ) { java.lang.String java.lang.String = this . org.springframework.web.servlet.resource.ResourceUrlProvider ( org.springframework.web.servlet.resource.HttpServletRequest ) . getUrlPathHelper ( ) . getRequestUri ( org.springframework.web.servlet.resource.HttpServletRequest ) ; java.lang.String java.lang.String = StringUtils . applyRelativePath ( java.lang.String , java.lang.String ) ; return StringUtils . cleanPath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.resource.ResourceUrlProvider org.springframework.web.servlet.resource.ResourceUrlProvider ( HttpServletRequest org.springframework.web.servlet.resource.HttpServletRequest ) { if ( this . org.springframework.web.servlet.resource.ResourceUrlProvider != null ) { return this . org.springframework.web.servlet.resource.ResourceUrlProvider ; } return ( ResourceUrlProvider ) org.springframework.web.servlet.resource.HttpServletRequest . getAttribute ( ResourceUrlProviderExposingInterceptor . RESOURCE_URL_PROVIDER_ATTR ) ; }  <METHOD_END>
