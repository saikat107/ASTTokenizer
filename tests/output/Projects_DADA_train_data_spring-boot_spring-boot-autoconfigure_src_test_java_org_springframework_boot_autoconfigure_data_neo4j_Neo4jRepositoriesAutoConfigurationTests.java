<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfigurationTests.TestConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ) . isNotNull ( ) ; Neo4jMappingContext org.springframework.boot.autoconfigure.data.neo4j.Neo4jMappingContext = this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( Neo4jMappingContext .class ) ; assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jMappingContext . getPersistentEntity ( City .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfigurationTests.EmptyConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( SessionFactory .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfigurationTests.CustomizedConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CityNeo4jRepository .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { void ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfigurationTests.SortOfInvalidCustomConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . register ( Neo4jDataAutoConfiguration .class , Neo4jRepositoriesAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
