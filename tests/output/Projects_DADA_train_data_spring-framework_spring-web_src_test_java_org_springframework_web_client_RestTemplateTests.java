<METHOD_START> @ Before public void void ( ) { org.springframework.web.client.ClientHttpRequestFactory = mock ( ClientHttpRequestFactory .class ) ; org.springframework.web.client.ClientHttpRequest = mock ( ClientHttpRequest .class ) ; org.springframework.web.client.ClientHttpResponse = mock ( ClientHttpResponse .class ) ; org.springframework.web.client.ResponseErrorHandler = mock ( ResponseErrorHandler .class ) ; org.springframework.web.client.HttpMessageConverter = mock ( HttpMessageConverter .class ) ; org.springframework.web.client.RestTemplate = new RestTemplate ( java.util.Collections . java.util.List ( org.springframework.web.client.HttpMessageConverter ) ) ; org.springframework.web.client.RestTemplate . setRequestFactory ( org.springframework.web.client.ClientHttpRequestFactory ) ; org.springframework.web.client.RestTemplate . setErrorHandler ( org.springframework.web.client.ResponseErrorHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; org.springframework.web.client.RestTemplate . execute ( STRING , HttpMethod . GET , null , null , STRING , STRING ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; org.springframework.web.client.RestTemplate . execute ( STRING , HttpMethod . GET , null , null , null , STRING ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; org.springframework.web.client.RestTemplate . execute ( STRING , HttpMethod . GET , null , null , java.util.Map<java.lang.String,java.lang.String> ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , null ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.client.RestTemplate . execute ( STRING , HttpMethod . GET , null , null , java.util.Map<java.lang.String,java.lang.String> ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( java.lang.String ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; org.springframework.web.client.RestTemplate . execute ( java.lang.String , HttpMethod . GET , null , null ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( true ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . INTERNAL_SERVER_ERROR ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( STRING ) ; willThrow ( new HttpServerErrorException ( HttpStatus . INTERNAL_SERVER_ERROR ) ) . given ( org.springframework.web.client.ResponseErrorHandler ) . handleError ( org.springframework.web.client.ClientHttpResponse ) ; try { org.springframework.web.client.RestTemplate . execute ( STRING , HttpMethod . GET , null , null ) ; fail ( STRING ) ; } catch ( HttpServerErrorException org.springframework.web.client.HttpServerErrorException ) { } verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.String .class , null ) ) . willReturn ( true ) ; MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; java.lang.String java.lang.String = STRING ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.String .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( eq ( java.lang.String .class ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.String ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.lang.String java.lang.String = org.springframework.web.client.RestTemplate . getForObject ( STRING , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String , java.lang.String ) ; assertEquals ( STRING , org.springframework.web.client.MediaType . toString ( ) , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.String .class , null ) ) . willReturn ( true ) ; MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.String .class , org.springframework.web.client.MediaType ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; try { org.springframework.web.client.RestTemplate . getForObject ( STRING , java.lang.String .class , STRING ) ; fail ( STRING ) ; } catch ( RestClientException org.springframework.web.client.RestClientException ) { } verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.String .class , null ) ) . willReturn ( true ) ; MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; java.lang.String java.lang.String = STRING ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.String .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( eq ( java.lang.String .class ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; ResponseEntity < java.lang.String > org.springframework.web.client.ResponseEntity<java.lang.String> = org.springframework.web.client.RestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String , org.springframework.web.client.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertEquals ( STRING , org.springframework.web.client.MediaType . toString ( ) , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.client.MediaType , org.springframework.web.client.ResponseEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultUriBuilderFactory org.springframework.web.client.DefaultUriBuilderFactory = new DefaultUriBuilderFactory ( ) ; org.springframework.web.client.RestTemplate . setUriTemplateHandler ( org.springframework.web.client.DefaultUriBuilderFactory ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( java.net.URI , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( new HttpHeaders ( ) ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( new HttpHeaders ( ) ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( null ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.client.RestTemplate . getForObject ( java.lang.String , java.lang.String .class , java.util.Map<java.lang.String,java.lang.String> ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . HEAD ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; HttpHeaders org.springframework.web.client.HttpHeaders = org.springframework.web.client.RestTemplate . headForHeaders ( STRING ) ; assertSame ( STRING , org.springframework.web.client.HttpHeaders , org.springframework.web.client.HttpHeaders ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , null , org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; org.springframework.web.client.HttpHeaders . setLocation ( java.net.URI ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.net.URI java.net.URI = org.springframework.web.client.RestTemplate . postForLocation ( STRING , java.lang.String ) ; assertEquals ( STRING , java.net.URI , java.net.URI ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; java.lang.String java.lang.String = STRING ; MediaType org.springframework.web.client.MediaType = MediaType . TEXT_PLAIN ; given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , org.springframework.web.client.MediaType , org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; org.springframework.web.client.HttpHeaders . setLocation ( java.net.URI ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String , org.springframework.web.client.HttpHeaders ) ; java.net.URI java.net.URI = org.springframework.web.client.RestTemplate . postForLocation ( STRING , org.springframework.web.client.HttpEntity<java.lang.String> ) ; assertEquals ( STRING , java.net.URI , java.net.URI ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , null , org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; org.springframework.web.client.HttpHeaders . setLocation ( java.net.URI ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String , org.springframework.web.client.HttpHeaders ) ; java.net.URI java.net.URI = org.springframework.web.client.RestTemplate . postForLocation ( STRING , org.springframework.web.client.HttpEntity<java.lang.String> ) ; assertEquals ( STRING , java.net.URI , java.net.URI ) ; assertEquals ( STRING , STRING , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , null , org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.net.URI java.net.URI = org.springframework.web.client.RestTemplate . postForLocation ( STRING , java.lang.String ) ; assertNull ( STRING , java.net.URI ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; org.springframework.web.client.RestTemplate . postForLocation ( STRING , null ) ; assertEquals ( STRING , NUMBER , org.springframework.web.client.HttpHeaders . getContentLength ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( this . org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( this . org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , null , this . org.springframework.web.client.ClientHttpRequest ) ; given ( this . org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; java.lang.Integer java.lang.Integer = NUMBER ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.Integer . java.lang.String ( ) . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( eq ( java.lang.Integer .class ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.Integer ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.lang.Integer java.lang.Integer = org.springframework.web.client.RestTemplate . postForObject ( STRING , java.lang.String , java.lang.Integer .class ) ; assertEquals ( STRING , java.lang.Integer , java.lang.Integer ) ; assertEquals ( STRING , org.springframework.web.client.MediaType . toString ( ) , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( this . org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( this . org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , null , this . org.springframework.web.client.ClientHttpRequest ) ; given ( this . org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; java.lang.Integer java.lang.Integer = NUMBER ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.Integer . java.lang.String ( ) . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( eq ( java.lang.Integer .class ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.Integer ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; ResponseEntity < java.lang.Integer > org.springframework.web.client.ResponseEntity<java.lang.Integer> = org.springframework.web.client.RestTemplate . postForEntity ( STRING , java.lang.String , java.lang.Integer .class ) ; assertEquals ( STRING , java.lang.Integer , org.springframework.web.client.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; assertEquals ( STRING , org.springframework.web.client.MediaType , org.springframework.web.client.ResponseEntity<java.lang.Integer> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.web.client.MediaType . toString ( ) , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.lang.Integer> . getStatusCode ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( java.lang.Integer .class , org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( null ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.lang.Integer java.lang.Integer = org.springframework.web.client.RestTemplate . postForObject ( STRING , null , java.lang.Integer .class ) ; assertNull ( STRING , java.lang.Integer ) ; assertEquals ( STRING , NUMBER , org.springframework.web.client.HttpHeaders . getContentLength ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( java.lang.Integer .class , org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( null ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; ResponseEntity < java.lang.Integer > org.springframework.web.client.ResponseEntity<java.lang.Integer> = org.springframework.web.client.RestTemplate . postForEntity ( STRING , null , java.lang.Integer .class ) ; assertFalse ( STRING , org.springframework.web.client.ResponseEntity<java.lang.Integer> . hasBody ( ) ) ; assertEquals ( STRING , org.springframework.web.client.MediaType , org.springframework.web.client.ResponseEntity<java.lang.Integer> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.client.HttpHeaders . getContentLength ( ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.lang.Integer> . getStatusCode ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . PUT ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , null , org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; org.springframework.web.client.RestTemplate . put ( STRING , java.lang.String ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . PUT ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; org.springframework.web.client.RestTemplate . put ( STRING , null ) ; assertEquals ( STRING , NUMBER , org.springframework.web.client.HttpHeaders . getContentLength ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . PATCH ) ) . willReturn ( this . org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( this . org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; java.lang.String java.lang.String = STRING ; given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , null , this . org.springframework.web.client.ClientHttpRequest ) ; given ( this . org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; java.lang.Integer java.lang.Integer = NUMBER ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.Integer . java.lang.String ( ) . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( eq ( java.lang.Integer .class ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.Integer ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.lang.Integer java.lang.Integer = org.springframework.web.client.RestTemplate . patchForObject ( STRING , java.lang.String , java.lang.Integer .class ) ; assertEquals ( STRING , java.lang.Integer , java.lang.Integer ) ; assertEquals ( STRING , org.springframework.web.client.MediaType . toString ( ) , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . PATCH ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( org.springframework.web.client.MediaType ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , org.springframework.web.client.MediaType ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( java.lang.Integer .class , org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( null ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.lang.Integer java.lang.Integer = org.springframework.web.client.RestTemplate . patchForObject ( STRING , null , java.lang.Integer .class ) ; assertNull ( STRING , java.lang.Integer ) ; assertEquals ( STRING , NUMBER , org.springframework.web.client.HttpHeaders . getContentLength ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . DELETE ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; org.springframework.web.client.RestTemplate . delete ( STRING ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . OPTIONS ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; java.util.EnumSet<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.EnumSet<org.springframework.web.client.HttpMethod> = java.util.EnumSet . java.util.EnumSet ( HttpMethod . GET , HttpMethod . POST ) ; org.springframework.web.client.HttpHeaders . setAllow ( java.util.EnumSet<org.springframework.web.client.HttpMethod> ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; java.util.Set<org.springframework.web.client.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.client.HttpMethod> = org.springframework.web.client.RestTemplate . optionsForAllow ( STRING ) ; assertEquals ( STRING , java.util.EnumSet<org.springframework.web.client.HttpMethod> , java.util.Set<org.springframework.web.client.HttpMethod> ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.String .class , null ) ) . willReturn ( true ) ; MediaType org.springframework.web.client.MediaType = new MediaType ( STRING , STRING ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( org.springframework.web.client.MediaType ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( java.lang.String ) , HttpMethod . GET ) ) . willReturn ( org.springframework.web.client.ClientHttpRequest ) ; given ( org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( new HttpHeaders ( ) ) ; given ( org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willThrow ( new java.io.IOException ( STRING ) ) ; try { org.springframework.web.client.RestTemplate . getForObject ( java.lang.String , java.lang.String .class ) ; fail ( STRING ) ; } catch ( ResourceAccessException org.springframework.web.client.ResourceAccessException ) { assertEquals ( STRING + STRING , org.springframework.web.client.ResourceAccessException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( this . org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( this . org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.HttpMessageConverter . canWrite ( java.lang.String .class , null ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.client.HttpMessageConverter . write ( java.lang.String , null , this . org.springframework.web.client.ClientHttpRequest ) ; given ( this . org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; java.lang.Integer java.lang.Integer = NUMBER ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.Integer . java.lang.String ( ) . byte[] ( ) ) ) ; given ( org.springframework.web.client.HttpMessageConverter . canRead ( java.lang.Integer .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( java.lang.Integer .class , org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( java.lang.Integer ) ; given ( org.springframework.web.client.HttpMessageConverter . read ( eq ( java.lang.Integer .class ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.lang.Integer ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String , org.springframework.web.client.HttpHeaders ) ; ResponseEntity < java.lang.Integer > org.springframework.web.client.ResponseEntity<java.lang.Integer> = org.springframework.web.client.RestTemplate . exchange ( STRING , HttpMethod . POST , org.springframework.web.client.HttpEntity<java.lang.String> , java.lang.Integer .class ) ; assertEquals ( STRING , java.lang.Integer , org.springframework.web.client.ResponseEntity<java.lang.Integer> . getBody ( ) ) ; assertEquals ( STRING , MediaType . TEXT_PLAIN , org.springframework.web.client.ResponseEntity<java.lang.Integer> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , MediaType . TEXT_PLAIN_VALUE , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , STRING , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.lang.Integer> . getStatusCode ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { GenericHttpMessageConverter org.springframework.web.client.GenericHttpMessageConverter = mock ( GenericHttpMessageConverter .class ) ; org.springframework.web.client.RestTemplate . setMessageConverters ( java.util.Collections .< HttpMessageConverter < ? > > java.util.List<org.springframework.web.client.HttpMessageConverter<?>> ( org.springframework.web.client.GenericHttpMessageConverter ) ) ; ParameterizedTypeReference < java.util.List<java.lang.Integer> < java.lang.Integer > > org.springframework.web.client.ParameterizedTypeReference<java.util.List<java.lang.Integer>> = new ParameterizedTypeReference < java.util.List<java.lang.Integer> < java.lang.Integer > > ( ) {} ; given ( org.springframework.web.client.GenericHttpMessageConverter . canRead ( org.springframework.web.client.ParameterizedTypeReference<java.util.List<java.lang.Integer>> . getType ( ) , null , null ) ) . willReturn ( true ) ; given ( org.springframework.web.client.GenericHttpMessageConverter . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; given ( org.springframework.web.client.ClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING ) , HttpMethod . POST ) ) . willReturn ( this . org.springframework.web.client.ClientHttpRequest ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; given ( this . org.springframework.web.client.ClientHttpRequest . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.GenericHttpMessageConverter . canWrite ( java.lang.String .class , java.lang.String .class , null ) ) . willReturn ( true ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.client.GenericHttpMessageConverter . write ( java.lang.String , java.lang.String .class , null , this . org.springframework.web.client.ClientHttpRequest ) ; given ( this . org.springframework.web.client.ClientHttpRequest . execute ( ) ) . willReturn ( org.springframework.web.client.ClientHttpResponse ) ; given ( org.springframework.web.client.ResponseErrorHandler . hasError ( org.springframework.web.client.ClientHttpResponse ) ) . willReturn ( false ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = java.util.Collections . java.util.List<java.lang.Integer> ( NUMBER ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; org.springframework.web.client.HttpHeaders . setContentLength ( NUMBER ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; given ( org.springframework.web.client.ClientHttpResponse . getHeaders ( ) ) . willReturn ( org.springframework.web.client.HttpHeaders ) ; given ( org.springframework.web.client.ClientHttpResponse . getBody ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( java.lang.Integer . java.lang.String ( NUMBER ) . byte[] ( ) ) ) ; given ( org.springframework.web.client.GenericHttpMessageConverter . canRead ( org.springframework.web.client.ParameterizedTypeReference<java.util.List<java.lang.Integer>> . getType ( ) , null , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.client.GenericHttpMessageConverter . read ( eq ( org.springframework.web.client.ParameterizedTypeReference<java.util.List<java.lang.Integer>> . getType ( ) ) , eq ( null ) , any ( HttpInputMessage .class ) ) ) . willReturn ( java.util.List<java.lang.Integer> ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( HttpStatus . OK ) ; HttpStatus org.springframework.web.client.HttpStatus = HttpStatus . OK ; given ( org.springframework.web.client.ClientHttpResponse . getStatusCode ( ) ) . willReturn ( org.springframework.web.client.HttpStatus ) ; given ( org.springframework.web.client.ClientHttpResponse . getStatusText ( ) ) . willReturn ( org.springframework.web.client.HttpStatus . getReasonPhrase ( ) ) ; HttpHeaders org.springframework.web.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.client.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < java.lang.String > org.springframework.web.client.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String , org.springframework.web.client.HttpHeaders ) ; ResponseEntity < java.util.List<java.lang.Integer> < java.lang.Integer > > org.springframework.web.client.ResponseEntity<java.util.List<java.lang.Integer>> = org.springframework.web.client.RestTemplate . exchange ( STRING , HttpMethod . POST , org.springframework.web.client.HttpEntity<java.lang.String> , org.springframework.web.client.ParameterizedTypeReference<java.util.List<java.lang.Integer>> ) ; assertEquals ( STRING , java.util.List<java.lang.Integer> , org.springframework.web.client.ResponseEntity<java.util.List<java.lang.Integer>> . getBody ( ) ) ; assertEquals ( STRING , MediaType . TEXT_PLAIN , org.springframework.web.client.ResponseEntity<java.util.List<java.lang.Integer>> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , MediaType . TEXT_PLAIN_VALUE , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , STRING , org.springframework.web.client.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , HttpStatus . OK , org.springframework.web.client.ResponseEntity<java.util.List<java.lang.Integer>> . getStatusCode ( ) ) ; verify ( org.springframework.web.client.ClientHttpResponse ) . close ( ) ; }  <METHOD_END>
