<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.DispatcherServletConfiguration .class , org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.SpringServletConfiguration .class , org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeanNamesForType ( DispatcherServlet .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.NonSpringServletConfiguration .class , org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeanNamesForType ( DispatcherServlet .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.NonServletConfiguration .class , org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeanNamesForType ( DispatcherServlet .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeanNamesForType ( Servlet .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.DispatcherServletWithRegistrationConfiguration .class , org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeanNamesForType ( DispatcherServlet .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.EnsureWebServerHasNoServletContext .class , org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.CallbackEmbeddedServerFactoryCustomizer .class , org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; void ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory ( ) . getPort ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; ServletContext org.springframework.boot.autoconfigure.web.servlet.ServletContext = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getServletContext ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletContext . getInitParameter ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletContext . getInitParameter ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { MockServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory = org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory ( ) ; Servlet org.springframework.boot.autoconfigure.web.servlet.Servlet = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( DispatcherServletAutoConfiguration . DEFAULT_DISPATCHER_SERVLET_BEAN_NAME , Servlet .class ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory . getServletContext ( ) ) . addServlet ( STRING , org.springframework.boot.autoconfigure.web.servlet.Servlet ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory ( ) { return this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBean ( MockServletWebServerFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactory ( ) { return new MockServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ( ) { return new DispatcherServlet ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ( ) { return new DispatcherServlet ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.FrameworkServlet org.springframework.boot.autoconfigure.web.servlet.FrameworkServlet ( ) { return new FrameworkServlet ( ) { @ java.lang.Override protected void void ( HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.boot.autoconfigure.web.servlet.HttpServletResponse ) throws java.lang.Exception {				} } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.boot.autoconfigure.web.servlet.HttpServletResponse ) throws java.lang.Exception {				}  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = DispatcherServletAutoConfiguration . DEFAULT_DISPATCHER_SERVLET_BEAN_NAME ) public org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ( ) { return new DispatcherServlet ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = DispatcherServletAutoConfiguration . DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME ) public org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> < DispatcherServlet > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> ( ) { return new ServletRegistrationBean <> ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )				throws org.springframework.boot.autoconfigure.web.servlet.BeansException { if ( java.lang.Object instanceof ConfigurableServletWebServerFactory ) { MockServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory = ( MockServletWebServerFactory ) java.lang.Object ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.MockServletWebServerFactory . getServletContext ( ) ) . isNull ( ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setPort ( NUMBER ) ; }  <METHOD_END>
