<METHOD_START> @ Test public void void ( ) { Interest < java.lang.String > org.springframework.data.gemfire.client.Interest<java.lang.String> = new Interest <> ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getKey ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . KEYS_VALUES ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isDurable ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isReceiveValues ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getType ( ) ) . isEqualTo ( KEY ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Interest<java.lang.String> . getClass ( ) . getName ( ) ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . toString ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < java.lang.String > org.springframework.data.gemfire.client.Interest<java.lang.String> = new Interest <> ( STRING , InterestResultPolicy . KEYS ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getKey ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . KEYS ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isDurable ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isReceiveValues ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getType ( ) ) . isEqualTo ( KEY ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Interest<java.lang.String> . getClass ( ) . getName ( ) ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . toString ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < java.lang.String > org.springframework.data.gemfire.client.Interest<java.lang.String> = new Interest <> ( STRING , InterestResultPolicy . NONE , boolean ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getKey ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . NONE ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isDurable ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isReceiveValues ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getType ( ) ) . isEqualTo ( REGEX ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Interest<java.lang.String> . getClass ( ) . getName ( ) ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . toString ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; Interest < java.lang.Object > org.springframework.data.gemfire.client.Interest<java.lang.Object> = new Interest <> ( java.util.List<java.lang.String> , InterestResultPolicy . KEYS_VALUES , boolean , boolean ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.Object> . getKey ( ) ) . isEqualTo ( java.util.List<java.lang.String> ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.Object> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . KEYS_VALUES ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.Object> . isDurable ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.Object> . isReceiveValues ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.Object> . getType ( ) ) . isEqualTo ( Interest . Type . KEY ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.client.Interest<java.lang.Object> . getClass ( ) . getName ( ) ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.Object> . toString ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.client.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expectMessage ( STRING ) ; new Interest <> ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Interest < java.lang.String > org.springframework.data.gemfire.client.Interest<java.lang.String> = new Interest <> ( STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getKey ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . NONE ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getType ( ) ) . isEqualTo ( KEY ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { new Interest <> ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( 'a' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( 'X' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( '0' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( '1' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( '2' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( '4' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( '8' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( '9' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isAlphaNumericWhitespace ( ' ' ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '@' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '$' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '.' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '_' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '-' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '+' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '*' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '?' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '\\' ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isNotAlphaNumericWhitespace ( '[' ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . containsNonAlphaNumericWhitespace ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( ( java.lang.Object ) STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegularExpression ( java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( newInterest ( STRING ) . resolveType ( KEY ) ) . isEqualTo ( KEY ) ; assertThat ( newInterest ( STRING ) . resolveType ( REGEX ) ) . isEqualTo ( REGEX ) ; assertThat ( newInterest ( STRING ) . resolveType ( null ) ) . isEqualTo ( KEY ) ; assertThat ( newInterest ( java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) . resolveType ( null ) ) . isEqualTo ( KEY ) ; assertThat ( newInterest ( STRING ) . resolveType ( null ) ) . isEqualTo ( REGEX ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Interest < java.lang.String > org.springframework.data.gemfire.client.Interest<java.lang.String> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isDurable ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getKey ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . DEFAULT ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isReceiveValues ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getType ( ) ) . isEqualTo ( KEY ) ; org.springframework.data.gemfire.client.Interest<java.lang.String> . setDurable ( true ) ; org.springframework.data.gemfire.client.Interest<java.lang.String> . setKey ( STRING ) ; org.springframework.data.gemfire.client.Interest<java.lang.String> . setPolicy ( InterestResultPolicy . KEYS ) ; org.springframework.data.gemfire.client.Interest<java.lang.String> . setReceiveValues ( false ) ; org.springframework.data.gemfire.client.Interest<java.lang.String> . setType ( Interest . Type . REGEX ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isDurable ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getKey ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . KEYS ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . isReceiveValues ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<java.lang.String> . getType ( ) ) . isEqualTo ( REGEX ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . DEFAULT ) ; org.springframework.data.gemfire.client.Interest<> . setPolicy ( InterestResultPolicy . NONE ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . NONE ) ; org.springframework.data.gemfire.client.Interest<> . setPolicy ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . KEYS ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { newInterest ( STRING ) . setPolicy ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getType ( ) ) . isEqualTo ( KEY ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isKeyType ( ) ) . isTrue ( ) ; org.springframework.data.gemfire.client.Interest<> . setType ( REGEX ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getType ( ) ) . isEqualTo ( REGEX ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isKeyType ( ) ) . isFalse ( ) ; org.springframework.data.gemfire.client.Interest<> . setType ( KEY ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getType ( ) ) . isEqualTo ( KEY ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isKeyType ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getType ( ) ) . isEqualTo ( KEY ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegexType ( ) ) . isFalse ( ) ; org.springframework.data.gemfire.client.Interest<> . setType ( KEY ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getType ( ) ) . isEqualTo ( KEY ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegexType ( ) ) . isFalse ( ) ; org.springframework.data.gemfire.client.Interest<> . setType ( REGEX ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getType ( ) ) . isEqualTo ( REGEX ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isRegexType ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) . makeDurable ( ) . receivesValues ( false ) . usingPolicy ( InterestResultPolicy . KEYS ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isDurable ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getKey ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . KEYS ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isReceiveValues ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getType ( ) ) . isEqualTo ( REGEX ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Interest < ? > org.springframework.data.gemfire.client.Interest<?> = newInterest ( STRING ) . asType ( KEY ) . withKey ( STRING ) . usingPolicy ( InterestResultPolicy . NONE ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isDurable ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getKey ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getPolicy ( ) ) . isEqualTo ( InterestResultPolicy . NONE ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . isReceiveValues ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.client.Interest<> . getType ( ) ) . isEqualTo ( KEY ) ; }  <METHOD_END>
