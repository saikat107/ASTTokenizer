<METHOD_START> public void ( Project org.springframework.boot.gradle.dsl.Project ) { this . org.springframework.boot.gradle.dsl.Project = org.springframework.boot.gradle.dsl.Project ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . void ( null ) ; }  <METHOD_END>
<METHOD_START> public void void ( Action < BuildInfo > org.springframework.boot.gradle.dsl.Action<org.springframework.boot.gradle.dsl.BuildInfo> ) { BuildInfo org.springframework.boot.gradle.dsl.BuildInfo = this . org.springframework.boot.gradle.dsl.Project . getTasks ( ) . create ( STRING , BuildInfo .class ) ; this . org.springframework.boot.gradle.dsl.Project . getPlugins ( ) . withType ( JavaPlugin .class , plugin -> { this . project . getTasks ( ) . getByName ( JavaPlugin . CLASSES_TASK_NAME ) . dependsOn ( bootBuildInfo ) ; this . project . afterEvaluate ( evaluated -> { BuildInfoProperties properties = bootBuildInfo . getProperties ( ) ; if ( properties . getArtifact ( ) == null ) { properties . setArtifact ( determineArtifactBaseName ( ) ) ; } } ) ; bootBuildInfo . getConventionMapping ( ) . map ( STRING , ( Callable < File > ) ( ) new File ( determineMainSourceSetResourcesOutputDir ( ) , STRING ) ) ; } ) ; if ( org.springframework.boot.gradle.dsl.Action<org.springframework.boot.gradle.dsl.BuildInfo> != null ) { org.springframework.boot.gradle.dsl.Action<org.springframework.boot.gradle.dsl.BuildInfo> . execute ( org.springframework.boot.gradle.dsl.BuildInfo ) ; } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) { return this . org.springframework.boot.gradle.dsl.Project . getConvention ( ) . getPlugin ( JavaPluginConvention .class ) . getSourceSets ( ) . getByName ( SourceSet . MAIN_SOURCE_SET_NAME ) . getOutput ( ) . getResourcesDir ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { Jar org.springframework.boot.gradle.dsl.Jar = org.springframework.boot.gradle.dsl.Jar ( ) ; return org.springframework.boot.gradle.dsl.Jar == null ? null : org.springframework.boot.gradle.dsl.Jar . getBaseName ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.gradle.dsl.Jar org.springframework.boot.gradle.dsl.Jar ( ) { Jar org.springframework.boot.gradle.dsl.Jar = ( Jar ) this . org.springframework.boot.gradle.dsl.Project . getTasks ( ) . findByName ( STRING ) ; if ( org.springframework.boot.gradle.dsl.Jar != null ) { return org.springframework.boot.gradle.dsl.Jar ; } return ( Jar ) this . org.springframework.boot.gradle.dsl.Project . getTasks ( ) . findByName ( STRING ) ; }  <METHOD_END>
