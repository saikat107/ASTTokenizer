<METHOD_START> @ Test public void void ( ) { ListablePage < java.lang.String > org.springframework.data.gemfire.domain.ListablePage<java.lang.String> = newListablePage ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.String> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.String> ) . contains ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListablePage < java.lang.Integer > org.springframework.data.gemfire.domain.ListablePage<java.lang.Integer> = newListablePage ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListablePage < java.lang.Object > org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> = newListablePage ( ( java.util.List<java.lang.Object> < java.lang.Object > ) null ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ; ListablePage < java.lang.Object > org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> = newListablePage ( java.util.List<java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . isNotEmpty ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . containsAll ( java.util.List<java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . hasContent ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . hasPrevious ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . isFirst ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . isLast ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getContent ( ) ) . isEqualTo ( java.util.List<java.lang.Object> ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getNumber ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getNumberOfElements ( ) ) . isEqualTo ( java.util.List<java.lang.Object> . int ( ) ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getSize ( ) ) . isEqualTo ( java.util.List<java.lang.Object> . int ( ) ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getSort ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getTotalElements ( ) ) . isEqualTo ( java.util.List<java.lang.Object> . int ( ) ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListablePage < java.lang.Object > org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> = newListablePage ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . isEmpty ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . hasContent ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . hasPrevious ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . isFirst ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . isLast ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getContent ( ) ) . isEqualTo ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getNumber ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getNumberOfElements ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getSort ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getTotalElements ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getTotalPages ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListablePage < java.lang.Object > org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> = newListablePage ( NUMBER , NUMBER , NUMBER ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList <> ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getSize ( ) ) ; for ( java.lang.Object java.lang.Object : org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } assertThat ( java.util.List<java.lang.Object> ) . isEqualTo ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . getContent ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ListablePage < java.lang.Object > org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> = newListablePage ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> ) . hasSize ( NUMBER ) ; Page < java.lang.Integer > org.springframework.data.gemfire.domain.Page<java.lang.Integer> = org.springframework.data.gemfire.domain.ListablePage<java.lang.Object> . map ( value -> Integer . parseInt ( String . valueOf ( value ) ) ) ; assertThat ( org.springframework.data.gemfire.domain.Page<java.lang.Integer> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.Page<java.lang.Integer> ) . contains ( NUMBER , NUMBER , NUMBER ) ; Page < java.lang.Double > org.springframework.data.gemfire.domain.Page<java.lang.Double> = org.springframework.data.gemfire.domain.Page<java.lang.Integer> . map ( java.lang.Integer :: double ) ; assertThat ( org.springframework.data.gemfire.domain.Page<java.lang.Double> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.domain.Page<java.lang.Double> ) . contains ( NUMBER , NUMBER , NUMBER ) ; }  <METHOD_END>
