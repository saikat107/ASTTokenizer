<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.dispatcher.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.dispatcher.UnicastingDispatcherTests> ( ) ) ; SubscribableChannel org.springframework.integration.dispatcher.SubscribableChannel = org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; MessageHandler org.springframework.integration.dispatcher.MessageHandler = message -> { MessageChannel replyChannel = ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ; assertTrue ( message . getPayload ( ) instanceof MessageDeliveryException ) ; replyChannel . send ( new GenericMessage < String > ( STRING ) ) ; } ; org.springframework.integration.dispatcher.SubscribableChannel . subscribe ( org.springframework.integration.dispatcher.MessageHandler ) ; RequestReplyExchanger org.springframework.integration.dispatcher.RequestReplyExchanger = org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . getBean ( RequestReplyExchanger .class ) ; Message < java.lang.String > org.springframework.integration.dispatcher.Message<java.lang.String> = ( Message < java.lang.String > ) org.springframework.integration.dispatcher.RequestReplyExchanger . exchange ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.dispatcher.Message<java.lang.String> . getPayload ( ) ) ; org.springframework.integration.dispatcher.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
