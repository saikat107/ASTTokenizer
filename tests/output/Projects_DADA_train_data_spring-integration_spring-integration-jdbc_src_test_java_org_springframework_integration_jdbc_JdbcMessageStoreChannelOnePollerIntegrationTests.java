<METHOD_START> @ Before public void void ( ) { for ( MessageGroup org.springframework.integration.jdbc.MessageGroup : org.springframework.integration.jdbc.JdbcMessageStore ) { org.springframework.integration.jdbc.JdbcMessageStore . removeMessageGroup ( org.springframework.integration.jdbc.MessageGroup . getGroupId ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStoreChannelOnePollerIntegrationTests.Service . void ( NUMBER ) ; assertNull ( org.springframework.integration.jdbc.QueueChannel . receive ( NUMBER ) ) ; assertNull ( org.springframework.integration.jdbc.QueueChannel . receive ( NUMBER ) ) ; final StopWatch org.springframework.integration.jdbc.StopWatch = new StopWatch ( ) ; boolean boolean = new TransactionTemplate ( org.springframework.integration.jdbc.PlatformTransactionManager ) . execute ( status -> { synchronized ( storeLock ) { boolean result1 = relay . send ( new GenericMessage < String > ( STRING ) , NUMBER ) ; try { Service . await ( NUMBER ) ; fail ( STRING ) ; } catch ( Exception e ) { } try { stopWatch . start ( ) ; assertNull ( durable . receive ( NUMBER ) ) ; } finally { stopWatch . stop ( ) ; } return result1 ; } } ) ; assertTrue ( STRING , boolean ) ; assertTrue ( STRING , org.springframework.integration.jdbc.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; org.springframework.integration.jdbc.JdbcMessageStoreChannelOnePollerIntegrationTests.Service . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStoreChannelOnePollerIntegrationTests.Service . java.util.List<java.lang.String> . int ( ) ) ; new TransactionTemplate ( org.springframework.integration.jdbc.PlatformTransactionManager ) . execute ( status -> { synchronized ( storeLock ) { try { stopWatch . start ( ) ; durable . receive ( NUMBER ) ; return null ; } finally { stopWatch . stop ( ) ; } } } ) ; assertTrue ( STRING , org.springframework.integration.jdbc.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static void void ( int int ) { boolean = false ; java.util.List<java.lang.String> . void ( ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> public static void void ( long long ) throws java.lang.InterruptedException { if ( ! java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; java.util.concurrent.CountDownLatch . void ( ) ; if ( boolean ) { throw new java.lang.RuntimeException ( STRING ) ; } return java.lang.String ; }  <METHOD_END>
