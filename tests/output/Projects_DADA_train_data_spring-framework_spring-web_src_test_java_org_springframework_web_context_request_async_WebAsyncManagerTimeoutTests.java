<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.context.request.async.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.context.request.async.MockHttpServletRequest . setAsyncSupported ( true ) ; this . org.springframework.web.context.request.async.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest = new StandardServletAsyncWebRequest ( org.springframework.web.context.request.async.MockHttpServletRequest , org.springframework.web.context.request.async.MockHttpServletResponse ) ; AsyncTaskExecutor org.springframework.web.context.request.async.AsyncTaskExecutor = mock ( AsyncTaskExecutor .class ) ; this . org.springframework.web.context.request.async.WebAsyncManager = WebAsyncUtils . getAsyncManager ( org.springframework.web.context.request.async.MockHttpServletRequest ) ; this . org.springframework.web.context.request.async.WebAsyncManager . setTaskExecutor ( org.springframework.web.context.request.async.AsyncTaskExecutor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . setAsyncWebRequest ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable = new org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ( ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; given ( org.springframework.web.context.request.async.CallableProcessingInterceptor . handleTimeout ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ) . willReturn ( RESULT_NONE ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptor ( STRING , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onComplete ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( AsyncRequestTimeoutException .class , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) . getClass ( ) ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . afterCompletion ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable = new org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ( ) ; WebAsyncTask < java.lang.Object > org.springframework.web.context.request.async.WebAsyncTask<java.lang.Object> = new WebAsyncTask <> ( org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ; org.springframework.web.context.request.async.WebAsyncTask<java.lang.Object> . onTimeout ( new java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return NUMBER ; } } ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( org.springframework.web.context.request.async.WebAsyncTask<java.lang.Object> ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; assertEquals ( STRING , ( ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) . getDispatchedPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable = new org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ( ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; given ( org.springframework.web.context.request.async.CallableProcessingInterceptor . handleTimeout ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ) . willReturn ( NUMBER ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptor ( STRING , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; assertEquals ( STRING , ( ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) . getDispatchedPath ( ) ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable = new org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ( ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor = mock ( CallableProcessingInterceptor .class ) ; given ( org.springframework.web.context.request.async.CallableProcessingInterceptor . handleTimeout ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ) . willThrow ( java.lang.Exception ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerCallableInterceptor ( STRING , org.springframework.web.context.request.async.CallableProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startCallableProcessing ( org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( java.lang.Exception , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; assertEquals ( STRING , ( ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) . getDispatchedPath ( ) ) ; verify ( org.springframework.web.context.request.async.CallableProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.WebAsyncManagerTimeoutTests.StubCallable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.Integer > org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> = new DeferredResult <> ( ) ; DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor = mock ( DeferredResultProcessingInterceptor .class ) ; given ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor . handleTimeout ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ) . willReturn ( true ) ; this . org.springframework.web.context.request.async.WebAsyncManager . registerDeferredResultInterceptor ( STRING , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onComplete ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( AsyncRequestTimeoutException .class , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) . getClass ( ) ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . beforeConcurrentHandling ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . preProcess ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; verify ( org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) . afterCompletion ( this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest , org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.Integer > org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> = new DeferredResult <> ( null , NUMBER ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; AsyncEvent org.springframework.web.context.request.async.AsyncEvent = null ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; assertEquals ( STRING , ( ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) . getDispatchedPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final DeferredResult < java.lang.Integer > org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> = new DeferredResult <> ( ) ; org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> . onTimeout ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> . setResult ( NUMBER ) ; } } ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; AsyncEvent org.springframework.web.context.request.async.AsyncEvent = null ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; assertEquals ( STRING , ( ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) . getDispatchedPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> . setResult ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.Integer > org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> = new DeferredResult <> ( ) ; DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor = new DeferredResultProcessingInterceptorAdapter ( ) { @ java.lang.Override public < T > boolean boolean ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < T > org.springframework.web.context.request.async.DeferredResult<T> ) throws java.lang.Exception { org.springframework.web.context.request.async.DeferredResult<T> . setErrorResult ( NUMBER ) ; return true ; } } ; this . org.springframework.web.context.request.async.WebAsyncManager . registerDeferredResultInterceptor ( STRING , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; AsyncEvent org.springframework.web.context.request.async.AsyncEvent = null ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( NUMBER , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; assertEquals ( STRING , ( ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) . getDispatchedPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > boolean boolean ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < T > org.springframework.web.context.request.async.DeferredResult<T> ) throws java.lang.Exception { org.springframework.web.context.request.async.DeferredResult<T> . setErrorResult ( NUMBER ) ; return true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.Integer > org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> = new DeferredResult <> ( ) ; final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; DeferredResultProcessingInterceptor org.springframework.web.context.request.async.DeferredResultProcessingInterceptor = new DeferredResultProcessingInterceptorAdapter ( ) { @ java.lang.Override public < T > boolean boolean ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < T > org.springframework.web.context.request.async.DeferredResult<T> ) throws java.lang.Exception { throw java.lang.Exception ; } } ; this . org.springframework.web.context.request.async.WebAsyncManager . registerDeferredResultInterceptor ( STRING , org.springframework.web.context.request.async.DeferredResultProcessingInterceptor ) ; this . org.springframework.web.context.request.async.WebAsyncManager . startDeferredResultProcessing ( org.springframework.web.context.request.async.DeferredResult<java.lang.Integer> ) ; AsyncEvent org.springframework.web.context.request.async.AsyncEvent = null ; this . org.springframework.web.context.request.async.StandardServletAsyncWebRequest . onTimeout ( org.springframework.web.context.request.async.AsyncEvent ) ; assertTrue ( this . org.springframework.web.context.request.async.WebAsyncManager . hasConcurrentResult ( ) ) ; assertEquals ( java.lang.Exception , this . org.springframework.web.context.request.async.WebAsyncManager . getConcurrentResult ( ) ) ; assertEquals ( STRING , ( ( MockAsyncContext ) this . org.springframework.web.context.request.async.MockHttpServletRequest . getAsyncContext ( ) ) . getDispatchedPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > boolean boolean ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , DeferredResult < T > org.springframework.web.context.request.async.DeferredResult<T> ) throws java.lang.Exception { throw java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return NUMBER ; }  <METHOD_END>
