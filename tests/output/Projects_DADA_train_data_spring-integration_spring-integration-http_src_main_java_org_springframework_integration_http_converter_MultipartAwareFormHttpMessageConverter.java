<METHOD_START> public void void ( java.nio.charset.Charset java.nio.charset.Charset ) { this . org.springframework.integration.http.converter.AllEncompassingFormHttpMessageConverter . setCharset ( java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> public void void ( MultipartFileReader < ? > org.springframework.integration.http.converter.MultipartFileReader<?> ) { Assert . notNull ( org.springframework.integration.http.converter.MultipartFileReader<> , STRING ) ; this . org.springframework.integration.http.converter.MultipartFileReader<?> = org.springframework.integration.http.converter.MultipartFileReader<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.integration.http.converter.MediaType> < MediaType > java.util.List<org.springframework.integration.http.converter.MediaType> ( ) { return this . org.springframework.integration.http.converter.AllEncompassingFormHttpMessageConverter . getSupportedMediaTypes ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.integration.http.converter.MediaType ) { if ( ! ( MultiValueMap .class . boolean ( java.lang.Class<> ) || byte [] .class . boolean ( java.lang.Class<> ) ) ) { return false ; } if ( org.springframework.integration.http.converter.MediaType != null ) { return MediaType . APPLICATION_FORM_URLENCODED . includes ( org.springframework.integration.http.converter.MediaType ) || MediaType . MULTIPART_FORM_DATA . includes ( org.springframework.integration.http.converter.MediaType ) ; } else { return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.integration.http.converter.MediaType ) { return this . org.springframework.integration.http.converter.AllEncompassingFormHttpMessageConverter . canWrite ( java.lang.Class<> , org.springframework.integration.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.http.converter.MultiValueMap<java.lang.String,?> < java.lang.String , ? > org.springframework.integration.http.converter.MultiValueMap<java.lang.String,?> ( java.lang.Class<? extends org.springframework.integration.http.converter.MultiValueMap<java.lang.String,?>> < ? extends MultiValueMap < java.lang.String , ? > > java.lang.Class<? extends org.springframework.integration.http.converter.MultiValueMap<java.lang.String,?>> , HttpInputMessage org.springframework.integration.http.converter.HttpInputMessage ) throws java.io.IOException , org.springframework.integration.http.converter.HttpMessageNotReadableException { MediaType org.springframework.integration.http.converter.MediaType = org.springframework.integration.http.converter.HttpInputMessage . getHeaders ( ) . getContentType ( ) ; if ( ! MediaType . MULTIPART_FORM_DATA . includes ( org.springframework.integration.http.converter.MediaType ) ) { return this . org.springframework.integration.http.converter.AllEncompassingFormHttpMessageConverter . read ( java.lang.Class<> , org.springframework.integration.http.converter.HttpInputMessage ) ; } Assert . state ( org.springframework.integration.http.converter.HttpInputMessage instanceof MultipartHttpInputMessage , STRING + STRING ) ; MultipartHttpInputMessage org.springframework.integration.http.converter.MultipartHttpInputMessage = ( MultipartHttpInputMessage ) org.springframework.integration.http.converter.HttpInputMessage ; return this . org.springframework.integration.http.converter.MultiValueMap<java.lang.String,?> ( org.springframework.integration.http.converter.MultipartHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.converter.MultiValueMap<java.lang.String,?> < java.lang.String , ? > org.springframework.integration.http.converter.MultiValueMap<java.lang.String,?> ( MultipartHttpInputMessage org.springframework.integration.http.converter.MultipartHttpInputMessage ) throws java.io.IOException { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.integration.http.converter.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap < java.lang.String , java.lang.Object > ( ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.integration.http.converter.MultipartHttpInputMessage . getParameterMap ( ) ; for ( java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { org.springframework.integration.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( ( java.lang.String ) java.util.Map.Entry<,> . getKey ( ) , java.util.Map.Entry<,> . getValue ( ) ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.integration.http.converter.MultipartFile> < java.lang.String , MultipartFile > java.util.Map.Entry<java.lang.String,org.springframework.integration.http.converter.MultipartFile> : org.springframework.integration.http.converter.MultipartHttpInputMessage . getFileMap ( ) . entrySet ( ) ) { MultipartFile org.springframework.integration.http.converter.MultipartFile = java.util.Map.Entry<java.lang.String,org.springframework.integration.http.converter.MultipartFile> . getValue ( ) ; if ( org.springframework.integration.http.converter.MultipartFile . isEmpty ( ) ) { continue; } org.springframework.integration.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . add ( java.util.Map.Entry<java.lang.String,org.springframework.integration.http.converter.MultipartFile> . getKey ( ) , this . org.springframework.integration.http.converter.MultipartFileReader<> . readMultipartFile ( org.springframework.integration.http.converter.MultipartFile ) ) ; } return org.springframework.integration.http.converter.MultiValueMap<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MultiValueMap < java.lang.String , ? > org.springframework.integration.http.converter.MultiValueMap<java.lang.String,?> , MediaType org.springframework.integration.http.converter.MediaType , HttpOutputMessage org.springframework.integration.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.integration.http.converter.HttpMessageNotWritableException { this . org.springframework.integration.http.converter.AllEncompassingFormHttpMessageConverter . write ( org.springframework.integration.http.converter.MultiValueMap<java.lang.String,> , org.springframework.integration.http.converter.MediaType , org.springframework.integration.http.converter.HttpOutputMessage ) ; }  <METHOD_END>
