<METHOD_START> public void ( CouchbaseEntityInformation < T , java.lang.String > org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> , CouchbaseOperations org.springframework.data.couchbase.repository.support.CouchbaseOperations ) { super( org.springframework.data.couchbase.repository.support.CouchbaseEntityInformation<T,java.lang.String> , org.springframework.data.couchbase.repository.support.CouchbaseOperations ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( Sort org.springframework.data.couchbase.repository.support.Sort ) { Assert . notNull ( org.springframework.data.couchbase.repository.support.Sort , STRING ) ; WherePath org.springframework.data.couchbase.repository.support.WherePath = N1qlUtils . createSelectFromForEntity ( getCouchbaseOperations ( ) . getCouchbaseBucket ( ) . name ( ) ) ; Expression org.springframework.data.couchbase.repository.support.Expression = N1qlUtils . createWhereFilterForEntity ( null , getCouchbaseOperations ( ) . getConverter ( ) , getEntityInformation ( ) ) ; com . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase [] com.couchbase.client.java.query.dsl.Sort[] = N1qlUtils . createSort ( org.springframework.data.couchbase.repository.support.Sort , getCouchbaseOperations ( ) . getConverter ( ) ) ; Statement org.springframework.data.couchbase.repository.support.Statement = org.springframework.data.couchbase.repository.support.WherePath . where ( org.springframework.data.couchbase.repository.support.Expression ) . orderBy ( com.couchbase.client.java.query.dsl.Sort[] ) ; ScanConsistency org.springframework.data.couchbase.repository.support.ScanConsistency = getCouchbaseOperations ( ) . getDefaultConsistency ( ) . n1qlConsistency ( ) ; N1qlQuery org.springframework.data.couchbase.repository.support.N1qlQuery = N1qlQuery . simple ( org.springframework.data.couchbase.repository.support.Statement , N1qlParams . build ( ) . consistency ( org.springframework.data.couchbase.repository.support.ScanConsistency ) ) ; return getCouchbaseOperations ( ) . findByN1QL ( org.springframework.data.couchbase.repository.support.N1qlQuery , getEntityInformation ( ) . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.Page<T> < T > org.springframework.data.couchbase.repository.support.Page<T> ( Pageable org.springframework.data.couchbase.repository.support.Pageable ) { Assert . notNull ( org.springframework.data.couchbase.repository.support.Pageable , STRING ) ; ScanConsistency org.springframework.data.couchbase.repository.support.ScanConsistency = getCouchbaseOperations ( ) . getDefaultConsistency ( ) . n1qlConsistency ( ) ; Statement org.springframework.data.couchbase.repository.support.Statement = N1qlUtils . createCountQueryForEntity ( getCouchbaseOperations ( ) . getCouchbaseBucket ( ) . name ( ) , getCouchbaseOperations ( ) . getConverter ( ) , getEntityInformation ( ) ) ; SimpleN1qlQuery org.springframework.data.couchbase.repository.support.SimpleN1qlQuery = N1qlQuery . simple ( org.springframework.data.couchbase.repository.support.Statement , N1qlParams . build ( ) . consistency ( org.springframework.data.couchbase.repository.support.ScanConsistency ) ) ; java.util.List<org.springframework.data.couchbase.repository.support.CountFragment> < CountFragment > java.util.List<org.springframework.data.couchbase.repository.support.CountFragment> = getCouchbaseOperations ( ) . findByN1QLProjection ( org.springframework.data.couchbase.repository.support.SimpleN1qlQuery , CountFragment .class ) ; long long = java.util.List<org.springframework.data.couchbase.repository.support.CountFragment> == null || java.util.List<org.springframework.data.couchbase.repository.support.CountFragment> . isEmpty ( ) ? NUMBER : java.util.List<org.springframework.data.couchbase.repository.support.CountFragment> . get ( NUMBER ) . count ; WherePath org.springframework.data.couchbase.repository.support.WherePath = N1qlUtils . createSelectFromForEntity ( getCouchbaseOperations ( ) . getCouchbaseBucket ( ) . name ( ) ) ; Expression org.springframework.data.couchbase.repository.support.Expression = N1qlUtils . createWhereFilterForEntity ( null , getCouchbaseOperations ( ) . getConverter ( ) , getEntityInformation ( ) ) ; GroupByPath org.springframework.data.couchbase.repository.support.GroupByPath = org.springframework.data.couchbase.repository.support.WherePath . where ( org.springframework.data.couchbase.repository.support.Expression ) ; LimitPath org.springframework.data.couchbase.repository.support.LimitPath = org.springframework.data.couchbase.repository.support.GroupByPath ; if ( org.springframework.data.couchbase.repository.support.Pageable . getSort ( ) . isSorted ( ) ) { com . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase [] com.couchbase.client.java.query.dsl.Sort[] = N1qlUtils . createSort ( org.springframework.data.couchbase.repository.support.Pageable . getSort ( ) , getCouchbaseOperations ( ) . getConverter ( ) ) ; org.springframework.data.couchbase.repository.support.LimitPath = org.springframework.data.couchbase.repository.support.GroupByPath . orderBy ( com.couchbase.client.java.query.dsl.Sort[] ) ; } Statement org.springframework.data.couchbase.repository.support.Statement = org.springframework.data.couchbase.repository.support.LimitPath . limit ( org.springframework.data.couchbase.repository.support.Pageable . getPageSize ( ) ) . offset ( java.lang.Math . int ( org.springframework.data.couchbase.repository.support.Pageable . getOffset ( ) ) ) ; N1qlQuery org.springframework.data.couchbase.repository.support.N1qlQuery = N1qlQuery . simple ( org.springframework.data.couchbase.repository.support.Statement , N1qlParams . build ( ) . consistency ( org.springframework.data.couchbase.repository.support.ScanConsistency ) ) ; java.util.List<T> < T > java.util.List<T> = getCouchbaseOperations ( ) . findByN1QL ( org.springframework.data.couchbase.repository.support.N1qlQuery , getEntityInformation ( ) . getJavaType ( ) ) ; return new PageImpl < T > ( java.util.List<T> , org.springframework.data.couchbase.repository.support.Pageable , long ) ; }  <METHOD_END>
