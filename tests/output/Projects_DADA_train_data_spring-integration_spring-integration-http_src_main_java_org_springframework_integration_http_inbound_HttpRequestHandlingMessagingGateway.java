<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { super( boolean ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public final void void ( HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest , HttpServletResponse org.springframework.integration.http.inbound.HttpServletResponse )			throws org.springframework.integration.http.inbound.ServletException , java.io.IOException { java.lang.Object java.lang.Object = null ; Message < ? > org.springframework.integration.http.inbound.Message<?> ; final ServletServerHttpRequest org.springframework.integration.http.inbound.ServletServerHttpRequest = new ServletServerHttpRequest ( org.springframework.integration.http.inbound.HttpServletRequest ) ; final ServletServerHttpResponse org.springframework.integration.http.inbound.ServletServerHttpResponse = new ServletServerHttpResponse ( org.springframework.integration.http.inbound.HttpServletResponse ) ; try { org.springframework.integration.http.inbound.Message<?> = super. doHandleRequest ( org.springframework.integration.http.inbound.HttpServletRequest , org.springframework.integration.http.inbound.HttpServletResponse ) ; if ( org.springframework.integration.http.inbound.Message<> != null ) { java.lang.Object = setupResponseAndConvertReply ( org.springframework.integration.http.inbound.ServletServerHttpResponse , org.springframework.integration.http.inbound.Message<> ) ; } } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Object = java.lang.Object ( java.lang.Exception ) ; } if ( java.lang.Object != null ) { if ( java.lang.Object instanceof HttpStatus ) { org.springframework.integration.http.inbound.ServletServerHttpResponse . setStatusCode ( ( HttpStatus ) java.lang.Object ) ; } else { this . void ( java.lang.Object , org.springframework.integration.http.inbound.ServletServerHttpResponse , org.springframework.integration.http.inbound.ServletServerHttpRequest . getHeaders ( ) . getAccept ( ) ) ; } } else { setStatusCodeIfNeeded ( org.springframework.integration.http.inbound.ServletServerHttpResponse ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Exception java.lang.Exception ) throws java.io.IOException { if ( this . boolean && isExpectReply ( ) ) { return java.lang.Exception ; } else { if ( java.lang.Exception instanceof java.io.IOException ) { throw ( java.io.IOException ) java.lang.Exception ; } else if ( java.lang.Exception instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Exception ; } else { throw new MessagingException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private void void ( java.lang.Object java.lang.Object , ServletServerHttpResponse org.springframework.integration.http.inbound.ServletServerHttpResponse , java.util.List<org.springframework.integration.http.inbound.MediaType> < MediaType > java.util.List<org.springframework.integration.http.inbound.MediaType> )			throws java.io.IOException { if ( CollectionUtils . isEmpty ( java.util.List<org.springframework.integration.http.inbound.MediaType> ) ) { java.util.List<org.springframework.integration.http.inbound.MediaType> = java.util.Collections . java.util.List ( MediaType . ALL ) ; } for ( HttpMessageConverter org.springframework.integration.http.inbound.HttpMessageConverter : this . getMessageConverters ( ) ) { for ( MediaType org.springframework.integration.http.inbound.MediaType : java.util.List<org.springframework.integration.http.inbound.MediaType> ) { if ( org.springframework.integration.http.inbound.HttpMessageConverter . canWrite ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , org.springframework.integration.http.inbound.MediaType ) ) { org.springframework.integration.http.inbound.HttpMessageConverter . write ( java.lang.Object , org.springframework.integration.http.inbound.MediaType , org.springframework.integration.http.inbound.ServletServerHttpResponse ) ; return; } } } throw new MessagingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING + java.util.List<org.springframework.integration.http.inbound.MediaType> + STRING ) ; }  <METHOD_END>
