<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebExceptionHandler org.springframework.web.server.handler.WebExceptionHandler = new org.springframework.web.server.handler.ExceptionHandlingHttpHandlerTests.BadRequestExceptionHandler ( ) ; org.springframework.web.server.handler.WebHandler ( org.springframework.web.server.handler.WebExceptionHandler ) . handle ( this . org.springframework.web.server.handler.MockServerWebExchange ) . block ( ) ; assertEquals ( HttpStatus . BAD_REQUEST , this . org.springframework.web.server.handler.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebExceptionHandler [] org.springframework.web.server.handler.WebExceptionHandler[] = new WebExceptionHandler [] { new org.springframework.web.server.handler.ExceptionHandlingHttpHandlerTests.UnresolvedExceptionHandler ( ) , new org.springframework.web.server.handler.ExceptionHandlingHttpHandlerTests.UnresolvedExceptionHandler ( ) , new org.springframework.web.server.handler.ExceptionHandlingHttpHandlerTests.BadRequestExceptionHandler ( ) , new org.springframework.web.server.handler.ExceptionHandlingHttpHandlerTests.UnresolvedExceptionHandler ( ) } ; org.springframework.web.server.handler.WebHandler ( org.springframework.web.server.handler.WebExceptionHandler[] ) . handle ( this . org.springframework.web.server.handler.MockServerWebExchange ) . block ( ) ; assertEquals ( HttpStatus . BAD_REQUEST , this . org.springframework.web.server.handler.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebExceptionHandler org.springframework.web.server.handler.WebExceptionHandler = new org.springframework.web.server.handler.ExceptionHandlingHttpHandlerTests.UnresolvedExceptionHandler ( ) ; org.springframework.web.server.handler.WebHandler ( org.springframework.web.server.handler.WebExceptionHandler ) . handle ( this . org.springframework.web.server.handler.MockServerWebExchange ) . block ( ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , this . org.springframework.web.server.handler.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { WebExceptionHandler org.springframework.web.server.handler.WebExceptionHandler = new org.springframework.web.server.handler.ExceptionHandlingHttpHandlerTests.BadRequestExceptionHandler ( ) ; org.springframework.web.server.handler.WebHandler ( org.springframework.web.server.handler.WebExceptionHandler ) . handle ( this . org.springframework.web.server.handler.MockServerWebExchange ) . block ( ) ; assertEquals ( HttpStatus . BAD_REQUEST , this . org.springframework.web.server.handler.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.server.handler.WebHandler org.springframework.web.server.handler.WebHandler ( WebExceptionHandler ... org.springframework.web.server.handler.WebExceptionHandler[] ) { return new ExceptionHandlingWebHandler ( this . org.springframework.web.server.handler.WebHandler , java.util.Arrays . java.util.List ( org.springframework.web.server.handler.WebExceptionHandler[] ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.RuntimeException java.lang.RuntimeException ) { this( java.lang.RuntimeException , false ); }  <METHOD_END>
<METHOD_START> void ( java.lang.RuntimeException java.lang.RuntimeException , boolean boolean ) { this . java.lang.RuntimeException = java.lang.RuntimeException ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange ) { if ( this . boolean ) { throw this . java.lang.RuntimeException ; } return Mono . error ( this . java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , java.lang.Throwable java.lang.Throwable ) { org.springframework.web.server.handler.ServerWebExchange . getResponse ( ) . setStatusCode ( HttpStatus . BAD_REQUEST ) ; return Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.handler.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.handler.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.handler.ServerWebExchange , java.lang.Throwable java.lang.Throwable ) { return Mono . error ( java.lang.Throwable ) ; }  <METHOD_END>
