<METHOD_START> @ Before public void void ( ) { org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . setWarnLogCategory ( org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . getClass ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeException org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeException = new org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeException ( ) ; ModelAndView org.springframework.web.servlet.mvc.annotation.ModelAndView = org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeException ) ; void ( org.springframework.web.servlet.mvc.annotation.ModelAndView , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeFromComposedResponseStatusException org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeFromComposedResponseStatusException = new org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeFromComposedResponseStatusException ( ) ; ModelAndView org.springframework.web.servlet.mvc.annotation.ModelAndView = org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeFromComposedResponseStatusException ) ; void ( org.springframework.web.servlet.mvc.annotation.ModelAndView , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonException org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonException = new org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonException ( ) ; ModelAndView org.springframework.web.servlet.mvc.annotation.ModelAndView = org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonException ) ; void ( org.springframework.web.servlet.mvc.annotation.ModelAndView , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ; LocaleContextHolder . setLocale ( java.util.Locale ) ; try { StaticMessageSource org.springframework.web.servlet.mvc.annotation.StaticMessageSource = new StaticMessageSource ( ) ; org.springframework.web.servlet.mvc.annotation.StaticMessageSource . addMessage ( STRING , java.util.Locale , STRING ) ; org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . setMessageSource ( org.springframework.web.servlet.mvc.annotation.StaticMessageSource ) ; org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonMessageException org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonMessageException = new org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonMessageException ( ) ; org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonMessageException ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse . getErrorMessage ( ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse , null , java.lang.Exception ) ; ModelAndView org.springframework.web.servlet.mvc.annotation.ModelAndView = org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse , null , java.lang.Exception ) ; assertNull ( STRING , org.springframework.web.servlet.mvc.annotation.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Exception java.lang.Exception = new org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolverTests.StatusCodeAndReasonMessageException ( ) ; TypeMismatchException org.springframework.web.servlet.mvc.annotation.TypeMismatchException = new TypeMismatchException ( STRING , ITestBean .class , java.lang.Exception ) ; ModelAndView org.springframework.web.servlet.mvc.annotation.ModelAndView = org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.annotation.TypeMismatchException ) ; void ( org.springframework.web.servlet.mvc.annotation.ModelAndView , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseStatusException org.springframework.web.servlet.mvc.annotation.ResponseStatusException = new ResponseStatusException ( HttpStatus . BAD_REQUEST , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.annotation.ModelAndView = org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse , null , org.springframework.web.servlet.mvc.annotation.ResponseStatusException ) ; void ( org.springframework.web.servlet.mvc.annotation.ModelAndView , NUMBER , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( ModelAndView org.springframework.web.servlet.mvc.annotation.ModelAndView , int int , java.lang.String java.lang.String ) { assertTrue ( STRING , org.springframework.web.servlet.mvc.annotation.ModelAndView != null && org.springframework.web.servlet.mvc.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( int , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse . getStatus ( ) ) ; if ( java.lang.String != null ) { assertEquals ( java.lang.String , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse . getErrorMessage ( ) ) ; } assertTrue ( org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse . isCommitted ( ) ) ; }  <METHOD_END>
