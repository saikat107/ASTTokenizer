<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.ArrayList<org.springframework.integration.util.BeanFactoryTypeConverterTests> < org.springframework.integration.util.BeanFactoryTypeConverterTests > java.util.ArrayList<org.springframework.integration.util.BeanFactoryTypeConverterTests> = ( java.util.ArrayList<org.springframework.integration.util.BeanFactoryTypeConverterTests> < org.springframework.integration.util.BeanFactoryTypeConverterTests > ) org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( java.util.List<java.lang.String> , TypeDescriptor . forObject ( java.util.List<java.lang.String> ) , TypeDescriptor . forObject ( new java.util.ArrayList<org.springframework.integration.util.BeanFactoryTypeConverterTests> < org.springframework.integration.util.BeanFactoryTypeConverterTests > ( ) ) ) ; assertEquals ( java.util.List<java.lang.String> , java.util.ArrayList<org.springframework.integration.util.BeanFactoryTypeConverterTests> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( NUMBER , TypeDescriptor . valueOf ( java.lang.Integer .class ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> = ( java.util.Collection<java.lang.Integer> < java.lang.Integer > ) org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( NUMBER , TypeDescriptor . valueOf ( java.lang.Integer .class ) , TypeDescriptor . forObject ( new java.util.ArrayList<java.lang.Integer> < java.lang.Integer > ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER ) ) ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER ) , java.util.Collection<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; MessageHeaders org.springframework.integration.util.MessageHeaders = new GenericMessage < java.lang.String > ( STRING ) . getHeaders ( ) ; assertSame ( org.springframework.integration.util.MessageHeaders , org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( org.springframework.integration.util.MessageHeaders , TypeDescriptor . valueOf ( MessageHeaders .class ) , TypeDescriptor . valueOf ( MessageHeaders .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; Message < java.lang.String > org.springframework.integration.util.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.util.Message<java.lang.String> = MessageHistory . write ( org.springframework.integration.util.Message<java.lang.String> , new NamedComponent ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ) ; MessageHistory org.springframework.integration.util.MessageHistory = MessageHistory . read ( org.springframework.integration.util.Message<java.lang.String> ) ; assertSame ( org.springframework.integration.util.MessageHistory , org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( org.springframework.integration.util.MessageHistory , TypeDescriptor . valueOf ( MessageHistory .class ) , TypeDescriptor . valueOf ( MessageHistory .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; byte [] byte[] = new byte [ NUMBER ] ; assertSame ( byte[] , org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( byte[] , TypeDescriptor . valueOf ( byte [] .class ) , TypeDescriptor . valueOf ( byte [] .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; java.lang.String java.lang.String = STRING ; assertSame ( java.lang.String , org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( java.lang.String , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( java.lang.Object .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConversionService org.springframework.integration.util.ConversionService = mock ( ConversionService .class ) ; when ( org.springframework.integration.util.ConversionService . canConvert ( any ( TypeDescriptor .class ) , any ( TypeDescriptor .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.integration.util.ConversionService . convert ( any ( ) , any ( TypeDescriptor .class ) , any ( TypeDescriptor .class ) ) ) . thenReturn ( STRING ) ; BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.ConversionService ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( new DefaultListableBeanFactory ( ) ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertEquals ( STRING , org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( java.lang.Object , TypeDescriptor . valueOf ( java.lang.Object .class ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.integration.util.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; DefaultConversionService org.springframework.integration.util.DefaultConversionService = new DefaultConversionService ( ) ; org.springframework.integration.util.DefaultConversionService . addConverter ( new Converter < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo , org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar > ( ) { @ java.lang.Override public org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ) { return new org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( ) ; } } ) ; BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.DefaultConversionService ) ; org.springframework.integration.util.DefaultListableBeanFactory . setConversionService ( org.springframework.integration.util.DefaultConversionService ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( org.springframework.integration.util.DefaultListableBeanFactory ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>>> < java.lang.String , java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> < java.lang.String , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>>> ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>>> < java.lang.String , java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>> < java.lang.String , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>>> ; TypeDescriptor org.springframework.integration.util.TypeDescriptor = TypeDescriptor . map ( java.util.Map .class , null , null ) ; TypeDescriptor org.springframework.integration.util.TypeDescriptor = TypeDescriptor . map ( java.util.Map .class , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . map ( java.util.Map .class , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . collection ( java.util.Set .class , TypeDescriptor . valueOf ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar .class ) ) ) ) ; java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> = new java.util.HashSet<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > ( ) ; java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> . boolean ( new org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ( ) ) ; java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> < java.lang.String , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > > java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> = new java.util.HashMap<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> < java.lang.String , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > > ( ) ; java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> . java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> ( STRING , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>>> < java.lang.String , java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> < java.lang.String , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > > > ( ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>>> . java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> ( STRING , java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>>> = ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>>> < java.lang.String , java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>> < java.lang.String , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar > > > ) org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>>> , org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.TypeDescriptor ) ; assertThat ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>>> . java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>> ( STRING ) . java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> ( STRING ) . java.util.Iterator<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> ( ) . org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( ) , instanceOf ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar .class ) ) ; org.springframework.integration.util.BeanFactoryTypeConverterTests.Service org.springframework.integration.util.BeanFactoryTypeConverterTests.Service = new org.springframework.integration.util.BeanFactoryTypeConverterTests.Service ( ) ; MethodInvokingMessageProcessor < org.springframework.integration.util.BeanFactoryTypeConverterTests.Service > org.springframework.integration.util.MethodInvokingMessageProcessor<org.springframework.integration.util.BeanFactoryTypeConverterTests.Service> = new MethodInvokingMessageProcessor <> ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Service , STRING ) ; org.springframework.integration.util.MethodInvokingMessageProcessor<org.springframework.integration.util.BeanFactoryTypeConverterTests.Service> . setConversionService ( org.springframework.integration.util.DefaultConversionService ) ; org.springframework.integration.util.MethodInvokingMessageProcessor<org.springframework.integration.util.BeanFactoryTypeConverterTests.Service> . setUseSpelInvoker ( true ) ; ServiceActivatingHandler org.springframework.integration.util.ServiceActivatingHandler = new ServiceActivatingHandler ( org.springframework.integration.util.MethodInvokingMessageProcessor<org.springframework.integration.util.BeanFactoryTypeConverterTests.Service> ) ; QueueChannel org.springframework.integration.util.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.util.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.util.QueueChannel ) ; org.springframework.integration.util.ServiceActivatingHandler . handleMessage ( new GenericMessage < java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>>> < java.lang.String , java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>> < java.lang.String , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > > > > ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo>>> ) ) ; Message < ? > org.springframework.integration.util.Message<?> = org.springframework.integration.util.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.util.Message<> ) ; assertEquals ( STRING , org.springframework.integration.util.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ) { return new org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.integration.util.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; DefaultConversionService org.springframework.integration.util.DefaultConversionService = new DefaultConversionService ( ) ; org.springframework.integration.util.DefaultConversionService . addConverter ( new Converter < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo , org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar > ( ) { @ java.lang.Override public org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ) { return new org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( ) ; } } ) ; BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.DefaultConversionService ) ; org.springframework.integration.util.DefaultListableBeanFactory . setConversionService ( org.springframework.integration.util.DefaultConversionService ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( org.springframework.integration.util.DefaultListableBeanFactory ) ; org.springframework.integration.util.BeanFactoryTypeConverterTests.Service org.springframework.integration.util.BeanFactoryTypeConverterTests.Service = new org.springframework.integration.util.BeanFactoryTypeConverterTests.Service ( ) ; MethodInvokingMessageProcessor < org.springframework.integration.util.BeanFactoryTypeConverterTests.Service > org.springframework.integration.util.MethodInvokingMessageProcessor<org.springframework.integration.util.BeanFactoryTypeConverterTests.Service> = new MethodInvokingMessageProcessor <> ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Service , STRING ) ; org.springframework.integration.util.MethodInvokingMessageProcessor<org.springframework.integration.util.BeanFactoryTypeConverterTests.Service> . setConversionService ( org.springframework.integration.util.DefaultConversionService ) ; org.springframework.integration.util.MethodInvokingMessageProcessor<org.springframework.integration.util.BeanFactoryTypeConverterTests.Service> . setUseSpelInvoker ( true ) ; ServiceActivatingHandler org.springframework.integration.util.ServiceActivatingHandler = new ServiceActivatingHandler ( org.springframework.integration.util.MethodInvokingMessageProcessor<org.springframework.integration.util.BeanFactoryTypeConverterTests.Service> ) ; QueueChannel org.springframework.integration.util.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.util.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.util.QueueChannel ) ; org.springframework.integration.util.ServiceActivatingHandler . handleMessage ( new GenericMessage < java.util.Collection<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > > ( java.util.Collections . java.util.List<org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo> ( new org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ( ) ) ) ) ; Message < ? > org.springframework.integration.util.Message<?> = org.springframework.integration.util.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.util.Message<> ) ; assertEquals ( STRING , org.springframework.integration.util.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ) { return new org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultConversionService org.springframework.integration.util.DefaultConversionService = new DefaultConversionService ( ) ; BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.DefaultConversionService ) ; java.lang.Object java.lang.Object = org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( null , null , TypeDescriptor . valueOf ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar .class ) ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultConversionService org.springframework.integration.util.DefaultConversionService = new DefaultConversionService ( ) ; BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.DefaultConversionService ) ; java.lang.Object java.lang.Object = org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( null , null , TypeDescriptor . valueOf ( java.lang.Void .class ) ) ; assertNull ( java.lang.Object ) ; java.lang.Object = org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( null , null , TypeDescriptor . valueOf ( java.lang.Void . java.lang.Class<java.lang.Void> ) ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultConversionService org.springframework.integration.util.DefaultConversionService = new DefaultConversionService ( ) ; BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.DefaultConversionService ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( java.util.UUID , TypeDescriptor . valueOf ( java.util.UUID .class ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( java.util.UUID . java.lang.String ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultConversionService org.springframework.integration.util.DefaultConversionService = new DefaultConversionService ( ) ; final org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo = new org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ( ) ; org.springframework.integration.util.DefaultConversionService . addConverter ( new Converter < java.lang.String , org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo > ( ) { @ java.lang.Override public org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ( java.lang.String java.lang.String ) { return org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ; } } ) ; BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.DefaultConversionService ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( java.util.UUID , TypeDescriptor . valueOf ( java.util.UUID .class ) , TypeDescriptor . valueOf ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo .class ) ) ; assertSame ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ( java.lang.String java.lang.String ) { return org.springframework.integration.util.BeanFactoryTypeConverterTests.Foo ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultConversionService org.springframework.integration.util.DefaultConversionService = new DefaultConversionService ( ) ; BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.DefaultConversionService ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( java.util.UUID . java.lang.String ( ) , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( java.util.UUID .class ) ) ; assertEquals ( java.util.UUID , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConversionService org.springframework.integration.util.ConversionService = mock ( ConversionService .class ) ; final BeanFactoryTypeConverter org.springframework.integration.util.BeanFactoryTypeConverter = new BeanFactoryTypeConverter ( org.springframework.integration.util.ConversionService ) ; ConfigurableBeanFactory org.springframework.integration.util.ConfigurableBeanFactory = mock ( ConfigurableBeanFactory .class ) ; SimpleTypeConverter org.springframework.integration.util.SimpleTypeConverter = spy ( new SimpleTypeConverter ( ) ) ; when ( org.springframework.integration.util.ConfigurableBeanFactory . getTypeConverter ( ) ) . thenReturn ( org.springframework.integration.util.SimpleTypeConverter ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; doAnswer ( invocation -> { count . incrementAndGet ( ) ; Thread . sleep ( NUMBER ) ; concurrentlyInGetDefaultEditor . set ( inGetDefaultEditor . getAndSet ( true ) ) ; Thread . sleep ( NUMBER ) ; inGetDefaultEditor . set ( false ) ; return invocation . callRealMethod ( ) ; } ) . when ( org.springframework.integration.util.SimpleTypeConverter ) . getDefaultEditor ( java.util.UUID .class ) ; org.springframework.integration.util.BeanFactoryTypeConverter . setBeanFactory ( org.springframework.integration.util.ConfigurableBeanFactory ) ; final TypeDescriptor org.springframework.integration.util.TypeDescriptor = TypeDescriptor . valueOf ( java.util.UUID .class ) ; final TypeDescriptor org.springframework.integration.util.TypeDescriptor = TypeDescriptor . valueOf ( java.lang.String .class ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; java.lang.Runnable java.lang.Runnable = ( ) { org.springframework.integration.util.BeanFactoryTypeConverter . canConvert ( org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.TypeDescriptor ) ; org.springframework.integration.util.BeanFactoryTypeConverter . convertValue ( java.util.UUID . java.util.UUID ( ) , org.springframework.integration.util.TypeDescriptor , org.springframework.integration.util.TypeDescriptor ) ; } ; java.util.concurrent.ExecutorService . void ( java.lang.Runnable ) ; java.util.concurrent.ExecutorService . void ( java.lang.Runnable ) ; java.util.concurrent.ExecutorService . void ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>>> < java.lang.String , java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>> < java.lang.String , java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>>> ) { assertThat ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>>> . java.util.Map<java.lang.String,java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar>> ( STRING ) . java.util.Set<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> ( STRING ) . java.util.Iterator<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> ( ) . org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( ) , instanceOf ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar .class ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.util.Collection<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> < org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar > java.util.Collection<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> ) { assertThat ( java.util.Collection<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> . java.util.Iterator<org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar> ( ) . org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar ( ) , instanceOf ( org.springframework.integration.util.BeanFactoryTypeConverterTests.Bar .class ) ) ; return STRING ; }  <METHOD_END>
