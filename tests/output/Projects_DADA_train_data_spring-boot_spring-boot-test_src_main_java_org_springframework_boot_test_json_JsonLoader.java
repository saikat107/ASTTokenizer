<METHOD_START> void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.nio.charset.Charset java.nio.charset.Charset ) { this . java.lang.Class<?> = java.lang.Class<> ; this . java.nio.charset.Charset = java.nio.charset.Charset == null ? java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) : java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.CharSequence java.lang.CharSequence ) { if ( java.lang.CharSequence == null ) { return null ; } if ( java.lang.CharSequence . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.String ( new ClassPathResource ( java.lang.CharSequence . java.lang.String ( ) , this . java.lang.Class<> ) ) ; } return java.lang.CharSequence . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String ( new ClassPathResource ( java.lang.String , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( byte [] byte[] ) { return java.lang.String ( new java.io.ByteArrayInputStream ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.io.File java.io.File ) { try { return java.lang.String ( new java.io.FileInputStream ( java.io.File ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.io.File , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( Resource org.springframework.boot.test.json.Resource ) { try { return java.lang.String ( org.springframework.boot.test.json.Resource . getInputStream ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.boot.test.json.Resource , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.io.InputStream java.io.InputStream ) { try { return FileCopyUtils . copyToString ( new java.io.InputStreamReader ( java.io.InputStream , this . java.nio.charset.Charset ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
