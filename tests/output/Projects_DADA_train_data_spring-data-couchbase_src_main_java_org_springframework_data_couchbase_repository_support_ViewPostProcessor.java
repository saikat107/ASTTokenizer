<METHOD_START> @ java.lang.Override public void void ( ProxyFactory org.springframework.data.couchbase.repository.support.ProxyFactory , RepositoryInformation org.springframework.data.couchbase.repository.support.RepositoryInformation ) { org.springframework.data.couchbase.repository.support.ProxyFactory . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; org.springframework.data.couchbase.repository.support.ProxyFactory . addAdvice ( org.springframework.data.couchbase.repository.support.ViewPostProcessor.ViewInterceptor . org.springframework.data.couchbase.repository.support.ViewPostProcessor.ViewInterceptor ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.couchbase.repository.support.ViewMetadataProvider org.springframework.data.couchbase.repository.support.ViewMetadataProvider ( ) { return org.springframework.data.couchbase.repository.support.ViewPostProcessor.ThreadBoundViewMetadata . org.springframework.data.couchbase.repository.support.ViewPostProcessor.ThreadBoundViewMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final MethodInvocation org.springframework.data.couchbase.repository.support.MethodInvocation ) throws java.lang.Throwable { final View org.springframework.data.couchbase.repository.support.View = AnnotationUtils . getAnnotation ( org.springframework.data.couchbase.repository.support.MethodInvocation . getMethod ( ) , View .class ) ; if ( org.springframework.data.couchbase.repository.support.View != null ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = java.lang.ThreadLocal<java.util.Map<java.lang.Object,java.lang.Object>> . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; if ( java.util.Map<java.lang.Object,java.lang.Object> == null ) { java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; java.lang.ThreadLocal<java.util.Map<java.lang.Object,java.lang.Object>> . void ( java.util.Map<java.lang.Object,java.lang.Object> ) ; } java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( org.springframework.data.couchbase.repository.support.MethodInvocation . getMethod ( ) , org.springframework.data.couchbase.repository.support.View ) ; } try { return org.springframework.data.couchbase.repository.support.MethodInvocation . proceed ( ) ; } finally { java.lang.ThreadLocal<java.util.Map<java.lang.Object,java.lang.Object>> . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.support.View org.springframework.data.couchbase.repository.support.View ( ) { final MethodInvocation org.springframework.data.couchbase.repository.support.MethodInvocation = ExposeInvocationInterceptor . currentInvocation ( ) ; final java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = java.lang.ThreadLocal<java.util.Map<java.lang.Object,java.lang.Object>> . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; return ( java.util.Map<java.lang.Object,java.lang.Object> == null ) ? null : ( View ) java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( org.springframework.data.couchbase.repository.support.MethodInvocation . getMethod ( ) ) ; }  <METHOD_END>
