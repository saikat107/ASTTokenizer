<METHOD_START> public void void ( IntegrationMBeanExporter org.springframework.integration.monitor.IntegrationMBeanExporter ) { this . org.springframework.integration.monitor.IntegrationMBeanExporter = org.springframework.integration.monitor.IntegrationMBeanExporter ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service ) { this . org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service = org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.monitor.ClassPathXmlApplicationContext = org.springframework.integration.monitor.ClassPathXmlApplicationContext ( STRING , STRING ) ; try { int int = org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . int ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . void ( java.util.concurrent.CountDownLatch ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; } assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( int + NUMBER , org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . int ( ) ) ; int int = org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelSendRate ( STRING + org.springframework.integration.monitor.MessageChannel ) . getCount ( ) ; assertEquals ( STRING , NUMBER , int , NUMBER ) ; long long = org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelSendRate ( STRING + org.springframework.integration.monitor.MessageChannel ) . getCountLong ( ) ; assertEquals ( STRING , long , int , NUMBER ) ; } finally { org.springframework.integration.monitor.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.monitor.ClassPathXmlApplicationContext = org.springframework.integration.monitor.ClassPathXmlApplicationContext ( STRING , STRING ) ; try { int int = org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . int ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . void ( java.util.concurrent.CountDownLatch ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; } try { org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessageHandlingException org.springframework.integration.monitor.MessageHandlingException ) { } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; } assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( int + NUMBER , org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . int ( ) ) ; int int = org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelSendRate ( STRING + org.springframework.integration.monitor.MessageChannel ) . getCount ( ) ; assertEquals ( STRING , NUMBER , int , NUMBER ) ; int int = org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelErrorRate ( STRING + org.springframework.integration.monitor.MessageChannel ) . getCount ( ) ; assertEquals ( STRING , NUMBER , int , NUMBER ) ; } finally { org.springframework.integration.monitor.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.monitor.ClassPathXmlApplicationContext = org.springframework.integration.monitor.ClassPathXmlApplicationContext ( STRING , STRING ) ; try { int int = org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . int ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . void ( java.util.concurrent.CountDownLatch ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; } try { org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } catch ( MessageHandlingException org.springframework.integration.monitor.MessageHandlingException ) { } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Thread . void ( NUMBER ) ; } assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( int + NUMBER , org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . int ( ) ) ; int int = org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelSendRate ( STRING + org.springframework.integration.monitor.MessageChannel ) . getCount ( ) ; assertEquals ( STRING , NUMBER , int ) ; int int = org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelReceiveCount ( STRING + org.springframework.integration.monitor.MessageChannel ) ; assertEquals ( STRING , NUMBER , int ) ; int int = org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelErrorRate ( STRING + org.springframework.integration.monitor.MessageChannel ) . getCount ( ) ; assertEquals ( STRING , NUMBER , int ) ; } finally { org.springframework.integration.monitor.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.monitor.ClassPathXmlApplicationContext = org.springframework.integration.monitor.ClassPathXmlApplicationContext ( java.lang.String , java.lang.String ) ; try { int int = org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . int ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . void ( java.util.concurrent.CountDownLatch ) ; org.springframework.integration.monitor.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( int + NUMBER , org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests.Service . int ( ) ) ; int int = org.springframework.integration.monitor.IntegrationMBeanExporter . getChannelSendRate ( STRING + org.springframework.integration.monitor.MessageChannel ) . getCount ( ) ; assertEquals ( STRING , NUMBER , int , NUMBER ) ; assertThat ( org.springframework.integration.monitor.MessageChannel , Matchers . instanceOf ( ChannelInterceptorAware .class ) ) ; java.util.List<org.springframework.integration.monitor.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.monitor.ChannelInterceptor> = ( ( ChannelInterceptorAware ) org.springframework.integration.monitor.MessageChannel ) . getChannelInterceptors ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.monitor.ChannelInterceptor> . size ( ) ) ; assertThat ( java.util.List<org.springframework.integration.monitor.ChannelInterceptor> . get ( NUMBER ) , Matchers . instanceOf ( WireTap .class ) ) ; } finally { org.springframework.integration.monitor.ClassPathXmlApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.monitor.ClassPathXmlApplicationContext org.springframework.integration.monitor.ClassPathXmlApplicationContext ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { ClassPathXmlApplicationContext org.springframework.integration.monitor.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String , java.lang.Class<? extends org.springframework.integration.monitor.MessageChannelsMonitorIntegrationTests> ( ) ) ; org.springframework.integration.monitor.ClassPathXmlApplicationContext . getAutowireCapableBeanFactory ( ) . autowireBeanProperties ( this , AutowireCapableBeanFactory . AUTOWIRE_BY_TYPE , false ) ; org.springframework.integration.monitor.MessageChannel = org.springframework.integration.monitor.ClassPathXmlApplicationContext . getBean ( java.lang.String , MessageChannel .class ) ; return org.springframework.integration.monitor.ClassPathXmlApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { throw new java.lang.RuntimeException ( STRING ) ; } int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( Message < ? > org.springframework.integration.monitor.Message<?> ) { org.springframework.integration.monitor.Log . debug ( STRING + org.springframework.integration.monitor.Message<> ) ; }  <METHOD_END>
