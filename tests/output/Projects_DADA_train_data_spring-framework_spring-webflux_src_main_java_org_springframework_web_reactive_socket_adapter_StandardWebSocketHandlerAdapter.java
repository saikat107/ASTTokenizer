<METHOD_START> public void ( WebSocketHandler org.springframework.web.reactive.socket.adapter.WebSocketHandler , java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.StandardWebSocketSession> < Session , StandardWebSocketSession > java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.StandardWebSocketSession> ) { Assert . notNull ( org.springframework.web.reactive.socket.adapter.WebSocketHandler , STRING ) ; Assert . notNull ( java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.StandardWebSocketSession> , STRING ) ; this . org.springframework.web.reactive.socket.adapter.WebSocketHandler = org.springframework.web.reactive.socket.adapter.WebSocketHandler ; this . java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.StandardWebSocketSession> = java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.StandardWebSocketSession> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Session org.springframework.web.reactive.socket.adapter.Session , EndpointConfig org.springframework.web.reactive.socket.adapter.EndpointConfig ) { this . org.springframework.web.reactive.socket.adapter.StandardWebSocketSession = this . java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.StandardWebSocketSession> . apply ( org.springframework.web.reactive.socket.adapter.Session ) ; org.springframework.web.reactive.socket.adapter.Session . addMessageHandler ( java.lang.String .class , message -> { WebSocketMessage webSocketMessage = toMessage ( message ) ; this . delegateSession . handleMessage ( webSocketMessage . getType ( ) , webSocketMessage ) ; } ) ; org.springframework.web.reactive.socket.adapter.Session . addMessageHandler ( java.nio.ByteBuffer .class , message -> { WebSocketMessage webSocketMessage = toMessage ( message ) ; this . delegateSession . handleMessage ( webSocketMessage . getType ( ) , webSocketMessage ) ; } ) ; org.springframework.web.reactive.socket.adapter.Session . addMessageHandler ( PongMessage .class , message -> { WebSocketMessage webSocketMessage = toMessage ( message ) ; this . delegateSession . handleMessage ( webSocketMessage . getType ( ) , webSocketMessage ) ; } ) ; this . org.springframework.web.reactive.socket.adapter.WebSocketHandler . handle ( this . org.springframework.web.reactive.socket.adapter.StandardWebSocketSession ) . subscribe ( this . org.springframework.web.reactive.socket.adapter.StandardWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( T T ) { WebSocketSession org.springframework.web.reactive.socket.adapter.WebSocketSession = this . org.springframework.web.reactive.socket.adapter.StandardWebSocketSession ; Assert . state ( org.springframework.web.reactive.socket.adapter.WebSocketSession != null , STRING ) ; if ( T instanceof java.lang.String ) { byte [] byte[] = ( ( java.lang.String ) T ) . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; return new WebSocketMessage ( Type . TEXT , org.springframework.web.reactive.socket.adapter.WebSocketSession . bufferFactory ( ) . wrap ( byte[] ) ) ; } else if ( T instanceof java.nio.ByteBuffer ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.WebSocketSession . bufferFactory ( ) . wrap ( ( java.nio.ByteBuffer ) T ) ; return new WebSocketMessage ( Type . BINARY , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; } else if ( T instanceof PongMessage ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.WebSocketSession . bufferFactory ( ) . wrap ( ( ( PongMessage ) T ) . getApplicationData ( ) ) ; return new WebSocketMessage ( Type . PONG , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + T ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Session org.springframework.web.reactive.socket.adapter.Session , CloseReason org.springframework.web.reactive.socket.adapter.CloseReason ) { if ( this . org.springframework.web.reactive.socket.adapter.StandardWebSocketSession != null ) { int int = org.springframework.web.reactive.socket.adapter.CloseReason . getCloseCode ( ) . getCode ( ) ; this . org.springframework.web.reactive.socket.adapter.StandardWebSocketSession . handleClose ( new CloseStatus ( int , org.springframework.web.reactive.socket.adapter.CloseReason . getReasonPhrase ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Session org.springframework.web.reactive.socket.adapter.Session , java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.web.reactive.socket.adapter.StandardWebSocketSession != null ) { this . org.springframework.web.reactive.socket.adapter.StandardWebSocketSession . handleError ( java.lang.Throwable ) ; } }  <METHOD_END>
