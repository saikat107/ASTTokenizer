<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( JmxAttributeSource org.springframework.jmx.export.assembler.JmxAttributeSource ) { Assert . notNull ( org.springframework.jmx.export.assembler.JmxAttributeSource , STRING ) ; this . org.springframework.jmx.export.assembler.JmxAttributeSource = org.springframework.jmx.export.assembler.JmxAttributeSource ; }  <METHOD_END>
<METHOD_START> public void void ( JmxAttributeSource org.springframework.jmx.export.assembler.JmxAttributeSource ) { Assert . notNull ( org.springframework.jmx.export.assembler.JmxAttributeSource , STRING ) ; this . org.springframework.jmx.export.assembler.JmxAttributeSource = org.springframework.jmx.export.assembler.JmxAttributeSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.jmx.export.assembler.JmxAttributeSource == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) throws java.lang.IllegalArgumentException { if ( AopUtils . isJdkDynamicProxy ( java.lang.Object ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { return ( this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedResource ( getClassToExpose ( java.lang.Class<> ) ) != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { return boolean ( java.lang.reflect.Method ) || boolean ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { return boolean ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . findPropertyForMethod ( java.lang.reflect.Method ) ; if ( java.beans.PropertyDescriptor != null ) { if ( boolean ( java.lang.reflect.Method ) ) { return true ; } } return boolean ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedAttribute ( java.lang.reflect.Method ) != null ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedMetric ( java.lang.reflect.Method ) != null ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedOperation ( java.lang.reflect.Method ) != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { ManagedResource org.springframework.jmx.export.assembler.ManagedResource = this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedResource ( getClassToExpose ( java.lang.Object ) ) ; return ( org.springframework.jmx.export.assembler.ManagedResource != null ? org.springframework.jmx.export.assembler.ManagedResource . getDescription ( ) : STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor , java.lang.String java.lang.String ) { java.lang.reflect.Method java.lang.reflect.Method = java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) ; ManagedAttribute org.springframework.jmx.export.assembler.ManagedAttribute = ( java.lang.reflect.Method != null ? this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedAttribute ( java.lang.reflect.Method ) : null ) ; ManagedAttribute org.springframework.jmx.export.assembler.ManagedAttribute = ( java.lang.reflect.Method != null ? this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedAttribute ( java.lang.reflect.Method ) : null ) ; if ( org.springframework.jmx.export.assembler.ManagedAttribute != null && StringUtils . hasText ( org.springframework.jmx.export.assembler.ManagedAttribute . getDescription ( ) ) ) { return org.springframework.jmx.export.assembler.ManagedAttribute . getDescription ( ) ; } else if ( org.springframework.jmx.export.assembler.ManagedAttribute != null && StringUtils . hasText ( org.springframework.jmx.export.assembler.ManagedAttribute . getDescription ( ) ) ) { return org.springframework.jmx.export.assembler.ManagedAttribute . getDescription ( ) ; } ManagedMetric org.springframework.jmx.export.assembler.ManagedMetric = ( java.lang.reflect.Method != null ? this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedMetric ( java.lang.reflect.Method ) : null ) ; if ( org.springframework.jmx.export.assembler.ManagedMetric != null && StringUtils . hasText ( org.springframework.jmx.export.assembler.ManagedMetric . getDescription ( ) ) ) { return org.springframework.jmx.export.assembler.ManagedMetric . getDescription ( ) ; } return java.beans.PropertyDescriptor . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { java.beans.PropertyDescriptor java.beans.PropertyDescriptor = BeanUtils . findPropertyForMethod ( java.lang.reflect.Method ) ; if ( java.beans.PropertyDescriptor != null ) { ManagedAttribute org.springframework.jmx.export.assembler.ManagedAttribute = this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedAttribute ( java.lang.reflect.Method ) ; if ( org.springframework.jmx.export.assembler.ManagedAttribute != null && StringUtils . hasText ( org.springframework.jmx.export.assembler.ManagedAttribute . getDescription ( ) ) ) { return org.springframework.jmx.export.assembler.ManagedAttribute . getDescription ( ) ; } ManagedMetric org.springframework.jmx.export.assembler.ManagedMetric = this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedMetric ( java.lang.reflect.Method ) ; if ( org.springframework.jmx.export.assembler.ManagedMetric != null && StringUtils . hasText ( org.springframework.jmx.export.assembler.ManagedMetric . getDescription ( ) ) ) { return org.springframework.jmx.export.assembler.ManagedMetric . getDescription ( ) ; } return java.lang.reflect.Method . java.lang.String ( ) ; } else { ManagedOperation org.springframework.jmx.export.assembler.ManagedOperation = this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedOperation ( java.lang.reflect.Method ) ; if ( org.springframework.jmx.export.assembler.ManagedOperation != null && StringUtils . hasText ( org.springframework.jmx.export.assembler.ManagedOperation . getDescription ( ) ) ) { return org.springframework.jmx.export.assembler.ManagedOperation . getDescription ( ) ; } return java.lang.reflect.Method . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.management.MBeanParameterInfo [] javax.management.MBeanParameterInfo[] ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { ManagedOperationParameter [] org.springframework.jmx.export.assembler.ManagedOperationParameter[] = this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedOperationParameters ( java.lang.reflect.Method ) ; if ( ObjectUtils . isEmpty ( org.springframework.jmx.export.assembler.ManagedOperationParameter[] ) ) { return super. getOperationParameters ( java.lang.reflect.Method , java.lang.String ) ; } javax.management.MBeanParameterInfo [] javax.management.MBeanParameterInfo[] = new javax.management.MBeanParameterInfo [ params . length ] ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; for ( int int = NUMBER ; int < params . length ; int ++ ) { ManagedOperationParameter org.springframework.jmx.export.assembler.ManagedOperationParameter = org.springframework.jmx.export.assembler.ManagedOperationParameter[] [ int ] ; javax.management.MBeanParameterInfo[] [ int ] = new javax.management.MBeanParameterInfo ( org.springframework.jmx.export.assembler.ManagedOperationParameter . getName ( ) , java.lang.Class<?>[] [ int ] . java.lang.String ( ) , org.springframework.jmx.export.assembler.ManagedOperationParameter . getDescription ( ) ) ; } return javax.management.MBeanParameterInfo[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.management.modelmbean.ModelMBeanNotificationInfo [] javax.management.modelmbean.ModelMBeanNotificationInfo[] ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { ManagedNotification [] org.springframework.jmx.export.assembler.ManagedNotification[] = this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedNotifications ( getClassToExpose ( java.lang.Object ) ) ; javax.management.modelmbean.ModelMBeanNotificationInfo [] javax.management.modelmbean.ModelMBeanNotificationInfo[] = new javax.management.modelmbean.ModelMBeanNotificationInfo [ notificationAttributes . length ] ; for ( int int = NUMBER ; int < notificationAttributes . length ; int ++ ) { ManagedNotification org.springframework.jmx.export.assembler.ManagedNotification = org.springframework.jmx.export.assembler.ManagedNotification[] [ int ] ; javax.management.modelmbean.ModelMBeanNotificationInfo[] [ int ] = JmxMetadataUtils . convertToModelMBeanNotificationInfo ( org.springframework.jmx.export.assembler.ManagedNotification ) ; } return javax.management.modelmbean.ModelMBeanNotificationInfo[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( javax.management.Descriptor javax.management.Descriptor , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { ManagedResource org.springframework.jmx.export.assembler.ManagedResource = this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedResource ( getClassToExpose ( java.lang.Object ) ) ; if ( org.springframework.jmx.export.assembler.ManagedResource == null ) { throw new InvalidMetadataException ( STRING + getClassToExpose ( java.lang.Object ) ) ; } applyCurrencyTimeLimit ( javax.management.Descriptor , org.springframework.jmx.export.assembler.ManagedResource . getCurrencyTimeLimit ( ) ) ; if ( org.springframework.jmx.export.assembler.ManagedResource . isLog ( ) ) { javax.management.Descriptor . void ( FIELD_LOG , STRING ) ; } if ( StringUtils . hasLength ( org.springframework.jmx.export.assembler.ManagedResource . getLogFile ( ) ) ) { javax.management.Descriptor . void ( FIELD_LOG_FILE , org.springframework.jmx.export.assembler.ManagedResource . getLogFile ( ) ) ; } if ( StringUtils . hasLength ( org.springframework.jmx.export.assembler.ManagedResource . getPersistPolicy ( ) ) ) { javax.management.Descriptor . void ( FIELD_PERSIST_POLICY , org.springframework.jmx.export.assembler.ManagedResource . getPersistPolicy ( ) ) ; } if ( org.springframework.jmx.export.assembler.ManagedResource . getPersistPeriod ( ) >= NUMBER ) { javax.management.Descriptor . void ( FIELD_PERSIST_PERIOD , java.lang.Integer . java.lang.String ( org.springframework.jmx.export.assembler.ManagedResource . getPersistPeriod ( ) ) ) ; } if ( StringUtils . hasLength ( org.springframework.jmx.export.assembler.ManagedResource . getPersistName ( ) ) ) { javax.management.Descriptor . void ( FIELD_PERSIST_NAME , org.springframework.jmx.export.assembler.ManagedResource . getPersistName ( ) ) ; } if ( StringUtils . hasLength ( org.springframework.jmx.export.assembler.ManagedResource . getPersistLocation ( ) ) ) { javax.management.Descriptor . void ( FIELD_PERSIST_LOCATION , org.springframework.jmx.export.assembler.ManagedResource . getPersistLocation ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( javax.management.Descriptor javax.management.Descriptor , java.lang.reflect.Method java.lang.reflect.Method , java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { if ( java.lang.reflect.Method != null && boolean ( java.lang.reflect.Method ) ) { void ( javax.management.Descriptor , this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedMetric ( java.lang.reflect.Method ) ) ; } else { ManagedAttribute org.springframework.jmx.export.assembler.ManagedAttribute = ( java.lang.reflect.Method == null ) ? ManagedAttribute . EMPTY : this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedAttribute ( java.lang.reflect.Method ) ; ManagedAttribute org.springframework.jmx.export.assembler.ManagedAttribute = ( java.lang.reflect.Method == null ) ? ManagedAttribute . EMPTY : this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedAttribute ( java.lang.reflect.Method ) ; void ( javax.management.Descriptor , org.springframework.jmx.export.assembler.ManagedAttribute , org.springframework.jmx.export.assembler.ManagedAttribute ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.management.Descriptor javax.management.Descriptor , ManagedAttribute org.springframework.jmx.export.assembler.ManagedAttribute , ManagedAttribute org.springframework.jmx.export.assembler.ManagedAttribute ) { applyCurrencyTimeLimit ( javax.management.Descriptor , int ( org.springframework.jmx.export.assembler.ManagedAttribute . getCurrencyTimeLimit ( ) , org.springframework.jmx.export.assembler.ManagedAttribute . getCurrencyTimeLimit ( ) ) ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.jmx.export.assembler.ManagedAttribute . getDefaultValue ( ) , org.springframework.jmx.export.assembler.ManagedAttribute . getDefaultValue ( ) ) ; javax.management.Descriptor . void ( FIELD_DEFAULT , java.lang.Object ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.jmx.export.assembler.ManagedAttribute . getPersistPolicy ( ) , org.springframework.jmx.export.assembler.ManagedAttribute . getPersistPolicy ( ) ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { javax.management.Descriptor . void ( FIELD_PERSIST_POLICY , java.lang.String ) ; } int int = int ( org.springframework.jmx.export.assembler.ManagedAttribute . getPersistPeriod ( ) , org.springframework.jmx.export.assembler.ManagedAttribute . getPersistPeriod ( ) ) ; if ( int >= NUMBER ) { javax.management.Descriptor . void ( FIELD_PERSIST_PERIOD , java.lang.Integer . java.lang.String ( int ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.management.Descriptor javax.management.Descriptor , ManagedMetric org.springframework.jmx.export.assembler.ManagedMetric ) { applyCurrencyTimeLimit ( javax.management.Descriptor , org.springframework.jmx.export.assembler.ManagedMetric . getCurrencyTimeLimit ( ) ) ; if ( StringUtils . hasLength ( org.springframework.jmx.export.assembler.ManagedMetric . getPersistPolicy ( ) ) ) { javax.management.Descriptor . void ( FIELD_PERSIST_POLICY , org.springframework.jmx.export.assembler.ManagedMetric . getPersistPolicy ( ) ) ; } if ( org.springframework.jmx.export.assembler.ManagedMetric . getPersistPeriod ( ) >= NUMBER ) { javax.management.Descriptor . void ( FIELD_PERSIST_PERIOD , java.lang.Integer . java.lang.String ( org.springframework.jmx.export.assembler.ManagedMetric . getPersistPeriod ( ) ) ) ; } if ( StringUtils . hasLength ( org.springframework.jmx.export.assembler.ManagedMetric . getDisplayName ( ) ) ) { javax.management.Descriptor . void ( FIELD_DISPLAY_NAME , org.springframework.jmx.export.assembler.ManagedMetric . getDisplayName ( ) ) ; } if ( StringUtils . hasLength ( org.springframework.jmx.export.assembler.ManagedMetric . getUnit ( ) ) ) { javax.management.Descriptor . void ( FIELD_UNITS , org.springframework.jmx.export.assembler.ManagedMetric . getUnit ( ) ) ; } if ( StringUtils . hasLength ( org.springframework.jmx.export.assembler.ManagedMetric . getCategory ( ) ) ) { javax.management.Descriptor . void ( FIELD_METRIC_CATEGORY , org.springframework.jmx.export.assembler.ManagedMetric . getCategory ( ) ) ; } java.lang.String java.lang.String = ( org.springframework.jmx.export.assembler.ManagedMetric . getMetricType ( ) == null ) ? MetricType . GAUGE . toString ( ) : org.springframework.jmx.export.assembler.ManagedMetric . getMetricType ( ) . toString ( ) ; javax.management.Descriptor . void ( FIELD_METRIC_TYPE , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( javax.management.Descriptor javax.management.Descriptor , java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { ManagedOperation org.springframework.jmx.export.assembler.ManagedOperation = this . org.springframework.jmx.export.assembler.JmxAttributeSource . getManagedOperation ( java.lang.reflect.Method ) ; if ( org.springframework.jmx.export.assembler.ManagedOperation != null ) { applyCurrencyTimeLimit ( javax.management.Descriptor , org.springframework.jmx.export.assembler.ManagedOperation . getCurrencyTimeLimit ( ) ) ; } }  <METHOD_END>
<METHOD_START> private int int ( int int , int int ) { return ( int >= int ? int : int ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { return ( java.lang.Object != null ? java.lang.Object : java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String : java.lang.String ) ; }  <METHOD_END>
