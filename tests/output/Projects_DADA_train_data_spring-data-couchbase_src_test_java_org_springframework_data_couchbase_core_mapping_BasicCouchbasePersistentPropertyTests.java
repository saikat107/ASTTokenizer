<METHOD_START> @ Before public void void ( ) { org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class , STRING ) ; assertEquals ( STRING , org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ( java.lang.reflect.Field ) . getFieldName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class , STRING ) ; assertEquals ( STRING , org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ( java.lang.reflect.Field ) . getFieldName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer > org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class ) ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class , STRING ) ; CouchbasePersistentProperty org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty = org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ( java.lang.reflect.Field ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class , STRING ) ; CouchbasePersistentProperty org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty = org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ( java.lang.reflect.Field ) ; org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> . addPersistentProperty ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ) ; org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> . addPersistentProperty ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ) ; assertEquals ( STRING , org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty . getFieldName ( ) ) ; assertEquals ( STRING , org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty . getFieldName ( ) ) ; assertTrue ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty . isIdProperty ( ) ) ; assertTrue ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty . isIdProperty ( ) ) ; java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> < CouchbasePersistentProperty > java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> . getIdProperty ( ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> . ifPresent ( actual -> { assertEquals ( springIdProperty , actual ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.SdkIdentified > org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.SdkIdentified> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.SdkIdentified > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.SdkIdentified .class ) ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.SdkIdentified .class , STRING ) ; CouchbasePersistentProperty org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty = org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ( java.lang.reflect.Field ) ; org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.SdkIdentified> . addPersistentProperty ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ) ; java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> < CouchbasePersistentProperty > java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.SdkIdentified> . getIdProperty ( ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> . ifPresent ( actual -> { assertEquals ( idProperty , actual ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer > org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> = new BasicCouchbasePersistentEntity < org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer > ( ClassTypeInformation . from ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class ) ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class , STRING ) ; CouchbasePersistentProperty org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty = org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ( java.lang.reflect.Field ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer .class , STRING ) ; CouchbasePersistentProperty org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty = org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ( java.lang.reflect.Field ) ; org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> . addPersistentProperty ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ) ; java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> < CouchbasePersistentProperty > java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> . getIdProperty ( ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> . ifPresent ( actual -> { assertEquals ( springIdProperty , actual ) ; } ) ; org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> . addPersistentProperty ( org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ) ; java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> = org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> . getIdProperty ( ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty> . ifPresent ( actual -> { assertEquals ( springIdProperty , actual ) ; } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty org.springframework.data.couchbase.core.mapping.CouchbasePersistentProperty ( java.lang.reflect.Field java.lang.reflect.Field ) { return new BasicCouchbasePersistentProperty ( Property . of ( java.lang.reflect.Field ) , org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity<org.springframework.data.couchbase.core.mapping.BasicCouchbasePersistentPropertyTests.Beer> , new SimpleTypeHolder ( ) , PropertyNameFieldNamingStrategy . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
