<METHOD_START> void ( javax.xml.stream.XMLEventReader javax.xml.stream.XMLEventReader ) { Assert . notNull ( javax.xml.stream.XMLEventReader , STRING ) ; try { javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent = javax.xml.stream.XMLEventReader . javax.xml.stream.events.XMLEvent ( ) ; if ( javax.xml.stream.events.XMLEvent != null && ! ( javax.xml.stream.events.XMLEvent . boolean ( ) || javax.xml.stream.events.XMLEvent . boolean ( ) ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } } catch ( javax.xml.stream.XMLStreamException javax.xml.stream.XMLStreamException ) { throw new java.lang.IllegalStateException ( STRING + javax.xml.stream.XMLStreamException . java.lang.String ( ) ) ; } this . javax.xml.stream.XMLEventReader = javax.xml.stream.XMLEventReader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.xml.sax.SAXException , javax.xml.stream.XMLStreamException { boolean boolean = false ; boolean boolean = false ; int int = NUMBER ; while ( this . javax.xml.stream.XMLEventReader . boolean ( ) && int >= NUMBER ) { javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent = this . javax.xml.stream.XMLEventReader . javax.xml.stream.events.XMLEvent ( ) ; if ( ! javax.xml.stream.events.XMLEvent . boolean ( ) && ! javax.xml.stream.events.XMLEvent . boolean ( ) && ! boolean ) { void ( javax.xml.stream.events.XMLEvent ) ; boolean = true ; } switch ( javax.xml.stream.events.XMLEvent . int ( ) ) { case javax.xml.stream.XMLStreamConstants . int : void ( javax.xml.stream.events.XMLEvent ) ; boolean = true ; break; case javax.xml.stream.XMLStreamConstants . int : int ++ ; void ( javax.xml.stream.events.XMLEvent . javax.xml.stream.events.StartElement ( ) ) ; break; case javax.xml.stream.XMLStreamConstants . int : int -- ; if ( int >= NUMBER ) { void ( javax.xml.stream.events.XMLEvent . javax.xml.stream.events.EndElement ( ) ) ; } break; case javax.xml.stream.XMLStreamConstants . int : void ( ( javax.xml.stream.events.ProcessingInstruction ) javax.xml.stream.events.XMLEvent ) ; break; case javax.xml.stream.XMLStreamConstants . int : case javax.xml.stream.XMLStreamConstants . int : case javax.xml.stream.XMLStreamConstants . int : void ( javax.xml.stream.events.XMLEvent . javax.xml.stream.events.Characters ( ) ) ; break; case javax.xml.stream.XMLStreamConstants . int : void ( ) ; boolean = true ; break; case javax.xml.stream.XMLStreamConstants . int : void ( ( javax.xml.stream.events.NotationDeclaration ) javax.xml.stream.events.XMLEvent ) ; break; case javax.xml.stream.XMLStreamConstants . int : void ( ( javax.xml.stream.events.EntityDeclaration ) javax.xml.stream.events.XMLEvent ) ; break; case javax.xml.stream.XMLStreamConstants . int : void ( ( javax.xml.stream.events.Comment ) javax.xml.stream.events.XMLEvent ) ; break; case javax.xml.stream.XMLStreamConstants . int : void ( ( javax.xml.stream.events.DTD ) javax.xml.stream.events.XMLEvent ) ; break; case javax.xml.stream.XMLStreamConstants . int : void ( ( javax.xml.stream.events.EntityReference ) javax.xml.stream.events.XMLEvent ) ; break; } } if ( boolean && ! boolean ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final javax.xml.stream.events.XMLEvent javax.xml.stream.events.XMLEvent ) throws org.xml.sax.SAXException { if ( javax.xml.stream.events.XMLEvent . boolean ( ) ) { javax.xml.stream.events.StartDocument javax.xml.stream.events.StartDocument = ( javax.xml.stream.events.StartDocument ) javax.xml.stream.events.XMLEvent ; java.lang.String java.lang.String = javax.xml.stream.events.StartDocument . java.lang.String ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { this . java.lang.String = java.lang.String ; } if ( javax.xml.stream.events.StartDocument . boolean ( ) ) { this . java.lang.String = javax.xml.stream.events.StartDocument . java.lang.String ( ) ; } } if ( getContentHandler ( ) != null ) { final javax.xml.stream.Location javax.xml.stream.Location = javax.xml.stream.events.XMLEvent . javax.xml.stream.Location ( ) ; getContentHandler ( ) . setDocumentLocator ( new org.xml.sax.ext.Locator2 ( ) { @ java.lang.Override public int int ( ) { return ( javax.xml.stream.Location != null ? javax.xml.stream.Location . int ( ) : - NUMBER ) ; } @ java.lang.Override public int int ( ) { return ( javax.xml.stream.Location != null ? javax.xml.stream.Location . int ( ) : - NUMBER ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( javax.xml.stream.Location != null ? javax.xml.stream.Location . java.lang.String ( ) : null ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( javax.xml.stream.Location != null ? javax.xml.stream.Location . java.lang.String ( ) : null ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } } ) ; getContentHandler ( ) . startDocument ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( javax.xml.stream.Location != null ? javax.xml.stream.Location . int ( ) : - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( javax.xml.stream.Location != null ? javax.xml.stream.Location . int ( ) : - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( javax.xml.stream.Location != null ? javax.xml.stream.Location . java.lang.String ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( javax.xml.stream.Location != null ? javax.xml.stream.Location . java.lang.String ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.StartElement javax.xml.stream.events.StartElement ) throws org.xml.sax.SAXException { if ( getContentHandler ( ) != null ) { javax.xml.namespace.QName javax.xml.namespace.QName = javax.xml.stream.events.StartElement . javax.xml.namespace.QName ( ) ; if ( hasNamespacesFeature ( ) ) { for ( java.util.Iterator java.util.Iterator = javax.xml.stream.events.StartElement . java.util.Iterator ( ) ; java.util.Iterator . boolean ( ) ;) { javax.xml.stream.events.Namespace javax.xml.stream.events.Namespace = ( javax.xml.stream.events.Namespace ) java.util.Iterator . java.lang.Object ( ) ; startPrefixMapping ( javax.xml.stream.events.Namespace . java.lang.String ( ) , javax.xml.stream.events.Namespace . java.lang.String ( ) ) ; } for ( java.util.Iterator java.util.Iterator = javax.xml.stream.events.StartElement . java.util.Iterator ( ) ; java.util.Iterator . boolean ( ) ;) { javax.xml.stream.events.Attribute javax.xml.stream.events.Attribute = ( javax.xml.stream.events.Attribute ) java.util.Iterator . java.lang.Object ( ) ; javax.xml.namespace.QName javax.xml.namespace.QName = javax.xml.stream.events.Attribute . javax.xml.namespace.QName ( ) ; startPrefixMapping ( javax.xml.namespace.QName . java.lang.String ( ) , javax.xml.namespace.QName . java.lang.String ( ) ) ; } getContentHandler ( ) . startElement ( javax.xml.namespace.QName . java.lang.String ( ) , javax.xml.namespace.QName . java.lang.String ( ) , toQualifiedName ( javax.xml.namespace.QName ) , org.xml.sax.Attributes ( javax.xml.stream.events.StartElement ) ) ; } else { getContentHandler ( ) . startElement ( STRING , STRING , toQualifiedName ( javax.xml.namespace.QName ) , org.xml.sax.Attributes ( javax.xml.stream.events.StartElement ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.Characters javax.xml.stream.events.Characters ) throws org.xml.sax.SAXException { char [] char[] = javax.xml.stream.events.Characters . java.lang.String ( ) . char[] ( ) ; if ( getContentHandler ( ) != null && javax.xml.stream.events.Characters . boolean ( ) ) { getContentHandler ( ) . ignorableWhitespace ( char[] , NUMBER , char[] . int ) ; return; } if ( javax.xml.stream.events.Characters . boolean ( ) && getLexicalHandler ( ) != null ) { getLexicalHandler ( ) . startCDATA ( ) ; } if ( getContentHandler ( ) != null ) { getContentHandler ( ) . characters ( char[] , NUMBER , char[] . int ) ; } if ( javax.xml.stream.events.Characters . boolean ( ) && getLexicalHandler ( ) != null ) { getLexicalHandler ( ) . endCDATA ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.EndElement javax.xml.stream.events.EndElement ) throws org.xml.sax.SAXException { if ( getContentHandler ( ) != null ) { javax.xml.namespace.QName javax.xml.namespace.QName = javax.xml.stream.events.EndElement . javax.xml.namespace.QName ( ) ; if ( hasNamespacesFeature ( ) ) { getContentHandler ( ) . endElement ( javax.xml.namespace.QName . java.lang.String ( ) , javax.xml.namespace.QName . java.lang.String ( ) , toQualifiedName ( javax.xml.namespace.QName ) ) ; for ( java.util.Iterator java.util.Iterator = javax.xml.stream.events.EndElement . java.util.Iterator ( ) ; java.util.Iterator . boolean ( ) ;) { javax.xml.stream.events.Namespace javax.xml.stream.events.Namespace = ( javax.xml.stream.events.Namespace ) java.util.Iterator . java.lang.Object ( ) ; endPrefixMapping ( javax.xml.stream.events.Namespace . java.lang.String ( ) ) ; } } else { getContentHandler ( ) . endElement ( STRING , STRING , toQualifiedName ( javax.xml.namespace.QName ) ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) org.xml.sax.SAXException { if ( getContentHandler ( ) != null ) { getContentHandler ( ) . endDocument ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.NotationDeclaration javax.xml.stream.events.NotationDeclaration ) throws org.xml.sax.SAXException { if ( getDTDHandler ( ) != null ) { getDTDHandler ( ) . notationDecl ( javax.xml.stream.events.NotationDeclaration . java.lang.String ( ) , javax.xml.stream.events.NotationDeclaration . java.lang.String ( ) , javax.xml.stream.events.NotationDeclaration . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.EntityDeclaration javax.xml.stream.events.EntityDeclaration ) throws org.xml.sax.SAXException { if ( getDTDHandler ( ) != null ) { getDTDHandler ( ) . unparsedEntityDecl ( javax.xml.stream.events.EntityDeclaration . java.lang.String ( ) , javax.xml.stream.events.EntityDeclaration . java.lang.String ( ) , javax.xml.stream.events.EntityDeclaration . java.lang.String ( ) , javax.xml.stream.events.EntityDeclaration . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.ProcessingInstruction javax.xml.stream.events.ProcessingInstruction ) throws org.xml.sax.SAXException { if ( getContentHandler ( ) != null ) { getContentHandler ( ) . processingInstruction ( javax.xml.stream.events.ProcessingInstruction . java.lang.String ( ) , javax.xml.stream.events.ProcessingInstruction . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.Comment javax.xml.stream.events.Comment ) throws org.xml.sax.SAXException { if ( getLexicalHandler ( ) != null ) { char [] char[] = javax.xml.stream.events.Comment . java.lang.String ( ) . char[] ( ) ; getLexicalHandler ( ) . comment ( char[] , NUMBER , char[] . int ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.DTD javax.xml.stream.events.DTD ) throws org.xml.sax.SAXException { if ( getLexicalHandler ( ) != null ) { javax . xml . stream . javax.xml.stream.Location javax.xml.stream.Location = javax.xml.stream.events.DTD . javax.xml.stream.Location ( ) ; getLexicalHandler ( ) . startDTD ( null , javax.xml.stream.Location . java.lang.String ( ) , javax.xml.stream.Location . java.lang.String ( ) ) ; } if ( getLexicalHandler ( ) != null ) { getLexicalHandler ( ) . endDTD ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.stream.events.EntityReference javax.xml.stream.events.EntityReference ) throws org.xml.sax.SAXException { if ( getLexicalHandler ( ) != null ) { getLexicalHandler ( ) . startEntity ( javax.xml.stream.events.EntityReference . java.lang.String ( ) ) ; } if ( getLexicalHandler ( ) != null ) { getLexicalHandler ( ) . endEntity ( javax.xml.stream.events.EntityReference . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.xml.sax.Attributes org.xml.sax.Attributes ( javax.xml.stream.events.StartElement javax.xml.stream.events.StartElement ) { org.xml.sax.helpers.AttributesImpl org.xml.sax.helpers.AttributesImpl = new org.xml.sax.helpers.AttributesImpl ( ) ; for ( java.util.Iterator java.util.Iterator = javax.xml.stream.events.StartElement . java.util.Iterator ( ) ; java.util.Iterator . boolean ( ) ;) { javax.xml.stream.events.Attribute javax.xml.stream.events.Attribute = ( javax.xml.stream.events.Attribute ) java.util.Iterator . java.lang.Object ( ) ; javax.xml.namespace.QName javax.xml.namespace.QName = javax.xml.stream.events.Attribute . javax.xml.namespace.QName ( ) ; java.lang.String java.lang.String = javax.xml.namespace.QName . java.lang.String ( ) ; if ( java.lang.String == null || ! hasNamespacesFeature ( ) ) { java.lang.String = STRING ; } java.lang.String java.lang.String = javax.xml.stream.events.Attribute . java.lang.String ( ) ; if ( java.lang.String == null ) { java.lang.String = STRING ; } org.xml.sax.helpers.AttributesImpl . void ( java.lang.String , javax.xml.namespace.QName . java.lang.String ( ) , toQualifiedName ( javax.xml.namespace.QName ) , java.lang.String , javax.xml.stream.events.Attribute . java.lang.String ( ) ) ; } if ( hasNamespacePrefixesFeature ( ) ) { for ( java.util.Iterator java.util.Iterator = javax.xml.stream.events.StartElement . java.util.Iterator ( ) ; java.util.Iterator . boolean ( ) ;) { javax.xml.stream.events.Namespace javax.xml.stream.events.Namespace = ( javax.xml.stream.events.Namespace ) java.util.Iterator . java.lang.Object ( ) ; java.lang.String java.lang.String = javax.xml.stream.events.Namespace . java.lang.String ( ) ; java.lang.String java.lang.String = javax.xml.stream.events.Namespace . java.lang.String ( ) ; java.lang.String java.lang.String ; if ( StringUtils . hasLength ( java.lang.String ) ) { java.lang.String = STRING + java.lang.String ; } else { java.lang.String = STRING ; } org.xml.sax.helpers.AttributesImpl . void ( STRING , STRING , java.lang.String , STRING , java.lang.String ) ; } } return org.xml.sax.helpers.AttributesImpl ; }  <METHOD_END>
