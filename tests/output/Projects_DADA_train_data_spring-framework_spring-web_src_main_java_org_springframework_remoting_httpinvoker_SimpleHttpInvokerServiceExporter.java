<METHOD_START> @ java.lang.Override public void void ( com.sun.net.httpserver.HttpExchange com.sun.net.httpserver.HttpExchange ) throws java.io.IOException { try { RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation = org.springframework.remoting.httpinvoker.RemoteInvocation ( com.sun.net.httpserver.HttpExchange ) ; RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult = invokeAndCreateResult ( org.springframework.remoting.httpinvoker.RemoteInvocation , getProxy ( ) ) ; void ( com.sun.net.httpserver.HttpExchange , org.springframework.remoting.httpinvoker.RemoteInvocationResult ) ; com.sun.net.httpserver.HttpExchange . void ( ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { com.sun.net.httpserver.HttpExchange . void ( NUMBER , - NUMBER ) ; logger . error ( STRING , java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ( com.sun.net.httpserver.HttpExchange com.sun.net.httpserver.HttpExchange )			throws java.io.IOException , java.lang.ClassNotFoundException { return org.springframework.remoting.httpinvoker.RemoteInvocation ( com.sun.net.httpserver.HttpExchange , com.sun.net.httpserver.HttpExchange . java.io.InputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ( com.sun.net.httpserver.HttpExchange com.sun.net.httpserver.HttpExchange , java.io.InputStream java.io.InputStream )			throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream java.io.ObjectInputStream = createObjectInputStream ( java.io.InputStream ( com.sun.net.httpserver.HttpExchange , java.io.InputStream ) ) ; return doReadRemoteInvocation ( java.io.ObjectInputStream ) ; }  <METHOD_END>
<METHOD_START> protected java.io.InputStream java.io.InputStream ( com.sun.net.httpserver.HttpExchange com.sun.net.httpserver.HttpExchange , java.io.InputStream java.io.InputStream ) throws java.io.IOException { return java.io.InputStream ; }  <METHOD_END>
<METHOD_START> protected void void ( com.sun.net.httpserver.HttpExchange com.sun.net.httpserver.HttpExchange , RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult )			throws java.io.IOException { com.sun.net.httpserver.HttpExchange . com.sun.net.httpserver.Headers ( ) . void ( STRING , getContentType ( ) ) ; com.sun.net.httpserver.HttpExchange . void ( NUMBER , NUMBER ) ; void ( com.sun.net.httpserver.HttpExchange , org.springframework.remoting.httpinvoker.RemoteInvocationResult , com.sun.net.httpserver.HttpExchange . java.io.OutputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( com.sun.net.httpserver.HttpExchange com.sun.net.httpserver.HttpExchange , RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { java.io.ObjectOutputStream java.io.ObjectOutputStream = createObjectOutputStream ( java.io.OutputStream ( com.sun.net.httpserver.HttpExchange , java.io.OutputStream ) ) ; doWriteRemoteInvocationResult ( org.springframework.remoting.httpinvoker.RemoteInvocationResult , java.io.ObjectOutputStream ) ; java.io.ObjectOutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> protected java.io.OutputStream java.io.OutputStream ( com.sun.net.httpserver.HttpExchange com.sun.net.httpserver.HttpExchange , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { return java.io.OutputStream ; }  <METHOD_END>
