<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.repository.init.ResourceReader = mock ( ResourceReader .class ) ; this . org.springframework.data.repository.init.ApplicationEventPublisher = mock ( ApplicationEventPublisher .class ) ; this . org.springframework.data.repository.init.Resource = mock ( Resource .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Product org.springframework.data.repository.init.Product = new Product ( ) ; org.springframework.data.repository.init.RepositoryPopulator ( org.springframework.data.repository.init.Product ) ; verify ( org.springframework.data.repository.init.ProductRepository ) . save ( org.springframework.data.repository.init.Product ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Product org.springframework.data.repository.init.Product = new Product ( ) ; java.util.Collection<org.springframework.data.repository.init.Product> < Product > java.util.Collection<org.springframework.data.repository.init.Product> = java.util.Collections . java.util.List ( org.springframework.data.repository.init.Product ) ; org.springframework.data.repository.init.RepositoryPopulator ( java.util.Collection<org.springframework.data.repository.init.Product> ) ; verify ( org.springframework.data.repository.init.ProductRepository , times ( NUMBER ) ) . save ( org.springframework.data.repository.init.Product ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryPopulator org.springframework.data.repository.init.RepositoryPopulator = org.springframework.data.repository.init.RepositoryPopulator ( new User ( ) , org.springframework.data.repository.init.ApplicationEventPublisher ) ; ApplicationEvent org.springframework.data.repository.init.ApplicationEvent = new RepositoriesPopulatedEvent ( org.springframework.data.repository.init.RepositoryPopulator , org.springframework.data.repository.init.Repositories ) ; verify ( org.springframework.data.repository.init.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.repository.init.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.init.RepositoryPopulator org.springframework.data.repository.init.RepositoryPopulator ( java.lang.Object java.lang.Object , ApplicationEventPublisher org.springframework.data.repository.init.ApplicationEventPublisher )			throws java.lang.Exception { when ( org.springframework.data.repository.init.ResourceReader . readFrom ( any ( ) , any ( ) ) ) . thenReturn ( java.lang.Object ) ; ResourceReaderRepositoryPopulator org.springframework.data.repository.init.ResourceReaderRepositoryPopulator = new ResourceReaderRepositoryPopulator ( org.springframework.data.repository.init.ResourceReader ) ; org.springframework.data.repository.init.ResourceReaderRepositoryPopulator . setResources ( org.springframework.data.repository.init.Resource ) ; org.springframework.data.repository.init.ResourceReaderRepositoryPopulator . setApplicationEventPublisher ( org.springframework.data.repository.init.ApplicationEventPublisher ) ; org.springframework.data.repository.init.ResourceReaderRepositoryPopulator . populate ( org.springframework.data.repository.init.Repositories ) ; return org.springframework.data.repository.init.ResourceReaderRepositoryPopulator ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.init.RepositoryPopulator org.springframework.data.repository.init.RepositoryPopulator ( java.lang.Object java.lang.Object ) throws java.lang.Exception { return org.springframework.data.repository.init.RepositoryPopulator ( java.lang.Object , null ) ; }  <METHOD_END>
