<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { final java.util.Set<org.springframework.integration.xmpp.inbound.RosterListener> < RosterListener > java.util.Set<org.springframework.integration.xmpp.inbound.RosterListener> = new java.util.HashSet<org.springframework.integration.xmpp.inbound.RosterListener> < RosterListener > ( ) ; XMPPConnection org.springframework.integration.xmpp.inbound.XMPPConnection = mock ( XMPPConnection .class ) ; Roster org.springframework.integration.xmpp.inbound.Roster = mock ( Roster .class ) ; java.util.Map<org.springframework.integration.xmpp.inbound.XMPPConnection,org.springframework.integration.xmpp.inbound.Roster> < XMPPConnection , Roster > java.util.Map<org.springframework.integration.xmpp.inbound.XMPPConnection,org.springframework.integration.xmpp.inbound.Roster> = TestUtils . getPropertyValue ( org.springframework.integration.xmpp.inbound.Roster , STRING , java.util.Map .class ) ; java.util.Map<org.springframework.integration.xmpp.inbound.XMPPConnection,org.springframework.integration.xmpp.inbound.Roster> . put ( org.springframework.integration.xmpp.inbound.XMPPConnection , org.springframework.integration.xmpp.inbound.Roster ) ; doAnswer ( invocation -> { rosterSet . add ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.xmpp.inbound.Roster ) . addRosterListener ( any ( RosterListener .class ) ) ; doAnswer ( invocation -> { rosterSet . remove ( ( RosterListener ) invocation . getArgument ( NUMBER ) ) ; return null ; } ) . when ( org.springframework.integration.xmpp.inbound.Roster ) . removeRosterListener ( any ( RosterListener .class ) ) ; PresenceListeningEndpoint org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint = new PresenceListeningEndpoint ( org.springframework.integration.xmpp.inbound.XMPPConnection ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setOutputChannel ( new QueueChannel ( ) ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . afterPropertiesSet ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.integration.xmpp.inbound.RosterListener> . size ( ) ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . start ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.integration.xmpp.inbound.RosterListener> . size ( ) ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . stop ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.integration.xmpp.inbound.RosterListener> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { PresenceListeningEndpoint org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint = new PresenceListeningEndpoint ( mock ( XMPPConnection .class ) ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { XMPPConnection org.springframework.integration.xmpp.inbound.XMPPConnection = mock ( XMPPConnection .class ) ; Roster org.springframework.integration.xmpp.inbound.Roster = mock ( Roster .class ) ; java.util.Map<org.springframework.integration.xmpp.inbound.XMPPConnection,org.springframework.integration.xmpp.inbound.Roster> < XMPPConnection , Roster > java.util.Map<org.springframework.integration.xmpp.inbound.XMPPConnection,org.springframework.integration.xmpp.inbound.Roster> = TestUtils . getPropertyValue ( org.springframework.integration.xmpp.inbound.Roster , STRING , java.util.Map .class ) ; java.util.Map<org.springframework.integration.xmpp.inbound.XMPPConnection,org.springframework.integration.xmpp.inbound.Roster> . put ( org.springframework.integration.xmpp.inbound.XMPPConnection , org.springframework.integration.xmpp.inbound.Roster ) ; PresenceListeningEndpoint org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint = new PresenceListeningEndpoint ( org.springframework.integration.xmpp.inbound.XMPPConnection ) ; QueueChannel org.springframework.integration.xmpp.inbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setOutputChannel ( org.springframework.integration.xmpp.inbound.QueueChannel ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . start ( ) ; RosterListener org.springframework.integration.xmpp.inbound.RosterListener = ( RosterListener ) TestUtils . getPropertyValue ( org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint , STRING ) ; Presence org.springframework.integration.xmpp.inbound.Presence = new Presence ( Type . available , STRING , NUMBER , Mode . chat ) ; org.springframework.integration.xmpp.inbound.RosterListener . presenceChanged ( org.springframework.integration.xmpp.inbound.Presence ) ; Message < ? > org.springframework.integration.xmpp.inbound.Message<?> = org.springframework.integration.xmpp.inbound.QueueChannel . receive ( NUMBER ) ; assertEquals ( org.springframework.integration.xmpp.inbound.Presence , org.springframework.integration.xmpp.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory . registerSingleton ( XmppContextUtils . XMPP_CONNECTION_BEAN_NAME , mock ( XMPPConnection .class ) ) ; PresenceListeningEndpoint org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint = new PresenceListeningEndpoint ( ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setBeanFactory ( org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setOutputChannel ( new QueueChannel ( ) ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . afterPropertiesSet ( ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { PresenceListeningEndpoint org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint = new PresenceListeningEndpoint ( ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XMPPConnection org.springframework.integration.xmpp.inbound.XMPPConnection = mock ( XMPPConnection .class ) ; org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory . registerSingleton ( XmppContextUtils . XMPP_CONNECTION_BEAN_NAME , org.springframework.integration.xmpp.inbound.XMPPConnection ) ; PresenceListeningEndpoint org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint = new PresenceListeningEndpoint ( ) ; DirectChannel org.springframework.integration.xmpp.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.xmpp.inbound.DirectChannel . subscribe ( message -> { throw new RuntimeException ( STRING ) ; } ) ; PollableChannel org.springframework.integration.xmpp.inbound.PollableChannel = new QueueChannel ( ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setBeanFactory ( org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setOutputChannel ( org.springframework.integration.xmpp.inbound.DirectChannel ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . setErrorChannel ( org.springframework.integration.xmpp.inbound.PollableChannel ) ; org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint . afterPropertiesSet ( ) ; RosterListener org.springframework.integration.xmpp.inbound.RosterListener = ( RosterListener ) TestUtils . getPropertyValue ( org.springframework.integration.xmpp.inbound.PresenceListeningEndpoint , STRING ) ; Presence org.springframework.integration.xmpp.inbound.Presence = new Presence ( Type . available ) ; org.springframework.integration.xmpp.inbound.RosterListener . presenceChanged ( org.springframework.integration.xmpp.inbound.Presence ) ; ErrorMessage org.springframework.integration.xmpp.inbound.ErrorMessage = ( ErrorMessage ) org.springframework.integration.xmpp.inbound.PollableChannel . receive ( ) ; assertSame ( org.springframework.integration.xmpp.inbound.Presence , ( ( MessagingException ) org.springframework.integration.xmpp.inbound.ErrorMessage . getPayload ( ) ) . getFailedMessage ( ) . getPayload ( ) ) ; }  <METHOD_END>
