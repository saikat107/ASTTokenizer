<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; MessageContentsDelegate org.springframework.jms.listener.adapter.MessageContentsDelegate = mock ( MessageContentsDelegate .class ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.MessageContentsDelegate ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageContentsDelegate ) . handleMessage ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BytesMessage org.springframework.jms.listener.adapter.BytesMessage = mock ( BytesMessage .class ) ; given ( org.springframework.jms.listener.adapter.BytesMessage . getBodyLength ( ) ) . willReturn ( new java.lang.Long ( java.lang.String . byte[] ( ) . int ) ) ; given ( org.springframework.jms.listener.adapter.BytesMessage . readBytes ( any ( byte [] .class ) ) ) . willAnswer ( new Answer < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( InvocationOnMock org.springframework.jms.listener.adapter.InvocationOnMock ) throws java.lang.Throwable { byte [] byte[] = ( byte [] ) org.springframework.jms.listener.adapter.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ; return java.io.ByteArrayInputStream . int ( byte[] ) ; } } ) ; MessageContentsDelegate org.springframework.jms.listener.adapter.MessageContentsDelegate = mock ( MessageContentsDelegate .class ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.MessageContentsDelegate ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.BytesMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageContentsDelegate ) . handleMessage ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( InvocationOnMock org.springframework.jms.listener.adapter.InvocationOnMock ) throws java.lang.Throwable { byte [] byte[] = ( byte [] ) org.springframework.jms.listener.adapter.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ; return java.io.ByteArrayInputStream . int ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectMessage org.springframework.jms.listener.adapter.ObjectMessage = mock ( ObjectMessage .class ) ; given ( org.springframework.jms.listener.adapter.ObjectMessage . getObject ( ) ) . willReturn ( java.lang.Integer ) ; MessageContentsDelegate org.springframework.jms.listener.adapter.MessageContentsDelegate = mock ( MessageContentsDelegate .class ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.MessageContentsDelegate ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.ObjectMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageContentsDelegate ) . handleMessage ( java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectMessage org.springframework.jms.listener.adapter.ObjectMessage = mock ( ObjectMessage .class ) ; given ( org.springframework.jms.listener.adapter.ObjectMessage . getObject ( ) ) . willReturn ( org.springframework.jms.listener.adapter.MessageListenerAdapterTests.SerializableObject ) ; MessageContentsDelegate org.springframework.jms.listener.adapter.MessageContentsDelegate = mock ( MessageContentsDelegate .class ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.MessageContentsDelegate ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.ObjectMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageContentsDelegate ) . handleMessage ( org.springframework.jms.listener.adapter.MessageListenerAdapterTests.SerializableObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; MessageDelegate org.springframework.jms.listener.adapter.MessageDelegate = mock ( MessageDelegate .class ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.MessageDelegate ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . setMessageConverter ( null ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageDelegate ) . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; StubMessageListenerAdapter org.springframework.jms.listener.adapter.StubMessageListenerAdapter = new StubMessageListenerAdapter ( ) ; org.springframework.jms.listener.adapter.StubMessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; assertTrue ( org.springframework.jms.listener.adapter.StubMessageListenerAdapter . wasCalled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; StubMessageListenerAdapter org.springframework.jms.listener.adapter.StubMessageListenerAdapter = new StubMessageListenerAdapter ( ) ; org.springframework.jms.listener.adapter.StubMessageListenerAdapter . setDefaultListenerMethod ( STRING ) ; org.springframework.jms.listener.adapter.StubMessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; assertFalse ( org.springframework.jms.listener.adapter.StubMessageListenerAdapter . wasCalled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; MessageDelegate org.springframework.jms.listener.adapter.MessageDelegate = mock ( MessageDelegate .class ) ; willThrow ( java.lang.IllegalArgumentException ) . given ( org.springframework.jms.listener.adapter.MessageDelegate ) . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.MessageDelegate ) { @ java.lang.Override protected void void ( java.lang.Throwable java.lang.Throwable ) { assertNotNull ( STRING , java.lang.Throwable ) ; assertTrue ( STRING , java.lang.Throwable instanceof ListenerExecutionFailedException ) ; ListenerExecutionFailedException org.springframework.jms.listener.adapter.ListenerExecutionFailedException = ( ListenerExecutionFailedException ) java.lang.Throwable ; java.lang.Throwable java.lang.Throwable = org.springframework.jms.listener.adapter.ListenerExecutionFailedException . getCause ( ) ; assertNotNull ( STRING , java.lang.Throwable ) ; assertSame ( java.lang.IllegalArgumentException , java.lang.Throwable ) ; } } ; org.springframework.jms.listener.adapter.MessageListenerAdapter . setMessageConverter ( null ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Throwable java.lang.Throwable ) { assertNotNull ( STRING , java.lang.Throwable ) ; assertTrue ( STRING , java.lang.Throwable instanceof ListenerExecutionFailedException ) ; ListenerExecutionFailedException org.springframework.jms.listener.adapter.ListenerExecutionFailedException = ( ListenerExecutionFailedException ) java.lang.Throwable ; java.lang.Throwable java.lang.Throwable = org.springframework.jms.listener.adapter.ListenerExecutionFailedException . getCause ( ) ; assertNotNull ( STRING , java.lang.Throwable ) ; assertSame ( java.lang.IllegalArgumentException , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( ) ; assertNotNull ( STRING , org.springframework.jms.listener.adapter.MessageListenerAdapter . getMessageConverter ( ) ) ; assertTrue ( STRING , org.springframework.jms.listener.adapter.MessageListenerAdapter . getMessageConverter ( ) instanceof SimpleMessageConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( ) ; assertSame ( org.springframework.jms.listener.adapter.MessageListenerAdapter , org.springframework.jms.listener.adapter.MessageListenerAdapter . getDelegate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( ) ; assertEquals ( MessageListenerAdapter . ORIGINAL_DEFAULT_LISTENER_METHOD , org.springframework.jms.listener.adapter.MessageListenerAdapter . getDefaultListenerMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; ResponsiveMessageDelegate org.springframework.jms.listener.adapter.ResponsiveMessageDelegate = mock ( ResponsiveMessageDelegate .class ) ; given ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ) . willReturn ( java.lang.String ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . setMessageConverter ( null ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Queue org.springframework.jms.listener.adapter.Queue = mock ( Queue .class ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSCorrelationID ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSReplyTo ( ) ) . willReturn ( null ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; QueueSender org.springframework.jms.listener.adapter.QueueSender = mock ( QueueSender .class ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTextMessage ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; given ( org.springframework.jms.listener.adapter.Session . createProducer ( org.springframework.jms.listener.adapter.Queue ) ) . willReturn ( org.springframework.jms.listener.adapter.QueueSender ) ; ResponsiveMessageDelegate org.springframework.jms.listener.adapter.ResponsiveMessageDelegate = mock ( ResponsiveMessageDelegate .class ) ; given ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ) . willReturn ( java.lang.String ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; } } ; org.springframework.jms.listener.adapter.MessageListenerAdapter . setDefaultResponseDestination ( org.springframework.jms.listener.adapter.Queue ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.TextMessage ) . setJMSCorrelationID ( java.lang.String ) ; verify ( org.springframework.jms.listener.adapter.QueueSender ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.QueueSender ) . close ( ) ; verify ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Queue org.springframework.jms.listener.adapter.Queue = mock ( Queue .class ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSCorrelationID ( ) ) . willReturn ( null ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSMessageID ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSReplyTo ( ) ) . willReturn ( org.springframework.jms.listener.adapter.Queue ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; MessageProducer org.springframework.jms.listener.adapter.MessageProducer = mock ( MessageProducer .class ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.adapter.Session . createTextMessage ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; given ( org.springframework.jms.listener.adapter.Session . createProducer ( org.springframework.jms.listener.adapter.Queue ) ) . willReturn ( org.springframework.jms.listener.adapter.MessageProducer ) ; ResponsiveMessageDelegate org.springframework.jms.listener.adapter.ResponsiveMessageDelegate = mock ( ResponsiveMessageDelegate .class ) ; given ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ) . willReturn ( java.lang.String ) ; MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; } } ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.TextMessage ) . setJMSCorrelationID ( java.lang.String ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . close ( ) ; verify ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSCorrelationID ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSReplyTo ( ) ) . willReturn ( null ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; final QueueSession org.springframework.jms.listener.adapter.QueueSession = mock ( QueueSession .class ) ; given ( org.springframework.jms.listener.adapter.QueueSession . createTextMessage ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; ResponsiveMessageDelegate org.springframework.jms.listener.adapter.ResponsiveMessageDelegate = mock ( ResponsiveMessageDelegate .class ) ; given ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ) . willReturn ( java.lang.String ) ; final MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; } } ; try { org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage , org.springframework.jms.listener.adapter.QueueSession ) ; fail ( STRING ) ; } catch ( ReplyFailureException org.springframework.jms.listener.adapter.ReplyFailureException ) { assertEquals ( InvalidDestinationException .class , org.springframework.jms.listener.adapter.ReplyFailureException . getCause ( ) . getClass ( ) ) ; } verify ( org.springframework.jms.listener.adapter.TextMessage ) . setJMSCorrelationID ( java.lang.String ) ; verify ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Queue org.springframework.jms.listener.adapter.Queue = mock ( Queue .class ) ; final TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSCorrelationID ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSReplyTo ( ) ) . willReturn ( org.springframework.jms.listener.adapter.Queue ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; MessageProducer org.springframework.jms.listener.adapter.MessageProducer = mock ( MessageProducer .class ) ; willThrow ( new JMSException ( STRING ) ) . given ( org.springframework.jms.listener.adapter.MessageProducer ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; final QueueSession org.springframework.jms.listener.adapter.QueueSession = mock ( QueueSession .class ) ; given ( org.springframework.jms.listener.adapter.QueueSession . createTextMessage ( java.lang.String ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; given ( org.springframework.jms.listener.adapter.QueueSession . createProducer ( org.springframework.jms.listener.adapter.Queue ) ) . willReturn ( org.springframework.jms.listener.adapter.MessageProducer ) ; ResponsiveMessageDelegate org.springframework.jms.listener.adapter.ResponsiveMessageDelegate = mock ( ResponsiveMessageDelegate .class ) ; given ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ) . willReturn ( java.lang.String ) ; final MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; } } ; try { org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage , org.springframework.jms.listener.adapter.QueueSession ) ; fail ( STRING ) ; } catch ( ReplyFailureException org.springframework.jms.listener.adapter.ReplyFailureException ) { assertEquals ( JMSException .class , org.springframework.jms.listener.adapter.ReplyFailureException . getCause ( ) . getClass ( ) ) ; } verify ( org.springframework.jms.listener.adapter.TextMessage ) . setJMSCorrelationID ( java.lang.String ) ; verify ( org.springframework.jms.listener.adapter.MessageProducer ) . close ( ) ; verify ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; final QueueSession org.springframework.jms.listener.adapter.QueueSession = mock ( QueueSession .class ) ; ResponsiveMessageDelegate org.springframework.jms.listener.adapter.ResponsiveMessageDelegate = mock ( ResponsiveMessageDelegate .class ) ; willThrow ( new java.lang.IllegalArgumentException ( STRING ) ) . given ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; final MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; } } ; try { org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage , org.springframework.jms.listener.adapter.QueueSession ) ; fail ( STRING ) ; } catch ( ListenerExecutionFailedException org.springframework.jms.listener.adapter.ListenerExecutionFailedException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; final MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( ) { @ java.lang.Override protected void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof java.lang.IllegalStateException ) ; } } ; org.springframework.jms.listener.adapter.MessageListenerAdapter . setDefaultListenerMethod ( null ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof java.lang.IllegalStateException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getText ( ) ) . willReturn ( java.lang.String ) ; final MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( ) { @ java.lang.Override protected void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof javax . javax.jms . javax.jms ) ; } @ java.lang.Override protected java.lang.String java.lang.String ( Message org.springframework.jms.listener.adapter.Message , java.lang.Object java.lang.Object ) { return null ; } } ; org.springframework.jms.listener.adapter.MessageListenerAdapter . setDefaultListenerMethod ( null ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Throwable java.lang.Throwable ) { assertTrue ( java.lang.Throwable instanceof javax . javax.jms . javax.jms ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( Message org.springframework.jms.listener.adapter.Message , java.lang.Object java.lang.Object ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; final Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; ResponsiveMessageDelegate org.springframework.jms.listener.adapter.ResponsiveMessageDelegate = mock ( ResponsiveMessageDelegate .class ) ; given ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ) . willReturn ( java.lang.String ) ; final MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.ResponsiveMessageDelegate ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; } } ; org.springframework.jms.listener.adapter.MessageListenerAdapter . setMessageConverter ( null ) ; try { org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage , org.springframework.jms.listener.adapter.Session ) ; fail ( STRING ) ; } catch ( ReplyFailureException org.springframework.jms.listener.adapter.ReplyFailureException ) { assertEquals ( MessageConversionException .class , org.springframework.jms.listener.adapter.ReplyFailureException . getCause ( ) . getClass ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Queue org.springframework.jms.listener.adapter.Queue = mock ( Queue .class ) ; final TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSCorrelationID ( ) ) . willReturn ( java.lang.String ) ; given ( org.springframework.jms.listener.adapter.TextMessage . getJMSReplyTo ( ) ) . willReturn ( org.springframework.jms.listener.adapter.Queue ) ; TextMessage org.springframework.jms.listener.adapter.TextMessage = mock ( TextMessage .class ) ; QueueSender org.springframework.jms.listener.adapter.QueueSender = mock ( QueueSender .class ) ; Session org.springframework.jms.listener.adapter.Session = mock ( Session .class ) ; given ( org.springframework.jms.listener.adapter.Session . createProducer ( org.springframework.jms.listener.adapter.Queue ) ) . willReturn ( org.springframework.jms.listener.adapter.QueueSender ) ; ResponsiveJmsTextMessageReturningMessageDelegate org.springframework.jms.listener.adapter.ResponsiveJmsTextMessageReturningMessageDelegate = mock ( ResponsiveJmsTextMessageReturningMessageDelegate .class ) ; given ( org.springframework.jms.listener.adapter.ResponsiveJmsTextMessageReturningMessageDelegate . handleMessage ( org.springframework.jms.listener.adapter.TextMessage ) ) . willReturn ( org.springframework.jms.listener.adapter.TextMessage ) ; final MessageListenerAdapter org.springframework.jms.listener.adapter.MessageListenerAdapter = new MessageListenerAdapter ( org.springframework.jms.listener.adapter.ResponsiveJmsTextMessageReturningMessageDelegate ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; } } ; org.springframework.jms.listener.adapter.MessageListenerAdapter . setMessageConverter ( null ) ; org.springframework.jms.listener.adapter.MessageListenerAdapter . onMessage ( org.springframework.jms.listener.adapter.TextMessage , org.springframework.jms.listener.adapter.Session ) ; verify ( org.springframework.jms.listener.adapter.TextMessage ) . setJMSCorrelationID ( java.lang.String ) ; verify ( org.springframework.jms.listener.adapter.QueueSender ) . send ( org.springframework.jms.listener.adapter.TextMessage ) ; verify ( org.springframework.jms.listener.adapter.QueueSender ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message org.springframework.jms.listener.adapter.Message ) { return org.springframework.jms.listener.adapter.Message ; }  <METHOD_END>
