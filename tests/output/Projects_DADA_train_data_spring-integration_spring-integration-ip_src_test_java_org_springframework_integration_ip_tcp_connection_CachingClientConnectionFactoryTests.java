<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; TcpConnectionInterceptorSupport org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport = ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ; Log org.springframework.integration.ip.tcp.connection.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport , STRING , Log .class ) ) ; when ( org.springframework.integration.ip.tcp.connection.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; new DirectFieldAccessor ( org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport ) . setPropertyValue ( STRING , org.springframework.integration.ip.tcp.connection.Log ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionInterceptorSupport . onMessage ( new ErrorMessage ( new java.lang.RuntimeException ( ) ) ) ; ArgumentCaptor < java.lang.String > org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; verify ( org.springframework.integration.ip.tcp.connection.Log ) . debug ( org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> . capture ( ) ) ; assertThat ( org.springframework.integration.ip.tcp.connection.ArgumentCaptor<java.lang.String> . getValue ( ) , startsWith ( STRING ) ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; doAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.integration.ip.tcp.connection.InvocationOnMock ) throws java.lang.Throwable { return null ; } } ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . close ( ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) . thenReturn ( false ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; assertSame ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.integration.ip.tcp.connection.InvocationOnMock ) throws java.lang.Throwable { return null ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setConnectionWaitTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; int int = NUMBER ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING + ( int ++ ) ) ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) , org.springframework.integration.ip.tcp.connection.TcpConnection . toString ( ) ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . stop ( ) ; Answer < java.lang.Object > org.springframework.integration.ip.tcp.connection.Answer<java.lang.Object> = new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.integration.ip.tcp.connection.InvocationOnMock ) throws java.lang.Throwable { return null ; } } ; doAnswer ( org.springframework.integration.ip.tcp.connection.Answer<java.lang.Object> ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . close ( ) ; doAnswer ( org.springframework.integration.ip.tcp.connection.Answer<java.lang.Object> ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . close ( ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( false ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . close ( ) ; verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . close ( ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) . thenReturn ( false ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) . thenReturn ( false ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertNotSame ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING ) ) ; assertNotSame ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.integration.ip.tcp.connection.InvocationOnMock ) throws java.lang.Throwable { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertNotSame ( org.springframework.integration.ip.tcp.connection.TcpConnection , org.springframework.integration.ip.tcp.connection.TcpConnection ) ; java.util.concurrent.Semaphore java.util.concurrent.Semaphore = TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory , STRING ) , STRING , java.util.concurrent.Semaphore .class ) ; assertEquals ( NUMBER , java.util.concurrent.Semaphore . int ( ) ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setPoolSize ( NUMBER ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertEquals ( NUMBER , java.util.concurrent.Semaphore . int ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertEquals ( NUMBER , java.util.concurrent.Semaphore . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING , true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING , true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING , true ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( STRING , true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; java.util.concurrent.Semaphore java.util.concurrent.Semaphore = TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory , STRING ) , STRING , java.util.concurrent.Semaphore .class ) ; assertEquals ( NUMBER , java.util.concurrent.Semaphore . int ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertEquals ( NUMBER , java.util.concurrent.Semaphore . int ( ) ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setPoolSize ( NUMBER ) ; assertEquals ( NUMBER , java.util.concurrent.Semaphore . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getActiveCount ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertEquals ( NUMBER , java.util.concurrent.Semaphore . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getActiveCount ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getActiveCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getIdleCount ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertEquals ( NUMBER , java.util.concurrent.Semaphore . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getActiveCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getIdleCount ( ) ) ; verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . close ( ) ; verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; void ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; void ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> private void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection , TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection , CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) throws java.lang.Exception { TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; try { org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { assertEquals ( STRING , java.io.IOException . java.lang.String ( ) ) ; } TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) . contains ( org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) ) ) ; assertTrue ( org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) . contains ( org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ( TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport )			throws java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isRunning ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setConnectionWaitTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; return org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.io.IOException { java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; when ( java.net.Socket . boolean ( ) ) . thenReturn ( true ) ; java.io.OutputStream java.io.OutputStream = mock ( java.io.OutputStream .class ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( java.io.OutputStream ) . write ( any ( byte [] .class ) , anyInt ( ) , anyInt ( ) ) ; when ( java.net.Socket . java.io.OutputStream ( ) ) . thenReturn ( java.io.OutputStream ) ; TcpNetConnection org.springframework.integration.ip.tcp.connection.TcpNetConnection = new TcpNetConnection ( java.net.Socket , false , false , new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) {			} @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } , STRING ) ; org.springframework.integration.ip.tcp.connection.TcpNetConnection . setMapper ( new TcpMessageMapper ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetConnection . setSerializer ( new ByteArrayCrLfSerializer ( ) ) ; return org.springframework.integration.ip.tcp.connection.TcpNetConnection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) java.lang.Exception { java.nio.channels.SocketChannel java.nio.channels.SocketChannel = mock ( java.nio.channels.SocketChannel .class ) ; new DirectFieldAccessor ( java.nio.channels.SocketChannel ) . setPropertyValue ( STRING , false ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( java.nio.channels.SocketChannel ) . write ( Mockito . any ( java.nio.ByteBuffer .class ) ) ; when ( java.nio.channels.SocketChannel . java.net.Socket ( ) ) . thenReturn ( mock ( java.net.Socket .class ) ) ; TcpNioConnection org.springframework.integration.ip.tcp.connection.TcpNioConnection = new TcpNioConnection ( java.nio.channels.SocketChannel , false , false , new ApplicationEventPublisher ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) {			} @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } , STRING ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . setMapper ( new TcpMessageMapper ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNioConnection . setSerializer ( new ByteArrayCrLfSerializer ( ) ) ; return org.springframework.integration.ip.tcp.connection.TcpNioConnection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( java.lang.String java.lang.String ) { return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( java.lang.String java.lang.String , boolean boolean ) { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = mock ( TcpConnectionSupport .class ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . getConnectionId ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . toString ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) . thenReturn ( true ) ; if ( ! boolean ) { doThrow ( new java.lang.RuntimeException ( STRING ) ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . close ( ) ; } return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; new DirectFieldAccessor ( this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) . setPropertyValue ( STRING , this . org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; this . org.springframework.integration.ip.tcp.connection.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; java.lang.String java.lang.String = org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID , java.lang.String .class ) ; org.springframework.integration.ip.tcp.connection.SubscribableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertEquals ( java.lang.String , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( true ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . void ( ( ) { while ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) { Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.PollableChannel . receive ( NUMBER ) ; if ( org.springframework.integration.ip.tcp.connection.Message<> != null ) { java.util.List<java.lang.String> . boolean ( ( java.lang.String ) org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; org.springframework.integration.ip.tcp.connection.SubscribableChannel . send ( MessageBuilder . withPayload ( STRING + new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) . copyHeaders ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) ) . build ( ) ) ; } } } ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; new DirectFieldAccessor ( this . org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) . setPropertyValue ( STRING , this . org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; this . org.springframework.integration.ip.tcp.connection.SubscribableChannel . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertEquals ( STRING + STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; java.util.concurrent.BlockingQueue<?> < ? > java.util.concurrent.BlockingQueue<?> = TestUtils . getPropertyValue ( this . org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory , STRING , java.util.concurrent.BlockingQueue .class ) ; int int = NUMBER ; while ( int ++ < NUMBER && java.util.concurrent.BlockingQueue<> . int ( ) == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } org.springframework.integration.ip.tcp.connection.SubscribableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertEquals ( STRING + STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; void ( new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; void ( new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) throws java.lang.Exception { org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSoTimeout ( NUMBER ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ) { java.lang.Thread . void ( NUMBER ) ; } assertFalse ( org.springframework.integration.ip.tcp.connection.TcpConnection . isOpen ( ) ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { latch1 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { latch2 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> false ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> false ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertSame ( ( ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . getTheConnection ( ) , ( ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . getTheConnection ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertNotSame ( ( ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . getTheConnection ( ) , ( ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . getTheConnection ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; TestingUtilities . waitStopListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; TestingUtilities . waitUntilFactoryHasThisNumberOfConnections ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; SimplePool < ? > org.springframework.integration.ip.tcp.connection.SimplePool<?> = TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory , STRING , SimplePool .class ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.SimplePool<> . getIdleCount ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { latch1 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { latch2 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> false ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> false ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertSame ( ( ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . getTheConnection ( ) , ( ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . getTheConnection ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertNotSame ( ( ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . getTheConnection ( ) , ( ( TcpConnectionInterceptorSupport ) org.springframework.integration.ip.tcp.connection.TcpConnection ) . getTheConnection ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { connectionIds . add ( ( String ) message . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; latch1 . countDown ( ) ; latch2 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setSingleUse ( false ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setConnectionWaitTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . close ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . close ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertSame ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . close ( ) ; } assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertSame ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setApplicationEventPublisher ( mock ( ApplicationEventPublisher .class ) ) ; final TcpSendingMessageHandler org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler = new TcpSendingMessageHandler ( ) ; org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { if ( ! ( message instanceof ErrorMessage ) ) { if ( count . decrementAndGet ( ) < NUMBER ) { try { Thread . sleep ( NUMBER ) ; } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; } } handler . handleMessage ( message ) ; } return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , null ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; TcpNetClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory . setApplicationEventPublisher ( mock ( ApplicationEventPublisher .class ) ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.TcpNetClientConnectionFactory , NUMBER ) ; final TcpOutboundGateway org.springframework.integration.ip.tcp.connection.TcpOutboundGateway = new TcpOutboundGateway ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) ; QueueChannel org.springframework.integration.ip.tcp.connection.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setOutputChannel ( org.springframework.integration.ip.tcp.connection.QueueChannel ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . afterPropertiesSet ( ) ; Log org.springframework.integration.ip.tcp.connection.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpOutboundGateway , STRING , Log .class ) ) ; new DirectFieldAccessor ( org.springframework.integration.ip.tcp.connection.TcpOutboundGateway ) . setPropertyValue ( STRING , org.springframework.integration.ip.tcp.connection.Log ) ; when ( org.springframework.integration.ip.tcp.connection.Log . isDebugEnabled ( ) ) . thenReturn ( true ) ; doAnswer ( new Answer < java.lang.Void > ( ) { private final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; @ java.lang.Override public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.integration.ip.tcp.connection.InvocationOnMock ) throws java.lang.Throwable { org.springframework.integration.ip.tcp.connection.InvocationOnMock . callRealMethod ( ) ; java.lang.String java.lang.String = org.springframework.integration.ip.tcp.connection.InvocationOnMock . getArgument ( NUMBER ) ; if ( java.lang.String . boolean ( STRING ) ) { java.util.concurrent.Executors . java.util.concurrent.ScheduledExecutorService ( ) . void ( ( ) org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . handleMessage ( new GenericMessage <> ( STRING ) ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.concurrent.CountDownLatch . void ( ) ; } return null ; } } ) . when ( org.springframework.integration.ip.tcp.connection.Log ) . debug ( anyString ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . start ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < byte [] > org.springframework.integration.ip.tcp.connection.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<byte[]> ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.integration.ip.tcp.connection.Message<byte[]> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<byte[]> ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.integration.ip.tcp.connection.Message<byte[]> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpSendingMessageHandler . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . stop ( ) ; verify ( org.springframework.integration.ip.tcp.connection.Log , never ( ) ) . error ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( InvocationOnMock org.springframework.integration.ip.tcp.connection.InvocationOnMock ) throws java.lang.Throwable { org.springframework.integration.ip.tcp.connection.InvocationOnMock . callRealMethod ( ) ; java.lang.String java.lang.String = org.springframework.integration.ip.tcp.connection.InvocationOnMock . getArgument ( NUMBER ) ; if ( java.lang.String . boolean ( STRING ) ) { java.util.concurrent.Executors . java.util.concurrent.ScheduledExecutorService ( ) . void ( ( ) org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . handleMessage ( new GenericMessage <> ( STRING ) ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.concurrent.CountDownLatch . void ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , NUMBER ) { @ java.lang.Override protected java.net.Socket java.net.Socket ( java.lang.String java.lang.String , int int ) throws java.io.IOException { java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; when ( java.net.Socket . java.io.InputStream ( ) ) . thenReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; return java.net.Socket ; } @ java.lang.Override public boolean boolean ( ) { return true ; } } ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setApplicationEventPublisher ( mock ( ApplicationEventPublisher .class ) ) ; final CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> < Message < ? > > ( ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . registerListener ( message -> { if ( ! ( message instanceof ErrorMessage ) ) { received . set ( message ) ; latch . countDown ( ) ; } return false ; } ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . start ( ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . getConnection ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.ip.tcp.connection.Message<?>> . get ( ) . getHeaders ( ) . get ( IpHeaders . ACTUAL_CONNECTION_ID ) ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.net.Socket java.net.Socket ( java.lang.String java.lang.String , int int ) throws java.io.IOException { java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; when ( java.net.Socket . java.io.InputStream ( ) ) . thenReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; return java.net.Socket ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = mock ( TcpConnectionSupport .class ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) . thenReturn ( true ) ; return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; }  <METHOD_END>
