<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { if ( StreamingResponseBody .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ) { return true ; } else if ( ResponseEntity .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = ResolvableType . forMethodParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) . getGeneric ( NUMBER ) . resolve ( ) ; return ( java.lang.Class<> != null && StreamingResponseBody .class . boolean ( java.lang.Class<> ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { if ( java.lang.Object == null ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; return; } HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeResponse ( HttpServletResponse .class ) ; ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse = new ServletServerHttpResponse ( org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) ; if ( java.lang.Object instanceof ResponseEntity ) { ResponseEntity < ? > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<?> = ( ResponseEntity < ? > ) java.lang.Object ; org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . setStatus ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> . getStatusCodeValue ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . getHeaders ( ) . putAll ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> . getHeaders ( ) ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> . getBody ( ) ; if ( java.lang.Object == null ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . flush ( ) ; return; } } ServletRequest org.springframework.web.servlet.mvc.method.annotation.ServletRequest = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeRequest ( ServletRequest .class ) ; ShallowEtagHeaderFilter . disableContentCaching ( org.springframework.web.servlet.mvc.method.annotation.ServletRequest ) ; Assert . isInstanceOf ( StreamingResponseBody .class , java.lang.Object , STRING ) ; StreamingResponseBody org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody = ( StreamingResponseBody ) java.lang.Object ; java.util.concurrent.Callable<java.lang.Void> < java.lang.Void > java.util.concurrent.Callable<java.lang.Void> = new org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBodyReturnValueHandler.StreamingResponseBodyTask ( org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . getBody ( ) , org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody ) ; WebAsyncUtils . getAsyncManager ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . startCallableProcessing ( java.util.concurrent.Callable<java.lang.Void> , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer ) ; }  <METHOD_END>
<METHOD_START> public void ( java.io.OutputStream java.io.OutputStream , StreamingResponseBody org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody ) { this . java.io.OutputStream = java.io.OutputStream ; this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody = org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody . writeTo ( this . java.io.OutputStream ) ; return null ; }  <METHOD_END>
