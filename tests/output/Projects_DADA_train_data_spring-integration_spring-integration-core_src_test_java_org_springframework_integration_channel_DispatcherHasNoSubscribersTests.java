<METHOD_START> @ Before public void void ( ) { org.springframework.integration.channel.AbstractApplicationContext . setId ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.integration.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.channel.MessagingException ) { assertThat ( org.springframework.integration.channel.MessagingException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.integration.channel.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.channel.MessagingException ) { assertThat ( org.springframework.integration.channel.MessagingException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DirectChannel org.springframework.integration.channel.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.channel.DirectChannel . setBeanName ( STRING ) ; try { org.springframework.integration.channel.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; fail ( STRING ) ; } catch ( MessagingException org.springframework.integration.channel.MessagingException ) { assertThat ( org.springframework.integration.channel.MessagingException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
