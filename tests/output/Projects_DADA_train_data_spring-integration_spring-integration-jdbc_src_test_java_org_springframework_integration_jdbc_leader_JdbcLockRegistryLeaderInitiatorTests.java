<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.integration.jdbc.leader.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( ) . setType ( EmbeddedDatabaseType . H2 ) . addScript ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.jdbc.leader.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.jdbc.leader.JdbcLockRegistryLeaderInitiatorTests.CountingPublisher org.springframework.integration.jdbc.leader.JdbcLockRegistryLeaderInitiatorTests.CountingPublisher = new org.springframework.integration.jdbc.leader.JdbcLockRegistryLeaderInitiatorTests.CountingPublisher ( java.util.concurrent.CountDownLatch ) ; java.util.List<org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator> < LockRegistryLeaderInitiator > java.util.List<org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator> = new java.util.ArrayList<org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator> < LockRegistryLeaderInitiator > ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { DefaultLockRepository org.springframework.integration.jdbc.leader.DefaultLockRepository = new DefaultLockRepository ( org.springframework.integration.jdbc.leader.EmbeddedDatabase ) ; org.springframework.integration.jdbc.leader.DefaultLockRepository . afterPropertiesSet ( ) ; LockRegistryLeaderInitiator org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator = new LockRegistryLeaderInitiator ( new JdbcLockRegistry ( org.springframework.integration.jdbc.leader.DefaultLockRepository ) , new DefaultCandidate ( STRING , STRING ) ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( org.springframework.integration.jdbc.leader.JdbcLockRegistryLeaderInitiatorTests.CountingPublisher ) ; java.util.List<org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator> . add ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator ) ; } for ( LockRegistryLeaderInitiator org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator : java.util.List<org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator> ) { org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . start ( ) ; } assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; LockRegistryLeaderInitiator org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator = org.springframework.integration.jdbc.leader.JdbcLockRegistryLeaderInitiatorTests.CountingPublisher . org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator ; LockRegistryLeaderInitiator org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator = null ; for ( LockRegistryLeaderInitiator org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator : java.util.List<org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator> ) { if ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator != org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator ) { org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator = org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator ; break; } } assertNotNull ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator ) ; assertThat ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; assertThat ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( new org.springframework.integration.jdbc.leader.JdbcLockRegistryLeaderInitiatorTests.CountingPublisher ( java.util.concurrent.CountDownLatch , java.util.concurrent.CountDownLatch ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.jdbc.leader.Context , java.lang.String java.lang.String ) { try { assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } super. void ( java.lang.Object , org.springframework.integration.jdbc.leader.Context , java.lang.String ) ; } } ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( new org.springframework.integration.jdbc.leader.JdbcLockRegistryLeaderInitiatorTests.CountingPublisher ( java.util.concurrent.CountDownLatch , java.util.concurrent.CountDownLatch ) { @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.jdbc.leader.Context , java.lang.String java.lang.String ) { try { assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } super. void ( java.lang.Object , org.springframework.integration.jdbc.leader.Context , java.lang.String ) ; } } ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . yield ( ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; assertThat ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . yield ( ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( true ) ) ; assertThat ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . stop ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . setLeaderEventPublisher ( new org.springframework.integration.jdbc.leader.JdbcLockRegistryLeaderInitiatorTests.CountingPublisher ( new java.util.concurrent.CountDownLatch ( NUMBER ) , java.util.concurrent.CountDownLatch ) ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . yield ( ) ; assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . getContext ( ) . isLeader ( ) , is ( false ) ) ; org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.jdbc.leader.Context , java.lang.String java.lang.String ) { try { assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } super. void ( java.lang.Object , org.springframework.integration.jdbc.leader.Context , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.jdbc.leader.Context , java.lang.String java.lang.String ) { try { assertThat ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } super. void ( java.lang.Object , org.springframework.integration.jdbc.leader.Context , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch , java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> void ( java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this( java.util.concurrent.CountDownLatch , new java.util.concurrent.CountDownLatch ( NUMBER ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.jdbc.leader.Context , java.lang.String java.lang.String ) { this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Context org.springframework.integration.jdbc.leader.Context , java.lang.String java.lang.String ) { this . org.springframework.integration.jdbc.leader.LockRegistryLeaderInitiator = ( LockRegistryLeaderInitiator ) java.lang.Object ; this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
