<METHOD_START> @ java.lang.Override public int int ( ) { return DependencyManagementBomTransformation . ORDER - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.ModuleNode . setPackage ( new PackageNode ( STRING ) ) ; this . org.springframework.boot.cli.compiler.ASTTransformation . visit ( new ASTNode [] { this . org.springframework.boot.cli.compiler.ModuleNode } , this . org.springframework.boot.cli.compiler.SourceUnit ) ; assertThat ( java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( ClassHelper . make ( STRING ) ) ; this . org.springframework.boot.cli.compiler.ASTTransformation . visit ( new ASTNode [] { this . org.springframework.boot.cli.compiler.ModuleNode } , this . org.springframework.boot.cli.compiler.SourceUnit ) ; assertThat ( java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.ModuleNode . setPackage ( new PackageNode ( STRING ) ) ; ClassNode org.springframework.boot.cli.compiler.ClassNode = ClassHelper . make ( STRING ) ; this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( org.springframework.boot.cli.compiler.ClassNode ) ; AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode = new AnnotationNode ( ClassHelper . make ( DependencyManagementBom .class ) ) ; org.springframework.boot.cli.compiler.AnnotationNode . addMember ( STRING , new ConstantExpression ( STRING ) ) ; org.springframework.boot.cli.compiler.ClassNode . addAnnotation ( org.springframework.boot.cli.compiler.AnnotationNode ) ; this . org.springframework.boot.cli.compiler.ASTTransformation . visit ( new ASTNode [] { this . org.springframework.boot.cli.compiler.ModuleNode } , this . org.springframework.boot.cli.compiler.SourceUnit ) ; assertThat ( java.util.List<java.lang.String> ( ) . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { Expression org.springframework.boot.cli.compiler.Expression = org.springframework.boot.cli.compiler.AnnotationNode ( ) . getMember ( STRING ) ; if ( org.springframework.boot.cli.compiler.Expression instanceof ListExpression ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( Expression org.springframework.boot.cli.compiler.Expression : ( ( ListExpression ) org.springframework.boot.cli.compiler.Expression ) . getExpressions ( ) ) { java.util.List<java.lang.String> . boolean ( ( java.lang.String ) ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) . getValue ( ) ) ; } return java.util.List<java.lang.String> ; } else if ( org.springframework.boot.cli.compiler.Expression == null ) { return null ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode ( ) { PackageNode org.springframework.boot.cli.compiler.PackageNode = this . org.springframework.boot.cli.compiler.ModuleNode . getPackage ( ) ; ClassNode org.springframework.boot.cli.compiler.ClassNode = ClassHelper . make ( DependencyManagementBom .class ) ; if ( org.springframework.boot.cli.compiler.PackageNode != null ) { if ( ! org.springframework.boot.cli.compiler.PackageNode . getAnnotations ( org.springframework.boot.cli.compiler.ClassNode ) . isEmpty ( ) ) { return org.springframework.boot.cli.compiler.PackageNode . getAnnotations ( org.springframework.boot.cli.compiler.ClassNode ) . get ( NUMBER ) ; } } if ( ! this . org.springframework.boot.cli.compiler.ModuleNode . getClasses ( ) . isEmpty ( ) ) { return this . org.springframework.boot.cli.compiler.ModuleNode . getClasses ( ) . get ( NUMBER ) . getAnnotations ( org.springframework.boot.cli.compiler.ClassNode ) . get ( NUMBER ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
