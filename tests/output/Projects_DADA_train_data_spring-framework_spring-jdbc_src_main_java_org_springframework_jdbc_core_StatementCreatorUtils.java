<METHOD_START> public static int int ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Integer java.lang.Integer = java.util.Map<java.lang.Class<?>,java.lang.Integer> . java.lang.Integer ( java.lang.Class<> ) ; if ( java.lang.Integer != null ) { return java.lang.Integer ; } if ( java.lang.Number .class . boolean ( java.lang.Class<> ) ) { return java.sql.Types . int ; } if ( boolean ( java.lang.Class<> ) ) { return java.sql.Types . int ; } if ( boolean ( java.lang.Class<> ) || java.util.Calendar .class . boolean ( java.lang.Class<> ) ) { return java.sql.Types . int ; } return SqlTypeValue . TYPE_UNKNOWN ; }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , SqlParameter org.springframework.jdbc.core.SqlParameter , java.lang.Object java.lang.Object )			throws java.sql.SQLException { void ( java.sql.PreparedStatement , int , org.springframework.jdbc.core.SqlParameter . getSqlType ( ) , org.springframework.jdbc.core.SqlParameter . getTypeName ( ) , org.springframework.jdbc.core.SqlParameter . getScale ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , int int , java.lang.Object java.lang.Object )			throws java.sql.SQLException { void ( java.sql.PreparedStatement , int , int , null , null , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , int int , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws java.sql.SQLException { void ( java.sql.PreparedStatement , int , int , java.lang.String , null , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , int int , java.lang.String java.lang.String , java.lang.Integer java.lang.Integer , java.lang.Object java.lang.Object ) throws java.sql.SQLException { java.lang.String java.lang.String = java.lang.String ; int int = int ; java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Object instanceof SqlParameterValue ) { SqlParameterValue org.springframework.jdbc.core.SqlParameterValue = ( SqlParameterValue ) java.lang.Object ; if ( org.springframework.jdbc.core.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.Log . debug ( STRING + int + STRING + org.springframework.jdbc.core.SqlParameterValue . getSqlType ( ) + STRING + org.springframework.jdbc.core.SqlParameterValue . getTypeName ( ) ) ; } if ( org.springframework.jdbc.core.SqlParameterValue . getSqlType ( ) != SqlTypeValue . TYPE_UNKNOWN ) { int = org.springframework.jdbc.core.SqlParameterValue . getSqlType ( ) ; } if ( org.springframework.jdbc.core.SqlParameterValue . getTypeName ( ) != null ) { java.lang.String = org.springframework.jdbc.core.SqlParameterValue . getTypeName ( ) ; } java.lang.Object = org.springframework.jdbc.core.SqlParameterValue . getValue ( ) ; } if ( org.springframework.jdbc.core.Log . isTraceEnabled ( ) ) { org.springframework.jdbc.core.Log . trace ( STRING + int + STRING + java.lang.Object + STRING + ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) : STRING ) + STRING + ( int == SqlTypeValue . TYPE_UNKNOWN ? STRING : java.lang.Integer . java.lang.String ( int ) ) ) ; } if ( java.lang.Object == null ) { void ( java.sql.PreparedStatement , int , int , java.lang.String ) ; } else { void ( java.sql.PreparedStatement , int , int , java.lang.String , java.lang.Integer , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , int int , java.lang.String java.lang.String ) throws java.sql.SQLException { if ( int == SqlTypeValue . TYPE_UNKNOWN || int == java.sql.Types . int ) { boolean boolean = false ; java.lang.Integer java.lang.Integer = null ; if ( ! boolean ) { java.lang.Integer = java.sql.PreparedStatement . java.sql.ParameterMetaData ( ) . int ( int ) ; } if ( java.lang.Integer == null ) { java.lang.Integer = java.sql.Types . int ; java.sql.DatabaseMetaData java.sql.DatabaseMetaData = java.sql.PreparedStatement . java.sql.Connection ( ) . java.sql.DatabaseMetaData ( ) ; java.lang.String java.lang.String = java.sql.DatabaseMetaData . java.lang.String ( ) ; java.lang.String java.lang.String = java.sql.DatabaseMetaData . java.lang.String ( ) ; if ( java.lang.String . boolean ( STRING ) || ( java.lang.String . boolean ( STRING ) && java.lang.String . boolean ( STRING ) ) ) { boolean = true ; } else if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { java.lang.Integer = java.sql.Types . int ; } } if ( boolean ) { java.sql.PreparedStatement . void ( int , null ) ; } else { java.sql.PreparedStatement . void ( int , java.lang.Integer ) ; } } else if ( java.lang.String != null ) { java.sql.PreparedStatement . void ( int , int , java.lang.String ) ; } else { java.sql.PreparedStatement . void ( int , int ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , int int , java.lang.String java.lang.String , java.lang.Integer java.lang.Integer , java.lang.Object java.lang.Object ) throws java.sql.SQLException { if ( java.lang.Object instanceof SqlTypeValue ) { ( ( SqlTypeValue ) java.lang.Object ) . setTypeValue ( java.sql.PreparedStatement , int , int , java.lang.String ) ; } else if ( java.lang.Object instanceof SqlValue ) { ( ( SqlValue ) java.lang.Object ) . setValue ( java.sql.PreparedStatement , int ) ; } else if ( int == java.sql.Types . int || int == java.sql.Types . int || int == java.sql.Types . int || int == java.sql.Types . int ) { java.sql.PreparedStatement . void ( int , java.lang.Object . java.lang.String ( ) ) ; } else if ( ( int == java.sql.Types . int || int == java.sql.Types . int ) && boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.String java.lang.String = java.lang.Object . java.lang.String ( ) ; if ( java.lang.String . int ( ) > NUMBER ) { if ( int == java.sql.Types . int ) { java.sql.PreparedStatement . void ( int , new java.io.StringReader ( java.lang.String ) , java.lang.String . int ( ) ) ; } else { java.sql.PreparedStatement . void ( int , new java.io.StringReader ( java.lang.String ) , java.lang.String . int ( ) ) ; } return; } java.sql.PreparedStatement . void ( int , java.lang.String ) ; } else if ( int == java.sql.Types . int || int == java.sql.Types . int ) { if ( java.lang.Object instanceof java.math.BigDecimal ) { java.sql.PreparedStatement . void ( int , ( java.math.BigDecimal ) java.lang.Object ) ; } else if ( java.lang.Integer != null ) { java.sql.PreparedStatement . void ( int , java.lang.Object , int , java.lang.Integer ) ; } else { java.sql.PreparedStatement . void ( int , java.lang.Object , int ) ; } } else if ( int == java.sql.Types . int ) { if ( java.lang.Object instanceof java.lang.Boolean ) { java.sql.PreparedStatement . void ( int , ( java.lang.Boolean ) java.lang.Object ) ; } else { java.sql.PreparedStatement . void ( int , java.lang.Object , java.sql.Types . int ) ; } } else if ( int == java.sql.Types . int ) { if ( java.lang.Object instanceof java . util . java.util.Date ) { if ( java.lang.Object instanceof java . sql . java.sql.Date ) { java.sql.PreparedStatement . void ( int , ( java . sql . java.sql.Date ) java.lang.Object ) ; } else { java.sql.PreparedStatement . void ( int , new java . sql . java.sql.Date ( ( ( java . util . java.util.Date ) java.lang.Object ) . long ( ) ) ) ; } } else if ( java.lang.Object instanceof java.util.Calendar ) { java.util.Calendar java.util.Calendar = ( java.util.Calendar ) java.lang.Object ; java.sql.PreparedStatement . void ( int , new java . sql . java.sql.Date ( java.util.Calendar . java.util.Date ( ) . long ( ) ) , java.util.Calendar ) ; } else { java.sql.PreparedStatement . void ( int , java.lang.Object , java.sql.Types . int ) ; } } else if ( int == java.sql.Types . int ) { if ( java.lang.Object instanceof java . util . java.util.Date ) { if ( java.lang.Object instanceof java . sql . java.sql.Time ) { java.sql.PreparedStatement . void ( int , ( java . sql . java.sql.Time ) java.lang.Object ) ; } else { java.sql.PreparedStatement . void ( int , new java . sql . java.sql.Time ( ( ( java . util . java.util.Date ) java.lang.Object ) . long ( ) ) ) ; } } else if ( java.lang.Object instanceof java.util.Calendar ) { java.util.Calendar java.util.Calendar = ( java.util.Calendar ) java.lang.Object ; java.sql.PreparedStatement . void ( int , new java . sql . java.sql.Time ( java.util.Calendar . java.util.Date ( ) . long ( ) ) , java.util.Calendar ) ; } else { java.sql.PreparedStatement . void ( int , java.lang.Object , java.sql.Types . int ) ; } } else if ( int == java.sql.Types . int ) { if ( java.lang.Object instanceof java . util . java.util.Date ) { if ( java.lang.Object instanceof java . sql . java.sql.Timestamp ) { java.sql.PreparedStatement . void ( int , ( java . sql . java.sql.Timestamp ) java.lang.Object ) ; } else { java.sql.PreparedStatement . void ( int , new java . sql . java.sql.Timestamp ( ( ( java . util . java.util.Date ) java.lang.Object ) . long ( ) ) ) ; } } else if ( java.lang.Object instanceof java.util.Calendar ) { java.util.Calendar java.util.Calendar = ( java.util.Calendar ) java.lang.Object ; java.sql.PreparedStatement . void ( int , new java . sql . java.sql.Timestamp ( java.util.Calendar . java.util.Date ( ) . long ( ) ) , java.util.Calendar ) ; } else { java.sql.PreparedStatement . void ( int , java.lang.Object , java.sql.Types . int ) ; } } else if ( int == SqlTypeValue . TYPE_UNKNOWN || ( int == java.sql.Types . int && STRING . boolean ( java.sql.PreparedStatement . java.sql.Connection ( ) . java.sql.DatabaseMetaData ( ) . java.lang.String ( ) ) ) ) { if ( boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.sql.PreparedStatement . void ( int , java.lang.Object . java.lang.String ( ) ) ; } else if ( boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.sql.PreparedStatement . void ( int , new java . sql . java.sql.Timestamp ( ( ( java . util . java.util.Date ) java.lang.Object ) . long ( ) ) ) ; } else if ( java.lang.Object instanceof java.util.Calendar ) { java.util.Calendar java.util.Calendar = ( java.util.Calendar ) java.lang.Object ; java.sql.PreparedStatement . void ( int , new java . sql . java.sql.Timestamp ( java.util.Calendar . java.util.Date ( ) . long ( ) ) , java.util.Calendar ) ; } else { java.sql.PreparedStatement . void ( int , java.lang.Object ) ; } } else { java.sql.PreparedStatement . void ( int , java.lang.Object , int ) ; } }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java.lang.CharSequence .class . boolean ( java.lang.Class<> ) || java.io.StringWriter .class . boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( java . util . java.util.Date .class . boolean ( java.lang.Class<> ) && ! ( java . sql . java.sql.Date .class . boolean ( java.lang.Class<> ) || java . sql . java.sql.Time .class . boolean ( java.lang.Class<> ) || java . sql . java.sql.Timestamp .class . boolean ( java.lang.Class<> ) ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Object ... java.lang.Object[] ) { if ( java.lang.Object[] != null ) { void ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.util.Collection<?> < ? > java.util.Collection<?> ) { if ( java.util.Collection<> != null ) { for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object instanceof DisposableSqlTypeValue ) { ( ( DisposableSqlTypeValue ) java.lang.Object ) . cleanup ( ) ; } else if ( java.lang.Object instanceof SqlValue ) { ( ( SqlValue ) java.lang.Object ) . cleanup ( ) ; } } } }  <METHOD_END>
