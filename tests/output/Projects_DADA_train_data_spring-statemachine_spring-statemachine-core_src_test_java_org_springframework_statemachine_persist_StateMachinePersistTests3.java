<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.persist.AnnotationConfigApplicationContext org.springframework.statemachine.persist.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests3.Config1 .class ) ; context . refresh ( ) ; org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> = context . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , nullValue ( ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests3.Config1 .class ) ; context . refresh ( ) ; org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> = context . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; TestUtils . setField ( STRING , org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , nullValue ( ) ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.persist.StateMachinePersistTests3.Config2 .class ) ; context . refresh ( ) ; org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 = new org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 ( ) ; StateMachinePersister < java.lang.String , java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> = new DefaultStateMachinePersister <> ( org.springframework.statemachine.persist.StateMachinePersistTests3.InMemoryStateMachinePersist1 ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , nullValue ( ) ) ; TestUtils . setField ( STRING , org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . persist ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; TestUtils . setField ( STRING , org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.persist.StateMachinePersister<java.lang.String,java.lang.String,java.lang.String> . restore ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> , STRING ) ; assertThat ( org.springframework.statemachine.persist.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . autoStartup ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.persist.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineContext < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String> , java.lang.String java.lang.String ) throws java.lang.Exception { java.util.HashMap<java.lang.String,org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String>> . put ( java.lang.String , org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String> ( java.lang.String java.lang.String ) throws java.lang.Exception { return java.util.HashMap<java.lang.String,org.springframework.statemachine.persist.StateMachineContext<java.lang.String,java.lang.String>> . get ( java.lang.String ) ; }  <METHOD_END>
