<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { super. setSessionTransacted ( boolean ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( PlatformTransactionManager org.springframework.jms.listener.PlatformTransactionManager ) { this . org.springframework.jms.listener.PlatformTransactionManager = org.springframework.jms.listener.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.jms.listener.PlatformTransactionManager org.springframework.jms.listener.PlatformTransactionManager ( ) { return this . org.springframework.jms.listener.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.jms.listener.DefaultTransactionDefinition . setName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.jms.listener.DefaultTransactionDefinition . setTimeout ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> protected long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . boolean && this . org.springframework.jms.listener.PlatformTransactionManager instanceof ResourceTransactionManager && ! TransactionSynchronizationUtils . sameResourceFactory ( ( ResourceTransactionManager ) this . org.springframework.jms.listener.PlatformTransactionManager , getConnectionFactory ( ) ) ) { super. setSessionTransacted ( true ) ; } if ( this . org.springframework.jms.listener.DefaultTransactionDefinition . getName ( ) == null ) { this . org.springframework.jms.listener.DefaultTransactionDefinition . setName ( getBeanName ( ) ) ; } super. initialize ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.MessageConsumer org.springframework.jms.listener.MessageConsumer ( Session org.springframework.jms.listener.Session ) throws org.springframework.jms.listener.JMSException { Destination org.springframework.jms.listener.Destination = getDestination ( ) ; if ( org.springframework.jms.listener.Destination == null ) { org.springframework.jms.listener.Destination = resolveDestinationName ( org.springframework.jms.listener.Session , getDestinationName ( ) ) ; } return createConsumer ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Destination ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object , Session org.springframework.jms.listener.Session , MessageConsumer org.springframework.jms.listener.MessageConsumer )			throws org.springframework.jms.listener.JMSException { if ( this . org.springframework.jms.listener.PlatformTransactionManager != null ) { TransactionStatus org.springframework.jms.listener.TransactionStatus = this . org.springframework.jms.listener.PlatformTransactionManager . getTransaction ( this . org.springframework.jms.listener.DefaultTransactionDefinition ) ; boolean boolean ; try { boolean = boolean ( java.lang.Object , org.springframework.jms.listener.Session , org.springframework.jms.listener.MessageConsumer , org.springframework.jms.listener.TransactionStatus ) ; } catch ( JMSException org.springframework.jms.listener.JMSException ) { void ( org.springframework.jms.listener.TransactionStatus , org.springframework.jms.listener.JMSException ) ; throw org.springframework.jms.listener.JMSException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( org.springframework.jms.listener.TransactionStatus , java.lang.RuntimeException ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { void ( org.springframework.jms.listener.TransactionStatus , java.lang.Error ) ; throw java.lang.Error ; } this . org.springframework.jms.listener.PlatformTransactionManager . commit ( org.springframework.jms.listener.TransactionStatus ) ; return boolean ; } else { return boolean ( java.lang.Object , org.springframework.jms.listener.Session , org.springframework.jms.listener.MessageConsumer , null ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object , Session org.springframework.jms.listener.Session , MessageConsumer org.springframework.jms.listener.MessageConsumer , TransactionStatus org.springframework.jms.listener.TransactionStatus )			throws org.springframework.jms.listener.JMSException { Connection org.springframework.jms.listener.Connection = null ; Session org.springframework.jms.listener.Session = null ; MessageConsumer org.springframework.jms.listener.MessageConsumer = null ; try { Session org.springframework.jms.listener.Session = org.springframework.jms.listener.Session ; boolean boolean = false ; if ( org.springframework.jms.listener.Session == null ) { org.springframework.jms.listener.Session = ConnectionFactoryUtils . doGetTransactionalSession ( getConnectionFactory ( ) , this . org.springframework.jms.listener.AbstractPollingMessageListenerContainer.MessageListenerContainerResourceFactory , true ) ; boolean = ( org.springframework.jms.listener.Session != null ) ; } if ( org.springframework.jms.listener.Session == null ) { Connection org.springframework.jms.listener.Connection ; if ( sharedConnectionEnabled ( ) ) { org.springframework.jms.listener.Connection = getSharedConnection ( ) ; } else { org.springframework.jms.listener.Connection = createConnection ( ) ; org.springframework.jms.listener.Connection = org.springframework.jms.listener.Connection ; org.springframework.jms.listener.Connection . start ( ) ; } org.springframework.jms.listener.Session = createSession ( org.springframework.jms.listener.Connection ) ; org.springframework.jms.listener.Session = org.springframework.jms.listener.Session ; } MessageConsumer org.springframework.jms.listener.MessageConsumer = org.springframework.jms.listener.MessageConsumer ; if ( org.springframework.jms.listener.MessageConsumer == null ) { org.springframework.jms.listener.MessageConsumer = org.springframework.jms.listener.MessageConsumer ( org.springframework.jms.listener.Session ) ; org.springframework.jms.listener.MessageConsumer = org.springframework.jms.listener.MessageConsumer ; } Message org.springframework.jms.listener.Message = org.springframework.jms.listener.Message ( org.springframework.jms.listener.MessageConsumer ) ; if ( org.springframework.jms.listener.Message != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.jms.listener.Message . getClass ( ) + STRING + org.springframework.jms.listener.MessageConsumer + STRING + ( boolean ? STRING : STRING ) + STRING + org.springframework.jms.listener.Session + STRING ) ; } void ( java.lang.Object , org.springframework.jms.listener.Session ) ; boolean boolean = ( ! boolean && isExposeListenerSession ( ) && ! TransactionSynchronizationManager . hasResource ( getConnectionFactory ( ) ) ) ; if ( boolean ) { TransactionSynchronizationManager . bindResource ( getConnectionFactory ( ) , new LocallyExposedJmsResourceHolder ( org.springframework.jms.listener.Session ) ) ; } try { doExecuteListener ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Message ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.jms.listener.TransactionStatus != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Throwable ) ; } org.springframework.jms.listener.TransactionStatus . setRollbackOnly ( ) ; } handleListenerException ( java.lang.Throwable ) ; if ( java.lang.Throwable instanceof JMSException ) { throw ( JMSException ) java.lang.Throwable ; } } finally { if ( boolean ) { TransactionSynchronizationManager . unbindResource ( getConnectionFactory ( ) ) ; } } return true ; } else { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.jms.listener.MessageConsumer + STRING + ( boolean ? STRING : STRING ) + STRING + org.springframework.jms.listener.Session + STRING ) ; } void ( java.lang.Object , org.springframework.jms.listener.Session ) ; if ( boolean ( org.springframework.jms.listener.Session ) ) { commitIfNecessary ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Message ) ; } return false ; } } finally { JmsUtils . closeMessageConsumer ( org.springframework.jms.listener.MessageConsumer ) ; JmsUtils . closeSession ( org.springframework.jms.listener.Session ) ; ConnectionFactoryUtils . releaseConnection ( org.springframework.jms.listener.Connection , getConnectionFactory ( ) , true ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Session org.springframework.jms.listener.Session ) { if ( ! super. isSessionLocallyTransacted ( org.springframework.jms.listener.Session ) ) { return false ; } JmsResourceHolder org.springframework.jms.listener.JmsResourceHolder = ( JmsResourceHolder ) TransactionSynchronizationManager . getResource ( getConnectionFactory ( ) ) ; return ( org.springframework.jms.listener.JmsResourceHolder == null || org.springframework.jms.listener.JmsResourceHolder instanceof LocallyExposedJmsResourceHolder || ! org.springframework.jms.listener.JmsResourceHolder . containsSession ( org.springframework.jms.listener.Session ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Session org.springframework.jms.listener.Session ) { return true ; }  <METHOD_END>
<METHOD_START> private void void ( TransactionStatus org.springframework.jms.listener.TransactionStatus , java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING , java.lang.Throwable ) ; try { this . org.springframework.jms.listener.PlatformTransactionManager . rollback ( org.springframework.jms.listener.TransactionStatus ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { logger . error ( STRING , java.lang.Throwable ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { logger . error ( STRING , java.lang.Throwable ) ; throw java.lang.Error ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.Message org.springframework.jms.listener.Message ( MessageConsumer org.springframework.jms.listener.MessageConsumer ) throws org.springframework.jms.listener.JMSException { return receiveFromConsumer ( org.springframework.jms.listener.MessageConsumer , long ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , Session org.springframework.jms.listener.Session ) {	}  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , Session org.springframework.jms.listener.Session ) {	}  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.Connection org.springframework.jms.listener.Connection ( JmsResourceHolder org.springframework.jms.listener.JmsResourceHolder ) { return org.springframework.jms.listener.JmsResourceHolder . getConnection ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.Session org.springframework.jms.listener.Session ( JmsResourceHolder org.springframework.jms.listener.JmsResourceHolder ) { return org.springframework.jms.listener.JmsResourceHolder . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.Connection org.springframework.jms.listener.Connection ( JmsResourceHolder org.springframework.jms.listener.JmsResourceHolder ) { return org.springframework.jms.listener.AbstractPollingMessageListenerContainer .this . org.springframework.jms.listener.Connection ( org.springframework.jms.listener.JmsResourceHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.Session org.springframework.jms.listener.Session ( JmsResourceHolder org.springframework.jms.listener.JmsResourceHolder ) { return org.springframework.jms.listener.AbstractPollingMessageListenerContainer .this . org.springframework.jms.listener.Session ( org.springframework.jms.listener.JmsResourceHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.Connection org.springframework.jms.listener.Connection ( ) org.springframework.jms.listener.JMSException { if ( org.springframework.jms.listener.AbstractPollingMessageListenerContainer .this . sharedConnectionEnabled ( ) ) { Connection org.springframework.jms.listener.Connection = org.springframework.jms.listener.AbstractPollingMessageListenerContainer .this . getSharedConnection ( ) ; return new SingleConnectionFactory ( org.springframework.jms.listener.Connection ) . createConnection ( ) ; } else { return org.springframework.jms.listener.AbstractPollingMessageListenerContainer .this . createConnection ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.Session org.springframework.jms.listener.Session ( Connection org.springframework.jms.listener.Connection ) throws org.springframework.jms.listener.JMSException { return org.springframework.jms.listener.AbstractPollingMessageListenerContainer .this . createSession ( org.springframework.jms.listener.Connection ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.jms.listener.AbstractPollingMessageListenerContainer .this . isSessionTransacted ( ) ; }  <METHOD_END>
