<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) { if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.web.reactive.accept.MediaType> < java.lang.String , MediaType > java.util.Map.Entry<java.lang.String,org.springframework.web.reactive.accept.MediaType> : java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.web.reactive.accept.MediaType> . getKey ( ) . toLowerCase ( java.util.Locale . java.util.Locale ) ; this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . put ( java.lang.String , java.util.Map.Entry<java.lang.String,org.springframework.web.reactive.accept.MediaType> . getValue ( ) ) ; } } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( java.lang.String java.lang.String , MediaType org.springframework.web.reactive.accept.MediaType ) { this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> . put ( java.lang.String , org.springframework.web.reactive.accept.MediaType ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( MediaType org.springframework.web.reactive.accept.MediaType ) { this . org.springframework.web.reactive.accept.RequestedContentTypeResolver = new FixedContentTypeResolver ( org.springframework.web.reactive.accept.MediaType ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder ( RequestedContentTypeResolver org.springframework.web.reactive.accept.RequestedContentTypeResolver ) { this . org.springframework.web.reactive.accept.RequestedContentTypeResolver = org.springframework.web.reactive.accept.RequestedContentTypeResolver ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.accept.CompositeContentTypeResolver org.springframework.web.reactive.accept.CompositeContentTypeResolver ( ) { java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> < RequestedContentTypeResolver > java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> = new java.util.ArrayList<org.springframework.web.reactive.accept.RequestedContentTypeResolver> <> ( ) ; if ( this . boolean ) { PathExtensionContentTypeResolver org.springframework.web.reactive.accept.PathExtensionContentTypeResolver = new PathExtensionContentTypeResolver ( this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ; org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . setIgnoreUnknownExtensions ( this . boolean ) ; if ( this . java.lang.Boolean != null ) { org.springframework.web.reactive.accept.PathExtensionContentTypeResolver . setUseRegisteredExtensionsOnly ( this . java.lang.Boolean ) ; } java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> . add ( org.springframework.web.reactive.accept.PathExtensionContentTypeResolver ) ; } if ( this . boolean ) { ParameterContentTypeResolver org.springframework.web.reactive.accept.ParameterContentTypeResolver = new ParameterContentTypeResolver ( this . java.util.Map<java.lang.String,org.springframework.web.reactive.accept.MediaType> ) ; org.springframework.web.reactive.accept.ParameterContentTypeResolver . setParameterName ( this . java.lang.String ) ; java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> . add ( org.springframework.web.reactive.accept.ParameterContentTypeResolver ) ; } if ( ! this . boolean ) { java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> . add ( new HeaderContentTypeResolver ( ) ) ; } if ( this . org.springframework.web.reactive.accept.RequestedContentTypeResolver != null ) { java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> . add ( this . org.springframework.web.reactive.accept.RequestedContentTypeResolver ) ; } return new CompositeContentTypeResolver ( java.util.List<org.springframework.web.reactive.accept.RequestedContentTypeResolver> ) ; }  <METHOD_END>
