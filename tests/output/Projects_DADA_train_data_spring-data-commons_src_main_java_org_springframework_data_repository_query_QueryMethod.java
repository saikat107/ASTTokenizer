<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.repository.query.RepositoryMetadata , ProjectionFactory org.springframework.data.repository.query.ProjectionFactory ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notNull ( org.springframework.data.repository.query.RepositoryMetadata , STRING ) ; Assert . notNull ( org.springframework.data.repository.query.ProjectionFactory , STRING ) ; Parameters . TYPES . stream ( ) . filter ( type -> getNumberOfOccurences ( method , type ) > NUMBER ) . findFirst ( ) . ifPresent ( type -> { throw new IllegalStateException ( String . format ( STRING , type . getSimpleName ( ) , method . toString ( ) ) ) ; } ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . java.lang.Class<?> = java.lang.Class<? extends java.lang.Object> ( java.lang.reflect.Method ) ; this . org.springframework.data.repository.query.Parameters<?,?> = org.springframework.data.repository.query.Parameters<?,?> ( java.lang.reflect.Method ) ; this . org.springframework.data.repository.query.RepositoryMetadata = org.springframework.data.repository.query.RepositoryMetadata ; if ( hasParameterOfType ( java.lang.reflect.Method , Pageable .class ) ) { if ( ! boolean ( ) ) { void ( java.lang.reflect.Method , QueryExecutionConverters . getAllowedPageableTypes ( ) ) ; } if ( hasParameterOfType ( java.lang.reflect.Method , Sort .class ) ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.reflect.Method . java.lang.String ( ) ) ) ; } } Assert . notNull ( this . org.springframework.data.repository.query.Parameters<,> , ( ) String . format ( STRING , method . getName ( ) ) ) ; if ( boolean ( ) ) { Assert . isTrue ( this . org.springframework.data.repository.query.Parameters<,> . hasPageableParameter ( ) , java.lang.String . java.lang.String ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ) ; } this . org.springframework.data.repository.query.Lazy<java.lang.Class<?>> = Lazy . of ( ( ) { Class < ? > repositoryDomainClass = metadata . getDomainType ( ) ; Class < ? > methodDomainClass = metadata . getReturnedDomainClass ( method ) ; return repositoryDomainClass == null || repositoryDomainClass . isAssignableFrom ( methodDomainClass ) ? methodDomainClass : repositoryDomainClass ; } ) ; this . org.springframework.data.repository.query.ResultProcessor = new ResultProcessor ( this , org.springframework.data.repository.query.ProjectionFactory ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.repository.query.Parameters<?,?> < ? , ? > org.springframework.data.repository.query.Parameters<?,?> ( java.lang.reflect.Method java.lang.reflect.Method ) { return new DefaultParameters ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.reflect.Method . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public org.springframework.data.repository.query.EntityMetadata<?> < ? > org.springframework.data.repository.query.EntityMetadata<?> ( ) { return ( ) ( Class ) getDomainClass ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.Class<?> ( ) . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.repository.query.Lazy<java.lang.Class<?>> . get ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.repository.query.RepositoryMetadata . getReturnedDomainClass ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { if ( boolean ( ) || boolean ( ) ) { return false ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; if ( QueryExecutionConverters . supports ( java.lang.Class<> ) && ! QueryExecutionConverters . isSingleValue ( java.lang.Class<> ) ) { return true ; } if ( QueryExecutionConverters . supports ( java.lang.Class<> ) && QueryExecutionConverters . isSingleValue ( java.lang.Class<> ) ) { return false ; } return org . springframework . util . ClassUtils . isAssignable ( java.lang.Iterable .class , java.lang.Class<> ) || java.lang.Class<> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! boolean ( ) && org . springframework . util . ClassUtils . isAssignable ( Slice .class , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return org . springframework . util . ClassUtils . isAssignable ( Page .class , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Class<?> ( ) . boolean ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.stream.Stream .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.Parameters<?,?> < ? , ? > org.springframework.data.repository.query.Parameters<?,?> ( ) { return org.springframework.data.repository.query.Parameters<,> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.ResultProcessor org.springframework.data.repository.query.ResultProcessor ( ) { return org.springframework.data.repository.query.ResultProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.reflect.Method . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> ( java.lang.reflect.Method java.lang.reflect.Method ) { if ( QueryExecutionConverters . supports ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { return ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) . getComponentType ( ) . map ( TypeInformation :: getType ) . orElseThrow ( ( ) new IllegalStateException ( String . format ( STRING , method ) ) ) ; } return java.lang.reflect.Method . java.lang.Class<?> ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.reflect.Method java.lang.reflect.Method , java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notEmpty ( java.util.Set<java.lang.Class<?>> , STRING ) ; TypeInformation < ? > org.springframework.data.repository.query.TypeInformation<?> = ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) ; org.springframework.data.repository.query.TypeInformation<?> = QueryExecutionConverters . isSingleValue ( org.springframework.data.repository.query.TypeInformation<> . getType ( ) ) ? org.springframework.data.repository.query.TypeInformation<> . getRequiredComponentType ( ) : org.springframework.data.repository.query.TypeInformation<> ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { if ( java.lang.Class<> . boolean ( org.springframework.data.repository.query.TypeInformation<> . getType ( ) ) ) { return; } } throw new java.lang.IllegalStateException ( STRING + java.util.Set<java.lang.Class<?>> . java.lang.String ( ) ) ; }  <METHOD_END>
