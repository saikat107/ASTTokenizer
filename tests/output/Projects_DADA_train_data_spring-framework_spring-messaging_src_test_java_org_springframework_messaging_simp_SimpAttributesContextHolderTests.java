<METHOD_START> @ Before public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object> <> ( ) ; this . org.springframework.messaging.simp.SimpAttributes = new SimpAttributes ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { SimpAttributesContextHolder . resetAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpAttributesContextHolder . setAttributes ( this . org.springframework.messaging.simp.SimpAttributes ) ; assertThat ( SimpAttributesContextHolder . getAttributes ( ) , sameInstance ( this . org.springframework.messaging.simp.SimpAttributes ) ) ; SimpAttributesContextHolder . resetAttributes ( ) ; assertThat ( SimpAttributesContextHolder . getAttributes ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( SimpAttributesContextHolder . getAttributes ( ) , nullValue ( ) ) ; SimpAttributesContextHolder . setAttributes ( this . org.springframework.messaging.simp.SimpAttributes ) ; assertThat ( SimpAttributesContextHolder . getAttributes ( ) , sameInstance ( this . org.springframework.messaging.simp.SimpAttributes ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpAttributesContextHolder . setAttributes ( this . org.springframework.messaging.simp.SimpAttributes ) ; assertThat ( SimpAttributesContextHolder . getAttributes ( ) , sameInstance ( this . org.springframework.messaging.simp.SimpAttributes ) ) ; SimpAttributesContextHolder . setAttributes ( null ) ; assertThat ( SimpAttributesContextHolder . getAttributes ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object> <> ( ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSessionId ( java.lang.String ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSessionAttributes ( java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object> ) ; Message < ? > org.springframework.messaging.simp.Message<?> = MessageBuilder . createMessage ( STRING , org.springframework.messaging.simp.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; SimpAttributesContextHolder . setAttributesFromMessage ( org.springframework.messaging.simp.Message<> ) ; SimpAttributes org.springframework.messaging.simp.SimpAttributes = SimpAttributesContextHolder . getAttributes ( ) ; assertThat ( org.springframework.messaging.simp.SimpAttributes , notNullValue ( ) ) ; assertThat ( org.springframework.messaging.simp.SimpAttributes . getSessionId ( ) , is ( java.lang.String ) ) ; org.springframework.messaging.simp.SimpAttributes . setAttribute ( STRING , STRING ) ; assertThat ( java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.messaging.simp.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; SimpAttributesContextHolder . setAttributesFromMessage ( new GenericMessage < java.lang.Object > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.messaging.simp.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSessionId ( STRING ) ; Message < ? > org.springframework.messaging.simp.Message<?> = MessageBuilder . createMessage ( STRING , org.springframework.messaging.simp.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; SimpAttributesContextHolder . setAttributesFromMessage ( org.springframework.messaging.simp.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpAttributesContextHolder . setAttributes ( this . org.springframework.messaging.simp.SimpAttributes ) ; assertThat ( SimpAttributesContextHolder . currentAttributes ( ) , sameInstance ( this . org.springframework.messaging.simp.SimpAttributes ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.messaging.simp.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; SimpAttributesContextHolder . currentAttributes ( ) ; }  <METHOD_END>
