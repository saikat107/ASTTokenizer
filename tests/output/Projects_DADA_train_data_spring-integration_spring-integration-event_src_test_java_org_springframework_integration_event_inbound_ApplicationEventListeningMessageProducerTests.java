<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.event.inbound.QueueChannel = new QueueChannel ( ) ; ApplicationEventListeningMessageProducer org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.inbound.QueueChannel ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . start ( ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.event.inbound.Message<> ) ; assertTrue ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 .class ) ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 ( ) ) ; assertTrue ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 .class ) ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 ( ) ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , ( ( ApplicationEvent ) org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) . getSource ( ) ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , ( ( ApplicationEvent ) org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) . getSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.event.inbound.QueueChannel = new QueueChannel ( ) ; ApplicationEventListeningMessageProducer org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.inbound.QueueChannel ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setEventTypes ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 .class ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . start ( ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.event.inbound.Message<> ) ; assertTrue ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 .class ) ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 ( ) ) ; assertFalse ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 .class ) ) ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , ( ( ApplicationEvent ) org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) . getSource ( ) ) ; assertNull ( org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setEventTypes ( ( java.lang.Class<? extends org.springframework.integration.event.inbound.ApplicationEvent> < ? extends ApplicationEvent > ) null ) ; assertTrue ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 .class ) ) ) ; assertTrue ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 .class ) ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setEventTypes ( null , org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 .class , null ) ; assertFalse ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 .class ) ) ) ; assertTrue ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 .class ) ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setEventTypes ( null , null ) ; assertTrue ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 .class ) ) ) ; assertTrue ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . supportsEventType ( ResolvableType . forClass ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.event.inbound.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests> ( ) ) ; PollableChannel org.springframework.integration.event.inbound.PollableChannel = ( PollableChannel ) org.springframework.integration.event.inbound.ClassPathXmlApplicationContext . getBean ( STRING ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( ContextRefreshedEvent .class , org.springframework.integration.event.inbound.Message<> . getPayload ( ) . getClass ( ) ) ; org.springframework.integration.event.inbound.ClassPathXmlApplicationContext . start ( ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( ContextStartedEvent .class , org.springframework.integration.event.inbound.Message<> . getPayload ( ) . getClass ( ) ) ; org.springframework.integration.event.inbound.ClassPathXmlApplicationContext . stop ( ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( ContextStoppedEvent .class , org.springframework.integration.event.inbound.Message<> . getPayload ( ) . getClass ( ) ) ; org.springframework.integration.event.inbound.ClassPathXmlApplicationContext . close ( ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( ContextClosedEvent .class , org.springframework.integration.event.inbound.Message<> . getPayload ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.event.inbound.QueueChannel = new QueueChannel ( ) ; ApplicationEventListeningMessageProducer org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setPayloadExpression ( org.springframework.integration.event.inbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.inbound.QueueChannel ) ; GenericApplicationContext org.springframework.integration.event.inbound.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; ConfigurableListableBeanFactory org.springframework.integration.event.inbound.ConfigurableListableBeanFactory = org.springframework.integration.event.inbound.GenericApplicationContext . getBeanFactory ( ) ; org.springframework.integration.event.inbound.ConfigurableListableBeanFactory . registerSingleton ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME , new SimpleApplicationEventMulticaster ( org.springframework.integration.event.inbound.ConfigurableListableBeanFactory ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setBeanFactory ( org.springframework.integration.event.inbound.ConfigurableListableBeanFactory ) ; org.springframework.integration.event.inbound.ConfigurableListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.event.inbound.GenericApplicationContext . refresh ( ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertTrue ( org.springframework.integration.event.inbound.Message<> . getPayload ( ) . toString ( ) . contains ( STRING ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 ( ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 ( ) ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.event.inbound.QueueChannel = new QueueChannel ( ) ; ApplicationEventListeningMessageProducer org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.inbound.QueueChannel ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . start ( ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.event.inbound.Message<> ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new MessagingEvent ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.event.inbound.QueueChannel = new QueueChannel ( ) ; ApplicationEventListeningMessageProducer org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.inbound.QueueChannel ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . start ( ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.event.inbound.Message<> ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestMessagingEvent ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) { DirectChannel org.springframework.integration.event.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.event.inbound.DirectChannel . subscribe ( new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.event.inbound.Message<?> ) { throw new java.lang.RuntimeException ( STRING ) ; } } ) ; ApplicationEventListeningMessageProducer org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.inbound.DirectChannel ) ; QueueChannel org.springframework.integration.event.inbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setErrorChannel ( org.springframework.integration.event.inbound.QueueChannel ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . start ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 ( ) ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , ( ( java.lang.Exception ) org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) . java.lang.Throwable ( ) . java.lang.String ( ) ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setErrorChannel ( null ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . onApplicationEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.event.inbound.Message<?> ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { GenericApplicationContext org.springframework.integration.event.inbound.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; ConfigurableListableBeanFactory org.springframework.integration.event.inbound.ConfigurableListableBeanFactory = org.springframework.integration.event.inbound.GenericApplicationContext . getBeanFactory ( ) ; QueueChannel org.springframework.integration.event.inbound.QueueChannel = new QueueChannel ( ) ; ApplicationEventListeningMessageProducer org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.inbound.QueueChannel ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setEventTypes ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 .class ) ; org.springframework.integration.event.inbound.ConfigurableListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer ) ; java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; org.springframework.integration.event.inbound.ConfigurableListableBeanFactory . registerSingleton ( STRING , new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationListener ( java.util.concurrent.atomic.AtomicInteger ) ) ; org.springframework.integration.event.inbound.GenericApplicationContext . refresh ( ) ; ApplicationEventMulticaster org.springframework.integration.event.inbound.ApplicationEventMulticaster = org.springframework.integration.event.inbound.GenericApplicationContext . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME , ApplicationEventMulticaster .class ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.event.inbound.ApplicationEventMulticaster , STRING , java.util.Map .class ) ; org.springframework.integration.event.inbound.GenericApplicationContext . publishEvent ( new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 ( ) ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.Class<? extends org.springframework.integration.event.inbound.ApplicationEvent> < ? extends ApplicationEvent > java.lang.Class<? extends org.springframework.integration.event.inbound.ApplicationEvent> = TestUtils . getPropertyValue ( java.util.Map.Entry<,> . getKey ( ) , STRING , java.lang.Class .class ) ; assertThat ( java.lang.Class<> , Matchers . is ( Matchers . isOneOf ( ContextRefreshedEvent .class , org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent1 .class ) ) ) ; java.util.Set<?> < ? > java.util.Set<?> = TestUtils . getPropertyValue ( java.util.Map.Entry<,> . getValue ( ) , STRING , java.util.Set .class ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertEquals ( STRING , java.util.Set<> . java.util.Iterator<> ( ) . next ( ) ) ; } org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 = new org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 ( ) ; org.springframework.integration.event.inbound.GenericApplicationContext . publishEvent ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = TestUtils . getPropertyValue ( java.util.Map.Entry<,> . getKey ( ) , STRING , java.lang.Class .class ) ; if ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 .class . boolean ( java.lang.Class<> ) ) { java.util.Set<?> < ? > java.util.Set<?> = TestUtils . getPropertyValue ( java.util.Map.Entry<,> . getValue ( ) , STRING , java.util.Set .class ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.Set<> ) { assertThat ( ( java.lang.String ) java.lang.Object , Matchers . is ( Matchers . isOneOf ( STRING , STRING ) ) ) ; } break; } } org.springframework.integration.event.inbound.GenericApplicationContext . publishEvent ( new ApplicationEvent ( STRING ) {		} ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; final Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertSame ( org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducerTests.TestApplicationEvent2 , org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.event.inbound.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.event.inbound.GenericApplicationContext = TestUtils . createTestApplicationContext ( ) ; ConfigurableListableBeanFactory org.springframework.integration.event.inbound.ConfigurableListableBeanFactory = org.springframework.integration.event.inbound.GenericApplicationContext . getBeanFactory ( ) ; QueueChannel org.springframework.integration.event.inbound.QueueChannel = new QueueChannel ( ) ; ApplicationEventListeningMessageProducer org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer = new ApplicationEventListeningMessageProducer ( ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setOutputChannel ( org.springframework.integration.event.inbound.QueueChannel ) ; org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer . setEventTypes ( java.lang.String .class ) ; org.springframework.integration.event.inbound.ConfigurableListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.event.inbound.ApplicationEventListeningMessageProducer ) ; org.springframework.integration.event.inbound.GenericApplicationContext . refresh ( ) ; org.springframework.integration.event.inbound.GenericApplicationContext . publishEvent ( STRING ) ; Message < ? > org.springframework.integration.event.inbound.Message<?> = org.springframework.integration.event.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.event.inbound.Message<> ) ; assertEquals ( STRING , org.springframework.integration.event.inbound.Message<> . getPayload ( ) ) ; org.springframework.integration.event.inbound.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> void ( Message < ? > org.springframework.integration.event.inbound.Message<?> ) { super( org.springframework.integration.event.inbound.Message<> ); }  <METHOD_END>
<METHOD_START> private void ( java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ) { this . java.util.concurrent.atomic.AtomicInteger = java.util.concurrent.atomic.AtomicInteger ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.event.inbound.ApplicationEvent ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
