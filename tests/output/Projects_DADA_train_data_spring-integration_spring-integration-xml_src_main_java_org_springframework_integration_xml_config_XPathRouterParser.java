<METHOD_START> @ java.lang.Override protected org.springframework.integration.xml.config.BeanDefinition org.springframework.integration.xml.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.xml.config.ParserContext ) { BeanDefinitionBuilder org.springframework.integration.xml.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( XPathRouter .class ) ; org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( org.w3c.dom.Element . java.lang.String ( ) , STRING ) ; Assert . isTrue ( org.w3c.dom.NodeList . int ( ) <= NUMBER , STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.xml.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; boolean boolean = ( org.w3c.dom.NodeList . int ( ) == NUMBER ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; Assert . isTrue ( boolean ^ boolean , STRING ) ; if ( boolean ) { BeanDefinition org.springframework.integration.xml.config.BeanDefinition = this . org.springframework.integration.xml.config.XPathExpressionParser . parse ( ( org.w3c.dom.Element ) org.w3c.dom.NodeList . org.w3c.dom.Node ( NUMBER ) , org.springframework.integration.xml.config.ParserContext ) ; org.springframework.integration.xml.config.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.xml.config.BeanDefinition ) ; } else { org.springframework.integration.xml.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.xml.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; return org.springframework.integration.xml.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
