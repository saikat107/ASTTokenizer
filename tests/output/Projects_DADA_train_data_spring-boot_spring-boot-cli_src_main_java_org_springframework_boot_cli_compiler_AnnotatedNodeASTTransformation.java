<METHOD_START> protected void ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , boolean boolean ) { this . java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ASTNode [] org.springframework.boot.cli.compiler.ASTNode[] , SourceUnit org.springframework.boot.cli.compiler.SourceUnit ) { this . org.springframework.boot.cli.compiler.SourceUnit = org.springframework.boot.cli.compiler.SourceUnit ; java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> = new java.util.ArrayList<org.springframework.boot.cli.compiler.AnnotationNode> <> ( ) ; org.springframework.boot.cli.compiler.AnnotatedNodeASTTransformation.ClassVisitor org.springframework.boot.cli.compiler.AnnotatedNodeASTTransformation.ClassVisitor = new org.springframework.boot.cli.compiler.AnnotatedNodeASTTransformation.ClassVisitor ( org.springframework.boot.cli.compiler.SourceUnit , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; for ( ASTNode org.springframework.boot.cli.compiler.ASTNode : org.springframework.boot.cli.compiler.ASTNode[] ) { if ( org.springframework.boot.cli.compiler.ASTNode instanceof ModuleNode ) { ModuleNode org.springframework.boot.cli.compiler.ModuleNode = ( ModuleNode ) org.springframework.boot.cli.compiler.ASTNode ; void ( org.springframework.boot.cli.compiler.ModuleNode . getPackage ( ) , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; for ( ImportNode org.springframework.boot.cli.compiler.ImportNode : org.springframework.boot.cli.compiler.ModuleNode . getImports ( ) ) { void ( org.springframework.boot.cli.compiler.ImportNode , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; } for ( ImportNode org.springframework.boot.cli.compiler.ImportNode : org.springframework.boot.cli.compiler.ModuleNode . getStarImports ( ) ) { void ( org.springframework.boot.cli.compiler.ImportNode , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.boot.cli.compiler.ImportNode> < java.lang.String , ImportNode > java.util.Map.Entry<java.lang.String,org.springframework.boot.cli.compiler.ImportNode> : org.springframework.boot.cli.compiler.ModuleNode . getStaticImports ( ) . entrySet ( ) ) { void ( java.util.Map.Entry<java.lang.String,org.springframework.boot.cli.compiler.ImportNode> . getValue ( ) , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.boot.cli.compiler.ImportNode> < java.lang.String , ImportNode > java.util.Map.Entry<java.lang.String,org.springframework.boot.cli.compiler.ImportNode> : org.springframework.boot.cli.compiler.ModuleNode . getStaticStarImports ( ) . entrySet ( ) ) { void ( java.util.Map.Entry<java.lang.String,org.springframework.boot.cli.compiler.ImportNode> . getValue ( ) , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; } for ( ClassNode org.springframework.boot.cli.compiler.ClassNode : org.springframework.boot.cli.compiler.ModuleNode . getClasses ( ) ) { void ( org.springframework.boot.cli.compiler.ClassNode , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; org.springframework.boot.cli.compiler.ClassNode . visitContents ( org.springframework.boot.cli.compiler.AnnotatedNodeASTTransformation.ClassVisitor ) ; } } } void ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.cli.compiler.SourceUnit org.springframework.boot.cli.compiler.SourceUnit ( ) { return this . org.springframework.boot.cli.compiler.SourceUnit ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> );  <METHOD_END>
<METHOD_START> private void void ( AnnotatedNode org.springframework.boot.cli.compiler.AnnotatedNode , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) { if ( org.springframework.boot.cli.compiler.AnnotatedNode != null ) { java.util.Iterator<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.Iterator<org.springframework.boot.cli.compiler.AnnotationNode> = org.springframework.boot.cli.compiler.AnnotatedNode . getAnnotations ( ) . iterator ( ) ; while ( java.util.Iterator<org.springframework.boot.cli.compiler.AnnotationNode> . hasNext ( ) ) { AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode = java.util.Iterator<org.springframework.boot.cli.compiler.AnnotationNode> . next ( ) ; if ( this . java.util.Set<java.lang.String> . boolean ( org.springframework.boot.cli.compiler.AnnotationNode . getClassNode ( ) . getName ( ) ) ) { java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> . add ( org.springframework.boot.cli.compiler.AnnotationNode ) ; if ( this . boolean ) { java.util.Iterator<org.springframework.boot.cli.compiler.AnnotationNode> . remove ( ) ; } } } } }  <METHOD_END>
<METHOD_START> void ( SourceUnit org.springframework.boot.cli.compiler.SourceUnit , java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> < AnnotationNode > java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) { this . org.springframework.boot.cli.compiler.SourceUnit = org.springframework.boot.cli.compiler.SourceUnit ; this . java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> = java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.cli.compiler.SourceUnit org.springframework.boot.cli.compiler.SourceUnit ( ) { return this . org.springframework.boot.cli.compiler.SourceUnit ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotatedNode org.springframework.boot.cli.compiler.AnnotatedNode ) { void ( org.springframework.boot.cli.compiler.AnnotatedNode , this . java.util.List<org.springframework.boot.cli.compiler.AnnotationNode> ) ; }  <METHOD_END>
