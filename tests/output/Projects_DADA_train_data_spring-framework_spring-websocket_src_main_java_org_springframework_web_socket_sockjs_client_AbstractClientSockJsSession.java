<METHOD_START> protected void ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) { Assert . notNull ( org.springframework.web.socket.sockjs.client.TransportRequest , STRING ) ; Assert . notNull ( org.springframework.web.socket.sockjs.client.WebSocketHandler , STRING ) ; Assert . notNull ( org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> , STRING ) ; this . org.springframework.web.socket.sockjs.client.TransportRequest = org.springframework.web.socket.sockjs.client.TransportRequest ; this . org.springframework.web.socket.sockjs.client.WebSocketHandler = org.springframework.web.socket.sockjs.client.WebSocketHandler ; this . org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> = org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.socket.sockjs.client.TransportRequest . getSockJsUrlInfo ( ) . getSessionId ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . org.springframework.web.socket.sockjs.client.TransportRequest . getSockJsUrlInfo ( ) . getSockJsUrl ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.client.HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ( ) { return this . org.springframework.web.socket.sockjs.client.TransportRequest . getHandshakeHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.Principal java.security.Principal ( ) { return this . org.springframework.web.socket.sockjs.client.TransportRequest . getUser ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.SockJsMessageCodec org.springframework.web.socket.sockjs.client.SockJsMessageCodec ( ) { return this . org.springframework.web.socket.sockjs.client.TransportRequest . getMessageCodec ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler ( ) { return this . org.springframework.web.socket.sockjs.client.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> java.lang.Runnable java.lang.Runnable ( ) { return new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { void ( new CloseStatus ( NUMBER , STRING ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( new CloseStatus ( NUMBER , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State == org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State == org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State || this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State == org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( WebSocketMessage < ? > org.springframework.web.socket.sockjs.client.WebSocketMessage<?> ) throws java.io.IOException { if ( ! ( org.springframework.web.socket.sockjs.client.WebSocketMessage<> instanceof TextMessage ) ) { throw new java.lang.IllegalArgumentException ( this + STRING ) ; } if ( this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State != org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ) { throw new java.lang.IllegalStateException ( this + STRING + this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ) ; } java.lang.String java.lang.String = ( ( TextMessage ) org.springframework.web.socket.sockjs.client.WebSocketMessage<> ) . getPayload ( ) ; java.lang.String = org.springframework.web.socket.sockjs.client.SockJsMessageCodec ( ) . encode ( java.lang.String ) ; java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; TextMessage org.springframework.web.socket.sockjs.client.TextMessage = new TextMessage ( java.lang.String ) ; if ( org.springframework.web.socket.sockjs.client.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . trace ( STRING + org.springframework.web.socket.sockjs.client.TextMessage + STRING + this ) ; } void ( org.springframework.web.socket.sockjs.client.TextMessage ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) java.io.IOException { void ( CloseStatus . NORMAL ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus ) { Assert . isTrue ( org.springframework.web.socket.sockjs.client.CloseStatus != null && boolean ( org.springframework.web.socket.sockjs.client.CloseStatus ) , STRING + org.springframework.web.socket.sockjs.client.CloseStatus ) ; if ( org.springframework.web.socket.sockjs.client.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + org.springframework.web.socket.sockjs.client.CloseStatus + STRING + this ) ; } void ( org.springframework.web.socket.sockjs.client.CloseStatus ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus ) { return ( org.springframework.web.socket.sockjs.client.CloseStatus . getCode ( ) == NUMBER || ( org.springframework.web.socket.sockjs.client.CloseStatus . getCode ( ) >= NUMBER && org.springframework.web.socket.sockjs.client.CloseStatus . getCode ( ) <= NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus ) { if ( this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State == null ) { org.springframework.web.socket.sockjs.client.Log . warn ( STRING ) ; return; } if ( boolean ( ) ) { if ( org.springframework.web.socket.sockjs.client.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ) ; } return; } this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State = org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ; this . org.springframework.web.socket.sockjs.client.CloseStatus = org.springframework.web.socket.sockjs.client.CloseStatus ; try { void ( org.springframework.web.socket.sockjs.client.CloseStatus ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + this , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract void void ( CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { SockJsFrame org.springframework.web.socket.sockjs.client.SockJsFrame = new SockJsFrame ( java.lang.String ) ; switch ( org.springframework.web.socket.sockjs.client.SockJsFrame . getType ( ) ) { case OPEN : void ( ) ; break; case HEARTBEAT : if ( org.springframework.web.socket.sockjs.client.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . trace ( STRING + this ) ; } break; case MESSAGE : void ( org.springframework.web.socket.sockjs.client.SockJsFrame ) ; break; case CLOSE : void ( org.springframework.web.socket.sockjs.client.SockJsFrame ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( org.springframework.web.socket.sockjs.client.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + this ) ; } if ( this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State == org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ) { this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State = org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ; try { this . org.springframework.web.socket.sockjs.client.WebSocketHandler . afterConnectionEstablished ( this ) ; this . org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . set ( this ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + this , java.lang.Throwable ) ; } } } else { if ( org.springframework.web.socket.sockjs.client.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + java.lang.String ( ) + STRING + this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State + STRING ) ; } void ( new CloseStatus ( NUMBER , STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( SockJsFrame org.springframework.web.socket.sockjs.client.SockJsFrame ) { if ( ! boolean ( ) ) { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State + STRING + this ) ; } return; } java.lang.String [] java.lang.String[] ; try { java.lang.String[] = org.springframework.web.socket.sockjs.client.SockJsMessageCodec ( ) . decode ( org.springframework.web.socket.sockjs.client.SockJsFrame . getFrameData ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + org.springframework.web.socket.sockjs.client.SockJsFrame + STRING + this , java.io.IOException ) ; } void ( CloseStatus . BAD_DATA ) ; return; } if ( org.springframework.web.socket.sockjs.client.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . trace ( STRING + org.springframework.web.socket.sockjs.client.SockJsFrame . getContent ( ) + STRING + this ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( boolean ( ) ) { try { this . org.springframework.web.socket.sockjs.client.WebSocketHandler . handleMessage ( this , new TextMessage ( java.lang.String ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + org.springframework.web.socket.sockjs.client.SockJsFrame + STRING + this , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( SockJsFrame org.springframework.web.socket.sockjs.client.SockJsFrame ) { CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus = CloseStatus . NO_STATUS_CODE ; try { java.lang.String [] java.lang.String[] = org.springframework.web.socket.sockjs.client.SockJsMessageCodec ( ) . decode ( org.springframework.web.socket.sockjs.client.SockJsFrame . getFrameData ( ) ) ; if ( java.lang.String[] . int == NUMBER ) { org.springframework.web.socket.sockjs.client.CloseStatus = new CloseStatus ( java.lang.Integer . java.lang.Integer ( java.lang.String[] [ NUMBER ] ) , java.lang.String[] [ NUMBER ] ) ; } if ( org.springframework.web.socket.sockjs.client.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + org.springframework.web.socket.sockjs.client.CloseStatus + STRING + this ) ; } } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + org.springframework.web.socket.sockjs.client.SockJsFrame + STRING + this , java.io.IOException ) ; } } void ( org.springframework.web.socket.sockjs.client.CloseStatus ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable ) { try { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + this , java.lang.Throwable ) ; } this . org.springframework.web.socket.sockjs.client.WebSocketHandler . handleTransportError ( this , java.lang.Throwable ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public void void ( CloseStatus org.springframework.web.socket.sockjs.client.CloseStatus ) { this . org.springframework.web.socket.sockjs.client.CloseStatus = ( this . org.springframework.web.socket.sockjs.client.CloseStatus != null ? this . org.springframework.web.socket.sockjs.client.CloseStatus : org.springframework.web.socket.sockjs.client.CloseStatus ) ; Assert . state ( this . org.springframework.web.socket.sockjs.client.CloseStatus != null , STRING ) ; if ( org.springframework.web.socket.sockjs.client.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + this . org.springframework.web.socket.sockjs.client.CloseStatus + STRING + this ) ; } this . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State = org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State . org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession.State ; try { this . org.springframework.web.socket.sockjs.client.WebSocketHandler . afterConnectionClosed ( this , this . org.springframework.web.socket.sockjs.client.CloseStatus ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.web.socket.sockjs.client.AbstractClientSockJsSession> ( ) . java.lang.String ( ) + STRING + java.lang.String ( ) + STRING + java.net.URI ( ) + STRING ; }  <METHOD_END>
