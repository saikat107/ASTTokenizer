<METHOD_START> public void ( Errors org.springframework.web.bind.Errors ) { if ( org.springframework.web.bind.Errors == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . org.springframework.web.bind.Errors = org.springframework.web.bind.Errors ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.bind.Errors org.springframework.web.bind.Errors ( ) { return this . org.springframework.web.bind.Errors ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.bind.Errors . getObjectName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.web.bind.Errors . setNestedPath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.bind.Errors . getNestedPath ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.web.bind.Errors . pushNestedPath ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.IllegalStateException { this . org.springframework.web.bind.Errors . popNestedPath ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . org.springframework.web.bind.Errors . reject ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.web.bind.Errors . reject ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.lang.String java.lang.String ) { this . org.springframework.web.bind.Errors . reject ( java.lang.String , java.lang.Object[] , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.web.bind.Errors . rejectValue ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.web.bind.Errors . rejectValue ( java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.lang.String java.lang.String ) { this . org.springframework.web.bind.Errors . rejectValue ( java.lang.String , java.lang.String , java.lang.Object[] , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Errors org.springframework.web.bind.Errors ) { this . org.springframework.web.bind.Errors . addAllErrors ( org.springframework.web.bind.Errors ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.bind.Errors . hasErrors ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.bind.Errors . getErrorCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.bind.ObjectError> < ObjectError > java.util.List<org.springframework.web.bind.ObjectError> ( ) { return java.util.List ( this . org.springframework.web.bind.Errors . getAllErrors ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.bind.Errors . hasGlobalErrors ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.bind.Errors . getGlobalErrorCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.bind.ObjectError> < ObjectError > java.util.List<org.springframework.web.bind.ObjectError> ( ) { return java.util.List ( this . org.springframework.web.bind.Errors . getGlobalErrors ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.bind.ObjectError org.springframework.web.bind.ObjectError ( ) { return org.springframework.web.bind.ObjectError ( this . org.springframework.web.bind.Errors . getGlobalError ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.bind.Errors . hasFieldErrors ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.bind.Errors . getFieldErrorCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.bind.FieldError> < FieldError > java.util.List<org.springframework.web.bind.FieldError> ( ) { return this . org.springframework.web.bind.Errors . getFieldErrors ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.bind.FieldError org.springframework.web.bind.FieldError ( ) { return this . org.springframework.web.bind.Errors . getFieldError ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return this . org.springframework.web.bind.Errors . hasFieldErrors ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.String java.lang.String ) { return this . org.springframework.web.bind.Errors . getFieldErrorCount ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.bind.FieldError> < FieldError > java.util.List<org.springframework.web.bind.FieldError> ( java.lang.String java.lang.String ) { return java.util.List ( this . org.springframework.web.bind.Errors . getFieldErrors ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.bind.FieldError org.springframework.web.bind.FieldError ( java.lang.String java.lang.String ) { return org.springframework.web.bind.ObjectError ( this . org.springframework.web.bind.Errors . getFieldError ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = this . org.springframework.web.bind.Errors . getFieldValue ( java.lang.String ) ; return ( java.lang.Object instanceof java.lang.String ? HtmlUtils . htmlEscape ( ( java.lang.String ) java.lang.Object ) : java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) { return this . org.springframework.web.bind.Errors . getFieldType ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T extends org.springframework.web.bind.ObjectError > T T ( T T ) { if ( T == null ) { return null ; } if ( T instanceof FieldError ) { FieldError org.springframework.web.bind.FieldError = ( FieldError ) T ; java.lang.Object java.lang.Object = org.springframework.web.bind.FieldError . getRejectedValue ( ) ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.Object = HtmlUtils . htmlEscape ( ( java.lang.String ) java.lang.Object ) ; } return ( T ) new FieldError ( org.springframework.web.bind.FieldError . getObjectName ( ) , org.springframework.web.bind.FieldError . getField ( ) , java.lang.Object , org.springframework.web.bind.FieldError . isBindingFailure ( ) , org.springframework.web.bind.FieldError . getCodes ( ) , org.springframework.web.bind.FieldError . getArguments ( ) , HtmlUtils . htmlEscape ( org.springframework.web.bind.FieldError . getDefaultMessage ( ) ) ) ; } else { return ( T ) new ObjectError ( T . getObjectName ( ) , T . getCodes ( ) , T . getArguments ( ) , HtmlUtils . htmlEscape ( T . getDefaultMessage ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private < T extends org.springframework.web.bind.ObjectError > java.util.List<T> < T > java.util.List<T> ( java.util.List<T> < T > java.util.List<T> ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> <> ( java.util.List<T> . int ( ) ) ; for ( T T : java.util.List<T> ) { java.util.List<T> . boolean ( T ( T ) ) ; } return java.util.List<T> ; }  <METHOD_END>
