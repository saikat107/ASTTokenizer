<METHOD_START> @ Before public void void ( ) { IndexOperations org.springframework.data.mongodb.core.query.IndexOperations = org.springframework.data.mongodb.core.query.MongoOperations . indexOps ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; org.springframework.data.mongodb.core.query.IndexOperations . dropAllIndexes ( ) ; org.springframework.data.mongodb.core.query.IndexOperations . ensureIndex ( new IndexDefinition ( ) { @ java.lang.Override public org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , org.springframework.data.mongodb.core.query.Document ( ) ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; return org.springframework.data.mongodb.core.query.Document ; } @ java.lang.Override public org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; return org.springframework.data.mongodb.core.query.Document ; } private org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , NUMBER ) ; return org.springframework.data.mongodb.core.query.Document ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , org.springframework.data.mongodb.core.query.Document ( ) ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; return org.springframework.data.mongodb.core.query.Document ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , STRING ) ; return org.springframework.data.mongodb.core.query.Document ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , NUMBER ) ; return org.springframework.data.mongodb.core.query.Document ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasItems ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc = new org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder ( ) . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder ( STRING ) . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ( ) ; org.springframework.data.mongodb.core.query.MongoOperations . insert ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) . sortByScore ( ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ( NUMBER ) , anyOf ( equalTo ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) , equalTo ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ( NUMBER ) , anyOf ( equalTo ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) , equalTo ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ( NUMBER ) , equalTo ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ( NUMBER ) , equalTo ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasItems ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) . addCriteria ( where ( STRING ) . is ( STRING ) ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ( NUMBER ) , equalTo ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasItems ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) . includeScore ( ) . sortByScore ( ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; for ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc : java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> ) { assertTrue ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.Float > NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; TextQuery org.springframework.data.mongodb.core.query.TextQuery = TextQuery . queryText ( TextCriteria . forDefaultLanguage ( ) . matchingPhrase ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( org.springframework.data.mongodb.core.query.TextQuery , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , contains ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; TextQuery org.springframework.data.mongodb.core.query.TextQuery = TextQuery . queryText ( TextCriteria . forDefaultLanguage ( ) . matchingPhrase ( STRING ) ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( org.springframework.data.mongodb.core.query.TextQuery , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> < org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc > java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) . sortByScore ( ) . with ( new PageRequest ( NUMBER , NUMBER ) ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , contains ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> = org.springframework.data.mongodb.core.query.MongoOperations . find ( new TextQuery ( STRING ) . sortByScore ( ) . with ( new PageRequest ( NUMBER , NUMBER ) ) , org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc> , contains ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.data.mongodb.core.query.MongoOperations . save ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ; this . org.springframework.data.mongodb.core.query.MongoOperations . save ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ; this . org.springframework.data.mongodb.core.query.MongoOperations . save ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ; this . org.springframework.data.mongodb.core.query.MongoOperations . save ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ; this . org.springframework.data.mongodb.core.query.MongoOperations . save ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ; this . org.springframework.data.mongodb.core.query.MongoOperations . save ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ; this . org.springframework.data.mongodb.core.query.MongoOperations . save ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; int = int * int + ( ( java.lang.String == null ) ? NUMBER : java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) ) { return false ; } org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc = ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ) java.lang.Object ; if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String ) ) { return false ; } if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String ) ) { return false ; } if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String ) ) { return false ; } if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String ) ) { return false ; } if ( java.lang.String == null ) { if ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String != null ) { return false ; } } else if ( ! java.lang.String . boolean ( org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String ) ) { return false ; } return true ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc = new org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder ( java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder ( java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder ( java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc.FullTextDocBuilder ( java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ( ) { return this . org.springframework.data.mongodb.core.query.TextQueryTests.FullTextDoc ; }  <METHOD_END>
