<METHOD_START> public void ( ) { super( MediaType . APPLICATION_XML , MediaType . TEXT_XML , new MediaType ( STRING , STRING ) ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; if ( boolean ) { void ( true ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected T T ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> , HttpInputMessage org.springframework.http.converter.xml.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.xml.HttpMessageNotReadableException { java.io.InputStream java.io.InputStream = org.springframework.http.converter.xml.HttpInputMessage . getBody ( ) ; if ( javax.xml.transform.dom.DOMSource .class == java.lang.Class<> ) { return ( T ) javax.xml.transform.dom.DOMSource ( java.io.InputStream ) ; } else if ( javax.xml.transform.sax.SAXSource .class == java.lang.Class<> ) { return ( T ) javax.xml.transform.sax.SAXSource ( java.io.InputStream ) ; } else if ( javax.xml.transform.stax.StAXSource .class == java.lang.Class<> ) { return ( T ) javax.xml.transform.Source ( java.io.InputStream ) ; } else if ( javax.xml.transform.stream.StreamSource .class == java.lang.Class<> || javax.xml.transform.Source .class == java.lang.Class<> ) { return ( T ) javax.xml.transform.stream.StreamSource ( java.io.InputStream ) ; } else { throw new HttpMessageConversionException ( STRING + java.lang.Class<> + STRING ) ; } }  <METHOD_END>
<METHOD_START> private javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { try { javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) ; javax.xml.parsers.DocumentBuilderFactory . void ( true ) ; javax.xml.parsers.DocumentBuilderFactory . void ( STRING , ! boolean ( ) ) ; javax.xml.parsers.DocumentBuilderFactory . void ( STRING , boolean ( ) ) ; javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilder ( ) ; if ( ! boolean ( ) ) { javax.xml.parsers.DocumentBuilder . void ( org.xml.sax.EntityResolver ) ; } org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( java.io.InputStream ) ; return new javax.xml.transform.dom.DOMSource ( org.w3c.dom.Document ) ; } catch ( java.lang.NullPointerException java.lang.NullPointerException ) { if ( ! boolean ( ) ) { throw new HttpMessageNotReadableException ( STRING + STRING , java.lang.NullPointerException ) ; } throw java.lang.NullPointerException ; } catch ( javax.xml.parsers.ParserConfigurationException javax.xml.parsers.ParserConfigurationException ) { throw new HttpMessageNotReadableException ( STRING + javax.xml.parsers.ParserConfigurationException . java.lang.String ( ) , javax.xml.parsers.ParserConfigurationException ) ; } catch ( org.xml.sax.SAXException org.xml.sax.SAXException ) { throw new HttpMessageNotReadableException ( STRING + org.xml.sax.SAXException . java.lang.String ( ) , org.xml.sax.SAXException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private javax.xml.transform.sax.SAXSource javax.xml.transform.sax.SAXSource ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { try { org.xml.sax.XMLReader org.xml.sax.XMLReader = org . xml . sax . helpers . org.xml.sax.helpers.XMLReaderFactory . org.xml.sax.XMLReader ( ) ; org.xml.sax.XMLReader . void ( STRING , ! boolean ( ) ) ; org.xml.sax.XMLReader . void ( STRING , boolean ( ) ) ; if ( ! boolean ( ) ) { org.xml.sax.XMLReader . void ( org.xml.sax.EntityResolver ) ; } byte [] byte[] = StreamUtils . copyToByteArray ( java.io.InputStream ) ; return new javax.xml.transform.sax.SAXSource ( org.xml.sax.XMLReader , new org.xml.sax.InputSource ( new java.io.ByteArrayInputStream ( byte[] ) ) ) ; } catch ( org.xml.sax.SAXException org.xml.sax.SAXException ) { throw new HttpMessageNotReadableException ( STRING + org.xml.sax.SAXException . java.lang.String ( ) , org.xml.sax.SAXException ) ; } }  <METHOD_END>
<METHOD_START> private javax.xml.transform.Source javax.xml.transform.Source ( java.io.InputStream java.io.InputStream ) { try { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLInputFactory . void ( javax.xml.stream.XMLInputFactory . java.lang.String , boolean ( ) ) ; javax.xml.stream.XMLInputFactory . void ( javax.xml.stream.XMLInputFactory . java.lang.String , boolean ( ) ) ; if ( ! boolean ( ) ) { javax.xml.stream.XMLInputFactory . void ( javax.xml.stream.XMLResolver ) ; } javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLStreamReader ( java.io.InputStream ) ; return new javax.xml.transform.stax.StAXSource ( javax.xml.stream.XMLStreamReader ) ; } catch ( javax.xml.stream.XMLStreamException javax.xml.stream.XMLStreamException ) { throw new HttpMessageNotReadableException ( STRING + javax.xml.stream.XMLStreamException . java.lang.String ( ) , javax.xml.stream.XMLStreamException ) ; } }  <METHOD_END>
<METHOD_START> private javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { byte [] byte[] = StreamUtils . copyToByteArray ( java.io.InputStream ) ; return new javax.xml.transform.stream.StreamSource ( new java.io.ByteArrayInputStream ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Long java.lang.Long ( T T , MediaType org.springframework.http.converter.xml.MediaType ) { if ( T instanceof javax.xml.transform.dom.DOMSource ) { try { org.springframework.http.converter.xml.SourceHttpMessageConverter.CountingOutputStream org.springframework.http.converter.xml.SourceHttpMessageConverter.CountingOutputStream = new org.springframework.http.converter.xml.SourceHttpMessageConverter.CountingOutputStream ( ) ; void ( T , new javax.xml.transform.stream.StreamResult ( org.springframework.http.converter.xml.SourceHttpMessageConverter.CountingOutputStream ) ) ; return org.springframework.http.converter.xml.SourceHttpMessageConverter.CountingOutputStream . long ; } catch ( javax.xml.transform.TransformerException javax.xml.transform.TransformerException ) { } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( T T , HttpOutputMessage org.springframework.http.converter.xml.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.xml.HttpMessageNotWritableException { try { javax.xml.transform.Result javax.xml.transform.Result = new javax.xml.transform.stream.StreamResult ( org.springframework.http.converter.xml.HttpOutputMessage . getBody ( ) ) ; void ( T , javax.xml.transform.Result ) ; } catch ( javax.xml.transform.TransformerException javax.xml.transform.TransformerException ) { throw new HttpMessageNotWritableException ( STRING + T + STRING , javax.xml.transform.TransformerException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.xml.transform.Source javax.xml.transform.Source , javax.xml.transform.Result javax.xml.transform.Result ) throws javax.xml.transform.TransformerException { this . javax.xml.transform.TransformerFactory . javax.xml.transform.Transformer ( ) . void ( javax.xml.transform.Source , javax.xml.transform.Result ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws java.io.IOException { this . long ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] ) throws java.io.IOException { this . long += byte[] . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] , int int , int int ) throws java.io.IOException { this . long += int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.xml.sax.InputSource org.xml.sax.InputSource ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new org.xml.sax.InputSource ( new java.io.StringReader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return StreamUtils . emptyInput ( ) ; }  <METHOD_END>
