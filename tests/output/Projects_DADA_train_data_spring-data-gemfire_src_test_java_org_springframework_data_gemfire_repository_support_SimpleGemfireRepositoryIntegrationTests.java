<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.repository.support.Region<,> . clear ( ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryIntegrationTests.RegionClearListener = new org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryIntegrationTests.RegionClearListener ( ) ; org.springframework.data.gemfire.repository.support.Region<,> . getAttributesMutator ( ) . addCacheListener ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryIntegrationTests.RegionClearListener ) ; EntityInformation < Person , java.lang.Long > org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> = new ReflectionEntityInformation <> ( Person .class ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> = new SimpleGemfireRepository <> ( org.springframework.data.gemfire.repository.support.GemfireTemplate , org.springframework.data.gemfire.repository.support.EntityInformation<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryIntegrationTests.RegionClearListener . boolean ) . isFalse ( ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . deleteAll ( ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepositoryIntegrationTests.RegionClearListener . boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . getId ( ) , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . getId ( ) , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . getId ( ) , org.springframework.data.gemfire.repository.support.Person ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Person> < Person > java.util.Collection<org.springframework.data.gemfire.repository.support.Person> = org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . findAll ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.support.Person . getId ( ) , org.springframework.data.gemfire.repository.support.Person . getId ( ) ) ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> ) . containsAll ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.gemfire.repository.support.Person> < Person > java.util.Collection<org.springframework.data.gemfire.repository.support.Person> = org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . findAll ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . getId ( ) , org.springframework.data.gemfire.repository.support.Person ) ; org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . getId ( ) , org.springframework.data.gemfire.repository.support.Person ) ; java.util.Collection<org.springframework.data.gemfire.repository.support.Person> < Person > java.util.Collection<org.springframework.data.gemfire.repository.support.Person> = org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . findAll ( java.util.Arrays . java.util.List<java.lang.Long> ( NUMBER , NUMBER , NUMBER , NUMBER ) ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> ) . contains ( org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.repository.support.Person> ) . doesNotContain ( org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireTemplate . put ( org.springframework.data.gemfire.repository.support.Person . getId ( ) , org.springframework.data.gemfire.repository.support.Person ) ) . isNull ( ) ; SelectResults < Person > org.springframework.data.gemfire.repository.support.SelectResults<org.springframework.data.gemfire.repository.support.Person> = org.springframework.data.gemfire.repository.support.GemfireTemplate . find ( STRING , org.springframework.data.gemfire.repository.support.Person . getFirstname ( ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.SelectResults<org.springframework.data.gemfire.repository.support.Person> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.repository.support.SelectResults<org.springframework.data.gemfire.repository.support.Person> . iterator ( ) . next ( ) ) . isEqualTo ( org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . save ( org.springframework.data.gemfire.repository.support.Person ) ) . isEqualTo ( org.springframework.data.gemfire.repository.support.Person ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . count ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . findOne ( org.springframework.data.gemfire.repository.support.Person . getId ( ) ) . orElse ( null ) ) . isEqualTo ( org.springframework.data.gemfire.repository.support.Person ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . findAll ( ) ) . isEqualTo ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.repository.support.Person ) ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . delete ( org.springframework.data.gemfire.repository.support.Person ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . count ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . findOne ( org.springframework.data.gemfire.repository.support.Person . getId ( ) ) . orElse ( null ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . findAll ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.repository.support.GemfireTemplate . getRegion ( ) ) . isEmpty ( ) ; Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; Person org.springframework.data.gemfire.repository.support.Person = new Person ( NUMBER , STRING , STRING ) ; org.springframework.data.gemfire.repository.support.SimpleGemfireRepository<org.springframework.data.gemfire.repository.support.Person,java.lang.Long> . save ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person , org.springframework.data.gemfire.repository.support.Person ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireTemplate . getRegion ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( ( Person ) org.springframework.data.gemfire.repository.support.GemfireTemplate . get ( org.springframework.data.gemfire.repository.support.Person . getId ( ) ) ) . isEqualTo ( org.springframework.data.gemfire.repository.support.Person ) ; assertThat ( ( Person ) org.springframework.data.gemfire.repository.support.GemfireTemplate . get ( org.springframework.data.gemfire.repository.support.Person . getId ( ) ) ) . isEqualTo ( org.springframework.data.gemfire.repository.support.Person ) ; assertThat ( ( Person ) org.springframework.data.gemfire.repository.support.GemfireTemplate . get ( org.springframework.data.gemfire.repository.support.Person . getId ( ) ) ) . isEqualTo ( org.springframework.data.gemfire.repository.support.Person ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RegionEvent org.springframework.data.gemfire.repository.support.RegionEvent ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.repository.support.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.repository.support.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> ( GemFireCache org.springframework.data.gemfire.repository.support.GemFireCache ) { LocalRegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.repository.support.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> = new LocalRegionFactoryBean <> ( ) ; org.springframework.data.gemfire.repository.support.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.repository.support.GemFireCache ) ; org.springframework.data.gemfire.repository.support.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( false ) ; org.springframework.data.gemfire.repository.support.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; return org.springframework.data.gemfire.repository.support.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.repository.support.GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate ( Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> ) { return new GemfireTemplate ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
