<METHOD_START> @ Before public void void ( ) { DefaultListableBeanFactory org.springframework.data.repository.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.data.repository.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.data.repository.support.AbstractBeanDefinition ( org.springframework.data.repository.support.RepositoriesUnitTests.AddressRepository .class ) ) ; org.springframework.data.repository.support.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.data.repository.support.AbstractBeanDefinition ( org.springframework.data.repository.support.RepositoriesUnitTests.PersonRepository .class ) ) ; org.springframework.data.repository.support.GenericApplicationContext = new GenericApplicationContext ( org.springframework.data.repository.support.DefaultListableBeanFactory ) ; org.springframework.data.repository.support.GenericApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.support.AbstractBeanDefinition org.springframework.data.repository.support.AbstractBeanDefinition ( java.lang.Class<?> < ? > java.lang.Class<?> ) { BeanDefinitionBuilder org.springframework.data.repository.support.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( DummyRepositoryFactoryBean .class ) ; org.springframework.data.repository.support.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.Class<> ) ; return org.springframework.data.repository.support.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Repositories org.springframework.data.repository.support.Repositories = new Repositories ( org.springframework.data.repository.support.GenericApplicationContext ) ; assertThat ( org.springframework.data.repository.support.Repositories . hasRepositoryFor ( org.springframework.data.repository.support.RepositoriesUnitTests.Person .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.repository.support.Repositories . hasRepositoryFor ( org.springframework.data.repository.support.RepositoriesUnitTests.Address .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Repositories org.springframework.data.repository.support.Repositories = new Repositories ( org.springframework.data.repository.support.GenericApplicationContext ) ; assertThat ( org.springframework.data.repository.support.Repositories . hasRepositoryFor ( java.lang.String .class ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.support.Repositories . getRepositoryFor ( java.lang.String .class ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Repositories ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Repositories org.springframework.data.repository.support.Repositories = new Repositories ( org.springframework.data.repository.support.GenericApplicationContext ) ; assertThat ( org.springframework.data.repository.support.Repositories . getPersistentEntity ( org.springframework.data.repository.support.RepositoriesUnitTests.Person .class ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.repository.support.Repositories . getPersistentEntity ( org.springframework.data.repository.support.RepositoriesUnitTests.Address .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Repositories ( org.springframework.data.repository.support.GenericApplicationContext ) . getPersistentEntity ( org.springframework.data.repository.support.RepositoriesUnitTests.AdvancedAddress .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.repository.support.RepositoryMetadata = new org.springframework.data.repository.support.RepositoriesUnitTests.CustomRepositoryMetadata ( org.springframework.data.repository.support.RepositoriesUnitTests.SampleRepository .class ) ; RepositoryFactoryInformation < ? , ? > org.springframework.data.repository.support.RepositoryFactoryInformation<?,?> = new org.springframework.data.repository.support.RepositoriesUnitTests.SampleRepoFactoryInformation <> ( org.springframework.data.repository.support.RepositoryMetadata ) ; GenericApplicationContext org.springframework.data.repository.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.data.repository.support.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , org.springframework.data.repository.support.RepositoryFactoryInformation<,> ) ; org.springframework.data.repository.support.GenericApplicationContext . refresh ( ) ; Repositories org.springframework.data.repository.support.Repositories = new Repositories ( org.springframework.data.repository.support.GenericApplicationContext ) ; assertThat ( org.springframework.data.repository.support.Repositories . getRepositoryFor ( org.springframework.data.repository.support.RepositoriesUnitTests.Sample .class ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.repository.support.Repositories . getRepositoryFor ( org.springframework.data.repository.support.RepositoriesUnitTests.SampleEntity .class ) ) . isNotNull ( ) ; org.springframework.data.repository.support.GenericApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> < RepositoryInformation > java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> = new Repositories ( org.springframework.data.repository.support.GenericApplicationContext ) . getRepositoryInformation ( org.springframework.data.repository.support.RepositoriesUnitTests.PersonRepository .class ) ; assertThat ( java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> ) . hasValueSatisfying ( it -> assertThat ( it . getRepositoryInterface ( ) ) . isEqualTo ( PersonRepository .class ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this( new DefaultRepositoryMetadata ( java.lang.Class<> ) ); }  <METHOD_END>
<METHOD_START> public void ( RepositoryMetadata org.springframework.data.repository.support.RepositoryMetadata ) { this . org.springframework.data.repository.support.RepositoryMetadata = org.springframework.data.repository.support.RepositoryMetadata ; this . org.springframework.data.repository.support.SampleMappingContext = new SampleMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public org.springframework.data.repository.support.EntityInformation<T,S> < T , S > org.springframework.data.repository.support.EntityInformation<T,S> ( ) { return new DummyEntityInformation ( org.springframework.data.repository.support.RepositoryMetadata . getDomainType ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.support.RepositoryInformation org.springframework.data.repository.support.RepositoryInformation ( ) { return new DummyRepositoryInformation ( org.springframework.data.repository.support.RepositoryMetadata ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.support.PersistentEntity<?,?> < ? , ? > org.springframework.data.repository.support.PersistentEntity<?,?> ( ) { return org.springframework.data.repository.support.SampleMappingContext . getRequiredPersistentEntity ( org.springframework.data.repository.support.RepositoryMetadata . getDomainType ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.repository.support.QueryMethod> < QueryMethod > java.util.List<org.springframework.data.repository.support.QueryMethod> ( ) { return java.util.Collections . java.util.List<org.springframework.data.repository.support.QueryMethod> ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> ); java.lang.String java.lang.String = super. getDomainType ( ) . getName ( ) . concat ( STRING ) ; try { this . java.lang.Class<?> = ClassUtils . forName ( java.lang.String , org.springframework.data.repository.support.RepositoriesUnitTests.CustomRepositoryMetadata .class . java.lang.ClassLoader ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) { return java.util.Collections . java.util.Set ( super. getDomainType ( ) ) ; }  <METHOD_END>
