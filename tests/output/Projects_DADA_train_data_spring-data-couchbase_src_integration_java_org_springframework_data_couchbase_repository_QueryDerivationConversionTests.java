<METHOD_START> @ Before public void void ( ) java.lang.Exception { RepositoryFactorySupport org.springframework.data.couchbase.repository.RepositoryFactorySupport = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.IndexManager ) ; org.springframework.data.couchbase.repository.PartyRepository = org.springframework.data.couchbase.repository.RepositoryFactorySupport . getRepository ( PartyRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.couchbase.repository.Party> < Party > java.util.Optional<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findOne ( STRING ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.repository.Party> . isPresent ( ) ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( NUMBER , java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = java.util.Calendar . java.util.Date ( ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findByEventDateIs ( java.util.Date ) ; assertNotNull ( java.util.List<org.springframework.data.couchbase.repository.Party> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; assertEquals ( java.util.Date , java.util.List<org.springframework.data.couchbase.repository.Party> . get ( NUMBER ) . getEventDate ( ) ) ; JsonDocument org.springframework.data.couchbase.repository.JsonDocument = org.springframework.data.couchbase.repository.Bucket . get ( java.util.List<org.springframework.data.couchbase.repository.Party> . get ( NUMBER ) . getKey ( ) ) ; assertEquals ( java.util.Date . long ( ) , org.springframework.data.couchbase.repository.JsonDocument . content ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findByAttendeesGreaterThanEqual ( NUMBER ) ; assertNotNull ( java.util.List<org.springframework.data.couchbase.repository.Party> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.data.couchbase.repository.Party> . get ( NUMBER ) . getKey ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( NUMBER , java.util.Calendar . int , NUMBER ) ; java.util.Date java.util.Date = java.util.Calendar . java.util.Date ( ) ; java.util.List<org.springframework.data.couchbase.repository.Party> < Party > java.util.List<org.springframework.data.couchbase.repository.Party> = org.springframework.data.couchbase.repository.PartyRepository . findFirst3ByEventDateGreaterThanEqual ( java.util.Date ) ; assertNotNull ( java.util.List<org.springframework.data.couchbase.repository.Party> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.couchbase.repository.Party> . size ( ) ) ; for ( Party org.springframework.data.couchbase.repository.Party : java.util.List<org.springframework.data.couchbase.repository.Party> ) { assert ( org.springframework.data.couchbase.repository.Party . getEventDate ( ) . after ( java.util.Date ) ) ; } }  <METHOD_END>
