<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.boot.context.properties.AnnotationMetadata ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.boot.context.properties.MultiValueMap<java.lang.String,java.lang.Object> = org.springframework.boot.context.properties.AnnotationMetadata . getAllAnnotationAttributes ( EnableConfigurationProperties .class . java.lang.String ( ) , false ) ; java.lang.Object [] java.lang.Object[] = org.springframework.boot.context.properties.MultiValueMap<java.lang.String,java.lang.Object> == null ? null : ( java.lang.Object [] ) org.springframework.boot.context.properties.MultiValueMap<java.lang.String,java.lang.Object> . getFirst ( STRING ) ; if ( java.lang.Object[] == null || java.lang.Object[] . int == NUMBER ) { return new java.lang.String [] { ConfigurationPropertiesBindingPostProcessorRegistrar .class . java.lang.String ( ) } ; } return new java.lang.String [] { org.springframework.boot.context.properties.EnableConfigurationPropertiesImportSelector.ConfigurationPropertiesBeanRegistrar .class . java.lang.String ( ) , ConfigurationPropertiesBindingPostProcessorRegistrar .class . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.boot.context.properties.AnnotationMetadata , BeanDefinitionRegistry org.springframework.boot.context.properties.BeanDefinitionRegistry ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.boot.context.properties.MultiValueMap<java.lang.String,java.lang.Object> = org.springframework.boot.context.properties.AnnotationMetadata . getAllAnnotationAttributes ( EnableConfigurationProperties .class . java.lang.String ( ) , false ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.List<java.lang.Class<?>> ( org.springframework.boot.context.properties.MultiValueMap<java.lang.String,java.lang.Object> . get ( STRING ) ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<?>> ) { java.lang.String java.lang.String = java.lang.String ( java.lang.Class<> ) ; java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) : java.lang.Class<> . java.lang.String ( ) ) ; if ( ! boolean ( ( ConfigurableListableBeanFactory ) org.springframework.boot.context.properties.BeanDefinitionRegistry , java.lang.String ) ) { void ( org.springframework.boot.context.properties.BeanDefinitionRegistry , java.lang.Class<> , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Class<?> < ? > java.lang.Class<?> ) { ConfigurationProperties org.springframework.boot.context.properties.ConfigurationProperties = AnnotationUtils . findAnnotation ( java.lang.Class<> , ConfigurationProperties .class ) ; if ( org.springframework.boot.context.properties.ConfigurationProperties != null ) { return org.springframework.boot.context.properties.ConfigurationProperties . prefix ( ) ; } return STRING ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { java.util.ArrayList<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.ArrayList<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { for ( java.lang.Object java.lang.Object : ( java.lang.Object [] ) java.lang.Object ) { if ( java.lang.Object instanceof java.lang.Class && java.lang.Object != void .class ) { java.util.ArrayList<java.lang.Class<?>> . boolean ( ( java.lang.Class<?> < ? > ) java.lang.Object ) ; } } } return java.util.ArrayList<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.boot.context.properties.BeanDefinitionRegistry , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { BeanDefinitionBuilder org.springframework.boot.context.properties.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( java.lang.Class<> ) ; AbstractBeanDefinition org.springframework.boot.context.properties.AbstractBeanDefinition = org.springframework.boot.context.properties.BeanDefinitionBuilder . getBeanDefinition ( ) ; org.springframework.boot.context.properties.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.boot.context.properties.AbstractBeanDefinition ) ; ConfigurationProperties org.springframework.boot.context.properties.ConfigurationProperties = AnnotationUtils . findAnnotation ( java.lang.Class<> , ConfigurationProperties .class ) ; Assert . notNull ( org.springframework.boot.context.properties.ConfigurationProperties , STRING + ConfigurationProperties .class . java.lang.String ( ) + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConfigurableListableBeanFactory org.springframework.boot.context.properties.ConfigurableListableBeanFactory , java.lang.String java.lang.String ) { boolean boolean = org.springframework.boot.context.properties.ConfigurableListableBeanFactory . containsBeanDefinition ( java.lang.String ) ; if ( boolean ) { return true ; } if ( org.springframework.boot.context.properties.ConfigurableListableBeanFactory . getParentBeanFactory ( ) instanceof ConfigurableListableBeanFactory ) { return boolean ( ( ConfigurableListableBeanFactory ) org.springframework.boot.context.properties.ConfigurableListableBeanFactory . getParentBeanFactory ( ) , java.lang.String ) ; } return false ; }  <METHOD_END>
