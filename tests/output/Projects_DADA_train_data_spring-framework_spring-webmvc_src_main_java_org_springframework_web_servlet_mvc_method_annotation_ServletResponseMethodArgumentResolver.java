<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ; return ( ServletResponse .class . boolean ( java.lang.Class<> ) || java.io.OutputStream .class . boolean ( java.lang.Class<> ) || java.io.Writer .class . boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { if ( org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer != null ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ; if ( ServletResponse .class . boolean ( java.lang.Class<> ) ) { return java.lang.Object ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Class<> ) ; } return java.lang.Object ( java.lang.Class<> , java.lang.Object ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , ServletResponse .class ) ) ; }  <METHOD_END>
<METHOD_START> private < T > T T ( NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Class<T> < T > java.lang.Class<T> ) { T T = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeResponse ( java.lang.Class<T> ) ; if ( T == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING + org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; } return T ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , ServletResponse org.springframework.web.servlet.mvc.method.annotation.ServletResponse ) throws java.io.IOException { if ( java.io.OutputStream .class . boolean ( java.lang.Class<> ) ) { return org.springframework.web.servlet.mvc.method.annotation.ServletResponse . getOutputStream ( ) ; } else if ( java.io.Writer .class . boolean ( java.lang.Class<> ) ) { return org.springframework.web.servlet.mvc.method.annotation.ServletResponse . getWriter ( ) ; } throw new java.lang.UnsupportedOperationException ( STRING + java.lang.Class<> ) ; }  <METHOD_END>
