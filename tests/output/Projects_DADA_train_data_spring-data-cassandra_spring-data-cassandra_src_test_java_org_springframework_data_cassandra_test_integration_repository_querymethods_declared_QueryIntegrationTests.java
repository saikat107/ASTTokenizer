<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { Person .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.test.integration.repository.querymethods.declared.SchemaAction org.springframework.data.cassandra.test.integration.repository.querymethods.declared.SchemaAction ( ) { return SchemaAction . RECREATE_DROP_UNUSED ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { deleteAllEntities ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> < Person > java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findFolksWithLastnameAsList ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> . size ( ) == NUMBER ) . isTrue ( ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> . iterator ( ) . next ( ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> < Person > java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findFolksWithLastnameAsList ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> . size ( ) == NUMBER ) . isTrue ( ) ; boolean boolean = true ; for ( Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person : java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> ) { assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) . isEqualTo ( boolean ? org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) : org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; boolean = false ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findFolksWithLastnameAsListOfMapOfStringToObject ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> ) . isNotNull ( ) ; assertThat ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) == NUMBER ) . isTrue ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Iterator<java.util.Map<java.lang.String,java.lang.Object>> ( ) . java.util.Map<java.lang.String,java.lang.Object> ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) . isEqualTo ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) . isEqualTo ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findSingle ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( STRING ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> < Person > java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findFolksWithLastnameAsList ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> . size ( ) == NUMBER ) . isTrue ( ) ; boolean boolean = true ; for ( Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person : java.util.Collection<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> ) { assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) . isEqualTo ( boolean ? org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) : org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; boolean = false ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setNickname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findSingleNickname ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; assertThat ( java.lang.String ) . isNotNull ( ) ; assertThat ( java.lang.String ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getNickname ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setCool ( true ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; boolean boolean = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findSingleCool ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; assertThat ( boolean ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . isCool ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setBirthDate ( new java.util.Date ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; java.util.Date java.util.Date = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findSingleBirthdate ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; assertThat ( java.util.Date ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getBirthDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setNumberOfChildren ( NUMBER ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; int int = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findSingleNumberOfChildren ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; assertThat ( int ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getNumberOfChildren ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; Person [] org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person[] = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findFolksWithLastnameAsArray ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person[] ) . isNotNull ( ) ; assertThat ( results . length == NUMBER ) . isTrue ( ) ; Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person[] [ NUMBER ] ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( STRING + uuid ( ) ) ; java.lang.String java.lang.String = STRING + uuid ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( java.lang.String ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> < Person > java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findFolksWithLastnameAsList ( java.lang.String ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> . size ( ) == NUMBER ) . isTrue ( ) ; for ( Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person : java.util.List<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> ) { assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) ) ; assertThat ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) . isEqualTo ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setNumberOfChildren ( NUMBER ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; java.util.Optional<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> < Person > java.util.Optional<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findOptionalWithLastnameAndFirstname ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getLastname ( ) , org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . getFirstname ( ) ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> . isPresent ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Optional<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> < Person > java.util.Optional<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findOptionalWithLastnameAndFirstname ( STRING , STRING ) ; assertThat ( java.util.Optional<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> . isPresent ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . count ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Person org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person = new Person ( ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setFirstname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setLastname ( uuid ( ) ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person . setNumberOfChildren ( int ) ; org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . save ( org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person ) ; } java.util.stream.Stream<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> < Person > java.util.stream.Stream<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> = org.springframework.data.cassandra.test.integration.repository.querymethods.declared.PersonRepository . findAllPeople ( ) ; long long = java.util.stream.Stream<org.springframework.data.cassandra.test.integration.repository.querymethods.declared.Person> . peek ( person -> assertThat ( person ) . isInstanceOf ( Person .class ) ) . count ( ) ; assertThat ( long ) . isEqualTo ( long + NUMBER ) ; }  <METHOD_END>
