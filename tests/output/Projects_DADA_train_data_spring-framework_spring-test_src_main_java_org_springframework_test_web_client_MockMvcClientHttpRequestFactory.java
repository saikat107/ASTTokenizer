<METHOD_START> public void ( MockMvc org.springframework.test.web.client.MockMvc ) { Assert . notNull ( org.springframework.test.web.client.MockMvc , STRING ) ; this . org.springframework.test.web.client.MockMvc = org.springframework.test.web.client.MockMvc ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.client.ClientHttpRequest org.springframework.test.web.client.ClientHttpRequest ( final java.net.URI java.net.URI , final HttpMethod org.springframework.test.web.client.HttpMethod ) throws java.io.IOException { return new MockClientHttpRequest ( org.springframework.test.web.client.HttpMethod , java.net.URI ) { @ java.lang.Override public org.springframework.test.web.client.ClientHttpResponse org.springframework.test.web.client.ClientHttpResponse ( ) java.io.IOException { try { MockHttpServletRequestBuilder org.springframework.test.web.client.MockHttpServletRequestBuilder = request ( org.springframework.test.web.client.HttpMethod , java.net.URI ) ; org.springframework.test.web.client.MockHttpServletRequestBuilder . content ( getBodyAsBytes ( ) ) ; org.springframework.test.web.client.MockHttpServletRequestBuilder . headers ( getHeaders ( ) ) ; MvcResult org.springframework.test.web.client.MvcResult = org.springframework.test.web.client.MockMvcClientHttpRequestFactory .this . org.springframework.test.web.client.MockMvc . perform ( org.springframework.test.web.client.MockHttpServletRequestBuilder ) . andReturn ( ) ; MockHttpServletResponse org.springframework.test.web.client.MockHttpServletResponse = org.springframework.test.web.client.MvcResult . getResponse ( ) ; HttpStatus org.springframework.test.web.client.HttpStatus = HttpStatus . valueOf ( org.springframework.test.web.client.MockHttpServletResponse . getStatus ( ) ) ; byte [] byte[] = org.springframework.test.web.client.MockHttpServletResponse . getContentAsByteArray ( ) ; HttpHeaders org.springframework.test.web.client.HttpHeaders = org.springframework.test.web.client.HttpHeaders ( org.springframework.test.web.client.MockHttpServletResponse ) ; MockClientHttpResponse org.springframework.test.web.client.MockClientHttpResponse = new MockClientHttpResponse ( byte[] , org.springframework.test.web.client.HttpStatus ) ; org.springframework.test.web.client.MockClientHttpResponse . getHeaders ( ) . putAll ( org.springframework.test.web.client.HttpHeaders ) ; return org.springframework.test.web.client.MockClientHttpResponse ; } catch ( java.lang.Exception java.lang.Exception ) { byte [] byte[] = java.lang.Exception . java.lang.String ( ) . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; return new MockClientHttpResponse ( byte[] , HttpStatus . INTERNAL_SERVER_ERROR ) ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.client.ClientHttpResponse org.springframework.test.web.client.ClientHttpResponse ( ) java.io.IOException { try { MockHttpServletRequestBuilder org.springframework.test.web.client.MockHttpServletRequestBuilder = request ( org.springframework.test.web.client.HttpMethod , java.net.URI ) ; org.springframework.test.web.client.MockHttpServletRequestBuilder . content ( getBodyAsBytes ( ) ) ; org.springframework.test.web.client.MockHttpServletRequestBuilder . headers ( getHeaders ( ) ) ; MvcResult org.springframework.test.web.client.MvcResult = org.springframework.test.web.client.MockMvcClientHttpRequestFactory .this . org.springframework.test.web.client.MockMvc . perform ( org.springframework.test.web.client.MockHttpServletRequestBuilder ) . andReturn ( ) ; MockHttpServletResponse org.springframework.test.web.client.MockHttpServletResponse = org.springframework.test.web.client.MvcResult . getResponse ( ) ; HttpStatus org.springframework.test.web.client.HttpStatus = HttpStatus . valueOf ( org.springframework.test.web.client.MockHttpServletResponse . getStatus ( ) ) ; byte [] byte[] = org.springframework.test.web.client.MockHttpServletResponse . getContentAsByteArray ( ) ; HttpHeaders org.springframework.test.web.client.HttpHeaders = org.springframework.test.web.client.HttpHeaders ( org.springframework.test.web.client.MockHttpServletResponse ) ; MockClientHttpResponse org.springframework.test.web.client.MockClientHttpResponse = new MockClientHttpResponse ( byte[] , org.springframework.test.web.client.HttpStatus ) ; org.springframework.test.web.client.MockClientHttpResponse . getHeaders ( ) . putAll ( org.springframework.test.web.client.HttpHeaders ) ; return org.springframework.test.web.client.MockClientHttpResponse ; } catch ( java.lang.Exception java.lang.Exception ) { byte [] byte[] = java.lang.Exception . java.lang.String ( ) . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; return new MockClientHttpResponse ( byte[] , HttpStatus . INTERNAL_SERVER_ERROR ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.client.HttpHeaders org.springframework.test.web.client.HttpHeaders ( MockHttpServletResponse org.springframework.test.web.client.MockHttpServletResponse ) { HttpHeaders org.springframework.test.web.client.HttpHeaders = new HttpHeaders ( ) ; for ( java.lang.String java.lang.String : org.springframework.test.web.client.MockHttpServletResponse . getHeaderNames ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.test.web.client.MockHttpServletResponse . getHeaders ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.test.web.client.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } } return org.springframework.test.web.client.HttpHeaders ; }  <METHOD_END>
