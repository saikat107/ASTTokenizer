<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.queries.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.queries.PlatformTransactionManager ) ; getGraphDatabaseService ( ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { World org.springframework.data.neo4j.queries.World = new World ( STRING , NUMBER ) ; org.springframework.data.neo4j.queries.WorldRepository . save ( org.springframework.data.neo4j.queries.World ) ; org.springframework.data.neo4j.queries.WorldRepository . touchAllWorlds ( ) ; org.springframework.data.neo4j.queries.Session . clear ( ) ; org.springframework.data.neo4j.queries.World = org.springframework.data.neo4j.queries.WorldRepository . findOne ( org.springframework.data.neo4j.queries.World . getId ( ) ) . get ( ) ; assertNotNull ( org.springframework.data.neo4j.queries.World . getUpdated ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { World org.springframework.data.neo4j.queries.World = new World ( STRING , NUMBER ) ; World org.springframework.data.neo4j.queries.World = new World ( STRING , NUMBER ) ; org.springframework.data.neo4j.queries.World . addRocketRouteTo ( org.springframework.data.neo4j.queries.World ) ; org.springframework.data.neo4j.queries.WorldRepository . save ( org.springframework.data.neo4j.queries.World ) ; org.springframework.data.neo4j.queries.WorldRepository . touchAllWorlds ( ) ; org.springframework.data.neo4j.queries.Session . clear ( ) ; org.springframework.data.neo4j.queries.World = org.springframework.data.neo4j.queries.WorldRepository . findOne ( org.springframework.data.neo4j.queries.World . getId ( ) ) . get ( ) ; assertNotNull ( org.springframework.data.neo4j.queries.World . getUpdated ( ) ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.World . getReachableByRocket ( ) . size ( ) ) ; for ( World org.springframework.data.neo4j.queries.World : org.springframework.data.neo4j.queries.World . getReachableByRocket ( ) ) { assertNotNull ( org.springframework.data.neo4j.queries.World . getUpdated ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { World org.springframework.data.neo4j.queries.World = new World ( STRING , NUMBER ) ; org.springframework.data.neo4j.queries.WorldRepository . save ( org.springframework.data.neo4j.queries.World ) ; QueryStatistics org.springframework.data.neo4j.queries.QueryStatistics = org.springframework.data.neo4j.queries.WorldRepository . touchAllWorldsWithStatistics ( ) . queryStatistics ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.queries.QueryStatistics . getPropertiesSet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.PlatformTransactionManager org.springframework.data.neo4j.queries.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.queries.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.SessionFactory org.springframework.data.neo4j.queries.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.queries.TransactionTemplate org.springframework.data.neo4j.queries.TransactionTemplate ( ) { return new TransactionTemplate ( org.springframework.data.neo4j.queries.PlatformTransactionManager ( ) ) ; }  <METHOD_END>
