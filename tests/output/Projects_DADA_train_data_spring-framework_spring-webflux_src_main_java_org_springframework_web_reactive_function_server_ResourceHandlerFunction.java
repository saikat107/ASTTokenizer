<METHOD_START> public void ( Resource org.springframework.web.reactive.function.server.Resource ) { this . org.springframework.web.reactive.function.server.Resource = org.springframework.web.reactive.function.server.Resource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { switch ( org.springframework.web.reactive.function.server.ServerRequest . method ( ) ) { case GET : return ServerResponse . ok ( ) . body ( BodyInserters . fromResource ( this . org.springframework.web.reactive.function.server.Resource ) ) ; case HEAD : Resource org.springframework.web.reactive.function.server.Resource = new org.springframework.web.reactive.function.server.ResourceHandlerFunction.HeadMethodResource ( this . org.springframework.web.reactive.function.server.Resource ) ; return ServerResponse . ok ( ) . body ( BodyInserters . fromResource ( org.springframework.web.reactive.function.server.Resource ) ) ; case OPTIONS : return ServerResponse . ok ( ) . allow ( java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> ) . body ( BodyInserters . empty ( ) ) ; default: return ServerResponse . status ( HttpStatus . METHOD_NOT_ALLOWED ) . allow ( java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> ) . body ( BodyInserters . empty ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.web.reactive.function.server.Resource ) { this . org.springframework.web.reactive.function.server.Resource = org.springframework.web.reactive.function.server.Resource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.reactive.function.server.Resource . exists ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( ) java.io.IOException { return this . org.springframework.web.reactive.function.server.Resource . getURL ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) java.io.IOException { return this . org.springframework.web.reactive.function.server.Resource . getURI ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.File java.io.File ( ) java.io.IOException { return this . org.springframework.web.reactive.function.server.Resource . getFile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { return this . org.springframework.web.reactive.function.server.Resource . contentLength ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) java.io.IOException { return this . org.springframework.web.reactive.function.server.Resource . lastModified ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Resource org.springframework.web.reactive.function.server.Resource ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.web.reactive.function.server.Resource . createRelative ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.reactive.function.server.Resource . getFilename ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.reactive.function.server.Resource . getDescription ( ) ; }  <METHOD_END>
