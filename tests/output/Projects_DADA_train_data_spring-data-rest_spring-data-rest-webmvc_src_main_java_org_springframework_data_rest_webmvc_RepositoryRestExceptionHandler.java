<METHOD_START> public void ( MessageSource org.springframework.data.rest.webmvc.MessageSource ) { Assert . notNull ( org.springframework.data.rest.webmvc.MessageSource , STRING ) ; this . org.springframework.data.rest.webmvc.MessageSourceAccessor = new MessageSourceAccessor ( org.springframework.data.rest.webmvc.MessageSource ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler org.springframework.data.rest.webmvc.ResponseEntity<?> < ? > org.springframework.data.rest.webmvc.ResponseEntity<?> ( ResourceNotFoundException org.springframework.data.rest.webmvc.ResourceNotFoundException ) { return org.springframework.data.rest.webmvc.ResponseEntity<?> ( new HttpHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> < ExceptionMessage > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( HttpMessageNotReadableException org.springframework.data.rest.webmvc.HttpMessageNotReadableException ) { return org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( new HttpHeaders ( ) , org.springframework.data.rest.webmvc.HttpMessageNotReadableException ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( { java.lang.reflect.InvocationTargetException .class , java.lang.IllegalArgumentException .class , java.lang.ClassCastException .class , ConversionFailedException .class , java.lang.NullPointerException .class } ) org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> < ExceptionMessage > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( java.lang.Exception java.lang.Exception ) { return org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( HttpStatus . INTERNAL_SERVER_ERROR , new HttpHeaders ( ) , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.RepositoryConstraintViolationExceptionMessage> < RepositoryConstraintViolationExceptionMessage > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.RepositoryConstraintViolationExceptionMessage> ( RepositoryConstraintViolationException org.springframework.data.rest.webmvc.RepositoryConstraintViolationException ) { return org.springframework.data.rest.webmvc.ResponseEntity ( HttpStatus . BAD_REQUEST , new HttpHeaders ( ) , new RepositoryConstraintViolationExceptionMessage ( org.springframework.data.rest.webmvc.RepositoryConstraintViolationException , org.springframework.data.rest.webmvc.MessageSourceAccessor ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( { OptimisticLockingFailureException .class , DataIntegrityViolationException .class } ) org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> < ExceptionMessage > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( java.lang.Exception java.lang.Exception ) { return org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( HttpStatus . CONFLICT , new HttpHeaders ( ) , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> ( HttpRequestMethodNotSupportedException org.springframework.data.rest.webmvc.HttpRequestMethodNotSupportedException ) { HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders = new HttpHeaders ( ) ; org.springframework.data.rest.webmvc.HttpHeaders . setAllow ( org.springframework.data.rest.webmvc.HttpRequestMethodNotSupportedException . getSupportedHttpMethods ( ) ) ; return org.springframework.data.rest.webmvc.ResponseEntity ( HttpStatus . METHOD_NOT_ALLOWED , org.springframework.data.rest.webmvc.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.data.rest.webmvc.ResponseEntity<java.lang.Void> ( ETagDoesntMatchException org.springframework.data.rest.webmvc.ETagDoesntMatchException ) { HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders = org.springframework.data.rest.webmvc.ETagDoesntMatchException . getExpectedETag ( ) . addTo ( new HttpHeaders ( ) ) ; return org.springframework.data.rest.webmvc.ResponseEntity ( HttpStatus . PRECONDITION_FAILED , org.springframework.data.rest.webmvc.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.rest.webmvc.ResponseEntity<?> < ? > org.springframework.data.rest.webmvc.ResponseEntity<?> ( HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders ) { return org.springframework.data.rest.webmvc.ResponseEntity ( HttpStatus . NOT_FOUND , org.springframework.data.rest.webmvc.HttpHeaders , null ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> < ExceptionMessage > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders , java.lang.Exception java.lang.Exception ) { return org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( HttpStatus . BAD_REQUEST , org.springframework.data.rest.webmvc.HttpHeaders , java.lang.Exception ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> < ExceptionMessage > org.springframework.data.rest.webmvc.ResponseEntity<org.springframework.data.rest.webmvc.ExceptionMessage> ( HttpStatus org.springframework.data.rest.webmvc.HttpStatus , HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders , java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception != null ) { java.lang.String java.lang.String = java.lang.Exception . java.lang.String ( ) ; org.springframework.data.rest.webmvc.Logger . error ( java.lang.String , java.lang.Exception ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return org.springframework.data.rest.webmvc.ResponseEntity ( org.springframework.data.rest.webmvc.HttpStatus , org.springframework.data.rest.webmvc.HttpHeaders , new ExceptionMessage ( java.lang.Exception ) ) ; } } return org.springframework.data.rest.webmvc.ResponseEntity ( org.springframework.data.rest.webmvc.HttpStatus , org.springframework.data.rest.webmvc.HttpHeaders , null ) ; }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.data.rest.webmvc.ResponseEntity<T> < T > org.springframework.data.rest.webmvc.ResponseEntity<T> ( HttpStatus org.springframework.data.rest.webmvc.HttpStatus , HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders ) { return org.springframework.data.rest.webmvc.ResponseEntity ( org.springframework.data.rest.webmvc.HttpStatus , org.springframework.data.rest.webmvc.HttpHeaders , null ) ; }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.data.rest.webmvc.ResponseEntity<T> < T > org.springframework.data.rest.webmvc.ResponseEntity<T> ( HttpStatus org.springframework.data.rest.webmvc.HttpStatus , HttpHeaders org.springframework.data.rest.webmvc.HttpHeaders , T T ) { Assert . notNull ( org.springframework.data.rest.webmvc.HttpHeaders , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.HttpStatus , STRING ) ; return new ResponseEntity < T > ( T , org.springframework.data.rest.webmvc.HttpHeaders , org.springframework.data.rest.webmvc.HttpStatus ) ; }  <METHOD_END>
