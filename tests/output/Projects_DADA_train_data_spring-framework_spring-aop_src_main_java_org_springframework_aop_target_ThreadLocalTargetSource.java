<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.aop.target.BeansException { ++ this . int ; java.lang.Object java.lang.Object = this . java.lang.ThreadLocal<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getTargetBeanName ( ) + STRING + STRING + java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) + STRING ) ; } java.lang.Object = newPrototypeInstance ( ) ; this . java.lang.ThreadLocal<java.lang.Object> . void ( java.lang.Object ) ; synchronized ( this . java.util.Set<java.lang.Object> ) { this . java.util.Set<java.lang.Object> . boolean ( java.lang.Object ) ; } } else { ++ this . int ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { logger . debug ( STRING ) ; synchronized ( this . java.util.Set<java.lang.Object> ) { for ( java.lang.Object java.lang.Object : this . java.util.Set<java.lang.Object> ) { destroyPrototypeInstance ( java.lang.Object ) ; } this . java.util.Set<java.lang.Object> . void ( ) ; } this . java.lang.ThreadLocal<java.lang.Object> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { synchronized ( this . java.util.Set<java.lang.Object> ) { return this . java.util.Set<java.lang.Object> . int ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.aop.target.IntroductionAdvisor org.springframework.aop.target.IntroductionAdvisor ( ) { DelegatingIntroductionInterceptor org.springframework.aop.target.DelegatingIntroductionInterceptor = new DelegatingIntroductionInterceptor ( this ) ; return new DefaultIntroductionAdvisor ( org.springframework.aop.target.DelegatingIntroductionInterceptor , ThreadLocalTargetSourceStats .class ) ; }  <METHOD_END>
