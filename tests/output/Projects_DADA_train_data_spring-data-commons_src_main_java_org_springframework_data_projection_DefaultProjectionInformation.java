<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.util.List<java.beans.PropertyDescriptor> = java.util.List<java.beans.PropertyDescriptor> ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.List<java.beans.PropertyDescriptor> ( ) { return java.util.List<java.beans.PropertyDescriptor> . java.util.stream.Stream<java.beans.PropertyDescriptor> ( ) . java.util.stream.Stream<java.beans.PropertyDescriptor> ( this :: boolean ) . java.util.stream.Stream<java.beans.PropertyDescriptor> ( ) . java.util.List<java.beans.PropertyDescriptor> ( java.util.stream.Collectors . java.util.stream.Collector<java.beans.PropertyDescriptor,?,java.util.List<java.beans.PropertyDescriptor>> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.List<java.beans.PropertyDescriptor> . boolean ( java.util.List<java.beans.PropertyDescriptor> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { return true ; }  <METHOD_END>
<METHOD_START> private static java.util.List<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.List<java.beans.PropertyDescriptor> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.List<java.beans.PropertyDescriptor> = new java.util.ArrayList<java.beans.PropertyDescriptor> <> ( ) ; java.util.List<java.beans.PropertyDescriptor> . boolean ( java.util.Arrays . java.util.stream.IntStream ( BeanUtils . getPropertyDescriptors ( java.lang.Class<> ) ) . filter ( it -> ! hasDefaultGetter ( it ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { java.util.List<java.beans.PropertyDescriptor> . boolean ( java.util.List<java.beans.PropertyDescriptor> ( java.lang.Class<> ) ) ; } return java.util.List<java.beans.PropertyDescriptor> . java.util.stream.Stream<java.beans.PropertyDescriptor> ( ) . java.util.stream.Stream<java.beans.PropertyDescriptor> ( ) . java.util.List<java.beans.PropertyDescriptor> ( java.util.stream.Collectors . java.util.stream.Collector<java.beans.PropertyDescriptor,?,java.util.List<java.beans.PropertyDescriptor>> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { java.lang.reflect.Method java.lang.reflect.Method = java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) ; return java.lang.reflect.Method == null ? false : java.lang.reflect.Method . boolean ( ) ; }  <METHOD_END>
