<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType> . getType ( ) ) . isEqualTo ( org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType .class ) ; OptionalAssert < TypeInformation < ? > > org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getComponentType ) . isNotPresent ( ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getMapValueType ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper> . getType ( ) ) . isEqualTo ( org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> { assertThat ( it . getType ( ) ) . isEqualTo ( GenericType .class ) ; assertThat ( it . getProperty ( STRING ) ) . hasValueSatisfying ( nested -> assertThat ( nested . getType ( ) ) . isEqualTo ( String .class ) ) ; } ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.GenericTypeWithBound > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.GenericTypeWithBound> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericTypeWithBound .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.GenericTypeWithBound> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.SpecialGenericTypeWithBound > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SpecialGenericTypeWithBound> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.SpecialGenericTypeWithBound .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SpecialGenericTypeWithBound> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( SpecialPerson .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.AnotherGenericType > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.AnotherGenericType> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.AnotherGenericType .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.AnotherGenericType> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( GenericTypeWithBound .class ) ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.AnotherGenericType> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.StringCollectionContainer > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringCollectionContainer> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.StringCollectionContainer .class ) ; OptionalAssert < TypeInformation < ? > > org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringCollectionContainer> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getComponentType ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . map ( TypeInformation :: getType ) . hasValueSatisfying ( it -> { assertThat ( it ) . isEqualTo ( String [] .class ) ; assertThat ( it . isArray ( ) ) . isTrue ( ) ; } ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringCollectionContainer> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Collection [] .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getComponentType ) . hasValueSatisfying ( it -> { assertThat ( it . getType ( ) ) . isEqualTo ( Collection .class ) ; assertThat ( it . getComponentType ( ) ) . hasValueSatisfying ( nested -> assertThat ( nested . getType ( ) ) . isEqualTo ( String .class ) ) ; } ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringCollectionContainer> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Set .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getComponentType ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Object .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getMapValueType ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.StringMapContainer > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringMapContainer> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.StringMapContainer .class ) ; OptionalAssert < TypeInformation < ? > > org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringMapContainer> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Map .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getMapValueType ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringMapContainer> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Map .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getMapValueType ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Calendar .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper .class ) ; TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.AnotherConcreteWrapper > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.AnotherConcreteWrapper> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.AnotherConcreteWrapper .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteWrapper> . getProperty ( STRING ) . equals ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.AnotherConcreteWrapper> . getProperty ( STRING ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( byte [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter .class ) ; assertThat ( ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter .class ) ) . isSameAs ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.PropertyGetter> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.ClassWithWildCardBound > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ClassWithWildCardBound> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.ClassWithWildCardBound .class ) ; OptionalAssert < TypeInformation < ? > > org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ClassWithWildCardBound> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . map ( TypeInformation :: isCollectionLike ) . hasValue ( true ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getComponentType ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ClassWithWildCardBound> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . map ( TypeInformation :: isCollectionLike ) . hasValue ( true ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . flatMap ( TypeInformation :: getComponentType ) . hasValueSatisfying ( it -> { assertThat ( it . isCollectionLike ( ) ) . isEqualTo ( true ) ; assertThat ( it . getComponentType ( ) ) . hasValueSatisfying ( nested -> assertThat ( nested . getType ( ) ) . isEqualTo ( String .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType .class ) ; TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteType> . getSuperTypeInformation ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericType .class ) ; java.util.List<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeInformation<> . getTypeArguments ( ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( java.lang.String .class ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension .class ) ; TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension> . getSuperTypeInformation ( org.springframework.data.util.ClassTypeInformationUnitTests.Base .class ) ; java.util.List<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeInformation<> . getTypeArguments ( ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension .class . java.lang.reflect.Method ( STRING , org.springframework.data.util.ClassTypeInformationUnitTests.Base .class ) ; java.util.List<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension> . getParameterTypes ( java.lang.reflect.Method ) ; TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SecondExtension> . getReturnType ( java.lang.reflect.Method ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( NUMBER ) . getType ( ) ) . isEqualTo ( org.springframework.data.util.ClassTypeInformationUnitTests.Base .class ) ; assertThat ( java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( NUMBER ) ) . isEqualTo ( org.springframework.data.util.TypeInformation<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient> = from ( org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient .class . java.lang.reflect.Method ( STRING , org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface .class ) ; TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient> . getParameterTypes ( java.lang.reflect.Method ) . get ( NUMBER ) ; TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation> = from ( org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation .class ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation> ) ) . isTrue ( ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation> . getSuperTypeInformation ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface .class ) ) . isEqualTo ( org.springframework.data.util.TypeInformation<> ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.LongImplementation .class ) ) ) . isFalse ( ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation .class ) . getSuperTypeInformation ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface .class ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient> = from ( org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient .class . java.lang.reflect.Method ( STRING , org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface .class ) ; TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient> . getParameterTypes ( java.lang.reflect.Method ) . get ( NUMBER ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation .class ) ) ) . isFalse ( ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.LongImplementation .class ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation .class ) . getSuperTypeInformation ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface .class ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient> = from ( org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient .class ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient .class . java.lang.reflect.Method ( STRING , org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface .class ) ; TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.TypedClient> . getParameterTypes ( java.lang.reflect.Method ) . get ( NUMBER ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation .class ) ) ) . isFalse ( ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.LongImplementation .class ) ) ) . isTrue ( ) ; assertThat ( org.springframework.data.util.TypeInformation<> . isAssignableFrom ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.StringImplementation .class ) . getSuperTypeInformation ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface .class ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = from ( java.lang.String [] [] .class ) ; assertThat ( org.springframework.data.util.TypeInformation<> . getType ( ) ) . isEqualTo ( java.lang.String [] [] .class ) ; assertThat ( org.springframework.data.util.TypeInformation<> . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String [] .class ) ) ; assertThat ( org.springframework.data.util.TypeInformation<> . getActualType ( ) . getActualType ( ) . getType ( ) ) . isEqualTo ( java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.Product > org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Product> = from ( org.springframework.data.util.ClassTypeInformationUnitTests.Product .class ) ; assertThat ( org.springframework.data.util.TypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Product> . getProperty ( STRING ) ) . hasValue ( from ( java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { from ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.MyRawIterable .class ) . getComponentType ( ) ) . isNotPresent ( ) ; assertThat ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.MyIterable .class ) . getComponentType ( ) ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionalAssert < TypeInformation < ? > > org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.SuperGenerics .class ) . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( SortedMap .class ) ) . flatMap ( TypeInformation :: getMapValueType ) . hasValueSatisfying ( value -> { assertThat ( value . getType ( ) ) . isEqualTo ( SortedMap .class ) ; assertThat ( value . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String .class ) ) ; } ) . flatMap ( TypeInformation :: getMapValueType ) . hasValueSatisfying ( nestedValue -> { assertThat ( nestedValue . getType ( ) ) . isEqualTo ( List .class ) ; assertThat ( nestedValue . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Person .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( from ( org.springframework.data.util.ClassTypeInformationUnitTests.SpecialPerson .class ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassTypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteRoot > org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteRoot> = from ( org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteRoot .class ) ; assertThat ( org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteRoot> . getProperty ( STRING ) ) . map ( TypeInformation :: getActualType ) . flatMap ( it -> it . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( ConcreteSubSub .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.ConcreteRootIntermediate .class ) . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Leaf .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassTypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.Foo > org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Foo> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.Foo .class ) ; assertThat ( org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Foo> . getProperty ( STRING ) ) . map ( it -> it . specialize ( ClassTypeInformation . from ( Bar .class ) ) ) . hasValueSatisfying ( it -> { assertThat ( it . getType ( ) ) . isEqualTo ( Bar .class ) ; assertThat ( it . getProperty ( STRING ) ) . hasValueSatisfying ( nested -> assertThat ( nested . getType ( ) ) . isEqualTo ( Character .class ) ) ; assertThat ( it . getProperty ( STRING ) ) . hasValueSatisfying ( nested -> assertThat ( nested . getType ( ) ) . isEqualTo ( Integer .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassTypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.Foo > org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Foo> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.Foo .class ) ; ClassTypeInformation < ? > org.springframework.data.util.ClassTypeInformation<?> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.Bar .class ) ; assertThat ( org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Foo> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . specialize ( from ) ) . isEqualTo ( from ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassTypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.Foo > org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Foo> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.Foo .class ) ; OptionalAssert < TypeInformation < ? > > org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> = assertThat ( org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Foo> . getProperty ( STRING ) ) ; org.springframework.data.util.OptionalAssert<org.springframework.data.util.TypeInformation<?>> . map ( it -> Pair . of ( it . specialize ( ClassTypeInformation . from ( Bar .class ) ) , it . specialize ( ClassTypeInformation . from ( Bar .class ) ) ) ) . hasValueSatisfying ( pair -> { assertThat ( pair . getFirst ( ) ) . isEqualTo ( pair . getSecond ( ) ) ; assertThat ( pair . getSecond ( ) ) . isEqualTo ( pair . getFirst ( ) ) ; assertThat ( pair . getFirst ( ) . hashCode ( ) ) . isEqualTo ( pair . getSecond ( ) . hashCode ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassTypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.Concrete > org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Concrete> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.Concrete .class ) ; assertThat ( org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.Concrete> . getProperty ( STRING ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( Nested .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassTypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.SampleTraversable > org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SampleTraversable> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.SampleTraversable .class ) ; assertThat ( org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SampleTraversable> . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isAssignableFrom ( Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassTypeInformation < org.springframework.data.util.ClassTypeInformationUnitTests.SampleMap > org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SampleMap> = ClassTypeInformation . from ( org.springframework.data.util.ClassTypeInformationUnitTests.SampleMap .class ) ; assertThat ( org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SampleMap> . getComponentType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isAssignableFrom ( String .class ) ) ; assertThat ( org.springframework.data.util.ClassTypeInformation<org.springframework.data.util.ClassTypeInformationUnitTests.SampleMap> . getMapValueType ( ) ) . hasValueSatisfying ( it -> assertThat ( it . getType ( ) ) . isAssignableFrom ( Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.lang.Integer java.lang.Integer , java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.Integer , java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return java.lang.String . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.util.ClassTypeInformationUnitTests.Base<org.springframework.data.util.ClassTypeInformationUnitTests.GenericWrapper<T>> < org.springframework.data.util.ClassTypeInformationUnitTests.GenericWrapper<T> < T > > org.springframework.data.util.ClassTypeInformationUnitTests.Base<org.springframework.data.util.ClassTypeInformationUnitTests.GenericWrapper<T>> ( org.springframework.data.util.ClassTypeInformationUnitTests.Base<org.springframework.data.util.ClassTypeInformationUnitTests.GenericWrapper<T>> < org.springframework.data.util.ClassTypeInformationUnitTests.GenericWrapper<T> < T > > org.springframework.data.util.ClassTypeInformationUnitTests.Base<org.springframework.data.util.ClassTypeInformationUnitTests.GenericWrapper<T>> ) { return null ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface<java.lang.String> < java.lang.String > org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface<java.lang.String> );  <METHOD_END>
<METHOD_START> void void ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface<java.lang.Long> < java.lang.Long > org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface<java.lang.Long> );  <METHOD_END>
<METHOD_START> void void ( org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface<? extends java.lang.Number> < ? extends java.lang.Number > org.springframework.data.util.ClassTypeInformationUnitTests.GenericInterface<? extends java.lang.Number> );  <METHOD_END>
<METHOD_START> org.springframework.data.util.ClassTypeInformationUnitTests.Category org.springframework.data.util.ClassTypeInformationUnitTests.Category ( )  <METHOD_END>
<METHOD_START> java.lang.Long java.lang.Long ( )  <METHOD_END>
