<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.http.codec.ServerSentEventHttpMessageWriter . canWrite ( forClass ( java.lang.Object .class ) , null ) ) ; assertTrue ( this . org.springframework.http.codec.ServerSentEventHttpMessageWriter . canWrite ( null , MediaType . TEXT_EVENT_STREAM ) ) ; assertTrue ( this . org.springframework.http.codec.ServerSentEventHttpMessageWriter . canWrite ( forClass ( ServerSentEvent .class ) , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.http.codec.ServerSentEventHttpMessageWriter . canWrite ( forClass ( java.lang.Object .class ) , new MediaType ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ServerSentEvent < ? > org.springframework.http.codec.ServerSentEvent<?> = ServerSentEvent . builder ( ) . data ( STRING ) . id ( STRING ) . event ( STRING ) . comment ( STRING ) . retry ( java.time.Duration . java.time.Duration ( NUMBER ) ) . build ( ) ; Mono < ServerSentEvent > org.springframework.http.codec.Mono<org.springframework.http.codec.ServerSentEvent> = Mono . just ( org.springframework.http.codec.ServerSentEvent<> ) ; MockServerHttpResponse org.springframework.http.codec.MockServerHttpResponse = new MockServerHttpResponse ( ) ; void ( org.springframework.http.codec.Mono<org.springframework.http.codec.ServerSentEvent> , org.springframework.http.codec.MockServerHttpResponse , ServerSentEvent .class ) ; StepVerifier . create ( org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.String > org.springframework.http.codec.Flux<java.lang.String> = Flux . just ( STRING , STRING ) ; MockServerHttpResponse org.springframework.http.codec.MockServerHttpResponse = new MockServerHttpResponse ( ) ; void ( org.springframework.http.codec.Flux<java.lang.String> , org.springframework.http.codec.MockServerHttpResponse , java.lang.String .class ) ; StepVerifier . create ( org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.String > org.springframework.http.codec.Flux<java.lang.String> = Flux . just ( STRING , STRING ) ; MockServerHttpResponse org.springframework.http.codec.MockServerHttpResponse = new MockServerHttpResponse ( ) ; void ( org.springframework.http.codec.Flux<java.lang.String> , org.springframework.http.codec.MockServerHttpResponse , java.lang.String .class ) ; StepVerifier . create ( org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < Pojo > org.springframework.http.codec.Flux<org.springframework.http.codec.Pojo> = Flux . just ( new Pojo ( STRING , STRING ) , new Pojo ( STRING , STRING ) ) ; MockServerHttpResponse org.springframework.http.codec.MockServerHttpResponse = new MockServerHttpResponse ( ) ; void ( org.springframework.http.codec.Flux<org.springframework.http.codec.Pojo> , org.springframework.http.codec.MockServerHttpResponse , Pojo .class ) ; StepVerifier . create ( org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( STRING + STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ObjectMapper org.springframework.http.codec.ObjectMapper = Jackson2ObjectMapperBuilder . json ( ) . indentOutput ( true ) . build ( ) ; this . org.springframework.http.codec.ServerSentEventHttpMessageWriter = new ServerSentEventHttpMessageWriter ( new Jackson2JsonEncoder ( org.springframework.http.codec.ObjectMapper ) ) ; Flux < Pojo > org.springframework.http.codec.Flux<org.springframework.http.codec.Pojo> = Flux . just ( new Pojo ( STRING , STRING ) , new Pojo ( STRING , STRING ) ) ; MockServerHttpResponse org.springframework.http.codec.MockServerHttpResponse = new MockServerHttpResponse ( ) ; void ( org.springframework.http.codec.Flux<org.springframework.http.codec.Pojo> , org.springframework.http.codec.MockServerHttpResponse , Pojo .class ) ; StepVerifier . create ( org.springframework.http.codec.MockServerHttpResponse . getBodyAsString ( ) ) . expectNext ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private < T > void void ( Publisher < T > org.springframework.http.codec.Publisher<T> , MockServerHttpResponse org.springframework.http.codec.MockServerHttpResponse , java.lang.Class<T> < T > java.lang.Class<T> ) { this . org.springframework.http.codec.ServerSentEventHttpMessageWriter . write ( org.springframework.http.codec.Publisher<T> , forClass ( java.lang.Class<T> ) , MediaType . TEXT_EVENT_STREAM , org.springframework.http.codec.MockServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; }  <METHOD_END>
