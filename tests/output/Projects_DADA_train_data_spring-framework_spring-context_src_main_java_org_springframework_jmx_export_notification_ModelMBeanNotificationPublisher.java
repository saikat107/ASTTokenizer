<METHOD_START> public void ( javax.management.modelmbean.ModelMBeanNotificationBroadcaster javax.management.modelmbean.ModelMBeanNotificationBroadcaster , javax.management.ObjectName javax.management.ObjectName , java.lang.Object java.lang.Object ) { Assert . notNull ( javax.management.modelmbean.ModelMBeanNotificationBroadcaster , STRING ) ; Assert . notNull ( javax.management.ObjectName , STRING ) ; Assert . notNull ( java.lang.Object , STRING ) ; this . javax.management.modelmbean.ModelMBeanNotificationBroadcaster = javax.management.modelmbean.ModelMBeanNotificationBroadcaster ; this . javax.management.ObjectName = javax.management.ObjectName ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax.management.Notification javax.management.Notification ) { Assert . notNull ( javax.management.Notification , STRING ) ; void ( javax.management.Notification ) ; try { if ( javax.management.Notification instanceof javax.management.AttributeChangeNotification ) { this . javax.management.modelmbean.ModelMBeanNotificationBroadcaster . void ( ( javax.management.AttributeChangeNotification ) javax.management.Notification ) ; } else { this . javax.management.modelmbean.ModelMBeanNotificationBroadcaster . void ( javax.management.Notification ) ; } } catch ( javax.management.MBeanException javax.management.MBeanException ) { throw new UnableToSendNotificationException ( STRING + javax.management.Notification + STRING , javax.management.MBeanException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.management.Notification javax.management.Notification ) { if ( javax.management.Notification . java.lang.Object ( ) == null || javax.management.Notification . java.lang.Object ( ) . boolean ( this . java.lang.Object ) ) { javax.management.Notification . void ( this . javax.management.ObjectName ) ; } }  <METHOD_END>
