<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { void ( null ) ; return; } java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; java.util.Set<org.springframework.data.mongodb.config.ServerAddress> < ServerAddress > java.util.Set<org.springframework.data.mongodb.config.ServerAddress> = new java.util.HashSet<org.springframework.data.mongodb.config.ServerAddress> < ServerAddress > ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { ServerAddress org.springframework.data.mongodb.config.ServerAddress = org.springframework.data.mongodb.config.ServerAddress ( java.lang.String ) ; if ( org.springframework.data.mongodb.config.ServerAddress != null ) { java.util.Set<org.springframework.data.mongodb.config.ServerAddress> . add ( org.springframework.data.mongodb.config.ServerAddress ) ; } } if ( java.util.Set<org.springframework.data.mongodb.config.ServerAddress> . isEmpty ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } void ( java.util.Set<org.springframework.data.mongodb.config.ServerAddress> . toArray ( new ServerAddress [ java.util.Set<org.springframework.data.mongodb.config.ServerAddress> . size ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.config.ServerAddress org.springframework.data.mongodb.config.ServerAddress ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.config.Logger . warn ( java.lang.String , STRING , java.lang.String ) ; return null ; } java.lang.String [] java.lang.String[] = java.lang.String[] ( java.lang.String . java.lang.String ( ) ) ; if ( java.lang.String[] . int > NUMBER ) { org.springframework.data.mongodb.config.Logger . warn ( java.lang.String , STRING , java.lang.String ) ; return null ; } try { java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( java.lang.String[] [ NUMBER ] ) ; java.lang.Integer java.lang.Integer = java.lang.String[] . int == NUMBER ? null : java.lang.Integer . int ( java.lang.String[] [ NUMBER ] ) ; return java.lang.Integer == null ? new ServerAddress ( java.net.InetAddress ) : new ServerAddress ( java.net.InetAddress , java.lang.Integer ) ; } catch ( java.net.UnknownHostException java.net.UnknownHostException ) { org.springframework.data.mongodb.config.Logger . warn ( java.lang.String , STRING , java.lang.String[] [ NUMBER ] ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { org.springframework.data.mongodb.config.Logger . warn ( java.lang.String , STRING , java.lang.String[] [ NUMBER ] ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; if ( boolean ( java.lang.String ) ) { java.lang.String[] [ NUMBER ] = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) && java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
