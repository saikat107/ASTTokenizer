<METHOD_START> private static org.springframework.beans.factory.xml.ClassPathResource org.springframework.beans.factory.xml.ClassPathResource ( java.lang.String java.lang.String ) { return new ClassPathResource ( java.lang.String + java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; ITestBean org.springframework.beans.factory.xml.ITestBean = org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; ITestBean org.springframework.beans.factory.xml.ITestBean = org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean != org.springframework.beans.factory.xml.ITestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean != org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean . equals ( org.springframework.beans.factory.xml.ITestBean ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean . equals ( org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( new EncodedResource ( org.springframework.beans.factory.xml.ClassPathResource , STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; ITestBean org.springframework.beans.factory.xml.ITestBean = org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; ITestBean org.springframework.beans.factory.xml.ITestBean = org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean == org.springframework.beans.factory.xml.ITestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.ITestBean == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; java.io.InputStream java.io.InputStream = java.lang.Class<? extends org.springframework.beans.factory.xml.XmlBeanFactoryTests> ( ) . java.io.InputStream ( org.springframework.beans.factory.xml.ClassPathResource . getPath ( ) ) ; try { org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( new org.xml.sax.InputSource ( java.io.InputStream ) ) ; } finally { java.io.InputStream . void ( ) ; } org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getBeanName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean . getFriends ( ) ) ; java.lang.Object [] java.lang.Object[] = org.springframework.beans.factory.xml.TestBean . getFriends ( ) . toArray ( ) ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; DerivedTestBean org.springframework.beans.factory.xml.DerivedTestBean = ( DerivedTestBean ) java.lang.Object[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.beans.factory.xml.DerivedTestBean . getName ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . getBeanName ( ) . startsWith ( DerivedTestBean .class . java.lang.String ( ) ) ) ; assertFalse ( org.springframework.beans.factory.xml.DefaultListableBeanFactory . containsBean ( STRING ) ) ; assertNotNull ( org.springframework.beans.factory.xml.DerivedTestBean ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DerivedTestBean . getAge ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) java.lang.Object[] [ NUMBER ] ; assertEquals ( DummyFactory . SINGLETON_NAME , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) java.lang.Object[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getBeanName ( ) ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) . size ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) . get ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.TestBean . getSomeMap ( ) . get ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getBeanName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getBeanName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getBeanName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . wasDestroyed ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . wasDestroyed ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) == null ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . wasDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getBeanName ( ) . startsWith ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getAge ( ) ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean . getFriends ( ) ) ; java.lang.Object [] java.lang.Object[] = org.springframework.beans.factory.xml.TestBean . getFriends ( ) . toArray ( ) ; assertEquals ( NUMBER , java.lang.Object[] . int ) ; DerivedTestBean org.springframework.beans.factory.xml.DerivedTestBean = ( DerivedTestBean ) java.lang.Object[] [ NUMBER ] ; assertEquals ( STRING , org.springframework.beans.factory.xml.DerivedTestBean . getName ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . getBeanName ( ) . startsWith ( DerivedTestBean .class . java.lang.String ( ) ) ) ; assertNotNull ( org.springframework.beans.factory.xml.DerivedTestBean ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DerivedTestBean . getAge ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) java.lang.Object[] [ NUMBER ] ; assertEquals ( DummyFactory . SINGLETON_NAME , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) java.lang.Object[] [ NUMBER ] ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getBeanName ( ) . startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { org.springframework.beans.factory.xml.BeanCreationException . printStackTrace ( ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { org.springframework.beans.factory.xml.BeanCreationException . printStackTrace ( ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getType ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertEquals ( DerivedTestBean .class , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getType ( STRING ) ) ; DerivedTestBean org.springframework.beans.factory.xml.DerivedTestBean = ( DerivedTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . getAge ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . wasInitialized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertEquals ( DerivedTestBean .class , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getType ( STRING ) ) ; DerivedTestBean org.springframework.beans.factory.xml.DerivedTestBean = ( DerivedTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . getAge ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.DerivedTestBean . wasInitialized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getType ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; org.springframework.beans.factory.xml.TestBean . setAge ( NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; org.springframework.beans.factory.xml.TestBean . setAge ( NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertTrue ( org.springframework.beans.factory.xml.DefaultListableBeanFactory . isSingleton ( STRING ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( TestBean .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertTrue ( java.util.Map<,> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<,> . boolean ( STRING ) ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanIsAbstractException org.springframework.beans.factory.xml.BeanIsAbstractException ) { } assertTrue ( org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) instanceof TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( DummyBo .class , true , false ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( DummyBo .class , true , true ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( DummyBo .class , true , false ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( DummyBo .class ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( DummyBoImpl .class , true , true ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( DummyBoImpl .class , false , true ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( DummyBoImpl .class ) . size ( ) ) ; DummyBoImpl org.springframework.beans.factory.xml.DummyBoImpl = ( DummyBoImpl ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; DummyBoImpl org.springframework.beans.factory.xml.DummyBoImpl = ( DummyBoImpl ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( org.springframework.beans.factory.xml.DummyBoImpl , org.springframework.beans.factory.xml.DummyBoImpl ) ; assertTrue ( bos . dao == bop . dao ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean != org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , TestBean .class ) ; fail ( ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.xml.BeanDefinitionStoreException ) { assertTrue ( org.springframework.beans.factory.xml.BeanDefinitionStoreException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.BeanDefinitionStoreException . getCause ( ) instanceof NoSuchBeanDefinitionException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getAge ( ) == NUMBER ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; IndexedTestBean org.springframework.beans.factory.xml.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.xml.IndexedTestBean . getArray ( ) [ NUMBER ] . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . setAllowCircularReferences ( false ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . contains ( BeanCurrentlyInCreationException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . addBeanPostProcessor ( new org.springframework.beans.factory.xml.XmlBeanFactoryTests.WrappingPostProcessor ( ) ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . contains ( BeanCurrentlyInCreationException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . setAllowRawInjectionDespiteWrapping ( true ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_NONE ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . addBeanPostProcessor ( new org.springframework.beans.factory.xml.XmlBeanFactoryTests.WrappingPostProcessor ( ) ) ; ITestBean org.springframework.beans.factory.xml.ITestBean = ( ITestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; ITestBean org.springframework.beans.factory.xml.ITestBean = ( ITestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.beans.factory.xml.ITestBean ) ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.beans.factory.xml.ITestBean ) ) ; assertSame ( org.springframework.beans.factory.xml.ITestBean , org.springframework.beans.factory.xml.ITestBean . getSpouse ( ) ) ; assertNotSame ( org.springframework.beans.factory.xml.ITestBean , org.springframework.beans.factory.xml.ITestBean . getSpouse ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.ITestBean . getSpouse ( ) . getName ( ) ) ; assertSame ( org.springframework.beans.factory.xml.ITestBean , org.springframework.beans.factory.xml.ITestBean . getSpouse ( ) . getSpouse ( ) ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.beans.factory.xml.ITestBean . getSpouse ( ) ) ) ; assertTrue ( ! AopUtils . isAopProxy ( org.springframework.beans.factory.xml.ITestBean . getSpouse ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; DummyFactory org.springframework.beans.factory.xml.DummyFactory = ( DummyFactory ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean == org.springframework.beans.factory.xml.DummyFactory . getOtherTestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertThat ( org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) , instanceOf ( DummyFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getSingletonCount ( ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getSingletonCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertNotNull ( org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleInitializer org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleInitializer = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleInitializer ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleInitializer . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getResourceDescription ( ) . indexOf ( STRING ) != - NUMBER ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.BeanCreationException . getBeanName ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getCause ( ) instanceof java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( ) ; } catch ( FatalBeanException org.springframework.beans.factory.xml.FatalBeanException ) { assertTrue ( org.springframework.beans.factory.xml.FatalBeanException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.FatalBeanException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.FatalBeanException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean = false ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertFalse ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertFalse ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean && org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; assertTrue ( ! org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean && ! org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean && org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean && org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean = false ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertFalse ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertFalse ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean && ! org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; assertTrue ( ! org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean && ! org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean && ! org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean && ! org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean = false ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertFalse ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InitAndIB . boolean ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getCause ( ) instanceof java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = new TestBean ( STRING , NUMBER ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.xml.TestBean ) ; void ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; MutablePropertyValues org.springframework.beans.factory.xml.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.xml.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.xml.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.xml.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.xml.MutablePropertyValues ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.xml.RootBeanDefinition ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . setParentBeanFactory ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; void ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory ) throws java.lang.Exception { DependenciesBean org.springframework.beans.factory.xml.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) ) ; DependenciesBean org.springframework.beans.factory.xml.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) ) ; DependenciesBean org.springframework.beans.factory.xml.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) ) ; DependenciesBean org.springframework.beans.factory.xml.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; IndexedTestBean org.springframework.beans.factory.xml.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.IndexedTestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getOther ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.IndexedTestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getOther ( ) ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ConstructorDependenciesBean .class ) ; fail ( STRING ) ; } catch ( FatalBeanException org.springframework.beans.factory.xml.FatalBeanException ) { } DependenciesBean org.springframework.beans.factory.xml.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) ) ; BeanFactory org.springframework.beans.factory.xml.BeanFactory = ( BeanFactory ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.BeanFactory . containsBean ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.BeanFactory . containsBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; DependenciesBean org.springframework.beans.factory.xml.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) . getName ( ) . equals ( STRING ) ) ; DependenciesBean org.springframework.beans.factory.xml.DependenciesBean = ( DependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.DependenciesBean . getSpouse ( ) . getName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; assertEquals ( null , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getName ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; assertEquals ( null , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getName ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; IndexedTestBean org.springframework.beans.factory.xml.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.IndexedTestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getOther ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; assertEquals ( null , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getName ( ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ConstructorDependenciesBean .class ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.IndexedTestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getOther ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; assertEquals ( null , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; IndexedTestBean org.springframework.beans.factory.xml.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.IndexedTestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getOther ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getName ( ) ) ; DerivedConstructorDependenciesBean org.springframework.beans.factory.xml.DerivedConstructorDependenciesBean = ( DerivedConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( rod6 . initialized ) ; assertTrue ( ! rod6 . destroyed ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.DerivedConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.DerivedConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.IndexedTestBean , org.springframework.beans.factory.xml.DerivedConstructorDependenciesBean . getOther ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.DerivedConstructorDependenciesBean . getAge ( ) ) ; assertEquals ( null , org.springframework.beans.factory.xml.DerivedConstructorDependenciesBean . getName ( ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( rod6 . destroyed ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . toString ( ) . indexOf ( STRING ) != - NUMBER ) ; org.springframework.beans.factory.xml.BeanCreationException . printStackTrace ( ) ; assertNull ( org.springframework.beans.factory.xml.BeanCreationException . getRelatedCauses ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getName ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( null , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getName ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertNull ( org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; ConstructorDependenciesBean org.springframework.beans.factory.xml.ConstructorDependenciesBean = ( ConstructorDependenciesBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse1 ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getSpouse2 ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.ConstructorDependenciesBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; SimpleConstructorArgBean org.springframework.beans.factory.xml.SimpleConstructorArgBean = ( SimpleConstructorArgBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.SimpleConstructorArgBean . getAge ( ) ) ; SimpleConstructorArgBean org.springframework.beans.factory.xml.SimpleConstructorArgBean = ( SimpleConstructorArgBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.SimpleConstructorArgBean . getAge ( ) ) ; SimpleConstructorArgBean org.springframework.beans.factory.xml.SimpleConstructorArgBean = ( SimpleConstructorArgBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.SimpleConstructorArgBean . getName ( ) ) ; SimpleConstructorArgBean org.springframework.beans.factory.xml.SimpleConstructorArgBean = ( SimpleConstructorArgBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.SimpleConstructorArgBean . getAge ( ) ) ; SimpleConstructorArgBean org.springframework.beans.factory.xml.SimpleConstructorArgBean = ( SimpleConstructorArgBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.SimpleConstructorArgBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; java.io.File java.io.File = ( java.io.File ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.io.File . java.lang.String + STRING , java.io.File . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ConstructorDependenciesBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = UnsatisfiedDependencyException .class ) public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ConstructorDependenciesBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.beans.factory.xml.ClassPathResource , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassPathResource org.springframework.beans.factory.xml.ClassPathResource , int int ) { org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 . boolean = false ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 . boolean = false ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 . boolean = false ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 . boolean = false ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.DependingBean . int = NUMBER ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.HoldingBean . int = NUMBER ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 . boolean ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 . boolean ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 . boolean ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 . boolean ) ; assertEquals ( int , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DependingBean . int ) ; if ( ! org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeansOfType ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.HoldingBean .class , false , false ) . isEmpty ( ) ) { assertEquals ( int , org.springframework.beans.factory.xml.XmlBeanFactoryTests.HoldingBean . int ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( CannotLoadBeanClassException org.springframework.beans.factory.xml.CannotLoadBeanClassException ) { assertTrue ( org.springframework.beans.factory.xml.CannotLoadBeanClassException . getResourceDescription ( ) . indexOf ( STRING ) != - NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.CannotLoadBeanClassException . getCause ( ) instanceof java.lang.ClassNotFoundException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . setBeanClassLoader ( null ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeanDefinition ( STRING ) . getBeanClassName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; ResourceTestBean org.springframework.beans.factory.xml.ResourceTestBean = ( ResourceTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; ResourceTestBean org.springframework.beans.factory.xml.ResourceTestBean = ( ResourceTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.ResourceTestBean . getResource ( ) instanceof ClassPathResource ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; FileCopyUtils . copy ( new java.io.InputStreamReader ( org.springframework.beans.factory.xml.ResourceTestBean . getResource ( ) . getInputStream ( ) ) , java.io.StringWriter ) ; assertEquals ( STRING , java.io.StringWriter . java.lang.String ( ) ) ; java.io.StringWriter = new java.io.StringWriter ( ) ; FileCopyUtils . copy ( new java.io.InputStreamReader ( org.springframework.beans.factory.xml.ResourceTestBean . getInputStream ( ) ) , java.io.StringWriter ) ; assertEquals ( STRING , java.io.StringWriter . java.lang.String ( ) ) ; java.io.StringWriter = new java.io.StringWriter ( ) ; FileCopyUtils . copy ( new java.io.InputStreamReader ( org.springframework.beans.factory.xml.ResourceTestBean . getResource ( ) . getInputStream ( ) ) , java.io.StringWriter ) ; assertEquals ( STRING , java.io.StringWriter . java.lang.String ( ) ) ; java.io.StringWriter = new java.io.StringWriter ( ) ; FileCopyUtils . copy ( new java.io.InputStreamReader ( org.springframework.beans.factory.xml.ResourceTestBean . getInputStream ( ) ) , java.io.StringWriter ) ; assertEquals ( STRING , java.io.StringWriter . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ResourceTestBean .class ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ResourceTestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.net.URL java.net.URL = java.lang.Class<? extends org.springframework.beans.factory.xml.XmlBeanFactoryTests> ( ) . java.net.URL ( org.springframework.beans.factory.xml.ClassPathResource . getPath ( ) ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( new UrlResource ( java.net.URL ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ResourceTestBean .class ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ResourceTestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { java.lang.String java.lang.String = java.lang.Class<? extends org.springframework.beans.factory.xml.XmlBeanFactoryTests> ( ) . java.net.URL ( org.springframework.beans.factory.xml.ClassPathResource . getPath ( ) ) . toURI ( ) . getPath ( ) ; DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( new FileSystemResource ( java.lang.String ) ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ResourceTestBean .class ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING , ResourceTestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionStoreException .class ) public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > java.lang.Class<?> = null ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; final java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) . getClass ( ) ; assertTrue ( STRING + java.lang.Class<> + STRING , ClassUtils . isCglibProxyClass ( java.lang.Class<> ) ) ; if ( java.lang.Class<> == null ) { java.lang.Class<?> = java.lang.Class<> ; } else { assertEquals ( java.lang.Class<> , java.lang.Class<> ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; void ( org.springframework.beans.factory.xml.DefaultListableBeanFactory , STRING , true ) ; void ( org.springframework.beans.factory.xml.DefaultListableBeanFactory , STRING , true ) ; int int = NUMBER ; StopWatch org.springframework.beans.factory.xml.StopWatch = new StopWatch ( ) ; org.springframework.beans.factory.xml.StopWatch . start ( STRING + int + STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { void ( org.springframework.beans.factory.xml.DefaultListableBeanFactory , STRING , false ) ; } org.springframework.beans.factory.xml.StopWatch . stop ( ) ; if ( ! LogFactory . getLog ( DefaultListableBeanFactory .class ) . isDebugEnabled ( ) ) { assertTrue ( org.springframework.beans.factory.xml.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; } OverrideOneMethod org.springframework.beans.factory.xml.OverrideOneMethod = ( OverrideOneMethod ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . getPrototypeDependency ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . protectedOverrideSingleton ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanFactory org.springframework.beans.factory.xml.BeanFactory , java.lang.String java.lang.String , boolean boolean ) { OverrideOneMethod org.springframework.beans.factory.xml.OverrideOneMethod = ( OverrideOneMethod ) org.springframework.beans.factory.xml.BeanFactory . getBean ( java.lang.String ) ; if ( boolean ) { assertSame ( org.springframework.beans.factory.xml.OverrideOneMethod , org.springframework.beans.factory.xml.BeanFactory . getBean ( java.lang.String ) ) ; } else { assertNotSame ( org.springframework.beans.factory.xml.OverrideOneMethod , org.springframework.beans.factory.xml.BeanFactory . getBean ( java.lang.String ) ) ; } TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . getPrototypeDependency ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . getPrototypeDependency ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertNotSame ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.TestBean ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . invokesOverriddenMethodOnSelf ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertNotSame ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.TestBean ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . protectedOverrideSingleton ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . protectedOverrideSingleton ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertSame ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; OverrideOneMethod org.springframework.beans.factory.xml.OverrideOneMethod = ( OverrideOneMethod ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . getPrototypeDependency ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . getPrototypeDependency ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertNotSame ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.TestBean ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . getPrototypeDependency ( STRING ) ; assertTrue ( ! STRING . boolean ( org.springframework.beans.factory.xml.TestBean . getName ( ) ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . protectedOverrideSingleton ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = org.springframework.beans.factory.xml.OverrideOneMethod . protectedOverrideSingleton ( ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getName ( ) ) ; assertSame ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.TestBean ) ; java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , org.springframework.beans.factory.xml.OverrideOneMethod . echo ( java.lang.String ) ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = new java.lang.StringBuffer ( java.lang.String ) . java.lang.StringBuffer ( ) . java.lang.String ( ) ; assertEquals ( STRING , java.lang.String , org.springframework.beans.factory.xml.OverrideOneMethod . replaceMe ( java.lang.String ) ) ; assertEquals ( STRING , FixedMethodReplacer . VALUE , org.springframework.beans.factory.xml.OverrideOneMethod . replaceMe ( ) ) ; OverrideOneMethodSubclass org.springframework.beans.factory.xml.OverrideOneMethodSubclass = ( OverrideOneMethodSubclass ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoSomethingReplacer org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoSomethingReplacer = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoSomethingReplacer ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( null , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoSomethingReplacer . java.lang.Object ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.beans.factory.xml.OverrideOneMethodSubclass . doSomething ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoSomethingReplacer . java.lang.Object ) ; org.springframework.beans.factory.xml.OverrideOneMethodSubclass . doSomething ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoSomethingReplacer . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; ConstructorInjectedOverrides org.springframework.beans.factory.xml.ConstructorInjectedOverrides = ( ConstructorInjectedOverrides ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.xml.ConstructorInjectedOverrides . getSetterString ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorInjectedOverrides . getTestBean ( ) ) ; assertSame ( org.springframework.beans.factory.xml.TestBean , org.springframework.beans.factory.xml.ConstructorInjectedOverrides . getTestBean ( ) ) ; FactoryMethods org.springframework.beans.factory.xml.FactoryMethods = org.springframework.beans.factory.xml.ConstructorInjectedOverrides . createFactoryMethods ( ) ; FactoryMethods org.springframework.beans.factory.xml.FactoryMethods = org.springframework.beans.factory.xml.ConstructorInjectedOverrides . createFactoryMethods ( ) ; assertNotSame ( STRING , org.springframework.beans.factory.xml.FactoryMethods , org.springframework.beans.factory.xml.FactoryMethods ) ; assertSame ( STRING , org.springframework.beans.factory.xml.FactoryMethods . getTestBean ( ) , org.springframework.beans.factory.xml.FactoryMethods . getTestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; try { org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.xml.BeanDefinitionStoreException ) { assertTrue ( STRING , org.springframework.beans.factory.xml.BeanDefinitionStoreException . getMessage ( ) . indexOf ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; SerializableMethodReplacerCandidate org.springframework.beans.factory.xml.SerializableMethodReplacerCandidate = ( SerializableMethodReplacerCandidate ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = new java.lang.StringBuffer ( java.lang.String ) . java.lang.StringBuffer ( ) . java.lang.String ( ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.xml.SerializableMethodReplacerCandidate . replaceMe ( java.lang.String ) ) ; assertFalse ( STRING , SerializationTestUtils . isSerializable ( org.springframework.beans.factory.xml.SerializableMethodReplacerCandidate ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.TestBean . getFriends ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getFriends ( ) . iterator ( ) . next ( ) instanceof TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; SingleSimpleTypeConstructorBean org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean = ( SingleSimpleTypeConstructorBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean . isSingleBoolean ( ) ) ; SingleSimpleTypeConstructorBean org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean = ( SingleSimpleTypeConstructorBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean . isSingleBoolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; SingleSimpleTypeConstructorBean org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean = ( SingleSimpleTypeConstructorBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean . isSecondBoolean ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean . getTestString ( ) ) ; SingleSimpleTypeConstructorBean org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean = ( SingleSimpleTypeConstructorBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean . isSecondBoolean ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.SingleSimpleTypeConstructorBean . getTestString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean . java.lang.Boolean ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean . java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean . java.lang.Boolean ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean . java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean . org.springframework.beans.factory.xml.ITestBean instanceof DerivedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean . org.springframework.beans.factory.xml.ITestBean instanceof DerivedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; AbstractBeanDefinition org.springframework.beans.factory.xml.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.beans.factory.xml.AbstractBeanDefinition . setLenientConstructorResolution ( false ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { org.springframework.beans.factory.xml.BeanCreationException . printStackTrace ( ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getMostSpecificCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; AbstractBeanDefinition org.springframework.beans.factory.xml.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.beans.factory.xml.AbstractBeanDefinition . setLenientConstructorResolution ( false ) ; try { org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { org.springframework.beans.factory.xml.BeanCreationException . printStackTrace ( ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getMostSpecificCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; AbstractBeanDefinition org.springframework.beans.factory.xml.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.beans.factory.xml.AbstractBeanDefinition . setLenientConstructorResolution ( false ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; AbstractBeanDefinition org.springframework.beans.factory.xml.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.beans.factory.xml.AbstractBeanDefinition . setLenientConstructorResolution ( false ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.StringConstructorTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.StringConstructorTestBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.StringConstructorTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.XmlBeanFactoryTests.StringConstructorTestBean . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object instanceof int [] ) ; assertEquals ( NUMBER , ( ( int [] ) org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object ) . int ) ; assertEquals ( NUMBER , ( ( int [] ) org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object instanceof int [] ) ; assertEquals ( NUMBER , ( ( int [] ) org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object ) . int ) ; assertEquals ( NUMBER , ( ( int [] ) org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object instanceof java.lang.String [] ) ; assertEquals ( NUMBER , ( ( java.lang.String [] ) org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object ) . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; AbstractBeanDefinition org.springframework.beans.factory.xml.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; org.springframework.beans.factory.xml.AbstractBeanDefinition . setLenientConstructorResolution ( false ) ; org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean = ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object instanceof java.lang.String [] ) ; assertEquals ( NUMBER , ( ( java.lang.String [] ) org.springframework.beans.factory.xml.XmlBeanFactoryTests.ConstructorArrayTestBean . java.lang.Object ) . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = ( java.util.concurrent.atomic.AtomicInteger ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; java.util.concurrent.atomic.AtomicInteger = ( java.util.concurrent.atomic.AtomicInteger ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; try { new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.beans.factory.xml.BeansException ) { assertTrue ( org.springframework.beans.factory.xml.BeansException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; try { new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.beans.factory.xml.BeansException ) { assertTrue ( org.springframework.beans.factory.xml.BeansException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; OverrideOneMethod org.springframework.beans.factory.xml.OverrideOneMethod = ( OverrideOneMethod ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.xml.OverrideOneMethod . replaceMe ( NUMBER ) ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.xml.OverrideOneMethod . replaceMe ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.xml.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.beans.factory.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.beans.factory.xml.DefaultListableBeanFactory ) ; org.springframework.beans.factory.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.beans.factory.xml.ClassPathResource ) ; OverrideOneMethod org.springframework.beans.factory.xml.OverrideOneMethod = ( OverrideOneMethod ) org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.xml.OverrideOneMethod . replaceMe ( NUMBER ) ) ; assertEquals ( STRING , STRING , org.springframework.beans.factory.xml.OverrideOneMethod . replaceMe ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { assertEquals ( NUMBER , java.lang.Object[] . int ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; java.lang.Object = java.lang.Object[] [ NUMBER ] ; return null ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { throw new java.io.IOException ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { int = int ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . int *= NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { fail ( ) ; } if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { if ( ! this . boolean ) { fail ( ) ; } if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { fail ( ) ; } if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( ! this . boolean ) { fail ( ) ; } if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 , org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 ) {		}  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 ) {		}  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 ) {		}  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.InTheMiddleBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.InTheMiddleBean ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 . boolean && org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 . boolean ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 . boolean || org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } boolean = true ; int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean1 ) {		}  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 org.springframework.beans.factory.xml.XmlBeanFactoryTests.PreparingBean2 ) {		}  <METHOD_END>
<METHOD_START> public void void ( org.springframework.beans.factory.xml.XmlBeanFactoryTests.DependingBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.DependingBean ) { this . org.springframework.beans.factory.xml.XmlBeanFactoryTests.DependingBean = org.springframework.beans.factory.xml.XmlBeanFactoryTests.DependingBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.beans.factory.xml.XmlBeanFactoryTests.DependingBean . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; int ++ ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Boolean java.lang.Boolean , java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean ( java.lang.Boolean java.lang.Boolean , java.lang.Boolean java.lang.Boolean ) { return new org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean ( java.lang.Boolean , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return new org.springframework.beans.factory.xml.XmlBeanFactoryTests.DoubleBooleanConstructorBean ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.beans.factory.xml.ITestBean ) { this . org.springframework.beans.factory.xml.ITestBean = org.springframework.beans.factory.xml.ITestBean ; }  <METHOD_END>
<METHOD_START> public void ( TestBean org.springframework.beans.factory.xml.TestBean ) { this . org.springframework.beans.factory.xml.ITestBean = org.springframework.beans.factory.xml.TestBean ; }  <METHOD_END>
<METHOD_START> public void ( DerivedTestBean org.springframework.beans.factory.xml.DerivedTestBean ) { this . org.springframework.beans.factory.xml.ITestBean = org.springframework.beans.factory.xml.DerivedTestBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( java.util.Map [] java.util.Map[] ) { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean ( ITestBean org.springframework.beans.factory.xml.ITestBean ) { return new org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean ( org.springframework.beans.factory.xml.ITestBean ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean ( TestBean org.springframework.beans.factory.xml.TestBean ) { return new org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean ( org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean ( DerivedTestBean org.springframework.beans.factory.xml.DerivedTestBean ) { return new org.springframework.beans.factory.xml.XmlBeanFactoryTests.LenientDependencyTestBean ( org.springframework.beans.factory.xml.DerivedTestBean ) ; }  <METHOD_END>
<METHOD_START> public void ( int [] int[] ) { this . java.lang.Object = int[] ; }  <METHOD_END>
<METHOD_START> public void ( float [] float[] ) { this . java.lang.Object = float[] ; }  <METHOD_END>
<METHOD_START> public void ( short [] short[] ) { this . java.lang.Object = short[] ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String [] java.lang.String[] ) { this . java.lang.Object = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.xml.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.xml.BeansException { ProxyFactory org.springframework.beans.factory.xml.ProxyFactory = new ProxyFactory ( java.lang.Object ) ; return org.springframework.beans.factory.xml.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
