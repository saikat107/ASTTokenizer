<METHOD_START> public void ( ApplicationContext org.springframework.boot.autoconfigure.data.mongo.ApplicationContext , MongoProperties org.springframework.boot.autoconfigure.data.mongo.MongoProperties ) { this . org.springframework.boot.autoconfigure.data.mongo.ApplicationContext = org.springframework.boot.autoconfigure.data.mongo.ApplicationContext ; this . org.springframework.boot.autoconfigure.data.mongo.MongoProperties = org.springframework.boot.autoconfigure.data.mongo.MongoProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( MongoDbFactory .class ) public org.springframework.boot.autoconfigure.data.mongo.SimpleMongoDbFactory org.springframework.boot.autoconfigure.data.mongo.SimpleMongoDbFactory ( MongoClient org.springframework.boot.autoconfigure.data.mongo.MongoClient ) throws java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.data.mongo.MongoProperties . getMongoClientDatabase ( ) ; return new SimpleMongoDbFactory ( org.springframework.boot.autoconfigure.data.mongo.MongoClient , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.data.mongo.MongoTemplate org.springframework.boot.autoconfigure.data.mongo.MongoTemplate ( MongoDbFactory org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory , MongoConverter org.springframework.boot.autoconfigure.data.mongo.MongoConverter ) throws java.net.UnknownHostException { return new MongoTemplate ( org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory , org.springframework.boot.autoconfigure.data.mongo.MongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( MongoConverter .class ) public org.springframework.boot.autoconfigure.data.mongo.MappingMongoConverter org.springframework.boot.autoconfigure.data.mongo.MappingMongoConverter ( MongoDbFactory org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory , MongoMappingContext org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext , BeanFactory org.springframework.boot.autoconfigure.data.mongo.BeanFactory , CustomConversions org.springframework.boot.autoconfigure.data.mongo.CustomConversions ) { DbRefResolver org.springframework.boot.autoconfigure.data.mongo.DbRefResolver = new DefaultDbRefResolver ( org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory ) ; MappingMongoConverter org.springframework.boot.autoconfigure.data.mongo.MappingMongoConverter = new MappingMongoConverter ( org.springframework.boot.autoconfigure.data.mongo.DbRefResolver , org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext ) ; org.springframework.boot.autoconfigure.data.mongo.MappingMongoConverter . setCustomConversions ( org.springframework.boot.autoconfigure.data.mongo.CustomConversions ) ; return org.springframework.boot.autoconfigure.data.mongo.MappingMongoConverter ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext ( BeanFactory org.springframework.boot.autoconfigure.data.mongo.BeanFactory , CustomConversions org.springframework.boot.autoconfigure.data.mongo.CustomConversions ) throws java.lang.ClassNotFoundException { MongoMappingContext org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext . setInitialEntitySet ( new EntityScanner ( this . org.springframework.boot.autoconfigure.data.mongo.ApplicationContext ) . scan ( Document .class , Persistent .class ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = this . org.springframework.boot.autoconfigure.data.mongo.MongoProperties . getFieldNamingStrategy ( ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext . setFieldNamingStrategy ( ( FieldNamingStrategy ) BeanUtils . instantiateClass ( java.lang.Class<> ) ) ; } org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext . setSimpleTypeHolder ( org.springframework.boot.autoconfigure.data.mongo.CustomConversions . getSimpleTypeHolder ( ) ) ; return org.springframework.boot.autoconfigure.data.mongo.MongoMappingContext ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.data.mongo.GridFsTemplate org.springframework.boot.autoconfigure.data.mongo.GridFsTemplate ( MongoDbFactory org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory , MongoTemplate org.springframework.boot.autoconfigure.data.mongo.MongoTemplate ) { return new GridFsTemplate ( new org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration.GridFsMongoDbFactory ( org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory , this . org.springframework.boot.autoconfigure.data.mongo.MongoProperties ) , org.springframework.boot.autoconfigure.data.mongo.MongoTemplate . getConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.data.mongo.CustomConversions org.springframework.boot.autoconfigure.data.mongo.CustomConversions ( ) { return new CustomConversions ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( MongoDbFactory org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory , MongoProperties org.springframework.boot.autoconfigure.data.mongo.MongoProperties ) { Assert . notNull ( org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.data.mongo.MongoProperties , STRING ) ; this . org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory = org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory ; this . org.springframework.boot.autoconfigure.data.mongo.MongoProperties = org.springframework.boot.autoconfigure.data.mongo.MongoProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.data.mongo.MongoDatabase org.springframework.boot.autoconfigure.data.mongo.MongoDatabase ( ) org.springframework.boot.autoconfigure.data.mongo.DataAccessException { java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.data.mongo.MongoProperties . getGridFsDatabase ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return this . org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory . getDb ( java.lang.String ) ; } return this . org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory . getDb ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.data.mongo.MongoDatabase org.springframework.boot.autoconfigure.data.mongo.MongoDatabase ( java.lang.String java.lang.String ) throws org.springframework.boot.autoconfigure.data.mongo.DataAccessException { return this . org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory . getDb ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.data.mongo.PersistenceExceptionTranslator org.springframework.boot.autoconfigure.data.mongo.PersistenceExceptionTranslator ( ) { return this . org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory . getExceptionTranslator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.data.mongo.DB org.springframework.boot.autoconfigure.data.mongo.DB ( ) { return this . org.springframework.boot.autoconfigure.data.mongo.MongoDbFactory . getLegacyDb ( ) ; }  <METHOD_END>
