<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.target.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.target.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.target.Resource ) ; org.springframework.aop.target.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; ITestBean org.springframework.aop.target.ITestBean = ( ITestBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.aop.target.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.aop.target.ITestBean . getAge ( ) ) ; assertTrue ( org.springframework.aop.target.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.target.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.target.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.target.Resource ) ; org.springframework.aop.target.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; ITestBean org.springframework.aop.target.ITestBean = ( ITestBean ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.aop.target.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertEquals ( STRING , org.springframework.aop.target.ITestBean . getName ( ) ) ; assertTrue ( org.springframework.aop.target.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.target.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.target.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.target.Resource ) ; org.springframework.aop.target.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; java.util.Set<?> < ? > java.util.Set<?> = ( java.util.Set<?> < ? > ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.aop.target.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; assertTrue ( org.springframework.aop.target.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; java.util.Set<?> < ? > java.util.Set<?> = ( java.util.Set<?> < ? > ) org.springframework.aop.target.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.aop.target.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; assertTrue ( org.springframework.aop.target.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { ( ( ITestBean ) java.lang.Object ) . setName ( STRING ) ; }  <METHOD_END>
