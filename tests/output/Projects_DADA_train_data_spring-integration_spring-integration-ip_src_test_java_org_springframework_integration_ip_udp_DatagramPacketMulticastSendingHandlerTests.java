<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.MulticastSocket java.net.MulticastSocket ; try { java.net.MulticastSocket = new java.net.MulticastSocket ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return; } final int int = java.net.MulticastSocket . int ( ) ; final java.lang.String java.lang.String = this . org.springframework.integration.ip.udp.MulticastRule . getGroup ( ) ; final java.lang.String java.lang.String = STRING ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Runnable java.lang.Runnable = ( ) { try { byte [] byte[] = new byte [ NUMBER ] ; java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( byte[] , byte[] . int ) ; java.net.MulticastSocket java.net.MulticastSocket = new java.net.MulticastSocket ( int ) ; java.net.MulticastSocket . void ( java.net.InetAddress . java.net.InetAddress ( org.springframework.integration.ip.udp.MulticastRule . getNic ( ) ) ) ; java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( java.lang.String ) ; java.net.MulticastSocket . void ( java.net.InetAddress ) ; java.util.concurrent.CountDownLatch . void ( ) ; LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.ip.udp.DatagramPacketMulticastSendingHandlerTests> ( ) ) . debug ( java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) + STRING ) ; java.net.MulticastSocket . void ( java.net.DatagramPacket ) ; java.net.MulticastSocket . void ( ) ; byte [] byte[] = java.net.DatagramPacket . byte[] ( ) ; int int = java.net.DatagramPacket . int ( ) ; int int = java.net.DatagramPacket . int ( ) ; byte [] byte[] = new byte [ int ] ; java.lang.System . void ( byte[] , int , byte[] , NUMBER , int ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] ) ) ; LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.ip.udp.DatagramPacketMulticastSendingHandlerTests> ( ) ) . debug ( java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) + STRING ) ; java.util.concurrent.CountDownLatch . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.util.concurrent.CountDownLatch . void ( ) ; java.lang.Exception . void ( ) ; } } ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; java.util.concurrent.Executor . void ( java.lang.Runnable ) ; java.util.concurrent.Executor . void ( java.lang.Runnable ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; MulticastSendingMessageHandler org.springframework.integration.ip.udp.MulticastSendingMessageHandler = new MulticastSendingMessageHandler ( java.lang.String , int ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . setLocalAddress ( this . org.springframework.integration.ip.udp.MulticastRule . getNic ( ) ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . handleMessage ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . stop ( ) ; java.net.MulticastSocket . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.MulticastSocket java.net.MulticastSocket ; try { java.net.MulticastSocket = new java.net.MulticastSocket ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return; } final int int = java.net.MulticastSocket . int ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Runnable java.lang.Runnable = ( ) { try { byte [] byte[] = new byte [ NUMBER ] ; java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( byte[] , byte[] . int ) ; java.net.MulticastSocket java.net.MulticastSocket = new java.net.MulticastSocket ( int ) ; java.net.MulticastSocket . void ( java.net.InetAddress . java.net.InetAddress ( org.springframework.integration.ip.udp.MulticastRule . getNic ( ) ) ) ; java.net.MulticastSocket . void ( NUMBER ) ; java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( java.lang.String ) ; java.net.MulticastSocket . void ( java.net.InetAddress ) ; java.util.concurrent.CountDownLatch . void ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.ip.udp.DatagramPacketMulticastSendingHandlerTests> ( ) ) . debug ( java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) + STRING ) ; java.net.MulticastSocket . void ( java.net.DatagramPacket ) ; java.net.MulticastSocket . void ( ) ; byte [] byte[] = java.net.DatagramPacket . byte[] ( ) ; int int = java.net.DatagramPacket . int ( ) ; int int = java.net.DatagramPacket . int ( ) ; byte [] byte[] = new byte [ NUMBER ] ; java.lang.System . void ( byte[] , int + int - NUMBER , byte[] , NUMBER , NUMBER ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] ) ) ; LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.ip.udp.DatagramPacketMulticastSendingHandlerTests> ( ) ) . debug ( java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) + STRING ) ; DatagramPacketMessageMapper org.springframework.integration.ip.udp.DatagramPacketMessageMapper = new DatagramPacketMessageMapper ( ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setAcknowledge ( true ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setLengthCheck ( true ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . toMessage ( java.net.DatagramPacket ) ; java.lang.Object java.lang.Object = org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . get ( IpHeaders . ACK_ID ) ; byte [] byte[] = java.lang.Object . java.lang.String ( ) . byte[] ( ) ; java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( byte[] , byte[] . int , new java.net.InetSocketAddress ( org.springframework.integration.ip.udp.MulticastRule . getNic ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; LogFactory . getLog ( java.lang.Class<? extends org.springframework.integration.ip.udp.DatagramPacketMulticastSendingHandlerTests> ( ) ) . debug ( java.lang.Thread . java.lang.Thread ( ) . java.lang.String ( ) + STRING + java.net.DatagramPacket . java.net.SocketAddress ( ) ) ; java.net.DatagramSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.net.MulticastSocket . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.util.concurrent.CountDownLatch . void ( ) ; java.lang.Exception . void ( ) ; } } ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) ; java.util.concurrent.Executor . void ( java.lang.Runnable ) ; java.util.concurrent.Executor . void ( java.lang.Runnable ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; MulticastSendingMessageHandler org.springframework.integration.ip.udp.MulticastSendingMessageHandler = new MulticastSendingMessageHandler ( java.lang.String , int , true , true , STRING , NUMBER , NUMBER ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . setLocalAddress ( this . org.springframework.integration.ip.udp.MulticastRule . getNic ( ) ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . setMinAcksForSuccess ( NUMBER ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . start ( ) ; void ( org.springframework.integration.ip.udp.MulticastSendingMessageHandler ) ; java.util.concurrent.atomic.AtomicInteger . void ( org.springframework.integration.ip.udp.MulticastSendingMessageHandler . getAckPort ( ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . handleMessage ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.ip.udp.MulticastSendingMessageHandler . stop ( ) ; java.net.MulticastSocket . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( UnicastSendingMessageHandler org.springframework.integration.ip.udp.UnicastSendingMessageHandler ) throws java.lang.InterruptedException { int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.ip.udp.UnicastSendingMessageHandler . getAckPort ( ) == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( int < NUMBER ) ; }  <METHOD_END>
