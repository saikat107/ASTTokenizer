<METHOD_START> public void void ( EvaluationContext org.springframework.integration.transaction.EvaluationContext ) { this . org.springframework.integration.transaction.EvaluationContext = org.springframework.integration.transaction.EvaluationContext ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.transaction.MessageChannel ) { Assert . notNull ( org.springframework.integration.transaction.MessageChannel , STRING ) ; this . org.springframework.integration.transaction.MessageChannel = org.springframework.integration.transaction.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.transaction.MessageChannel ) { Assert . notNull ( org.springframework.integration.transaction.MessageChannel , STRING ) ; this . org.springframework.integration.transaction.MessageChannel = org.springframework.integration.transaction.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.transaction.MessageChannel ) { Assert . notNull ( org.springframework.integration.transaction.MessageChannel , STRING ) ; this . org.springframework.integration.transaction.MessageChannel = org.springframework.integration.transaction.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.transaction.Expression ) { Assert . notNull ( org.springframework.integration.transaction.Expression , STRING ) ; this . org.springframework.integration.transaction.Expression = org.springframework.integration.transaction.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.transaction.Expression ) { Assert . notNull ( org.springframework.integration.transaction.Expression , STRING ) ; this . org.springframework.integration.transaction.Expression = org.springframework.integration.transaction.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.transaction.Expression ) { Assert . notNull ( org.springframework.integration.transaction.Expression , STRING ) ; this . org.springframework.integration.transaction.Expression = org.springframework.integration.transaction.Expression ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . org.springframework.integration.transaction.EvaluationContext == null ) { this . org.springframework.integration.transaction.EvaluationContext = org.springframework.integration.transaction.StandardEvaluationContext ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( IntegrationResourceHolder org.springframework.integration.transaction.IntegrationResourceHolder ) { this . void ( org.springframework.integration.transaction.IntegrationResourceHolder , this . org.springframework.integration.transaction.Expression , this . org.springframework.integration.transaction.MessageChannel , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( IntegrationResourceHolder org.springframework.integration.transaction.IntegrationResourceHolder ) { this . void ( org.springframework.integration.transaction.IntegrationResourceHolder , this . org.springframework.integration.transaction.Expression , this . org.springframework.integration.transaction.MessageChannel , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( IntegrationResourceHolder org.springframework.integration.transaction.IntegrationResourceHolder ) { this . void ( org.springframework.integration.transaction.IntegrationResourceHolder , this . org.springframework.integration.transaction.Expression , this . org.springframework.integration.transaction.MessageChannel , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( IntegrationResourceHolder org.springframework.integration.transaction.IntegrationResourceHolder , Expression org.springframework.integration.transaction.Expression , MessageChannel org.springframework.integration.transaction.MessageChannel , java.lang.String java.lang.String ) { Message < ? > org.springframework.integration.transaction.Message<?> = org.springframework.integration.transaction.IntegrationResourceHolder . getMessage ( ) ; if ( org.springframework.integration.transaction.Message<> != null ) { if ( org.springframework.integration.transaction.Expression != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + org.springframework.integration.transaction.Expression . getExpressionString ( ) + STRING + org.springframework.integration.transaction.Message<> ) ; } EvaluationContext org.springframework.integration.transaction.EvaluationContext = this . org.springframework.integration.transaction.EvaluationContext ( org.springframework.integration.transaction.IntegrationResourceHolder ) ; java.lang.Object java.lang.Object = org.springframework.integration.transaction.Expression . getValue ( org.springframework.integration.transaction.EvaluationContext , org.springframework.integration.transaction.Message<> ) ; if ( java.lang.Object != null ) { Message < ? > org.springframework.integration.transaction.Message<?> = null ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.transaction.MessageChannel + STRING + STRING + java.lang.String + STRING ) ; } try { org.springframework.integration.transaction.Message<?> = this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.transaction.Message<> . getHeaders ( ) ) . build ( ) ; this . void ( org.springframework.integration.transaction.MessageChannel , org.springframework.integration.transaction.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING + java.lang.String + STRING + org.springframework.integration.transaction.Message<> , java.lang.Exception ) ; } } else { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING ) ; } } } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.transaction.MessageChannel + STRING + java.lang.String + STRING ) ; } try { this . void ( org.springframework.integration.transaction.MessageChannel , this . getMessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.transaction.Message<> ) . build ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING + org.springframework.integration.transaction.Message<> , java.lang.Exception ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( MessageChannel org.springframework.integration.transaction.MessageChannel , Message < ? > org.springframework.integration.transaction.Message<?> ) { org.springframework.integration.transaction.MessageChannel . send ( org.springframework.integration.transaction.Message<> , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.transaction.EvaluationContext org.springframework.integration.transaction.EvaluationContext ( java.lang.Object java.lang.Object ) { if ( java.lang.Object != null ) { EvaluationContext org.springframework.integration.transaction.EvaluationContext = this . org.springframework.integration.transaction.StandardEvaluationContext ( ) ; if ( java.lang.Object instanceof IntegrationResourceHolder ) { IntegrationResourceHolder org.springframework.integration.transaction.IntegrationResourceHolder = ( IntegrationResourceHolder ) java.lang.Object ; for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.integration.transaction.IntegrationResourceHolder . getAttributes ( ) . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; org.springframework.integration.transaction.EvaluationContext . setVariable ( java.lang.String , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } return org.springframework.integration.transaction.EvaluationContext ; } else { return this . org.springframework.integration.transaction.EvaluationContext ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.transaction.StandardEvaluationContext org.springframework.integration.transaction.StandardEvaluationContext ( ) { return ExpressionUtils . createStandardEvaluationContext ( this . getBeanFactory ( ) ) ; }  <METHOD_END>
