<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.nio.file.FileVisitOption ... java.nio.file.FileVisitOption[] ) { Assert . notNull ( java.nio.file.FileVisitOption[] , STRING ) ; this . java.nio.file.FileVisitOption[] = java.util.Arrays . java.nio.file.FileVisitOption[] ( java.nio.file.FileVisitOption[] , java.nio.file.FileVisitOption[] . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( java.io.File java.io.File ) throws java.lang.IllegalArgumentException { FileListFilter < java.io.File > org.springframework.integration.file.FileListFilter<java.io.File> = getFilter ( ) ; boolean boolean = org.springframework.integration.file.FileListFilter<java.io.File> instanceof AbstractFileListFilter ; try { java.util.stream.Stream<java.io.File> < java.io.File > java.util.stream.Stream<java.io.File> = java.nio.file.Files . java.util.stream.Stream<java.nio.file.Path> ( java.io.File . java.nio.file.Path ( ) , this . int , this . java.nio.file.FileVisitOption[] ) . java.util.stream.Stream<java.nio.file.Path> ( NUMBER ) . java.util.stream.Stream<java.io.File> ( java.nio.file.Path :: java.io.File ) . java.util.stream.Stream<java.io.File> ( java.io.File -> ! boolean || ( ( AbstractFileListFilter < java.io.File > ) org.springframework.integration.file.FileListFilter<java.io.File> ) . accept ( java.io.File ) ) ; if ( boolean ) { return java.util.stream.Stream<java.io.File> . java.util.List<java.io.File> ( java.util.stream.Collectors . java.util.stream.Collector<java.io.File,?,java.util.List<java.io.File>> ( ) ) ; } else { return org.springframework.integration.file.FileListFilter<java.io.File> . filterFiles ( java.util.stream.Stream<java.io.File> . java.io.File[] ( java.io.File [] ::new ) ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalArgumentException ( java.io.IOException ) ; } }  <METHOD_END>
