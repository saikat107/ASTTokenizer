<METHOD_START> @ java.lang.Override public java.net.URL [] java.net.URL[] ( java.lang.Thread java.lang.Thread ) { if ( ! boolean ( java.lang.Thread ) ) { return null ; } for ( java.lang.StackTraceElement java.lang.StackTraceElement : java.lang.Thread . java.lang.StackTraceElement[] ( ) ) { if ( boolean ( java.lang.StackTraceElement ) ) { return null ; } } return java.net.URL[] ( java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Thread java.lang.Thread ) { return java.lang.Thread . java.lang.String ( ) . boolean ( STRING ) && java.lang.Thread . java.lang.ClassLoader ( ) . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.StackTraceElement java.lang.StackTraceElement ) { for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( java.lang.StackTraceElement . java.lang.String ( ) . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected java.net.URL [] java.net.URL[] ( java.lang.Thread java.lang.Thread ) { return ChangeableUrls . fromUrlClassLoader ( ( java.net.URLClassLoader ) java.lang.Thread . java.lang.ClassLoader ( ) ) . toArray ( ) ; }  <METHOD_END>
