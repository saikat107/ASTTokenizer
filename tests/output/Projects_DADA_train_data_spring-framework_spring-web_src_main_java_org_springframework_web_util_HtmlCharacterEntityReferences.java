<METHOD_START> public void ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.io.InputStream java.io.InputStream = org.springframework.web.util.HtmlCharacterEntityReferences .class . java.io.InputStream ( java.lang.String ) ; if ( java.io.InputStream == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } try { try { java.util.Properties . void ( java.io.InputStream ) ; } finally { java.io.InputStream . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.io.IOException . java.lang.String ( ) ) ; } java.util.Enumeration<?> < ? > java.util.Enumeration<?> = java.util.Properties . java.util.Enumeration<?> ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; int int = java.lang.Integer . int ( java.lang.String ) ; Assert . isTrue ( ( int < NUMBER || ( int >= NUMBER && int < NUMBER ) ) , STRING + int ) ; int int = ( int < NUMBER ? int : int - NUMBER ) ; java.lang.String java.lang.String = java.util.Properties . java.lang.String ( java.lang.String ) ; this . java.lang.String[] [ int ] = char + java.lang.String + char ; this . java.util.Map<java.lang.String,java.lang.Character> . java.lang.Character ( java.lang.String , ( char ) int ) ; } }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.Map<java.lang.String,java.lang.Character> . int ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( char char ) { return boolean ( char , WebUtils . DEFAULT_CHARACTER_ENCODING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( char char , java.lang.String java.lang.String ) { return ( java.lang.String ( char , java.lang.String ) != null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( char char ) { return java.lang.String ( char , WebUtils . DEFAULT_CHARACTER_ENCODING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( char char , java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( STRING ) ) { switch ( char ){ case '<' : return STRING ; case '>' : return STRING ; case '"' : return STRING ; case '&' : return STRING ; case '\'' : return STRING ; } } else if ( char < NUMBER || ( char >= NUMBER && char < NUMBER ) ) { int int = ( char < NUMBER ? char : char - NUMBER ) ; java.lang.String java.lang.String = this . java.lang.String[] [ int ] ; if ( java.lang.String != null ) { return java.lang.String ; } } return null ; }  <METHOD_END>
<METHOD_START> public char char ( java.lang.String java.lang.String ) { java.lang.Character java.lang.Character = this . java.util.Map<java.lang.String,java.lang.Character> . java.lang.Character ( java.lang.String ) ; if ( java.lang.Character != null ) { return java.lang.Character ; } return char ; }  <METHOD_END>
