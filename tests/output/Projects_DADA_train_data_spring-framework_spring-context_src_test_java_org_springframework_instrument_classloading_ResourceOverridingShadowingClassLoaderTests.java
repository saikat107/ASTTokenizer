<METHOD_START> @ Test public void void ( ) { assertNotNull ( java.lang.ClassLoader . java.net.URL ( java.lang.String ) ) ; assertNotNull ( org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . getResource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( java.lang.ClassLoader . java.net.URL ( java.lang.String ) ) ; org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . override ( java.lang.String , null ) ; assertNull ( org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . getResource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( java.lang.ClassLoader . java.io.InputStream ( java.lang.String ) ) ; assertNotNull ( org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . getResourceAsStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( java.lang.ClassLoader . java.io.InputStream ( java.lang.String ) ) ; org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . override ( java.lang.String , null ) ; assertNull ( org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . getResourceAsStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertNotNull ( java.lang.ClassLoader . java.util.Enumeration<java.net.URL> ( java.lang.String ) ) ; assertNotNull ( org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . getResources ( java.lang.String ) ) ; assertEquals ( NUMBER , int ( org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . getResources ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { assertNotNull ( java.lang.ClassLoader . java.util.Enumeration<java.net.URL> ( java.lang.String ) ) ; org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . override ( java.lang.String , null ) ; assertEquals ( NUMBER , int ( org.springframework.instrument.classloading.ResourceOverridingShadowingClassLoader . getResources ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.util.Enumeration<?> < ? > java.util.Enumeration<?> ) { int int = NUMBER ; while ( java.util.Enumeration<> . boolean ( ) ) { java.util.Enumeration<> . nextElement ( ) ; ++ int ; } return int ; }  <METHOD_END>
