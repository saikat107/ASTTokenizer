<METHOD_START> public void ( ) { setCookieName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Locale java.util.Locale ) { this . java.util.Locale = java.util.Locale ; }  <METHOD_END>
<METHOD_START> protected java.util.Locale java.util.Locale ( ) { return this . java.util.Locale ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.TimeZone java.util.TimeZone ) { this . java.util.TimeZone = java.util.TimeZone ; }  <METHOD_END>
<METHOD_START> protected java.util.TimeZone java.util.TimeZone ( ) { return this . java.util.TimeZone ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { void ( org.springframework.web.servlet.i18n.HttpServletRequest ) ; return ( java.util.Locale ) org.springframework.web.servlet.i18n.HttpServletRequest . getAttribute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.i18n.LocaleContext org.springframework.web.servlet.i18n.LocaleContext ( final HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { void ( org.springframework.web.servlet.i18n.HttpServletRequest ) ; return new TimeZoneAwareLocaleContext ( ) { @ java.lang.Override public java.util.Locale java.util.Locale ( ) { return ( java.util.Locale ) org.springframework.web.servlet.i18n.HttpServletRequest . getAttribute ( java.lang.String ) ; } @ java.lang.Override public java.util.TimeZone java.util.TimeZone ( ) { return ( java.util.TimeZone ) org.springframework.web.servlet.i18n.HttpServletRequest . getAttribute ( java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Locale java.util.Locale ( ) { return ( java.util.Locale ) org.springframework.web.servlet.i18n.HttpServletRequest . getAttribute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.TimeZone java.util.TimeZone ( ) { return ( java.util.TimeZone ) org.springframework.web.servlet.i18n.HttpServletRequest . getAttribute ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { if ( org.springframework.web.servlet.i18n.HttpServletRequest . getAttribute ( java.lang.String ) == null ) { Cookie org.springframework.web.servlet.i18n.Cookie = WebUtils . getCookie ( org.springframework.web.servlet.i18n.HttpServletRequest , getCookieName ( ) ) ; java.util.Locale java.util.Locale = null ; java.util.TimeZone java.util.TimeZone = null ; if ( org.springframework.web.servlet.i18n.Cookie != null ) { java.lang.String java.lang.String = org.springframework.web.servlet.i18n.Cookie . getValue ( ) ; java.lang.String java.lang.String = java.lang.String ; java.lang.String java.lang.String = null ; int int = java.lang.String . int ( ' ' ) ; if ( int != - NUMBER ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; } try { java.util.Locale = ( ! STRING . boolean ( java.lang.String ) ? java.util.Locale ( java.lang.String ) : null ) ; if ( java.lang.String != null ) { java.util.TimeZone = StringUtils . parseTimeZoneString ( java.lang.String ) ; } } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { if ( org.springframework.web.servlet.i18n.HttpServletRequest . getAttribute ( WebUtils . ERROR_EXCEPTION_ATTRIBUTE ) != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getCookieName ( ) + STRING + java.lang.String + STRING + java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } } else { throw new java.lang.IllegalStateException ( STRING + getCookieName ( ) + STRING + java.lang.String + STRING + java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.web.servlet.i18n.Cookie . getValue ( ) + STRING + java.util.Locale + STRING + ( java.util.TimeZone != null ? STRING + java.util.TimeZone . java.lang.String ( ) + STRING : STRING ) ) ; } } org.springframework.web.servlet.i18n.HttpServletRequest . setAttribute ( java.lang.String , ( java.util.Locale != null ? java.util.Locale : java.util.Locale ( org.springframework.web.servlet.i18n.HttpServletRequest ) ) ) ; org.springframework.web.servlet.i18n.HttpServletRequest . setAttribute ( java.lang.String , ( java.util.TimeZone != null ? java.util.TimeZone : java.util.TimeZone ( org.springframework.web.servlet.i18n.HttpServletRequest ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.i18n.HttpServletResponse , java.util.Locale java.util.Locale ) { void ( org.springframework.web.servlet.i18n.HttpServletRequest , org.springframework.web.servlet.i18n.HttpServletResponse , ( java.util.Locale != null ? new SimpleLocaleContext ( java.util.Locale ) : null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.i18n.HttpServletResponse , LocaleContext org.springframework.web.servlet.i18n.LocaleContext ) { java.util.Locale java.util.Locale = null ; java.util.TimeZone java.util.TimeZone = null ; if ( org.springframework.web.servlet.i18n.LocaleContext != null ) { java.util.Locale = org.springframework.web.servlet.i18n.LocaleContext . getLocale ( ) ; if ( org.springframework.web.servlet.i18n.LocaleContext instanceof TimeZoneAwareLocaleContext ) { java.util.TimeZone = ( ( TimeZoneAwareLocaleContext ) org.springframework.web.servlet.i18n.LocaleContext ) . getTimeZone ( ) ; } addCookie ( org.springframework.web.servlet.i18n.HttpServletResponse , ( java.util.Locale != null ? java.lang.String ( java.util.Locale ) : STRING ) + ( java.util.TimeZone != null ? ' ' + java.util.TimeZone . java.lang.String ( ) : STRING ) ) ; } else { removeCookie ( org.springframework.web.servlet.i18n.HttpServletResponse ) ; } org.springframework.web.servlet.i18n.HttpServletRequest . setAttribute ( java.lang.String , ( java.util.Locale != null ? java.util.Locale : java.util.Locale ( org.springframework.web.servlet.i18n.HttpServletRequest ) ) ) ; org.springframework.web.servlet.i18n.HttpServletRequest . setAttribute ( java.lang.String , ( java.util.TimeZone != null ? java.util.TimeZone : java.util.TimeZone ( org.springframework.web.servlet.i18n.HttpServletRequest ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Locale java.util.Locale ( java.lang.String java.lang.String ) { return ( boolean ( ) ? java.util.Locale . java.util.Locale ( java.lang.String ) : StringUtils . parseLocaleString ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.Locale java.util.Locale ) { return ( boolean ( ) ? java.util.Locale . java.lang.String ( ) : java.util.Locale . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Locale java.util.Locale ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { java.util.Locale java.util.Locale = java.util.Locale ( ) ; if ( java.util.Locale == null ) { java.util.Locale = org.springframework.web.servlet.i18n.HttpServletRequest . getLocale ( ) ; } return java.util.Locale ; }  <METHOD_END>
<METHOD_START> protected java.util.TimeZone java.util.TimeZone ( HttpServletRequest org.springframework.web.servlet.i18n.HttpServletRequest ) { return java.util.TimeZone ( ) ; }  <METHOD_END>
