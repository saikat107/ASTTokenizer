<METHOD_START> @ Test public void void ( ) java.lang.Exception { InternalResourceViewResolver org.springframework.test.web.servlet.samples.standalone.InternalResourceViewResolver = new InternalResourceViewResolver ( STRING , STRING ) ; standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.ViewResolutionTests.PersonController ( ) ) . setViewResolvers ( org.springframework.test.web.servlet.samples.standalone.InternalResourceViewResolver ) . build ( ) . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attributeExists ( STRING ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.ViewResolutionTests.PersonController ( ) ) . setSingleView ( new MappingJackson2JsonView ( ) ) . build ( ) . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Jaxb2Marshaller org.springframework.test.web.servlet.samples.standalone.Jaxb2Marshaller = new Jaxb2Marshaller ( ) ; org.springframework.test.web.servlet.samples.standalone.Jaxb2Marshaller . setClassesToBeBound ( Person .class ) ; standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.ViewResolutionTests.PersonController ( ) ) . setSingleView ( new MarshallingView ( org.springframework.test.web.servlet.samples.standalone.Jaxb2Marshaller ) ) . build ( ) . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_XML ) ) . andExpect ( xpath ( STRING ) . string ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Jaxb2Marshaller org.springframework.test.web.servlet.samples.standalone.Jaxb2Marshaller = new Jaxb2Marshaller ( ) ; org.springframework.test.web.servlet.samples.standalone.Jaxb2Marshaller . setClassesToBeBound ( Person .class ) ; java.util.List<org.springframework.test.web.servlet.samples.standalone.View> < View > java.util.List<org.springframework.test.web.servlet.samples.standalone.View> = new java.util.ArrayList<org.springframework.test.web.servlet.samples.standalone.View> <> ( ) ; java.util.List<org.springframework.test.web.servlet.samples.standalone.View> . add ( new MappingJackson2JsonView ( ) ) ; java.util.List<org.springframework.test.web.servlet.samples.standalone.View> . add ( new MarshallingView ( org.springframework.test.web.servlet.samples.standalone.Jaxb2Marshaller ) ) ; ContentNegotiationManager org.springframework.test.web.servlet.samples.standalone.ContentNegotiationManager = new ContentNegotiationManager ( new HeaderContentNegotiationStrategy ( ) , new FixedContentNegotiationStrategy ( MediaType . TEXT_HTML ) ) ; ContentNegotiatingViewResolver org.springframework.test.web.servlet.samples.standalone.ContentNegotiatingViewResolver = new ContentNegotiatingViewResolver ( ) ; org.springframework.test.web.servlet.samples.standalone.ContentNegotiatingViewResolver . setDefaultViews ( java.util.List<org.springframework.test.web.servlet.samples.standalone.View> ) ; org.springframework.test.web.servlet.samples.standalone.ContentNegotiatingViewResolver . setContentNegotiationManager ( org.springframework.test.web.servlet.samples.standalone.ContentNegotiationManager ) ; org.springframework.test.web.servlet.samples.standalone.ContentNegotiatingViewResolver . afterPropertiesSet ( ) ; MockMvc org.springframework.test.web.servlet.samples.standalone.MockMvc = standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.ViewResolutionTests.PersonController ( ) ) . setViewResolvers ( org.springframework.test.web.servlet.samples.standalone.ContentNegotiatingViewResolver , new InternalResourceViewResolver ( ) ) . build ( ) ; org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( model ( ) . size ( NUMBER ) ) . andExpect ( model ( ) . attributeExists ( STRING ) ) . andExpect ( forwardedUrl ( STRING ) ) ; org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_JSON ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) ; org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . accept ( MediaType . APPLICATION_XML ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( MediaType . APPLICATION_XML ) ) . andExpect ( xpath ( STRING ) . string ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.ViewResolutionTests.PersonController ( ) ) . build ( ) . perform ( get ( STRING ) ) . andExpect ( model ( ) . attribute ( STRING , hasProperty ( STRING , equalTo ( STRING ) ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( forwardedUrl ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( @ PathVariable java.lang.String java.lang.String , Model org.springframework.test.web.servlet.samples.standalone.Model ) { Person org.springframework.test.web.servlet.samples.standalone.Person = new Person ( java.lang.String ) ; org.springframework.test.web.servlet.samples.standalone.Model . addAttribute ( org.springframework.test.web.servlet.samples.standalone.Person ) ; return STRING ; }  <METHOD_END>
