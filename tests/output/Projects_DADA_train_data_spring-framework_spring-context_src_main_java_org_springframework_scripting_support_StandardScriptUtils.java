<METHOD_START> public static javax.script.ScriptEngine javax.script.ScriptEngine ( javax.script.ScriptEngineManager javax.script.ScriptEngineManager , java.lang.String java.lang.String ) { javax.script.ScriptEngine javax.script.ScriptEngine = javax.script.ScriptEngineManager . javax.script.ScriptEngine ( java.lang.String ) ; if ( javax.script.ScriptEngine == null ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( javax.script.ScriptEngineFactory javax.script.ScriptEngineFactory : javax.script.ScriptEngineManager . java.util.List<javax.script.ScriptEngineFactory> ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = javax.script.ScriptEngineFactory . java.util.List<java.lang.String> ( ) ; if ( java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { try { javax.script.ScriptEngine = javax.script.ScriptEngineFactory . javax.script.ScriptEngine ( ) ; javax.script.ScriptEngine . void ( javax.script.ScriptEngineManager . javax.script.Bindings ( ) , javax.script.ScriptContext . int ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } java.util.Set<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; } throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.util.Set<java.lang.String> ) ; } return javax.script.ScriptEngine ; }  <METHOD_END>
<METHOD_START> static javax.script.Bindings javax.script.Bindings ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return ( java.util.Map<java.lang.String,java.lang.Object> instanceof javax.script.Bindings ? ( javax.script.Bindings ) java.util.Map<java.lang.String,java.lang.Object> : new javax.script.SimpleBindings ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
