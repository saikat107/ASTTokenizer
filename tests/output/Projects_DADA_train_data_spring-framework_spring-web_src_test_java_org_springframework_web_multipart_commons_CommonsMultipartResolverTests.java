<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Exception { StaticWebApplicationContext org.springframework.web.multipart.commons.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) . setAttribute ( WebUtils . TEMP_DIR_CONTEXT_ATTRIBUTE , new java.io.File ( STRING ) ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver ( ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . setMaxUploadSize ( NUMBER ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . setMaxInMemorySize ( NUMBER ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . setDefaultEncoding ( STRING ) ; if ( boolean ) { org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . setResolveLazily ( false ) ; } org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . setServletContext ( org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) ) ; assertEquals ( NUMBER , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . getFileUpload ( ) . getSizeMax ( ) ) ; assertEquals ( NUMBER , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . getFileItemFactory ( ) . getSizeThreshold ( ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . getFileUpload ( ) . getHeaderEncoding ( ) ) ; assertTrue ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . getFileItemFactory ( ) . getRepository ( ) . getAbsolutePath ( ) . endsWith ( STRING ) ) ; MockHttpServletRequest org.springframework.web.multipart.commons.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . addParameter ( STRING , STRING ) ; assertTrue ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . isMultipart ( org.springframework.web.multipart.commons.MockHttpServletRequest ) ) ; MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest = org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . resolveMultipart ( org.springframework.web.multipart.commons.MockHttpServletRequest ) ; void ( org.springframework.web.multipart.commons.MultipartHttpServletRequest ) ; void ( org.springframework.web.multipart.commons.MultipartHttpServletRequest ) ; void ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver , org.springframework.web.multipart.commons.MockHttpServletRequest , org.springframework.web.multipart.commons.MultipartHttpServletRequest ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameterNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.util.Set<java.lang.String> . boolean ( java.util.Enumeration<java.lang.String> . java.lang.String ( ) ) ; } assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameter ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameterValues ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameter ( STRING ) ) ; java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameterValues ( STRING ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameter ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameter ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; for ( java.lang.Object java.lang.Object : org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameterMap ( ) . keySet ( ) ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; java.util.List<java.lang.String> . boolean ( java.lang.String ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.web.multipart.commons.MultipartHttpServletRequest . getParameterMap ( ) . get ( java.lang.String ) ) ; } assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; int int = java.util.List<java.lang.String> . int ( STRING ) ; int int = java.util.List<java.lang.String> . int ( STRING ) ; int int = java.util.List<java.lang.String> . int ( STRING ) ; assertTrue ( int != - NUMBER ) ; assertTrue ( int != - NUMBER ) ; assertTrue ( int != - NUMBER ) ; java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( ( java.lang.String [] ) java.util.List<java.lang.Object> . java.lang.Object ( int ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( ( java.lang.String [] ) java.util.List<java.lang.Object> . java.lang.Object ( int ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( ( java.lang.String [] ) java.util.List<java.lang.Object> . java.lang.Object ( int ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest ) throws java.io.IOException { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFileNames ( ) ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.util.Set<java.lang.String> . boolean ( java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; } assertEquals ( NUMBER , java.util.Set<java.lang.String> . int ( ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<java.lang.String> . boolean ( STRING ) ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFile ( STRING ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFile ( STRING ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFile ( STRING ) ; java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> < java.lang.String , MultipartFile > java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> = org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFileMap ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . size ( ) ) ; assertTrue ( java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . containsKey ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . containsKey ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . containsKey ( STRING ) ) ; assertEquals ( org.springframework.web.multipart.commons.CommonsMultipartFile , java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . get ( STRING ) ) ; assertEquals ( org.springframework.web.multipart.commons.CommonsMultipartFile , java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . get ( STRING ) ) ; assertEquals ( org.springframework.web.multipart.commons.CommonsMultipartFile , java.util.Map<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . get ( STRING ) ) ; MultiValueMap < java.lang.String , MultipartFile > org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> = org.springframework.web.multipart.commons.MultipartHttpServletRequest . getMultiFileMap ( ) ; assertEquals ( NUMBER , org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . size ( ) ) ; assertTrue ( org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . containsKey ( STRING ) ) ; assertTrue ( org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . containsKey ( STRING ) ) ; assertTrue ( org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . containsKey ( STRING ) ) ; java.util.List<org.springframework.web.multipart.commons.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.multipart.commons.MultipartFile> = org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.multipart.commons.MultipartFile> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.web.multipart.commons.MultipartFile> . contains ( org.springframework.web.multipart.commons.CommonsMultipartFile ) ) ; assertEquals ( org.springframework.web.multipart.commons.CommonsMultipartFile , org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . getFirst ( STRING ) ) ; assertEquals ( org.springframework.web.multipart.commons.CommonsMultipartFile , org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . getFirst ( STRING ) ) ; assertEquals ( org.springframework.web.multipart.commons.CommonsMultipartFile , org.springframework.web.multipart.commons.MultiValueMap<java.lang.String,org.springframework.web.multipart.commons.MultipartFile> . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.CommonsMultipartFile . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.CommonsMultipartFile . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.CommonsMultipartFile . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.CommonsMultipartFile . getOriginalFilename ( ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.CommonsMultipartFile . getOriginalFilename ( ) ) ; assertEquals ( STRING , org.springframework.web.multipart.commons.CommonsMultipartFile . getOriginalFilename ( ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.web.multipart.commons.CommonsMultipartFile . getBytes ( ) ) ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.web.multipart.commons.CommonsMultipartFile . getBytes ( ) ) ) ; assertEquals ( NUMBER , org.springframework.web.multipart.commons.CommonsMultipartFile . getSize ( ) ) ; assertEquals ( NUMBER , org.springframework.web.multipart.commons.CommonsMultipartFile . getSize ( ) ) ; assertTrue ( org.springframework.web.multipart.commons.CommonsMultipartFile . getInputStream ( ) instanceof java.io.ByteArrayInputStream ) ; assertTrue ( org.springframework.web.multipart.commons.CommonsMultipartFile . getInputStream ( ) instanceof java.io.ByteArrayInputStream ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartFile . transferTo ( java.io.File ) ; java.io.File java.io.File = new java.io.File ( STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartFile . transferTo ( java.io.File ) ; assertEquals ( java.io.File , ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . java.io.File ) ; assertEquals ( java.io.File , ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . java.io.File ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver , MockHttpServletRequest org.springframework.web.multipart.commons.MockHttpServletRequest , MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest ) throws java.io.UnsupportedEncodingException { org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 ( ) ; assertArrayEquals ( null , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 . org.springframework.web.multipart.commons.MultipartFile[] ( ) ) ; assertEquals ( null , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 . byte[] ( ) ) ; ServletRequestDataBinder org.springframework.web.multipart.commons.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 , STRING ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . registerCustomEditor ( byte [] .class , new ByteArrayMultipartFileEditor ( ) ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . bind ( org.springframework.web.multipart.commons.MultipartHttpServletRequest ) ; java.util.List<org.springframework.web.multipart.commons.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.multipart.commons.MultipartFile> = org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFiles ( STRING ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) java.util.List<org.springframework.web.multipart.commons.MultipartFile> . get ( NUMBER ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) java.util.List<org.springframework.web.multipart.commons.MultipartFile> . get ( NUMBER ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFile ( STRING ) ; assertEquals ( org.springframework.web.multipart.commons.CommonsMultipartFile , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 . org.springframework.web.multipart.commons.MultipartFile[] ( ) [ NUMBER ] ) ; assertEquals ( org.springframework.web.multipart.commons.CommonsMultipartFile , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 . org.springframework.web.multipart.commons.MultipartFile[] ( ) [ NUMBER ] ) ; assertEquals ( new java.lang.String ( org.springframework.web.multipart.commons.CommonsMultipartFile . getBytes ( ) ) , new java.lang.String ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean1 . byte[] ( ) ) ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 ( ) ; assertArrayEquals ( null , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String[] ( ) ) ; assertEquals ( null , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String ( ) ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 , STRING ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . registerCustomEditor ( java.lang.String .class , STRING , new StringMultipartFileEditor ( ) ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . registerCustomEditor ( java.lang.String .class , STRING , new StringMultipartFileEditor ( STRING ) ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . bind ( org.springframework.web.multipart.commons.MultipartHttpServletRequest ) ; assertEquals ( new java.lang.String ( org.springframework.web.multipart.commons.CommonsMultipartFile . getBytes ( ) ) , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String[] ( ) [ NUMBER ] ) ; assertEquals ( new java.lang.String ( org.springframework.web.multipart.commons.CommonsMultipartFile . getBytes ( ) ) , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String[] ( ) [ NUMBER ] ) ; assertEquals ( new java.lang.String ( org.springframework.web.multipart.commons.CommonsMultipartFile . getBytes ( ) , STRING ) , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String ( ) ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . cleanupMultipart ( org.springframework.web.multipart.commons.MultipartHttpServletRequest ) ; assertTrue ( ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . boolean ) ; assertTrue ( ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . boolean ) ; assertTrue ( ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . boolean ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . void ( true ) ; org.springframework.web.multipart.commons.MultipartHttpServletRequest = org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . resolveMultipart ( org.springframework.web.multipart.commons.MockHttpServletRequest ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . setBindEmptyMultipartFiles ( false ) ; java.lang.String java.lang.String = org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String ( ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . bind ( org.springframework.web.multipart.commons.MultipartHttpServletRequest ) ; assertFalse ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String ( ) . boolean ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String ( ) ) ; org.springframework.web.multipart.commons.MultipartHttpServletRequest = org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver . resolveMultipart ( org.springframework.web.multipart.commons.MockHttpServletRequest ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . setBindEmptyMultipartFiles ( true ) ; org.springframework.web.multipart.commons.ServletRequestDataBinder . bind ( org.springframework.web.multipart.commons.MultipartHttpServletRequest ) ; assertTrue ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MultipartTestBean2 . java.lang.String ( ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.multipart.commons.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver .class , new MutablePropertyValues ( ) ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) . setAttribute ( WebUtils . TEMP_DIR_CONTEXT_ATTRIBUTE , new java.io.File ( STRING ) ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.multipart.commons.StaticWebApplicationContext ) ; CommonsMultipartResolver org.springframework.web.multipart.commons.CommonsMultipartResolver = new CommonsMultipartResolver ( org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) ) ; assertTrue ( org.springframework.web.multipart.commons.CommonsMultipartResolver . getFileItemFactory ( ) . getRepository ( ) . getAbsolutePath ( ) . endsWith ( STRING ) ) ; MockFilterConfig org.springframework.web.multipart.commons.MockFilterConfig = new MockFilterConfig ( org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) , STRING ) ; org.springframework.web.multipart.commons.MockFilterConfig . addInitParameter ( STRING , STRING ) ; org.springframework.web.multipart.commons.MockFilterConfig . addInitParameter ( STRING , STRING ) ; final MultipartFilter org.springframework.web.multipart.commons.MultipartFilter = new MultipartFilter ( ) ; org.springframework.web.multipart.commons.MultipartFilter . init ( org.springframework.web.multipart.commons.MockFilterConfig ) ; final java.util.List<org.springframework.web.multipart.commons.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.multipart.commons.MultipartFile> = new java.util.ArrayList<org.springframework.web.multipart.commons.MultipartFile> <> ( ) ; final FilterChain org.springframework.web.multipart.commons.FilterChain = new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.web.multipart.commons.ServletRequest , ServletResponse org.springframework.web.multipart.commons.ServletResponse ) { MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest = ( MultipartHttpServletRequest ) org.springframework.web.multipart.commons.ServletRequest ; java.util.List<org.springframework.web.multipart.commons.MultipartFile> . addAll ( org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFileMap ( ) . values ( ) ) ; } } ; FilterChain org.springframework.web.multipart.commons.FilterChain = new PassThroughFilterChain ( org.springframework.web.multipart.commons.MultipartFilter , org.springframework.web.multipart.commons.FilterChain ) ; MockHttpServletRequest org.springframework.web.multipart.commons.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.multipart.commons.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.multipart.commons.MultipartFilter . doFilter ( org.springframework.web.multipart.commons.MockHttpServletRequest , org.springframework.web.multipart.commons.MockHttpServletResponse , org.springframework.web.multipart.commons.FilterChain ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) java.util.List<org.springframework.web.multipart.commons.MultipartFile> . get ( NUMBER ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) java.util.List<org.springframework.web.multipart.commons.MultipartFile> . get ( NUMBER ) ; assertTrue ( ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . boolean ) ; assertTrue ( ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.multipart.commons.ServletRequest , ServletResponse org.springframework.web.multipart.commons.ServletResponse ) { MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest = ( MultipartHttpServletRequest ) org.springframework.web.multipart.commons.ServletRequest ; java.util.List<org.springframework.web.multipart.commons.MultipartFile> . addAll ( org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFileMap ( ) . values ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StaticWebApplicationContext org.springframework.web.multipart.commons.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . registerSingleton ( STRING , org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockCommonsMultipartResolver .class , new MutablePropertyValues ( ) ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) . setAttribute ( WebUtils . TEMP_DIR_CONTEXT_ATTRIBUTE , new java.io.File ( STRING ) ) ; org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.multipart.commons.StaticWebApplicationContext ) ; CommonsMultipartResolver org.springframework.web.multipart.commons.CommonsMultipartResolver = new CommonsMultipartResolver ( org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) ) ; assertTrue ( org.springframework.web.multipart.commons.CommonsMultipartResolver . getFileItemFactory ( ) . getRepository ( ) . getAbsolutePath ( ) . endsWith ( STRING ) ) ; MockFilterConfig org.springframework.web.multipart.commons.MockFilterConfig = new MockFilterConfig ( org.springframework.web.multipart.commons.StaticWebApplicationContext . getServletContext ( ) , STRING ) ; org.springframework.web.multipart.commons.MockFilterConfig . addInitParameter ( STRING , STRING ) ; final java.util.List<org.springframework.web.multipart.commons.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.multipart.commons.MultipartFile> = new java.util.ArrayList<org.springframework.web.multipart.commons.MultipartFile> <> ( ) ; FilterChain org.springframework.web.multipart.commons.FilterChain = new FilterChain ( ) { @ java.lang.Override public void void ( ServletRequest org.springframework.web.multipart.commons.ServletRequest , ServletResponse org.springframework.web.multipart.commons.ServletResponse ) { if ( org.springframework.web.multipart.commons.ServletRequest instanceof MultipartHttpServletRequest ) { MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest = ( MultipartHttpServletRequest ) org.springframework.web.multipart.commons.ServletRequest ; java.util.List<org.springframework.web.multipart.commons.MultipartFile> . addAll ( org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFileMap ( ) . values ( ) ) ; } } } ; MultipartFilter org.springframework.web.multipart.commons.MultipartFilter = new MultipartFilter ( ) { private boolean boolean = false ; @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.multipart.commons.HttpServletRequest , HttpServletResponse org.springframework.web.multipart.commons.HttpServletResponse , FilterChain org.springframework.web.multipart.commons.FilterChain ) throws org.springframework.web.multipart.commons.ServletException , java.io.IOException { super. doFilterInternal ( org.springframework.web.multipart.commons.HttpServletRequest , org.springframework.web.multipart.commons.HttpServletResponse , org.springframework.web.multipart.commons.FilterChain ) ; super. doFilterInternal ( org.springframework.web.multipart.commons.HttpServletRequest , org.springframework.web.multipart.commons.HttpServletResponse , org.springframework.web.multipart.commons.FilterChain ) ; if ( boolean ) { throw new ServletException ( STRING ) ; } boolean = true ; } } ; org.springframework.web.multipart.commons.MultipartFilter . init ( org.springframework.web.multipart.commons.MockFilterConfig ) ; MockHttpServletRequest org.springframework.web.multipart.commons.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.multipart.commons.MockHttpServletRequest . addHeader ( STRING , STRING ) ; HttpServletResponse org.springframework.web.multipart.commons.HttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.multipart.commons.MultipartFilter . doFilter ( org.springframework.web.multipart.commons.MockHttpServletRequest , org.springframework.web.multipart.commons.HttpServletResponse , org.springframework.web.multipart.commons.FilterChain ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) java.util.List<org.springframework.web.multipart.commons.MultipartFile> . get ( NUMBER ) ; CommonsMultipartFile org.springframework.web.multipart.commons.CommonsMultipartFile = ( CommonsMultipartFile ) java.util.List<org.springframework.web.multipart.commons.MultipartFile> . get ( NUMBER ) ; assertTrue ( ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . boolean ) ; assertTrue ( ( ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) org.springframework.web.multipart.commons.CommonsMultipartFile . getFileItem ( ) ) . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.multipart.commons.ServletRequest , ServletResponse org.springframework.web.multipart.commons.ServletResponse ) { if ( org.springframework.web.multipart.commons.ServletRequest instanceof MultipartHttpServletRequest ) { MultipartHttpServletRequest org.springframework.web.multipart.commons.MultipartHttpServletRequest = ( MultipartHttpServletRequest ) org.springframework.web.multipart.commons.ServletRequest ; java.util.List<org.springframework.web.multipart.commons.MultipartFile> . addAll ( org.springframework.web.multipart.commons.MultipartHttpServletRequest . getFileMap ( ) . values ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.multipart.commons.HttpServletRequest , HttpServletResponse org.springframework.web.multipart.commons.HttpServletResponse , FilterChain org.springframework.web.multipart.commons.FilterChain ) throws org.springframework.web.multipart.commons.ServletException , java.io.IOException { super. doFilterInternal ( org.springframework.web.multipart.commons.HttpServletRequest , org.springframework.web.multipart.commons.HttpServletResponse , org.springframework.web.multipart.commons.FilterChain ) ; super. doFilterInternal ( org.springframework.web.multipart.commons.HttpServletRequest , org.springframework.web.multipart.commons.HttpServletResponse , org.springframework.web.multipart.commons.FilterChain ) ; if ( boolean ) { throw new ServletException ( STRING ) ; } boolean = true ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.multipart.commons.FileUpload org.springframework.web.multipart.commons.FileUpload ( FileItemFactory org.springframework.web.multipart.commons.FileItemFactory ) { return new ServletFileUpload ( ) { @ java.lang.Override public java.util.List<org.springframework.web.multipart.commons.FileItem> < FileItem > java.util.List<org.springframework.web.multipart.commons.FileItem> ( HttpServletRequest org.springframework.web.multipart.commons.HttpServletRequest ) { if ( org.springframework.web.multipart.commons.HttpServletRequest instanceof MultipartHttpServletRequest ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.util.List<org.springframework.web.multipart.commons.FileItem> < FileItem > java.util.List<org.springframework.web.multipart.commons.FileItem> = new java.util.ArrayList<org.springframework.web.multipart.commons.FileItem> <> ( ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , boolean ? STRING : STRING , boolean ? STRING : STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , boolean ? STRING : STRING , boolean ? STRING : STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , boolean ? STRING : STRING , boolean ? STRING : STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , boolean ? STRING : STRING , boolean ? STRING : STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , null , null , STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , null , STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , null , null , STRING ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; return java.util.List<org.springframework.web.multipart.commons.FileItem> ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.multipart.commons.FileItem> < FileItem > java.util.List<org.springframework.web.multipart.commons.FileItem> ( HttpServletRequest org.springframework.web.multipart.commons.HttpServletRequest ) { if ( org.springframework.web.multipart.commons.HttpServletRequest instanceof MultipartHttpServletRequest ) { throw new java.lang.IllegalStateException ( STRING ) ; } java.util.List<org.springframework.web.multipart.commons.FileItem> < FileItem > java.util.List<org.springframework.web.multipart.commons.FileItem> = new java.util.ArrayList<org.springframework.web.multipart.commons.FileItem> <> ( ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , boolean ? STRING : STRING , boolean ? STRING : STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , boolean ? STRING : STRING , boolean ? STRING : STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , boolean ? STRING : STRING , boolean ? STRING : STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , boolean ? STRING : STRING , boolean ? STRING : STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , null , null , STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , STRING , null , STRING ) ; org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem = new org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ( STRING , null , null , STRING ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; java.util.List<org.springframework.web.multipart.commons.FileItem> . add ( org.springframework.web.multipart.commons.CommonsMultipartResolverTests.MockFileItem ) ; return java.util.List<org.springframework.web.multipart.commons.FileItem> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( ) { return java.lang.String . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.io.UnsupportedEncodingException { return new java.lang.String ( byte[] ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.File java.io.File ) throws java.lang.Exception { this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . java.lang.String == null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.multipart.commons.FileItemHeaders org.springframework.web.multipart.commons.FileItemHeaders ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FileItemHeaders org.springframework.web.multipart.commons.FileItemHeaders ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( MultipartFile [] org.springframework.web.multipart.commons.MultipartFile[] ) { this . org.springframework.web.multipart.commons.MultipartFile[] = org.springframework.web.multipart.commons.MultipartFile[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.multipart.commons.MultipartFile [] org.springframework.web.multipart.commons.MultipartFile[] ( ) { return org.springframework.web.multipart.commons.MultipartFile[] ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return byte[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
