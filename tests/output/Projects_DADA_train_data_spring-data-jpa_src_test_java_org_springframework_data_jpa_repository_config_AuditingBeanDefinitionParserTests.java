<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.data.jpa.repository.config.BeanDefinition = org.springframework.data.jpa.repository.config.BeanDefinition ( STRING ) ; PropertyValue org.springframework.data.jpa.repository.config.PropertyValue = org.springframework.data.jpa.repository.config.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( STRING ) ; assertThat ( org.springframework.data.jpa.repository.config.PropertyValue , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.jpa.repository.config.PropertyValue . getValue ( ) , is ( instanceOf ( RuntimeBeanReference .class ) ) ) ; assertThat ( ( ( RuntimeBeanReference ) org.springframework.data.jpa.repository.config.PropertyValue . getValue ( ) ) . getBeanName ( ) , is ( STRING ) ) ; BeanFactory org.springframework.data.jpa.repository.config.BeanFactory = org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.config.BeanFactory . getBean ( AuditingBeanDefinitionParser . AUDITING_ENTITY_LISTENER_CLASS_NAME ) ; assertThat ( java.lang.Object , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) public void void ( ) { ShadowingClassLoader org.springframework.data.jpa.repository.config.ShadowingClassLoader = new ShadowingClassLoader ( java.lang.Class<? extends org.springframework.data.jpa.repository.config.AuditingBeanDefinitionParserTests> ( ) . java.lang.ClassLoader ( ) ) ; org.springframework.data.jpa.repository.config.ShadowingClassLoader . excludeClass ( AuditingBeanDefinitionParser . AUDITING_ENTITY_LISTENER_CLASS_NAME ) ; org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ( STRING , org.springframework.data.jpa.repository.config.ShadowingClassLoader ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { BeanDefinition org.springframework.data.jpa.repository.config.BeanDefinition = org.springframework.data.jpa.repository.config.BeanDefinition ( java.lang.String ) ; PropertyValue org.springframework.data.jpa.repository.config.PropertyValue = org.springframework.data.jpa.repository.config.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( STRING ) ; assertThat ( org.springframework.data.jpa.repository.config.PropertyValue , is ( notNullValue ( ) ) ) ; assertThat ( ( java.lang.String ) org.springframework.data.jpa.repository.config.PropertyValue . getValue ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.config.BeanDefinition org.springframework.data.jpa.repository.config.BeanDefinition ( java.lang.String java.lang.String ) { DefaultListableBeanFactory org.springframework.data.jpa.repository.config.DefaultListableBeanFactory = org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ( java.lang.String ) ; BeanDefinition org.springframework.data.jpa.repository.config.BeanDefinition = org.springframework.data.jpa.repository.config.DefaultListableBeanFactory . getBeanDefinition ( AuditingBeanDefinitionParser . AUDITING_ENTITY_LISTENER_CLASS_NAME ) ; BeanDefinition org.springframework.data.jpa.repository.config.BeanDefinition = ( BeanDefinition ) org.springframework.data.jpa.repository.config.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( STRING ) . getValue ( ) ; java.lang.String java.lang.String = org.springframework.data.jpa.repository.config.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( STRING ) . getValue ( ) . toString ( ) ; return org.springframework.data.jpa.repository.config.DefaultListableBeanFactory . getBeanDefinition ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.config.DefaultListableBeanFactory org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ( java.lang.String java.lang.String ) { return org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ( java.lang.String , java.lang.Class<? extends org.springframework.data.jpa.repository.config.AuditingBeanDefinitionParserTests> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.config.DefaultListableBeanFactory org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ( java.lang.String java.lang.String , java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.Thread . java.lang.Thread ( ) . void ( java.lang.ClassLoader ) ; DefaultListableBeanFactory org.springframework.data.jpa.repository.config.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XmlBeanDefinitionReader org.springframework.data.jpa.repository.config.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ) ; org.springframework.data.jpa.repository.config.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( java.lang.String ) ) ; return org.springframework.data.jpa.repository.config.DefaultListableBeanFactory ; }  <METHOD_END>
