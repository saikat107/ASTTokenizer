<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.http.server.reactive.bootstrap.Undertow = Undertow . builder ( ) . addHttpListener ( getPort ( ) , getHost ( ) ) . setHandler ( org.springframework.http.server.reactive.bootstrap.UndertowHttpHandlerAdapter ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.server.reactive.bootstrap.UndertowHttpHandlerAdapter org.springframework.http.server.reactive.bootstrap.UndertowHttpHandlerAdapter ( ) { return new UndertowHttpHandlerAdapter ( resolveHttpHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.http.server.reactive.bootstrap.Undertow . start ( ) ; Undertow . Undertow Undertow.ListenerInfo = this . org.springframework.http.server.reactive.bootstrap.Undertow . getListenerInfo ( ) . get ( NUMBER ) ; setPort ( ( ( java.net.InetSocketAddress ) Undertow.ListenerInfo . getAddress ( ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.http.server.reactive.bootstrap.Undertow . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.http.server.reactive.bootstrap.Undertow = null ; }  <METHOD_END>
