<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.oxm.xstream.XStreamMarshaller = new XStreamMarshaller ( ) ; java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = new java.util.HashMap<java.lang.String,java.lang.Class<?>> <> ( ) ; java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( STRING , Flight .class ) ; org.springframework.oxm.xstream.XStreamMarshaller . setAliases ( java.util.Map<java.lang.String,java.lang.Class<?>> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { assertTrue ( STRING , java.lang.Object instanceof Flight ) ; Flight org.springframework.oxm.xstream.Flight = ( Flight ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.xstream.Flight ) ; assertEquals ( STRING , NUMBER , org.springframework.oxm.xstream.Flight . getFlightNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = new javax.xml.transform.dom.DOMSource ( org.w3c.dom.Document ) ; java.lang.Object java.lang.Object = org.springframework.oxm.xstream.XStreamMarshaller . unmarshal ( javax.xml.transform.dom.DOMSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLStreamReader ( new java.io.StringReader ( java.lang.String ) ) ; javax.xml.transform.Source javax.xml.transform.Source = StaxUtils . createStaxSource ( javax.xml.stream.XMLStreamReader ) ; java.lang.Object java.lang.Object = org.springframework.oxm.xstream.XStreamMarshaller . unmarshal ( javax.xml.transform.Source ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( STRING ) ) ) ; java.lang.Object java.lang.Object = org.springframework.oxm.xstream.XStreamMarshaller . unmarshal ( javax.xml.transform.stream.StreamSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( java.lang.String ) ) ; java.lang.Object java.lang.Object = org.springframework.oxm.xstream.XStreamMarshaller . unmarshal ( javax.xml.transform.stream.StreamSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
