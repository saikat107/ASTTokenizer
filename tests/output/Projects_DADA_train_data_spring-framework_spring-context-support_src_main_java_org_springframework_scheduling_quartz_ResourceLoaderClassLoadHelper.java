<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( ResourceLoader org.springframework.scheduling.quartz.ResourceLoader ) { this . org.springframework.scheduling.quartz.ResourceLoader = org.springframework.scheduling.quartz.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.scheduling.quartz.ResourceLoader == null ) { this . org.springframework.scheduling.quartz.ResourceLoader = SchedulerFactoryBean . getConfigTimeResourceLoader ( ) ; if ( this . org.springframework.scheduling.quartz.ResourceLoader == null ) { this . org.springframework.scheduling.quartz.ResourceLoader = new DefaultResourceLoader ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { return this . org.springframework.scheduling.quartz.ResourceLoader . getClassLoader ( ) . loadClass ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws java.lang.ClassNotFoundException { return ( java.lang.Class<? extends T> < ? extends T > ) java.lang.Class<?> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( java.lang.String java.lang.String ) { Resource org.springframework.scheduling.quartz.Resource = this . org.springframework.scheduling.quartz.ResourceLoader . getResource ( java.lang.String ) ; if ( org.springframework.scheduling.quartz.Resource . exists ( ) ) { try { return org.springframework.scheduling.quartz.Resource . getURL ( ) ; } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.scheduling.quartz.Log . isWarnEnabled ( ) ) { org.springframework.scheduling.quartz.Log . warn ( STRING + org.springframework.scheduling.quartz.Resource ) ; } return null ; } } else { return java.lang.ClassLoader ( ) . java.net.URL ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) { Resource org.springframework.scheduling.quartz.Resource = this . org.springframework.scheduling.quartz.ResourceLoader . getResource ( java.lang.String ) ; if ( org.springframework.scheduling.quartz.Resource . exists ( ) ) { try { return org.springframework.scheduling.quartz.Resource . getInputStream ( ) ; } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.scheduling.quartz.Log . isWarnEnabled ( ) ) { org.springframework.scheduling.quartz.Log . warn ( STRING + org.springframework.scheduling.quartz.Resource ) ; } return null ; } } else { return java.lang.ClassLoader ( ) . java.io.InputStream ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . org.springframework.scheduling.quartz.ResourceLoader . getClassLoader ( ) ; }  <METHOD_END>
