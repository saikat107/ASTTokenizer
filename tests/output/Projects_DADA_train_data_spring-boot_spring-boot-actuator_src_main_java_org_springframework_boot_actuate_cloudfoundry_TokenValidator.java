<METHOD_START> void ( CloudFoundrySecurityService org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService ) { this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService = org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService ; }  <METHOD_END>
<METHOD_START> public void void ( Token org.springframework.boot.actuate.cloudfoundry.Token ) { void ( org.springframework.boot.actuate.cloudfoundry.Token ) ; void ( org.springframework.boot.actuate.cloudfoundry.Token ) ; void ( org.springframework.boot.actuate.cloudfoundry.Token ) ; void ( org.springframework.boot.actuate.cloudfoundry.Token ) ; void ( org.springframework.boot.actuate.cloudfoundry.Token ) ; }  <METHOD_END>
<METHOD_START> private void void ( Token org.springframework.boot.actuate.cloudfoundry.Token ) { java.lang.String java.lang.String = org.springframework.boot.actuate.cloudfoundry.Token . getSignatureAlgorithm ( ) ; if ( java.lang.String == null ) { throw new CloudFoundryAuthorizationException ( Reason . INVALID_SIGNATURE , STRING ) ; } if ( ! java.lang.String . boolean ( STRING ) ) { throw new CloudFoundryAuthorizationException ( Reason . UNSUPPORTED_TOKEN_SIGNING_ALGORITHM , STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Token org.springframework.boot.actuate.cloudfoundry.Token ) { java.lang.String java.lang.String = org.springframework.boot.actuate.cloudfoundry.Token . getKeyId ( ) ; if ( this . java.util.Map<java.lang.String,java.lang.String> == null || ! boolean ( java.lang.String ) ) { this . java.util.Map<java.lang.String,java.lang.String> = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . fetchTokenKeys ( ) ; if ( ! boolean ( java.lang.String ) ) { throw new CloudFoundryAuthorizationException ( Reason . INVALID_KEY_ID , STRING ) ; } } if ( ! boolean ( org.springframework.boot.actuate.cloudfoundry.Token , this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ) ) { throw new CloudFoundryAuthorizationException ( Reason . INVALID_SIGNATURE , STRING ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Token org.springframework.boot.actuate.cloudfoundry.Token , java.lang.String java.lang.String ) { try { java.security.PublicKey java.security.PublicKey = java.security.PublicKey ( java.lang.String ) ; java.security.Signature java.security.Signature = java.security.Signature . java.security.Signature ( STRING ) ; java.security.Signature . void ( java.security.PublicKey ) ; java.security.Signature . void ( org.springframework.boot.actuate.cloudfoundry.Token . getContent ( ) ) ; return java.security.Signature . boolean ( org.springframework.boot.actuate.cloudfoundry.Token . getSignature ( ) ) ; } catch ( java.security.GeneralSecurityException java.security.GeneralSecurityException ) { return false ; } }  <METHOD_END>
<METHOD_START> private java.security.PublicKey java.security.PublicKey ( java.lang.String java.lang.String )			throws java.security.NoSuchAlgorithmException , java.security.spec.InvalidKeySpecException { java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) ; java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) ; java.lang.String = java.lang.String . java.lang.String ( ) . java.lang.String ( STRING , STRING ) ; byte [] byte[] = Base64Utils . decodeFromString ( java.lang.String ) ; java.security.spec.X509EncodedKeySpec java.security.spec.X509EncodedKeySpec = new java.security.spec.X509EncodedKeySpec ( byte[] ) ; return java.security.KeyFactory . java.security.KeyFactory ( STRING ) . java.security.PublicKey ( java.security.spec.X509EncodedKeySpec ) ; }  <METHOD_END>
<METHOD_START> private void void ( Token org.springframework.boot.actuate.cloudfoundry.Token ) { long long = java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( java.lang.System . long ( ) ) ; if ( long > org.springframework.boot.actuate.cloudfoundry.Token . getExpiry ( ) ) { throw new CloudFoundryAuthorizationException ( Reason . TOKEN_EXPIRED , STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Token org.springframework.boot.actuate.cloudfoundry.Token ) { java.lang.String java.lang.String = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getUaaUrl ( ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; if ( ! java.lang.String . boolean ( org.springframework.boot.actuate.cloudfoundry.Token . getIssuer ( ) ) ) { throw new CloudFoundryAuthorizationException ( Reason . INVALID_ISSUER , STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Token org.springframework.boot.actuate.cloudfoundry.Token ) { if ( ! org.springframework.boot.actuate.cloudfoundry.Token . getScope ( ) . contains ( STRING ) ) { throw new CloudFoundryAuthorizationException ( Reason . INVALID_AUDIENCE , STRING ) ; } }  <METHOD_END>
