<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpHandler org.springframework.http.server.reactive.bootstrap.HttpHandler ) { this . org.springframework.http.server.reactive.bootstrap.HttpHandler = org.springframework.http.server.reactive.bootstrap.HttpHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.bootstrap.HttpHandler org.springframework.http.server.reactive.bootstrap.HttpHandler ( ) { return this . org.springframework.http.server.reactive.bootstrap.HttpHandler ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , HttpHandler org.springframework.http.server.reactive.bootstrap.HttpHandler ) { if ( this . java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> == null ) { this . java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> = new java.util.LinkedHashMap <> ( ) ; } this . java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> . put ( java.lang.String , org.springframework.http.server.reactive.bootstrap.HttpHandler ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> < java.lang.String , HttpHandler > java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> ( ) { return this . java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.server.reactive.bootstrap.HttpHandler org.springframework.http.server.reactive.bootstrap.HttpHandler ( ) { return java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> ( ) != null ? new ContextPathCompositeHandler ( java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> ( ) ) : org.springframework.http.server.reactive.bootstrap.HttpHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) java.lang.Exception { Assert . notNull ( this . java.lang.String , STRING ) ; Assert . isTrue ( this . int >= NUMBER , STRING ) ; Assert . isTrue ( this . org.springframework.http.server.reactive.bootstrap.HttpHandler != null || this . java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> != null , STRING ) ; Assert . state ( ! this . boolean , STRING ) ; synchronized ( this . java.lang.Object ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . boolean ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { synchronized ( this . java.lang.Object ) { if ( ! boolean ( ) ) { this . boolean = true ; try { void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> protected abstract void void ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ) { synchronized ( this . java.lang.Object ) { if ( boolean ( ) ) { this . boolean = false ; try { void ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( java.lang.Throwable ) ; } finally { void ( ) ; } } } }  <METHOD_END>
<METHOD_START> protected abstract void void ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> private void void ( ) { this . java.lang.String = STRING ; this . int = NUMBER ; this . org.springframework.http.server.reactive.bootstrap.HttpHandler = null ; this . java.util.Map<java.lang.String,org.springframework.http.server.reactive.bootstrap.HttpHandler> = null ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( )  <METHOD_END>
