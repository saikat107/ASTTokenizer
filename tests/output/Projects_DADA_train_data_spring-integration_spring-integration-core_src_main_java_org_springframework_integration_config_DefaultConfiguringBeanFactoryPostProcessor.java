<METHOD_START> public void void ( ConfigurableListableBeanFactory org.springframework.integration.config.ConfigurableListableBeanFactory ) throws org.springframework.integration.config.BeansException { if ( org.springframework.integration.config.ConfigurableListableBeanFactory instanceof BeanDefinitionRegistry ) { BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry = ( BeanDefinitionRegistry ) org.springframework.integration.config.ConfigurableListableBeanFactory ; this . void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; if ( ! org.springframework.integration.config.ConfigurableListableBeanFactory . containsBean ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME ) ) { this . void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; } if ( ! org.springframework.integration.config.ConfigurableListableBeanFactory . containsBean ( IntegrationContextUtils . TASK_SCHEDULER_BEAN_NAME ) ) { this . void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; } this . void ( org.springframework.integration.config.BeanDefinitionRegistry ) ; } else if ( this . org.springframework.integration.config.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.config.Log . warn ( STRING + IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME + STRING + IntegrationContextUtils . TASK_SCHEDULER_BEAN_NAME + STRING + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry , java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = org.springframework.integration.config.BeanDefinitionRegistry . getBeanDefinitionNames ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { BeanDefinition org.springframework.integration.config.BeanDefinition = org.springframework.integration.config.BeanDefinitionRegistry . getBeanDefinition ( java.lang.String ) ; if ( java.lang.String . boolean ( org.springframework.integration.config.BeanDefinition . getBeanClassName ( ) ) ) { if ( this . org.springframework.integration.config.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.config.Log . info ( java.lang.String + STRING ) ; } return; } } RootBeanDefinition org.springframework.integration.config.RootBeanDefinition = new RootBeanDefinition ( java.lang.String ) ; org.springframework.integration.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; BeanDefinitionReaderUtils . registerWithGeneratedName ( org.springframework.integration.config.RootBeanDefinition , org.springframework.integration.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { void ( org.springframework.integration.config.BeanDefinitionRegistry , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( org.springframework.integration.config.BeanDefinitionRegistry . containsBeanDefinition ( IntegrationContextUtils . NULL_CHANNEL_BEAN_NAME ) ) { BeanDefinition org.springframework.integration.config.BeanDefinition = org.springframework.integration.config.BeanDefinitionRegistry . getBeanDefinition ( IntegrationContextUtils . NULL_CHANNEL_BEAN_NAME ) ; if ( NullChannel .class . java.lang.String ( ) . boolean ( org.springframework.integration.config.BeanDefinition . getBeanClassName ( ) ) ) { return; } else { throw new java.lang.IllegalStateException ( STRING + IntegrationContextUtils . NULL_CHANNEL_BEAN_NAME + STRING ) ; } } else { RootBeanDefinition org.springframework.integration.config.RootBeanDefinition = new RootBeanDefinition ( ) ; org.springframework.integration.config.RootBeanDefinition . setBeanClassName ( IntegrationConfigUtils . BASE_PACKAGE + STRING ) ; BeanDefinitionHolder org.springframework.integration.config.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.integration.config.RootBeanDefinition , IntegrationContextUtils . NULL_CHANNEL_BEAN_NAME ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.BeanDefinitionHolder , org.springframework.integration.config.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( this . org.springframework.integration.config.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.config.Log . info ( STRING + IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME + STRING ) ; } org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME , new RootBeanDefinition ( PublishSubscribeChannel .class ) ) ; BeanDefinition org.springframework.integration.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( LoggingHandler .class ) . addConstructorArgValue ( STRING ) . getBeanDefinition ( ) ; java.lang.String java.lang.String = java.lang.String + IntegrationConfigUtils . HANDLER_ALIAS_SUFFIX ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.integration.config.BeanDefinition ) ; BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ConsumerEndpointFactoryBean .class ) . addPropertyReference ( STRING , java.lang.String ) . addPropertyValue ( STRING , IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME ) ; BeanComponentDefinition org.springframework.integration.config.BeanComponentDefinition = new BeanComponentDefinition ( org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) , java.lang.String ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.BeanComponentDefinition , org.springframework.integration.config.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( this . org.springframework.integration.config.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.config.Log . info ( STRING + IntegrationContextUtils . TASK_SCHEDULER_BEAN_NAME + STRING ) ; } BeanDefinition org.springframework.integration.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( ThreadPoolTaskScheduler .class ) . addPropertyValue ( STRING , IntegrationProperties . getExpressionFor ( IntegrationProperties . TASK_SCHEDULER_POOL_SIZE ) ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , new java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy ( ) ) . addPropertyValue ( STRING , new RootBeanDefinition ( MessagePublishingErrorHandler .class ) ) . getBeanDefinition ( ) ; org.springframework.integration.config.BeanDefinitionRegistry . registerBeanDefinition ( IntegrationContextUtils . TASK_SCHEDULER_BEAN_NAME , org.springframework.integration.config.BeanDefinition ) ; }  <METHOD_END>
