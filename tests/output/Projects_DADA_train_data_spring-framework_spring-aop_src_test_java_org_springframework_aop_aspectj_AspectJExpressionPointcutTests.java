<METHOD_START> @ Before public void void ( ) java.lang.NoSuchMethodException { java.lang.reflect.Method = TestBean .class . java.lang.reflect.Method ( STRING ) ; java.lang.reflect.Method = TestBean .class . java.lang.reflect.Method ( STRING , int .class ) ; java.lang.reflect.Method = TestBean .class . java.lang.reflect.Method ( STRING , java.lang.Number .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Pointcut org.springframework.aop.aspectj.Pointcut = org.springframework.aop.aspectj.Pointcut ( java.lang.String ) ; ClassFilter org.springframework.aop.aspectj.ClassFilter = org.springframework.aop.aspectj.Pointcut . getClassFilter ( ) ; MethodMatcher org.springframework.aop.aspectj.MethodMatcher = org.springframework.aop.aspectj.Pointcut . getMethodMatcher ( ) ; void ( org.springframework.aop.aspectj.ClassFilter ) ; assertFalse ( STRING , org.springframework.aop.aspectj.MethodMatcher . isRuntime ( ) ) ; void ( org.springframework.aop.aspectj.MethodMatcher ) ; assertFalse ( STRING , org.springframework.aop.aspectj.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Pointcut org.springframework.aop.aspectj.Pointcut = org.springframework.aop.aspectj.Pointcut ( java.lang.String ) ; ClassFilter org.springframework.aop.aspectj.ClassFilter = org.springframework.aop.aspectj.Pointcut . getClassFilter ( ) ; MethodMatcher org.springframework.aop.aspectj.MethodMatcher = org.springframework.aop.aspectj.Pointcut . getMethodMatcher ( ) ; void ( org.springframework.aop.aspectj.ClassFilter ) ; assertFalse ( STRING , org.springframework.aop.aspectj.MethodMatcher . isRuntime ( ) ) ; void ( org.springframework.aop.aspectj.MethodMatcher ) ; assertTrue ( STRING , org.springframework.aop.aspectj.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = java.lang.String + STRING ; java.lang.String java.lang.String = java.lang.String + STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( TestBean .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.AspectJExpressionPointcutTests.OtherIOther .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.AspectJExpressionPointcutTests.OtherIOther .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.AspectJExpressionPointcutTests.OtherIOther .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.AspectJExpressionPointcutTests.OtherIOther .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.SecurityException , java.lang.NoSuchMethodException { java.lang.String java.lang.String = STRING ; if ( boolean ) { java.lang.String += STRING ; } java.lang.String = java.lang.String + STRING ; AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( TestBean .class ) ) ; assertTrue ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertEquals ( boolean , org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( DeepBean .class ) ) ; assertEquals ( boolean , org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( DeepBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , DeepBean .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.String .class ) ) ; assertFalse ( org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( org.springframework.aop.aspectj.AspectJExpressionPointcutTests.OtherIOther .class . java.lang.reflect.Method ( STRING ) , org.springframework.aop.aspectj.AspectJExpressionPointcutTests.OtherIOther .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; try { org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( ITestBean .class ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; try { org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , ITestBean .class ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; try { org.springframework.aop.aspectj.AspectJExpressionPointcut . matches ( java.lang.reflect.Method , ITestBean .class , ( java.lang.Object [] ) null ) ; fail ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Pointcut org.springframework.aop.aspectj.Pointcut = org.springframework.aop.aspectj.Pointcut ( java.lang.String ) ; ClassFilter org.springframework.aop.aspectj.ClassFilter = org.springframework.aop.aspectj.Pointcut . getClassFilter ( ) ; MethodMatcher org.springframework.aop.aspectj.MethodMatcher = org.springframework.aop.aspectj.Pointcut . getMethodMatcher ( ) ; void ( org.springframework.aop.aspectj.ClassFilter ) ; assertTrue ( STRING , org.springframework.aop.aspectj.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class , new java.lang.Double ( NUMBER ) ) ) ; assertFalse ( STRING , org.springframework.aop.aspectj.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class , new java.lang.Integer ( NUMBER ) ) ) ; assertFalse ( STRING , org.springframework.aop.aspectj.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; assertTrue ( STRING , org.springframework.aop.aspectj.MethodMatcher . isRuntime ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.aop.aspectj.CallCountingInterceptor org.springframework.aop.aspectj.CallCountingInterceptor = new org.springframework.aop.aspectj.CallCountingInterceptor ( ) ; TestBean org.springframework.aop.aspectj.TestBean = org.springframework.aop.aspectj.TestBean ( java.lang.String , org.springframework.aop.aspectj.CallCountingInterceptor ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.CallCountingInterceptor . int ( ) ) ; org.springframework.aop.aspectj.TestBean . getAge ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.CallCountingInterceptor . int ( ) ) ; org.springframework.aop.aspectj.TestBean . setAge ( NUMBER ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.CallCountingInterceptor . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; org.springframework.aop.aspectj.CallCountingInterceptor org.springframework.aop.aspectj.CallCountingInterceptor = new org.springframework.aop.aspectj.CallCountingInterceptor ( ) ; TestBean org.springframework.aop.aspectj.TestBean = org.springframework.aop.aspectj.TestBean ( java.lang.String , org.springframework.aop.aspectj.CallCountingInterceptor ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.CallCountingInterceptor . int ( ) ) ; org.springframework.aop.aspectj.TestBean . setSomeNumber ( new java.lang.Double ( NUMBER ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.CallCountingInterceptor . int ( ) ) ; org.springframework.aop.aspectj.TestBean . setSomeNumber ( new java.lang.Integer ( NUMBER ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.aspectj.CallCountingInterceptor . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; try { org.springframework.aop.aspectj.Pointcut ( java.lang.String ) . getClassFilter ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( true ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.aspectj.TestBean org.springframework.aop.aspectj.TestBean ( java.lang.String java.lang.String , org.springframework.aop.aspectj.CallCountingInterceptor org.springframework.aop.aspectj.CallCountingInterceptor ) { TestBean org.springframework.aop.aspectj.TestBean = new TestBean ( ) ; Pointcut org.springframework.aop.aspectj.Pointcut = org.springframework.aop.aspectj.Pointcut ( java.lang.String ) ; DefaultPointcutAdvisor org.springframework.aop.aspectj.DefaultPointcutAdvisor = new DefaultPointcutAdvisor ( ) ; org.springframework.aop.aspectj.DefaultPointcutAdvisor . setAdvice ( org.springframework.aop.aspectj.CallCountingInterceptor ) ; org.springframework.aop.aspectj.DefaultPointcutAdvisor . setPointcut ( org.springframework.aop.aspectj.Pointcut ) ; ProxyFactory org.springframework.aop.aspectj.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.aspectj.ProxyFactory . setTarget ( org.springframework.aop.aspectj.TestBean ) ; org.springframework.aop.aspectj.ProxyFactory . addAdvisor ( org.springframework.aop.aspectj.DefaultPointcutAdvisor ) ; return ( TestBean ) org.springframework.aop.aspectj.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodMatcher org.springframework.aop.aspectj.MethodMatcher ) { assertTrue ( STRING , org.springframework.aop.aspectj.MethodMatcher . matches ( java.lang.reflect.Method , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassFilter org.springframework.aop.aspectj.ClassFilter ) { assertTrue ( STRING , org.springframework.aop.aspectj.ClassFilter . matches ( TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; try { org.springframework.aop.aspectj.Pointcut ( java.lang.String ) . getClassFilter ( ) ; fail ( STRING ) ; } catch ( UnsupportedPointcutPrimitiveException org.springframework.aop.aspectj.UnsupportedPointcutPrimitiveException ) { assertEquals ( STRING , PointcutPrimitive . CALL , org.springframework.aop.aspectj.UnsupportedPointcutPrimitiveException . getUnsupportedPrimitive ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pointcut org.springframework.aop.aspectj.Pointcut = org.springframework.aop.aspectj.Pointcut ( STRING ) ; PointcutExpression org.springframework.aop.aspectj.PointcutExpression = ( ( AspectJExpressionPointcut ) org.springframework.aop.aspectj.Pointcut ) . getPointcutExpression ( ) ; assertEquals ( STRING , org.springframework.aop.aspectj.PointcutExpression . getPointcutExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pointcut org.springframework.aop.aspectj.Pointcut = org.springframework.aop.aspectj.Pointcut ( STRING ) ; PointcutExpression org.springframework.aop.aspectj.PointcutExpression = ( ( AspectJExpressionPointcut ) org.springframework.aop.aspectj.Pointcut ) . getPointcutExpression ( ) ; assertEquals ( STRING , org.springframework.aop.aspectj.PointcutExpression . getPointcutExpression ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.aspectj.Pointcut org.springframework.aop.aspectj.Pointcut ( java.lang.String java.lang.String ) { AspectJExpressionPointcut org.springframework.aop.aspectj.AspectJExpressionPointcut = new AspectJExpressionPointcut ( ) ; org.springframework.aop.aspectj.AspectJExpressionPointcut . setExpression ( java.lang.String ) ; return org.springframework.aop.aspectj.AspectJExpressionPointcut ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.aspectj.MethodInvocation ) throws java.lang.Throwable { int ++ ; return org.springframework.aop.aspectj.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . int = NUMBER ; }  <METHOD_END>
