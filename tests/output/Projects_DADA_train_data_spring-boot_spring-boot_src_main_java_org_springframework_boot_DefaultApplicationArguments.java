<METHOD_START> public void ( java.lang.String [] java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . org.springframework.boot.DefaultApplicationArguments.Source = new org.springframework.boot.DefaultApplicationArguments.Source ( java.lang.String[] ) ; this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { java.lang.String [] java.lang.String[] = this . org.springframework.boot.DefaultApplicationArguments.Source . getPropertyNames ( ) ; return java.util.Collections . java.util.Set<java.lang.String> ( new java.util.HashSet<java.lang.String> <> ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return this . org.springframework.boot.DefaultApplicationArguments.Source . containsProperty ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . org.springframework.boot.DefaultApplicationArguments.Source . java.util.List<java.lang.String> ( java.lang.String ) ; return ( java.util.List<java.lang.String> == null ? null : java.util.Collections . java.util.List<java.lang.String> ( java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return this . org.springframework.boot.DefaultApplicationArguments.Source . java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String [] java.lang.String[] ) { super( java.lang.String[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return super. getNonOptionArgs ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { return super. getOptionValues ( java.lang.String ) ; }  <METHOD_END>
