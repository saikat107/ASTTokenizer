<METHOD_START> @ Test public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING , STRING } ) ; } } ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.AbstractMappingMessageRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { AbstractMappingMessageRouter org.springframework.integration.router.AbstractMappingMessageRouter = new AbstractMappingMessageRouter ( ) { @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; } } ; org.springframework.integration.router.AbstractMappingMessageRouter . setBeanFactory ( mock ( BeanFactory .class ) ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.AbstractMappingMessageRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> ) { return CollectionUtils . arrayToList ( new java.lang.String [] { STRING } ) ; }  <METHOD_END>
