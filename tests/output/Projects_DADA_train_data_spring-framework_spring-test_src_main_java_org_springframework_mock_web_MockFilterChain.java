<METHOD_START> public void ( ) { this . java.util.List<org.springframework.mock.web.Filter> = java.util.Collections . java.util.List<java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Servlet org.springframework.mock.web.Servlet ) { this . java.util.List<org.springframework.mock.web.Filter> = java.util.List<org.springframework.mock.web.Filter> ( org.springframework.mock.web.Servlet ) ; }  <METHOD_END>
<METHOD_START> public void ( Servlet org.springframework.mock.web.Servlet , Filter ... org.springframework.mock.web.Filter[] ) { Assert . notNull ( org.springframework.mock.web.Filter[] , STRING ) ; Assert . noNullElements ( org.springframework.mock.web.Filter[] , STRING ) ; this . java.util.List<org.springframework.mock.web.Filter> = java.util.List<org.springframework.mock.web.Filter> ( org.springframework.mock.web.Servlet , org.springframework.mock.web.Filter[] ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.mock.web.Filter> < Filter > java.util.List<org.springframework.mock.web.Filter> ( Servlet org.springframework.mock.web.Servlet , Filter ... org.springframework.mock.web.Filter[] ) { Filter [] org.springframework.mock.web.Filter[] = ObjectUtils . addObjectToArray ( org.springframework.mock.web.Filter[] , new org.springframework.mock.web.MockFilterChain.ServletFilterProxy ( org.springframework.mock.web.Servlet ) ) ; return java.util.Arrays . java.util.List ( org.springframework.mock.web.Filter[] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.web.ServletRequest org.springframework.mock.web.ServletRequest ( ) { return this . org.springframework.mock.web.ServletRequest ; }  <METHOD_END>
<METHOD_START> public org.springframework.mock.web.ServletResponse org.springframework.mock.web.ServletResponse ( ) { return this . org.springframework.mock.web.ServletResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.mock.web.ServletRequest , ServletResponse org.springframework.mock.web.ServletResponse ) throws java.io.IOException , org.springframework.mock.web.ServletException { Assert . notNull ( org.springframework.mock.web.ServletRequest , STRING ) ; Assert . notNull ( org.springframework.mock.web.ServletResponse , STRING ) ; Assert . state ( this . org.springframework.mock.web.ServletRequest == null , STRING ) ; if ( this . java.util.Iterator<org.springframework.mock.web.Filter> == null ) { this . java.util.Iterator<org.springframework.mock.web.Filter> = this . java.util.List<org.springframework.mock.web.Filter> . iterator ( ) ; } if ( this . java.util.Iterator<org.springframework.mock.web.Filter> . hasNext ( ) ) { Filter org.springframework.mock.web.Filter = this . java.util.Iterator<org.springframework.mock.web.Filter> . next ( ) ; org.springframework.mock.web.Filter . doFilter ( org.springframework.mock.web.ServletRequest , org.springframework.mock.web.ServletResponse , this ) ; } this . org.springframework.mock.web.ServletRequest = org.springframework.mock.web.ServletRequest ; this . org.springframework.mock.web.ServletResponse = org.springframework.mock.web.ServletResponse ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.mock.web.ServletRequest = null ; this . org.springframework.mock.web.ServletResponse = null ; this . java.util.Iterator<org.springframework.mock.web.Filter> = null ; }  <METHOD_END>
<METHOD_START> private void ( Servlet org.springframework.mock.web.Servlet ) { Assert . notNull ( org.springframework.mock.web.Servlet , STRING ) ; this . org.springframework.mock.web.Servlet = org.springframework.mock.web.Servlet ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.mock.web.ServletRequest , ServletResponse org.springframework.mock.web.ServletResponse , FilterChain org.springframework.mock.web.FilterChain )				throws java.io.IOException , org.springframework.mock.web.ServletException { this . org.springframework.mock.web.Servlet . service ( org.springframework.mock.web.ServletRequest , org.springframework.mock.web.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FilterConfig org.springframework.mock.web.FilterConfig ) throws org.springframework.mock.web.ServletException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.mock.web.Servlet . toString ( ) ; }  <METHOD_END>
