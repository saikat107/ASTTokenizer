<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.test.support.State<S,E> , State < S , E > org.springframework.statemachine.test.support.State<S,E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.StateChangedWrapper<S,E>> . boolean ( new org.springframework.statemachine.test.support.LatchStateMachineListener.StateChangedWrapper <> ( org.springframework.statemachine.test.support.State<S,E> , org.springframework.statemachine.test.support.State<S,E> ) ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.test.support.State<S,E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.State<S,E>> . add ( org.springframework.statemachine.test.support.State<S,E> ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < S , E > org.springframework.statemachine.test.support.State<S,E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.State<S,E>> . add ( org.springframework.statemachine.test.support.State<S,E> ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < E > org.springframework.statemachine.test.support.Message<E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.Message<E>> . add ( org.springframework.statemachine.test.support.Message<E> ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.test.support.Transition<S,E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> . add ( org.springframework.statemachine.test.support.Transition<S,E> ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.test.support.Transition<S,E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> . add ( org.springframework.statemachine.test.support.Transition<S,E> ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < S , E > org.springframework.statemachine.test.support.Transition<S,E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> . add ( org.springframework.statemachine.test.support.Transition<S,E> ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.test.support.StateMachine<S,E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> . add ( org.springframework.statemachine.test.support.StateMachine<S,E> ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.test.support.StateMachine<S,E> ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> . add ( org.springframework.statemachine.test.support.StateMachine<S,E> ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { synchronized ( java.lang.Object ) { this . java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.ExtendedStateChangedWrapper> . boolean ( new org.springframework.statemachine.test.support.LatchStateMachineListener.ExtendedStateChangedWrapper ( java.lang.Object , java.lang.Object ) ) ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int , int int , int int , int int , int int , int int , int int ) { synchronized ( java.lang.Object ) { this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; this . java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.StateChangedWrapper<S,E>> . void ( ) ; this . java.util.List<org.springframework.statemachine.test.support.State<S,E>> . clear ( ) ; this . java.util.List<org.springframework.statemachine.test.support.State<S,E>> . clear ( ) ; this . java.util.List<org.springframework.statemachine.test.support.Message<E>> . clear ( ) ; this . java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> . clear ( ) ; this . java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> . clear ( ) ; this . java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> . clear ( ) ; this . java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> . clear ( ) ; this . java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> . clear ( ) ; this . java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.ExtendedStateChangedWrapper> . void ( ) ; } }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ( ) { return java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.StateChangedWrapper<S,E>> < org.springframework.statemachine.test.support.LatchStateMachineListener.StateChangedWrapper<S,E> < S , E > > java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.StateChangedWrapper<S,E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.StateChangedWrapper<S,E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.State<S,E>> < State < S , E > > java.util.List<org.springframework.statemachine.test.support.State<S,E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.State<S,E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.State<S,E>> < State < S , E > > java.util.List<org.springframework.statemachine.test.support.State<S,E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.State<S,E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.Message<E>> < Message < E > > java.util.List<org.springframework.statemachine.test.support.Message<E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.Message<E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> < Transition < S , E > > java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> < Transition < S , E > > java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> < Transition < S , E > > java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.Transition<S,E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> < StateMachine < S , E > > java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> < StateMachine < S , E > > java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> ( ) { return java.util.List<org.springframework.statemachine.test.support.StateMachine<S,E>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.ExtendedStateChangedWrapper> < org.springframework.statemachine.test.support.LatchStateMachineListener.ExtendedStateChangedWrapper > java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.ExtendedStateChangedWrapper> ( ) { return java.util.List<org.springframework.statemachine.test.support.LatchStateMachineListener.ExtendedStateChangedWrapper> ; }  <METHOD_END>
<METHOD_START> public void ( State < S , E > org.springframework.statemachine.test.support.State<S,E> , State < S , E > org.springframework.statemachine.test.support.State<S,E> ) { this . org.springframework.statemachine.test.support.State<S,E> = org.springframework.statemachine.test.support.State<S,E> ; this . org.springframework.statemachine.test.support.State<S,E> = org.springframework.statemachine.test.support.State<S,E> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
