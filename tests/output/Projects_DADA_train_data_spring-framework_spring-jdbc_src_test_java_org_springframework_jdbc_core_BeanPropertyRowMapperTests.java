<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { BeanPropertyRowMapper org.springframework.jdbc.core.BeanPropertyRowMapper = new BeanPropertyRowMapper ( Person .class ) ; org.springframework.jdbc.core.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.core.BeanPropertyRowMapper . setMappedClass ( java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanPropertyRowMapper < Person > org.springframework.jdbc.core.BeanPropertyRowMapper<org.springframework.jdbc.core.Person> = new BeanPropertyRowMapper <> ( Person .class ) ; org.springframework.jdbc.core.BeanPropertyRowMapper<org.springframework.jdbc.core.Person> . setMappedClass ( Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mock org.springframework.jdbc.core.Mock = new Mock ( ) ; java.util.List<org.springframework.jdbc.core.Person> < Person > java.util.List<org.springframework.jdbc.core.Person> = org.springframework.jdbc.core.Mock . getJdbcTemplate ( ) . query ( STRING , new BeanPropertyRowMapper <> ( Person .class ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.Person> . size ( ) ) ; verifyPerson ( java.util.List<org.springframework.jdbc.core.Person> . get ( NUMBER ) ) ; org.springframework.jdbc.core.Mock . verifyClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mock org.springframework.jdbc.core.Mock = new Mock ( ) ; java.util.List<org.springframework.jdbc.core.ConcretePerson> < ConcretePerson > java.util.List<org.springframework.jdbc.core.ConcretePerson> = org.springframework.jdbc.core.Mock . getJdbcTemplate ( ) . query ( STRING , new BeanPropertyRowMapper <> ( ConcretePerson .class ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.ConcretePerson> . size ( ) ) ; verifyPerson ( java.util.List<org.springframework.jdbc.core.ConcretePerson> . get ( NUMBER ) ) ; org.springframework.jdbc.core.Mock . verifyClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mock org.springframework.jdbc.core.Mock = new Mock ( ) ; java.util.List<org.springframework.jdbc.core.ConcretePerson> < ConcretePerson > java.util.List<org.springframework.jdbc.core.ConcretePerson> = org.springframework.jdbc.core.Mock . getJdbcTemplate ( ) . query ( STRING , new BeanPropertyRowMapper <> ( ConcretePerson .class , true ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.ConcretePerson> . size ( ) ) ; verifyPerson ( java.util.List<org.springframework.jdbc.core.ConcretePerson> . get ( NUMBER ) ) ; org.springframework.jdbc.core.Mock . verifyClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mock org.springframework.jdbc.core.Mock = new Mock ( ) ; java.util.List<org.springframework.jdbc.core.ExtendedPerson> < ExtendedPerson > java.util.List<org.springframework.jdbc.core.ExtendedPerson> = org.springframework.jdbc.core.Mock . getJdbcTemplate ( ) . query ( STRING , new BeanPropertyRowMapper <> ( ExtendedPerson .class ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.ExtendedPerson> . size ( ) ) ; ExtendedPerson org.springframework.jdbc.core.ExtendedPerson = java.util.List<org.springframework.jdbc.core.ExtendedPerson> . get ( NUMBER ) ; verifyPerson ( org.springframework.jdbc.core.ExtendedPerson ) ; org.springframework.jdbc.core.Mock . verifyClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mock org.springframework.jdbc.core.Mock = new Mock ( ) ; org.springframework.jdbc.core.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.core.Mock . getJdbcTemplate ( ) . query ( STRING , new BeanPropertyRowMapper <> ( ExtendedPerson .class , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanPropertyRowMapper < Person > org.springframework.jdbc.core.BeanPropertyRowMapper<org.springframework.jdbc.core.Person> = new BeanPropertyRowMapper <> ( Person .class ) ; Mock org.springframework.jdbc.core.Mock = new Mock ( MockType . TWO ) ; org.springframework.jdbc.core.ExpectedException . expect ( TypeMismatchException .class ) ; org.springframework.jdbc.core.Mock . getJdbcTemplate ( ) . query ( STRING , org.springframework.jdbc.core.BeanPropertyRowMapper<org.springframework.jdbc.core.Person> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mock org.springframework.jdbc.core.Mock = new Mock ( MockType . THREE ) ; java.util.List<org.springframework.jdbc.core.SpacePerson> < SpacePerson > java.util.List<org.springframework.jdbc.core.SpacePerson> = org.springframework.jdbc.core.Mock . getJdbcTemplate ( ) . query ( STRING , new BeanPropertyRowMapper <> ( SpacePerson .class ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.SpacePerson> . size ( ) ) ; verifyPerson ( java.util.List<org.springframework.jdbc.core.SpacePerson> . get ( NUMBER ) ) ; org.springframework.jdbc.core.Mock . verifyClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Mock org.springframework.jdbc.core.Mock = new Mock ( MockType . THREE ) ; java.util.List<org.springframework.jdbc.core.DatePerson> < DatePerson > java.util.List<org.springframework.jdbc.core.DatePerson> = org.springframework.jdbc.core.Mock . getJdbcTemplate ( ) . query ( STRING , new BeanPropertyRowMapper <> ( DatePerson .class ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.DatePerson> . size ( ) ) ; verifyPerson ( java.util.List<org.springframework.jdbc.core.DatePerson> . get ( NUMBER ) ) ; org.springframework.jdbc.core.Mock . verifyClosed ( ) ; }  <METHOD_END>
