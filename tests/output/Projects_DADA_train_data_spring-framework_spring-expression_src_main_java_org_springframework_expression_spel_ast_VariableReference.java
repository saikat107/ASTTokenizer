<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { super( int ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.ValueRef org.springframework.expression.spel.ast.ValueRef ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.SpelEvaluationException { if ( this . java.lang.String . boolean ( java.lang.String ) ) { return new ValueRef . ValueRef ( org.springframework.expression.spel.ast.ExpressionState . getActiveContextObject ( ) , this ) ; } if ( this . java.lang.String . boolean ( java.lang.String ) ) { return new ValueRef . ValueRef ( org.springframework.expression.spel.ast.ExpressionState . getRootContextObject ( ) , this ) ; } TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.ExpressionState . lookupVariable ( this . java.lang.String ) ; return new org.springframework.expression.spel.ast.VariableReference.VariableRef ( this . java.lang.String , org.springframework.expression.spel.ast.TypedValue , org.springframework.expression.spel.ast.ExpressionState . getEvaluationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.SpelEvaluationException { if ( this . java.lang.String . boolean ( java.lang.String ) ) { return org.springframework.expression.spel.ast.ExpressionState . getActiveContextObject ( ) ; } if ( this . java.lang.String . boolean ( java.lang.String ) ) { TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.ExpressionState . getRootContextObject ( ) ; this . exitTypeDescriptor = CodeFlow . toDescriptorFromObject ( org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; return org.springframework.expression.spel.ast.TypedValue ; } TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.ExpressionState . lookupVariable ( this . java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.TypedValue . getValue ( ) ; if ( java.lang.Object == null || ! java.lang.reflect.Modifier . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . int ( ) ) ) { this . exitTypeDescriptor = STRING ; } else { this . exitTypeDescriptor = CodeFlow . toDescriptorFromObject ( java.lang.Object ) ; } return org.springframework.expression.spel.ast.TypedValue ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ExpressionState org.springframework.expression.spel.ast.ExpressionState , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.ast.SpelEvaluationException { org.springframework.expression.spel.ast.ExpressionState . setVariable ( this . java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.SpelEvaluationException { return ! ( this . java.lang.String . boolean ( java.lang.String ) || this . java.lang.String . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , TypedValue org.springframework.expression.spel.ast.TypedValue , EvaluationContext org.springframework.expression.spel.ast.EvaluationContext ) { this . java.lang.String = java.lang.String ; this . org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.TypedValue ; this . org.springframework.expression.spel.ast.EvaluationContext = org.springframework.expression.spel.ast.EvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ) { return this . org.springframework.expression.spel.ast.TypedValue ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { this . org.springframework.expression.spel.ast.EvaluationContext . setVariable ( this . java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . exitTypeDescriptor != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { if ( this . java.lang.String . boolean ( java.lang.String ) ) { org.springframework.expression.spel.ast.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; } else { org.springframework.expression.spel.ast.MethodVisitor . visitVarInsn ( ALOAD , NUMBER ) ; org.springframework.expression.spel.ast.MethodVisitor . visitLdcInsn ( java.lang.String ) ; org.springframework.expression.spel.ast.MethodVisitor . visitMethodInsn ( INVOKEINTERFACE , STRING , STRING , STRING , true ) ; } CodeFlow . insertCheckCast ( org.springframework.expression.spel.ast.MethodVisitor , this . exitTypeDescriptor ) ; org.springframework.expression.spel.ast.CodeFlow . pushDescriptor ( this . exitTypeDescriptor ) ; }  <METHOD_END>
